
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001efb8  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  0801f0f0  0801f0f0  000200f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  080200a8  080200a8  000210a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08020180  08020180  000221a8  2**0
                  CONTENTS
  5 .ARM          00000008  08020180  08020180  00021180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08020188  08020188  000221a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08020188  08020188  00021188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0802018c  0802018c  0002118c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001a8  20000000  08020190  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002274  200001a8  08020338  000221a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000241c  08020338  0002241c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000221a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00044083  00000000  00000000  000221d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aa9c  00000000  00000000  00066255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003608  00000000  00000000  00070cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000295b  00000000  00000000  00074300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d10  00000000  00000000  00076c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004537c  00000000  00000000  000a096b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cefce  00000000  00000000  000e5ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b4cb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e448  00000000  00000000  001b4cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001c3140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200001a8 	.word	0x200001a8
 8000154:	00000000 	.word	0x00000000
 8000158:	0801f0d8 	.word	0x0801f0d8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200001ac 	.word	0x200001ac
 8000174:	0801f0d8 	.word	0x0801f0d8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	@ 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dbe:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	@ 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	@ 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	@ 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__aeabi_f2iz>:
 800100c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001010:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001014:	d30f      	bcc.n	8001036 <__aeabi_f2iz+0x2a>
 8001016:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800101a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101e:	d90d      	bls.n	800103c <__aeabi_f2iz+0x30>
 8001020:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001024:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001028:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800102c:	fa23 f002 	lsr.w	r0, r3, r2
 8001030:	bf18      	it	ne
 8001032:	4240      	negne	r0, r0
 8001034:	4770      	bx	lr
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	4770      	bx	lr
 800103c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001040:	d101      	bne.n	8001046 <__aeabi_f2iz+0x3a>
 8001042:	0242      	lsls	r2, r0, #9
 8001044:	d105      	bne.n	8001052 <__aeabi_f2iz+0x46>
 8001046:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800104a:	bf08      	it	eq
 800104c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr

08001058 <__aeabi_f2uiz>:
 8001058:	0042      	lsls	r2, r0, #1
 800105a:	d20e      	bcs.n	800107a <__aeabi_f2uiz+0x22>
 800105c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001060:	d30b      	bcc.n	800107a <__aeabi_f2uiz+0x22>
 8001062:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001066:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106a:	d409      	bmi.n	8001080 <__aeabi_f2uiz+0x28>
 800106c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001070:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001074:	fa23 f002 	lsr.w	r0, r3, r2
 8001078:	4770      	bx	lr
 800107a:	f04f 0000 	mov.w	r0, #0
 800107e:	4770      	bx	lr
 8001080:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001084:	d101      	bne.n	800108a <__aeabi_f2uiz+0x32>
 8001086:	0242      	lsls	r2, r0, #9
 8001088:	d102      	bne.n	8001090 <__aeabi_f2uiz+0x38>
 800108a:	f04f 30ff 	mov.w	r0, #4294967295
 800108e:	4770      	bx	lr
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <__aeabi_ldivmod>:
 8001098:	b97b      	cbnz	r3, 80010ba <__aeabi_ldivmod+0x22>
 800109a:	b972      	cbnz	r2, 80010ba <__aeabi_ldivmod+0x22>
 800109c:	2900      	cmp	r1, #0
 800109e:	bfbe      	ittt	lt
 80010a0:	2000      	movlt	r0, #0
 80010a2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80010a6:	e006      	blt.n	80010b6 <__aeabi_ldivmod+0x1e>
 80010a8:	bf08      	it	eq
 80010aa:	2800      	cmpeq	r0, #0
 80010ac:	bf1c      	itt	ne
 80010ae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80010b2:	f04f 30ff 	movne.w	r0, #4294967295
 80010b6:	f000 b9b5 	b.w	8001424 <__aeabi_idiv0>
 80010ba:	f1ad 0c08 	sub.w	ip, sp, #8
 80010be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c2:	2900      	cmp	r1, #0
 80010c4:	db09      	blt.n	80010da <__aeabi_ldivmod+0x42>
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db1a      	blt.n	8001100 <__aeabi_ldivmod+0x68>
 80010ca:	f000 f84d 	bl	8001168 <__udivmoddi4>
 80010ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr
 80010da:	4240      	negs	r0, r0
 80010dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db1b      	blt.n	800111c <__aeabi_ldivmod+0x84>
 80010e4:	f000 f840 	bl	8001168 <__udivmoddi4>
 80010e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010f0:	b004      	add	sp, #16
 80010f2:	4240      	negs	r0, r0
 80010f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f8:	4252      	negs	r2, r2
 80010fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010fe:	4770      	bx	lr
 8001100:	4252      	negs	r2, r2
 8001102:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001106:	f000 f82f 	bl	8001168 <__udivmoddi4>
 800110a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800110e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001112:	b004      	add	sp, #16
 8001114:	4240      	negs	r0, r0
 8001116:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800111a:	4770      	bx	lr
 800111c:	4252      	negs	r2, r2
 800111e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001122:	f000 f821 	bl	8001168 <__udivmoddi4>
 8001126:	f8dd e004 	ldr.w	lr, [sp, #4]
 800112a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800112e:	b004      	add	sp, #16
 8001130:	4252      	negs	r2, r2
 8001132:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001136:	4770      	bx	lr

08001138 <__aeabi_uldivmod>:
 8001138:	b953      	cbnz	r3, 8001150 <__aeabi_uldivmod+0x18>
 800113a:	b94a      	cbnz	r2, 8001150 <__aeabi_uldivmod+0x18>
 800113c:	2900      	cmp	r1, #0
 800113e:	bf08      	it	eq
 8001140:	2800      	cmpeq	r0, #0
 8001142:	bf1c      	itt	ne
 8001144:	f04f 31ff 	movne.w	r1, #4294967295
 8001148:	f04f 30ff 	movne.w	r0, #4294967295
 800114c:	f000 b96a 	b.w	8001424 <__aeabi_idiv0>
 8001150:	f1ad 0c08 	sub.w	ip, sp, #8
 8001154:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001158:	f000 f806 	bl	8001168 <__udivmoddi4>
 800115c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001164:	b004      	add	sp, #16
 8001166:	4770      	bx	lr

08001168 <__udivmoddi4>:
 8001168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800116c:	9d08      	ldr	r5, [sp, #32]
 800116e:	460c      	mov	r4, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d14e      	bne.n	8001212 <__udivmoddi4+0xaa>
 8001174:	4694      	mov	ip, r2
 8001176:	458c      	cmp	ip, r1
 8001178:	4686      	mov	lr, r0
 800117a:	fab2 f282 	clz	r2, r2
 800117e:	d962      	bls.n	8001246 <__udivmoddi4+0xde>
 8001180:	b14a      	cbz	r2, 8001196 <__udivmoddi4+0x2e>
 8001182:	f1c2 0320 	rsb	r3, r2, #32
 8001186:	4091      	lsls	r1, r2
 8001188:	fa20 f303 	lsr.w	r3, r0, r3
 800118c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001190:	4319      	orrs	r1, r3
 8001192:	fa00 fe02 	lsl.w	lr, r0, r2
 8001196:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800119a:	fa1f f68c 	uxth.w	r6, ip
 800119e:	fbb1 f4f7 	udiv	r4, r1, r7
 80011a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011a6:	fb07 1114 	mls	r1, r7, r4, r1
 80011aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011ae:	fb04 f106 	mul.w	r1, r4, r6
 80011b2:	4299      	cmp	r1, r3
 80011b4:	d90a      	bls.n	80011cc <__udivmoddi4+0x64>
 80011b6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80011be:	f080 8112 	bcs.w	80013e6 <__udivmoddi4+0x27e>
 80011c2:	4299      	cmp	r1, r3
 80011c4:	f240 810f 	bls.w	80013e6 <__udivmoddi4+0x27e>
 80011c8:	3c02      	subs	r4, #2
 80011ca:	4463      	add	r3, ip
 80011cc:	1a59      	subs	r1, r3, r1
 80011ce:	fa1f f38e 	uxth.w	r3, lr
 80011d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011d6:	fb07 1110 	mls	r1, r7, r0, r1
 80011da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011de:	fb00 f606 	mul.w	r6, r0, r6
 80011e2:	429e      	cmp	r6, r3
 80011e4:	d90a      	bls.n	80011fc <__udivmoddi4+0x94>
 80011e6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80011ee:	f080 80fc 	bcs.w	80013ea <__udivmoddi4+0x282>
 80011f2:	429e      	cmp	r6, r3
 80011f4:	f240 80f9 	bls.w	80013ea <__udivmoddi4+0x282>
 80011f8:	4463      	add	r3, ip
 80011fa:	3802      	subs	r0, #2
 80011fc:	1b9b      	subs	r3, r3, r6
 80011fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001202:	2100      	movs	r1, #0
 8001204:	b11d      	cbz	r5, 800120e <__udivmoddi4+0xa6>
 8001206:	40d3      	lsrs	r3, r2
 8001208:	2200      	movs	r2, #0
 800120a:	e9c5 3200 	strd	r3, r2, [r5]
 800120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001212:	428b      	cmp	r3, r1
 8001214:	d905      	bls.n	8001222 <__udivmoddi4+0xba>
 8001216:	b10d      	cbz	r5, 800121c <__udivmoddi4+0xb4>
 8001218:	e9c5 0100 	strd	r0, r1, [r5]
 800121c:	2100      	movs	r1, #0
 800121e:	4608      	mov	r0, r1
 8001220:	e7f5      	b.n	800120e <__udivmoddi4+0xa6>
 8001222:	fab3 f183 	clz	r1, r3
 8001226:	2900      	cmp	r1, #0
 8001228:	d146      	bne.n	80012b8 <__udivmoddi4+0x150>
 800122a:	42a3      	cmp	r3, r4
 800122c:	d302      	bcc.n	8001234 <__udivmoddi4+0xcc>
 800122e:	4290      	cmp	r0, r2
 8001230:	f0c0 80f0 	bcc.w	8001414 <__udivmoddi4+0x2ac>
 8001234:	1a86      	subs	r6, r0, r2
 8001236:	eb64 0303 	sbc.w	r3, r4, r3
 800123a:	2001      	movs	r0, #1
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e6      	beq.n	800120e <__udivmoddi4+0xa6>
 8001240:	e9c5 6300 	strd	r6, r3, [r5]
 8001244:	e7e3      	b.n	800120e <__udivmoddi4+0xa6>
 8001246:	2a00      	cmp	r2, #0
 8001248:	f040 8090 	bne.w	800136c <__udivmoddi4+0x204>
 800124c:	eba1 040c 	sub.w	r4, r1, ip
 8001250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001254:	fa1f f78c 	uxth.w	r7, ip
 8001258:	2101      	movs	r1, #1
 800125a:	fbb4 f6f8 	udiv	r6, r4, r8
 800125e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001262:	fb08 4416 	mls	r4, r8, r6, r4
 8001266:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800126a:	fb07 f006 	mul.w	r0, r7, r6
 800126e:	4298      	cmp	r0, r3
 8001270:	d908      	bls.n	8001284 <__udivmoddi4+0x11c>
 8001272:	eb1c 0303 	adds.w	r3, ip, r3
 8001276:	f106 34ff 	add.w	r4, r6, #4294967295
 800127a:	d202      	bcs.n	8001282 <__udivmoddi4+0x11a>
 800127c:	4298      	cmp	r0, r3
 800127e:	f200 80cd 	bhi.w	800141c <__udivmoddi4+0x2b4>
 8001282:	4626      	mov	r6, r4
 8001284:	1a1c      	subs	r4, r3, r0
 8001286:	fa1f f38e 	uxth.w	r3, lr
 800128a:	fbb4 f0f8 	udiv	r0, r4, r8
 800128e:	fb08 4410 	mls	r4, r8, r0, r4
 8001292:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001296:	fb00 f707 	mul.w	r7, r0, r7
 800129a:	429f      	cmp	r7, r3
 800129c:	d908      	bls.n	80012b0 <__udivmoddi4+0x148>
 800129e:	eb1c 0303 	adds.w	r3, ip, r3
 80012a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80012a6:	d202      	bcs.n	80012ae <__udivmoddi4+0x146>
 80012a8:	429f      	cmp	r7, r3
 80012aa:	f200 80b0 	bhi.w	800140e <__udivmoddi4+0x2a6>
 80012ae:	4620      	mov	r0, r4
 80012b0:	1bdb      	subs	r3, r3, r7
 80012b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012b6:	e7a5      	b.n	8001204 <__udivmoddi4+0x9c>
 80012b8:	f1c1 0620 	rsb	r6, r1, #32
 80012bc:	408b      	lsls	r3, r1
 80012be:	fa22 f706 	lsr.w	r7, r2, r6
 80012c2:	431f      	orrs	r7, r3
 80012c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80012c8:	fa04 f301 	lsl.w	r3, r4, r1
 80012cc:	ea43 030c 	orr.w	r3, r3, ip
 80012d0:	40f4      	lsrs	r4, r6
 80012d2:	fa00 f801 	lsl.w	r8, r0, r1
 80012d6:	0c38      	lsrs	r0, r7, #16
 80012d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80012dc:	fbb4 fef0 	udiv	lr, r4, r0
 80012e0:	fa1f fc87 	uxth.w	ip, r7
 80012e4:	fb00 441e 	mls	r4, r0, lr, r4
 80012e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80012ec:	fb0e f90c 	mul.w	r9, lr, ip
 80012f0:	45a1      	cmp	r9, r4
 80012f2:	fa02 f201 	lsl.w	r2, r2, r1
 80012f6:	d90a      	bls.n	800130e <__udivmoddi4+0x1a6>
 80012f8:	193c      	adds	r4, r7, r4
 80012fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80012fe:	f080 8084 	bcs.w	800140a <__udivmoddi4+0x2a2>
 8001302:	45a1      	cmp	r9, r4
 8001304:	f240 8081 	bls.w	800140a <__udivmoddi4+0x2a2>
 8001308:	f1ae 0e02 	sub.w	lr, lr, #2
 800130c:	443c      	add	r4, r7
 800130e:	eba4 0409 	sub.w	r4, r4, r9
 8001312:	fa1f f983 	uxth.w	r9, r3
 8001316:	fbb4 f3f0 	udiv	r3, r4, r0
 800131a:	fb00 4413 	mls	r4, r0, r3, r4
 800131e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001322:	fb03 fc0c 	mul.w	ip, r3, ip
 8001326:	45a4      	cmp	ip, r4
 8001328:	d907      	bls.n	800133a <__udivmoddi4+0x1d2>
 800132a:	193c      	adds	r4, r7, r4
 800132c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001330:	d267      	bcs.n	8001402 <__udivmoddi4+0x29a>
 8001332:	45a4      	cmp	ip, r4
 8001334:	d965      	bls.n	8001402 <__udivmoddi4+0x29a>
 8001336:	3b02      	subs	r3, #2
 8001338:	443c      	add	r4, r7
 800133a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800133e:	fba0 9302 	umull	r9, r3, r0, r2
 8001342:	eba4 040c 	sub.w	r4, r4, ip
 8001346:	429c      	cmp	r4, r3
 8001348:	46ce      	mov	lr, r9
 800134a:	469c      	mov	ip, r3
 800134c:	d351      	bcc.n	80013f2 <__udivmoddi4+0x28a>
 800134e:	d04e      	beq.n	80013ee <__udivmoddi4+0x286>
 8001350:	b155      	cbz	r5, 8001368 <__udivmoddi4+0x200>
 8001352:	ebb8 030e 	subs.w	r3, r8, lr
 8001356:	eb64 040c 	sbc.w	r4, r4, ip
 800135a:	fa04 f606 	lsl.w	r6, r4, r6
 800135e:	40cb      	lsrs	r3, r1
 8001360:	431e      	orrs	r6, r3
 8001362:	40cc      	lsrs	r4, r1
 8001364:	e9c5 6400 	strd	r6, r4, [r5]
 8001368:	2100      	movs	r1, #0
 800136a:	e750      	b.n	800120e <__udivmoddi4+0xa6>
 800136c:	f1c2 0320 	rsb	r3, r2, #32
 8001370:	fa20 f103 	lsr.w	r1, r0, r3
 8001374:	fa0c fc02 	lsl.w	ip, ip, r2
 8001378:	fa24 f303 	lsr.w	r3, r4, r3
 800137c:	4094      	lsls	r4, r2
 800137e:	430c      	orrs	r4, r1
 8001380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001384:	fa00 fe02 	lsl.w	lr, r0, r2
 8001388:	fa1f f78c 	uxth.w	r7, ip
 800138c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001390:	fb08 3110 	mls	r1, r8, r0, r3
 8001394:	0c23      	lsrs	r3, r4, #16
 8001396:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800139a:	fb00 f107 	mul.w	r1, r0, r7
 800139e:	4299      	cmp	r1, r3
 80013a0:	d908      	bls.n	80013b4 <__udivmoddi4+0x24c>
 80013a2:	eb1c 0303 	adds.w	r3, ip, r3
 80013a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013aa:	d22c      	bcs.n	8001406 <__udivmoddi4+0x29e>
 80013ac:	4299      	cmp	r1, r3
 80013ae:	d92a      	bls.n	8001406 <__udivmoddi4+0x29e>
 80013b0:	3802      	subs	r0, #2
 80013b2:	4463      	add	r3, ip
 80013b4:	1a5b      	subs	r3, r3, r1
 80013b6:	b2a4      	uxth	r4, r4
 80013b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80013bc:	fb08 3311 	mls	r3, r8, r1, r3
 80013c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013c4:	fb01 f307 	mul.w	r3, r1, r7
 80013c8:	42a3      	cmp	r3, r4
 80013ca:	d908      	bls.n	80013de <__udivmoddi4+0x276>
 80013cc:	eb1c 0404 	adds.w	r4, ip, r4
 80013d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013d4:	d213      	bcs.n	80013fe <__udivmoddi4+0x296>
 80013d6:	42a3      	cmp	r3, r4
 80013d8:	d911      	bls.n	80013fe <__udivmoddi4+0x296>
 80013da:	3902      	subs	r1, #2
 80013dc:	4464      	add	r4, ip
 80013de:	1ae4      	subs	r4, r4, r3
 80013e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013e4:	e739      	b.n	800125a <__udivmoddi4+0xf2>
 80013e6:	4604      	mov	r4, r0
 80013e8:	e6f0      	b.n	80011cc <__udivmoddi4+0x64>
 80013ea:	4608      	mov	r0, r1
 80013ec:	e706      	b.n	80011fc <__udivmoddi4+0x94>
 80013ee:	45c8      	cmp	r8, r9
 80013f0:	d2ae      	bcs.n	8001350 <__udivmoddi4+0x1e8>
 80013f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80013f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80013fa:	3801      	subs	r0, #1
 80013fc:	e7a8      	b.n	8001350 <__udivmoddi4+0x1e8>
 80013fe:	4631      	mov	r1, r6
 8001400:	e7ed      	b.n	80013de <__udivmoddi4+0x276>
 8001402:	4603      	mov	r3, r0
 8001404:	e799      	b.n	800133a <__udivmoddi4+0x1d2>
 8001406:	4630      	mov	r0, r6
 8001408:	e7d4      	b.n	80013b4 <__udivmoddi4+0x24c>
 800140a:	46d6      	mov	lr, sl
 800140c:	e77f      	b.n	800130e <__udivmoddi4+0x1a6>
 800140e:	4463      	add	r3, ip
 8001410:	3802      	subs	r0, #2
 8001412:	e74d      	b.n	80012b0 <__udivmoddi4+0x148>
 8001414:	4606      	mov	r6, r0
 8001416:	4623      	mov	r3, r4
 8001418:	4608      	mov	r0, r1
 800141a:	e70f      	b.n	800123c <__udivmoddi4+0xd4>
 800141c:	3e02      	subs	r6, #2
 800141e:	4463      	add	r3, ip
 8001420:	e730      	b.n	8001284 <__udivmoddi4+0x11c>
 8001422:	bf00      	nop

08001424 <__aeabi_idiv0>:
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <Reset_BME280>:
  *
  * @param  None
  *
  * @retval None
  */
void Reset_BME280(void){
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af04      	add	r7, sp, #16

	uint8_t data = 0xB6;
 800142e:	23b6      	movs	r3, #182	@ 0xb6
 8001430:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&bme_i2c, BME280_ADDR, RESET_REG_ADDR, 1, &data, 1, HAL_MAX_DELAY);
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	2301      	movs	r3, #1
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	22e0      	movs	r2, #224	@ 0xe0
 8001444:	21ec      	movs	r1, #236	@ 0xec
 8001446:	4813      	ldr	r0, [pc, #76]	@ (8001494 <Reset_BME280+0x6c>)
 8001448:	f005 f822 	bl	8006490 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800144c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001450:	f001 ff02 	bl	8003258 <HAL_Delay>

	//Checking for is reset process done
	uint8_t id;
	HAL_I2C_Mem_Read(&bme_i2c, BME280_ADDR, CHIP_ID_REG_ADDR, 1, &id, 1, HAL_MAX_DELAY);
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	2301      	movs	r3, #1
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	1dbb      	adds	r3, r7, #6
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2301      	movs	r3, #1
 8001464:	22d0      	movs	r2, #208	@ 0xd0
 8001466:	21ec      	movs	r1, #236	@ 0xec
 8001468:	480a      	ldr	r0, [pc, #40]	@ (8001494 <Reset_BME280+0x6c>)
 800146a:	f005 f925 	bl	80066b8 <HAL_I2C_Mem_Read>

	//If value of id register is not equal to BME280 chip id which is 0x60, wait until equal to each other
	while(id != CHIP_ID_BME){
 800146e:	e009      	b.n	8001484 <Reset_BME280+0x5c>
		APP_LOG(0, VLEVEL_M, "BME280-> Undefined chip id\n");
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <Reset_BME280+0x70>)
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2002      	movs	r0, #2
 8001478:	f01c fa08 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(500);
 800147c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001480:	f001 feea 	bl	8003258 <HAL_Delay>
	while(id != CHIP_ID_BME){
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b60      	cmp	r3, #96	@ 0x60
 8001488:	d1f2      	bne.n	8001470 <Reset_BME280+0x48>
	}
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000254 	.word	0x20000254
 8001498:	0801f0f0 	.word	0x0801f0f0

0800149c <BME280_SleepMode>:
  *
  * @param  None
  *
  * @retval None
  */
HAL_StatusTypeDef BME280_SleepMode(void){
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af04      	add	r7, sp, #16
	uint8_t init =0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71fb      	strb	r3, [r7, #7]
	init = BME280_SLEEP_MODE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Mem_Write(&bme_i2c, BME280_ADDR, CTRL_MEAS_REG_ADDR, 1, &init, 1, 1000);
 80014aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ae:	9302      	str	r3, [sp, #8]
 80014b0:	2301      	movs	r3, #1
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2301      	movs	r3, #1
 80014ba:	22f4      	movs	r2, #244	@ 0xf4
 80014bc:	21ec      	movs	r1, #236	@ 0xec
 80014be:	4804      	ldr	r0, [pc, #16]	@ (80014d0 <BME280_SleepMode+0x34>)
 80014c0:	f004 ffe6 	bl	8006490 <HAL_I2C_Mem_Write>
 80014c4:	4603      	mov	r3, r0

}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000254 	.word	0x20000254

080014d4 <Calibdata_BME280>:
  *
  * @param  None
  *
  * @retval None
  */
void Calibdata_BME280(void){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	@ 0x38
 80014d8:	af04      	add	r7, sp, #16
	uint8_t CalibrationData1[26];
	uint8_t CalibrationData2[7];

	HAL_I2C_Mem_Read(&bme_i2c, BME280_ADDR, CALIB_DATA00_25_BASEADDR, 1, CalibrationData1, 26, HAL_MAX_DELAY); //From 0x88 to 0xA1
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	231a      	movs	r3, #26
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	2288      	movs	r2, #136	@ 0x88
 80014ee:	21ec      	movs	r1, #236	@ 0xec
 80014f0:	4859      	ldr	r0, [pc, #356]	@ (8001658 <Calibdata_BME280+0x184>)
 80014f2:	f005 f8e1 	bl	80066b8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&bme_i2c, BME280_ADDR, CALIB_DATA26_41_BASEADDR, 1, CalibrationData2, 7, HAL_MAX_DELAY); //From 0xE1 to 0xE7
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	2307      	movs	r3, #7
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	22e1      	movs	r2, #225	@ 0xe1
 8001508:	21ec      	movs	r1, #236	@ 0xec
 800150a:	4853      	ldr	r0, [pc, #332]	@ (8001658 <Calibdata_BME280+0x184>)
 800150c:	f005 f8d4 	bl	80066b8 <HAL_I2C_Mem_Read>

	dig_T1 = (CalibrationData1[1]<<8) | CalibrationData1[0];
 8001510:	7b7b      	ldrb	r3, [r7, #13]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	b21b      	sxth	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b21b      	sxth	r3, r3
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b4e      	ldr	r3, [pc, #312]	@ (800165c <Calibdata_BME280+0x188>)
 8001522:	801a      	strh	r2, [r3, #0]
	dig_T2 = (CalibrationData1[3]<<8) | CalibrationData1[2];
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <Calibdata_BME280+0x18c>)
 8001534:	801a      	strh	r2, [r3, #0]
	dig_T3 = (CalibrationData1[5]<<8) | CalibrationData1[4];
 8001536:	7c7b      	ldrb	r3, [r7, #17]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7c3b      	ldrb	r3, [r7, #16]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b47      	ldr	r3, [pc, #284]	@ (8001664 <Calibdata_BME280+0x190>)
 8001546:	801a      	strh	r2, [r3, #0]
	dig_P1 = (CalibrationData1[7]<<8) | CalibrationData1[6];
 8001548:	7cfb      	ldrb	r3, [r7, #19]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	7cbb      	ldrb	r3, [r7, #18]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <Calibdata_BME280+0x194>)
 800155a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (CalibrationData1[9]<<8) | CalibrationData1[8];
 800155c:	7d7b      	ldrb	r3, [r7, #21]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	7d3b      	ldrb	r3, [r7, #20]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b40      	ldr	r3, [pc, #256]	@ (800166c <Calibdata_BME280+0x198>)
 800156c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (CalibrationData1[11]<<8) | CalibrationData1[10];
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7dbb      	ldrb	r3, [r7, #22]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b3c      	ldr	r3, [pc, #240]	@ (8001670 <Calibdata_BME280+0x19c>)
 800157e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (CalibrationData1[13]<<8) | CalibrationData1[12];
 8001580:	7e7b      	ldrb	r3, [r7, #25]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	7e3b      	ldrb	r3, [r7, #24]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <Calibdata_BME280+0x1a0>)
 8001590:	801a      	strh	r2, [r3, #0]
	dig_P5 = (CalibrationData1[15]<<8) | CalibrationData1[14];
 8001592:	7efb      	ldrb	r3, [r7, #27]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	7ebb      	ldrb	r3, [r7, #26]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
 80015a0:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <Calibdata_BME280+0x1a4>)
 80015a2:	801a      	strh	r2, [r3, #0]
	dig_P6 = (CalibrationData1[17]<<8) | CalibrationData1[16];
 80015a4:	7f7b      	ldrb	r3, [r7, #29]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7f3b      	ldrb	r3, [r7, #28]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	4b32      	ldr	r3, [pc, #200]	@ (800167c <Calibdata_BME280+0x1a8>)
 80015b4:	801a      	strh	r2, [r3, #0]
	dig_P7 = (CalibrationData1[19]<<8) | CalibrationData1[18];
 80015b6:	7ffb      	ldrb	r3, [r7, #31]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7fbb      	ldrb	r3, [r7, #30]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <Calibdata_BME280+0x1ac>)
 80015c6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (CalibrationData1[21]<<8) | CalibrationData1[20];
 80015c8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <Calibdata_BME280+0x1b0>)
 80015dc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (CalibrationData1[23]<<8) | CalibrationData1[22];
 80015de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <Calibdata_BME280+0x1b4>)
 80015f2:	801a      	strh	r2, [r3, #0]
	dig_H1 = (CalibrationData1[25]);
 80015f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <Calibdata_BME280+0x1b8>)
 80015fc:	801a      	strh	r2, [r3, #0]

	dig_H2 = (CalibrationData2[1]<<8) | CalibrationData2[0];
 80015fe:	797b      	ldrb	r3, [r7, #5]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	793b      	ldrb	r3, [r7, #4]
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21a      	sxth	r2, r3
 800160c:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <Calibdata_BME280+0x1bc>)
 800160e:	801a      	strh	r2, [r3, #0]
	dig_H3 = (CalibrationData2[2]);
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	461a      	mov	r2, r3
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <Calibdata_BME280+0x1c0>)
 8001616:	801a      	strh	r2, [r3, #0]
	dig_H4 = (CalibrationData2[3]<<4) | (CalibrationData2[4] & 0x0F);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	b21a      	sxth	r2, r3
 800161e:	7a3b      	ldrb	r3, [r7, #8]
 8001620:	b21b      	sxth	r3, r3
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21a      	sxth	r2, r3
 800162c:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <Calibdata_BME280+0x1c4>)
 800162e:	801a      	strh	r2, [r3, #0]
	dig_H5 = (CalibrationData2[5]<<4) | (CalibrationData2[4]>>4);
 8001630:	7a7b      	ldrb	r3, [r7, #9]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	b21a      	sxth	r2, r3
 8001636:	7a3b      	ldrb	r3, [r7, #8]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	b2db      	uxtb	r3, r3
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <Calibdata_BME280+0x1c8>)
 8001644:	801a      	strh	r2, [r3, #0]
	dig_H6 = (CalibrationData2[6]);
 8001646:	7abb      	ldrb	r3, [r7, #10]
 8001648:	b21a      	sxth	r2, r3
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <Calibdata_BME280+0x1cc>)
 800164c:	801a      	strh	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000254 	.word	0x20000254
 800165c:	200001c4 	.word	0x200001c4
 8001660:	200001cc 	.word	0x200001cc
 8001664:	200001ce 	.word	0x200001ce
 8001668:	200001c6 	.word	0x200001c6
 800166c:	200001d0 	.word	0x200001d0
 8001670:	200001d2 	.word	0x200001d2
 8001674:	200001d4 	.word	0x200001d4
 8001678:	200001d6 	.word	0x200001d6
 800167c:	200001d8 	.word	0x200001d8
 8001680:	200001da 	.word	0x200001da
 8001684:	200001dc 	.word	0x200001dc
 8001688:	200001de 	.word	0x200001de
 800168c:	200001c8 	.word	0x200001c8
 8001690:	200001e0 	.word	0x200001e0
 8001694:	200001ca 	.word	0x200001ca
 8001698:	200001e2 	.word	0x200001e2
 800169c:	200001e4 	.word	0x200001e4
 80016a0:	200001e6 	.word	0x200001e6

080016a4 <RawdataBME280>:
  *
  * @param  None
  *
  * @retval None
  */
Raw_Data_t RawdataBME280(void){
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b08d      	sub	sp, #52	@ 0x34
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	6078      	str	r0, [r7, #4]

	uint8_t rawData[8];
	Raw_Data_t data;

	HAL_I2C_Mem_Read(&bme_i2c, BME280_ADDR, RAWDATA_BASEADDR, 1, rawData, 8, 1000);
 80016ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2308      	movs	r3, #8
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	22f7      	movs	r2, #247	@ 0xf7
 80016c0:	21ec      	movs	r1, #236	@ 0xec
 80016c2:	4814      	ldr	r0, [pc, #80]	@ (8001714 <RawdataBME280+0x70>)
 80016c4:	f004 fff8 	bl	80066b8 <HAL_I2C_Mem_Read>

	//Separation of raw data buffer for temperature, humidity and pressure
	data.pressr = (rawData[0]<<12)|(rawData[1]<<4)|(rawData[2]>>4);
 80016c8:	7e3b      	ldrb	r3, [r7, #24]
 80016ca:	031a      	lsls	r2, r3, #12
 80016cc:	7e7b      	ldrb	r3, [r7, #25]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4313      	orrs	r3, r2
 80016d2:	7eba      	ldrb	r2, [r7, #26]
 80016d4:	0912      	lsrs	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
	data.tempr = (rawData[3]<<12)|(rawData[4]<<4)|(rawData[5]>>4);
 80016dc:	7efb      	ldrb	r3, [r7, #27]
 80016de:	031a      	lsls	r2, r3, #12
 80016e0:	7f3b      	ldrb	r3, [r7, #28]
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4313      	orrs	r3, r2
 80016e6:	7f7a      	ldrb	r2, [r7, #29]
 80016e8:	0912      	lsrs	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
	data.humr = (rawData[6]<<8)|(rawData[7]);
 80016f0:	7fbb      	ldrb	r3, [r7, #30]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	7ffa      	ldrb	r2, [r7, #31]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]

	return data;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	461c      	mov	r4, r3
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	3724      	adds	r7, #36	@ 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	20000254 	.word	0x20000254

08001718 <BME280_measure_Temp>:
  * @param  Raw temperature data
  *
  * @retval Processed temperature data
  */
int32_t BME280_measure_Temp(int32_t adc_T)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	10da      	asrs	r2, r3, #3
 8001724:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <BME280_measure_Temp+0x70>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a17      	ldr	r2, [pc, #92]	@ (800178c <BME280_measure_Temp+0x74>)
 800172e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	12db      	asrs	r3, r3, #11
 8001738:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	111b      	asrs	r3, r3, #4
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <BME280_measure_Temp+0x70>)
 8001740:	8812      	ldrh	r2, [r2, #0]
 8001742:	1a9b      	subs	r3, r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	1112      	asrs	r2, r2, #4
 8001748:	490f      	ldr	r1, [pc, #60]	@ (8001788 <BME280_measure_Temp+0x70>)
 800174a:	8809      	ldrh	r1, [r1, #0]
 800174c:	1a52      	subs	r2, r2, r1
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	131b      	asrs	r3, r3, #12
 8001754:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <BME280_measure_Temp+0x78>)
 8001756:	f9b2 2000 	ldrsh.w	r2, [r2]
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	139b      	asrs	r3, r3, #14
 8001760:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4413      	add	r3, r2
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <BME280_measure_Temp+0x7c>)
 800176a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <BME280_measure_Temp+0x7c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3380      	adds	r3, #128	@ 0x80
 8001778:	121b      	asrs	r3, r3, #8
 800177a:	60fb      	str	r3, [r7, #12]
	return T;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	4618      	mov	r0, r3
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	200001c4 	.word	0x200001c4
 800178c:	200001cc 	.word	0x200001cc
 8001790:	200001ce 	.word	0x200001ce
 8001794:	200001e8 	.word	0x200001e8

08001798 <BME280_measure_Press>:
  * @param  Raw pressure data
  *
  * @retval Processed pressure data
  */
uint32_t BME280_measure_Press(int32_t adc_P)
{
 8001798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800179c:	b0ca      	sub	sp, #296	@ 0x128
 800179e:	af00      	add	r7, sp, #0
 80017a0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
 80017a4:	4bae      	ldr	r3, [pc, #696]	@ (8001a60 <BME280_measure_Press+0x2c8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	17da      	asrs	r2, r3, #31
 80017aa:	461c      	mov	r4, r3
 80017ac:	4615      	mov	r5, r2
 80017ae:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80017b2:	f145 3bff 	adc.w	fp, r5, #4294967295
 80017b6:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80017ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80017be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017c2:	fb03 f102 	mul.w	r1, r3, r2
 80017c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80017ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	18ca      	adds	r2, r1, r3
 80017d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017d8:	fba3 8903 	umull	r8, r9, r3, r3
 80017dc:	eb02 0309 	add.w	r3, r2, r9
 80017e0:	4699      	mov	r9, r3
 80017e2:	4ba0      	ldr	r3, [pc, #640]	@ (8001a64 <BME280_measure_Press+0x2cc>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	17da      	asrs	r2, r3, #31
 80017ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80017f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80017f4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80017f8:	4603      	mov	r3, r0
 80017fa:	fb03 f209 	mul.w	r2, r3, r9
 80017fe:	460b      	mov	r3, r1
 8001800:	fb08 f303 	mul.w	r3, r8, r3
 8001804:	4413      	add	r3, r2
 8001806:	4602      	mov	r2, r0
 8001808:	fba8 2102 	umull	r2, r1, r8, r2
 800180c:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001810:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001814:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001818:	4413      	add	r3, r2
 800181a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800181e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001822:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001826:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800182a:	4b8f      	ldr	r3, [pc, #572]	@ (8001a68 <BME280_measure_Press+0x2d0>)
 800182c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001830:	b21b      	sxth	r3, r3
 8001832:	17da      	asrs	r2, r3, #31
 8001834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001838:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800183c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001840:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001844:	462a      	mov	r2, r5
 8001846:	fb02 f203 	mul.w	r2, r2, r3
 800184a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800184e:	4621      	mov	r1, r4
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	441a      	add	r2, r3
 8001856:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800185a:	4621      	mov	r1, r4
 800185c:	fba3 3101 	umull	r3, r1, r3, r1
 8001860:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001864:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800187e:	462b      	mov	r3, r5
 8001880:	0459      	lsls	r1, r3, #17
 8001882:	4622      	mov	r2, r4
 8001884:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001888:	4623      	mov	r3, r4
 800188a:	0458      	lsls	r0, r3, #17
 800188c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001890:	1814      	adds	r4, r2, r0
 8001892:	643c      	str	r4, [r7, #64]	@ 0x40
 8001894:	414b      	adcs	r3, r1
 8001896:	647b      	str	r3, [r7, #68]	@ 0x44
 8001898:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800189c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80018a0:	4b72      	ldr	r3, [pc, #456]	@ (8001a6c <BME280_measure_Press+0x2d4>)
 80018a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	17da      	asrs	r2, r3, #31
 80018aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80018ae:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80018b2:	f04f 0000 	mov.w	r0, #0
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018be:	00d9      	lsls	r1, r3, #3
 80018c0:	2000      	movs	r0, #0
 80018c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80018c6:	1814      	adds	r4, r2, r0
 80018c8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80018ca:	414b      	adcs	r3, r1
 80018cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018ce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80018d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80018d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80018da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018de:	fb03 f102 	mul.w	r1, r3, r2
 80018e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80018e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	18ca      	adds	r2, r1, r3
 80018f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018f4:	fba3 3103 	umull	r3, r1, r3, r3
 80018f8:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 80018fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001904:	18d3      	adds	r3, r2, r3
 8001906:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800190a:	4b59      	ldr	r3, [pc, #356]	@ (8001a70 <BME280_measure_Press+0x2d8>)
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	b21b      	sxth	r3, r3
 8001912:	17da      	asrs	r2, r3, #31
 8001914:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001918:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800191c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001920:	4622      	mov	r2, r4
 8001922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001926:	4641      	mov	r1, r8
 8001928:	fb01 f202 	mul.w	r2, r1, r2
 800192c:	464d      	mov	r5, r9
 800192e:	4618      	mov	r0, r3
 8001930:	4621      	mov	r1, r4
 8001932:	4603      	mov	r3, r0
 8001934:	fb03 f305 	mul.w	r3, r3, r5
 8001938:	4413      	add	r3, r2
 800193a:	4602      	mov	r2, r0
 800193c:	4641      	mov	r1, r8
 800193e:	fba2 2101 	umull	r2, r1, r2, r1
 8001942:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001946:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800194a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800194e:	4413      	add	r3, r2
 8001950:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001954:	f04f 0000 	mov.w	r0, #0
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001960:	4623      	mov	r3, r4
 8001962:	0a18      	lsrs	r0, r3, #8
 8001964:	462a      	mov	r2, r5
 8001966:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800196a:	462b      	mov	r3, r5
 800196c:	1219      	asrs	r1, r3, #8
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <BME280_measure_Press+0x2dc>)
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	b21b      	sxth	r3, r3
 8001976:	17da      	asrs	r2, r3, #31
 8001978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800197c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001980:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001984:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001988:	464a      	mov	r2, r9
 800198a:	fb02 f203 	mul.w	r2, r2, r3
 800198e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001992:	4644      	mov	r4, r8
 8001994:	fb04 f303 	mul.w	r3, r4, r3
 8001998:	441a      	add	r2, r3
 800199a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800199e:	4644      	mov	r4, r8
 80019a0:	fba3 3404 	umull	r3, r4, r3, r4
 80019a4:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 80019a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80019ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80019b0:	18d3      	adds	r3, r2, r3
 80019b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80019c2:	464c      	mov	r4, r9
 80019c4:	0323      	lsls	r3, r4, #12
 80019c6:	46c4      	mov	ip, r8
 80019c8:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80019cc:	4644      	mov	r4, r8
 80019ce:	0322      	lsls	r2, r4, #12
 80019d0:	1884      	adds	r4, r0, r2
 80019d2:	633c      	str	r4, [r7, #48]	@ 0x30
 80019d4:	eb41 0303 	adc.w	r3, r1, r3
 80019d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80019de:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80019e2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019e6:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80019ea:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80019ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <BME280_measure_Press+0x2e0>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2200      	movs	r2, #0
 80019fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80019fe:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a02:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001a06:	4622      	mov	r2, r4
 8001a08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	fb01 f202 	mul.w	r2, r1, r2
 8001a12:	464d      	mov	r5, r9
 8001a14:	4618      	mov	r0, r3
 8001a16:	4621      	mov	r1, r4
 8001a18:	4603      	mov	r3, r0
 8001a1a:	fb03 f305 	mul.w	r3, r3, r5
 8001a1e:	4413      	add	r3, r2
 8001a20:	4602      	mov	r2, r0
 8001a22:	4641      	mov	r1, r8
 8001a24:	fba2 2101 	umull	r2, r1, r2, r1
 8001a28:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001a2c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001a30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001a46:	4629      	mov	r1, r5
 8001a48:	104a      	asrs	r2, r1, #1
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	17cb      	asrs	r3, r1, #31
 8001a4e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001a52:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a56:	4313      	orrs	r3, r2
 8001a58:	d110      	bne.n	8001a7c <BME280_measure_Press+0x2e4>
	{
		return 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e152      	b.n	8001d04 <BME280_measure_Press+0x56c>
 8001a5e:	bf00      	nop
 8001a60:	200001e8 	.word	0x200001e8
 8001a64:	200001d8 	.word	0x200001d8
 8001a68:	200001d6 	.word	0x200001d6
 8001a6c:	200001d4 	.word	0x200001d4
 8001a70:	200001d2 	.word	0x200001d2
 8001a74:	200001d0 	.word	0x200001d0
 8001a78:	200001c6 	.word	0x200001c6
	}
	p = 1048576-adc_P;
 8001a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a80:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001a84:	17da      	asrs	r2, r3, #31
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a8a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001a8e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001a92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a96:	105b      	asrs	r3, r3, #1
 8001a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001aa0:	07db      	lsls	r3, r3, #31
 8001aa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001aa6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001aae:	4604      	mov	r4, r0
 8001ab0:	1aa4      	subs	r4, r4, r2
 8001ab2:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001ab4:	eb61 0303 	sbc.w	r3, r1, r3
 8001ab8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001aba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001abe:	4622      	mov	r2, r4
 8001ac0:	462b      	mov	r3, r5
 8001ac2:	1891      	adds	r1, r2, r2
 8001ac4:	6239      	str	r1, [r7, #32]
 8001ac6:	415b      	adcs	r3, r3
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ace:	4621      	mov	r1, r4
 8001ad0:	1851      	adds	r1, r2, r1
 8001ad2:	61b9      	str	r1, [r7, #24]
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	414b      	adcs	r3, r1
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	018b      	lsls	r3, r1, #6
 8001aea:	4641      	mov	r1, r8
 8001aec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001af0:	4641      	mov	r1, r8
 8001af2:	018a      	lsls	r2, r1, #6
 8001af4:	4641      	mov	r1, r8
 8001af6:	1889      	adds	r1, r1, r2
 8001af8:	6139      	str	r1, [r7, #16]
 8001afa:	4649      	mov	r1, r9
 8001afc:	eb43 0101 	adc.w	r1, r3, r1
 8001b00:	6179      	str	r1, [r7, #20]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b0e:	4649      	mov	r1, r9
 8001b10:	008b      	lsls	r3, r1, #2
 8001b12:	46c4      	mov	ip, r8
 8001b14:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b18:	4641      	mov	r1, r8
 8001b1a:	008a      	lsls	r2, r1, #2
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4603      	mov	r3, r0
 8001b22:	4622      	mov	r2, r4
 8001b24:	189b      	adds	r3, r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	eb42 0303 	adc.w	r3, r2, r3
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001b3e:	4649      	mov	r1, r9
 8001b40:	008b      	lsls	r3, r1, #2
 8001b42:	46c4      	mov	ip, r8
 8001b44:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b48:	4641      	mov	r1, r8
 8001b4a:	008a      	lsls	r2, r1, #2
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4603      	mov	r3, r0
 8001b52:	4622      	mov	r2, r4
 8001b54:	189b      	adds	r3, r3, r2
 8001b56:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b58:	462b      	mov	r3, r5
 8001b5a:	460a      	mov	r2, r1
 8001b5c:	eb42 0303 	adc.w	r3, r2, r3
 8001b60:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b62:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b66:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b6a:	f7ff fa95 	bl	8001098 <__aeabi_ldivmod>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001b76:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <BME280_measure_Press+0x578>)
 8001b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	17da      	asrs	r2, r3, #31
 8001b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b84:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b88:	f04f 0000 	mov.w	r0, #0
 8001b8c:	f04f 0100 	mov.w	r1, #0
 8001b90:	0b50      	lsrs	r0, r2, #13
 8001b92:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b96:	1359      	asrs	r1, r3, #13
 8001b98:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001b9c:	462b      	mov	r3, r5
 8001b9e:	fb00 f203 	mul.w	r2, r0, r3
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	fb03 f301 	mul.w	r3, r3, r1
 8001ba8:	4413      	add	r3, r2
 8001baa:	4622      	mov	r2, r4
 8001bac:	fba2 2100 	umull	r2, r1, r2, r0
 8001bb0:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001bb4:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001bb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001bc2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001bc6:	f04f 0000 	mov.w	r0, #0
 8001bca:	f04f 0100 	mov.w	r1, #0
 8001bce:	0b50      	lsrs	r0, r2, #13
 8001bd0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bd4:	1359      	asrs	r1, r3, #13
 8001bd6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001bda:	462b      	mov	r3, r5
 8001bdc:	fb00 f203 	mul.w	r2, r0, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	fb03 f301 	mul.w	r3, r3, r1
 8001be6:	4413      	add	r3, r2
 8001be8:	4622      	mov	r2, r4
 8001bea:	fba2 2100 	umull	r2, r1, r2, r0
 8001bee:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001bf2:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001bf6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	0e4a      	lsrs	r2, r1, #25
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	460c      	mov	r4, r1
 8001c16:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001c1a:	164b      	asrs	r3, r1, #25
 8001c1c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001c20:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <BME280_measure_Press+0x57c>)
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	17da      	asrs	r2, r3, #31
 8001c2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c2c:	667a      	str	r2, [r7, #100]	@ 0x64
 8001c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c32:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c36:	462a      	mov	r2, r5
 8001c38:	fb02 f203 	mul.w	r2, r2, r3
 8001c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c40:	4621      	mov	r1, r4
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	fba2 2101 	umull	r2, r1, r2, r1
 8001c52:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001c56:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001c5a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001c5e:	4413      	add	r3, r2
 8001c60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001c70:	4621      	mov	r1, r4
 8001c72:	0cca      	lsrs	r2, r1, #19
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	460c      	mov	r4, r1
 8001c7a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001c7e:	14cb      	asrs	r3, r1, #19
 8001c80:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001c84:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001c88:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c8c:	1884      	adds	r4, r0, r2
 8001c8e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001c90:	eb41 0303 	adc.w	r3, r1, r3
 8001c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c96:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c9a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	1889      	adds	r1, r1, r2
 8001ca2:	6539      	str	r1, [r7, #80]	@ 0x50
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	eb43 0101 	adc.w	r1, r3, r1
 8001caa:	6579      	str	r1, [r7, #84]	@ 0x54
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001cb8:	4623      	mov	r3, r4
 8001cba:	0a18      	lsrs	r0, r3, #8
 8001cbc:	462a      	mov	r2, r5
 8001cbe:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001cc2:	462b      	mov	r3, r5
 8001cc4:	1219      	asrs	r1, r3, #8
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <BME280_measure_Press+0x580>)
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	17da      	asrs	r2, r3, #31
 8001cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cd2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001ce0:	464c      	mov	r4, r9
 8001ce2:	0123      	lsls	r3, r4, #4
 8001ce4:	46c4      	mov	ip, r8
 8001ce6:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001cea:	4644      	mov	r4, r8
 8001cec:	0122      	lsls	r2, r4, #4
 8001cee:	1884      	adds	r4, r0, r2
 8001cf0:	603c      	str	r4, [r7, #0]
 8001cf2:	eb41 0303 	adc.w	r3, r1, r3
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001cfc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001d00:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d10:	200001de 	.word	0x200001de
 8001d14:	200001dc 	.word	0x200001dc
 8001d18:	200001da 	.word	0x200001da

08001d1c <BME280_measure_Hum>:
  * @param  Raw humidity data
  *
  * @retval Processed humidity data
  */
uint32_t BME280_measure_Hum(int32_t adc_H)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001d24:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd8 <BME280_measure_Hum+0xbc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001d2c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	039a      	lsls	r2, r3, #14
 8001d32:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <BME280_measure_Hum+0xc0>)
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	051b      	lsls	r3, r3, #20
 8001d3a:	1ad2      	subs	r2, r2, r3
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <BME280_measure_Hum+0xc4>)
 8001d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d42:	4619      	mov	r1, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001d4c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001d50:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001d52:	4a24      	ldr	r2, [pc, #144]	@ (8001de4 <BME280_measure_Hum+0xc8>)
 8001d54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d58:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001d60:	1292      	asrs	r2, r2, #10
 8001d62:	4921      	ldr	r1, [pc, #132]	@ (8001de8 <BME280_measure_Hum+0xcc>)
 8001d64:	8809      	ldrh	r1, [r1, #0]
 8001d66:	4608      	mov	r0, r1
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	fb00 f101 	mul.w	r1, r0, r1
 8001d6e:	12c9      	asrs	r1, r1, #11
 8001d70:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001d74:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001d78:	1292      	asrs	r2, r2, #10
 8001d7a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001d7e:	491b      	ldr	r1, [pc, #108]	@ (8001dec <BME280_measure_Hum+0xd0>)
 8001d80:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001d84:	fb01 f202 	mul.w	r2, r1, r2
 8001d88:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001d8c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	13db      	asrs	r3, r3, #15
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	13d2      	asrs	r2, r2, #15
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001da2:	4a13      	ldr	r2, [pc, #76]	@ (8001df0 <BME280_measure_Hum+0xd4>)
 8001da4:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001daa:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001db8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001dc0:	bfa8      	it	ge
 8001dc2:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001dc6:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	131b      	asrs	r3, r3, #12
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200001e8 	.word	0x200001e8
 8001ddc:	200001e2 	.word	0x200001e2
 8001de0:	200001e4 	.word	0x200001e4
 8001de4:	200001e6 	.word	0x200001e6
 8001de8:	200001ca 	.word	0x200001ca
 8001dec:	200001e0 	.word	0x200001e0
 8001df0:	200001c8 	.word	0x200001c8
 8001df4:	00000000 	.word	0x00000000

08001df8 <BME280Calculation>:
  * @param  None
  *
  * @retval BME280 sensor datas in structure data type
  */
void BME280Calculation(BME280_Data_t *result)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	Raw_Data_t rawData = RawdataBME280();
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fc4d 	bl	80016a4 <RawdataBME280>

	Calibdata_BME280();
 8001e0a:	f7ff fb63 	bl	80014d4 <Calibdata_BME280>

	result->Temperature = (BME280_measure_Temp(rawData.tempr))/100.0;	//Degress
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fc81 	bl	8001718 <BME280_measure_Temp>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb07 	bl	800042c <__aeabi_i2d>
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	4b5d      	ldr	r3, [pc, #372]	@ (8001f98 <BME280Calculation+0x1a0>)
 8001e24:	f7fe fc96 	bl	8000754 <__aeabi_ddiv>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fe3e 	bl	8000ab0 <__aeabi_d2f>
 8001e34:	4602      	mov	r2, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
	result->Pressure = (BME280_measure_Press(rawData.pressr))/25600.0;	//hPa
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fcab 	bl	8001798 <BME280_measure_Press>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fae1 	bl	800040c <__aeabi_ui2d>
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4b53      	ldr	r3, [pc, #332]	@ (8001f9c <BME280Calculation+0x1a4>)
 8001e50:	f7fe fc80 	bl	8000754 <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fe28 	bl	8000ab0 <__aeabi_d2f>
 8001e60:	4602      	mov	r2, r0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	605a      	str	r2, [r3, #4]
	result->Humidity = (BME280_measure_Hum(rawData.humr))/1024.0;		//%RH
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff57 	bl	8001d1c <BME280_measure_Hum>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe facb 	bl	800040c <__aeabi_ui2d>
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	4b49      	ldr	r3, [pc, #292]	@ (8001fa0 <BME280Calculation+0x1a8>)
 8001e7c:	f7fe fc6a 	bl	8000754 <__aeabi_ddiv>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe fe12 	bl	8000ab0 <__aeabi_d2f>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	609a      	str	r2, [r3, #8]

	result->AltitudeP = 44330*(1-pow(result->Pressure/1013.25,1/5.255)); 	/*Calculation of altitude parameter in meters with
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fada 	bl	8000450 <__aeabi_f2d>
 8001e9c:	a332      	add	r3, pc, #200	@ (adr r3, 8001f68 <BME280Calculation+0x170>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fc57 	bl	8000754 <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	a330      	add	r3, pc, #192	@ (adr r3, 8001f70 <BME280Calculation+0x178>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f01b ffc6 	bl	801de44 <pow>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	4938      	ldr	r1, [pc, #224]	@ (8001fa4 <BME280Calculation+0x1ac>)
 8001ec2:	f7fe f965 	bl	8000190 <__aeabi_dsub>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	a32a      	add	r3, pc, #168	@ (adr r3, 8001f78 <BME280Calculation+0x180>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fb14 	bl	8000500 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fde6 	bl	8000ab0 <__aeabi_d2f>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60da      	str	r2, [r3, #12]
													simplified atmospheric pressure formula*/

	result->AltitudeTP = ((log(result->Pressure/1013.25)*(288.16)*(-8.314))/(28.97*9.81))*1000; /*Calculation of altitude parameter in
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe faae 	bl	8000450 <__aeabi_f2d>
 8001ef4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001f68 <BME280Calculation+0x170>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fc2b 	bl	8000754 <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f01b ff6b 	bl	801dde0 <log>
 8001f0a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001f80 <BME280Calculation+0x188>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe faf6 	bl	8000500 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001f88 <BME280Calculation+0x190>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe faed 	bl	8000500 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	a318      	add	r3, pc, #96	@ (adr r3, 8001f90 <BME280Calculation+0x198>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe fc0e 	bl	8000754 <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <BME280Calculation+0x1b0>)
 8001f46:	f7fe fadb 	bl	8000500 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fdad 	bl	8000ab0 <__aeabi_d2f>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]
																		                    meters with atmospheric pressure formula*/
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	f3af 8000 	nop.w
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	408faa00 	.word	0x408faa00
 8001f70:	ccd9456c 	.word	0xccd9456c
 8001f74:	3fc85b95 	.word	0x3fc85b95
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	40e5a540 	.word	0x40e5a540
 8001f80:	5c28f5c3 	.word	0x5c28f5c3
 8001f84:	4072028f 	.word	0x4072028f
 8001f88:	9ba5e354 	.word	0x9ba5e354
 8001f8c:	c020a0c4 	.word	0xc020a0c4
 8001f90:	9652bd3c 	.word	0x9652bd3c
 8001f94:	4071c321 	.word	0x4071c321
 8001f98:	40590000 	.word	0x40590000
 8001f9c:	40d90000 	.word	0x40d90000
 8001fa0:	40900000 	.word	0x40900000
 8001fa4:	3ff00000 	.word	0x3ff00000
 8001fa8:	408f4000 	.word	0x408f4000

08001fac <BME280Init>:
  * @param  BME280Init argument to a BME280_Init_t structure that contains
  *         the configuration information for the BME280 device.
  *
  * @retval None
  */
void BME280Init(BME280_Init_t BME280Init){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af04      	add	r7, sp, #16
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t init=0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]

	//Setting it to sleep mode because the config register can only be changed while the BME280 is in sleep mode
	if(BME280_SleepMode() == HAL_OK){
 8001fbc:	f7ff fa6e 	bl	800149c <BME280_SleepMode>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d126      	bne.n	8002014 <BME280Init+0x68>

		APP_LOG(0, VLEVEL_M, "BME280 was put into sleep mode so that the config register could be set!\n");
 8001fc6:	4b35      	ldr	r3, [pc, #212]	@ (800209c <BME280Init+0xf0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2002      	movs	r0, #2
 8001fce:	f01b fc5d 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
		//Configuration of config register which is control standby time, filter and SPI 3-wire interface
		init = ((BME280Init.T_StandBy << 5) | (BME280Init.Filter << 2) | (BME280Init.SPI_EnOrDıs << 0));
 8001fd2:	793b      	ldrb	r3, [r7, #4]
 8001fd4:	015b      	lsls	r3, r3, #5
 8001fd6:	b25a      	sxtb	r2, r3
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b25a      	sxtb	r2, r3
 8001fe2:	79bb      	ldrb	r3, [r7, #6]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&bme_i2c, BME280_ADDR, CONFIG_REG_ADDR, 1, &init, 1, 1000);
 8001fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	f107 030f 	add.w	r3, r7, #15
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2301      	movs	r3, #1
 8002000:	22f5      	movs	r2, #245	@ 0xf5
 8002002:	21ec      	movs	r1, #236	@ 0xec
 8002004:	4826      	ldr	r0, [pc, #152]	@ (80020a0 <BME280Init+0xf4>)
 8002006:	f004 fa43 	bl	8006490 <HAL_I2C_Mem_Write>
		HAL_Delay (100);
 800200a:	2064      	movs	r0, #100	@ 0x64
 800200c:	f001 f924 	bl	8003258 <HAL_Delay>
		init=0;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
	}

	//Configuration of ctrl_hum register which is control oversamplig of Humidity
	init = ((BME280Init.OverSampling_H << 0) & 0x7);
 8002014:	78bb      	ldrb	r3, [r7, #2]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	b2db      	uxtb	r3, r3
 800201c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&bme_i2c, BME280_ADDR, CTRL_HUM_REG_ADDR, 1, &init, 1, 1000);
 800201e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2301      	movs	r3, #1
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	f107 030f 	add.w	r3, r7, #15
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2301      	movs	r3, #1
 8002030:	22f2      	movs	r2, #242	@ 0xf2
 8002032:	21ec      	movs	r1, #236	@ 0xec
 8002034:	481a      	ldr	r0, [pc, #104]	@ (80020a0 <BME280Init+0xf4>)
 8002036:	f004 fa2b 	bl	8006490 <HAL_I2C_Mem_Write>
	HAL_Delay (100);
 800203a:	2064      	movs	r0, #100	@ 0x64
 800203c:	f001 f90c 	bl	8003258 <HAL_Delay>
	init=0;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]

	//Configuration of ctrl_meas register which is control oversamplig of Temperature-Pressure and device mode
	init = (BME280Init.OverSampling_T << 5) | (BME280Init.OverSampling_P << 2) | BME280Init.Mode;
 8002044:	783b      	ldrb	r3, [r7, #0]
 8002046:	015b      	lsls	r3, r3, #5
 8002048:	b25a      	sxtb	r2, r3
 800204a:	787b      	ldrb	r3, [r7, #1]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	b25b      	sxtb	r3, r3
 8002050:	4313      	orrs	r3, r2
 8002052:	b25a      	sxtb	r2, r3
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	b25b      	sxtb	r3, r3
 8002058:	4313      	orrs	r3, r2
 800205a:	b25b      	sxtb	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&bme_i2c, BME280_ADDR, CTRL_MEAS_REG_ADDR, 1, &init, 1, 1000);
 8002060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002064:	9302      	str	r3, [sp, #8]
 8002066:	2301      	movs	r3, #1
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	f107 030f 	add.w	r3, r7, #15
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2301      	movs	r3, #1
 8002072:	22f4      	movs	r2, #244	@ 0xf4
 8002074:	21ec      	movs	r1, #236	@ 0xec
 8002076:	480a      	ldr	r0, [pc, #40]	@ (80020a0 <BME280Init+0xf4>)
 8002078:	f004 fa0a 	bl	8006490 <HAL_I2C_Mem_Write>
	HAL_Delay (100);
 800207c:	2064      	movs	r0, #100	@ 0x64
 800207e:	f001 f8eb 	bl	8003258 <HAL_Delay>
	init=0;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]

	APP_LOG(0, VLEVEL_M, "BME280 Initialization process is done!\n");
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <BME280Init+0xf8>)
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2002      	movs	r0, #2
 800208e:	f01b fbfd 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	0801f10c 	.word	0x0801f10c
 80020a0:	20000254 	.word	0x20000254
 80020a4:	0801f158 	.word	0x0801f158

080020a8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4313      	orrs	r3, r2
 80020be:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ee:	4013      	ands	r3, r2
 80020f0:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8002100:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <MX_ADC_Init+0x94>)
 8002102:	4a24      	ldr	r2, [pc, #144]	@ (8002194 <MX_ADC_Init+0x98>)
 8002104:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002106:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <MX_ADC_Init+0x94>)
 8002108:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800210c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800210e:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <MX_ADC_Init+0x94>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <MX_ADC_Init+0x94>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <MX_ADC_Init+0x94>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <MX_ADC_Init+0x94>)
 8002122:	2204      	movs	r2, #4
 8002124:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <MX_ADC_Init+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800212c:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <MX_ADC_Init+0x94>)
 800212e:	2200      	movs	r2, #0
 8002130:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002132:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <MX_ADC_Init+0x94>)
 8002134:	2200      	movs	r2, #0
 8002136:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8002138:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <MX_ADC_Init+0x94>)
 800213a:	2201      	movs	r2, #1
 800213c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800213e:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <MX_ADC_Init+0x94>)
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <MX_ADC_Init+0x94>)
 8002148:	2200      	movs	r2, #0
 800214a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <MX_ADC_Init+0x94>)
 800214e:	2200      	movs	r2, #0
 8002150:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <MX_ADC_Init+0x94>)
 8002154:	2200      	movs	r2, #0
 8002156:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <MX_ADC_Init+0x94>)
 800215c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002160:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002162:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <MX_ADC_Init+0x94>)
 8002164:	2207      	movs	r2, #7
 8002166:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <MX_ADC_Init+0x94>)
 800216a:	2207      	movs	r2, #7
 800216c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800216e:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <MX_ADC_Init+0x94>)
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <MX_ADC_Init+0x94>)
 8002178:	2200      	movs	r2, #0
 800217a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800217c:	4804      	ldr	r0, [pc, #16]	@ (8002190 <MX_ADC_Init+0x94>)
 800217e:	f002 f88d 	bl	800429c <HAL_ADC_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8002188:	f000 fd1c 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200001ec 	.word	0x200001ec
 8002194:	40012400 	.word	0x40012400

08002198 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <HAL_ADC_MspInit+0x24>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d103      	bne.n	80021b2 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021ae:	f7ff ff7b 	bl	80020a8 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40012400 	.word	0x40012400

080021c0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <HAL_ADC_MspDeInit+0x24>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d103      	bne.n	80021da <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80021d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021d6:	f7ff ff7f 	bl	80020d8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40012400 	.word	0x40012400

080021e8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <SYS_InitMeasurement+0x14>)
 80021ee:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <SYS_InitMeasurement+0x18>)
 80021f0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200001ec 	.word	0x200001ec
 8002200:	40012400 	.word	0x40012400

08002204 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8002212:	4813      	ldr	r0, [pc, #76]	@ (8002260 <SYS_GetBatteryLevel+0x5c>)
 8002214:	f000 f82a 	bl	800226c <ADC_ReadChannels>
 8002218:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	80fb      	strh	r3, [r7, #6]
 8002224:	e016      	b.n	8002254 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <SYS_GetBatteryLevel+0x60>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800222e:	4293      	cmp	r3, r2
 8002230:	d00b      	beq.n	800224a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <SYS_GetBatteryLevel+0x60>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800223c:	fb03 f202 	mul.w	r2, r3, r2
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	80fb      	strh	r3, [r7, #6]
 8002248:	e004      	b.n	8002254 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800224a:	4a07      	ldr	r2, [pc, #28]	@ (8002268 <SYS_GetBatteryLevel+0x64>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8002254:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	b4002000 	.word	0xb4002000
 8002264:	1fff75aa 	.word	0x1fff75aa
 8002268:	004c08d8 	.word	0x004c08d8

0800226c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002278:	f107 0308 	add.w	r3, r7, #8
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8002284:	f7ff ff3a 	bl	80020fc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8002288:	481a      	ldr	r0, [pc, #104]	@ (80022f4 <ADC_ReadChannels+0x88>)
 800228a:	f002 fe26 	bl	8004eda <HAL_ADCEx_Calibration_Start>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8002294:	f000 fc96 	bl	8002bc4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80022a4:	f107 0308 	add.w	r3, r7, #8
 80022a8:	4619      	mov	r1, r3
 80022aa:	4812      	ldr	r0, [pc, #72]	@ (80022f4 <ADC_ReadChannels+0x88>)
 80022ac:	f002 fb32 	bl	8004914 <HAL_ADC_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80022b6:	f000 fc85 	bl	8002bc4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80022ba:	480e      	ldr	r0, [pc, #56]	@ (80022f4 <ADC_ReadChannels+0x88>)
 80022bc:	f002 fa0e 	bl	80046dc <HAL_ADC_Start>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80022c6:	f000 fc7d 	bl	8002bc4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80022ca:	f04f 31ff 	mov.w	r1, #4294967295
 80022ce:	4809      	ldr	r0, [pc, #36]	@ (80022f4 <ADC_ReadChannels+0x88>)
 80022d0:	f002 fa7c 	bl	80047cc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80022d4:	4807      	ldr	r0, [pc, #28]	@ (80022f4 <ADC_ReadChannels+0x88>)
 80022d6:	f002 fa47 	bl	8004768 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80022da:	4806      	ldr	r0, [pc, #24]	@ (80022f4 <ADC_ReadChannels+0x88>)
 80022dc:	f002 fb0d 	bl	80048fa <HAL_ADC_GetValue>
 80022e0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80022e2:	4804      	ldr	r0, [pc, #16]	@ (80022f4 <ADC_ReadChannels+0x88>)
 80022e4:	f002 f96e 	bl	80045c4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80022e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200001ec 	.word	0x200001ec

080022f8 <LL_AHB1_GRP1_EnableClock>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002306:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4313      	orrs	r3, r2
 800230e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800231c:	68fb      	ldr	r3, [r7, #12]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800232c:	2004      	movs	r0, #4
 800232e:	f7ff ffe3 	bl	80022f8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002332:	2001      	movs	r0, #1
 8002334:	f7ff ffe0 	bl	80022f8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2102      	movs	r1, #2
 800233c:	200b      	movs	r0, #11
 800233e:	f002 ff72 	bl	8005226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002342:	200b      	movs	r0, #11
 8002344:	f002 ff89 	bl	800525a <HAL_NVIC_EnableIRQ>

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8002358:	23ff      	movs	r3, #255	@ 0xff
 800235a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002362:	d311      	bcc.n	8002388 <FLASH_IF_Write+0x3c>
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <FLASH_IF_Write+0x48>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	029a      	lsls	r2, r3, #10
 800236a:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <FLASH_IF_Write+0x4c>)
 800236c:	4013      	ands	r3, r2
 800236e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002372:	3b01      	subs	r3, #1
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4293      	cmp	r3, r2
 8002378:	d306      	bcc.n	8002388 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f85a 	bl	8002438 <FLASH_IF_INT_Write>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8002388:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	1fff75e0 	.word	0x1fff75e0
 8002398:	03fffc00 	.word	0x03fffc00

0800239c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80023a8:	23ff      	movs	r3, #255	@ 0xff
 80023aa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023b2:	d311      	bcc.n	80023d8 <FLASH_IF_Read+0x3c>
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <FLASH_IF_Read+0x48>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	029a      	lsls	r2, r3, #10
 80023ba:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <FLASH_IF_Read+0x4c>)
 80023bc:	4013      	ands	r3, r2
 80023be:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80023c2:	3b01      	subs	r3, #1
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d306      	bcc.n	80023d8 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f93a 	bl	8002648 <FLASH_IF_INT_Read>
 80023d4:	4603      	mov	r3, r0
 80023d6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80023d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	1fff75e0 	.word	0x1fff75e0
 80023e8:	03fffc00 	.word	0x03fffc00

080023ec <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80023f6:	23ff      	movs	r3, #255	@ 0xff
 80023f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002400:	d310      	bcc.n	8002424 <FLASH_IF_Erase+0x38>
 8002402:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <FLASH_IF_Erase+0x44>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	029a      	lsls	r2, r3, #10
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <FLASH_IF_Erase+0x48>)
 800240a:	4013      	ands	r3, r2
 800240c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002410:	3b01      	subs	r3, #1
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4293      	cmp	r3, r2
 8002416:	d305      	bcc.n	8002424 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f932 	bl	8002684 <FLASH_IF_INT_Erase>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8002424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	1fff75e0 	.word	0x1fff75e0
 8002434:	03fffc00 	.word	0x03fffc00

08002438 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b090      	sub	sp, #64	@ 0x40
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00c      	beq.n	8002476 <FLASH_IF_INT_Write+0x3e>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <FLASH_IF_INT_Write+0x3e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8002476:	f06f 0305 	mvn.w	r3, #5
 800247a:	e0da      	b.n	8002632 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800247c:	f000 f992 	bl	80027a4 <FLASH_IF_INT_Clear_Error>
 8002480:	4603      	mov	r3, r0
 8002482:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8002486:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 80cf 	bne.w	800262e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8002490:	f003 fb2e 	bl	8005af0 <HAL_FLASH_Unlock>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 80c6 	bne.w	8002628 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800249c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80024a2:	4b66      	ldr	r3, [pc, #408]	@ (800263c <FLASH_IF_INT_Write+0x204>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0299      	lsls	r1, r3, #10
 80024a8:	4b65      	ldr	r3, [pc, #404]	@ (8002640 <FLASH_IF_INT_Write+0x208>)
 80024aa:	400b      	ands	r3, r1
 80024ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	0adb      	lsrs	r3, r3, #11
 80024b8:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80024ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4a5d      	ldr	r2, [pc, #372]	@ (800263c <FLASH_IF_INT_Write+0x204>)
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	0291      	lsls	r1, r2, #10
 80024cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002640 <FLASH_IF_INT_Write+0x208>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80024d4:	fb01 f202 	mul.w	r2, r1, r2
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	0ada      	lsrs	r2, r3, #11
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d905      	bls.n	80024f6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80024ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80024f4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024fa:	e089      	b.n	8002610 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80024fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002502:	02db      	lsls	r3, r3, #11
 8002504:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8002506:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f925 	bl	8002758 <FLASH_IF_INT_IsEmpty>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d031      	beq.n	8002578 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8002514:	4b4b      	ldr	r3, [pc, #300]	@ (8002644 <FLASH_IF_INT_Write+0x20c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800251c:	23fa      	movs	r3, #250	@ 0xfa
 800251e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8002522:	e07e      	b.n	8002622 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8002524:	4b47      	ldr	r3, [pc, #284]	@ (8002644 <FLASH_IF_INT_Write+0x20c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f88a 	bl	8002648 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8002534:	4b43      	ldr	r3, [pc, #268]	@ (8002644 <FLASH_IF_INT_Write+0x20c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253e:	4413      	add	r3, r2
 8002540:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002544:	b292      	uxth	r2, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f01a f9bc 	bl	801c8c4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f896 	bl	8002684 <FLASH_IF_INT_Erase>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800255e:	23fe      	movs	r3, #254	@ 0xfe
 8002560:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8002564:	e05d      	b.n	8002622 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800256a:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <FLASH_IF_INT_Write+0x20c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8002570:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e005      	b.n	8002584 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8002578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 800257c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8002580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002582:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8002584:	2300      	movs	r3, #0
 8002586:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002588:	e026      	b.n	80025d8 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800258a:	6a3a      	ldr	r2, [r7, #32]
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002596:	2001      	movs	r0, #1
 8002598:	f003 fa66 	bl	8005a68 <HAL_FLASH_Program>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d113      	bne.n	80025ca <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ac:	4413      	add	r3, r2
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	4299      	cmp	r1, r3
 80025b4:	bf08      	it	eq
 80025b6:	4290      	cmpeq	r0, r2
 80025b8:	d003      	beq.n	80025c2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80025ba:	23fc      	movs	r3, #252	@ 0xfc
 80025bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 80025c0:	e00e      	b.n	80025e0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	3308      	adds	r3, #8
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c8:	e003      	b.n	80025d2 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80025ca:	23fc      	movs	r3, #252	@ 0xfc
 80025cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 80025d0:	e006      	b.n	80025e0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80025d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d4:	3308      	adds	r3, #8
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d3d4      	bcc.n	800258a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80025e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11b      	bne.n	8002620 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80025e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	4413      	add	r3, r2
 80025ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 80025f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	4413      	add	r3, r2
 80025f6:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002602:	bf28      	it	cs
 8002604:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8002608:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260c:	3301      	adds	r3, #1
 800260e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4413      	add	r3, r2
 8002616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002618:	429a      	cmp	r2, r3
 800261a:	f4ff af6f 	bcc.w	80024fc <FLASH_IF_INT_Write+0xc4>
 800261e:	e000      	b.n	8002622 <FLASH_IF_INT_Write+0x1ea>
          break;
 8002620:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8002622:	f003 fa87 	bl	8005b34 <HAL_FLASH_Lock>
 8002626:	e002      	b.n	800262e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8002628:	23fb      	movs	r3, #251	@ 0xfb
 800262a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800262e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8002632:	4618      	mov	r0, r3
 8002634:	3740      	adds	r7, #64	@ 0x40
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	1fff75e0 	.word	0x1fff75e0
 8002640:	03fffc00 	.word	0x03fffc00
 8002644:	20000250 	.word	0x20000250

08002648 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <FLASH_IF_INT_Read+0x1c>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8002664:	f06f 0305 	mvn.w	r3, #5
 8002668:	e008      	b.n	800267c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f01a f926 	bl	801c8c4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8002678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80026a4:	f06f 0305 	mvn.w	r3, #5
 80026a8:	e04e      	b.n	8002748 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80026aa:	f000 f87b 	bl	80027a4 <FLASH_IF_INT_Clear_Error>
 80026ae:	4603      	mov	r3, r0
 80026b0:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80026b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d144      	bne.n	8002744 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80026ba:	f003 fa19 	bl	8005af0 <HAL_FLASH_Unlock>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d13d      	bne.n	8002740 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80026c4:	2302      	movs	r3, #2
 80026c6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80026ce:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <FLASH_IF_INT_Erase+0xcc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0299      	lsls	r1, r3, #10
 80026d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <FLASH_IF_INT_Erase+0xd0>)
 80026d6:	400b      	ands	r3, r1
 80026d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	0adb      	lsrs	r3, r3, #11
 80026e4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80026f0:	3b01      	subs	r3, #1
 80026f2:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <FLASH_IF_INT_Erase+0xcc>)
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	0291      	lsls	r1, r2, #10
 80026f8:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <FLASH_IF_INT_Erase+0xd0>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002700:	fb01 f202 	mul.w	r2, r1, r2
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	0ada      	lsrs	r2, r3, #11
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	3301      	adds	r3, #1
 800270e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8002710:	f107 0214 	add.w	r2, r7, #20
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f003 faea 	bl	8005cf4 <HAL_FLASHEx_Erase>
 8002720:	4603      	mov	r3, r0
 8002722:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8002724:	7fbb      	ldrb	r3, [r7, #30]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800272a:	7fbb      	ldrb	r3, [r7, #30]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d101      	bne.n	8002734 <FLASH_IF_INT_Erase+0xb0>
 8002730:	2301      	movs	r3, #1
 8002732:	e001      	b.n	8002738 <FLASH_IF_INT_Erase+0xb4>
 8002734:	f06f 0301 	mvn.w	r3, #1
 8002738:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800273a:	f003 f9fb 	bl	8005b34 <HAL_FLASH_Lock>
 800273e:	e001      	b.n	8002744 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8002740:	23fb      	movs	r3, #251	@ 0xfb
 8002742:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8002744:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	1fff75e0 	.word	0x1fff75e0
 8002754:	03fffc00 	.word	0x03fffc00

08002758 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	e011      	b.n	8002790 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	bf08      	it	eq
 8002778:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800277c:	d002      	beq.n	8002784 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800277e:	2301      	movs	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
      break;
 8002782:	e009      	b.n	8002798 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3308      	adds	r3, #8
 8002788:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3308      	adds	r3, #8
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d3e9      	bcc.n	800276c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80027aa:	23fb      	movs	r3, #251	@ 0xfb
 80027ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80027ae:	f003 f99f 	bl	8005af0 <HAL_FLASH_Unlock>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d110      	bne.n	80027da <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80027be:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80027c2:	6193      	str	r3, [r2, #24]
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80027c6:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 80027ca:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80027cc:	f003 f9b2 	bl	8005b34 <HAL_FLASH_Lock>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	58004000 	.word	0x58004000

080027ec <LL_AHB2_GRP1_EnableClock>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4313      	orrs	r3, r2
 8002802:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002808:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002810:	68fb      	ldr	r3, [r7, #12]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002830:	2004      	movs	r0, #4
 8002832:	f7ff ffdb 	bl	80027ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2002      	movs	r0, #2
 8002838:	f7ff ffd8 	bl	80027ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283c:	2001      	movs	r0, #1
 800283e:	f7ff ffd5 	bl	80027ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8002842:	2200      	movs	r2, #0
 8002844:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 8002848:	4821      	ldr	r0, [pc, #132]	@ (80028d0 <MX_GPIO_Init+0xb4>)
 800284a:	f003 fd55 	bl	80062f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800284e:	2201      	movs	r2, #1
 8002850:	2120      	movs	r1, #32
 8002852:	481f      	ldr	r0, [pc, #124]	@ (80028d0 <MX_GPIO_Init+0xb4>)
 8002854:	f003 fd50 	bl	80062f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	2131      	movs	r1, #49	@ 0x31
 800285c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002860:	f003 fd4a 	bl	80062f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DBG3_Pin DBG4_Pin LED2_Pin DBG2_Pin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8002864:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8002868:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286a:	2301      	movs	r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4815      	ldr	r0, [pc, #84]	@ (80028d0 <MX_GPIO_Init+0xb4>)
 800287c:	f003 fb0e 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG1_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8002880:	2331      	movs	r3, #49	@ 0x31
 8002882:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002898:	f003 fb00 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 800289c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80028a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	4619      	mov	r1, r3
 80028b0:	4807      	ldr	r0, [pc, #28]	@ (80028d0 <MX_GPIO_Init+0xb4>)
 80028b2:	f003 faf3 	bl	8005e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	2029      	movs	r0, #41	@ 0x29
 80028bc:	f002 fcb3 	bl	8005226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028c0:	2029      	movs	r0, #41	@ 0x29
 80028c2:	f002 fcca 	bl	800525a <HAL_NVIC_EnableIRQ>

}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	48000400 	.word	0x48000400

080028d4 <LL_AHB2_GRP1_EnableClock>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <LL_APB1_GRP1_EnableClock>:
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002912:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002920:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <MX_I2C3_Init+0x74>)
 800293a:	4a1c      	ldr	r2, [pc, #112]	@ (80029ac <MX_I2C3_Init+0x78>)
 800293c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10805D88;
 800293e:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <MX_I2C3_Init+0x74>)
 8002940:	4a1b      	ldr	r2, [pc, #108]	@ (80029b0 <MX_I2C3_Init+0x7c>)
 8002942:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002944:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <MX_I2C3_Init+0x74>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800294a:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <MX_I2C3_Init+0x74>)
 800294c:	2201      	movs	r2, #1
 800294e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002950:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <MX_I2C3_Init+0x74>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002956:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <MX_I2C3_Init+0x74>)
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800295c:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <MX_I2C3_Init+0x74>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <MX_I2C3_Init+0x74>)
 8002964:	2200      	movs	r2, #0
 8002966:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002968:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <MX_I2C3_Init+0x74>)
 800296a:	2200      	movs	r2, #0
 800296c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800296e:	480e      	ldr	r0, [pc, #56]	@ (80029a8 <MX_I2C3_Init+0x74>)
 8002970:	f003 fcf2 	bl	8006358 <HAL_I2C_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800297a:	f000 f923 	bl	8002bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800297e:	2100      	movs	r1, #0
 8002980:	4809      	ldr	r0, [pc, #36]	@ (80029a8 <MX_I2C3_Init+0x74>)
 8002982:	f004 fa71 	bl	8006e68 <HAL_I2CEx_ConfigAnalogFilter>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800298c:	f000 f91a 	bl	8002bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002990:	2100      	movs	r1, #0
 8002992:	4805      	ldr	r0, [pc, #20]	@ (80029a8 <MX_I2C3_Init+0x74>)
 8002994:	f004 fab2 	bl	8006efc <HAL_I2CEx_ConfigDigitalFilter>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800299e:	f000 f911 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000254 	.word	0x20000254
 80029ac:	40005c00 	.word	0x40005c00
 80029b0:	10805d88 	.word	0x10805d88

080029b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b096      	sub	sp, #88	@ 0x58
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	2238      	movs	r2, #56	@ 0x38
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f01b f9d1 	bl	801dd7c <memset>
  if(i2cHandle->Instance==I2C3)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	@ (8002a64 <HAL_I2C_MspInit+0xb0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d13a      	bne.n	8002a5a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029ea:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	4618      	mov	r0, r3
 80029f6:	f005 fd3d 	bl	8008474 <HAL_RCCEx_PeriphCLKConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002a00:	f000 f8e0 	bl	8002bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a04:	2002      	movs	r0, #2
 8002a06:	f7ff ff65 	bl	80028d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0a:	2004      	movs	r0, #4
 8002a0c:	f7ff ff62 	bl	80028d4 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB14     ------> I2C3_SDA
    PC0     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a14:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a16:	2312      	movs	r3, #18
 8002a18:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a22:	2304      	movs	r3, #4
 8002a24:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480e      	ldr	r0, [pc, #56]	@ (8002a68 <HAL_I2C_MspInit+0xb4>)
 8002a2e:	f003 fa35 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a32:	2301      	movs	r3, #1
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a36:	2312      	movs	r3, #18
 8002a38:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a42:	2304      	movs	r3, #4
 8002a44:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a46:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4807      	ldr	r0, [pc, #28]	@ (8002a6c <HAL_I2C_MspInit+0xb8>)
 8002a4e:	f003 fa25 	bl	8005e9c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a52:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002a56:	f7ff ff55 	bl	8002904 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3758      	adds	r7, #88	@ 0x58
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40005c00 	.word	0x40005c00
 8002a68:	48000400 	.word	0x48000400
 8002a6c:	48000800 	.word	0x48000800

08002a70 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a80:	f023 0218 	bic.w	r2, r3, #24
 8002a84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <SI7201_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SI7201_Init()
  {
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
    else
    {
      APP_LOG(0, VLEVEL_M, "Si7021 status => Error\n");
    }
#endif
  }
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <BME280_Init>:

void BME280_Init()
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
#ifdef BME280_H_
	//Init structure definition section
	BME280_Init_t BME280_InitStruct = {0};
 8002aac:	463b      	mov	r3, r7
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f8c3 2003 	str.w	r2, [r3, #3]

	//Reset section
	Reset_BME280();
 8002ab6:	f7fe fcb7 	bl	8001428 <Reset_BME280>

	/*============================ *BME280 Initialization* ============================*/

	BME280_InitStruct.Filter = FILTER_8;     				//FILTER_X
 8002aba:	2303      	movs	r3, #3
 8002abc:	717b      	strb	r3, [r7, #5]
	BME280_InitStruct.Mode = BME280_NORMAL_MODE;		 	//SLEEP, NORMAL or FORCE can be written
 8002abe:	2303      	movs	r3, #3
 8002ac0:	70fb      	strb	r3, [r7, #3]
	BME280_InitStruct.OverSampling_H = OVERSAMPLING_16;		//OVERSAMPLING_X
 8002ac2:	2305      	movs	r3, #5
 8002ac4:	70bb      	strb	r3, [r7, #2]
	BME280_InitStruct.OverSampling_P = OVERSAMPLING_16;		//OVERSAMPLING_X
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	707b      	strb	r3, [r7, #1]
	BME280_InitStruct.OverSampling_T = OVERSAMPLING_16;		//OVERSAMPLING_X
 8002aca:	2305      	movs	r3, #5
 8002acc:	703b      	strb	r3, [r7, #0]
	BME280_InitStruct.SPI_EnOrDıs = SPI3_W_DISABLE;			//SPI3_W_DISABLE or SPI3_W_ENABLE can be written
 8002ace:	2300      	movs	r3, #0
 8002ad0:	71bb      	strb	r3, [r7, #6]
	BME280_InitStruct.T_StandBy = T_SB_250;					//T_SB_X
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	713b      	strb	r3, [r7, #4]

	BME280Init(BME280_InitStruct);
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002adc:	f7ff fa66 	bl	8001fac <BME280Init>
#endif
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aec:	f001 f9e8 	bl	8003ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af0:	f000 f80e 	bl	8002b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af4:	f7ff fe92 	bl	800281c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8002af8:	f009 f85e 	bl	800bbb8 <MX_LoRaWAN_Init>
  MX_I2C3_Init();
 8002afc:	f7ff ff1a 	bl	8002934 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SI7201_Init();
 8002b00:	f7ff ffcb 	bl	8002a9a <SI7201_Init>
  BME280_Init();
 8002b04:	f7ff ffcf 	bl	8002aa6 <BME280_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8002b08:	f009 f85e 	bl	800bbc8 <MX_LoRaWAN_Process>
 8002b0c:	e7fc      	b.n	8002b08 <main+0x20>
	...

08002b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b09a      	sub	sp, #104	@ 0x68
 8002b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b16:	f107 0320 	add.w	r3, r7, #32
 8002b1a:	2248      	movs	r2, #72	@ 0x48
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f01b f92c 	bl	801dd7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
 8002b34:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b36:	f004 fa2d 	bl	8006f94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7ff ff98 	bl	8002a70 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b40:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc0 <SystemClock_Config+0xb0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b48:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <SystemClock_Config+0xb0>)
 8002b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <SystemClock_Config+0xb0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002b5c:	2324      	movs	r3, #36	@ 0x24
 8002b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b60:	2381      	movs	r3, #129	@ 0x81
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b64:	2301      	movs	r3, #1
 8002b66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002b6c:	23b0      	movs	r3, #176	@ 0xb0
 8002b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b74:	f107 0320 	add.w	r3, r7, #32
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fd57 	bl	800762c <HAL_RCC_OscConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002b84:	f000 f81e 	bl	8002bc4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8002b88:	234f      	movs	r3, #79	@ 0x4f
 8002b8a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ba0:	f107 0308 	add.w	r3, r7, #8
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f005 f8c2 	bl	8007d30 <HAL_RCC_ClockConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002bb2:	f000 f807 	bl	8002bc4 <Error_Handler>
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3768      	adds	r7, #104	@ 0x68
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	58000400 	.word	0x58000400

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <Error_Handler+0x8>

08002bd0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <LL_APB1_GRP1_EnableClock>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c14:	68fb      	ldr	r3, [r7, #12]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	@ 0x30
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	222c      	movs	r2, #44	@ 0x2c
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f01b f8a5 	bl	801dd7c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c32:	4b22      	ldr	r3, [pc, #136]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c34:	4a22      	ldr	r2, [pc, #136]	@ (8002cc0 <MX_RTC_Init+0xa0>)
 8002c36:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002c38:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c3a:	221f      	movs	r2, #31
 8002c3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c50:	4b1a      	ldr	r3, [pc, #104]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c56:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002c58:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002c5e:	4b17      	ldr	r3, [pc, #92]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c66:	4815      	ldr	r0, [pc, #84]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c68:	f005 fd1e 	bl	80086a8 <HAL_RTC_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002c72:	f7ff ffa7 	bl	8002bc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002c76:	4811      	ldr	r0, [pc, #68]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002c78:	f006 f814 	bl	8008ca4 <HAL_RTCEx_SetSSRU_IT>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002c82:	f7ff ff9f 	bl	8002bc4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002c92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c96:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4805      	ldr	r0, [pc, #20]	@ (8002cbc <MX_RTC_Init+0x9c>)
 8002ca6:	f005 fd81 	bl	80087ac <HAL_RTC_SetAlarm_IT>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002cb0:	f7ff ff88 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	3730      	adds	r7, #48	@ 0x30
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200002a8 	.word	0x200002a8
 8002cc0:	40002800 	.word	0x40002800

08002cc4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b090      	sub	sp, #64	@ 0x40
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ccc:	f107 0308 	add.w	r3, r7, #8
 8002cd0:	2238      	movs	r2, #56	@ 0x38
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f01b f851 	bl	801dd7c <memset>
  if(rtcHandle->Instance==RTC)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a16      	ldr	r2, [pc, #88]	@ (8002d38 <HAL_RTC_MspInit+0x74>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d125      	bne.n	8002d30 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ce4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cee:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f005 fbbd 	bl	8008474 <HAL_RCCEx_PeriphCLKConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002d00:	f7ff ff60 	bl	8002bc4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d04:	f7ff ff64 	bl	8002bd0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d08:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002d0c:	f7ff ff70 	bl	8002bf0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2100      	movs	r1, #0
 8002d14:	2002      	movs	r0, #2
 8002d16:	f002 fa86 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002d1a:	2002      	movs	r0, #2
 8002d1c:	f002 fa9d 	bl	800525a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	202a      	movs	r0, #42	@ 0x2a
 8002d26:	f002 fa7e 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002d2a:	202a      	movs	r0, #42	@ 0x2a
 8002d2c:	f002 fa95 	bl	800525a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d30:	bf00      	nop
 8002d32:	3740      	adds	r7, #64	@ 0x40
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40002800 	.word	0x40002800

08002d3c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	58000400 	.word	0x58000400

08002d54 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002d70:	f001 f8c6 	bl	8003f00 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002d74:	f7ff ffe2 	bl	8002d3c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f004 f99d 	bl	80070b8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002d86:	f001 f8c9 	bl	8003f1c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002d8a:	f000 ff49 	bl	8003c20 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002d96:	f001 f8b3 	bl	8003f00 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f004 f907 	bl	8006fb0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002daa:	f001 f8b7 	bl	8003f1c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <NMI_Handler+0x4>

08002dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <HardFault_Handler+0x4>

08002dce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd2:	bf00      	nop
 8002dd4:	e7fd      	b.n	8002dd2 <MemManage_Handler+0x4>

08002dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <BusFault_Handler+0x4>

08002dde <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de2:	bf00      	nop
 8002de4:	e7fd      	b.n	8002de2 <UsageFault_Handler+0x4>

08002de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
	...

08002e18 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002e1c:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002e1e:	f005 ff7d 	bl	8008d1c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200002a8 	.word	0x200002a8

08002e2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <DMA1_Channel1_IRQHandler+0x10>)
 8002e32:	f002 fca9 	bl	8005788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000388 	.word	0x20000388

08002e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <USART1_IRQHandler+0x10>)
 8002e46:	f006 fdb7 	bl	80099b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200002f4 	.word	0x200002f4

08002e54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8002e58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e5c:	f003 fa64 	bl	8006328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002e68:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <RTC_Alarm_IRQHandler+0x10>)
 8002e6a:	f005 fe07 	bl	8008a7c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200002a8 	.word	0x200002a8

08002e78 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002e7e:	f006 fabb 	bl	80093f8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200002e0 	.word	0x200002e0

08002e8c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <MX_SUBGHZ_Init+0x20>)
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_SUBGHZ_Init+0x20>)
 8002ec8:	f006 f814 	bl	8008ef4 <HAL_SUBGHZ_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002ed2:	f7ff fe77 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200002e0 	.word	0x200002e0

08002ee0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002ee8:	2001      	movs	r0, #1
 8002eea:	f7ff ffcf 	bl	8002e8c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2032      	movs	r0, #50	@ 0x32
 8002ef4:	f002 f997 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002ef8:	2032      	movs	r0, #50	@ 0x32
 8002efa:	f002 f9ae 	bl	800525a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002f18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002f30:	4b02      	ldr	r3, [pc, #8]	@ (8002f3c <LL_FLASH_GetUDN+0x10>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	1fff7580 	.word	0x1fff7580

08002f40 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <LL_FLASH_GetDeviceID+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	1fff7584 	.word	0x1fff7584

08002f58 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <LL_FLASH_GetSTCompanyID+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0a1b      	lsrs	r3, r3, #8
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	1fff7584 	.word	0x1fff7584

08002f70 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff ffc6 	bl	8002f06 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002f7a:	f01a f9c9 	bl	801d310 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <SystemApp_Init+0x48>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002f84:	f000 f98c 	bl	80032a0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002f88:	f01a fc52 	bl	801d830 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002f8c:	480b      	ldr	r0, [pc, #44]	@ (8002fbc <SystemApp_Init+0x4c>)
 8002f8e:	f01a fcfd 	bl	801d98c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <SystemApp_Init+0x50>)
 8002f94:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f98:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	f01a fd04 	bl	801d9a8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002fa0:	f7ff f922 	bl	80021e8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002fa4:	f000 fa0c 	bl	80033c0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002fa8:	f019 fbe6 	bl	801c778 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002fac:	2101      	movs	r1, #1
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f019 fc22 	bl	801c7f8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200002ec 	.word	0x200002ec
 8002fbc:	08003191 	.word	0x08003191
 8002fc0:	58004000 	.word	0x58004000

08002fc4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002fc8:	f019 fc46 	bl	801c858 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002fda:	f7ff f913 	bl	8002204 <SYS_GetBatteryLevel>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d902      	bls.n	8002ff2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002fec:	23fe      	movs	r3, #254	@ 0xfe
 8002fee:	71fb      	strb	r3, [r7, #7]
 8002ff0:	e014      	b.n	800301c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002ff2:	88bb      	ldrh	r3, [r7, #4]
 8002ff4:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8002ff8:	d202      	bcs.n	8003000 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	71fb      	strb	r3, [r7, #7]
 8002ffe:	e00d      	b.n	800301c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8003000:	88bb      	ldrh	r3, [r7, #4]
 8003002:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8003006:	461a      	mov	r2, r3
 8003008:	4613      	mov	r3, r2
 800300a:	01db      	lsls	r3, r3, #7
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	461a      	mov	r2, r3
 8003012:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <GetBatteryLevel+0x58>)
 8003014:	fba3 2302 	umull	r2, r3, r3, r2
 8003018:	09db      	lsrs	r3, r3, #7
 800301a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 800301c:	79fb      	ldrb	r3, [r7, #7]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	1b4e81b5 	.word	0x1b4e81b5

0800302c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f98d 	bl	8003358 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd ffe3 	bl	800100c <__aeabi_f2iz>
 8003046:	4603      	mov	r3, r0
 8003048:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800304a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8003056:	b590      	push	{r4, r7, lr}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8003062:	f7ff ff63 	bl	8002f2c <LL_FLASH_GetUDN>
 8003066:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d138      	bne.n	80030e2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8003070:	f000 ff62 	bl	8003f38 <HAL_GetUIDw0>
 8003074:	4604      	mov	r4, r0
 8003076:	f000 ff73 	bl	8003f60 <HAL_GetUIDw2>
 800307a:	4603      	mov	r3, r0
 800307c:	4423      	add	r3, r4
 800307e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8003080:	f000 ff64 	bl	8003f4c <HAL_GetUIDw1>
 8003084:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	0e1a      	lsrs	r2, r3, #24
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3307      	adds	r3, #7
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	0c1a      	lsrs	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3306      	adds	r3, #6
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	0a1a      	lsrs	r2, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3305      	adds	r3, #5
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	0e1a      	lsrs	r2, r3, #24
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3303      	adds	r3, #3
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	0c1a      	lsrs	r2, r3, #16
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3302      	adds	r3, #2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	0a1a      	lsrs	r2, r3, #8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3301      	adds	r3, #1
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80030e0:	e031      	b.n	8003146 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3307      	adds	r3, #7
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	0a1a      	lsrs	r2, r3, #8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3306      	adds	r3, #6
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	0c1a      	lsrs	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3305      	adds	r3, #5
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	0e1a      	lsrs	r2, r3, #24
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8003110:	f7ff ff16 	bl	8002f40 <LL_FLASH_GetDeviceID>
 8003114:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3303      	adds	r3, #3
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8003120:	f7ff ff1a 	bl	8002f58 <LL_FLASH_GetSTCompanyID>
 8003124:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3302      	adds	r3, #2
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	0a1a      	lsrs	r2, r3, #8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3301      	adds	r3, #1
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	701a      	strb	r2, [r3, #0]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	bd90      	pop	{r4, r7, pc}

0800314e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 800314e:	b590      	push	{r4, r7, lr}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8003156:	f7ff fee9 	bl	8002f2c <LL_FLASH_GetUDN>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d10d      	bne.n	8003186 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800316a:	f000 fee5 	bl	8003f38 <HAL_GetUIDw0>
 800316e:	4604      	mov	r4, r0
 8003170:	f000 feec 	bl	8003f4c <HAL_GetUIDw1>
 8003174:	4603      	mov	r3, r0
 8003176:	405c      	eors	r4, r3
 8003178:	f000 fef2 	bl	8003f60 <HAL_GetUIDw2>
 800317c:	4603      	mov	r3, r0
 800317e:	ea84 0203 	eor.w	r2, r4, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
	...

08003190 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	4618      	mov	r0, r3
 80031a0:	f019 fc6a 	bl	801ca78 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031aa:	9200      	str	r2, [sp, #0]
 80031ac:	4a07      	ldr	r2, [pc, #28]	@ (80031cc <TimestampNow+0x3c>)
 80031ae:	2110      	movs	r1, #16
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f81d 	bl	80031f0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fc ffde 	bl	8000178 <strlen>
 80031bc:	4603      	mov	r3, r0
 80031be:	b29a      	uxth	r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	0801f180 	.word	0x0801f180

080031d0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80031d4:	2101      	movs	r1, #1
 80031d6:	2002      	movs	r0, #2
 80031d8:	f019 fade 	bl	801c798 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80031e4:	2100      	movs	r1, #0
 80031e6:	2002      	movs	r0, #2
 80031e8:	f019 fad6 	bl	801c798 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80031f0:	b40c      	push	{r2, r3}
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003202:	6839      	ldr	r1, [r7, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f019 fda1 	bl	801cd50 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003218:	b002      	add	sp, #8
 800321a:	4770      	bx	lr

0800321c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_GetTick+0x24>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8003242:	f000 f989 	bl	8003558 <TIMER_IF_GetTimerValue>
 8003246:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	200002ec 	.word	0x200002ec

08003258 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f9ff 	bl	8003666 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <LL_AHB2_GRP1_EnableClock>:
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800327e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4313      	orrs	r3, r2
 8003286:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003294:	68fb      	ldr	r3, [r7, #12]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80032a6:	f000 fe65 	bl	8003f74 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80032aa:	f000 fe69 	bl	8003f80 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80032ae:	f000 fe6d 	bl	8003f8c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80032c0:	2301      	movs	r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80032cc:	2001      	movs	r0, #1
 80032ce:	f7ff ffcf 	bl	8003270 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80032d2:	2002      	movs	r0, #2
 80032d4:	f7ff ffcc 	bl	8003270 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80032d8:	2002      	movs	r0, #2
 80032da:	f7ff ffc9 	bl	8003270 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80032de:	2002      	movs	r0, #2
 80032e0:	f7ff ffc6 	bl	8003270 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80032e4:	2301      	movs	r3, #1
 80032e6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032f0:	f002 fdd4 	bl	8005e9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80032f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032f8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4815      	ldr	r0, [pc, #84]	@ (8003354 <DBG_Init+0xb4>)
 8003300:	f002 fdcc 	bl	8005e9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8003304:	2308      	movs	r3, #8
 8003306:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4811      	ldr	r0, [pc, #68]	@ (8003354 <DBG_Init+0xb4>)
 800330e:	f002 fdc5 	bl	8005e9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8003312:	2310      	movs	r3, #16
 8003314:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	4619      	mov	r1, r3
 800331a:	480e      	ldr	r0, [pc, #56]	@ (8003354 <DBG_Init+0xb4>)
 800331c:	f002 fdbe 	bl	8005e9c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8003320:	2200      	movs	r2, #0
 8003322:	2101      	movs	r1, #1
 8003324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003328:	f002 ffe6 	bl	80062f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 800332c:	2200      	movs	r2, #0
 800332e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003332:	4808      	ldr	r0, [pc, #32]	@ (8003354 <DBG_Init+0xb4>)
 8003334:	f002 ffe0 	bl	80062f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8003338:	2200      	movs	r2, #0
 800333a:	2108      	movs	r1, #8
 800333c:	4805      	ldr	r0, [pc, #20]	@ (8003354 <DBG_Init+0xb4>)
 800333e:	f002 ffdb 	bl	80062f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8003342:	2200      	movs	r2, #0
 8003344:	2110      	movs	r1, #16
 8003346:	4803      	ldr	r0, [pc, #12]	@ (8003354 <DBG_Init+0xb4>)
 8003348:	f002 ffd6 	bl	80062f8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800334c:	bf00      	nop
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	48000400 	.word	0x48000400

08003358 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	@ 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8003360:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <EnvSensors_Read+0x54>)
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8003364:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <EnvSensors_Read+0x58>)
 8003366:	623b      	str	r3, [r7, #32]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8003368:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <EnvSensors_Read+0x5c>)
 800336a:	61fb      	str	r3, [r7, #28]
#endif

#ifdef BME280_H_
  BME280_Data_t BME280;

  BME280Calculation(&BME280);
 800336c:	f107 0308 	add.w	r3, r7, #8
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe fd41 	bl	8001df8 <BME280Calculation>

  TEMPERATURE_Value = BME280.Temperature;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	623b      	str	r3, [r7, #32]
  HUMIDITY_Value = BME280.Humidity;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
  PRESSURE_Value = BME280.Pressure;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	61fb      	str	r3, [r7, #28]

#endif

  sensor_data->humidity    = HUMIDITY_Value;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003386:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a3a      	ldr	r2, [r7, #32]
 800338c:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a08      	ldr	r2, [pc, #32]	@ (80033b8 <EnvSensors_Read+0x60>)
 8003398:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a07      	ldr	r2, [pc, #28]	@ (80033bc <EnvSensors_Read+0x64>)
 800339e:	611a      	str	r2, [r3, #16]

  return 0;
 80033a0:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3728      	adds	r7, #40	@ 0x28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	42480000 	.word	0x42480000
 80033b0:	41900000 	.word	0x41900000
 80033b4:	447a0000 	.word	0x447a0000
 80033b8:	003e090d 	.word	0x003e090d
 80033bc:	000503ab 	.word	0x000503ab

080033c0 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80033ca:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8003402:	4b14      	ldr	r3, [pc, #80]	@ (8003454 <TIMER_IF_Init+0x5c>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	f083 0301 	eor.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <TIMER_IF_Init+0x60>)
 8003412:	f04f 32ff 	mov.w	r2, #4294967295
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8003418:	f7ff fc02 	bl	8002c20 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800341c:	f000 f856 	bl	80034cc <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003420:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003424:	480c      	ldr	r0, [pc, #48]	@ (8003458 <TIMER_IF_Init+0x60>)
 8003426:	f005 facd 	bl	80089c4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800342a:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <TIMER_IF_Init+0x60>)
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003432:	4809      	ldr	r0, [pc, #36]	@ (8003458 <TIMER_IF_Init+0x60>)
 8003434:	f005 fc04 	bl	8008c40 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8003438:	2000      	movs	r0, #0
 800343a:	f000 f9d3 	bl	80037e4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800343e:	f000 f85f 	bl	8003500 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8003442:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <TIMER_IF_Init+0x5c>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8003448:	79fb      	ldrb	r3, [r7, #7]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200002ed 	.word	0x200002ed
 8003458:	200002a8 	.word	0x200002a8

0800345c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	@ 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800346a:	f107 0308 	add.w	r3, r7, #8
 800346e:	222c      	movs	r2, #44	@ 0x2c
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f01a fc82 	bl	801dd7c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8003478:	f000 f828 	bl	80034cc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <TIMER_IF_StartTimer+0x68>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	43db      	mvns	r3, r3
 800348e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8003494:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003498:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800349a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	2201      	movs	r2, #1
 80034a6:	4619      	mov	r1, r3
 80034a8:	4807      	ldr	r0, [pc, #28]	@ (80034c8 <TIMER_IF_StartTimer+0x6c>)
 80034aa:	f005 f97f 	bl	80087ac <HAL_RTC_SetAlarm_IT>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80034b4:	f7ff fb86 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80034b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3738      	adds	r7, #56	@ 0x38
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200002f0 	.word	0x200002f0
 80034c8:	200002a8 	.word	0x200002a8

080034cc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <TIMER_IF_StopTimer+0x2c>)
 80034d8:	2201      	movs	r2, #1
 80034da:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80034dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034e0:	4806      	ldr	r0, [pc, #24]	@ (80034fc <TIMER_IF_StopTimer+0x30>)
 80034e2:	f005 fa6f 	bl	80089c4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <TIMER_IF_StopTimer+0x30>)
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80034ee:	79fb      	ldrb	r3, [r7, #7]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40002800 	.word	0x40002800
 80034fc:	200002a8 	.word	0x200002a8

08003500 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8003504:	f000 f98e 	bl	8003824 <GetTimerTicks>
 8003508:	4603      	mov	r3, r0
 800350a:	4a03      	ldr	r2, [pc, #12]	@ (8003518 <TIMER_IF_SetTimerContext+0x18>)
 800350c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800350e:	4b02      	ldr	r3, [pc, #8]	@ (8003518 <TIMER_IF_SetTimerContext+0x18>)
 8003510:	681b      	ldr	r3, [r3, #0]
}
 8003512:	4618      	mov	r0, r3
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200002f0 	.word	0x200002f0

0800351c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8003520:	4b02      	ldr	r3, [pc, #8]	@ (800352c <TIMER_IF_GetTimerContext+0x10>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	200002f0 	.word	0x200002f0

08003530 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800353a:	f000 f973 	bl	8003824 <GetTimerTicks>
 800353e:	4602      	mov	r2, r0
 8003540:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8003548:	687b      	ldr	r3, [r7, #4]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200002f0 	.word	0x200002f0

08003558 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8003562:	4b06      	ldr	r3, [pc, #24]	@ (800357c <TIMER_IF_GetTimerValue+0x24>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800356a:	f000 f95b 	bl	8003824 <GetTimerTicks>
 800356e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8003570:	687b      	ldr	r3, [r7, #4]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200002ed 	.word	0x200002ed

08003580 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800358a:	2303      	movs	r3, #3
 800358c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800358e:	687b      	ldr	r3, [r7, #4]
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800359a:	b5b0      	push	{r4, r5, r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80035a2:	2100      	movs	r1, #0
 80035a4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	2000      	movs	r0, #0
 80035aa:	460a      	mov	r2, r1
 80035ac:	4603      	mov	r3, r0
 80035ae:	0d95      	lsrs	r5, r2, #22
 80035b0:	0294      	lsls	r4, r2, #10
 80035b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	4620      	mov	r0, r4
 80035bc:	4629      	mov	r1, r5
 80035be:	f7fd fdbb 	bl	8001138 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4613      	mov	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bdb0      	pop	{r4, r5, r7, pc}

080035d4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80035d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80035de:	2100      	movs	r1, #0
 80035e0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	2000      	movs	r0, #0
 80035e6:	460c      	mov	r4, r1
 80035e8:	4605      	mov	r5, r0
 80035ea:	4620      	mov	r0, r4
 80035ec:	4629      	mov	r1, r5
 80035ee:	f04f 0a00 	mov.w	sl, #0
 80035f2:	f04f 0b00 	mov.w	fp, #0
 80035f6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80035fa:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80035fe:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8003602:	4650      	mov	r0, sl
 8003604:	4659      	mov	r1, fp
 8003606:	1b02      	subs	r2, r0, r4
 8003608:	eb61 0305 	sbc.w	r3, r1, r5
 800360c:	f04f 0000 	mov.w	r0, #0
 8003610:	f04f 0100 	mov.w	r1, #0
 8003614:	0099      	lsls	r1, r3, #2
 8003616:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800361a:	0090      	lsls	r0, r2, #2
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	eb12 0804 	adds.w	r8, r2, r4
 8003624:	eb43 0905 	adc.w	r9, r3, r5
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003634:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003638:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800363c:	4690      	mov	r8, r2
 800363e:	4699      	mov	r9, r3
 8003640:	4640      	mov	r0, r8
 8003642:	4649      	mov	r1, r9
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	0a82      	lsrs	r2, r0, #10
 800364e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8003652:	0a8b      	lsrs	r3, r1, #10
 8003654:	4613      	mov	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8003658:	68fb      	ldr	r3, [r7, #12]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003664:	4770      	bx	lr

08003666 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ff93 	bl	800359a <TIMER_IF_Convert_ms2Tick>
 8003674:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8003676:	f000 f8d5 	bl	8003824 <GetTimerTicks>
 800367a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800367c:	e000      	b.n	8003680 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800367e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003680:	f000 f8d0 	bl	8003824 <GetTimerTicks>
 8003684:	4602      	mov	r2, r0
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	429a      	cmp	r2, r3
 800368e:	d8f6      	bhi.n	800367e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80036a2:	f019 ff83 	bl	801d5ac <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80036b6:	f000 f8a5 	bl	8003804 <TIMER_IF_BkUp_Read_MSBticks>
 80036ba:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3301      	adds	r3, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f88f 	bl	80037e4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80036ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d2:	b08c      	sub	sp, #48	@ 0x30
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80036dc:	f000 f8a2 	bl	8003824 <GetTimerTicks>
 80036e0:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80036e2:	f000 f88f 	bl	8003804 <TIMER_IF_BkUp_Read_MSBticks>
 80036e6:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	2200      	movs	r2, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	60fa      	str	r2, [r7, #12]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	000b      	movs	r3, r1
 80036fc:	2200      	movs	r2, #0
 80036fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003700:	2000      	movs	r0, #0
 8003702:	460c      	mov	r4, r1
 8003704:	4605      	mov	r5, r0
 8003706:	eb12 0804 	adds.w	r8, r2, r4
 800370a:	eb43 0905 	adc.w	r9, r3, r5
 800370e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8003712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	0a82      	lsrs	r2, r0, #10
 8003720:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8003724:	0a8b      	lsrs	r3, r1, #10
 8003726:	4613      	mov	r3, r2
 8003728:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2200      	movs	r2, #0
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003738:	f04f 0b00 	mov.w	fp, #0
 800373c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff46 	bl	80035d4 <TIMER_IF_Convert_Tick2ms>
 8003748:	4603      	mov	r3, r0
 800374a:	b29a      	uxth	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8003750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003752:	4618      	mov	r0, r3
 8003754:	3730      	adds	r7, #48	@ 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800375c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	2100      	movs	r1, #0
 8003768:	4803      	ldr	r0, [pc, #12]	@ (8003778 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800376a:	f005 fafb 	bl	8008d64 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	200002a8 	.word	0x200002a8

0800377c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	2101      	movs	r1, #1
 8003788:	4803      	ldr	r0, [pc, #12]	@ (8003798 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800378a:	f005 faeb 	bl	8008d64 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200002a8 	.word	0x200002a8

0800379c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80037a6:	2100      	movs	r1, #0
 80037a8:	4804      	ldr	r0, [pc, #16]	@ (80037bc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80037aa:	f005 faf3 	bl	8008d94 <HAL_RTCEx_BKUPRead>
 80037ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80037b0:	687b      	ldr	r3, [r7, #4]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200002a8 	.word	0x200002a8

080037c0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80037ca:	2101      	movs	r1, #1
 80037cc:	4804      	ldr	r0, [pc, #16]	@ (80037e0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80037ce:	f005 fae1 	bl	8008d94 <HAL_RTCEx_BKUPRead>
 80037d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80037d4:	687b      	ldr	r3, [r7, #4]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200002a8 	.word	0x200002a8

080037e4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	2102      	movs	r1, #2
 80037f0:	4803      	ldr	r0, [pc, #12]	@ (8003800 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80037f2:	f005 fab7 	bl	8008d64 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200002a8 	.word	0x200002a8

08003804 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800380a:	2102      	movs	r1, #2
 800380c:	4804      	ldr	r0, [pc, #16]	@ (8003820 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800380e:	f005 fac1 	bl	8008d94 <HAL_RTCEx_BKUPRead>
 8003812:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8003814:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200002a8 	.word	0x200002a8

08003824 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800382a:	480b      	ldr	r0, [pc, #44]	@ (8003858 <GetTimerTicks+0x34>)
 800382c:	f7ff fdd9 	bl	80033e2 <LL_RTC_TIME_GetSubSecond>
 8003830:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003832:	e003      	b.n	800383c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003834:	4808      	ldr	r0, [pc, #32]	@ (8003858 <GetTimerTicks+0x34>)
 8003836:	f7ff fdd4 	bl	80033e2 <LL_RTC_TIME_GetSubSecond>
 800383a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800383c:	4806      	ldr	r0, [pc, #24]	@ (8003858 <GetTimerTicks+0x34>)
 800383e:	f7ff fdd0 	bl	80033e2 <LL_RTC_TIME_GetSubSecond>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4293      	cmp	r3, r2
 8003848:	d1f4      	bne.n	8003834 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40002800 	.word	0x40002800

0800385c <LL_AHB2_GRP1_EnableClock>:
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003868:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800386a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4313      	orrs	r3, r2
 8003872:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003878:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003880:	68fb      	ldr	r3, [r7, #12]
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <LL_APB2_GRP1_EnableClock>:
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003898:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800389a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038b0:	68fb      	ldr	r3, [r7, #12]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <LL_APB2_GRP1_DisableClock>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038d2:	4013      	ands	r3, r2
 80038d4:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038e4:	4b22      	ldr	r3, [pc, #136]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 80038e6:	4a23      	ldr	r2, [pc, #140]	@ (8003974 <MX_USART1_UART_Init+0x94>)
 80038e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038ea:	4b21      	ldr	r3, [pc, #132]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 80038ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 8003900:	2200      	movs	r2, #0
 8003902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003904:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 8003906:	220c      	movs	r2, #12
 8003908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800390a:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003910:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003916:	4b16      	ldr	r3, [pc, #88]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 8003918:	2200      	movs	r2, #0
 800391a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800391c:	4b14      	ldr	r3, [pc, #80]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 800391e:	2200      	movs	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003922:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 8003924:	2200      	movs	r2, #0
 8003926:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003928:	4811      	ldr	r0, [pc, #68]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 800392a:	f005 ff28 	bl	800977e <HAL_UART_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003934:	f7ff f946 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003938:	2100      	movs	r1, #0
 800393a:	480d      	ldr	r0, [pc, #52]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 800393c:	f008 f851 	bl	800b9e2 <HAL_UARTEx_SetTxFifoThreshold>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003946:	f7ff f93d 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800394a:	2100      	movs	r1, #0
 800394c:	4808      	ldr	r0, [pc, #32]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 800394e:	f008 f886 	bl	800ba5e <HAL_UARTEx_SetRxFifoThreshold>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003958:	f7ff f934 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800395c:	4804      	ldr	r0, [pc, #16]	@ (8003970 <MX_USART1_UART_Init+0x90>)
 800395e:	f008 f805 	bl	800b96c <HAL_UARTEx_EnableFifoMode>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003968:	f7ff f92c 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200002f4 	.word	0x200002f4
 8003974:	40013800 	.word	0x40013800

08003978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b096      	sub	sp, #88	@ 0x58
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003990:	f107 030c 	add.w	r3, r7, #12
 8003994:	2238      	movs	r2, #56	@ 0x38
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f01a f9ef 	bl	801dd7c <memset>
  if(uartHandle->Instance==USART1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a60 <HAL_UART_MspInit+0xe8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d156      	bne.n	8003a56 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039a8:	2301      	movs	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80039ac:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80039b0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039b2:	f107 030c 	add.w	r3, r7, #12
 80039b6:	4618      	mov	r0, r3
 80039b8:	f004 fd5c 	bl	8008474 <HAL_RCCEx_PeriphCLKConfig>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80039c2:	f7ff f8ff 	bl	8002bc4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039c6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80039ca:	f7ff ff5f 	bl	800388c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ce:	2002      	movs	r0, #2
 80039d0:	f7ff ff44 	bl	800385c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80039d4:	23c0      	movs	r3, #192	@ 0xc0
 80039d6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039e4:	2307      	movs	r3, #7
 80039e6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80039ec:	4619      	mov	r1, r3
 80039ee:	481d      	ldr	r0, [pc, #116]	@ (8003a64 <HAL_UART_MspInit+0xec>)
 80039f0:	f002 fa54 	bl	8005e9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80039f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 80039f6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <HAL_UART_MspInit+0xf4>)
 80039f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80039fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 80039fc:	2212      	movs	r2, #18
 80039fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a02:	2210      	movs	r2, #16
 8003a04:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a06:	4b18      	ldr	r3, [pc, #96]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0c:	4b16      	ldr	r3, [pc, #88]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a0e:	2280      	movs	r2, #128	@ 0x80
 8003a10:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a18:	4b13      	ldr	r3, [pc, #76]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a1e:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a24:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a2a:	480f      	ldr	r0, [pc, #60]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a2c:	f001 fc32 	bl	8005294 <HAL_DMA_Init>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8003a36:	f7ff f8c5 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a3e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a40:	4a09      	ldr	r2, [pc, #36]	@ (8003a68 <HAL_UART_MspInit+0xf0>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003a46:	2200      	movs	r2, #0
 8003a48:	2102      	movs	r1, #2
 8003a4a:	2024      	movs	r0, #36	@ 0x24
 8003a4c:	f001 fbeb 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a50:	2024      	movs	r0, #36	@ 0x24
 8003a52:	f001 fc02 	bl	800525a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a56:	bf00      	nop
 8003a58:	3758      	adds	r7, #88	@ 0x58
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40013800 	.word	0x40013800
 8003a64:	48000400 	.word	0x48000400
 8003a68:	20000388 	.word	0x20000388
 8003a6c:	40020008 	.word	0x40020008

08003a70 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003aac <HAL_UART_MspDeInit+0x3c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10f      	bne.n	8003aa2 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a82:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003a86:	f7ff ff19 	bl	80038bc <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003a8a:	21c0      	movs	r1, #192	@ 0xc0
 8003a8c:	4808      	ldr	r0, [pc, #32]	@ (8003ab0 <HAL_UART_MspDeInit+0x40>)
 8003a8e:	f002 fb65 	bl	800615c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fca4 	bl	80053e4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003a9c:	2024      	movs	r0, #36	@ 0x24
 8003a9e:	f001 fbea 	bl	8005276 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	48000400 	.word	0x48000400

08003ab4 <LL_APB2_GRP1_ForceReset>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ac2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <LL_APB2_GRP1_ReleaseReset>:
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ae2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aec:	4013      	ands	r3, r2
 8003aee:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
	...

08003afc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <LL_EXTI_EnableIT_0_31+0x24>)
 8003b06:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003b0a:	4905      	ldr	r1, [pc, #20]	@ (8003b20 <LL_EXTI_EnableIT_0_31+0x24>)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	58000800 	.word	0x58000800

08003b24 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003b2c:	4a07      	ldr	r2, [pc, #28]	@ (8003b4c <vcom_Init+0x28>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003b32:	f7fe fbf9 	bl	8002328 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003b36:	f7ff fed3 	bl	80038e0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003b3a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003b3e:	f7ff ffdd 	bl	8003afc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003b42:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200003ec 	.word	0x200003ec

08003b50 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003b54:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003b58:	f7ff ffac 	bl	8003ab4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003b5c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003b60:	f7ff ffb9 	bl	8003ad6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003b64:	4804      	ldr	r0, [pc, #16]	@ (8003b78 <vcom_DeInit+0x28>)
 8003b66:	f7ff ff83 	bl	8003a70 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003b6a:	200f      	movs	r0, #15
 8003b6c:	f001 fb83 	bl	8005276 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003b70:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200002f4 	.word	0x200002f4

08003b7c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4804      	ldr	r0, [pc, #16]	@ (8003ba0 <vcom_Trace_DMA+0x24>)
 8003b90:	f005 fe92 	bl	80098b8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003b94:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200002f4 	.word	0x200002f4

08003ba4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003bac:	4a19      	ldr	r2, [pc, #100]	@ (8003c14 <vcom_ReceiveInit+0x70>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003bb2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003bb6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003bb8:	f107 0308 	add.w	r3, r7, #8
 8003bbc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003bc0:	4815      	ldr	r0, [pc, #84]	@ (8003c18 <vcom_ReceiveInit+0x74>)
 8003bc2:	f007 fe46 	bl	800b852 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003bc6:	bf00      	nop
 8003bc8:	4b13      	ldr	r3, [pc, #76]	@ (8003c18 <vcom_ReceiveInit+0x74>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd6:	d0f7      	beq.n	8003bc8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003bd8:	bf00      	nop
 8003bda:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <vcom_ReceiveInit+0x74>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be8:	d1f7      	bne.n	8003bda <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <vcom_ReceiveInit+0x74>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <vcom_ReceiveInit+0x74>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003bf8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003bfa:	4807      	ldr	r0, [pc, #28]	@ (8003c18 <vcom_ReceiveInit+0x74>)
 8003bfc:	f007 fe84 	bl	800b908 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003c00:	2201      	movs	r2, #1
 8003c02:	4906      	ldr	r1, [pc, #24]	@ (8003c1c <vcom_ReceiveInit+0x78>)
 8003c04:	4804      	ldr	r0, [pc, #16]	@ (8003c18 <vcom_ReceiveInit+0x74>)
 8003c06:	f005 fe0b 	bl	8009820 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003c0a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	200003f0 	.word	0x200003f0
 8003c18:	200002f4 	.word	0x200002f4
 8003c1c:	200003e8 	.word	0x200003e8

08003c20 <vcom_Resume>:

void vcom_Resume(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c24:	4808      	ldr	r0, [pc, #32]	@ (8003c48 <vcom_Resume+0x28>)
 8003c26:	f005 fdaa 	bl	800977e <HAL_UART_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003c30:	f7fe ffc8 	bl	8002bc4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c34:	4805      	ldr	r0, [pc, #20]	@ (8003c4c <vcom_Resume+0x2c>)
 8003c36:	f001 fb2d 	bl	8005294 <HAL_DMA_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003c40:	f7fe ffc0 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200002f4 	.word	0x200002f4
 8003c4c:	20000388 	.word	0x20000388

08003c50 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a05      	ldr	r2, [pc, #20]	@ (8003c74 <HAL_UART_TxCpltCallback+0x24>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d103      	bne.n	8003c6a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_UART_TxCpltCallback+0x28>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2000      	movs	r0, #0
 8003c68:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40013800 	.word	0x40013800
 8003c78:	200003ec 	.word	0x200003ec

08003c7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc0 <HAL_UART_RxCpltCallback+0x44>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d113      	bne.n	8003cb6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <HAL_UART_RxCpltCallback+0x48>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_UART_RxCpltCallback+0x30>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003ca0:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <HAL_UART_RxCpltCallback+0x48>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4807      	ldr	r0, [pc, #28]	@ (8003cc8 <HAL_UART_RxCpltCallback+0x4c>)
 8003caa:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003cac:	2201      	movs	r2, #1
 8003cae:	4906      	ldr	r1, [pc, #24]	@ (8003cc8 <HAL_UART_RxCpltCallback+0x4c>)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f005 fdb5 	bl	8009820 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	200003f0 	.word	0x200003f0
 8003cc8:	200003e8 	.word	0x200003e8

08003ccc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ccc:	480d      	ldr	r0, [pc, #52]	@ (8003d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003cd0:	f7ff fb81 	bl	80033d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cd4:	480c      	ldr	r0, [pc, #48]	@ (8003d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cd6:	490d      	ldr	r1, [pc, #52]	@ (8003d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <LoopForever+0xe>)
  movs r3, #0
 8003cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cdc:	e002      	b.n	8003ce4 <LoopCopyDataInit>

08003cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ce2:	3304      	adds	r3, #4

08003ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ce8:	d3f9      	bcc.n	8003cde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cea:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cec:	4c0a      	ldr	r4, [pc, #40]	@ (8003d18 <LoopForever+0x16>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf0:	e001      	b.n	8003cf6 <LoopFillZerobss>

08003cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf4:	3204      	adds	r2, #4

08003cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cf8:	d3fb      	bcc.n	8003cf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003cfa:	f01a f84d 	bl	801dd98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cfe:	f7fe fef3 	bl	8002ae8 <main>

08003d02 <LoopForever>:

LoopForever:
    b LoopForever
 8003d02:	e7fe      	b.n	8003d02 <LoopForever>
  ldr   r0, =_estack
 8003d04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d0c:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8003d10:	08020190 	.word	0x08020190
  ldr r2, =_sbss
 8003d14:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8003d18:	2000241c 	.word	0x2000241c

08003d1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC_IRQHandler>

08003d1e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	60da      	str	r2, [r3, #12]
 8003d30:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003d32:	2310      	movs	r3, #16
 8003d34:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003d36:	2301      	movs	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d4a:	f002 f8a7 	bl	8005e9c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003d4e:	2320      	movs	r3, #32
 8003d50:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d5a:	f002 f89f 	bl	8005e9c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2120      	movs	r1, #32
 8003d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d66:	f002 fac7 	bl	80062f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d72:	f002 fac1 	bl	80062f8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d83f      	bhi.n	8003e10 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003d90:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003dc3 	.word	0x08003dc3
 8003da0:	08003ddd 	.word	0x08003ddd
 8003da4:	08003df7 	.word	0x08003df7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003da8:	2200      	movs	r2, #0
 8003daa:	2110      	movs	r1, #16
 8003dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003db0:	f002 faa2 	bl	80062f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003db4:	2200      	movs	r2, #0
 8003db6:	2120      	movs	r1, #32
 8003db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dbc:	f002 fa9c 	bl	80062f8 <HAL_GPIO_WritePin>
      break;      
 8003dc0:	e027      	b.n	8003e12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	2110      	movs	r1, #16
 8003dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dca:	f002 fa95 	bl	80062f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dd6:	f002 fa8f 	bl	80062f8 <HAL_GPIO_WritePin>
      break;
 8003dda:	e01a      	b.n	8003e12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003ddc:	2201      	movs	r2, #1
 8003dde:	2110      	movs	r1, #16
 8003de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003de4:	f002 fa88 	bl	80062f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003de8:	2201      	movs	r2, #1
 8003dea:	2120      	movs	r1, #32
 8003dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003df0:	f002 fa82 	bl	80062f8 <HAL_GPIO_WritePin>
      break;
 8003df4:	e00d      	b.n	8003e12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003df6:	2200      	movs	r2, #0
 8003df8:	2110      	movs	r1, #16
 8003dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dfe:	f002 fa7b 	bl	80062f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003e02:	2201      	movs	r2, #1
 8003e04:	2120      	movs	r1, #32
 8003e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e0a:	f002 fa75 	bl	80062f8 <HAL_GPIO_WritePin>
      break;
 8003e0e:	e000      	b.n	8003e12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003e10:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003e20:	2302      	movs	r3, #2
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003e3c:	2301      	movs	r3, #1
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003e56:	230f      	movs	r3, #15
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e001      	b.n	8003e60 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003e5c:	2316      	movs	r3, #22
 8003e5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003e60:	68fb      	ldr	r3, [r7, #12]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003e70:	4b04      	ldr	r3, [pc, #16]	@ (8003e84 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a03      	ldr	r2, [pc, #12]	@ (8003e84 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	6053      	str	r3, [r2, #4]
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	e0042000 	.word	0xe0042000

08003e88 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003e8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ea0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a03      	ldr	r2, [pc, #12]	@ (8003ea0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003e92:	f023 0302 	bic.w	r3, r3, #2
 8003e96:	6053      	str	r3, [r2, #4]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	e0042000 	.word	0xe0042000

08003ea4 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003ea8:	4b04      	ldr	r3, [pc, #16]	@ (8003ebc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a03      	ldr	r2, [pc, #12]	@ (8003ebc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	6053      	str	r3, [r2, #4]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	e0042000 	.word	0xe0042000

08003ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eca:	2003      	movs	r0, #3
 8003ecc:	f001 f9a0 	bl	8005210 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ed0:	f004 f8f2 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4a09      	ldr	r2, [pc, #36]	@ (8003efc <HAL_Init+0x3c>)
 8003ed8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003eda:	200f      	movs	r0, #15
 8003edc:	f7ff f99e 	bl	800321c <HAL_InitTick>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	71fb      	strb	r3, [r7, #7]
 8003eea:	e001      	b.n	8003ef0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003eec:	f7fe ff61 	bl	8002db2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000000 	.word	0x20000000

08003f00 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f04:	4b04      	ldr	r3, [pc, #16]	@ (8003f18 <HAL_SuspendTick+0x18>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a03      	ldr	r2, [pc, #12]	@ (8003f18 <HAL_SuspendTick+0x18>)
 8003f0a:	f023 0302 	bic.w	r3, r3, #2
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f20:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <HAL_ResumeTick+0x18>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a03      	ldr	r2, [pc, #12]	@ (8003f34 <HAL_ResumeTick+0x18>)
 8003f26:	f043 0302 	orr.w	r3, r3, #2
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	e000e010 	.word	0xe000e010

08003f38 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003f3c:	4b02      	ldr	r3, [pc, #8]	@ (8003f48 <HAL_GetUIDw0+0x10>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	1fff7590 	.word	0x1fff7590

08003f4c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003f50:	4b02      	ldr	r3, [pc, #8]	@ (8003f5c <HAL_GetUIDw1+0x10>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	1fff7594 	.word	0x1fff7594

08003f60 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003f64:	4b02      	ldr	r3, [pc, #8]	@ (8003f70 <HAL_GetUIDw2+0x10>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	1fff7598 	.word	0x1fff7598

08003f74 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003f78:	f7ff ff78 	bl	8003e6c <LL_DBGMCU_DisableDBGSleepMode>
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003f84:	f7ff ff80 	bl	8003e88 <LL_DBGMCU_DisableDBGStopMode>
}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003f90:	f7ff ff88 	bl	8003ea4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2107      	movs	r1, #7
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	401a      	ands	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	431a      	orrs	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2107      	movs	r1, #7
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	210f      	movs	r1, #15
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	f003 010f 	and.w	r1, r3, #15
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	431a      	orrs	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80040e0:	43db      	mvns	r3, r3
 80040e2:	401a      	ands	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	43db      	mvns	r3, r3
 8004108:	401a      	ands	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	0219      	lsls	r1, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	400b      	ands	r3, r1
 8004112:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8004116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800411a:	431a      	orrs	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800413a:	f023 0317 	bic.w	r3, r3, #23
 800413e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004160:	f023 0317 	bic.w	r3, r3, #23
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6093      	str	r3, [r2, #8]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004186:	d101      	bne.n	800418c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041a8:	f023 0317 	bic.w	r3, r3, #23
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041ce:	f023 0317 	bic.w	r3, r3, #23
 80041d2:	f043 0202 	orr.w	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <LL_ADC_IsEnabled+0x18>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <LL_ADC_IsEnabled+0x1a>
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d101      	bne.n	8004220 <LL_ADC_IsDisableOngoing+0x18>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <LL_ADC_IsDisableOngoing+0x1a>
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800423c:	f023 0317 	bic.w	r3, r3, #23
 8004240:	f043 0204 	orr.w	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004262:	f023 0317 	bic.w	r3, r3, #23
 8004266:	f043 0210 	orr.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b04      	cmp	r3, #4
 800428a:	d101      	bne.n	8004290 <LL_ADC_REG_IsConversionOngoing+0x18>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e17e      	b.n	80045bc <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fd ff63 	bl	8002198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff44 	bl	8004172 <LL_ADC_IsInternalRegulatorEnabled>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d115      	bne.n	800431c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff18 	bl	800412a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042fa:	4b9e      	ldr	r3, [pc, #632]	@ (8004574 <HAL_ADC_Init+0x2d8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	4a9d      	ldr	r2, [pc, #628]	@ (8004578 <HAL_ADC_Init+0x2dc>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	3301      	adds	r3, #1
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800430e:	e002      	b.n	8004316 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f9      	bne.n	8004310 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff26 	bl	8004172 <LL_ADC_IsInternalRegulatorEnabled>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10d      	bne.n	8004348 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	f043 0210 	orr.w	r2, r3, #16
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433c:	f043 0201 	orr.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff93 	bl	8004278 <LL_ADC_REG_IsConversionOngoing>
 8004352:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 8124 	bne.w	80045aa <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 8120 	bne.w	80045aa <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004372:	f043 0202 	orr.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff ff30 	bl	80041e4 <LL_ADC_IsEnabled>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 80a7 	bne.w	80044da <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	7e1b      	ldrb	r3, [r3, #24]
 8004394:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004396:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	7e5b      	ldrb	r3, [r3, #25]
 800439c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800439e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7e9b      	ldrb	r3, [r3, #26]
 80043a4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80043a6:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_ADC_Init+0x11a>
 80043b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043b4:	e000      	b.n	80043b8 <HAL_ADC_Init+0x11c>
 80043b6:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80043b8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80043be:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da04      	bge.n	80043d2 <HAL_ADC_Init+0x136>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043d0:	e001      	b.n	80043d6 <HAL_ADC_Init+0x13a>
 80043d2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 80043d6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80043de:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80043e0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d114      	bne.n	800441c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7e9b      	ldrb	r3, [r3, #26]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e00b      	b.n	800441c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004430:	4313      	orrs	r3, r2
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8004442:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	430b      	orrs	r3, r1
 800444e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800445c:	4313      	orrs	r3, r2
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d111      	bne.n	8004492 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800447a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004480:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004486:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	4b38      	ldr	r3, [pc, #224]	@ (800457c <HAL_ADC_Init+0x2e0>)
 800449a:	4013      	ands	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	6979      	ldr	r1, [r7, #20]
 80044a2:	430b      	orrs	r3, r1
 80044a4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80044ae:	d014      	beq.n	80044da <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b8:	d00f      	beq.n	80044da <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80044be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044c2:	d00a      	beq.n	80044da <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80044c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004580 <HAL_ADC_Init+0x2e4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80044d4:	492a      	ldr	r1, [pc, #168]	@ (8004580 <HAL_ADC_Init+0x2e4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e2:	461a      	mov	r2, r3
 80044e4:	2100      	movs	r1, #0
 80044e6:	f7ff fd76 	bl	8003fd6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f2:	461a      	mov	r2, r3
 80044f4:	4923      	ldr	r1, [pc, #140]	@ (8004584 <HAL_ADC_Init+0x2e8>)
 80044f6:	f7ff fd6e 	bl	8003fd6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f062 020f 	orn	r2, r2, #15
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28
 8004512:	e017      	b.n	8004544 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800451c:	d112      	bne.n	8004544 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	3b01      	subs	r3, #1
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	f003 031c 	and.w	r3, r3, #28
 8004530:	f06f 020f 	mvn.w	r2, #15
 8004534:	fa02 f103 	lsl.w	r1, r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fd61 	bl	8004012 <LL_ADC_GetSamplingTimeCommonChannels>
 8004550:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004556:	429a      	cmp	r2, r3
 8004558:	d116      	bne.n	8004588 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004564:	f023 0303 	bic.w	r3, r3, #3
 8004568:	f043 0201 	orr.w	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004570:	e023      	b.n	80045ba <HAL_ADC_Init+0x31e>
 8004572:	bf00      	nop
 8004574:	20000000 	.word	0x20000000
 8004578:	053e2d63 	.word	0x053e2d63
 800457c:	1ffffc02 	.word	0x1ffffc02
 8004580:	40012708 	.word	0x40012708
 8004584:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	f023 0312 	bic.w	r3, r3, #18
 8004590:	f043 0210 	orr.w	r2, r3, #16
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	f043 0201 	orr.w	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045a8:	e007      	b.n	80045ba <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	f043 0210 	orr.w	r2, r3, #16
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80045ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07a      	b.n	80046cc <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 face 	bl	8004b84 <ADC_ConversionStop>
 80045e8:	4603      	mov	r3, r0
 80045ea:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fb92 	bl	8004d1c <ADC_Disable>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fd9f 	bl	8004150 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8004620:	f023 0303 	bic.w	r3, r3, #3
 8004624:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f240 329f 	movw	r2, #927	@ 0x39f
 800462e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68d9      	ldr	r1, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b26      	ldr	r3, [pc, #152]	@ (80046d4 <HAL_ADC_DeInit+0x110>)
 800463c:	400b      	ands	r3, r1
 800463e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0207 	bic.w	r2, r2, #7
 800464e:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800466c:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800467c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800468c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800469c:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800469e:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <HAL_ADC_DeInit+0x114>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a0d      	ldr	r2, [pc, #52]	@ (80046d8 <HAL_ADC_DeInit+0x114>)
 80046a4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80046a8:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd fd88 	bl	80021c0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	833e0200 	.word	0x833e0200
 80046d8:	40012708 	.word	0x40012708

080046dc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fdc5 	bl	8004278 <LL_ADC_REG_IsConversionOngoing>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d132      	bne.n	800475a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_Start+0x26>
 80046fe:	2302      	movs	r3, #2
 8004700:	e02e      	b.n	8004760 <HAL_ADC_Start+0x84>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa80 	bl	8004c10 <ADC_Enable>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11a      	bne.n	8004750 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	221c      	movs	r2, #28
 800473a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fd6f 	bl	800422c <LL_ADC_REG_StartConversion>
 800474e:	e006      	b.n	800475e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004758:	e001      	b.n	800475e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800475a:	2302      	movs	r3, #2
 800475c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800475e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_ADC_Stop+0x16>
 800477a:	2302      	movs	r3, #2
 800477c:	e022      	b.n	80047c4 <HAL_ADC_Stop+0x5c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f9fc 	bl	8004b84 <ADC_ConversionStop>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d111      	bne.n	80047ba <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fac0 	bl	8004d1c <ADC_Disable>
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	f043 0201 	orr.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d102      	bne.n	80047e4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80047de:	2308      	movs	r3, #8
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e010      	b.n	8004806 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e077      	b.n	80048f2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004802:	2304      	movs	r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004806:	f7fe fd13 	bl	8003230 <HAL_GetTick>
 800480a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800480c:	e021      	b.n	8004852 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d01d      	beq.n	8004852 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004816:	f7fe fd0b 	bl	8003230 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <HAL_ADC_PollForConversion+0x60>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d112      	bne.n	8004852 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	f043 0204 	orr.w	r2, r3, #4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e04f      	b.n	80048f2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0d6      	beq.n	800480e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004864:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fbe6 	bl	8004042 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d031      	beq.n	80048e0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	7e9b      	ldrb	r3, [r3, #26]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d12d      	bne.n	80048e0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d126      	bne.n	80048e0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fcee 	bl	8004278 <LL_ADC_REG_IsConversionOngoing>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d112      	bne.n	80048c8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 020c 	bic.w	r2, r2, #12
 80048b0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80048c6:	e00b      	b.n	80048e0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	7e1b      	ldrb	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	220c      	movs	r2, #12
 80048ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
	...

08004914 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x28>
 8004938:	2302      	movs	r3, #2
 800493a:	e110      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x24a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fc95 	bl	8004278 <LL_ADC_REG_IsConversionOngoing>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 80f7 	bne.w	8004b44 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b02      	cmp	r3, #2
 800495c:	f000 80b1 	beq.w	8004ac2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004968:	d004      	beq.n	8004974 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800496e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b68 <HAL_ADC_ConfigChannel+0x254>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d108      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7ff fb92 	bl	80040a8 <LL_ADC_REG_SetSequencerChAdd>
 8004984:	e041      	b.n	8004a0a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	210f      	movs	r1, #15
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	401a      	ands	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0xa0>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	0e9b      	lsrs	r3, r3, #26
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	e011      	b.n	80049d8 <HAL_ADC_ConfigChannel+0xc4>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80049cc:	2320      	movs	r3, #32
 80049ce:	e003      	b.n	80049d8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	6839      	ldr	r1, [r7, #0]
 80049da:	6849      	ldr	r1, [r1, #4]
 80049dc:	f001 011f 	and.w	r1, r1, #31
 80049e0:	408b      	lsls	r3, r1
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d808      	bhi.n	8004a0a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	6859      	ldr	r1, [r3, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	f7ff fb2e 	bl	8004066 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f7ff fb6b 	bl	80040f2 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f280 8097 	bge.w	8004b54 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a26:	4851      	ldr	r0, [pc, #324]	@ (8004b6c <HAL_ADC_ConfigChannel+0x258>)
 8004a28:	f7ff fac8 	bl	8003fbc <LL_ADC_GetCommonPathInternalCh>
 8004a2c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4f      	ldr	r2, [pc, #316]	@ (8004b70 <HAL_ADC_ConfigChannel+0x25c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d120      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11b      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4848      	ldr	r0, [pc, #288]	@ (8004b6c <HAL_ADC_ConfigChannel+0x258>)
 8004a4c:	f7ff faa4 	bl	8003f98 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a50:	4b48      	ldr	r3, [pc, #288]	@ (8004b74 <HAL_ADC_ConfigChannel+0x260>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	099b      	lsrs	r3, r3, #6
 8004a56:	4a48      	ldr	r2, [pc, #288]	@ (8004b78 <HAL_ADC_ConfigChannel+0x264>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	4613      	mov	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a6a:	e002      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f9      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a78:	e06c      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b7c <HAL_ADC_ConfigChannel+0x268>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10c      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d107      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a94:	4619      	mov	r1, r3
 8004a96:	4835      	ldr	r0, [pc, #212]	@ (8004b6c <HAL_ADC_ConfigChannel+0x258>)
 8004a98:	f7ff fa7e 	bl	8003f98 <LL_ADC_SetCommonPathInternalCh>
 8004a9c:	e05a      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a37      	ldr	r2, [pc, #220]	@ (8004b80 <HAL_ADC_ConfigChannel+0x26c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d155      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d150      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ab8:	4619      	mov	r1, r3
 8004aba:	482c      	ldr	r0, [pc, #176]	@ (8004b6c <HAL_ADC_ConfigChannel+0x258>)
 8004abc:	f7ff fa6c 	bl	8003f98 <LL_ADC_SetCommonPathInternalCh>
 8004ac0:	e048      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aca:	d004      	beq.n	8004ad6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004ad0:	4a25      	ldr	r2, [pc, #148]	@ (8004b68 <HAL_ADC_ConfigChannel+0x254>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7ff faf3 	bl	80040cc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da32      	bge.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aee:	481f      	ldr	r0, [pc, #124]	@ (8004b6c <HAL_ADC_ConfigChannel+0x258>)
 8004af0:	f7ff fa64 	bl	8003fbc <LL_ADC_GetCommonPathInternalCh>
 8004af4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1d      	ldr	r2, [pc, #116]	@ (8004b70 <HAL_ADC_ConfigChannel+0x25c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d107      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b06:	4619      	mov	r1, r3
 8004b08:	4818      	ldr	r0, [pc, #96]	@ (8004b6c <HAL_ADC_ConfigChannel+0x258>)
 8004b0a:	f7ff fa45 	bl	8003f98 <LL_ADC_SetCommonPathInternalCh>
 8004b0e:	e021      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a19      	ldr	r2, [pc, #100]	@ (8004b7c <HAL_ADC_ConfigChannel+0x268>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d107      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b20:	4619      	mov	r1, r3
 8004b22:	4812      	ldr	r0, [pc, #72]	@ (8004b6c <HAL_ADC_ConfigChannel+0x258>)
 8004b24:	f7ff fa38 	bl	8003f98 <LL_ADC_SetCommonPathInternalCh>
 8004b28:	e014      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a14      	ldr	r2, [pc, #80]	@ (8004b80 <HAL_ADC_ConfigChannel+0x26c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10f      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480b      	ldr	r0, [pc, #44]	@ (8004b6c <HAL_ADC_ConfigChannel+0x258>)
 8004b3e:	f7ff fa2b 	bl	8003f98 <LL_ADC_SetCommonPathInternalCh>
 8004b42:	e007      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	80000004 	.word	0x80000004
 8004b6c:	40012708 	.word	0x40012708
 8004b70:	b0001000 	.word	0xb0001000
 8004b74:	20000000 	.word	0x20000000
 8004b78:	053e2d63 	.word	0x053e2d63
 8004b7c:	b8004000 	.word	0xb8004000
 8004b80:	b4002000 	.word	0xb4002000

08004b84 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fb71 	bl	8004278 <LL_ADC_REG_IsConversionOngoing>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d033      	beq.n	8004c04 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fb31 	bl	8004208 <LL_ADC_IsDisableOngoing>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fb4e 	bl	8004252 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bb6:	f7fe fb3b 	bl	8003230 <HAL_GetTick>
 8004bba:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004bbc:	e01b      	b.n	8004bf6 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004bbe:	f7fe fb37 	bl	8003230 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d914      	bls.n	8004bf6 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bde:	f043 0210 	orr.w	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e007      	b.n	8004c06 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1dc      	bne.n	8004bbe <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fadf 	bl	80041e4 <LL_ADC_IsEnabled>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d169      	bne.n	8004d00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	4b36      	ldr	r3, [pc, #216]	@ (8004d0c <ADC_Enable+0xfc>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	f043 0210 	orr.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	f043 0201 	orr.w	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e055      	b.n	8004d02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fa9c 	bl	8004198 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004c60:	482b      	ldr	r0, [pc, #172]	@ (8004d10 <ADC_Enable+0x100>)
 8004c62:	f7ff f9ab 	bl	8003fbc <LL_ADC_GetCommonPathInternalCh>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00f      	beq.n	8004c90 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c70:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <ADC_Enable+0x104>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	4a28      	ldr	r2, [pc, #160]	@ (8004d18 <ADC_Enable+0x108>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004c80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c82:	e002      	b.n	8004c8a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f9      	bne.n	8004c84 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7e5b      	ldrb	r3, [r3, #25]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d033      	beq.n	8004d00 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004c98:	f7fe faca 	bl	8003230 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c9e:	e028      	b.n	8004cf2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fa9d 	bl	80041e4 <LL_ADC_IsEnabled>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d104      	bne.n	8004cba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fa6f 	bl	8004198 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cba:	f7fe fab9 	bl	8003230 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d914      	bls.n	8004cf2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d00d      	beq.n	8004cf2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cda:	f043 0210 	orr.w	r2, r3, #16
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e007      	b.n	8004d02 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d1cf      	bne.n	8004ca0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	80000017 	.word	0x80000017
 8004d10:	40012708 	.word	0x40012708
 8004d14:	20000000 	.word	0x20000000
 8004d18:	053e2d63 	.word	0x053e2d63

08004d1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff fa6d 	bl	8004208 <LL_ADC_IsDisableOngoing>
 8004d2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fa55 	bl	80041e4 <LL_ADC_IsEnabled>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d047      	beq.n	8004dd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d144      	bne.n	8004dd0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0305 	and.w	r3, r3, #5
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10c      	bne.n	8004d6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fa30 	bl	80041be <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2203      	movs	r2, #3
 8004d64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d66:	f7fe fa63 	bl	8003230 <HAL_GetTick>
 8004d6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d6c:	e029      	b.n	8004dc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	f043 0210 	orr.w	r2, r3, #16
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7e:	f043 0201 	orr.w	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e023      	b.n	8004dd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d8a:	f7fe fa51 	bl	8003230 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d914      	bls.n	8004dc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	f043 0210 	orr.w	r2, r3, #16
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e007      	b.n	8004dd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1dc      	bne.n	8004d8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <LL_ADC_SetCalibrationFactor>:
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dea:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <LL_ADC_GetCalibrationFactor>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <LL_ADC_Enable>:
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e2e:	f023 0317 	bic.w	r3, r3, #23
 8004e32:	f043 0201 	orr.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	609a      	str	r2, [r3, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <LL_ADC_Disable>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e54:	f023 0317 	bic.w	r3, r3, #23
 8004e58:	f043 0202 	orr.w	r2, r3, #2
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	609a      	str	r2, [r3, #8]
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <LL_ADC_IsEnabled>:
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <LL_ADC_IsEnabled+0x18>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <LL_ADC_IsEnabled+0x1a>
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <LL_ADC_StartCalibration>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e9e:	f023 0317 	bic.w	r3, r3, #23
 8004ea2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	609a      	str	r2, [r3, #8]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <LL_ADC_IsCalibrationOnGoing>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ec8:	d101      	bne.n	8004ece <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr

08004eda <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b088      	sub	sp, #32
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADCEx_Calibration_Start+0x1e>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0b9      	b.n	800506c <HAL_ADCEx_Calibration_Start+0x192>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff0b 	bl	8004d1c <ADC_Disable>
 8004f06:	4603      	mov	r3, r0
 8004f08:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ffab 	bl	8004e6a <LL_ADC_IsEnabled>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 809d 	bne.w	8005056 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004f24:	f043 0202 	orr.w	r2, r3, #2
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	f248 0303 	movw	r3, #32771	@ 0x8003
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f48:	f023 0303 	bic.w	r3, r3, #3
 8004f4c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e02e      	b.n	8004fb2 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff ff98 	bl	8004e8e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f5e:	e014      	b.n	8004f8a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004f6c:	d30d      	bcc.n	8004f8a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	f023 0312 	bic.w	r3, r3, #18
 8004f76:	f043 0210 	orr.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e070      	b.n	800506c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff ff90 	bl	8004eb4 <LL_ADC_IsCalibrationOnGoing>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e2      	bne.n	8004f60 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff ff2f 	bl	8004e02 <LL_ADC_GetCalibrationFactor>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	4413      	add	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	2b07      	cmp	r3, #7
 8004fb6:	d9cd      	bls.n	8004f54 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ff29 	bl	8004e1e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff ff01 	bl	8004dda <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff ff31 	bl	8004e44 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fe2:	f7fe f925 	bl	8003230 <HAL_GetTick>
 8004fe6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004fe8:	e01c      	b.n	8005024 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fea:	f7fe f921 	bl	8003230 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d915      	bls.n	8005024 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ff34 	bl	8004e6a <LL_ADC_IsEnabled>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500c:	f043 0210 	orr.w	r2, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005018:	f043 0201 	orr.w	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e023      	b.n	800506c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff ff1e 	bl	8004e6a <LL_ADC_IsEnabled>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1da      	bne.n	8004fea <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	430a      	orrs	r2, r1
 8005042:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	f023 0303 	bic.w	r3, r3, #3
 800504c:	f043 0201 	orr.w	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	659a      	str	r2, [r3, #88]	@ 0x58
 8005054:	e005      	b.n	8005062 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505a:	f043 0210 	orr.w	r2, r3, #16
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800506a:	7dfb      	ldrb	r3, [r7, #23]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005084:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005090:	4013      	ands	r3, r2
 8005092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800509c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050a6:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <__NVIC_SetPriorityGrouping+0x44>)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	60d3      	str	r3, [r2, #12]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	e000ed00 	.word	0xe000ed00

080050bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050c0:	4b04      	ldr	r3, [pc, #16]	@ (80050d4 <__NVIC_GetPriorityGrouping+0x18>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	f003 0307 	and.w	r3, r3, #7
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	db0b      	blt.n	8005102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	f003 021f 	and.w	r2, r3, #31
 80050f0:	4906      	ldr	r1, [pc, #24]	@ (800510c <__NVIC_EnableIRQ+0x34>)
 80050f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	2001      	movs	r0, #1
 80050fa:	fa00 f202 	lsl.w	r2, r0, r2
 80050fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	e000e100 	.word	0xe000e100

08005110 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800511a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511e:	2b00      	cmp	r3, #0
 8005120:	db12      	blt.n	8005148 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	f003 021f 	and.w	r2, r3, #31
 8005128:	490a      	ldr	r1, [pc, #40]	@ (8005154 <__NVIC_DisableIRQ+0x44>)
 800512a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2001      	movs	r0, #1
 8005132:	fa00 f202 	lsl.w	r2, r0, r2
 8005136:	3320      	adds	r3, #32
 8005138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800513c:	f3bf 8f4f 	dsb	sy
}
 8005140:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005142:	f3bf 8f6f 	isb	sy
}
 8005146:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	e000e100 	.word	0xe000e100

08005158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	6039      	str	r1, [r7, #0]
 8005162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005168:	2b00      	cmp	r3, #0
 800516a:	db0a      	blt.n	8005182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	490c      	ldr	r1, [pc, #48]	@ (80051a4 <__NVIC_SetPriority+0x4c>)
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005176:	0112      	lsls	r2, r2, #4
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	440b      	add	r3, r1
 800517c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005180:	e00a      	b.n	8005198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	4908      	ldr	r1, [pc, #32]	@ (80051a8 <__NVIC_SetPriority+0x50>)
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	3b04      	subs	r3, #4
 8005190:	0112      	lsls	r2, r2, #4
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	440b      	add	r3, r1
 8005196:	761a      	strb	r2, [r3, #24]
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	e000e100 	.word	0xe000e100
 80051a8:	e000ed00 	.word	0xe000ed00

080051ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b089      	sub	sp, #36	@ 0x24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f1c3 0307 	rsb	r3, r3, #7
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	bf28      	it	cs
 80051ca:	2304      	movcs	r3, #4
 80051cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d902      	bls.n	80051dc <NVIC_EncodePriority+0x30>
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3b03      	subs	r3, #3
 80051da:	e000      	b.n	80051de <NVIC_EncodePriority+0x32>
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43da      	mvns	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	401a      	ands	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f4:	f04f 31ff 	mov.w	r1, #4294967295
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	fa01 f303 	lsl.w	r3, r1, r3
 80051fe:	43d9      	mvns	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005204:	4313      	orrs	r3, r2
         );
}
 8005206:	4618      	mov	r0, r3
 8005208:	3724      	adds	r7, #36	@ 0x24
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff ff2b 	bl	8005074 <__NVIC_SetPriorityGrouping>
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	4603      	mov	r3, r0
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005234:	f7ff ff42 	bl	80050bc <__NVIC_GetPriorityGrouping>
 8005238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	6978      	ldr	r0, [r7, #20]
 8005240:	f7ff ffb4 	bl	80051ac <NVIC_EncodePriority>
 8005244:	4602      	mov	r2, r0
 8005246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ff83 	bl	8005158 <__NVIC_SetPriority>
}
 8005252:	bf00      	nop
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	4603      	mov	r3, r0
 8005262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff ff35 	bl	80050d8 <__NVIC_EnableIRQ>
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	4603      	mov	r3, r0
 800527e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff ff43 	bl	8005110 <__NVIC_DisableIRQ>
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e08e      	b.n	80053c4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b47      	ldr	r3, [pc, #284]	@ (80053cc <HAL_DMA_Init+0x138>)
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d80f      	bhi.n	80052d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	4b45      	ldr	r3, [pc, #276]	@ (80053d0 <HAL_DMA_Init+0x13c>)
 80052ba:	4413      	add	r3, r2
 80052bc:	4a45      	ldr	r2, [pc, #276]	@ (80053d4 <HAL_DMA_Init+0x140>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	009a      	lsls	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a42      	ldr	r2, [pc, #264]	@ (80053d8 <HAL_DMA_Init+0x144>)
 80052ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80052d0:	e00e      	b.n	80052f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	4b40      	ldr	r3, [pc, #256]	@ (80053dc <HAL_DMA_Init+0x148>)
 80052da:	4413      	add	r3, r2
 80052dc:	4a3d      	ldr	r2, [pc, #244]	@ (80053d4 <HAL_DMA_Init+0x140>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	009a      	lsls	r2, r3, #2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a3c      	ldr	r2, [pc, #240]	@ (80053e0 <HAL_DMA_Init+0x14c>)
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800530a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6819      	ldr	r1, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fb24 	bl	8005990 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005350:	d102      	bne.n	8005358 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005360:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005364:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800536e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d010      	beq.n	800539a <HAL_DMA_Init+0x106>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d80c      	bhi.n	800539a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fb4d 	bl	8005a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005396:	605a      	str	r2, [r3, #4]
 8005398:	e008      	b.n	80053ac <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40020407 	.word	0x40020407
 80053d0:	bffdfff8 	.word	0xbffdfff8
 80053d4:	cccccccd 	.word	0xcccccccd
 80053d8:	40020000 	.word	0x40020000
 80053dc:	bffdfbf8 	.word	0xbffdfbf8
 80053e0:	40020400 	.word	0x40020400

080053e4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e07b      	b.n	80054ee <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	4b3a      	ldr	r3, [pc, #232]	@ (80054f8 <HAL_DMA_DeInit+0x114>)
 800540e:	429a      	cmp	r2, r3
 8005410:	d80f      	bhi.n	8005432 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	4b38      	ldr	r3, [pc, #224]	@ (80054fc <HAL_DMA_DeInit+0x118>)
 800541a:	4413      	add	r3, r2
 800541c:	4a38      	ldr	r2, [pc, #224]	@ (8005500 <HAL_DMA_DeInit+0x11c>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	009a      	lsls	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a35      	ldr	r2, [pc, #212]	@ (8005504 <HAL_DMA_DeInit+0x120>)
 800542e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005430:	e00e      	b.n	8005450 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	4b33      	ldr	r3, [pc, #204]	@ (8005508 <HAL_DMA_DeInit+0x124>)
 800543a:	4413      	add	r3, r2
 800543c:	4a30      	ldr	r2, [pc, #192]	@ (8005500 <HAL_DMA_DeInit+0x11c>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	009a      	lsls	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2f      	ldr	r2, [pc, #188]	@ (800550c <HAL_DMA_DeInit+0x128>)
 800544e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545c:	f003 021c 	and.w	r2, r3, #28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f202 	lsl.w	r2, r1, r2
 800546a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fa8f 	bl	8005990 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005482:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00f      	beq.n	80054ac <HAL_DMA_DeInit+0xc8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d80b      	bhi.n	80054ac <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fac3 	bl	8005a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054aa:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40020407 	.word	0x40020407
 80054fc:	bffdfff8 	.word	0xbffdfff8
 8005500:	cccccccd 	.word	0xcccccccd
 8005504:	40020000 	.word	0x40020000
 8005508:	bffdfbf8 	.word	0xbffdfbf8
 800550c:	40020400 	.word	0x40020400

08005510 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_DMA_Start_IT+0x20>
 800552c:	2302      	movs	r3, #2
 800552e:	e069      	b.n	8005604 <HAL_DMA_Start_IT+0xf4>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d155      	bne.n	80055f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0201 	bic.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f9d3 	bl	8005914 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 020e 	orr.w	r2, r2, #14
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e00f      	b.n	80055a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 020a 	orr.w	r2, r2, #10
 80055a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e008      	b.n	8005602 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2280      	movs	r2, #128	@ 0x80
 80055f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005602:	7dfb      	ldrb	r3, [r7, #23]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e04f      	b.n	80056be <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d008      	beq.n	800563c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2204      	movs	r2, #4
 800562e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e040      	b.n	80056be <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 020e 	bic.w	r2, r2, #14
 800564a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005656:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800565a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0201 	bic.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005670:	f003 021c 	and.w	r2, r3, #28
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005678:	2101      	movs	r1, #1
 800567a:	fa01 f202 	lsl.w	r2, r1, r2
 800567e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005688:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr

080056c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d005      	beq.n	80056ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2204      	movs	r2, #4
 80056e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
 80056ea:	e047      	b.n	800577c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 020e 	bic.w	r2, r2, #14
 80056fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005716:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800571a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005720:	f003 021c 	and.w	r2, r3, #28
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f202 	lsl.w	r2, r1, r2
 800572e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005738:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00c      	beq.n	800575c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005750:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800575a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
    }
  }
  return status;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a4:	f003 031c 	and.w	r3, r3, #28
 80057a8:	2204      	movs	r2, #4
 80057aa:	409a      	lsls	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d027      	beq.n	8005804 <HAL_DMA_IRQHandler+0x7c>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d022      	beq.n	8005804 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d107      	bne.n	80057dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e0:	f003 021c 	and.w	r2, r3, #28
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e8:	2104      	movs	r1, #4
 80057ea:	fa01 f202 	lsl.w	r2, r1, r2
 80057ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8081 	beq.w	80058fc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005802:	e07b      	b.n	80058fc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005808:	f003 031c 	and.w	r3, r3, #28
 800580c:	2202      	movs	r2, #2
 800580e:	409a      	lsls	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d03d      	beq.n	8005894 <HAL_DMA_IRQHandler+0x10c>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d038      	beq.n	8005894 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 020a 	bic.w	r2, r2, #10
 800583e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	4b2e      	ldr	r3, [pc, #184]	@ (8005908 <HAL_DMA_IRQHandler+0x180>)
 8005850:	429a      	cmp	r2, r3
 8005852:	d909      	bls.n	8005868 <HAL_DMA_IRQHandler+0xe0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005858:	f003 031c 	and.w	r3, r3, #28
 800585c:	4a2b      	ldr	r2, [pc, #172]	@ (800590c <HAL_DMA_IRQHandler+0x184>)
 800585e:	2102      	movs	r1, #2
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	6053      	str	r3, [r2, #4]
 8005866:	e008      	b.n	800587a <HAL_DMA_IRQHandler+0xf2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586c:	f003 031c 	and.w	r3, r3, #28
 8005870:	4a27      	ldr	r2, [pc, #156]	@ (8005910 <HAL_DMA_IRQHandler+0x188>)
 8005872:	2102      	movs	r1, #2
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d038      	beq.n	80058fc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005892:	e033      	b.n	80058fc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005898:	f003 031c 	and.w	r3, r3, #28
 800589c:	2208      	movs	r2, #8
 800589e:	409a      	lsls	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02a      	beq.n	80058fe <HAL_DMA_IRQHandler+0x176>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d025      	beq.n	80058fe <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 020e 	bic.w	r2, r2, #14
 80058c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c6:	f003 021c 	and.w	r2, r3, #28
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f202 	lsl.w	r2, r1, r2
 80058d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
}
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40020080 	.word	0x40020080
 800590c:	40020400 	.word	0x40020400
 8005910:	40020000 	.word	0x40020000

08005914 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800592a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800593c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005942:	f003 021c 	and.w	r2, r3, #28
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	2101      	movs	r1, #1
 800594c:	fa01 f202 	lsl.w	r2, r1, r2
 8005950:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b10      	cmp	r3, #16
 8005960:	d108      	bne.n	8005974 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005972:	e007      	b.n	8005984 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	60da      	str	r2, [r3, #12]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
	...

08005990 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d813      	bhi.n	80059cc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a8:	089b      	lsrs	r3, r3, #2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059b0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	3b08      	subs	r3, #8
 80059c0:	4a14      	ldr	r2, [pc, #80]	@ (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e011      	b.n	80059f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	009a      	lsls	r2, r3, #2
 80059d4:	4b10      	ldr	r3, [pc, #64]	@ (8005a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80059d6:	4413      	add	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	3b08      	subs	r3, #8
 80059e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	3307      	adds	r3, #7
 80059ee:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a0a      	ldr	r2, [pc, #40]	@ (8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80059f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	2201      	movs	r2, #1
 80059fe:	409a      	lsls	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40020407 	.word	0x40020407
 8005a14:	cccccccd 	.word	0xcccccccd
 8005a18:	4002081c 	.word	0x4002081c
 8005a1c:	40020880 	.word	0x40020880

08005a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a08      	ldr	r2, [pc, #32]	@ (8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2201      	movs	r2, #1
 8005a50:	409a      	lsls	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	1000823f 	.word	0x1000823f
 8005a64:	40020940 	.word	0x40020940

08005a68 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a76:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae8 <HAL_FLASH_Program+0x80>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_FLASH_Program+0x1a>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e02d      	b.n	8005ade <HAL_FLASH_Program+0x76>
 8005a82:	4b19      	ldr	r3, [pc, #100]	@ (8005ae8 <HAL_FLASH_Program+0x80>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a88:	4b17      	ldr	r3, [pc, #92]	@ (8005ae8 <HAL_FLASH_Program+0x80>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a92:	f000 f869 	bl	8005b68 <FLASH_WaitForLastOperation>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d11a      	bne.n	8005ad6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d105      	bne.n	8005ab2 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aaa:	68b8      	ldr	r0, [r7, #8]
 8005aac:	f000 f8be 	bl	8005c2c <FLASH_Program_DoubleWord>
 8005ab0:	e004      	b.n	8005abc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	68b8      	ldr	r0, [r7, #8]
 8005ab8:	f000 f8de 	bl	8005c78 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005abc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ac0:	f000 f852 	bl	8005b68 <FLASH_WaitForLastOperation>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005ac8:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <HAL_FLASH_Program+0x84>)
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	4906      	ldr	r1, [pc, #24]	@ (8005aec <HAL_FLASH_Program+0x84>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ad6:	4b04      	ldr	r3, [pc, #16]	@ (8005ae8 <HAL_FLASH_Program+0x80>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200003f4 	.word	0x200003f4
 8005aec:	58004000 	.word	0x58004000

08005af0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005afa:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <HAL_FLASH_Unlock+0x38>)
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	da0b      	bge.n	8005b1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005b02:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <HAL_FLASH_Unlock+0x38>)
 8005b04:	4a09      	ldr	r2, [pc, #36]	@ (8005b2c <HAL_FLASH_Unlock+0x3c>)
 8005b06:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005b08:	4b07      	ldr	r3, [pc, #28]	@ (8005b28 <HAL_FLASH_Unlock+0x38>)
 8005b0a:	4a09      	ldr	r2, [pc, #36]	@ (8005b30 <HAL_FLASH_Unlock+0x40>)
 8005b0c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005b0e:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <HAL_FLASH_Unlock+0x38>)
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	da01      	bge.n	8005b1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	58004000 	.word	0x58004000
 8005b2c:	45670123 	.word	0x45670123
 8005b30:	cdef89ab 	.word	0xcdef89ab

08005b34 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <HAL_FLASH_Lock+0x30>)
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	4a08      	ldr	r2, [pc, #32]	@ (8005b64 <HAL_FLASH_Lock+0x30>)
 8005b44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b48:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_FLASH_Lock+0x30>)
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	db01      	blt.n	8005b56 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005b56:	79fb      	ldrb	r3, [r7, #7]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	58004000 	.word	0x58004000

08005b68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005b70:	f7fd fb5e 	bl	8003230 <HAL_GetTick>
 8005b74:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005b76:	e009      	b.n	8005b8c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005b78:	f7fd fb5a 	bl	8003230 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d801      	bhi.n	8005b8c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e046      	b.n	8005c1a <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005b8c:	4b25      	ldr	r3, [pc, #148]	@ (8005c24 <FLASH_WaitForLastOperation+0xbc>)
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b98:	d0ee      	beq.n	8005b78 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <FLASH_WaitForLastOperation+0xbc>)
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005baa:	4b1e      	ldr	r3, [pc, #120]	@ (8005c24 <FLASH_WaitForLastOperation+0xbc>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc0:	d307      	bcc.n	8005bd2 <FLASH_WaitForLastOperation+0x6a>
 8005bc2:	4b18      	ldr	r3, [pc, #96]	@ (8005c24 <FLASH_WaitForLastOperation+0xbc>)
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005bcc:	4915      	ldr	r1, [pc, #84]	@ (8005c24 <FLASH_WaitForLastOperation+0xbc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	618b      	str	r3, [r1, #24]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <FLASH_WaitForLastOperation+0x7e>
 8005bdc:	4a11      	ldr	r2, [pc, #68]	@ (8005c24 <FLASH_WaitForLastOperation+0xbc>)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005be4:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00e      	beq.n	8005c0a <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005bec:	4a0e      	ldr	r2, [pc, #56]	@ (8005c28 <FLASH_WaitForLastOperation+0xc0>)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e011      	b.n	8005c1a <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005bf6:	f7fd fb1b 	bl	8003230 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d801      	bhi.n	8005c0a <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e007      	b.n	8005c1a <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005c0a:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <FLASH_WaitForLastOperation+0xbc>)
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c16:	d0ee      	beq.n	8005bf6 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	58004000 	.word	0x58004000
 8005c28:	200003f4 	.word	0x200003f4

08005c2c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005c38:	4b0e      	ldr	r3, [pc, #56]	@ (8005c74 <FLASH_Program_DoubleWord+0x48>)
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c74 <FLASH_Program_DoubleWord+0x48>)
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005c4a:	f3bf 8f6f 	isb	sy
}
 8005c4e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005c50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	000a      	movs	r2, r1
 8005c5e:	2300      	movs	r3, #0
 8005c60:	68f9      	ldr	r1, [r7, #12]
 8005c62:	3104      	adds	r1, #4
 8005c64:	4613      	mov	r3, r2
 8005c66:	600b      	str	r3, [r1, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	58004000 	.word	0x58004000

08005c78 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b089      	sub	sp, #36	@ 0x24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005c82:	2340      	movs	r3, #64	@ 0x40
 8005c84:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005c8e:	4b18      	ldr	r3, [pc, #96]	@ (8005cf0 <FLASH_Program_Fast+0x78>)
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	4a17      	ldr	r2, [pc, #92]	@ (8005cf0 <FLASH_Program_Fast+0x78>)
 8005c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ca4:	b672      	cpsid	i
}
 8005ca6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	617b      	str	r3, [r7, #20]
    row_index--;
 8005cbc:	7ffb      	ldrb	r3, [r7, #31]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005cc2:	7ffb      	ldrb	r3, [r7, #31]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ef      	bne.n	8005ca8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005cc8:	bf00      	nop
 8005cca:	4b09      	ldr	r3, [pc, #36]	@ (8005cf0 <FLASH_Program_Fast+0x78>)
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd6:	d0f8      	beq.n	8005cca <FLASH_Program_Fast+0x52>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005ce4:	bf00      	nop
 8005ce6:	3724      	adds	r7, #36	@ 0x24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	58004000 	.word	0x58004000

08005cf4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005cfe:	4b28      	ldr	r3, [pc, #160]	@ (8005da0 <HAL_FLASHEx_Erase+0xac>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_FLASHEx_Erase+0x16>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e046      	b.n	8005d98 <HAL_FLASHEx_Erase+0xa4>
 8005d0a:	4b25      	ldr	r3, [pc, #148]	@ (8005da0 <HAL_FLASHEx_Erase+0xac>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d10:	4b23      	ldr	r3, [pc, #140]	@ (8005da0 <HAL_FLASHEx_Erase+0xac>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d1a:	f7ff ff25 	bl	8005b68 <FLASH_WaitForLastOperation>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d133      	bne.n	8005d90 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d108      	bne.n	8005d42 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005d30:	f000 f838 	bl	8005da4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d38:	f7ff ff16 	bl	8005b68 <FLASH_WaitForLastOperation>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e024      	b.n	8005d8c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f04f 32ff 	mov.w	r2, #4294967295
 8005d48:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60bb      	str	r3, [r7, #8]
 8005d50:	e012      	b.n	8005d78 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005d52:	68b8      	ldr	r0, [r7, #8]
 8005d54:	f000 f836 	bl	8005dc4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d5c:	f7ff ff04 	bl	8005b68 <FLASH_WaitForLastOperation>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	601a      	str	r2, [r3, #0]
          break;
 8005d70:	e00a      	b.n	8005d88 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4413      	add	r3, r2
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d3e4      	bcc.n	8005d52 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005d88:	f000 f878 	bl	8005e7c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005d8c:	f000 f832 	bl	8005df4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d90:	4b03      	ldr	r3, [pc, #12]	@ (8005da0 <HAL_FLASHEx_Erase+0xac>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]

  return status;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	200003f4 	.word	0x200003f4

08005da4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005da8:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <FLASH_MassErase+0x1c>)
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	4a04      	ldr	r2, [pc, #16]	@ (8005dc0 <FLASH_MassErase+0x1c>)
 8005dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db2:	f043 0304 	orr.w	r3, r3, #4
 8005db6:	6153      	str	r3, [r2, #20]
#endif
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr
 8005dc0:	58004000 	.word	0x58004000

08005dc4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005dcc:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <FLASH_PageErase+0x2c>)
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	4a05      	ldr	r2, [pc, #20]	@ (8005df0 <FLASH_PageErase+0x2c>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de0:	f043 0302 	orr.w	r3, r3, #2
 8005de4:	6153      	str	r3, [r2, #20]
#endif
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr
 8005df0:	58004000 	.word	0x58004000

08005df4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005df8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d117      	bne.n	8005e34 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005e04:	4b1c      	ldr	r3, [pc, #112]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1b      	ldr	r2, [pc, #108]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e0a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005e10:	4b19      	ldr	r3, [pc, #100]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a18      	ldr	r2, [pc, #96]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4b16      	ldr	r3, [pc, #88]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a15      	ldr	r2, [pc, #84]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e28:	4b13      	ldr	r3, [pc, #76]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a12      	ldr	r2, [pc, #72]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e32:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005e34:	4b10      	ldr	r3, [pc, #64]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d117      	bne.n	8005e70 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e40:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a0c      	ldr	r2, [pc, #48]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e4a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a09      	ldr	r2, [pc, #36]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4b07      	ldr	r3, [pc, #28]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a06      	ldr	r2, [pc, #24]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e62:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e64:	4b04      	ldr	r3, [pc, #16]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a03      	ldr	r2, [pc, #12]	@ (8005e78 <FLASH_FlushCaches+0x84>)
 8005e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e6e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005e70:	bf00      	nop
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr
 8005e78:	58004000 	.word	0x58004000

08005e7c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005e80:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <FLASH_AcknowledgePageErase+0x1c>)
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	4a04      	ldr	r2, [pc, #16]	@ (8005e98 <FLASH_AcknowledgePageErase+0x1c>)
 8005e86:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005e8a:	f023 0302 	bic.w	r3, r3, #2
 8005e8e:	6153      	str	r3, [r2, #20]
#endif
}
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	58004000 	.word	0x58004000

08005e9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eaa:	e140      	b.n	800612e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8132 	beq.w	8006128 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d005      	beq.n	8005edc <HAL_GPIO_Init+0x40>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d130      	bne.n	8005f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43db      	mvns	r3, r3
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f12:	2201      	movs	r2, #1
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	091b      	lsrs	r3, r3, #4
 8005f28:	f003 0201 	and.w	r2, r3, #1
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d017      	beq.n	8005f7a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	2203      	movs	r2, #3
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d123      	bne.n	8005fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	08da      	lsrs	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3208      	adds	r2, #8
 8005f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	220f      	movs	r2, #15
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	08da      	lsrs	r2, r3, #3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3208      	adds	r2, #8
 8005fc8:	6939      	ldr	r1, [r7, #16]
 8005fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	2203      	movs	r2, #3
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 0203 	and.w	r2, r3, #3
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 808c 	beq.w	8006128 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006010:	4a4e      	ldr	r2, [pc, #312]	@ (800614c <HAL_GPIO_Init+0x2b0>)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	089b      	lsrs	r3, r3, #2
 8006016:	3302      	adds	r3, #2
 8006018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	2207      	movs	r2, #7
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4013      	ands	r3, r2
 8006032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800603a:	d00d      	beq.n	8006058 <HAL_GPIO_Init+0x1bc>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a44      	ldr	r2, [pc, #272]	@ (8006150 <HAL_GPIO_Init+0x2b4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d007      	beq.n	8006054 <HAL_GPIO_Init+0x1b8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a43      	ldr	r2, [pc, #268]	@ (8006154 <HAL_GPIO_Init+0x2b8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d101      	bne.n	8006050 <HAL_GPIO_Init+0x1b4>
 800604c:	2302      	movs	r3, #2
 800604e:	e004      	b.n	800605a <HAL_GPIO_Init+0x1be>
 8006050:	2307      	movs	r3, #7
 8006052:	e002      	b.n	800605a <HAL_GPIO_Init+0x1be>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <HAL_GPIO_Init+0x1be>
 8006058:	2300      	movs	r3, #0
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	f002 0203 	and.w	r2, r2, #3
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	4093      	lsls	r3, r2
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800606a:	4938      	ldr	r1, [pc, #224]	@ (800614c <HAL_GPIO_Init+0x2b0>)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	3302      	adds	r3, #2
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006078:	4b37      	ldr	r3, [pc, #220]	@ (8006158 <HAL_GPIO_Init+0x2bc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	43db      	mvns	r3, r3
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4013      	ands	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800609c:	4a2e      	ldr	r2, [pc, #184]	@ (8006158 <HAL_GPIO_Init+0x2bc>)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006158 <HAL_GPIO_Init+0x2bc>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	43db      	mvns	r3, r3
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4013      	ands	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060c6:	4a24      	ldr	r2, [pc, #144]	@ (8006158 <HAL_GPIO_Init+0x2bc>)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80060cc:	4b22      	ldr	r3, [pc, #136]	@ (8006158 <HAL_GPIO_Init+0x2bc>)
 80060ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060d2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	43db      	mvns	r3, r3
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4013      	ands	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80060f2:	4a19      	ldr	r2, [pc, #100]	@ (8006158 <HAL_GPIO_Init+0x2bc>)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80060fa:	4b17      	ldr	r3, [pc, #92]	@ (8006158 <HAL_GPIO_Init+0x2bc>)
 80060fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006100:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	43db      	mvns	r3, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006120:	4a0d      	ldr	r2, [pc, #52]	@ (8006158 <HAL_GPIO_Init+0x2bc>)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3301      	adds	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f aeb7 	bne.w	8005eac <HAL_GPIO_Init+0x10>
  }
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40010000 	.word	0x40010000
 8006150:	48000400 	.word	0x48000400
 8006154:	48000800 	.word	0x48000800
 8006158:	58000800 	.word	0x58000800

0800615c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800616a:	e0af      	b.n	80062cc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800616c:	2201      	movs	r2, #1
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	4013      	ands	r3, r2
 8006178:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80a2 	beq.w	80062c6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006182:	4a59      	ldr	r2, [pc, #356]	@ (80062e8 <HAL_GPIO_DeInit+0x18c>)
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	3302      	adds	r3, #2
 800618a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	2207      	movs	r2, #7
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4013      	ands	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80061aa:	d00d      	beq.n	80061c8 <HAL_GPIO_DeInit+0x6c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a4f      	ldr	r2, [pc, #316]	@ (80062ec <HAL_GPIO_DeInit+0x190>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <HAL_GPIO_DeInit+0x68>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a4e      	ldr	r2, [pc, #312]	@ (80062f0 <HAL_GPIO_DeInit+0x194>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d101      	bne.n	80061c0 <HAL_GPIO_DeInit+0x64>
 80061bc:	2302      	movs	r3, #2
 80061be:	e004      	b.n	80061ca <HAL_GPIO_DeInit+0x6e>
 80061c0:	2307      	movs	r3, #7
 80061c2:	e002      	b.n	80061ca <HAL_GPIO_DeInit+0x6e>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <HAL_GPIO_DeInit+0x6e>
 80061c8:	2300      	movs	r3, #0
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	f002 0203 	and.w	r2, r2, #3
 80061d0:	0092      	lsls	r2, r2, #2
 80061d2:	4093      	lsls	r3, r2
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d136      	bne.n	8006248 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80061da:	4b46      	ldr	r3, [pc, #280]	@ (80062f4 <HAL_GPIO_DeInit+0x198>)
 80061dc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	43db      	mvns	r3, r3
 80061e4:	4943      	ldr	r1, [pc, #268]	@ (80062f4 <HAL_GPIO_DeInit+0x198>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80061ec:	4b41      	ldr	r3, [pc, #260]	@ (80062f4 <HAL_GPIO_DeInit+0x198>)
 80061ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	493f      	ldr	r1, [pc, #252]	@ (80062f4 <HAL_GPIO_DeInit+0x198>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80061fe:	4b3d      	ldr	r3, [pc, #244]	@ (80062f4 <HAL_GPIO_DeInit+0x198>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	43db      	mvns	r3, r3
 8006206:	493b      	ldr	r1, [pc, #236]	@ (80062f4 <HAL_GPIO_DeInit+0x198>)
 8006208:	4013      	ands	r3, r2
 800620a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800620c:	4b39      	ldr	r3, [pc, #228]	@ (80062f4 <HAL_GPIO_DeInit+0x198>)
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	43db      	mvns	r3, r3
 8006214:	4937      	ldr	r1, [pc, #220]	@ (80062f4 <HAL_GPIO_DeInit+0x198>)
 8006216:	4013      	ands	r3, r2
 8006218:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	2207      	movs	r2, #7
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800622a:	4a2f      	ldr	r2, [pc, #188]	@ (80062e8 <HAL_GPIO_DeInit+0x18c>)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	089b      	lsrs	r3, r3, #2
 8006230:	3302      	adds	r3, #2
 8006232:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	43da      	mvns	r2, r3
 800623a:	482b      	ldr	r0, [pc, #172]	@ (80062e8 <HAL_GPIO_DeInit+0x18c>)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	400a      	ands	r2, r1
 8006242:	3302      	adds	r3, #2
 8006244:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	2103      	movs	r1, #3
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	08da      	lsrs	r2, r3, #3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3208      	adds	r2, #8
 8006264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	220f      	movs	r2, #15
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	08d2      	lsrs	r2, r2, #3
 800627c:	4019      	ands	r1, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3208      	adds	r2, #8
 8006282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	2103      	movs	r1, #3
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	43db      	mvns	r3, r3
 8006296:	401a      	ands	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	2101      	movs	r1, #1
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	401a      	ands	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	2103      	movs	r1, #3
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	401a      	ands	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	3301      	adds	r3, #1
 80062ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f47f af49 	bne.w	800616c <HAL_GPIO_DeInit+0x10>
  }
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40010000 	.word	0x40010000
 80062ec:	48000400 	.word	0x48000400
 80062f0:	48000800 	.word	0x48000800
 80062f4:	58000800 	.word	0x58000800

080062f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	807b      	strh	r3, [r7, #2]
 8006304:	4613      	mov	r3, r2
 8006306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006308:	787b      	ldrb	r3, [r7, #1]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006314:	e002      	b.n	800631c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006316:	887a      	ldrh	r2, [r7, #2]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr
	...

08006328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006332:	4b08      	ldr	r3, [pc, #32]	@ (8006354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	4013      	ands	r3, r2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d006      	beq.n	800634c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800633e:	4a05      	ldr	r2, [pc, #20]	@ (8006354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	4618      	mov	r0, r3
 8006348:	f005 fd4e 	bl	800bde8 <HAL_GPIO_EXTI_Callback>
  }
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	58000800 	.word	0x58000800

08006358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e08d      	b.n	8006486 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc fb18 	bl	80029b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2224      	movs	r2, #36	@ 0x24
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d107      	bne.n	80063d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063ce:	609a      	str	r2, [r3, #8]
 80063d0:	e006      	b.n	80063e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80063de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d108      	bne.n	80063fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	e007      	b.n	800640a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006418:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800641c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800642c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	69d9      	ldr	r1, [r3, #28]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	4608      	mov	r0, r1
 800649a:	4611      	mov	r1, r2
 800649c:	461a      	mov	r2, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	817b      	strh	r3, [r7, #10]
 80064a2:	460b      	mov	r3, r1
 80064a4:	813b      	strh	r3, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	f040 80f9 	bne.w	80066aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_I2C_Mem_Write+0x34>
 80064be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0ed      	b.n	80066ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <HAL_I2C_Mem_Write+0x4e>
 80064da:	2302      	movs	r3, #2
 80064dc:	e0e6      	b.n	80066ac <HAL_I2C_Mem_Write+0x21c>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064e6:	f7fc fea3 	bl	8003230 <HAL_GetTick>
 80064ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2319      	movs	r3, #25
 80064f2:	2201      	movs	r2, #1
 80064f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fac2 	bl	8006a82 <I2C_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e0d1      	b.n	80066ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2221      	movs	r2, #33	@ 0x21
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2240      	movs	r2, #64	@ 0x40
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a3a      	ldr	r2, [r7, #32]
 8006522:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006528:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006530:	88f8      	ldrh	r0, [r7, #6]
 8006532:	893a      	ldrh	r2, [r7, #8]
 8006534:	8979      	ldrh	r1, [r7, #10]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	4603      	mov	r3, r0
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f9d3 	bl	80068ec <I2C_RequestMemoryWrite>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0a9      	b.n	80066ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800655c:	b29b      	uxth	r3, r3
 800655e:	2bff      	cmp	r3, #255	@ 0xff
 8006560:	d90e      	bls.n	8006580 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	22ff      	movs	r2, #255	@ 0xff
 8006566:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656c:	b2da      	uxtb	r2, r3
 800656e:	8979      	ldrh	r1, [r7, #10]
 8006570:	2300      	movs	r3, #0
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fc45 	bl	8006e08 <I2C_TransferConfig>
 800657e:	e00f      	b.n	80065a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658e:	b2da      	uxtb	r2, r3
 8006590:	8979      	ldrh	r1, [r7, #10]
 8006592:	2300      	movs	r3, #0
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fc34 	bl	8006e08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fac5 	bl	8006b34 <I2C_WaitOnTXISFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e07b      	b.n	80066ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d034      	beq.n	8006658 <HAL_I2C_Mem_Write+0x1c8>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d130      	bne.n	8006658 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	2200      	movs	r2, #0
 80065fe:	2180      	movs	r1, #128	@ 0x80
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fa3e 	bl	8006a82 <I2C_WaitOnFlagUntilTimeout>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e04d      	b.n	80066ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	2bff      	cmp	r3, #255	@ 0xff
 8006618:	d90e      	bls.n	8006638 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	22ff      	movs	r2, #255	@ 0xff
 800661e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006624:	b2da      	uxtb	r2, r3
 8006626:	8979      	ldrh	r1, [r7, #10]
 8006628:	2300      	movs	r3, #0
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fbe9 	bl	8006e08 <I2C_TransferConfig>
 8006636:	e00f      	b.n	8006658 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006646:	b2da      	uxtb	r2, r3
 8006648:	8979      	ldrh	r1, [r7, #10]
 800664a:	2300      	movs	r3, #0
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fbd8 	bl	8006e08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d19e      	bne.n	80065a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 faab 	bl	8006bc2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e01a      	b.n	80066ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2220      	movs	r2, #32
 800667c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	4b0a      	ldr	r3, [pc, #40]	@ (80066b4 <HAL_I2C_Mem_Write+0x224>)
 800668a:	400b      	ands	r3, r1
 800668c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066aa:	2302      	movs	r3, #2
  }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	fe00e800 	.word	0xfe00e800

080066b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	817b      	strh	r3, [r7, #10]
 80066ca:	460b      	mov	r3, r1
 80066cc:	813b      	strh	r3, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b20      	cmp	r3, #32
 80066dc:	f040 80fd 	bne.w	80068da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_I2C_Mem_Read+0x34>
 80066e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d105      	bne.n	80066f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0f1      	b.n	80068dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_I2C_Mem_Read+0x4e>
 8006702:	2302      	movs	r3, #2
 8006704:	e0ea      	b.n	80068dc <HAL_I2C_Mem_Read+0x224>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800670e:	f7fc fd8f 	bl	8003230 <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2319      	movs	r3, #25
 800671a:	2201      	movs	r2, #1
 800671c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f9ae 	bl	8006a82 <I2C_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0d5      	b.n	80068dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2222      	movs	r2, #34	@ 0x22
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2240      	movs	r2, #64	@ 0x40
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a3a      	ldr	r2, [r7, #32]
 800674a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006758:	88f8      	ldrh	r0, [r7, #6]
 800675a:	893a      	ldrh	r2, [r7, #8]
 800675c:	8979      	ldrh	r1, [r7, #10]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	4603      	mov	r3, r0
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f913 	bl	8006994 <I2C_RequestMemoryRead>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0ad      	b.n	80068dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2bff      	cmp	r3, #255	@ 0xff
 8006788:	d90e      	bls.n	80067a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	22ff      	movs	r2, #255	@ 0xff
 800678e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006794:	b2da      	uxtb	r2, r3
 8006796:	8979      	ldrh	r1, [r7, #10]
 8006798:	4b52      	ldr	r3, [pc, #328]	@ (80068e4 <HAL_I2C_Mem_Read+0x22c>)
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fb31 	bl	8006e08 <I2C_TransferConfig>
 80067a6:	e00f      	b.n	80067c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	8979      	ldrh	r1, [r7, #10]
 80067ba:	4b4a      	ldr	r3, [pc, #296]	@ (80068e4 <HAL_I2C_Mem_Read+0x22c>)
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fb20 	bl	8006e08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	2200      	movs	r2, #0
 80067d0:	2104      	movs	r1, #4
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f955 	bl	8006a82 <I2C_WaitOnFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e07c      	b.n	80068dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d034      	beq.n	8006888 <HAL_I2C_Mem_Read+0x1d0>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d130      	bne.n	8006888 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682c:	2200      	movs	r2, #0
 800682e:	2180      	movs	r1, #128	@ 0x80
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 f926 	bl	8006a82 <I2C_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e04d      	b.n	80068dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	2bff      	cmp	r3, #255	@ 0xff
 8006848:	d90e      	bls.n	8006868 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	22ff      	movs	r2, #255	@ 0xff
 800684e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006854:	b2da      	uxtb	r2, r3
 8006856:	8979      	ldrh	r1, [r7, #10]
 8006858:	2300      	movs	r3, #0
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fad1 	bl	8006e08 <I2C_TransferConfig>
 8006866:	e00f      	b.n	8006888 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006876:	b2da      	uxtb	r2, r3
 8006878:	8979      	ldrh	r1, [r7, #10]
 800687a:	2300      	movs	r3, #0
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fac0 	bl	8006e08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d19a      	bne.n	80067c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f993 	bl	8006bc2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e01a      	b.n	80068dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2220      	movs	r2, #32
 80068ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6859      	ldr	r1, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <HAL_I2C_Mem_Read+0x230>)
 80068ba:	400b      	ands	r3, r1
 80068bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e000      	b.n	80068dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068da:	2302      	movs	r3, #2
  }
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	80002400 	.word	0x80002400
 80068e8:	fe00e800 	.word	0xfe00e800

080068ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	4608      	mov	r0, r1
 80068f6:	4611      	mov	r1, r2
 80068f8:	461a      	mov	r2, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	817b      	strh	r3, [r7, #10]
 80068fe:	460b      	mov	r3, r1
 8006900:	813b      	strh	r3, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	8979      	ldrh	r1, [r7, #10]
 800690c:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <I2C_RequestMemoryWrite+0xa4>)
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fa77 	bl	8006e08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	69b9      	ldr	r1, [r7, #24]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f908 	bl	8006b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e02c      	b.n	8006988 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d105      	bne.n	8006940 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006934:	893b      	ldrh	r3, [r7, #8]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	629a      	str	r2, [r3, #40]	@ 0x28
 800693e:	e015      	b.n	800696c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006940:	893b      	ldrh	r3, [r7, #8]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	b29b      	uxth	r3, r3
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	69b9      	ldr	r1, [r7, #24]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 f8ee 	bl	8006b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e012      	b.n	8006988 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006962:	893b      	ldrh	r3, [r7, #8]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2200      	movs	r2, #0
 8006974:	2180      	movs	r1, #128	@ 0x80
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f883 	bl	8006a82 <I2C_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	80002000 	.word	0x80002000

08006994 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	817b      	strh	r3, [r7, #10]
 80069a6:	460b      	mov	r3, r1
 80069a8:	813b      	strh	r3, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	8979      	ldrh	r1, [r7, #10]
 80069b4:	4b20      	ldr	r3, [pc, #128]	@ (8006a38 <I2C_RequestMemoryRead+0xa4>)
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	2300      	movs	r3, #0
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fa24 	bl	8006e08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	69b9      	ldr	r1, [r7, #24]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f8b5 	bl	8006b34 <I2C_WaitOnTXISFlagUntilTimeout>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e02c      	b.n	8006a2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d105      	bne.n	80069e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069da:	893b      	ldrh	r3, [r7, #8]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80069e4:	e015      	b.n	8006a12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069e6:	893b      	ldrh	r3, [r7, #8]
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	69b9      	ldr	r1, [r7, #24]
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f89b 	bl	8006b34 <I2C_WaitOnTXISFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e012      	b.n	8006a2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a08:	893b      	ldrh	r3, [r7, #8]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2140      	movs	r1, #64	@ 0x40
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f830 	bl	8006a82 <I2C_WaitOnFlagUntilTimeout>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	80002000 	.word	0x80002000

08006a3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d103      	bne.n	8006a5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d007      	beq.n	8006a78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	619a      	str	r2, [r3, #24]
  }
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr

08006a82 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a92:	e03b      	b.n	8006b0c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f8d5 	bl	8006c48 <I2C_IsErrorOccurred>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e041      	b.n	8006b2c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aae:	d02d      	beq.n	8006b0c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab0:	f7fc fbbe 	bl	8003230 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d302      	bcc.n	8006ac6 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d122      	bne.n	8006b0c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	bf0c      	ite	eq
 8006ad6:	2301      	moveq	r3, #1
 8006ad8:	2300      	movne	r3, #0
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d113      	bne.n	8006b0c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae8:	f043 0220 	orr.w	r2, r3, #32
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e00f      	b.n	8006b2c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4013      	ands	r3, r2
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d0b4      	beq.n	8006a94 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b40:	e033      	b.n	8006baa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f87e 	bl	8006c48 <I2C_IsErrorOccurred>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e031      	b.n	8006bba <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d025      	beq.n	8006baa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5e:	f7fc fb67 	bl	8003230 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d302      	bcc.n	8006b74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d11a      	bne.n	8006baa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d013      	beq.n	8006baa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b86:	f043 0220 	orr.w	r2, r3, #32
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e007      	b.n	8006bba <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d1c4      	bne.n	8006b42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bce:	e02f      	b.n	8006c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f837 	bl	8006c48 <I2C_IsErrorOccurred>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e02d      	b.n	8006c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be4:	f7fc fb24 	bl	8003230 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d302      	bcc.n	8006bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d11a      	bne.n	8006c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d013      	beq.n	8006c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0c:	f043 0220 	orr.w	r2, r3, #32
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e007      	b.n	8006c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d1c8      	bne.n	8006bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	@ 0x28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d068      	beq.n	8006d46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2210      	movs	r2, #16
 8006c7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c7c:	e049      	b.n	8006d12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d045      	beq.n	8006d12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c86:	f7fc fad3 	bl	8003230 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <I2C_IsErrorOccurred+0x54>
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d13a      	bne.n	8006d12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ca6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cbe:	d121      	bne.n	8006d04 <I2C_IsErrorOccurred+0xbc>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cc6:	d01d      	beq.n	8006d04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006cc8:	7cfb      	ldrb	r3, [r7, #19]
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d01a      	beq.n	8006d04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006cde:	f7fc faa7 	bl	8003230 <HAL_GetTick>
 8006ce2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ce4:	e00e      	b.n	8006d04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ce6:	f7fc faa3 	bl	8003230 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b19      	cmp	r3, #25
 8006cf2:	d907      	bls.n	8006d04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	f043 0320 	orr.w	r3, r3, #32
 8006cfa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006d02:	e006      	b.n	8006d12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d1e9      	bne.n	8006ce6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d003      	beq.n	8006d28 <I2C_IsErrorOccurred+0xe0>
 8006d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0aa      	beq.n	8006c7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2220      	movs	r2, #32
 8006d36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	f043 0304 	orr.w	r3, r3, #4
 8006d3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00b      	beq.n	8006d70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	f043 0301 	orr.w	r3, r3, #1
 8006d5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	f043 0308 	orr.w	r3, r3, #8
 8006d80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f043 0302 	orr.w	r3, r3, #2
 8006da2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01c      	beq.n	8006df6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fe3d 	bl	8006a3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6859      	ldr	r1, [r3, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <I2C_IsErrorOccurred+0x1bc>)
 8006dce:	400b      	ands	r3, r1
 8006dd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3728      	adds	r7, #40	@ 0x28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	fe00e800 	.word	0xfe00e800

08006e08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	607b      	str	r3, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	817b      	strh	r3, [r7, #10]
 8006e16:	4613      	mov	r3, r2
 8006e18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e1a:	897b      	ldrh	r3, [r7, #10]
 8006e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e20:	7a7b      	ldrb	r3, [r7, #9]
 8006e22:	041b      	lsls	r3, r3, #16
 8006e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	0d5b      	lsrs	r3, r3, #21
 8006e42:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006e46:	4b07      	ldr	r3, [pc, #28]	@ (8006e64 <I2C_TransferConfig+0x5c>)
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	ea02 0103 	and.w	r1, r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr
 8006e64:	03ff63ff 	.word	0x03ff63ff

08006e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d138      	bne.n	8006ef0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e032      	b.n	8006ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2224      	movs	r2, #36	@ 0x24
 8006e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0201 	bic.w	r2, r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6819      	ldr	r1, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e000      	b.n	8006ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ef0:	2302      	movs	r3, #2
  }
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr

08006efc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d139      	bne.n	8006f86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e033      	b.n	8006f88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2224      	movs	r2, #36	@ 0x24
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0201 	bic.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006f4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f042 0201 	orr.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e000      	b.n	8006f88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
  }
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
	...

08006f94 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f98:	4b04      	ldr	r3, [pc, #16]	@ (8006fac <HAL_PWR_EnableBkUpAccess+0x18>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a03      	ldr	r2, [pc, #12]	@ (8006fac <HAL_PWR_EnableBkUpAccess+0x18>)
 8006f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fa2:	6013      	str	r3, [r2, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bc80      	pop	{r7}
 8006faa:	4770      	bx	lr
 8006fac:	58000400 	.word	0x58000400

08006fb0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10c      	bne.n	8006fdc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006fc2:	4b13      	ldr	r3, [pc, #76]	@ (8007010 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fce:	d10d      	bne.n	8006fec <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006fd0:	f000 f83c 	bl	800704c <HAL_PWREx_DisableLowPowerRunMode>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006fda:	e015      	b.n	8007008 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007010 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006fe8:	f000 f822 	bl	8007030 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006fec:	4b09      	ldr	r3, [pc, #36]	@ (8007014 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	4a08      	ldr	r2, [pc, #32]	@ (8007014 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006ff2:	f023 0304 	bic.w	r3, r3, #4
 8006ff6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006ffe:	bf30      	wfi
 8007000:	e002      	b.n	8007008 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007002:	bf40      	sev
    __WFE();
 8007004:	bf20      	wfe
    __WFE();
 8007006:	bf20      	wfe
  }
}
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	58000400 	.word	0x58000400
 8007014:	e000ed00 	.word	0xe000ed00

08007018 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800701c:	4b03      	ldr	r3, [pc, #12]	@ (800702c <HAL_PWREx_GetVoltageRange+0x14>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007024:	4618      	mov	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr
 800702c:	58000400 	.word	0x58000400

08007030 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8007034:	4b04      	ldr	r3, [pc, #16]	@ (8007048 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a03      	ldr	r2, [pc, #12]	@ (8007048 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800703a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800703e:	6013      	str	r3, [r2, #0]
}
 8007040:	bf00      	nop
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr
 8007048:	58000400 	.word	0x58000400

0800704c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8007052:	4b16      	ldr	r3, [pc, #88]	@ (80070ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a15      	ldr	r2, [pc, #84]	@ (80070ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007058:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800705c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800705e:	4b14      	ldr	r3, [pc, #80]	@ (80070b0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2232      	movs	r2, #50	@ 0x32
 8007064:	fb02 f303 	mul.w	r3, r2, r3
 8007068:	4a12      	ldr	r2, [pc, #72]	@ (80070b4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	0c9b      	lsrs	r3, r3, #18
 8007070:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007072:	e002      	b.n	800707a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3b01      	subs	r3, #1
 8007078:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800707a:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007086:	d102      	bne.n	800708e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f2      	bne.n	8007074 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800708e:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800709a:	d101      	bne.n	80070a0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e000      	b.n	80070a2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	58000400 	.word	0x58000400
 80070b0:	20000000 	.word	0x20000000
 80070b4:	431bde83 	.word	0x431bde83

080070b8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f023 0307 	bic.w	r3, r3, #7
 80070ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007104 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80070cc:	f043 0302 	orr.w	r3, r3, #2
 80070d0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80070d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007108 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007108 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80070e4:	bf30      	wfi
 80070e6:	e002      	b.n	80070ee <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80070e8:	bf40      	sev
    __WFE();
 80070ea:	bf20      	wfe
    __WFE();
 80070ec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80070ee:	4b06      	ldr	r3, [pc, #24]	@ (8007108 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	4a05      	ldr	r2, [pc, #20]	@ (8007108 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80070f4:	f023 0304 	bic.w	r3, r3, #4
 80070f8:	6113      	str	r3, [r2, #16]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr
 8007104:	58000400 	.word	0x58000400
 8007108:	e000ed00 	.word	0xe000ed00

0800710c <LL_PWR_IsEnabledBkUpAccess>:
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8007110:	4b06      	ldr	r3, [pc, #24]	@ (800712c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800711c:	d101      	bne.n	8007122 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	46bd      	mov	sp, r7
 8007128:	bc80      	pop	{r7}
 800712a:	4770      	bx	lr
 800712c:	58000400 	.word	0x58000400

08007130 <LL_RCC_HSE_EnableTcxo>:
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800713e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007142:	6013      	str	r3, [r2, #0]
}
 8007144:	bf00      	nop
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <LL_RCC_HSE_DisableTcxo>:
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800715a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800715e:	6013      	str	r3, [r2, #0]
}
 8007160:	bf00      	nop
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800716c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800717a:	d101      	bne.n	8007180 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr

0800718a <LL_RCC_HSE_Enable>:
{
 800718a:	b480      	push	{r7}
 800718c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800718e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <LL_RCC_HSE_Disable>:
{
 80071a6:	b480      	push	{r7}
 80071a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80071aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071b8:	6013      	str	r3, [r2, #0]
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr

080071c2 <LL_RCC_HSE_IsReady>:
{
 80071c2:	b480      	push	{r7}
 80071c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80071c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071d4:	d101      	bne.n	80071da <LL_RCC_HSE_IsReady+0x18>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <LL_RCC_HSE_IsReady+0x1a>
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <LL_RCC_HSI_Enable>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80071e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f6:	6013      	str	r3, [r2, #0]
}
 80071f8:	bf00      	nop
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <LL_RCC_HSI_Disable>:
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800720e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007212:	6013      	str	r3, [r2, #0]
}
 8007214:	bf00      	nop
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <LL_RCC_HSI_IsReady>:
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800722a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800722e:	d101      	bne.n	8007234 <LL_RCC_HSI_IsReady+0x18>
 8007230:	2301      	movs	r3, #1
 8007232:	e000      	b.n	8007236 <LL_RCC_HSI_IsReady+0x1a>
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <LL_RCC_HSI_SetCalibTrimming>:
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	061b      	lsls	r3, r3, #24
 8007254:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007258:	4313      	orrs	r3, r2
 800725a:	604b      	str	r3, [r1, #4]
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr

08007266 <LL_RCC_LSE_IsReady>:
{
 8007266:	b480      	push	{r7}
 8007268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800726a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b02      	cmp	r3, #2
 8007278:	d101      	bne.n	800727e <LL_RCC_LSE_IsReady+0x18>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <LL_RCC_LSE_IsReady+0x1a>
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr

08007288 <LL_RCC_LSI_Enable>:
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800728c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007294:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80072a0:	bf00      	nop
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <LL_RCC_LSI_Disable>:
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80072ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80072c0:	bf00      	nop
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr

080072c8 <LL_RCC_LSI_IsReady>:
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80072cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d101      	bne.n	80072e0 <LL_RCC_LSI_IsReady+0x18>
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <LL_RCC_LSI_IsReady+0x1a>
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <LL_RCC_MSI_Enable>:
{
 80072ea:	b480      	push	{r7}
 80072ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80072ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	6013      	str	r3, [r2, #0]
}
 80072fe:	bf00      	nop
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr

08007306 <LL_RCC_MSI_Disable>:
{
 8007306:	b480      	push	{r7}
 8007308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800730a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007314:	f023 0301 	bic.w	r3, r3, #1
 8007318:	6013      	str	r3, [r2, #0]
}
 800731a:	bf00      	nop
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr

08007322 <LL_RCC_MSI_IsReady>:
{
 8007322:	b480      	push	{r7}
 8007324:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b02      	cmp	r3, #2
 8007332:	d101      	bne.n	8007338 <LL_RCC_MSI_IsReady+0x16>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <LL_RCC_MSI_IsReady+0x18>
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr

08007342 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007342:	b480      	push	{r7}
 8007344:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b08      	cmp	r3, #8
 8007352:	d101      	bne.n	8007358 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr

08007362 <LL_RCC_MSI_GetRange>:
{
 8007362:	b480      	push	{r7}
 8007364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007370:	4618      	mov	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800737c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007384:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8007388:	4618      	mov	r0, r3
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073aa:	4313      	orrs	r3, r2
 80073ac:	604b      	str	r3, [r1, #4]
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <LL_RCC_SetSysClkSource>:
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80073c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f023 0203 	bic.w	r2, r3, #3
 80073ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	608b      	str	r3, [r1, #8]
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr

080073de <LL_RCC_GetSysClkSource>:
{
 80073de:	b480      	push	{r7}
 80073e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80073e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 030c 	and.w	r3, r3, #12
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bc80      	pop	{r7}
 80073f2:	4770      	bx	lr

080073f4 <LL_RCC_SetAHBPrescaler>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80073fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4313      	orrs	r3, r2
 800740e:	608b      	str	r3, [r1, #8]
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr

0800741a <LL_RCC_SetAHB3Prescaler>:
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007426:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800742a:	f023 020f 	bic.w	r2, r3, #15
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	091b      	lsrs	r3, r3, #4
 8007432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr

08007446 <LL_RCC_SetAPB1Prescaler>:
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800744e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4313      	orrs	r3, r2
 8007460:	608b      	str	r3, [r1, #8]
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <LL_RCC_SetAPB2Prescaler>:
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800747e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4313      	orrs	r3, r2
 8007486:	608b      	str	r3, [r1, #8]
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <LL_RCC_GetAHBPrescaler>:
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <LL_RCC_GetAHB3Prescaler>:
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80074ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr

080074c2 <LL_RCC_GetAPB1Prescaler>:
{
 80074c2:	b480      	push	{r7}
 80074c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80074c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <LL_RCC_GetAPB2Prescaler>:
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80074dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bc80      	pop	{r7}
 80074ec:	4770      	bx	lr

080074ee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80074ee:	b480      	push	{r7}
 80074f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80074f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007500:	6013      	str	r3, [r2, #0]
}
 8007502:	bf00      	nop
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr

0800750a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800750a:	b480      	push	{r7}
 800750c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800750e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007518:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800751c:	6013      	str	r3, [r2, #0]
}
 800751e:	bf00      	nop
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr

08007526 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007526:	b480      	push	{r7}
 8007528:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800752a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007534:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007538:	d101      	bne.n	800753e <LL_RCC_PLL_IsReady+0x18>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <LL_RCC_PLL_IsReady+0x1a>
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800754c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8007558:	4618      	mov	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr

08007560 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800756e:	4618      	mov	r0, r3
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	4770      	bx	lr

08007576 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007576:	b480      	push	{r7}
 8007578:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800757a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007584:	4618      	mov	r0, r3
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr

0800758c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f003 0303 	and.w	r3, r3, #3
}
 800759a:	4618      	mov	r0, r3
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr

080075a2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80075a2:	b480      	push	{r7}
 80075a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80075a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075b4:	d101      	bne.n	80075ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80075d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075d8:	d101      	bne.n	80075de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80075ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075fa:	d101      	bne.n	8007600 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80075fc:	2301      	movs	r3, #1
 80075fe:	e000      	b.n	8007602 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800760a:	b480      	push	{r7}
 800760c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800760e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007618:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800761c:	d101      	bne.n	8007622 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	46bd      	mov	sp, r7
 8007628:	bc80      	pop	{r7}
 800762a:	4770      	bx	lr

0800762c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e36f      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800763e:	f7ff fece 	bl	80073de <LL_RCC_GetSysClkSource>
 8007642:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007644:	f7ff ffa2 	bl	800758c <LL_RCC_PLL_GetMainSource>
 8007648:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 80c4 	beq.w	80077e0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d005      	beq.n	800766a <HAL_RCC_OscConfig+0x3e>
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	2b0c      	cmp	r3, #12
 8007662:	d176      	bne.n	8007752 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d173      	bne.n	8007752 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e353      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800767a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HAL_RCC_OscConfig+0x68>
 8007688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007692:	e006      	b.n	80076a2 <HAL_RCC_OscConfig+0x76>
 8007694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800769c:	091b      	lsrs	r3, r3, #4
 800769e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d222      	bcs.n	80076ec <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fd3c 	bl	8008128 <RCC_SetFlashLatencyFromMSIRange>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e331      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076c4:	f043 0308 	orr.w	r3, r3, #8
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076dc:	4313      	orrs	r3, r2
 80076de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fe53 	bl	8007390 <LL_RCC_MSI_SetCalibTrimming>
 80076ea:	e021      	b.n	8007730 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076f6:	f043 0308 	orr.w	r3, r3, #8
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800770e:	4313      	orrs	r3, r2
 8007710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fe3a 	bl	8007390 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fd01 	bl	8008128 <RCC_SetFlashLatencyFromMSIRange>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e2f6      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007730:	f000 fcc2 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 8007734:	4603      	mov	r3, r0
 8007736:	4aa7      	ldr	r2, [pc, #668]	@ (80079d4 <HAL_RCC_OscConfig+0x3a8>)
 8007738:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800773a:	4ba7      	ldr	r3, [pc, #668]	@ (80079d8 <HAL_RCC_OscConfig+0x3ac>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7fb fd6c 	bl	800321c <HAL_InitTick>
 8007744:	4603      	mov	r3, r0
 8007746:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007748:	7cfb      	ldrb	r3, [r7, #19]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d047      	beq.n	80077de <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800774e:	7cfb      	ldrb	r3, [r7, #19]
 8007750:	e2e5      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d02c      	beq.n	80077b4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800775a:	f7ff fdc6 	bl	80072ea <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800775e:	f7fb fd67 	bl	8003230 <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007766:	f7fb fd63 	bl	8003230 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e2d2      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007778:	f7ff fdd3 	bl	8007322 <LL_RCC_MSI_IsReady>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f1      	beq.n	8007766 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800778c:	f043 0308 	orr.w	r3, r3, #8
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077a4:	4313      	orrs	r3, r2
 80077a6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff fdef 	bl	8007390 <LL_RCC_MSI_SetCalibTrimming>
 80077b2:	e015      	b.n	80077e0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80077b4:	f7ff fda7 	bl	8007306 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077b8:	f7fb fd3a 	bl	8003230 <HAL_GetTick>
 80077bc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80077be:	e008      	b.n	80077d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077c0:	f7fb fd36 	bl	8003230 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e2a5      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80077d2:	f7ff fda6 	bl	8007322 <LL_RCC_MSI_IsReady>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f1      	bne.n	80077c0 <HAL_RCC_OscConfig+0x194>
 80077dc:	e000      	b.n	80077e0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80077de:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d058      	beq.n	800789e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d005      	beq.n	80077fe <HAL_RCC_OscConfig+0x1d2>
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	2b0c      	cmp	r3, #12
 80077f6:	d108      	bne.n	800780a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d105      	bne.n	800780a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d14b      	bne.n	800789e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e289      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800780a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800781c:	4313      	orrs	r3, r2
 800781e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007828:	d102      	bne.n	8007830 <HAL_RCC_OscConfig+0x204>
 800782a:	f7ff fcae 	bl	800718a <LL_RCC_HSE_Enable>
 800782e:	e00d      	b.n	800784c <HAL_RCC_OscConfig+0x220>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8007838:	d104      	bne.n	8007844 <HAL_RCC_OscConfig+0x218>
 800783a:	f7ff fc79 	bl	8007130 <LL_RCC_HSE_EnableTcxo>
 800783e:	f7ff fca4 	bl	800718a <LL_RCC_HSE_Enable>
 8007842:	e003      	b.n	800784c <HAL_RCC_OscConfig+0x220>
 8007844:	f7ff fcaf 	bl	80071a6 <LL_RCC_HSE_Disable>
 8007848:	f7ff fc80 	bl	800714c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d012      	beq.n	800787a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007854:	f7fb fcec 	bl	8003230 <HAL_GetTick>
 8007858:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800785c:	f7fb fce8 	bl	8003230 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b64      	cmp	r3, #100	@ 0x64
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e257      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800786e:	f7ff fca8 	bl	80071c2 <LL_RCC_HSE_IsReady>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0f1      	beq.n	800785c <HAL_RCC_OscConfig+0x230>
 8007878:	e011      	b.n	800789e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787a:	f7fb fcd9 	bl	8003230 <HAL_GetTick>
 800787e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007882:	f7fb fcd5 	bl	8003230 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b64      	cmp	r3, #100	@ 0x64
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e244      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007894:	f7ff fc95 	bl	80071c2 <LL_RCC_HSE_IsReady>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f1      	bne.n	8007882 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d046      	beq.n	8007938 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d005      	beq.n	80078bc <HAL_RCC_OscConfig+0x290>
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	2b0c      	cmp	r3, #12
 80078b4:	d10e      	bne.n	80078d4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d10b      	bne.n	80078d4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e22a      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fcb6 	bl	800723e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80078d2:	e031      	b.n	8007938 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d019      	beq.n	8007910 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078dc:	f7ff fc82 	bl	80071e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fb fca6 	bl	8003230 <HAL_GetTick>
 80078e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078e8:	f7fb fca2 	bl	8003230 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e211      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80078fa:	f7ff fc8f 	bl	800721c <LL_RCC_HSI_IsReady>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0f1      	beq.n	80078e8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fc98 	bl	800723e <LL_RCC_HSI_SetCalibTrimming>
 800790e:	e013      	b.n	8007938 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007910:	f7ff fc76 	bl	8007200 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007914:	f7fb fc8c 	bl	8003230 <HAL_GetTick>
 8007918:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800791c:	f7fb fc88 	bl	8003230 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e1f7      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800792e:	f7ff fc75 	bl	800721c <LL_RCC_HSI_IsReady>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1f1      	bne.n	800791c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d06e      	beq.n	8007a22 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d056      	beq.n	80079fa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800794c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007954:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69da      	ldr	r2, [r3, #28]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	429a      	cmp	r2, r3
 8007962:	d031      	beq.n	80079c8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d006      	beq.n	800797c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e1d0      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d013      	beq.n	80079ae <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8007986:	f7ff fc8f 	bl	80072a8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800798a:	f7fb fc51 	bl	8003230 <HAL_GetTick>
 800798e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007992:	f7fb fc4d 	bl	8003230 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b11      	cmp	r3, #17
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e1bc      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80079a4:	f7ff fc90 	bl	80072c8 <LL_RCC_LSI_IsReady>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1f1      	bne.n	8007992 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80079ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079b6:	f023 0210 	bic.w	r2, r3, #16
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079c8:	f7ff fc5e 	bl	8007288 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079cc:	f7fb fc30 	bl	8003230 <HAL_GetTick>
 80079d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80079d2:	e00c      	b.n	80079ee <HAL_RCC_OscConfig+0x3c2>
 80079d4:	20000000 	.word	0x20000000
 80079d8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079dc:	f7fb fc28 	bl	8003230 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b11      	cmp	r3, #17
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e197      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80079ee:	f7ff fc6b 	bl	80072c8 <LL_RCC_LSI_IsReady>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d0f1      	beq.n	80079dc <HAL_RCC_OscConfig+0x3b0>
 80079f8:	e013      	b.n	8007a22 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079fa:	f7ff fc55 	bl	80072a8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079fe:	f7fb fc17 	bl	8003230 <HAL_GetTick>
 8007a02:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007a04:	e008      	b.n	8007a18 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a06:	f7fb fc13 	bl	8003230 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b11      	cmp	r3, #17
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e182      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007a18:	f7ff fc56 	bl	80072c8 <LL_RCC_LSI_IsReady>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f1      	bne.n	8007a06 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0304 	and.w	r3, r3, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80d8 	beq.w	8007be0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007a30:	f7ff fb6c 	bl	800710c <LL_PWR_IsEnabledBkUpAccess>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d113      	bne.n	8007a62 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007a3a:	f7ff faab 	bl	8006f94 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a3e:	f7fb fbf7 	bl	8003230 <HAL_GetTick>
 8007a42:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007a44:	e008      	b.n	8007a58 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a46:	f7fb fbf3 	bl	8003230 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e162      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007a58:	f7ff fb58 	bl	800710c <LL_PWR_IsEnabledBkUpAccess>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0f1      	beq.n	8007a46 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d07b      	beq.n	8007b62 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	2b85      	cmp	r3, #133	@ 0x85
 8007a70:	d003      	beq.n	8007a7a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d109      	bne.n	8007a8e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a86:	f043 0304 	orr.w	r3, r3, #4
 8007a8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a8e:	f7fb fbcf 	bl	8003230 <HAL_GetTick>
 8007a92:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007aa0:	f043 0301 	orr.w	r3, r3, #1
 8007aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007aa8:	e00a      	b.n	8007ac0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aaa:	f7fb fbc1 	bl	8003230 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e12e      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007ac0:	f7ff fbd1 	bl	8007266 <LL_RCC_LSE_IsReady>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0ef      	beq.n	8007aaa <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2b81      	cmp	r3, #129	@ 0x81
 8007ad0:	d003      	beq.n	8007ada <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b85      	cmp	r3, #133	@ 0x85
 8007ad8:	d121      	bne.n	8007b1e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ada:	f7fb fba9 	bl	8003230 <HAL_GetTick>
 8007ade:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007af4:	e00a      	b.n	8007b0c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007af6:	f7fb fb9b 	bl	8003230 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e108      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0ec      	beq.n	8007af6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007b1c:	e060      	b.n	8007be0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b1e:	f7fb fb87 	bl	8003230 <HAL_GetTick>
 8007b22:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007b38:	e00a      	b.n	8007b50 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b3a:	f7fb fb79 	bl	8003230 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e0e6      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1ec      	bne.n	8007b3a <HAL_RCC_OscConfig+0x50e>
 8007b60:	e03e      	b.n	8007be0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b62:	f7fb fb65 	bl	8003230 <HAL_GetTick>
 8007b66:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007b7c:	e00a      	b.n	8007b94 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fb fb57 	bl	8003230 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e0c4      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1ec      	bne.n	8007b7e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ba4:	f7fb fb44 	bl	8003230 <HAL_GetTick>
 8007ba8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007bbe:	e00a      	b.n	8007bd6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc0:	f7fb fb36 	bl	8003230 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e0a3      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007bd6:	f7ff fb46 	bl	8007266 <LL_RCC_LSE_IsReady>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1ef      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8099 	beq.w	8007d1c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	2b0c      	cmp	r3, #12
 8007bee:	d06c      	beq.n	8007cca <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d14b      	bne.n	8007c90 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bf8:	f7ff fc87 	bl	800750a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bfc:	f7fb fb18 	bl	8003230 <HAL_GetTick>
 8007c00:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007c02:	e008      	b.n	8007c16 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c04:	f7fb fb14 	bl	8003230 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b0a      	cmp	r3, #10
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e083      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007c16:	f7ff fc86 	bl	8007526 <LL_RCC_PLL_IsReady>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1f1      	bne.n	8007c04 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	4b40      	ldr	r3, [pc, #256]	@ (8007d28 <HAL_RCC_OscConfig+0x6fc>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007c32:	4311      	orrs	r1, r2
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c38:	0212      	lsls	r2, r2, #8
 8007c3a:	4311      	orrs	r1, r2
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007c40:	4311      	orrs	r1, r2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007c46:	4311      	orrs	r1, r2
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c56:	f7ff fc4a 	bl	80074ee <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c68:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c6a:	f7fb fae1 	bl	8003230 <HAL_GetTick>
 8007c6e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c72:	f7fb fadd 	bl	8003230 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b0a      	cmp	r3, #10
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e04c      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007c84:	f7ff fc4f 	bl	8007526 <LL_RCC_PLL_IsReady>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f1      	beq.n	8007c72 <HAL_RCC_OscConfig+0x646>
 8007c8e:	e045      	b.n	8007d1c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c90:	f7ff fc3b 	bl	800750a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c94:	f7fb facc 	bl	8003230 <HAL_GetTick>
 8007c98:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c9c:	f7fb fac8 	bl	8003230 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b0a      	cmp	r3, #10
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e037      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007cae:	f7ff fc3a 	bl	8007526 <LL_RCC_PLL_IsReady>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f1      	bne.n	8007c9c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d2c <HAL_RCC_OscConfig+0x700>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	60cb      	str	r3, [r1, #12]
 8007cc8:	e028      	b.n	8007d1c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d101      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e023      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f003 0203 	and.w	r2, r3, #3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d115      	bne.n	8007d18 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d10e      	bne.n	8007d18 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d106      	bne.n	8007d18 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d001      	beq.n	8007d1c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	11c1808c 	.word	0x11c1808c
 8007d2c:	eefefffc 	.word	0xeefefffc

08007d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e10f      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d44:	4b89      	ldr	r3, [pc, #548]	@ (8007f6c <HAL_RCC_ClockConfig+0x23c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d91b      	bls.n	8007d8a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d52:	4b86      	ldr	r3, [pc, #536]	@ (8007f6c <HAL_RCC_ClockConfig+0x23c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f023 0207 	bic.w	r2, r3, #7
 8007d5a:	4984      	ldr	r1, [pc, #528]	@ (8007f6c <HAL_RCC_ClockConfig+0x23c>)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d62:	f7fb fa65 	bl	8003230 <HAL_GetTick>
 8007d66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d68:	e008      	b.n	8007d7c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007d6a:	f7fb fa61 	bl	8003230 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d901      	bls.n	8007d7c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e0f3      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8007f6c <HAL_RCC_ClockConfig+0x23c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d1ef      	bne.n	8007d6a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d016      	beq.n	8007dc4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff fb2a 	bl	80073f4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007da0:	f7fb fa46 	bl	8003230 <HAL_GetTick>
 8007da4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007da8:	f7fb fa42 	bl	8003230 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e0d4      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007dba:	f7ff fbf2 	bl	80075a2 <LL_RCC_IsActiveFlag_HPRE>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0f1      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d016      	beq.n	8007dfe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fb20 	bl	800741a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007dda:	f7fb fa29 	bl	8003230 <HAL_GetTick>
 8007dde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007de0:	e008      	b.n	8007df4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007de2:	f7fb fa25 	bl	8003230 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e0b7      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007df4:	f7ff fbe6 	bl	80075c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0f1      	beq.n	8007de2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0304 	and.w	r3, r3, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d016      	beq.n	8007e38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff fb19 	bl	8007446 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e14:	f7fb fa0c 	bl	8003230 <HAL_GetTick>
 8007e18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e1c:	f7fb fa08 	bl	8003230 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e09a      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007e2e:	f7ff fbdb 	bl	80075e8 <LL_RCC_IsActiveFlag_PPRE1>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0f1      	beq.n	8007e1c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d017      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fb0e 	bl	800746c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e50:	f7fb f9ee 	bl	8003230 <HAL_GetTick>
 8007e54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007e58:	f7fb f9ea 	bl	8003230 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e07c      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007e6a:	f7ff fbce 	bl	800760a <LL_RCC_IsActiveFlag_PPRE2>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0f1      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d043      	beq.n	8007f08 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d106      	bne.n	8007e96 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007e88:	f7ff f99b 	bl	80071c2 <LL_RCC_HSE_IsReady>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d11e      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e066      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d106      	bne.n	8007eac <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007e9e:	f7ff fb42 	bl	8007526 <LL_RCC_PLL_IsReady>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d113      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e05b      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007eb4:	f7ff fa35 	bl	8007322 <LL_RCC_MSI_IsReady>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d108      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e050      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007ec2:	f7ff f9ab 	bl	800721c <LL_RCC_HSI_IsReady>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e049      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff fa6f 	bl	80073b8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007eda:	f7fb f9a9 	bl	8003230 <HAL_GetTick>
 8007ede:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ee0:	e00a      	b.n	8007ef8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ee2:	f7fb f9a5 	bl	8003230 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d901      	bls.n	8007ef8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e035      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ef8:	f7ff fa71 	bl	80073de <LL_RCC_GetSysClkSource>
 8007efc:	4602      	mov	r2, r0
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d1ec      	bne.n	8007ee2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f08:	4b18      	ldr	r3, [pc, #96]	@ (8007f6c <HAL_RCC_ClockConfig+0x23c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d21b      	bcs.n	8007f4e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f16:	4b15      	ldr	r3, [pc, #84]	@ (8007f6c <HAL_RCC_ClockConfig+0x23c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 0207 	bic.w	r2, r3, #7
 8007f1e:	4913      	ldr	r1, [pc, #76]	@ (8007f6c <HAL_RCC_ClockConfig+0x23c>)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f26:	f7fb f983 	bl	8003230 <HAL_GetTick>
 8007f2a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007f2e:	f7fb f97f 	bl	8003230 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e011      	b.n	8007f64 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f40:	4b0a      	ldr	r3, [pc, #40]	@ (8007f6c <HAL_RCC_ClockConfig+0x23c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d1ef      	bne.n	8007f2e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007f4e:	f000 f8b3 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 8007f52:	4603      	mov	r3, r0
 8007f54:	4a06      	ldr	r2, [pc, #24]	@ (8007f70 <HAL_RCC_ClockConfig+0x240>)
 8007f56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007f58:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <HAL_RCC_ClockConfig+0x244>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fb f95d 	bl	800321c <HAL_InitTick>
 8007f62:	4603      	mov	r3, r0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	58004000 	.word	0x58004000
 8007f70:	20000000 	.word	0x20000000
 8007f74:	20000004 	.word	0x20000004

08007f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f86:	f7ff fa2a 	bl	80073de <LL_RCC_GetSysClkSource>
 8007f8a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f8c:	f7ff fafe 	bl	800758c <LL_RCC_PLL_GetMainSource>
 8007f90:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x2c>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b0c      	cmp	r3, #12
 8007f9c:	d139      	bne.n	8008012 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d136      	bne.n	8008012 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007fa4:	f7ff f9cd 	bl	8007342 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d115      	bne.n	8007fda <HAL_RCC_GetSysClockFreq+0x62>
 8007fae:	f7ff f9c8 	bl	8007342 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d106      	bne.n	8007fc6 <HAL_RCC_GetSysClockFreq+0x4e>
 8007fb8:	f7ff f9d3 	bl	8007362 <LL_RCC_MSI_GetRange>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	0a1b      	lsrs	r3, r3, #8
 8007fc0:	f003 030f 	and.w	r3, r3, #15
 8007fc4:	e005      	b.n	8007fd2 <HAL_RCC_GetSysClockFreq+0x5a>
 8007fc6:	f7ff f9d7 	bl	8007378 <LL_RCC_MSI_GetRangeAfterStandby>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	0a1b      	lsrs	r3, r3, #8
 8007fce:	f003 030f 	and.w	r3, r3, #15
 8007fd2:	4a36      	ldr	r2, [pc, #216]	@ (80080ac <HAL_RCC_GetSysClockFreq+0x134>)
 8007fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd8:	e014      	b.n	8008004 <HAL_RCC_GetSysClockFreq+0x8c>
 8007fda:	f7ff f9b2 	bl	8007342 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d106      	bne.n	8007ff2 <HAL_RCC_GetSysClockFreq+0x7a>
 8007fe4:	f7ff f9bd 	bl	8007362 <LL_RCC_MSI_GetRange>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	091b      	lsrs	r3, r3, #4
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	e005      	b.n	8007ffe <HAL_RCC_GetSysClockFreq+0x86>
 8007ff2:	f7ff f9c1 	bl	8007378 <LL_RCC_MSI_GetRangeAfterStandby>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	091b      	lsrs	r3, r3, #4
 8007ffa:	f003 030f 	and.w	r3, r3, #15
 8007ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80080ac <HAL_RCC_GetSysClockFreq+0x134>)
 8008000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008004:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d115      	bne.n	8008038 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008010:	e012      	b.n	8008038 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b04      	cmp	r3, #4
 8008016:	d102      	bne.n	800801e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008018:	4b25      	ldr	r3, [pc, #148]	@ (80080b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e00c      	b.n	8008038 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b08      	cmp	r3, #8
 8008022:	d109      	bne.n	8008038 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008024:	f7ff f8a0 	bl	8007168 <LL_RCC_HSE_IsEnabledDiv2>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d102      	bne.n	8008034 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800802e:	4b20      	ldr	r3, [pc, #128]	@ (80080b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	e001      	b.n	8008038 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008034:	4b1f      	ldr	r3, [pc, #124]	@ (80080b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008036:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008038:	f7ff f9d1 	bl	80073de <LL_RCC_GetSysClkSource>
 800803c:	4603      	mov	r3, r0
 800803e:	2b0c      	cmp	r3, #12
 8008040:	d12f      	bne.n	80080a2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008042:	f7ff faa3 	bl	800758c <LL_RCC_PLL_GetMainSource>
 8008046:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d003      	beq.n	8008056 <HAL_RCC_GetSysClockFreq+0xde>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b03      	cmp	r3, #3
 8008052:	d003      	beq.n	800805c <HAL_RCC_GetSysClockFreq+0xe4>
 8008054:	e00d      	b.n	8008072 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008056:	4b16      	ldr	r3, [pc, #88]	@ (80080b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008058:	60fb      	str	r3, [r7, #12]
        break;
 800805a:	e00d      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800805c:	f7ff f884 	bl	8007168 <LL_RCC_HSE_IsEnabledDiv2>
 8008060:	4603      	mov	r3, r0
 8008062:	2b01      	cmp	r3, #1
 8008064:	d102      	bne.n	800806c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008066:	4b12      	ldr	r3, [pc, #72]	@ (80080b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008068:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800806a:	e005      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800806c:	4b11      	ldr	r3, [pc, #68]	@ (80080b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800806e:	60fb      	str	r3, [r7, #12]
        break;
 8008070:	e002      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	60fb      	str	r3, [r7, #12]
        break;
 8008076:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008078:	f7ff fa66 	bl	8007548 <LL_RCC_PLL_GetN>
 800807c:	4602      	mov	r2, r0
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	fb03 f402 	mul.w	r4, r3, r2
 8008084:	f7ff fa77 	bl	8007576 <LL_RCC_PLL_GetDivider>
 8008088:	4603      	mov	r3, r0
 800808a:	091b      	lsrs	r3, r3, #4
 800808c:	3301      	adds	r3, #1
 800808e:	fbb4 f4f3 	udiv	r4, r4, r3
 8008092:	f7ff fa65 	bl	8007560 <LL_RCC_PLL_GetR>
 8008096:	4603      	mov	r3, r0
 8008098:	0f5b      	lsrs	r3, r3, #29
 800809a:	3301      	adds	r3, #1
 800809c:	fbb4 f3f3 	udiv	r3, r4, r3
 80080a0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80080a2:	697b      	ldr	r3, [r7, #20]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd90      	pop	{r4, r7, pc}
 80080ac:	0801fa9c 	.word	0x0801fa9c
 80080b0:	00f42400 	.word	0x00f42400
 80080b4:	01e84800 	.word	0x01e84800

080080b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080b8:	b598      	push	{r3, r4, r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80080bc:	f7ff ff5c 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 80080c0:	4604      	mov	r4, r0
 80080c2:	f7ff f9e6 	bl	8007492 <LL_RCC_GetAHBPrescaler>
 80080c6:	4603      	mov	r3, r0
 80080c8:	091b      	lsrs	r3, r3, #4
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	4a03      	ldr	r2, [pc, #12]	@ (80080dc <HAL_RCC_GetHCLKFreq+0x24>)
 80080d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80080d8:	4618      	mov	r0, r3
 80080da:	bd98      	pop	{r3, r4, r7, pc}
 80080dc:	0801fa3c 	.word	0x0801fa3c

080080e0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080e0:	b598      	push	{r3, r4, r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80080e4:	f7ff ffe8 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 80080e8:	4604      	mov	r4, r0
 80080ea:	f7ff f9ea 	bl	80074c2 <LL_RCC_GetAPB1Prescaler>
 80080ee:	4603      	mov	r3, r0
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	4a03      	ldr	r2, [pc, #12]	@ (8008100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd98      	pop	{r3, r4, r7, pc}
 8008100:	0801fa7c 	.word	0x0801fa7c

08008104 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008104:	b598      	push	{r3, r4, r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008108:	f7ff ffd6 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 800810c:	4604      	mov	r4, r0
 800810e:	f7ff f9e3 	bl	80074d8 <LL_RCC_GetAPB2Prescaler>
 8008112:	4603      	mov	r3, r0
 8008114:	0adb      	lsrs	r3, r3, #11
 8008116:	4a03      	ldr	r2, [pc, #12]	@ (8008124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008120:	4618      	mov	r0, r3
 8008122:	bd98      	pop	{r3, r4, r7, pc}
 8008124:	0801fa7c 	.word	0x0801fa7c

08008128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008128:	b590      	push	{r4, r7, lr}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	091b      	lsrs	r3, r3, #4
 8008134:	f003 030f 	and.w	r3, r3, #15
 8008138:	4a10      	ldr	r2, [pc, #64]	@ (800817c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800813a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8008140:	f7ff f9b2 	bl	80074a8 <LL_RCC_GetAHB3Prescaler>
 8008144:	4603      	mov	r3, r0
 8008146:	091b      	lsrs	r3, r3, #4
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	4a0c      	ldr	r2, [pc, #48]	@ (8008180 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800814e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	fbb2 f3f3 	udiv	r3, r2, r3
 8008158:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	4a09      	ldr	r2, [pc, #36]	@ (8008184 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800815e:	fba2 2303 	umull	r2, r3, r2, r3
 8008162:	0c9c      	lsrs	r4, r3, #18
 8008164:	f7fe ff58 	bl	8007018 <HAL_PWREx_GetVoltageRange>
 8008168:	4603      	mov	r3, r0
 800816a:	4619      	mov	r1, r3
 800816c:	4620      	mov	r0, r4
 800816e:	f000 f80b 	bl	8008188 <RCC_SetFlashLatency>
 8008172:	4603      	mov	r3, r0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	bd90      	pop	{r4, r7, pc}
 800817c:	0801fa9c 	.word	0x0801fa9c
 8008180:	0801fa3c 	.word	0x0801fa3c
 8008184:	431bde83 	.word	0x431bde83

08008188 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08e      	sub	sp, #56	@ 0x38
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8008192:	4a3a      	ldr	r2, [pc, #232]	@ (800827c <RCC_SetFlashLatency+0xf4>)
 8008194:	f107 0320 	add.w	r3, r7, #32
 8008198:	e892 0003 	ldmia.w	r2, {r0, r1}
 800819c:	6018      	str	r0, [r3, #0]
 800819e:	3304      	adds	r3, #4
 80081a0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80081a2:	4a37      	ldr	r2, [pc, #220]	@ (8008280 <RCC_SetFlashLatency+0xf8>)
 80081a4:	f107 0318 	add.w	r3, r7, #24
 80081a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081ac:	6018      	str	r0, [r3, #0]
 80081ae:	3304      	adds	r3, #4
 80081b0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80081b2:	4a34      	ldr	r2, [pc, #208]	@ (8008284 <RCC_SetFlashLatency+0xfc>)
 80081b4:	f107 030c 	add.w	r3, r7, #12
 80081b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80081ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80081be:	2300      	movs	r3, #0
 80081c0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c8:	d11b      	bne.n	8008202 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80081ca:	2300      	movs	r3, #0
 80081cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80081ce:	e014      	b.n	80081fa <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	3338      	adds	r3, #56	@ 0x38
 80081d6:	443b      	add	r3, r7
 80081d8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d807      	bhi.n	80081f4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80081e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	3338      	adds	r3, #56	@ 0x38
 80081ea:	443b      	add	r3, r7
 80081ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80081f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081f2:	e021      	b.n	8008238 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80081f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f6:	3301      	adds	r3, #1
 80081f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d9e7      	bls.n	80081d0 <RCC_SetFlashLatency+0x48>
 8008200:	e01a      	b.n	8008238 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008202:	2300      	movs	r3, #0
 8008204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008206:	e014      	b.n	8008232 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	3338      	adds	r3, #56	@ 0x38
 800820e:	443b      	add	r3, r7
 8008210:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008214:	461a      	mov	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4293      	cmp	r3, r2
 800821a:	d807      	bhi.n	800822c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800821c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	3338      	adds	r3, #56	@ 0x38
 8008222:	443b      	add	r3, r7
 8008224:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008228:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800822a:	e005      	b.n	8008238 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800822c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822e:	3301      	adds	r3, #1
 8008230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008234:	2b02      	cmp	r3, #2
 8008236:	d9e7      	bls.n	8008208 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008238:	4b13      	ldr	r3, [pc, #76]	@ (8008288 <RCC_SetFlashLatency+0x100>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f023 0207 	bic.w	r2, r3, #7
 8008240:	4911      	ldr	r1, [pc, #68]	@ (8008288 <RCC_SetFlashLatency+0x100>)
 8008242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008244:	4313      	orrs	r3, r2
 8008246:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008248:	f7fa fff2 	bl	8003230 <HAL_GetTick>
 800824c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800824e:	e008      	b.n	8008262 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008250:	f7fa ffee 	bl	8003230 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e007      	b.n	8008272 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008262:	4b09      	ldr	r3, [pc, #36]	@ (8008288 <RCC_SetFlashLatency+0x100>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800826c:	429a      	cmp	r2, r3
 800826e:	d1ef      	bne.n	8008250 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3738      	adds	r7, #56	@ 0x38
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	0801f18c 	.word	0x0801f18c
 8008280:	0801f194 	.word	0x0801f194
 8008284:	0801f19c 	.word	0x0801f19c
 8008288:	58004000 	.word	0x58004000

0800828c <LL_RCC_LSE_IsReady>:
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b02      	cmp	r3, #2
 800829e:	d101      	bne.n	80082a4 <LL_RCC_LSE_IsReady+0x18>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e000      	b.n	80082a6 <LL_RCC_LSE_IsReady+0x1a>
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr

080082ae <LL_RCC_SetUSARTClockSource>:
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80082b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	0c1b      	lsrs	r3, r3, #16
 80082c2:	43db      	mvns	r3, r3
 80082c4:	401a      	ands	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr

080082de <LL_RCC_SetI2SClockSource>:
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80082e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <LL_RCC_SetLPUARTClockSource>:
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008318:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800831c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4313      	orrs	r3, r2
 8008324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr

08008332 <LL_RCC_SetI2CClockSource>:
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800833a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800833e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	091b      	lsrs	r3, r3, #4
 8008346:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800834a:	43db      	mvns	r3, r3
 800834c:	401a      	ands	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008356:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800835a:	4313      	orrs	r3, r2
 800835c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr

0800836a <LL_RCC_SetLPTIMClockSource>:
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008376:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	041b      	lsls	r3, r3, #16
 8008380:	43db      	mvns	r3, r3
 8008382:	401a      	ands	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	041b      	lsls	r3, r3, #16
 8008388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	bc80      	pop	{r7}
 800839a:	4770      	bx	lr

0800839c <LL_RCC_SetRNGClockSource>:
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80083a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ac:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80083b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr

080083c6 <LL_RCC_SetADCClockSource>:
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80083ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80083da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr

080083f0 <LL_RCC_SetRTCClockSource>:
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80083f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008404:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <LL_RCC_GetRTCClockSource>:
{
 800841a:	b480      	push	{r7}
 800841c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800841e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800842a:	4618      	mov	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr

08008432 <LL_RCC_ForceBackupDomainReset>:
{
 8008432:	b480      	push	{r7}
 8008434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800843a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800843e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800844a:	bf00      	nop
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr

08008452 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008452:	b480      	push	{r7}
 8008454:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800845a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008466:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800846a:	bf00      	nop
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr
	...

08008474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008480:	2300      	movs	r3, #0
 8008482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008484:	2300      	movs	r3, #0
 8008486:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d058      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008494:	f7fe fd7e 	bl	8006f94 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008498:	f7fa feca 	bl	8003230 <HAL_GetTick>
 800849c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800849e:	e009      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084a0:	f7fa fec6 	bl	8003230 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d902      	bls.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	74fb      	strb	r3, [r7, #19]
        break;
 80084b2:	e006      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80084b4:	4b7b      	ldr	r3, [pc, #492]	@ (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c0:	d1ee      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80084c2:	7cfb      	ldrb	r3, [r7, #19]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d13c      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80084c8:	f7ff ffa7 	bl	800841a <LL_RCC_GetRTCClockSource>
 80084cc:	4602      	mov	r2, r0
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d00f      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80084d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084e2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084e4:	f7ff ffa5 	bl	8008432 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084e8:	f7ff ffb3 	bl	8008452 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80084ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d014      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7fa fe96 	bl	8003230 <HAL_GetTick>
 8008504:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008506:	e00b      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008508:	f7fa fe92 	bl	8003230 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008516:	4293      	cmp	r3, r2
 8008518:	d902      	bls.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	74fb      	strb	r3, [r7, #19]
            break;
 800851e:	e004      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008520:	f7ff feb4 	bl	800828c <LL_RCC_LSE_IsReady>
 8008524:	4603      	mov	r3, r0
 8008526:	2b01      	cmp	r3, #1
 8008528:	d1ee      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800852a:	7cfb      	ldrb	r3, [r7, #19]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ff5b 	bl	80083f0 <LL_RCC_SetRTCClockSource>
 800853a:	e004      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800853c:	7cfb      	ldrb	r3, [r7, #19]
 800853e:	74bb      	strb	r3, [r7, #18]
 8008540:	e001      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fea9 	bl	80082ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fe9e 	bl	80082ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d004      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff fec0 	bl	8008308 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fee6 	bl	800836a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff fedb 	bl	800836a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fed0 	bl	800836a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fea9 	bl	8008332 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fe9e 	bl	8008332 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fe93 	bl	8008332 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	d011      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fe5e 	bl	80082de <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800862a:	d107      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800862c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800863a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d010      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff fea5 	bl	800839c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008656:	2b00      	cmp	r3, #0
 8008658:	d107      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800865a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008668:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d011      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff fea3 	bl	80083c6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008688:	d107      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800868a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008698:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800869a:	7cbb      	ldrb	r3, [r7, #18]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	58000400 	.word	0x58000400

080086a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d071      	beq.n	800879e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fa faf8 	bl	8002cc4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80086dc:	4b32      	ldr	r3, [pc, #200]	@ (80087a8 <HAL_RTC_Init+0x100>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f003 0310 	and.w	r3, r3, #16
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	d051      	beq.n	800878c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086e8:	4b2f      	ldr	r3, [pc, #188]	@ (80087a8 <HAL_RTC_Init+0x100>)
 80086ea:	22ca      	movs	r2, #202	@ 0xca
 80086ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80086ee:	4b2e      	ldr	r3, [pc, #184]	@ (80087a8 <HAL_RTC_Init+0x100>)
 80086f0:	2253      	movs	r2, #83	@ 0x53
 80086f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fa11 	bl	8008b1c <RTC_EnterInitMode>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d13f      	bne.n	8008784 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008704:	4b28      	ldr	r3, [pc, #160]	@ (80087a8 <HAL_RTC_Init+0x100>)
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	4a27      	ldr	r2, [pc, #156]	@ (80087a8 <HAL_RTC_Init+0x100>)
 800870a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800870e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008712:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008714:	4b24      	ldr	r3, [pc, #144]	@ (80087a8 <HAL_RTC_Init+0x100>)
 8008716:	699a      	ldr	r2, [r3, #24]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6859      	ldr	r1, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	4319      	orrs	r1, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	430b      	orrs	r3, r1
 8008728:	491f      	ldr	r1, [pc, #124]	@ (80087a8 <HAL_RTC_Init+0x100>)
 800872a:	4313      	orrs	r3, r2
 800872c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	041b      	lsls	r3, r3, #16
 8008738:	491b      	ldr	r1, [pc, #108]	@ (80087a8 <HAL_RTC_Init+0x100>)
 800873a:	4313      	orrs	r3, r2
 800873c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800873e:	4b1a      	ldr	r3, [pc, #104]	@ (80087a8 <HAL_RTC_Init+0x100>)
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874e:	430b      	orrs	r3, r1
 8008750:	4915      	ldr	r1, [pc, #84]	@ (80087a8 <HAL_RTC_Init+0x100>)
 8008752:	4313      	orrs	r3, r2
 8008754:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fa14 	bl	8008b84 <RTC_ExitInitMode>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10e      	bne.n	8008784 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008766:	4b10      	ldr	r3, [pc, #64]	@ (80087a8 <HAL_RTC_Init+0x100>)
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a19      	ldr	r1, [r3, #32]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	4319      	orrs	r1, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	430b      	orrs	r3, r1
 800877e:	490a      	ldr	r1, [pc, #40]	@ (80087a8 <HAL_RTC_Init+0x100>)
 8008780:	4313      	orrs	r3, r2
 8008782:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008784:	4b08      	ldr	r3, [pc, #32]	@ (80087a8 <HAL_RTC_Init+0x100>)
 8008786:	22ff      	movs	r2, #255	@ 0xff
 8008788:	625a      	str	r2, [r3, #36]	@ 0x24
 800878a:	e001      	b.n	8008790 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	40002800 	.word	0x40002800

080087ac <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <HAL_RTC_SetAlarm_IT+0x1e>
 80087c6:	2302      	movs	r3, #2
 80087c8:	e0f3      	b.n	80089b2 <HAL_RTC_SetAlarm_IT+0x206>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2202      	movs	r2, #2
 80087d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80087da:	4b78      	ldr	r3, [pc, #480]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087e2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ea:	d06a      	beq.n	80088c2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d13a      	bne.n	8008868 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80087f2:	4b72      	ldr	r3, [pc, #456]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 f9f5 	bl	8008c00 <RTC_ByteToBcd2>
 8008816:	4603      	mov	r3, r0
 8008818:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 f9ee 	bl	8008c00 <RTC_ByteToBcd2>
 8008824:	4603      	mov	r3, r0
 8008826:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008828:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	789b      	ldrb	r3, [r3, #2]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f9e6 	bl	8008c00 <RTC_ByteToBcd2>
 8008834:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008836:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	78db      	ldrb	r3, [r3, #3]
 800883e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008840:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f9d8 	bl	8008c00 <RTC_ByteToBcd2>
 8008850:	4603      	mov	r3, r0
 8008852:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008854:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800885c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008862:	4313      	orrs	r3, r2
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	e02c      	b.n	80088c2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8008870:	d00d      	beq.n	800888e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800887a:	d008      	beq.n	800888e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800887c:	4b4f      	ldr	r3, [pc, #316]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	d102      	bne.n	800888e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800889a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80088a0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80088a8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80088b0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80088b2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80088b8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088c2:	4b3e      	ldr	r3, [pc, #248]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 80088c4:	22ca      	movs	r2, #202	@ 0xca
 80088c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80088c8:	4b3c      	ldr	r3, [pc, #240]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 80088ca:	2253      	movs	r2, #83	@ 0x53
 80088cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088d6:	d12c      	bne.n	8008932 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80088d8:	4b38      	ldr	r3, [pc, #224]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	4a37      	ldr	r2, [pc, #220]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 80088de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80088e2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80088e4:	4b35      	ldr	r3, [pc, #212]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f0:	d107      	bne.n	8008902 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	699a      	ldr	r2, [r3, #24]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	4930      	ldr	r1, [pc, #192]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	644b      	str	r3, [r1, #68]	@ 0x44
 8008900:	e006      	b.n	8008910 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008902:	4a2e      	ldr	r2, [pc, #184]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008908:	4a2c      	ldr	r2, [pc, #176]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008910:	4a2a      	ldr	r2, [pc, #168]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891c:	f043 0201 	orr.w	r2, r3, #1
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008924:	4b25      	ldr	r3, [pc, #148]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	4a24      	ldr	r2, [pc, #144]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 800892a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800892e:	6193      	str	r3, [r2, #24]
 8008930:	e02b      	b.n	800898a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008932:	4b22      	ldr	r3, [pc, #136]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	4a21      	ldr	r2, [pc, #132]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008938:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800893c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800893e:	4b1f      	ldr	r3, [pc, #124]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008940:	2202      	movs	r2, #2
 8008942:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800894a:	d107      	bne.n	800895c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	699a      	ldr	r2, [r3, #24]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	4919      	ldr	r1, [pc, #100]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008956:	4313      	orrs	r3, r2
 8008958:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800895a:	e006      	b.n	800896a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800895c:	4a17      	ldr	r2, [pc, #92]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008962:	4a16      	ldr	r2, [pc, #88]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800896a:	4a14      	ldr	r2, [pc, #80]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008976:	f043 0202 	orr.w	r2, r3, #2
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800897e:	4b0f      	ldr	r3, [pc, #60]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	4a0e      	ldr	r2, [pc, #56]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 8008984:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8008988:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800898a:	4b0d      	ldr	r3, [pc, #52]	@ (80089c0 <HAL_RTC_SetAlarm_IT+0x214>)
 800898c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008990:	4a0b      	ldr	r2, [pc, #44]	@ (80089c0 <HAL_RTC_SetAlarm_IT+0x214>)
 8008992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008996:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800899a:	4b08      	ldr	r3, [pc, #32]	@ (80089bc <HAL_RTC_SetAlarm_IT+0x210>)
 800899c:	22ff      	movs	r2, #255	@ 0xff
 800899e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd90      	pop	{r4, r7, pc}
 80089ba:	bf00      	nop
 80089bc:	40002800 	.word	0x40002800
 80089c0:	58000800 	.word	0x58000800

080089c4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <HAL_RTC_DeactivateAlarm+0x18>
 80089d8:	2302      	movs	r3, #2
 80089da:	e048      	b.n	8008a6e <HAL_RTC_DeactivateAlarm+0xaa>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089ec:	4b22      	ldr	r3, [pc, #136]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 80089ee:	22ca      	movs	r2, #202	@ 0xca
 80089f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80089f2:	4b21      	ldr	r3, [pc, #132]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 80089f4:	2253      	movs	r2, #83	@ 0x53
 80089f6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089fe:	d115      	bne.n	8008a2c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008a00:	4b1d      	ldr	r3, [pc, #116]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	4a1c      	ldr	r2, [pc, #112]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008a0a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a10:	4a19      	ldr	r2, [pc, #100]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a16:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1c:	f023 0201 	bic.w	r2, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008a24:	4b14      	ldr	r3, [pc, #80]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a2a:	e014      	b.n	8008a56 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008a2c:	4b12      	ldr	r3, [pc, #72]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	4a11      	ldr	r2, [pc, #68]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a32:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8008a36:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008a38:	4b0f      	ldr	r3, [pc, #60]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a42:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a48:	f023 0202 	bic.w	r2, r3, #2
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008a50:	4b09      	ldr	r3, [pc, #36]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a52:	2202      	movs	r2, #2
 8008a54:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a56:	4b08      	ldr	r3, [pc, #32]	@ (8008a78 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008a58:	22ff      	movs	r2, #255	@ 0xff
 8008a5a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr
 8008a78:	40002800 	.word	0x40002800

08008a7c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008a84:	4b11      	ldr	r3, [pc, #68]	@ (8008acc <HAL_RTC_AlarmIRQHandler+0x50>)
 8008a86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008acc <HAL_RTC_AlarmIRQHandler+0x50>)
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7fa fdfa 	bl	800369a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f003 0302 	and.w	r3, r3, #2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <HAL_RTC_AlarmIRQHandler+0x50>)
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f94a 	bl	8008d50 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	40002800 	.word	0x40002800

08008ad0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8008b18 <HAL_RTC_WaitForSynchro+0x48>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	4a0e      	ldr	r2, [pc, #56]	@ (8008b18 <HAL_RTC_WaitForSynchro+0x48>)
 8008ade:	f023 0320 	bic.w	r3, r3, #32
 8008ae2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008ae4:	f7fa fba4 	bl	8003230 <HAL_GetTick>
 8008ae8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008aea:	e009      	b.n	8008b00 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008aec:	f7fa fba0 	bl	8003230 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008afa:	d901      	bls.n	8008b00 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e006      	b.n	8008b0e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008b00:	4b05      	ldr	r3, [pc, #20]	@ (8008b18 <HAL_RTC_WaitForSynchro+0x48>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d0ef      	beq.n	8008aec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	40002800 	.word	0x40002800

08008b1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008b28:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <RTC_EnterInitMode+0x64>)
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d120      	bne.n	8008b76 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008b34:	4b12      	ldr	r3, [pc, #72]	@ (8008b80 <RTC_EnterInitMode+0x64>)
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <RTC_EnterInitMode+0x64>)
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b3e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008b40:	f7fa fb76 	bl	8003230 <HAL_GetTick>
 8008b44:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008b46:	e00d      	b.n	8008b64 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008b48:	f7fa fb72 	bl	8003230 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b56:	d905      	bls.n	8008b64 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2203      	movs	r2, #3
 8008b60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008b64:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <RTC_EnterInitMode+0x64>)
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <RTC_EnterInitMode+0x5a>
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d1e8      	bne.n	8008b48 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	40002800 	.word	0x40002800

08008b84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008b90:	4b1a      	ldr	r3, [pc, #104]	@ (8008bfc <RTC_ExitInitMode+0x78>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	4a19      	ldr	r2, [pc, #100]	@ (8008bfc <RTC_ExitInitMode+0x78>)
 8008b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b9a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008b9c:	4b17      	ldr	r3, [pc, #92]	@ (8008bfc <RTC_ExitInitMode+0x78>)
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10c      	bne.n	8008bc2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff ff91 	bl	8008ad0 <HAL_RTC_WaitForSynchro>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d01e      	beq.n	8008bf2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	73fb      	strb	r3, [r7, #15]
 8008bc0:	e017      	b.n	8008bf2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008bfc <RTC_ExitInitMode+0x78>)
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8008bfc <RTC_ExitInitMode+0x78>)
 8008bc8:	f023 0320 	bic.w	r3, r3, #32
 8008bcc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff ff7e 	bl	8008ad0 <HAL_RTC_WaitForSynchro>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2203      	movs	r2, #3
 8008bde:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008be6:	4b05      	ldr	r3, [pc, #20]	@ (8008bfc <RTC_ExitInitMode+0x78>)
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	4a04      	ldr	r2, [pc, #16]	@ (8008bfc <RTC_ExitInitMode+0x78>)
 8008bec:	f043 0320 	orr.w	r3, r3, #32
 8008bf0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	40002800 	.word	0x40002800

08008c00 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008c12:	e005      	b.n	8008c20 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008c1a:	7afb      	ldrb	r3, [r7, #11]
 8008c1c:	3b0a      	subs	r3, #10
 8008c1e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	2b09      	cmp	r3, #9
 8008c24:	d8f6      	bhi.n	8008c14 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	b2db      	uxtb	r3, r3
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr
	...

08008c40 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e01f      	b.n	8008c96 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c66:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008c68:	22ca      	movs	r2, #202	@ 0xca
 8008c6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008c6e:	2253      	movs	r2, #83	@ 0x53
 8008c70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008c72:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008c78:	f043 0320 	orr.w	r3, r3, #32
 8008c7c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c7e:	4b08      	ldr	r3, [pc, #32]	@ (8008ca0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008c80:	22ff      	movs	r2, #255	@ 0xff
 8008c82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bc80      	pop	{r7}
 8008c9e:	4770      	bx	lr
 8008ca0:	40002800 	.word	0x40002800

08008ca4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_RTCEx_SetSSRU_IT+0x16>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e027      	b.n	8008d0a <HAL_RTCEx_SetSSRU_IT+0x66>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cca:	4b12      	ldr	r3, [pc, #72]	@ (8008d14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008ccc:	22ca      	movs	r2, #202	@ 0xca
 8008cce:	625a      	str	r2, [r3, #36]	@ 0x24
 8008cd0:	4b10      	ldr	r3, [pc, #64]	@ (8008d14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008cd2:	2253      	movs	r2, #83	@ 0x53
 8008cd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	4a0e      	ldr	r2, [pc, #56]	@ (8008d14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8008d18 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008cea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008cee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cf2:	4b08      	ldr	r3, [pc, #32]	@ (8008d14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008cf4:	22ff      	movs	r2, #255	@ 0xff
 8008cf6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bc80      	pop	{r7}
 8008d12:	4770      	bx	lr
 8008d14:	40002800 	.word	0x40002800
 8008d18:	58000800 	.word	0x58000800

08008d1c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008d24:	4b09      	ldr	r3, [pc, #36]	@ (8008d4c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008d30:	4b06      	ldr	r3, [pc, #24]	@ (8008d4c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008d32:	2240      	movs	r2, #64	@ 0x40
 8008d34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7fa fcb9 	bl	80036ae <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	40002800 	.word	0x40002800

08008d50 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr
	...

08008d64 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008d70:	4b07      	ldr	r3, [pc, #28]	@ (8008d90 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008d72:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
}
 8008d84:	bf00      	nop
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bc80      	pop	{r7}
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	4000b100 	.word	0x4000b100

08008d94 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008d9e:	4b07      	ldr	r3, [pc, #28]	@ (8008dbc <HAL_RTCEx_BKUPRead+0x28>)
 8008da0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	4000b100 	.word	0x4000b100

08008dc0 <LL_PWR_SetRadioBusyTrigger>:
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008dc8:	4b06      	ldr	r3, [pc, #24]	@ (8008de4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008dd0:	4904      	ldr	r1, [pc, #16]	@ (8008de4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	608b      	str	r3, [r1, #8]
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	58000400 	.word	0x58000400

08008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008dec:	4b05      	ldr	r3, [pc, #20]	@ (8008e04 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df2:	4a04      	ldr	r2, [pc, #16]	@ (8008e04 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008dfc:	bf00      	nop
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr
 8008e04:	58000400 	.word	0x58000400

08008e08 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008e08:	b480      	push	{r7}
 8008e0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008e0c:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e12:	4a04      	ldr	r2, [pc, #16]	@ (8008e24 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008e14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008e1c:	bf00      	nop
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr
 8008e24:	58000400 	.word	0x58000400

08008e28 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008e2c:	4b03      	ldr	r3, [pc, #12]	@ (8008e3c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008e2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e32:	619a      	str	r2, [r3, #24]
}
 8008e34:	bf00      	nop
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr
 8008e3c:	58000400 	.word	0x58000400

08008e40 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8008e40:	b480      	push	{r7}
 8008e42:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008e44:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d101      	bne.n	8008e54 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e000      	b.n	8008e56 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	58000400 	.word	0x58000400

08008e64 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008e68:	4b06      	ldr	r3, [pc, #24]	@ (8008e84 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d101      	bne.n	8008e78 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008e74:	2301      	movs	r3, #1
 8008e76:	e000      	b.n	8008e7a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	58000400 	.word	0x58000400

08008e88 <LL_RCC_RF_DisableReset>:
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008ea0:	bf00      	nop
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bc80      	pop	{r7}
 8008ea6:	4770      	bx	lr

08008ea8 <LL_RCC_IsRFUnderReset>:
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ebc:	d101      	bne.n	8008ec2 <LL_RCC_IsRFUnderReset+0x1a>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e000      	b.n	8008ec4 <LL_RCC_IsRFUnderReset+0x1c>
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr

08008ecc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008ed4:	4b06      	ldr	r3, [pc, #24]	@ (8008ef0 <LL_EXTI_EnableIT_32_63+0x24>)
 8008ed6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008eda:	4905      	ldr	r1, [pc, #20]	@ (8008ef0 <LL_EXTI_EnableIT_32_63+0x24>)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	58000800 	.word	0x58000800

08008ef4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
    return status;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	e052      	b.n	8008fb0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	799b      	ldrb	r3, [r3, #6]
 8008f12:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <HAL_SUBGHZ_Init+0x2c>
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d109      	bne.n	8008f34 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f9 ffda 	bl	8002ee0 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008f2c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008f30:	f7ff ffcc 	bl	8008ecc <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d126      	bne.n	8008f88 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8008f40:	f7ff ffa2 	bl	8008e88 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f44:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb8 <HAL_SUBGHZ_Init+0xc4>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	1a9b      	subs	r3, r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	0cdb      	lsrs	r3, r3, #19
 8008f52:	2264      	movs	r2, #100	@ 0x64
 8008f54:	fb02 f303 	mul.w	r3, r2, r3
 8008f58:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d105      	bne.n	8008f6c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	609a      	str	r2, [r3, #8]
        break;
 8008f6a:	e007      	b.n	8008f7c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8008f72:	f7ff ff99 	bl	8008ea8 <LL_RCC_IsRFUnderReset>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1ee      	bne.n	8008f5a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008f7c:	f7ff ff34 	bl	8008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8008f80:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008f84:	f7ff ff1c 	bl	8008dc0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008f88:	f7ff ff4e 	bl	8008e28 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fab0 	bl	80094fc <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	719a      	strb	r2, [r3, #6]

  return status;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000000 	.word	0x20000000

08008fbc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	460b      	mov	r3, r1
 8008fca:	817b      	strh	r3, [r7, #10]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	799b      	ldrb	r3, [r3, #6]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d14a      	bne.n	8009070 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	795b      	ldrb	r3, [r3, #5]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d101      	bne.n	8008fe6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	e045      	b.n	8009072 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2202      	movs	r2, #2
 8008ff0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fb50 	bl	8009698 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008ff8:	f7ff ff06 	bl	8008e08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008ffc:	210d      	movs	r1, #13
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f000 fa9c 	bl	800953c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009004:	897b      	ldrh	r3, [r7, #10]
 8009006:	0a1b      	lsrs	r3, r3, #8
 8009008:	b29b      	uxth	r3, r3
 800900a:	b2db      	uxtb	r3, r3
 800900c:	4619      	mov	r1, r3
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 fa94 	bl	800953c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009014:	897b      	ldrh	r3, [r7, #10]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	4619      	mov	r1, r3
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 fa8e 	bl	800953c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009020:	2300      	movs	r3, #0
 8009022:	82bb      	strh	r3, [r7, #20]
 8009024:	e00a      	b.n	800903c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009026:	8abb      	ldrh	r3, [r7, #20]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	4413      	add	r3, r2
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	4619      	mov	r1, r3
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fa83 	bl	800953c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009036:	8abb      	ldrh	r3, [r7, #20]
 8009038:	3301      	adds	r3, #1
 800903a:	82bb      	strh	r3, [r7, #20]
 800903c:	8aba      	ldrh	r2, [r7, #20]
 800903e:	893b      	ldrh	r3, [r7, #8]
 8009040:	429a      	cmp	r2, r3
 8009042:	d3f0      	bcc.n	8009026 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009044:	f7ff fed0 	bl	8008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 fb49 	bl	80096e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	75fb      	strb	r3, [r7, #23]
 800905a:	e001      	b.n	8009060 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	715a      	strb	r2, [r3, #5]

    return status;
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	e000      	b.n	8009072 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009070:	2302      	movs	r3, #2
  }
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	461a      	mov	r2, r3
 8009086:	460b      	mov	r3, r1
 8009088:	817b      	strh	r3, [r7, #10]
 800908a:	4613      	mov	r3, r2
 800908c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	799b      	ldrb	r3, [r3, #6]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b01      	cmp	r3, #1
 800909a:	d14a      	bne.n	8009132 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	795b      	ldrb	r3, [r3, #5]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d101      	bne.n	80090a8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80090a4:	2302      	movs	r3, #2
 80090a6:	e045      	b.n	8009134 <HAL_SUBGHZ_ReadRegisters+0xba>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 faf2 	bl	8009698 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80090b4:	f7ff fea8 	bl	8008e08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80090b8:	211d      	movs	r1, #29
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fa3e 	bl	800953c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80090c0:	897b      	ldrh	r3, [r7, #10]
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	4619      	mov	r1, r3
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 fa36 	bl	800953c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80090d0:	897b      	ldrh	r3, [r7, #10]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	4619      	mov	r1, r3
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 fa30 	bl	800953c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80090dc:	2100      	movs	r1, #0
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 fa2c 	bl	800953c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80090e4:	2300      	movs	r3, #0
 80090e6:	82fb      	strh	r3, [r7, #22]
 80090e8:	e009      	b.n	80090fe <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80090ea:	69b9      	ldr	r1, [r7, #24]
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 fa7b 	bl	80095e8 <SUBGHZSPI_Receive>
      pData++;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	3301      	adds	r3, #1
 80090f6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80090f8:	8afb      	ldrh	r3, [r7, #22]
 80090fa:	3301      	adds	r3, #1
 80090fc:	82fb      	strh	r3, [r7, #22]
 80090fe:	8afa      	ldrh	r2, [r7, #22]
 8009100:	893b      	ldrh	r3, [r7, #8]
 8009102:	429a      	cmp	r2, r3
 8009104:	d3f1      	bcc.n	80090ea <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009106:	f7ff fe6f 	bl	8008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 fae8 	bl	80096e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	77fb      	strb	r3, [r7, #31]
 800911c:	e001      	b.n	8009122 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	715a      	strb	r2, [r3, #5]

    return status;
 800912e:	7ffb      	ldrb	r3, [r7, #31]
 8009130:	e000      	b.n	8009134 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009132:	2302      	movs	r3, #2
  }
}
 8009134:	4618      	mov	r0, r3
 8009136:	3720      	adds	r7, #32
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	607a      	str	r2, [r7, #4]
 8009146:	461a      	mov	r2, r3
 8009148:	460b      	mov	r3, r1
 800914a:	72fb      	strb	r3, [r7, #11]
 800914c:	4613      	mov	r3, r2
 800914e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	799b      	ldrb	r3, [r3, #6]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b01      	cmp	r3, #1
 8009158:	d14a      	bne.n	80091f0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	795b      	ldrb	r3, [r3, #5]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009162:	2302      	movs	r3, #2
 8009164:	e045      	b.n	80091f2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2201      	movs	r2, #1
 800916a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fa93 	bl	8009698 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009172:	7afb      	ldrb	r3, [r7, #11]
 8009174:	2b84      	cmp	r3, #132	@ 0x84
 8009176:	d002      	beq.n	800917e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	2b94      	cmp	r3, #148	@ 0x94
 800917c:	d103      	bne.n	8009186 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2201      	movs	r2, #1
 8009182:	711a      	strb	r2, [r3, #4]
 8009184:	e002      	b.n	800918c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800918c:	f7ff fe3c 	bl	8008e08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009190:	7afb      	ldrb	r3, [r7, #11]
 8009192:	4619      	mov	r1, r3
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f9d1 	bl	800953c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800919a:	2300      	movs	r3, #0
 800919c:	82bb      	strh	r3, [r7, #20]
 800919e:	e00a      	b.n	80091b6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80091a0:	8abb      	ldrh	r3, [r7, #20]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	4619      	mov	r1, r3
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 f9c6 	bl	800953c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80091b0:	8abb      	ldrh	r3, [r7, #20]
 80091b2:	3301      	adds	r3, #1
 80091b4:	82bb      	strh	r3, [r7, #20]
 80091b6:	8aba      	ldrh	r2, [r7, #20]
 80091b8:	893b      	ldrh	r3, [r7, #8]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d3f0      	bcc.n	80091a0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80091be:	f7ff fe13 	bl	8008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80091c2:	7afb      	ldrb	r3, [r7, #11]
 80091c4:	2b84      	cmp	r3, #132	@ 0x84
 80091c6:	d002      	beq.n	80091ce <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fa89 	bl	80096e0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
 80091da:	e001      	b.n	80091e0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	715a      	strb	r2, [r3, #5]

    return status;
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	e000      	b.n	80091f2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80091f0:	2302      	movs	r3, #2
  }
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b088      	sub	sp, #32
 80091fe:	af00      	add	r7, sp, #0
 8009200:	60f8      	str	r0, [r7, #12]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	461a      	mov	r2, r3
 8009206:	460b      	mov	r3, r1
 8009208:	72fb      	strb	r3, [r7, #11]
 800920a:	4613      	mov	r3, r2
 800920c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	799b      	ldrb	r3, [r3, #6]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b01      	cmp	r3, #1
 800921a:	d13d      	bne.n	8009298 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	795b      	ldrb	r3, [r3, #5]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009224:	2302      	movs	r3, #2
 8009226:	e038      	b.n	800929a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 fa32 	bl	8009698 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009234:	f7ff fde8 	bl	8008e08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	4619      	mov	r1, r3
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f97d 	bl	800953c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009242:	2100      	movs	r1, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f979 	bl	800953c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800924a:	2300      	movs	r3, #0
 800924c:	82fb      	strh	r3, [r7, #22]
 800924e:	e009      	b.n	8009264 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009250:	69b9      	ldr	r1, [r7, #24]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 f9c8 	bl	80095e8 <SUBGHZSPI_Receive>
      pData++;
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	3301      	adds	r3, #1
 800925c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800925e:	8afb      	ldrh	r3, [r7, #22]
 8009260:	3301      	adds	r3, #1
 8009262:	82fb      	strh	r3, [r7, #22]
 8009264:	8afa      	ldrh	r2, [r7, #22]
 8009266:	893b      	ldrh	r3, [r7, #8]
 8009268:	429a      	cmp	r2, r3
 800926a:	d3f1      	bcc.n	8009250 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800926c:	f7ff fdbc 	bl	8008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 fa35 	bl	80096e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d002      	beq.n	8009284 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	77fb      	strb	r3, [r7, #31]
 8009282:	e001      	b.n	8009288 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2201      	movs	r2, #1
 800928c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	715a      	strb	r2, [r3, #5]

    return status;
 8009294:	7ffb      	ldrb	r3, [r7, #31]
 8009296:	e000      	b.n	800929a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009298:	2302      	movs	r3, #2
  }
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	461a      	mov	r2, r3
 80092ae:	460b      	mov	r3, r1
 80092b0:	72fb      	strb	r3, [r7, #11]
 80092b2:	4613      	mov	r3, r2
 80092b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	799b      	ldrb	r3, [r3, #6]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d13e      	bne.n	800933e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	795b      	ldrb	r3, [r3, #5]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e039      	b.n	8009340 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 f9e0 	bl	8009698 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80092d8:	f7ff fd96 	bl	8008e08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80092dc:	210e      	movs	r1, #14
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f92c 	bl	800953c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80092e4:	7afb      	ldrb	r3, [r7, #11]
 80092e6:	4619      	mov	r1, r3
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f927 	bl	800953c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80092ee:	2300      	movs	r3, #0
 80092f0:	82bb      	strh	r3, [r7, #20]
 80092f2:	e00a      	b.n	800930a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80092f4:	8abb      	ldrh	r3, [r7, #20]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	4413      	add	r3, r2
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	4619      	mov	r1, r3
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 f91c 	bl	800953c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009304:	8abb      	ldrh	r3, [r7, #20]
 8009306:	3301      	adds	r3, #1
 8009308:	82bb      	strh	r3, [r7, #20]
 800930a:	8aba      	ldrh	r2, [r7, #20]
 800930c:	893b      	ldrh	r3, [r7, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	d3f0      	bcc.n	80092f4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009312:	f7ff fd69 	bl	8008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 f9e2 	bl	80096e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	75fb      	strb	r3, [r7, #23]
 8009328:	e001      	b.n	800932e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	715a      	strb	r2, [r3, #5]

    return status;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	e000      	b.n	8009340 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800933e:	2302      	movs	r3, #2
  }
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	607a      	str	r2, [r7, #4]
 8009352:	461a      	mov	r2, r3
 8009354:	460b      	mov	r3, r1
 8009356:	72fb      	strb	r3, [r7, #11]
 8009358:	4613      	mov	r3, r2
 800935a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	799b      	ldrb	r3, [r3, #6]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b01      	cmp	r3, #1
 8009368:	d141      	bne.n	80093ee <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	795b      	ldrb	r3, [r3, #5]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d101      	bne.n	8009376 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8009372:	2302      	movs	r3, #2
 8009374:	e03c      	b.n	80093f0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2201      	movs	r2, #1
 800937a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f98b 	bl	8009698 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009382:	f7ff fd41 	bl	8008e08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8009386:	211e      	movs	r1, #30
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 f8d7 	bl	800953c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	4619      	mov	r1, r3
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 f8d2 	bl	800953c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009398:	2100      	movs	r1, #0
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 f8ce 	bl	800953c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80093a0:	2300      	movs	r3, #0
 80093a2:	82fb      	strh	r3, [r7, #22]
 80093a4:	e009      	b.n	80093ba <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80093a6:	69b9      	ldr	r1, [r7, #24]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f91d 	bl	80095e8 <SUBGHZSPI_Receive>
      pData++;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	3301      	adds	r3, #1
 80093b2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80093b4:	8afb      	ldrh	r3, [r7, #22]
 80093b6:	3301      	adds	r3, #1
 80093b8:	82fb      	strh	r3, [r7, #22]
 80093ba:	8afa      	ldrh	r2, [r7, #22]
 80093bc:	893b      	ldrh	r3, [r7, #8]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d3f1      	bcc.n	80093a6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80093c2:	f7ff fd11 	bl	8008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 f98a 	bl	80096e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	77fb      	strb	r3, [r7, #31]
 80093d8:	e001      	b.n	80093de <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2201      	movs	r2, #1
 80093e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	715a      	strb	r2, [r3, #5]

    return status;
 80093ea:	7ffb      	ldrb	r3, [r7, #31]
 80093ec:	e000      	b.n	80093f0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80093ee:	2302      	movs	r3, #2
  }
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8009400:	2300      	movs	r3, #0
 8009402:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009404:	f107 020c 	add.w	r2, r7, #12
 8009408:	2302      	movs	r3, #2
 800940a:	2112      	movs	r1, #18
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff fef4 	bl	80091fa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8009412:	7b3b      	ldrb	r3, [r7, #12]
 8009414:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8009416:	89fb      	ldrh	r3, [r7, #14]
 8009418:	021b      	lsls	r3, r3, #8
 800941a:	b21a      	sxth	r2, r3
 800941c:	7b7b      	ldrb	r3, [r7, #13]
 800941e:	b21b      	sxth	r3, r3
 8009420:	4313      	orrs	r3, r2
 8009422:	b21b      	sxth	r3, r3
 8009424:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8009426:	f107 020c 	add.w	r2, r7, #12
 800942a:	2302      	movs	r3, #2
 800942c:	2102      	movs	r1, #2
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff fe84 	bl	800913c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009434:	89fb      	ldrh	r3, [r7, #14]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f012 ffbe 	bl	801c3c0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8009444:	89fb      	ldrh	r3, [r7, #14]
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 800944e:	89fb      	ldrh	r3, [r7, #14]
 8009450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8009454:	2b00      	cmp	r3, #0
 8009456:	d102      	bne.n	800945e <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f012 ffbf 	bl	801c3dc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800945e:	89fb      	ldrh	r3, [r7, #14]
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f013 f80f 	bl	801c48c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800946e:	89fb      	ldrh	r3, [r7, #14]
 8009470:	f003 0308 	and.w	r3, r3, #8
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f013 f815 	bl	801c4a8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800947e:	89fb      	ldrh	r3, [r7, #14]
 8009480:	f003 0310 	and.w	r3, r3, #16
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f013 f81b 	bl	801c4c4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800948e:	89fb      	ldrh	r3, [r7, #14]
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f012 ffe9 	bl	801c470 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800949e:	89fb      	ldrh	r3, [r7, #14]
 80094a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f012 ffa5 	bl	801c3f8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80094ae:	89fb      	ldrh	r3, [r7, #14]
 80094b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00d      	beq.n	80094d4 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80094b8:	89fb      	ldrh	r3, [r7, #14]
 80094ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80094c2:	2101      	movs	r1, #1
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f012 ffa5 	bl	801c414 <HAL_SUBGHZ_CADStatusCallback>
 80094ca:	e003      	b.n	80094d4 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80094cc:	2100      	movs	r1, #0
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f012 ffa0 	bl	801c414 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80094d4:	89fb      	ldrh	r3, [r7, #14]
 80094d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d002      	beq.n	80094e4 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f012 ffb6 	bl	801c450 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80094e4:	89fb      	ldrh	r3, [r7, #14]
 80094e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f012 fff6 	bl	801c4e0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80094f4:	bf00      	nop
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009504:	4b0c      	ldr	r3, [pc, #48]	@ (8009538 <SUBGHZSPI_Init+0x3c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a0b      	ldr	r2, [pc, #44]	@ (8009538 <SUBGHZSPI_Init+0x3c>)
 800950a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800950e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8009510:	4a09      	ldr	r2, [pc, #36]	@ (8009538 <SUBGHZSPI_Init+0x3c>)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8009518:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800951a:	4b07      	ldr	r3, [pc, #28]	@ (8009538 <SUBGHZSPI_Init+0x3c>)
 800951c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8009520:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009522:	4b05      	ldr	r3, [pc, #20]	@ (8009538 <SUBGHZSPI_Init+0x3c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a04      	ldr	r2, [pc, #16]	@ (8009538 <SUBGHZSPI_Init+0x3c>)
 8009528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800952c:	6013      	str	r3, [r2, #0]
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	bc80      	pop	{r7}
 8009536:	4770      	bx	lr
 8009538:	58010000 	.word	0x58010000

0800953c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800954c:	4b23      	ldr	r3, [pc, #140]	@ (80095dc <SUBGHZSPI_Transmit+0xa0>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	4613      	mov	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	0cdb      	lsrs	r3, r3, #19
 800955a:	2264      	movs	r2, #100	@ 0x64
 800955c:	fb02 f303 	mul.w	r3, r2, r3
 8009560:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d105      	bne.n	8009574 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	609a      	str	r2, [r3, #8]
      break;
 8009572:	e008      	b.n	8009586 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3b01      	subs	r3, #1
 8009578:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800957a:	4b19      	ldr	r3, [pc, #100]	@ (80095e0 <SUBGHZSPI_Transmit+0xa4>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f003 0302 	and.w	r3, r3, #2
 8009582:	2b02      	cmp	r3, #2
 8009584:	d1ed      	bne.n	8009562 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009586:	4b17      	ldr	r3, [pc, #92]	@ (80095e4 <SUBGHZSPI_Transmit+0xa8>)
 8009588:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009590:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <SUBGHZSPI_Transmit+0xa0>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	4613      	mov	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	1a9b      	subs	r3, r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	0cdb      	lsrs	r3, r3, #19
 800959e:	2264      	movs	r2, #100	@ 0x64
 80095a0:	fb02 f303 	mul.w	r3, r2, r3
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d105      	bne.n	80095b8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	609a      	str	r2, [r3, #8]
      break;
 80095b6:	e008      	b.n	80095ca <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80095be:	4b08      	ldr	r3, [pc, #32]	@ (80095e0 <SUBGHZSPI_Transmit+0xa4>)
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d1ed      	bne.n	80095a6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80095ca:	4b05      	ldr	r3, [pc, #20]	@ (80095e0 <SUBGHZSPI_Transmit+0xa4>)
 80095cc:	68db      	ldr	r3, [r3, #12]

  return status;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	371c      	adds	r7, #28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	20000000 	.word	0x20000000
 80095e0:	58010000 	.word	0x58010000
 80095e4:	5801000c 	.word	0x5801000c

080095e8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80095f6:	4b25      	ldr	r3, [pc, #148]	@ (800968c <SUBGHZSPI_Receive+0xa4>)
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	4613      	mov	r3, r2
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	0cdb      	lsrs	r3, r3, #19
 8009604:	2264      	movs	r2, #100	@ 0x64
 8009606:	fb02 f303 	mul.w	r3, r2, r3
 800960a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d105      	bne.n	800961e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	609a      	str	r2, [r3, #8]
      break;
 800961c:	e008      	b.n	8009630 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3b01      	subs	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009624:	4b1a      	ldr	r3, [pc, #104]	@ (8009690 <SUBGHZSPI_Receive+0xa8>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f003 0302 	and.w	r3, r3, #2
 800962c:	2b02      	cmp	r3, #2
 800962e:	d1ed      	bne.n	800960c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009630:	4b18      	ldr	r3, [pc, #96]	@ (8009694 <SUBGHZSPI_Receive+0xac>)
 8009632:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	22ff      	movs	r2, #255	@ 0xff
 8009638:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800963a:	4b14      	ldr	r3, [pc, #80]	@ (800968c <SUBGHZSPI_Receive+0xa4>)
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4613      	mov	r3, r2
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	0cdb      	lsrs	r3, r3, #19
 8009648:	2264      	movs	r2, #100	@ 0x64
 800964a:	fb02 f303 	mul.w	r3, r2, r3
 800964e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d105      	bne.n	8009662 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	609a      	str	r2, [r3, #8]
      break;
 8009660:	e008      	b.n	8009674 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3b01      	subs	r3, #1
 8009666:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009668:	4b09      	ldr	r3, [pc, #36]	@ (8009690 <SUBGHZSPI_Receive+0xa8>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b01      	cmp	r3, #1
 8009672:	d1ed      	bne.n	8009650 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009674:	4b06      	ldr	r3, [pc, #24]	@ (8009690 <SUBGHZSPI_Receive+0xa8>)
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	b2da      	uxtb	r2, r3
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	701a      	strb	r2, [r3, #0]

  return status;
 800967e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009680:	4618      	mov	r0, r3
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20000000 	.word	0x20000000
 8009690:	58010000 	.word	0x58010000
 8009694:	5801000c 	.word	0x5801000c

08009698 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	791b      	ldrb	r3, [r3, #4]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d111      	bne.n	80096cc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80096a8:	4b0c      	ldr	r3, [pc, #48]	@ (80096dc <SUBGHZ_CheckDeviceReady+0x44>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	4613      	mov	r3, r2
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	4413      	add	r3, r2
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	0c1b      	lsrs	r3, r3, #16
 80096b6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80096b8:	f7ff fba6 	bl	8008e08 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3b01      	subs	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f9      	bne.n	80096bc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80096c8:	f7ff fb8e 	bl	8008de8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f807 	bl	80096e0 <SUBGHZ_WaitOnBusy>
 80096d2:	4603      	mov	r3, r0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20000000 	.word	0x20000000

080096e0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80096ec:	4b12      	ldr	r3, [pc, #72]	@ (8009738 <SUBGHZ_WaitOnBusy+0x58>)
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	4613      	mov	r3, r2
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	4413      	add	r3, r2
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	0d1b      	lsrs	r3, r3, #20
 80096fa:	2264      	movs	r2, #100	@ 0x64
 80096fc:	fb02 f303 	mul.w	r3, r2, r3
 8009700:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009702:	f7ff fbaf 	bl	8008e64 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009706:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d105      	bne.n	800971a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	609a      	str	r2, [r3, #8]
      break;
 8009718:	e009      	b.n	800972e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3b01      	subs	r3, #1
 800971e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009720:	f7ff fb8e 	bl	8008e40 <LL_PWR_IsActiveFlag_RFBUSYS>
 8009724:	4602      	mov	r2, r0
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	4013      	ands	r3, r2
 800972a:	2b01      	cmp	r3, #1
 800972c:	d0e9      	beq.n	8009702 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800972e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20000000 	.word	0x20000000

0800973c <LL_RCC_GetUSARTClockSource>:
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009748:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	401a      	ands	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	041b      	lsls	r3, r3, #16
 8009754:	4313      	orrs	r3, r2
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	bc80      	pop	{r7}
 800975e:	4770      	bx	lr

08009760 <LL_RCC_GetLPUARTClockSource>:
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800976c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4013      	ands	r3, r2
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bc80      	pop	{r7}
 800977c:	4770      	bx	lr

0800977e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e042      	b.n	8009816 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7fa f8e8 	bl	8003978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2224      	movs	r2, #36	@ 0x24
 80097ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0201 	bic.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 feab 	bl	800a524 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fc34 	bl	800a03c <UART_SetConfig>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e01b      	b.n	8009816 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0201 	orr.w	r2, r2, #1
 800980c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 ff29 	bl	800a666 <UART_CheckIdleState>
 8009814:	4603      	mov	r3, r0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08a      	sub	sp, #40	@ 0x28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009834:	2b20      	cmp	r3, #32
 8009836:	d137      	bne.n	80098a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <HAL_UART_Receive_IT+0x24>
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e030      	b.n	80098aa <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a18      	ldr	r2, [pc, #96]	@ (80098b4 <HAL_UART_Receive_IT+0x94>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d01f      	beq.n	8009898 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d018      	beq.n	8009898 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	613b      	str	r3, [r7, #16]
   return(result);
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800987a:	627b      	str	r3, [r7, #36]	@ 0x24
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009884:	623b      	str	r3, [r7, #32]
 8009886:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	69f9      	ldr	r1, [r7, #28]
 800988a:	6a3a      	ldr	r2, [r7, #32]
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	61bb      	str	r3, [r7, #24]
   return(result);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e6      	bne.n	8009866 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009898:	88fb      	ldrh	r3, [r7, #6]
 800989a:	461a      	mov	r2, r3
 800989c:	68b9      	ldr	r1, [r7, #8]
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 fffe 	bl	800a8a0 <UART_Start_Receive_IT>
 80098a4:	4603      	mov	r3, r0
 80098a6:	e000      	b.n	80098aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80098a8:	2302      	movs	r3, #2
  }
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3728      	adds	r7, #40	@ 0x28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	40008000 	.word	0x40008000

080098b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	@ 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	4613      	mov	r3, r2
 80098c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098cc:	2b20      	cmp	r3, #32
 80098ce:	d167      	bne.n	80099a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <HAL_UART_Transmit_DMA+0x24>
 80098d6:	88fb      	ldrh	r3, [r7, #6]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e060      	b.n	80099a2 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	88fa      	ldrh	r2, [r7, #6]
 80098ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	88fa      	ldrh	r2, [r7, #6]
 80098f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2221      	movs	r2, #33	@ 0x21
 8009902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d028      	beq.n	8009960 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009912:	4a26      	ldr	r2, [pc, #152]	@ (80099ac <HAL_UART_Transmit_DMA+0xf4>)
 8009914:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800991a:	4a25      	ldr	r2, [pc, #148]	@ (80099b0 <HAL_UART_Transmit_DMA+0xf8>)
 800991c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009922:	4a24      	ldr	r2, [pc, #144]	@ (80099b4 <HAL_UART_Transmit_DMA+0xfc>)
 8009924:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800992a:	2200      	movs	r2, #0
 800992c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009936:	4619      	mov	r1, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3328      	adds	r3, #40	@ 0x28
 800993e:	461a      	mov	r2, r3
 8009940:	88fb      	ldrh	r3, [r7, #6]
 8009942:	f7fb fde5 	bl	8005510 <HAL_DMA_Start_IT>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d009      	beq.n	8009960 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2210      	movs	r2, #16
 8009950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e020      	b.n	80099a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2240      	movs	r2, #64	@ 0x40
 8009966:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3308      	adds	r3, #8
 800996e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	e853 3f00 	ldrex	r3, [r3]
 8009976:	613b      	str	r3, [r7, #16]
   return(result);
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009988:	623a      	str	r2, [r7, #32]
 800998a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	69f9      	ldr	r1, [r7, #28]
 800998e:	6a3a      	ldr	r2, [r7, #32]
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	61bb      	str	r3, [r7, #24]
   return(result);
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e5      	bne.n	8009968 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	e000      	b.n	80099a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80099a0:	2302      	movs	r3, #2
  }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3728      	adds	r7, #40	@ 0x28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	0800ac2b 	.word	0x0800ac2b
 80099b0:	0800acc5 	.word	0x0800acc5
 80099b4:	0800ace1 	.word	0x0800ace1

080099b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b0ba      	sub	sp, #232	@ 0xe8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80099e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80099e6:	4013      	ands	r3, r2
 80099e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80099ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d11b      	bne.n	8009a2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f8:	f003 0320 	and.w	r3, r3, #32
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d015      	beq.n	8009a2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d105      	bne.n	8009a18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d009      	beq.n	8009a2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 82e3 	beq.w	8009fe8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	4798      	blx	r3
      }
      return;
 8009a2a:	e2dd      	b.n	8009fe8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8123 	beq.w	8009c7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8009c70 <HAL_UART_IRQHandler+0x2b8>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d106      	bne.n	8009a50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009a46:	4b8b      	ldr	r3, [pc, #556]	@ (8009c74 <HAL_UART_IRQHandler+0x2bc>)
 8009a48:	4013      	ands	r3, r2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 8116 	beq.w	8009c7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d011      	beq.n	8009a80 <HAL_UART_IRQHandler+0xc8>
 8009a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00b      	beq.n	8009a80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a76:	f043 0201 	orr.w	r2, r3, #1
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d011      	beq.n	8009ab0 <HAL_UART_IRQHandler+0xf8>
 8009a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa6:	f043 0204 	orr.w	r2, r3, #4
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d011      	beq.n	8009ae0 <HAL_UART_IRQHandler+0x128>
 8009abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00b      	beq.n	8009ae0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2204      	movs	r2, #4
 8009ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad6:	f043 0202 	orr.w	r2, r3, #2
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ae4:	f003 0308 	and.w	r3, r3, #8
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d017      	beq.n	8009b1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009af0:	f003 0320 	and.w	r3, r3, #32
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d105      	bne.n	8009b04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009af8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009afc:	4b5c      	ldr	r3, [pc, #368]	@ (8009c70 <HAL_UART_IRQHandler+0x2b8>)
 8009afe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2208      	movs	r2, #8
 8009b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b12:	f043 0208 	orr.w	r2, r3, #8
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d012      	beq.n	8009b4e <HAL_UART_IRQHandler+0x196>
 8009b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00c      	beq.n	8009b4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b44:	f043 0220 	orr.w	r2, r3, #32
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 8249 	beq.w	8009fec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d013      	beq.n	8009b8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d105      	bne.n	8009b7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba2:	2b40      	cmp	r3, #64	@ 0x40
 8009ba4:	d005      	beq.n	8009bb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009baa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d054      	beq.n	8009c5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 ffd4 	bl	800ab60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bc2:	2b40      	cmp	r3, #64	@ 0x40
 8009bc4:	d146      	bne.n	8009c54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1d9      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d017      	beq.n	8009c4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c22:	4a15      	ldr	r2, [pc, #84]	@ (8009c78 <HAL_UART_IRQHandler+0x2c0>)
 8009c24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fb fd4b 	bl	80056c8 <HAL_DMA_Abort_IT>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d019      	beq.n	8009c6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009c46:	4610      	mov	r0, r2
 8009c48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c4a:	e00f      	b.n	8009c6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f9e0 	bl	800a012 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c52:	e00b      	b.n	8009c6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f9dc 	bl	800a012 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c5a:	e007      	b.n	8009c6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f9d8 	bl	800a012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009c6a:	e1bf      	b.n	8009fec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c6c:	bf00      	nop
    return;
 8009c6e:	e1bd      	b.n	8009fec <HAL_UART_IRQHandler+0x634>
 8009c70:	10000001 	.word	0x10000001
 8009c74:	04000120 	.word	0x04000120
 8009c78:	0800ad61 	.word	0x0800ad61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	f040 8153 	bne.w	8009f2c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c8a:	f003 0310 	and.w	r3, r3, #16
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 814c 	beq.w	8009f2c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 8145 	beq.w	8009f2c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2210      	movs	r2, #16
 8009ca8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb4:	2b40      	cmp	r3, #64	@ 0x40
 8009cb6:	f040 80bb 	bne.w	8009e30 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 818f 	beq.w	8009ff0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009cd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	f080 8187 	bcs.w	8009ff0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ce8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0320 	and.w	r3, r3, #32
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f040 8087 	bne.w	8009e0e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	461a      	mov	r2, r3
 8009d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1da      	bne.n	8009d00 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3308      	adds	r3, #8
 8009d50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3308      	adds	r3, #8
 8009d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e1      	bne.n	8009d4a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3308      	adds	r3, #8
 8009da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009daa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009dac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009db0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e3      	bne.n	8009d86 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ddc:	f023 0310 	bic.w	r3, r3, #16
 8009de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009df0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009df4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e4      	bne.n	8009dcc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fb fbff 	bl	800560c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2202      	movs	r2, #2
 8009e12:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f8fb 	bl	800a024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e2e:	e0df      	b.n	8009ff0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 80d1 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009e52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 80cc 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e64:	e853 3f00 	ldrex	r3, [r3]
 8009e68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e80:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e4      	bne.n	8009e5c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3308      	adds	r3, #8
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ea8:	f023 0301 	bic.w	r3, r3, #1
 8009eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e1      	bne.n	8009e92 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0310 	bic.w	r3, r3, #16
 8009ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f04:	61fb      	str	r3, [r7, #28]
 8009f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	69b9      	ldr	r1, [r7, #24]
 8009f0a:	69fa      	ldr	r2, [r7, #28]
 8009f0c:	e841 2300 	strex	r3, r2, [r1]
 8009f10:	617b      	str	r3, [r7, #20]
   return(result);
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e4      	bne.n	8009ee2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f87d 	bl	800a024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f2a:	e063      	b.n	8009ff4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00e      	beq.n	8009f56 <HAL_UART_IRQHandler+0x59e>
 8009f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d008      	beq.n	8009f56 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fc64 	bl	800b81c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f54:	e051      	b.n	8009ffa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d014      	beq.n	8009f8c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d105      	bne.n	8009f7a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d008      	beq.n	8009f8c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d03a      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	4798      	blx	r3
    }
    return;
 8009f8a:	e035      	b.n	8009ff8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d009      	beq.n	8009fac <HAL_UART_IRQHandler+0x5f4>
 8009f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fef1 	bl	800ad8c <UART_EndTransmit_IT>
    return;
 8009faa:	e026      	b.n	8009ffa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d009      	beq.n	8009fcc <HAL_UART_IRQHandler+0x614>
 8009fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d003      	beq.n	8009fcc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 fc3b 	bl	800b840 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fca:	e016      	b.n	8009ffa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d010      	beq.n	8009ffa <HAL_UART_IRQHandler+0x642>
 8009fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	da0c      	bge.n	8009ffa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 fc24 	bl	800b82e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fe6:	e008      	b.n	8009ffa <HAL_UART_IRQHandler+0x642>
      return;
 8009fe8:	bf00      	nop
 8009fea:	e006      	b.n	8009ffa <HAL_UART_IRQHandler+0x642>
    return;
 8009fec:	bf00      	nop
 8009fee:	e004      	b.n	8009ffa <HAL_UART_IRQHandler+0x642>
      return;
 8009ff0:	bf00      	nop
 8009ff2:	e002      	b.n	8009ffa <HAL_UART_IRQHandler+0x642>
      return;
 8009ff4:	bf00      	nop
 8009ff6:	e000      	b.n	8009ffa <HAL_UART_IRQHandler+0x642>
    return;
 8009ff8:	bf00      	nop
  }
}
 8009ffa:	37e8      	adds	r7, #232	@ 0xe8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bc80      	pop	{r7}
 800a010:	4770      	bx	lr

0800a012 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a012:	b480      	push	{r7}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a01a:	bf00      	nop
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	bc80      	pop	{r7}
 800a022:	4770      	bx	lr

0800a024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr
	...

0800a03c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a03c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a040:	b08c      	sub	sp, #48	@ 0x30
 800a042:	af00      	add	r7, sp, #0
 800a044:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	431a      	orrs	r2, r3
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	431a      	orrs	r2, r3
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	4313      	orrs	r3, r2
 800a062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	4b94      	ldr	r3, [pc, #592]	@ (800a2bc <UART_SetConfig+0x280>)
 800a06c:	4013      	ands	r3, r2
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	6812      	ldr	r2, [r2, #0]
 800a072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a074:	430b      	orrs	r3, r1
 800a076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	68da      	ldr	r2, [r3, #12]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a89      	ldr	r2, [pc, #548]	@ (800a2c0 <UART_SetConfig+0x284>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d004      	beq.n	800a0a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a0b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0bc:	430b      	orrs	r3, r1
 800a0be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c6:	f023 010f 	bic.w	r1, r3, #15
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a7a      	ldr	r2, [pc, #488]	@ (800a2c4 <UART_SetConfig+0x288>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d127      	bne.n	800a130 <UART_SetConfig+0xf4>
 800a0e0:	2003      	movs	r0, #3
 800a0e2:	f7ff fb2b 	bl	800973c <LL_RCC_GetUSARTClockSource>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d81b      	bhi.n	800a128 <UART_SetConfig+0xec>
 800a0f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <UART_SetConfig+0xbc>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	0800a111 	.word	0x0800a111
 800a104:	0800a121 	.word	0x0800a121
 800a108:	2301      	movs	r3, #1
 800a10a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a10e:	e080      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a110:	2302      	movs	r3, #2
 800a112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a116:	e07c      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a118:	2304      	movs	r3, #4
 800a11a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a11e:	e078      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a120:	2308      	movs	r3, #8
 800a122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a126:	e074      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a128:	2310      	movs	r3, #16
 800a12a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a12e:	e070      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a64      	ldr	r2, [pc, #400]	@ (800a2c8 <UART_SetConfig+0x28c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d138      	bne.n	800a1ac <UART_SetConfig+0x170>
 800a13a:	200c      	movs	r0, #12
 800a13c:	f7ff fafe 	bl	800973c <LL_RCC_GetUSARTClockSource>
 800a140:	4603      	mov	r3, r0
 800a142:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800a146:	2b0c      	cmp	r3, #12
 800a148:	d82c      	bhi.n	800a1a4 <UART_SetConfig+0x168>
 800a14a:	a201      	add	r2, pc, #4	@ (adr r2, 800a150 <UART_SetConfig+0x114>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a185 	.word	0x0800a185
 800a154:	0800a1a5 	.word	0x0800a1a5
 800a158:	0800a1a5 	.word	0x0800a1a5
 800a15c:	0800a1a5 	.word	0x0800a1a5
 800a160:	0800a195 	.word	0x0800a195
 800a164:	0800a1a5 	.word	0x0800a1a5
 800a168:	0800a1a5 	.word	0x0800a1a5
 800a16c:	0800a1a5 	.word	0x0800a1a5
 800a170:	0800a18d 	.word	0x0800a18d
 800a174:	0800a1a5 	.word	0x0800a1a5
 800a178:	0800a1a5 	.word	0x0800a1a5
 800a17c:	0800a1a5 	.word	0x0800a1a5
 800a180:	0800a19d 	.word	0x0800a19d
 800a184:	2300      	movs	r3, #0
 800a186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a18a:	e042      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a18c:	2302      	movs	r3, #2
 800a18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a192:	e03e      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a194:	2304      	movs	r3, #4
 800a196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a19a:	e03a      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a19c:	2308      	movs	r3, #8
 800a19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1a2:	e036      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1aa:	e032      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a43      	ldr	r2, [pc, #268]	@ (800a2c0 <UART_SetConfig+0x284>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d12a      	bne.n	800a20c <UART_SetConfig+0x1d0>
 800a1b6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800a1ba:	f7ff fad1 	bl	8009760 <LL_RCC_GetLPUARTClockSource>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1c4:	d01a      	beq.n	800a1fc <UART_SetConfig+0x1c0>
 800a1c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1ca:	d81b      	bhi.n	800a204 <UART_SetConfig+0x1c8>
 800a1cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1d0:	d00c      	beq.n	800a1ec <UART_SetConfig+0x1b0>
 800a1d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1d6:	d815      	bhi.n	800a204 <UART_SetConfig+0x1c8>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <UART_SetConfig+0x1a8>
 800a1dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1e0:	d008      	beq.n	800a1f4 <UART_SetConfig+0x1b8>
 800a1e2:	e00f      	b.n	800a204 <UART_SetConfig+0x1c8>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ea:	e012      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f2:	e00e      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1fa:	e00a      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a202:	e006      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a204:	2310      	movs	r3, #16
 800a206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a20a:	e002      	b.n	800a212 <UART_SetConfig+0x1d6>
 800a20c:	2310      	movs	r3, #16
 800a20e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a2a      	ldr	r2, [pc, #168]	@ (800a2c0 <UART_SetConfig+0x284>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	f040 80a4 	bne.w	800a366 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a21e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a222:	2b08      	cmp	r3, #8
 800a224:	d823      	bhi.n	800a26e <UART_SetConfig+0x232>
 800a226:	a201      	add	r2, pc, #4	@ (adr r2, 800a22c <UART_SetConfig+0x1f0>)
 800a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22c:	0800a251 	.word	0x0800a251
 800a230:	0800a26f 	.word	0x0800a26f
 800a234:	0800a259 	.word	0x0800a259
 800a238:	0800a26f 	.word	0x0800a26f
 800a23c:	0800a25f 	.word	0x0800a25f
 800a240:	0800a26f 	.word	0x0800a26f
 800a244:	0800a26f 	.word	0x0800a26f
 800a248:	0800a26f 	.word	0x0800a26f
 800a24c:	0800a267 	.word	0x0800a267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a250:	f7fd ff46 	bl	80080e0 <HAL_RCC_GetPCLK1Freq>
 800a254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a256:	e010      	b.n	800a27a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a258:	4b1c      	ldr	r3, [pc, #112]	@ (800a2cc <UART_SetConfig+0x290>)
 800a25a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a25c:	e00d      	b.n	800a27a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a25e:	f7fd fe8b 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 800a262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a264:	e009      	b.n	800a27a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a26c:	e005      	b.n	800a27a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 8137 	beq.w	800a4f0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a286:	4a12      	ldr	r2, [pc, #72]	@ (800a2d0 <UART_SetConfig+0x294>)
 800a288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a28c:	461a      	mov	r2, r3
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	fbb3 f3f2 	udiv	r3, r3, r2
 800a294:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	4613      	mov	r3, r2
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	4413      	add	r3, r2
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d305      	bcc.n	800a2b2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d910      	bls.n	800a2d4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2b8:	e11a      	b.n	800a4f0 <UART_SetConfig+0x4b4>
 800a2ba:	bf00      	nop
 800a2bc:	cfff69f3 	.word	0xcfff69f3
 800a2c0:	40008000 	.word	0x40008000
 800a2c4:	40013800 	.word	0x40013800
 800a2c8:	40004400 	.word	0x40004400
 800a2cc:	00f42400 	.word	0x00f42400
 800a2d0:	0801fb2c 	.word	0x0801fb2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
 800a2da:	60fa      	str	r2, [r7, #12]
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e0:	4a8e      	ldr	r2, [pc, #568]	@ (800a51c <UART_SetConfig+0x4e0>)
 800a2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2f6:	f7f6 ff1f 	bl	8001138 <__aeabi_uldivmod>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4610      	mov	r0, r2
 800a300:	4619      	mov	r1, r3
 800a302:	f04f 0200 	mov.w	r2, #0
 800a306:	f04f 0300 	mov.w	r3, #0
 800a30a:	020b      	lsls	r3, r1, #8
 800a30c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a310:	0202      	lsls	r2, r0, #8
 800a312:	6979      	ldr	r1, [r7, #20]
 800a314:	6849      	ldr	r1, [r1, #4]
 800a316:	0849      	lsrs	r1, r1, #1
 800a318:	2000      	movs	r0, #0
 800a31a:	460c      	mov	r4, r1
 800a31c:	4605      	mov	r5, r0
 800a31e:	eb12 0804 	adds.w	r8, r2, r4
 800a322:	eb43 0905 	adc.w	r9, r3, r5
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	469a      	mov	sl, r3
 800a32e:	4693      	mov	fp, r2
 800a330:	4652      	mov	r2, sl
 800a332:	465b      	mov	r3, fp
 800a334:	4640      	mov	r0, r8
 800a336:	4649      	mov	r1, r9
 800a338:	f7f6 fefe 	bl	8001138 <__aeabi_uldivmod>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	4613      	mov	r3, r2
 800a342:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a34a:	d308      	bcc.n	800a35e <UART_SetConfig+0x322>
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a352:	d204      	bcs.n	800a35e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6a3a      	ldr	r2, [r7, #32]
 800a35a:	60da      	str	r2, [r3, #12]
 800a35c:	e0c8      	b.n	800a4f0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a364:	e0c4      	b.n	800a4f0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a36e:	d167      	bne.n	800a440 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800a370:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a374:	2b08      	cmp	r3, #8
 800a376:	d828      	bhi.n	800a3ca <UART_SetConfig+0x38e>
 800a378:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <UART_SetConfig+0x344>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a3a5 	.word	0x0800a3a5
 800a384:	0800a3ad 	.word	0x0800a3ad
 800a388:	0800a3b5 	.word	0x0800a3b5
 800a38c:	0800a3cb 	.word	0x0800a3cb
 800a390:	0800a3bb 	.word	0x0800a3bb
 800a394:	0800a3cb 	.word	0x0800a3cb
 800a398:	0800a3cb 	.word	0x0800a3cb
 800a39c:	0800a3cb 	.word	0x0800a3cb
 800a3a0:	0800a3c3 	.word	0x0800a3c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3a4:	f7fd fe9c 	bl	80080e0 <HAL_RCC_GetPCLK1Freq>
 800a3a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3aa:	e014      	b.n	800a3d6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3ac:	f7fd feaa 	bl	8008104 <HAL_RCC_GetPCLK2Freq>
 800a3b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3b2:	e010      	b.n	800a3d6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3b4:	4b5a      	ldr	r3, [pc, #360]	@ (800a520 <UART_SetConfig+0x4e4>)
 800a3b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3b8:	e00d      	b.n	800a3d6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ba:	f7fd fddd 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 800a3be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3c0:	e009      	b.n	800a3d6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3c8:	e005      	b.n	800a3d6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 8089 	beq.w	800a4f0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e2:	4a4e      	ldr	r2, [pc, #312]	@ (800a51c <UART_SetConfig+0x4e0>)
 800a3e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3f0:	005a      	lsls	r2, r3, #1
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	085b      	lsrs	r3, r3, #1
 800a3f8:	441a      	add	r2, r3
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a402:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	2b0f      	cmp	r3, #15
 800a408:	d916      	bls.n	800a438 <UART_SetConfig+0x3fc>
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a410:	d212      	bcs.n	800a438 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	b29b      	uxth	r3, r3
 800a416:	f023 030f 	bic.w	r3, r3, #15
 800a41a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	085b      	lsrs	r3, r3, #1
 800a420:	b29b      	uxth	r3, r3
 800a422:	f003 0307 	and.w	r3, r3, #7
 800a426:	b29a      	uxth	r2, r3
 800a428:	8bfb      	ldrh	r3, [r7, #30]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	8bfa      	ldrh	r2, [r7, #30]
 800a434:	60da      	str	r2, [r3, #12]
 800a436:	e05b      	b.n	800a4f0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a43e:	e057      	b.n	800a4f0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a440:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a444:	2b08      	cmp	r3, #8
 800a446:	d828      	bhi.n	800a49a <UART_SetConfig+0x45e>
 800a448:	a201      	add	r2, pc, #4	@ (adr r2, 800a450 <UART_SetConfig+0x414>)
 800a44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44e:	bf00      	nop
 800a450:	0800a475 	.word	0x0800a475
 800a454:	0800a47d 	.word	0x0800a47d
 800a458:	0800a485 	.word	0x0800a485
 800a45c:	0800a49b 	.word	0x0800a49b
 800a460:	0800a48b 	.word	0x0800a48b
 800a464:	0800a49b 	.word	0x0800a49b
 800a468:	0800a49b 	.word	0x0800a49b
 800a46c:	0800a49b 	.word	0x0800a49b
 800a470:	0800a493 	.word	0x0800a493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a474:	f7fd fe34 	bl	80080e0 <HAL_RCC_GetPCLK1Freq>
 800a478:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a47a:	e014      	b.n	800a4a6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a47c:	f7fd fe42 	bl	8008104 <HAL_RCC_GetPCLK2Freq>
 800a480:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a482:	e010      	b.n	800a4a6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a484:	4b26      	ldr	r3, [pc, #152]	@ (800a520 <UART_SetConfig+0x4e4>)
 800a486:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a488:	e00d      	b.n	800a4a6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a48a:	f7fd fd75 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 800a48e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a490:	e009      	b.n	800a4a6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a496:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a498:	e005      	b.n	800a4a6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4a4:	bf00      	nop
    }

    if (pclk != 0U)
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d021      	beq.n	800a4f0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a51c <UART_SetConfig+0x4e0>)
 800a4b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	085b      	lsrs	r3, r3, #1
 800a4c4:	441a      	add	r2, r3
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	2b0f      	cmp	r3, #15
 800a4d4:	d909      	bls.n	800a4ea <UART_SetConfig+0x4ae>
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4dc:	d205      	bcs.n	800a4ea <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	60da      	str	r2, [r3, #12]
 800a4e8:	e002      	b.n	800a4f0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2200      	movs	r2, #0
 800a504:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2200      	movs	r2, #0
 800a50a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a50c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a510:	4618      	mov	r0, r3
 800a512:	3730      	adds	r7, #48	@ 0x30
 800a514:	46bd      	mov	sp, r7
 800a516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a51a:	bf00      	nop
 800a51c:	0801fb2c 	.word	0x0801fb2c
 800a520:	00f42400 	.word	0x00f42400

0800a524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a530:	f003 0308 	and.w	r3, r3, #8
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00a      	beq.n	800a54e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b8:	f003 0310 	and.w	r3, r3, #16
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01a      	beq.n	800a63a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a61e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a622:	d10a      	bne.n	800a63a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	605a      	str	r2, [r3, #4]
  }
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	bc80      	pop	{r7}
 800a664:	4770      	bx	lr

0800a666 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b086      	sub	sp, #24
 800a66a:	af02      	add	r7, sp, #8
 800a66c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a676:	f7f8 fddb 	bl	8003230 <HAL_GetTick>
 800a67a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0308 	and.w	r3, r3, #8
 800a686:	2b08      	cmp	r3, #8
 800a688:	d10e      	bne.n	800a6a8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a68a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f832 	bl	800a702 <UART_WaitOnFlagUntilTimeout>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e028      	b.n	800a6fa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d10e      	bne.n	800a6d4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f81c 	bl	800a702 <UART_WaitOnFlagUntilTimeout>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e012      	b.n	800a6fa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b09c      	sub	sp, #112	@ 0x70
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	603b      	str	r3, [r7, #0]
 800a70e:	4613      	mov	r3, r2
 800a710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a712:	e0af      	b.n	800a874 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71a:	f000 80ab 	beq.w	800a874 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a71e:	f7f8 fd87 	bl	8003230 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d302      	bcc.n	800a734 <UART_WaitOnFlagUntilTimeout+0x32>
 800a72e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a730:	2b00      	cmp	r3, #0
 800a732:	d140      	bne.n	800a7b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a744:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a748:	667b      	str	r3, [r7, #100]	@ 0x64
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a754:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a756:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a758:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a75a:	e841 2300 	strex	r3, r2, [r1]
 800a75e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1e6      	bne.n	800a734 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3308      	adds	r3, #8
 800a76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a770:	e853 3f00 	ldrex	r3, [r3]
 800a774:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a778:	f023 0301 	bic.w	r3, r3, #1
 800a77c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3308      	adds	r3, #8
 800a784:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a786:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a788:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a78c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e5      	bne.n	800a766 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e06f      	b.n	800a896 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d057      	beq.n	800a874 <UART_WaitOnFlagUntilTimeout+0x172>
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2b80      	cmp	r3, #128	@ 0x80
 800a7c8:	d054      	beq.n	800a874 <UART_WaitOnFlagUntilTimeout+0x172>
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2b40      	cmp	r3, #64	@ 0x40
 800a7ce:	d051      	beq.n	800a874 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7de:	d149      	bne.n	800a874 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	e853 3f00 	ldrex	r3, [r3]
 800a7f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a7fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	461a      	mov	r2, r3
 800a806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a808:	637b      	str	r3, [r7, #52]	@ 0x34
 800a80a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a80e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e6      	bne.n	800a7ea <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	613b      	str	r3, [r7, #16]
   return(result);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f023 0301 	bic.w	r3, r3, #1
 800a832:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3308      	adds	r3, #8
 800a83a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a83c:	623a      	str	r2, [r7, #32]
 800a83e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	69f9      	ldr	r1, [r7, #28]
 800a842:	6a3a      	ldr	r2, [r7, #32]
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	61bb      	str	r3, [r7, #24]
   return(result);
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e5      	bne.n	800a81c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2220      	movs	r2, #32
 800a854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2220      	movs	r2, #32
 800a85c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2220      	movs	r2, #32
 800a864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	e010      	b.n	800a896 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	69da      	ldr	r2, [r3, #28]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	4013      	ands	r3, r2
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	429a      	cmp	r2, r3
 800a882:	bf0c      	ite	eq
 800a884:	2301      	moveq	r3, #1
 800a886:	2300      	movne	r3, #0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	461a      	mov	r2, r3
 800a88c:	79fb      	ldrb	r3, [r7, #7]
 800a88e:	429a      	cmp	r2, r3
 800a890:	f43f af40 	beq.w	800a714 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3770      	adds	r7, #112	@ 0x70
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b0a3      	sub	sp, #140	@ 0x8c
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	88fa      	ldrh	r2, [r7, #6]
 800a8b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	88fa      	ldrh	r2, [r7, #6]
 800a8c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8d2:	d10e      	bne.n	800a8f2 <UART_Start_Receive_IT+0x52>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d105      	bne.n	800a8e8 <UART_Start_Receive_IT+0x48>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a8e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a8e6:	e02d      	b.n	800a944 <UART_Start_Receive_IT+0xa4>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	22ff      	movs	r2, #255	@ 0xff
 800a8ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a8f0:	e028      	b.n	800a944 <UART_Start_Receive_IT+0xa4>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10d      	bne.n	800a916 <UART_Start_Receive_IT+0x76>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d104      	bne.n	800a90c <UART_Start_Receive_IT+0x6c>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	22ff      	movs	r2, #255	@ 0xff
 800a906:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a90a:	e01b      	b.n	800a944 <UART_Start_Receive_IT+0xa4>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	227f      	movs	r2, #127	@ 0x7f
 800a910:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a914:	e016      	b.n	800a944 <UART_Start_Receive_IT+0xa4>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a91e:	d10d      	bne.n	800a93c <UART_Start_Receive_IT+0x9c>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d104      	bne.n	800a932 <UART_Start_Receive_IT+0x92>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	227f      	movs	r2, #127	@ 0x7f
 800a92c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a930:	e008      	b.n	800a944 <UART_Start_Receive_IT+0xa4>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	223f      	movs	r2, #63	@ 0x3f
 800a936:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a93a:	e003      	b.n	800a944 <UART_Start_Receive_IT+0xa4>
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2222      	movs	r2, #34	@ 0x22
 800a950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a95e:	e853 3f00 	ldrex	r3, [r3]
 800a962:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a964:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3308      	adds	r3, #8
 800a974:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a978:	673a      	str	r2, [r7, #112]	@ 0x70
 800a97a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a97e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a980:	e841 2300 	strex	r3, r2, [r1]
 800a984:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e3      	bne.n	800a954 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a994:	d14f      	bne.n	800aa36 <UART_Start_Receive_IT+0x196>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a99c:	88fa      	ldrh	r2, [r7, #6]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d349      	bcc.n	800aa36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9aa:	d107      	bne.n	800a9bc <UART_Start_Receive_IT+0x11c>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d103      	bne.n	800a9bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4a46      	ldr	r2, [pc, #280]	@ (800aad0 <UART_Start_Receive_IT+0x230>)
 800a9b8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a9ba:	e002      	b.n	800a9c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4a45      	ldr	r2, [pc, #276]	@ (800aad4 <UART_Start_Receive_IT+0x234>)
 800a9c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d01a      	beq.n	800aa00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d2:	e853 3f00 	ldrex	r3, [r3]
 800a9d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a9d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a9ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9ee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a9f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a9fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e4      	bne.n	800a9ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3308      	adds	r3, #8
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa0a:	e853 3f00 	ldrex	r3, [r3]
 800aa0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aa20:	64ba      	str	r2, [r7, #72]	@ 0x48
 800aa22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa28:	e841 2300 	strex	r3, r2, [r1]
 800aa2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aa2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1e5      	bne.n	800aa00 <UART_Start_Receive_IT+0x160>
 800aa34:	e046      	b.n	800aac4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa3e:	d107      	bne.n	800aa50 <UART_Start_Receive_IT+0x1b0>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d103      	bne.n	800aa50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4a23      	ldr	r2, [pc, #140]	@ (800aad8 <UART_Start_Receive_IT+0x238>)
 800aa4c:	675a      	str	r2, [r3, #116]	@ 0x74
 800aa4e:	e002      	b.n	800aa56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4a22      	ldr	r2, [pc, #136]	@ (800aadc <UART_Start_Receive_IT+0x23c>)
 800aa54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d019      	beq.n	800aa92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800aa72:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aa8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e6      	bne.n	800aa5e <UART_Start_Receive_IT+0x1be>
 800aa90:	e018      	b.n	800aac4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	e853 3f00 	ldrex	r3, [r3]
 800aa9e:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f043 0320 	orr.w	r3, r3, #32
 800aaa6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aab0:	623b      	str	r3, [r7, #32]
 800aab2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab4:	69f9      	ldr	r1, [r7, #28]
 800aab6:	6a3a      	ldr	r2, [r7, #32]
 800aab8:	e841 2300 	strex	r3, r2, [r1]
 800aabc:	61bb      	str	r3, [r7, #24]
   return(result);
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d1e6      	bne.n	800aa92 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	378c      	adds	r7, #140	@ 0x8c
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bc80      	pop	{r7}
 800aace:	4770      	bx	lr
 800aad0:	0800b4b5 	.word	0x0800b4b5
 800aad4:	0800b155 	.word	0x0800b155
 800aad8:	0800af9d 	.word	0x0800af9d
 800aadc:	0800ade5 	.word	0x0800ade5

0800aae0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b08f      	sub	sp, #60	@ 0x3c
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	e853 3f00 	ldrex	r3, [r3]
 800aaf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aafc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab0e:	e841 2300 	strex	r3, r2, [r1]
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1e6      	bne.n	800aae8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3308      	adds	r3, #8
 800ab20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ab30:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3308      	adds	r3, #8
 800ab38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab3a:	61ba      	str	r2, [r7, #24]
 800ab3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	6979      	ldr	r1, [r7, #20]
 800ab40:	69ba      	ldr	r2, [r7, #24]
 800ab42:	e841 2300 	strex	r3, r2, [r1]
 800ab46:	613b      	str	r3, [r7, #16]
   return(result);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e5      	bne.n	800ab1a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2220      	movs	r2, #32
 800ab52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ab56:	bf00      	nop
 800ab58:	373c      	adds	r7, #60	@ 0x3c
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bc80      	pop	{r7}
 800ab5e:	4770      	bx	lr

0800ab60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b095      	sub	sp, #84	@ 0x54
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab86:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e6      	bne.n	800ab68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	61fb      	str	r3, [r7, #28]
   return(result);
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abb0:	f023 0301 	bic.w	r3, r3, #1
 800abb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3308      	adds	r3, #8
 800abbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abc6:	e841 2300 	strex	r3, r2, [r1]
 800abca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1e3      	bne.n	800ab9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d118      	bne.n	800ac0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	f023 0310 	bic.w	r3, r3, #16
 800abee:	647b      	str	r3, [r7, #68]	@ 0x44
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abf8:	61bb      	str	r3, [r7, #24]
 800abfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6979      	ldr	r1, [r7, #20]
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	613b      	str	r3, [r7, #16]
   return(result);
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e6      	bne.n	800abda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2220      	movs	r2, #32
 800ac10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac20:	bf00      	nop
 800ac22:	3754      	adds	r7, #84	@ 0x54
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bc80      	pop	{r7}
 800ac28:	4770      	bx	lr

0800ac2a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b090      	sub	sp, #64	@ 0x40
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d137      	bne.n	800acb6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ac46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3308      	adds	r3, #8
 800ac54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac64:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e5      	bne.n	800ac4e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	e853 3f00 	ldrex	r3, [r3]
 800ac8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca0:	61fb      	str	r3, [r7, #28]
 800aca2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	69b9      	ldr	r1, [r7, #24]
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	617b      	str	r3, [r7, #20]
   return(result);
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e6      	bne.n	800ac82 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acb4:	e002      	b.n	800acbc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800acb6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800acb8:	f7f8 ffca 	bl	8003c50 <HAL_UART_TxCpltCallback>
}
 800acbc:	bf00      	nop
 800acbe:	3740      	adds	r7, #64	@ 0x40
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7ff f994 	bl	800a000 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acd8:	bf00      	nop
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acf4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad08:	2b80      	cmp	r3, #128	@ 0x80
 800ad0a:	d109      	bne.n	800ad20 <UART_DMAError+0x40>
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2b21      	cmp	r3, #33	@ 0x21
 800ad10:	d106      	bne.n	800ad20 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ad1a:	6978      	ldr	r0, [r7, #20]
 800ad1c:	f7ff fee0 	bl	800aae0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad2a:	2b40      	cmp	r3, #64	@ 0x40
 800ad2c:	d109      	bne.n	800ad42 <UART_DMAError+0x62>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2b22      	cmp	r3, #34	@ 0x22
 800ad32:	d106      	bne.n	800ad42 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ad3c:	6978      	ldr	r0, [r7, #20]
 800ad3e:	f7ff ff0f 	bl	800ab60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad48:	f043 0210 	orr.w	r2, r3, #16
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad52:	6978      	ldr	r0, [r7, #20]
 800ad54:	f7ff f95d 	bl	800a012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad58:	bf00      	nop
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f7ff f947 	bl	800a012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad84:	bf00      	nop
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	e853 3f00 	ldrex	r3, [r3]
 800ada0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	61bb      	str	r3, [r7, #24]
 800adb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb6:	6979      	ldr	r1, [r7, #20]
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	e841 2300 	strex	r3, r2, [r1]
 800adbe:	613b      	str	r3, [r7, #16]
   return(result);
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e6      	bne.n	800ad94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2220      	movs	r2, #32
 800adca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7f8 ff3b 	bl	8003c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adda:	bf00      	nop
 800addc:	3720      	adds	r7, #32
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b09c      	sub	sp, #112	@ 0x70
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800adf2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adfc:	2b22      	cmp	r3, #34	@ 0x22
 800adfe:	f040 80be 	bne.w	800af7e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae10:	b2d9      	uxtb	r1, r3
 800ae12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae1c:	400a      	ands	r2, r1
 800ae1e:	b2d2      	uxtb	r2, r2
 800ae20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	3b01      	subs	r3, #1
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f040 80a1 	bne.w	800af8e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae60:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e6      	bne.n	800ae4c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3308      	adds	r3, #8
 800ae84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae90:	f023 0301 	bic.w	r3, r3, #1
 800ae94:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae9e:	647a      	str	r2, [r7, #68]	@ 0x44
 800aea0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1e5      	bne.n	800ae7e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a33      	ldr	r2, [pc, #204]	@ (800af98 <UART_RxISR_8BIT+0x1b4>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d01f      	beq.n	800af10 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d018      	beq.n	800af10 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee6:	e853 3f00 	ldrex	r3, [r3]
 800aeea:	623b      	str	r3, [r7, #32]
   return(result);
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aef2:	663b      	str	r3, [r7, #96]	@ 0x60
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aefc:	633b      	str	r3, [r7, #48]	@ 0x30
 800aefe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af04:	e841 2300 	strex	r3, r2, [r1]
 800af08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1e6      	bne.n	800aede <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af14:	2b01      	cmp	r3, #1
 800af16:	d12e      	bne.n	800af76 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0310 	bic.w	r3, r3, #16
 800af32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	461a      	mov	r2, r3
 800af3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af3c:	61fb      	str	r3, [r7, #28]
 800af3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	69b9      	ldr	r1, [r7, #24]
 800af42:	69fa      	ldr	r2, [r7, #28]
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	617b      	str	r3, [r7, #20]
   return(result);
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e6      	bne.n	800af1e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	f003 0310 	and.w	r3, r3, #16
 800af5a:	2b10      	cmp	r3, #16
 800af5c:	d103      	bne.n	800af66 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2210      	movs	r2, #16
 800af64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7ff f858 	bl	800a024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af74:	e00b      	b.n	800af8e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7f8 fe80 	bl	8003c7c <HAL_UART_RxCpltCallback>
}
 800af7c:	e007      	b.n	800af8e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	699a      	ldr	r2, [r3, #24]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f042 0208 	orr.w	r2, r2, #8
 800af8c:	619a      	str	r2, [r3, #24]
}
 800af8e:	bf00      	nop
 800af90:	3770      	adds	r7, #112	@ 0x70
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	40008000 	.word	0x40008000

0800af9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b09c      	sub	sp, #112	@ 0x70
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800afaa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afb4:	2b22      	cmp	r3, #34	@ 0x22
 800afb6:	f040 80be 	bne.w	800b136 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800afca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800afce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800afd2:	4013      	ands	r3, r2
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afde:	1c9a      	adds	r2, r3, #2
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b01      	subs	r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800affc:	b29b      	uxth	r3, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	f040 80a1 	bne.w	800b146 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b00c:	e853 3f00 	ldrex	r3, [r3]
 800b010:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b018:	667b      	str	r3, [r7, #100]	@ 0x64
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b022:	657b      	str	r3, [r7, #84]	@ 0x54
 800b024:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b026:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b028:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b02a:	e841 2300 	strex	r3, r2, [r1]
 800b02e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1e6      	bne.n	800b004 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3308      	adds	r3, #8
 800b03c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b040:	e853 3f00 	ldrex	r3, [r3]
 800b044:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	f023 0301 	bic.w	r3, r3, #1
 800b04c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3308      	adds	r3, #8
 800b054:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b056:	643a      	str	r2, [r7, #64]	@ 0x40
 800b058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b05c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b05e:	e841 2300 	strex	r3, r2, [r1]
 800b062:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1e5      	bne.n	800b036 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2220      	movs	r2, #32
 800b06e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a33      	ldr	r2, [pc, #204]	@ (800b150 <UART_RxISR_16BIT+0x1b4>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d01f      	beq.n	800b0c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d018      	beq.n	800b0c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	e853 3f00 	ldrex	r3, [r3]
 800b0a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0bc:	e841 2300 	strex	r3, r2, [r1]
 800b0c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1e6      	bne.n	800b096 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d12e      	bne.n	800b12e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	e853 3f00 	ldrex	r3, [r3]
 800b0e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	f023 0310 	bic.w	r3, r3, #16
 800b0ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0f4:	61bb      	str	r3, [r7, #24]
 800b0f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f8:	6979      	ldr	r1, [r7, #20]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	e841 2300 	strex	r3, r2, [r1]
 800b100:	613b      	str	r3, [r7, #16]
   return(result);
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1e6      	bne.n	800b0d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	f003 0310 	and.w	r3, r3, #16
 800b112:	2b10      	cmp	r3, #16
 800b114:	d103      	bne.n	800b11e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2210      	movs	r2, #16
 800b11c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7fe ff7c 	bl	800a024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b12c:	e00b      	b.n	800b146 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7f8 fda4 	bl	8003c7c <HAL_UART_RxCpltCallback>
}
 800b134:	e007      	b.n	800b146 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	699a      	ldr	r2, [r3, #24]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f042 0208 	orr.w	r2, r2, #8
 800b144:	619a      	str	r2, [r3, #24]
}
 800b146:	bf00      	nop
 800b148:	3770      	adds	r7, #112	@ 0x70
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	40008000 	.word	0x40008000

0800b154 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b0ac      	sub	sp, #176	@ 0xb0
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b162:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b18a:	2b22      	cmp	r3, #34	@ 0x22
 800b18c:	f040 8182 	bne.w	800b494 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b196:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b19a:	e125      	b.n	800b3e8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b1a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b1aa:	b2d9      	uxtb	r1, r3
 800b1ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1b6:	400a      	ands	r2, r1
 800b1b8:	b2d2      	uxtb	r2, r2
 800b1ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1c0:	1c5a      	adds	r2, r3, #1
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1e6:	f003 0307 	and.w	r3, r3, #7
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d053      	beq.n	800b296 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d011      	beq.n	800b21e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b1fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b1fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00b      	beq.n	800b21e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2201      	movs	r2, #1
 800b20c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b214:	f043 0201 	orr.w	r2, r3, #1
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b21e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b222:	f003 0302 	and.w	r3, r3, #2
 800b226:	2b00      	cmp	r3, #0
 800b228:	d011      	beq.n	800b24e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b22a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b22e:	f003 0301 	and.w	r3, r3, #1
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00b      	beq.n	800b24e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2202      	movs	r2, #2
 800b23c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b244:	f043 0204 	orr.w	r2, r3, #4
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b24e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	d011      	beq.n	800b27e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b25a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00b      	beq.n	800b27e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2204      	movs	r2, #4
 800b26c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b274:	f043 0202 	orr.w	r2, r3, #2
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b284:	2b00      	cmp	r3, #0
 800b286:	d006      	beq.n	800b296 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7fe fec2 	bl	800a012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f040 80a2 	bne.w	800b3e8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2ac:	e853 3f00 	ldrex	r3, [r3]
 800b2b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b2b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b2c8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b2cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b2d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e4      	bne.n	800b2a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b2ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2f0:	f023 0301 	bic.w	r3, r3, #1
 800b2f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b302:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b304:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b306:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b308:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b30a:	e841 2300 	strex	r3, r2, [r1]
 800b30e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b310:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e1      	bne.n	800b2da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2220      	movs	r2, #32
 800b31a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a5f      	ldr	r2, [pc, #380]	@ (800b4ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d021      	beq.n	800b378 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d01a      	beq.n	800b378 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b352:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b364:	657b      	str	r3, [r7, #84]	@ 0x54
 800b366:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b368:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b36a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b36c:	e841 2300 	strex	r3, r2, [r1]
 800b370:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e4      	bne.n	800b342 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d130      	bne.n	800b3e2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b38e:	e853 3f00 	ldrex	r3, [r3]
 800b392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b396:	f023 0310 	bic.w	r3, r3, #16
 800b39a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3b0:	e841 2300 	strex	r3, r2, [r1]
 800b3b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1e4      	bne.n	800b386 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	f003 0310 	and.w	r3, r3, #16
 800b3c6:	2b10      	cmp	r3, #16
 800b3c8:	d103      	bne.n	800b3d2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2210      	movs	r2, #16
 800b3d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7fe fe22 	bl	800a024 <HAL_UARTEx_RxEventCallback>
 800b3e0:	e002      	b.n	800b3e8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7f8 fc4a 	bl	8003c7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b3e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d006      	beq.n	800b3fe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800b3f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f47f aecf 	bne.w	800b19c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b404:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b408:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d049      	beq.n	800b4a4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b416:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d242      	bcs.n	800b4a4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3308      	adds	r3, #8
 800b424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	e853 3f00 	ldrex	r3, [r3]
 800b42c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3308      	adds	r3, #8
 800b43e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b444:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b44a:	e841 2300 	strex	r3, r2, [r1]
 800b44e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1e3      	bne.n	800b41e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a15      	ldr	r2, [pc, #84]	@ (800b4b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b45a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	60bb      	str	r3, [r7, #8]
   return(result);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f043 0320 	orr.w	r3, r3, #32
 800b470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b47e:	61bb      	str	r3, [r7, #24]
 800b480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	6979      	ldr	r1, [r7, #20]
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	e841 2300 	strex	r3, r2, [r1]
 800b48a:	613b      	str	r3, [r7, #16]
   return(result);
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1e4      	bne.n	800b45c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b492:	e007      	b.n	800b4a4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	699a      	ldr	r2, [r3, #24]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f042 0208 	orr.w	r2, r2, #8
 800b4a2:	619a      	str	r2, [r3, #24]
}
 800b4a4:	bf00      	nop
 800b4a6:	37b0      	adds	r7, #176	@ 0xb0
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	40008000 	.word	0x40008000
 800b4b0:	0800ade5 	.word	0x0800ade5

0800b4b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b0ae      	sub	sp, #184	@ 0xb8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b4c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4ea:	2b22      	cmp	r3, #34	@ 0x22
 800b4ec:	f040 8186 	bne.w	800b7fc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b4f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b4fa:	e129      	b.n	800b750 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b502:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b50a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b50e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b512:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b516:	4013      	ands	r3, r2
 800b518:	b29a      	uxth	r2, r3
 800b51a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b51e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b524:	1c9a      	adds	r2, r3, #2
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b530:	b29b      	uxth	r3, r3
 800b532:	3b01      	subs	r3, #1
 800b534:	b29a      	uxth	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b54a:	f003 0307 	and.w	r3, r3, #7
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d053      	beq.n	800b5fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d011      	beq.n	800b582 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00b      	beq.n	800b582 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2201      	movs	r2, #1
 800b570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b578:	f043 0201 	orr.w	r2, r3, #1
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b586:	f003 0302 	and.w	r3, r3, #2
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d011      	beq.n	800b5b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b58e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b592:	f003 0301 	and.w	r3, r3, #1
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00b      	beq.n	800b5b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5a8:	f043 0204 	orr.w	r2, r3, #4
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5b6:	f003 0304 	and.w	r3, r3, #4
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d011      	beq.n	800b5e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b5be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00b      	beq.n	800b5e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2204      	movs	r2, #4
 800b5d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5d8:	f043 0202 	orr.w	r2, r3, #2
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d006      	beq.n	800b5fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7fe fd10 	bl	800a012 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b600:	b29b      	uxth	r3, r3
 800b602:	2b00      	cmp	r3, #0
 800b604:	f040 80a4 	bne.w	800b750 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b616:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b61c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	461a      	mov	r2, r3
 800b626:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b62a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b62e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b632:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b63c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1e2      	bne.n	800b608 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3308      	adds	r3, #8
 800b648:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b64c:	e853 3f00 	ldrex	r3, [r3]
 800b650:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b658:	f023 0301 	bic.w	r3, r3, #1
 800b65c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3308      	adds	r3, #8
 800b666:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b66a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b66c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b670:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b672:	e841 2300 	strex	r3, r2, [r1]
 800b676:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1e1      	bne.n	800b642 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2220      	movs	r2, #32
 800b682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a5f      	ldr	r2, [pc, #380]	@ (800b814 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d021      	beq.n	800b6e0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d01a      	beq.n	800b6e0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6b2:	e853 3f00 	ldrex	r3, [r3]
 800b6b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b6cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6ce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6d4:	e841 2300 	strex	r3, r2, [r1]
 800b6d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b6da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1e4      	bne.n	800b6aa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d130      	bne.n	800b74a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	e853 3f00 	ldrex	r3, [r3]
 800b6fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6fe:	f023 0310 	bic.w	r3, r3, #16
 800b702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b710:	647b      	str	r3, [r7, #68]	@ 0x44
 800b712:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e4      	bne.n	800b6ee <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	f003 0310 	and.w	r3, r3, #16
 800b72e:	2b10      	cmp	r3, #16
 800b730:	d103      	bne.n	800b73a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2210      	movs	r2, #16
 800b738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7fe fc6e 	bl	800a024 <HAL_UARTEx_RxEventCallback>
 800b748:	e002      	b.n	800b750 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7f8 fa96 	bl	8003c7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b750:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b754:	2b00      	cmp	r3, #0
 800b756:	d006      	beq.n	800b766 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800b758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b75c:	f003 0320 	and.w	r3, r3, #32
 800b760:	2b00      	cmp	r3, #0
 800b762:	f47f aecb 	bne.w	800b4fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b76c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b770:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b774:	2b00      	cmp	r3, #0
 800b776:	d049      	beq.n	800b80c <UART_RxISR_16BIT_FIFOEN+0x358>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b77e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b782:	429a      	cmp	r2, r3
 800b784:	d242      	bcs.n	800b80c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	3308      	adds	r3, #8
 800b78c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b790:	e853 3f00 	ldrex	r3, [r3]
 800b794:	623b      	str	r3, [r7, #32]
   return(result);
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b79c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3308      	adds	r3, #8
 800b7a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b7aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7b2:	e841 2300 	strex	r3, r2, [r1]
 800b7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1e3      	bne.n	800b786 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a15      	ldr	r2, [pc, #84]	@ (800b818 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b7c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	e853 3f00 	ldrex	r3, [r3]
 800b7d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f043 0320 	orr.w	r3, r3, #32
 800b7d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ea:	69b9      	ldr	r1, [r7, #24]
 800b7ec:	69fa      	ldr	r2, [r7, #28]
 800b7ee:	e841 2300 	strex	r3, r2, [r1]
 800b7f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1e4      	bne.n	800b7c4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7fa:	e007      	b.n	800b80c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	699a      	ldr	r2, [r3, #24]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f042 0208 	orr.w	r2, r2, #8
 800b80a:	619a      	str	r2, [r3, #24]
}
 800b80c:	bf00      	nop
 800b80e:	37b8      	adds	r7, #184	@ 0xb8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	40008000 	.word	0x40008000
 800b818:	0800af9d 	.word	0x0800af9d

0800b81c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	bc80      	pop	{r7}
 800b82c:	4770      	bx	lr

0800b82e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b82e:	b480      	push	{r7}
 800b830:	b083      	sub	sp, #12
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bc80      	pop	{r7}
 800b83e:	4770      	bx	lr

0800b840 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bc80      	pop	{r7}
 800b850:	4770      	bx	lr

0800b852 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b088      	sub	sp, #32
 800b856:	af02      	add	r7, sp, #8
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	1d3b      	adds	r3, r7, #4
 800b85c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b860:	2300      	movs	r3, #0
 800b862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d101      	bne.n	800b872 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b86e:	2302      	movs	r3, #2
 800b870:	e046      	b.n	800b900 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2224      	movs	r2, #36	@ 0x24
 800b87e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f022 0201 	bic.w	r2, r2, #1
 800b890:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d105      	bne.n	800b8b8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b8ac:	1d3b      	adds	r3, r7, #4
 800b8ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f000 f911 	bl	800bada <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f042 0201 	orr.w	r2, r2, #1
 800b8c6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8c8:	f7f7 fcb2 	bl	8003230 <HAL_GetTick>
 800b8cc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7fe ff10 	bl	800a702 <UART_WaitOnFlagUntilTimeout>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	75fb      	strb	r3, [r7, #23]
 800b8ec:	e003      	b.n	800b8f6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b908:	b480      	push	{r7}
 800b90a:	b089      	sub	sp, #36	@ 0x24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b916:	2b01      	cmp	r3, #1
 800b918:	d101      	bne.n	800b91e <HAL_UARTEx_EnableStopMode+0x16>
 800b91a:	2302      	movs	r3, #2
 800b91c:	e021      	b.n	800b962 <HAL_UARTEx_EnableStopMode+0x5a>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	60bb      	str	r3, [r7, #8]
   return(result);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f043 0302 	orr.w	r3, r3, #2
 800b93a:	61fb      	str	r3, [r7, #28]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	461a      	mov	r2, r3
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	61bb      	str	r3, [r7, #24]
 800b946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6979      	ldr	r1, [r7, #20]
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	613b      	str	r3, [r7, #16]
   return(result);
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e6      	bne.n	800b926 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3724      	adds	r7, #36	@ 0x24
 800b966:	46bd      	mov	sp, r7
 800b968:	bc80      	pop	{r7}
 800b96a:	4770      	bx	lr

0800b96c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <HAL_UARTEx_EnableFifoMode+0x16>
 800b97e:	2302      	movs	r3, #2
 800b980:	e02b      	b.n	800b9da <HAL_UARTEx_EnableFifoMode+0x6e>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2224      	movs	r2, #36	@ 0x24
 800b98e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 0201 	bic.w	r2, r2, #1
 800b9a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b9b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800b9b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f8ac 	bl	800bb20 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d101      	bne.n	800b9fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	e02d      	b.n	800ba56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2224      	movs	r2, #36	@ 0x24
 800ba06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f022 0201 	bic.w	r2, r2, #1
 800ba20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	430a      	orrs	r2, r1
 800ba34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f872 	bl	800bb20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b084      	sub	sp, #16
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d101      	bne.n	800ba76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba72:	2302      	movs	r3, #2
 800ba74:	e02d      	b.n	800bad2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2224      	movs	r2, #36	@ 0x24
 800ba82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f022 0201 	bic.w	r2, r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	683a      	ldr	r2, [r7, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f834 	bl	800bb20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2220      	movs	r2, #32
 800bac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bada:	b480      	push	{r7}
 800badc:	b085      	sub	sp, #20
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	1d3b      	adds	r3, r7, #4
 800bae4:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	f023 0210 	bic.w	r2, r3, #16
 800baf2:	893b      	ldrh	r3, [r7, #8]
 800baf4:	4619      	mov	r1, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	430a      	orrs	r2, r1
 800bafc:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800bb08:	7abb      	ldrb	r3, [r7, #10]
 800bb0a:	061a      	lsls	r2, r3, #24
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	605a      	str	r2, [r3, #4]
}
 800bb14:	bf00      	nop
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bc80      	pop	{r7}
 800bb1c:	4770      	bx	lr
	...

0800bb20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d108      	bne.n	800bb42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb40:	e031      	b.n	800bba6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb42:	2308      	movs	r3, #8
 800bb44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb46:	2308      	movs	r3, #8
 800bb48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	0e5b      	lsrs	r3, r3, #25
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f003 0307 	and.w	r3, r3, #7
 800bb58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	0f5b      	lsrs	r3, r3, #29
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	f003 0307 	and.w	r3, r3, #7
 800bb68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb6a:	7bbb      	ldrb	r3, [r7, #14]
 800bb6c:	7b3a      	ldrb	r2, [r7, #12]
 800bb6e:	4910      	ldr	r1, [pc, #64]	@ (800bbb0 <UARTEx_SetNbDataToProcess+0x90>)
 800bb70:	5c8a      	ldrb	r2, [r1, r2]
 800bb72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb76:	7b3a      	ldrb	r2, [r7, #12]
 800bb78:	490e      	ldr	r1, [pc, #56]	@ (800bbb4 <UARTEx_SetNbDataToProcess+0x94>)
 800bb7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	7b7a      	ldrb	r2, [r7, #13]
 800bb8c:	4908      	ldr	r1, [pc, #32]	@ (800bbb0 <UARTEx_SetNbDataToProcess+0x90>)
 800bb8e:	5c8a      	ldrb	r2, [r1, r2]
 800bb90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb94:	7b7a      	ldrb	r2, [r7, #13]
 800bb96:	4907      	ldr	r1, [pc, #28]	@ (800bbb4 <UARTEx_SetNbDataToProcess+0x94>)
 800bb98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bba6:	bf00      	nop
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bc80      	pop	{r7}
 800bbae:	4770      	bx	lr
 800bbb0:	0801fb44 	.word	0x0801fb44
 800bbb4:	0801fb4c 	.word	0x0801fb4c

0800bbb8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800bbbc:	f7f7 f9d8 	bl	8002f70 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800bbc0:	f000 f820 	bl	800bc04 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800bbc4:	bf00      	nop
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800bbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd0:	f011 fa10 	bl	801cff4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800bbd4:	bf00      	nop
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bbdc:	f3bf 8f4f 	dsb	sy
}
 800bbe0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bbe2:	4b06      	ldr	r3, [pc, #24]	@ (800bbfc <__NVIC_SystemReset+0x24>)
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bbea:	4904      	ldr	r1, [pc, #16]	@ (800bbfc <__NVIC_SystemReset+0x24>)
 800bbec:	4b04      	ldr	r3, [pc, #16]	@ (800bc00 <__NVIC_SystemReset+0x28>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bbf2:	f3bf 8f4f 	dsb	sy
}
 800bbf6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800bbf8:	bf00      	nop
 800bbfa:	e7fd      	b.n	800bbf8 <__NVIC_SystemReset+0x20>
 800bbfc:	e000ed00 	.word	0xe000ed00
 800bc00:	05fa0004 	.word	0x05fa0004

0800bc04 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800bc0e:	2300      	movs	r3, #0
 800bc10:	9302      	str	r3, [sp, #8]
 800bc12:	2303      	movs	r3, #3
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	2301      	movs	r3, #1
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	4b59      	ldr	r3, [pc, #356]	@ (800bd80 <LoRaWAN_Init+0x17c>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	2100      	movs	r1, #0
 800bc20:	2002      	movs	r0, #2
 800bc22:	f011 fe33 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800bc26:	2301      	movs	r3, #1
 800bc28:	9302      	str	r3, [sp, #8]
 800bc2a:	2306      	movs	r3, #6
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	2302      	movs	r3, #2
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	4b54      	ldr	r3, [pc, #336]	@ (800bd84 <LoRaWAN_Init+0x180>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	2100      	movs	r1, #0
 800bc38:	2002      	movs	r0, #2
 800bc3a:	f011 fe27 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800bc3e:	2301      	movs	r3, #1
 800bc40:	9302      	str	r3, [sp, #8]
 800bc42:	2303      	movs	r3, #3
 800bc44:	9301      	str	r3, [sp, #4]
 800bc46:	2301      	movs	r3, #1
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	4b4f      	ldr	r3, [pc, #316]	@ (800bd88 <LoRaWAN_Init+0x184>)
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	2002      	movs	r0, #2
 800bc52:	f011 fe1b 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800bc56:	1d3b      	adds	r3, r7, #4
 800bc58:	4619      	mov	r1, r3
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	f003 fa4a 	bl	800f0f4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	0e1b      	lsrs	r3, r3, #24
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	461a      	mov	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	0c1b      	lsrs	r3, r3, #16
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	4619      	mov	r1, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	0a1b      	lsrs	r3, r3, #8
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	9302      	str	r3, [sp, #8]
 800bc78:	9101      	str	r1, [sp, #4]
 800bc7a:	9200      	str	r2, [sp, #0]
 800bc7c:	4b43      	ldr	r3, [pc, #268]	@ (800bd8c <LoRaWAN_Init+0x188>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2100      	movs	r1, #0
 800bc82:	2002      	movs	r0, #2
 800bc84:	f011 fe02 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800bc88:	1d3b      	adds	r3, r7, #4
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	f003 fa31 	bl	800f0f4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	0e1b      	lsrs	r3, r3, #24
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	461a      	mov	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	0c1b      	lsrs	r3, r3, #16
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	4619      	mov	r1, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	0a1b      	lsrs	r3, r3, #8
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	b2c0      	uxtb	r0, r0
 800bcac:	9003      	str	r0, [sp, #12]
 800bcae:	9302      	str	r3, [sp, #8]
 800bcb0:	9101      	str	r1, [sp, #4]
 800bcb2:	9200      	str	r2, [sp, #0]
 800bcb4:	4b36      	ldr	r3, [pc, #216]	@ (800bd90 <LoRaWAN_Init+0x18c>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2100      	movs	r1, #0
 800bcba:	2002      	movs	r0, #2
 800bcbc:	f011 fde6 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	4b33      	ldr	r3, [pc, #204]	@ (800bd94 <LoRaWAN_Init+0x190>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800bccc:	4832      	ldr	r0, [pc, #200]	@ (800bd98 <LoRaWAN_Init+0x194>)
 800bcce:	f011 fb2f 	bl	801d330 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	4b31      	ldr	r3, [pc, #196]	@ (800bd9c <LoRaWAN_Init+0x198>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800bcde:	4830      	ldr	r0, [pc, #192]	@ (800bda0 <LoRaWAN_Init+0x19c>)
 800bce0:	f011 fb26 	bl	801d330 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800bce4:	2300      	movs	r3, #0
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	4b2e      	ldr	r3, [pc, #184]	@ (800bda4 <LoRaWAN_Init+0x1a0>)
 800bcea:	2201      	movs	r2, #1
 800bcec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800bcf0:	482d      	ldr	r0, [pc, #180]	@ (800bda8 <LoRaWAN_Init+0x1a4>)
 800bcf2:	f011 fb1d 	bl	801d330 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	4b2c      	ldr	r3, [pc, #176]	@ (800bdac <LoRaWAN_Init+0x1a8>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800bd02:	482b      	ldr	r0, [pc, #172]	@ (800bdb0 <LoRaWAN_Init+0x1ac>)
 800bd04:	f011 fb14 	bl	801d330 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800bd08:	4a2a      	ldr	r2, [pc, #168]	@ (800bdb4 <LoRaWAN_Init+0x1b0>)
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	2001      	movs	r0, #1
 800bd0e:	f011 fa6d 	bl	801d1ec <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800bd12:	4a29      	ldr	r2, [pc, #164]	@ (800bdb8 <LoRaWAN_Init+0x1b4>)
 800bd14:	2100      	movs	r1, #0
 800bd16:	2002      	movs	r0, #2
 800bd18:	f011 fa68 	bl	801d1ec <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800bd1c:	4a27      	ldr	r2, [pc, #156]	@ (800bdbc <LoRaWAN_Init+0x1b8>)
 800bd1e:	2100      	movs	r1, #0
 800bd20:	2004      	movs	r0, #4
 800bd22:	f011 fa63 	bl	801d1ec <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800bd26:	4a26      	ldr	r2, [pc, #152]	@ (800bdc0 <LoRaWAN_Init+0x1bc>)
 800bd28:	2100      	movs	r1, #0
 800bd2a:	2008      	movs	r0, #8
 800bd2c:	f011 fa5e 	bl	801d1ec <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800bd30:	f000 fd32 	bl	800c798 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800bd34:	4923      	ldr	r1, [pc, #140]	@ (800bdc4 <LoRaWAN_Init+0x1c0>)
 800bd36:	4824      	ldr	r0, [pc, #144]	@ (800bdc8 <LoRaWAN_Init+0x1c4>)
 800bd38:	f002 fa42 	bl	800e1c0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800bd3c:	4823      	ldr	r0, [pc, #140]	@ (800bdcc <LoRaWAN_Init+0x1c8>)
 800bd3e:	f002 faad 	bl	800e29c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800bd42:	4819      	ldr	r0, [pc, #100]	@ (800bda8 <LoRaWAN_Init+0x1a4>)
 800bd44:	f011 fb2a 	bl	801d39c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800bd48:	4b21      	ldr	r3, [pc, #132]	@ (800bdd0 <LoRaWAN_Init+0x1cc>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	4a21      	ldr	r2, [pc, #132]	@ (800bdd4 <LoRaWAN_Init+0x1d0>)
 800bd4e:	7812      	ldrb	r2, [r2, #0]
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f002 fc06 	bl	800e564 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800bd58:	4b1f      	ldr	r3, [pc, #124]	@ (800bdd8 <LoRaWAN_Init+0x1d4>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10b      	bne.n	800bd78 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800bd60:	4b1e      	ldr	r3, [pc, #120]	@ (800bddc <LoRaWAN_Init+0x1d8>)
 800bd62:	6819      	ldr	r1, [r3, #0]
 800bd64:	2300      	movs	r3, #0
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	4b1d      	ldr	r3, [pc, #116]	@ (800bde0 <LoRaWAN_Init+0x1dc>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	481d      	ldr	r0, [pc, #116]	@ (800bde4 <LoRaWAN_Init+0x1e0>)
 800bd6e:	f011 fadf 	bl	801d330 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800bd72:	481c      	ldr	r0, [pc, #112]	@ (800bde4 <LoRaWAN_Init+0x1e0>)
 800bd74:	f011 fb12 	bl	801d39c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800bd78:	bf00      	nop
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	0801f1c8 	.word	0x0801f1c8
 800bd84:	0801f1ec 	.word	0x0801f1ec
 800bd88:	0801f210 	.word	0x0801f210
 800bd8c:	0801f234 	.word	0x0801f234
 800bd90:	0801f258 	.word	0x0801f258
 800bd94:	0800c2b9 	.word	0x0800c2b9
 800bd98:	20000534 	.word	0x20000534
 800bd9c:	0800c2cb 	.word	0x0800c2cb
 800bda0:	2000054c 	.word	0x2000054c
 800bda4:	0800c2dd 	.word	0x0800c2dd
 800bda8:	20000564 	.word	0x20000564
 800bdac:	0800c699 	.word	0x0800c699
 800bdb0:	20000428 	.word	0x20000428
 800bdb4:	0800e4f9 	.word	0x0800e4f9
 800bdb8:	0800bf59 	.word	0x0800bf59
 800bdbc:	0800c6bd 	.word	0x0800c6bd
 800bdc0:	0800c619 	.word	0x0800c619
 800bdc4:	01030000 	.word	0x01030000
 800bdc8:	20000024 	.word	0x20000024
 800bdcc:	20000070 	.word	0x20000070
 800bdd0:	20000020 	.word	0x20000020
 800bdd4:	20000021 	.word	0x20000021
 800bdd8:	2000040c 	.word	0x2000040c
 800bddc:	20000088 	.word	0x20000088
 800bde0:	0800c295 	.word	0x0800c295
 800bde4:	20000410 	.word	0x20000410

0800bde8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800bdf2:	88fb      	ldrh	r3, [r7, #6]
 800bdf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdf8:	d104      	bne.n	800be04 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	2002      	movs	r0, #2
 800bdfe:	f011 fa17 	bl	801d230 <UTIL_SEQ_SetTask>
      }
      break;
 800be02:	e000      	b.n	800be06 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800be04:	bf00      	nop
  }
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800be10:	b5b0      	push	{r4, r5, r7, lr}
 800be12:	b08a      	sub	sp, #40	@ 0x28
 800be14:	af06      	add	r7, sp, #24
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8086 	beq.w	800bf32 <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800be26:	4845      	ldr	r0, [pc, #276]	@ (800bf3c <OnRxData+0x12c>)
 800be28:	f011 fab8 	bl	801d39c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d05a      	beq.n	800beea <OnRxData+0xda>
    {
      if (appData != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d057      	beq.n	800beea <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d050      	beq.n	800beea <OnRxData+0xda>
        {
          switch (appData->Port)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d01f      	beq.n	800be90 <OnRxData+0x80>
 800be50:	2b03      	cmp	r3, #3
 800be52:	d145      	bne.n	800bee0 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	785b      	ldrb	r3, [r3, #1]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d143      	bne.n	800bee4 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	2b02      	cmp	r3, #2
 800be64:	d00e      	beq.n	800be84 <OnRxData+0x74>
 800be66:	2b02      	cmp	r3, #2
 800be68:	dc10      	bgt.n	800be8c <OnRxData+0x7c>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <OnRxData+0x64>
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d004      	beq.n	800be7c <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800be72:	e00b      	b.n	800be8c <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800be74:	2000      	movs	r0, #0
 800be76:	f002 fd29 	bl	800e8cc <LmHandlerRequestClass>
                    break;
 800be7a:	e008      	b.n	800be8e <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800be7c:	2001      	movs	r0, #1
 800be7e:	f002 fd25 	bl	800e8cc <LmHandlerRequestClass>
                    break;
 800be82:	e004      	b.n	800be8e <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800be84:	2002      	movs	r0, #2
 800be86:	f002 fd21 	bl	800e8cc <LmHandlerRequestClass>
                    break;
 800be8a:	e000      	b.n	800be8e <OnRxData+0x7e>
                    break;
 800be8c:	bf00      	nop
                }
              }
              break;
 800be8e:	e029      	b.n	800bee4 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	785b      	ldrb	r3, [r3, #1]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d127      	bne.n	800bee8 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	f003 0301 	and.w	r3, r3, #1
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	4b26      	ldr	r3, [pc, #152]	@ (800bf40 <OnRxData+0x130>)
 800bea6:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800bea8:	4b25      	ldr	r3, [pc, #148]	@ (800bf40 <OnRxData+0x130>)
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10b      	bne.n	800bec8 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800beb0:	4b24      	ldr	r3, [pc, #144]	@ (800bf44 <OnRxData+0x134>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	2100      	movs	r1, #0
 800beb6:	2003      	movs	r0, #3
 800beb8:	f011 fce8 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800bebc:	2201      	movs	r2, #1
 800bebe:	2120      	movs	r1, #32
 800bec0:	4821      	ldr	r0, [pc, #132]	@ (800bf48 <OnRxData+0x138>)
 800bec2:	f7fa fa19 	bl	80062f8 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800bec6:	e00f      	b.n	800bee8 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800bec8:	4b20      	ldr	r3, [pc, #128]	@ (800bf4c <OnRxData+0x13c>)
 800beca:	2200      	movs	r2, #0
 800becc:	2100      	movs	r1, #0
 800bece:	2003      	movs	r0, #3
 800bed0:	f011 fcdc 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800bed4:	2200      	movs	r2, #0
 800bed6:	2120      	movs	r1, #32
 800bed8:	481b      	ldr	r0, [pc, #108]	@ (800bf48 <OnRxData+0x138>)
 800beda:	f7fa fa0d 	bl	80062f8 <HAL_GPIO_WritePin>
              break;
 800bede:	e003      	b.n	800bee8 <OnRxData+0xd8>

            default:

              break;
 800bee0:	bf00      	nop
 800bee2:	e002      	b.n	800beea <OnRxData+0xda>
              break;
 800bee4:	bf00      	nop
 800bee6:	e000      	b.n	800beea <OnRxData+0xda>
              break;
 800bee8:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	7c1b      	ldrb	r3, [r3, #16]
 800beee:	2b05      	cmp	r3, #5
 800bef0:	d81f      	bhi.n	800bf32 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	7bfa      	ldrb	r2, [r7, #15]
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800befe:	460c      	mov	r4, r1
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	7c09      	ldrb	r1, [r1, #16]
 800bf04:	4608      	mov	r0, r1
 800bf06:	4912      	ldr	r1, [pc, #72]	@ (800bf50 <OnRxData+0x140>)
 800bf08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bf0c:	6838      	ldr	r0, [r7, #0]
 800bf0e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800bf12:	4605      	mov	r5, r0
 800bf14:	6838      	ldr	r0, [r7, #0]
 800bf16:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800bf1a:	9005      	str	r0, [sp, #20]
 800bf1c:	9504      	str	r5, [sp, #16]
 800bf1e:	9103      	str	r1, [sp, #12]
 800bf20:	9402      	str	r4, [sp, #8]
 800bf22:	9201      	str	r2, [sp, #4]
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	4b0b      	ldr	r3, [pc, #44]	@ (800bf54 <OnRxData+0x144>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	2003      	movs	r0, #3
 800bf2e:	f011 fcad 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800bf32:	bf00      	nop
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bdb0      	pop	{r4, r5, r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	2000054c 	.word	0x2000054c
 800bf40:	20000532 	.word	0x20000532
 800bf44:	0801f27c 	.word	0x0801f27c
 800bf48:	48000400 	.word	0x48000400
 800bf4c:	0801f288 	.word	0x0801f288
 800bf50:	20000008 	.word	0x20000008
 800bf54:	0801f294 	.word	0x0801f294

0800bf58 <SendTxData>:

static void SendTxData(void)
{
 800bf58:	b590      	push	{r4, r7, lr}
 800bf5a:	b091      	sub	sp, #68	@ 0x44
 800bf5c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800bf5e:	23ff      	movs	r3, #255	@ 0xff
 800bf60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800bf64:	f7f7 f834 	bl	8002fd0 <GetBatteryLevel>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	637b      	str	r3, [r7, #52]	@ 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 800bf82:	2300      	movs	r3, #0
 800bf84:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800bf8e:	1d3b      	adds	r3, r7, #4
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f7 f9e1 	bl	8003358 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800bf96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	4b97      	ldr	r3, [pc, #604]	@ (800c1fc <SendTxData+0x2a4>)
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	2002      	movs	r0, #2
 800bfa4:	f011 fc72 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7f5 f82e 	bl	800100c <__aeabi_f2iz>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	b21b      	sxth	r3, r3
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	4b92      	ldr	r3, [pc, #584]	@ (800c200 <SendTxData+0x2a8>)
 800bfb8:	2201      	movs	r2, #1
 800bfba:	2100      	movs	r1, #0
 800bfbc:	2002      	movs	r0, #2
 800bfbe:	f011 fc65 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800bfc2:	4b90      	ldr	r3, [pc, #576]	@ (800c204 <SendTxData+0x2ac>)
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 100);            /* in %*10     */
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	498f      	ldr	r1, [pc, #572]	@ (800c208 <SendTxData+0x2b0>)
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7f4 fecd 	bl	8000d6c <__aeabi_fmul>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7f5 f83f 	bl	8001058 <__aeabi_f2uiz>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	853b      	strh	r3, [r7, #40]	@ 0x28
    temperature = (int16_t)(sensor_data.temperature * 100);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	4989      	ldr	r1, [pc, #548]	@ (800c208 <SendTxData+0x2b0>)
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7f4 fec2 	bl	8000d6c <__aeabi_fmul>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f5 f80e 	bl	800100c <__aeabi_f2iz>
 800bff0:	4603      	mov	r3, r0
 800bff2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4984      	ldr	r1, [pc, #528]	@ (800c208 <SendTxData+0x2b0>)
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7f4 feb7 	bl	8000d6c <__aeabi_fmul>
 800bffe:	4603      	mov	r3, r0
 800c000:	4982      	ldr	r1, [pc, #520]	@ (800c20c <SendTxData+0x2b4>)
 800c002:	4618      	mov	r0, r3
 800c004:	f7f4 ff66 	bl	8000ed4 <__aeabi_fdiv>
 800c008:	4603      	mov	r3, r0
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7f5 f824 	bl	8001058 <__aeabi_f2uiz>
 800c010:	4603      	mov	r3, r0
 800c012:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    AppData.Buffer[i++] = AppLedStateOn;
 800c014:	4b7b      	ldr	r3, [pc, #492]	@ (800c204 <SendTxData+0x2ac>)
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01a:	1c59      	adds	r1, r3, #1
 800c01c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c01e:	4413      	add	r3, r2
 800c020:	4a7b      	ldr	r2, [pc, #492]	@ (800c210 <SendTxData+0x2b8>)
 800c022:	7812      	ldrb	r2, [r2, #0]
 800c024:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800c026:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c028:	0a1b      	lsrs	r3, r3, #8
 800c02a:	b298      	uxth	r0, r3
 800c02c:	4b75      	ldr	r3, [pc, #468]	@ (800c204 <SendTxData+0x2ac>)
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c032:	1c59      	adds	r1, r3, #1
 800c034:	6339      	str	r1, [r7, #48]	@ 0x30
 800c036:	4413      	add	r3, r2
 800c038:	b2c2      	uxtb	r2, r0
 800c03a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800c03c:	4b71      	ldr	r3, [pc, #452]	@ (800c204 <SendTxData+0x2ac>)
 800c03e:	685a      	ldr	r2, [r3, #4]
 800c040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c042:	1c59      	adds	r1, r3, #1
 800c044:	6339      	str	r1, [r7, #48]	@ 0x30
 800c046:	4413      	add	r3, r2
 800c048:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((temperature >> 8) & 0xFF);
 800c04e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800c052:	121b      	asrs	r3, r3, #8
 800c054:	b218      	sxth	r0, r3
 800c056:	4b6b      	ldr	r3, [pc, #428]	@ (800c204 <SendTxData+0x2ac>)
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05c:	1c59      	adds	r1, r3, #1
 800c05e:	6339      	str	r1, [r7, #48]	@ 0x30
 800c060:	4413      	add	r3, r2
 800c062:	b2c2      	uxtb	r2, r0
 800c064:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800c066:	4b67      	ldr	r3, [pc, #412]	@ (800c204 <SendTxData+0x2ac>)
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06c:	1c59      	adds	r1, r3, #1
 800c06e:	6339      	str	r1, [r7, #48]	@ 0x30
 800c070:	4413      	add	r3, r2
 800c072:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800c078:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	b298      	uxth	r0, r3
 800c07e:	4b61      	ldr	r3, [pc, #388]	@ (800c204 <SendTxData+0x2ac>)
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c084:	1c59      	adds	r1, r3, #1
 800c086:	6339      	str	r1, [r7, #48]	@ 0x30
 800c088:	4413      	add	r3, r2
 800c08a:	b2c2      	uxtb	r2, r0
 800c08c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800c08e:	4b5d      	ldr	r3, [pc, #372]	@ (800c204 <SendTxData+0x2ac>)
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c094:	1c59      	adds	r1, r3, #1
 800c096:	6339      	str	r1, [r7, #48]	@ 0x30
 800c098:	4413      	add	r3, r2
 800c09a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c09c:	b2d2      	uxtb	r2, r2
 800c09e:	701a      	strb	r2, [r3, #0]

    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800c0a0:	4b5c      	ldr	r3, [pc, #368]	@ (800c214 <SendTxData+0x2bc>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	2b08      	cmp	r3, #8
 800c0a6:	d007      	beq.n	800c0b8 <SendTxData+0x160>
 800c0a8:	4b5a      	ldr	r3, [pc, #360]	@ (800c214 <SendTxData+0x2bc>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d003      	beq.n	800c0b8 <SendTxData+0x160>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800c0b0:	4b58      	ldr	r3, [pc, #352]	@ (800c214 <SendTxData+0x2bc>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d120      	bne.n	800c0fa <SendTxData+0x1a2>
    {
      AppData.Buffer[i++] = 0;
 800c0b8:	4b52      	ldr	r3, [pc, #328]	@ (800c204 <SendTxData+0x2ac>)
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0be:	1c59      	adds	r1, r3, #1
 800c0c0:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0c2:	4413      	add	r3, r2
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = 0;
 800c0c8:	4b4e      	ldr	r3, [pc, #312]	@ (800c204 <SendTxData+0x2ac>)
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	1c59      	adds	r1, r3, #1
 800c0d0:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0d2:	4413      	add	r3, r2
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = 0;
 800c0d8:	4b4a      	ldr	r3, [pc, #296]	@ (800c204 <SendTxData+0x2ac>)
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0de:	1c59      	adds	r1, r3, #1
 800c0e0:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0e2:	4413      	add	r3, r2
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = 0;
 800c0e8:	4b46      	ldr	r3, [pc, #280]	@ (800c204 <SendTxData+0x2ac>)
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ee:	1c59      	adds	r1, r3, #1
 800c0f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0f2:	4413      	add	r3, r2
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	701a      	strb	r2, [r3, #0]
 800c0f8:	e05b      	b.n	800c1b2 <SendTxData+0x25a>
    }
    else
    {
      latitude = sensor_data.latitude;
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	627b      	str	r3, [r7, #36]	@ 0x24
      longitude = sensor_data.longitude;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	623b      	str	r3, [r7, #32]

      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800c102:	4b40      	ldr	r3, [pc, #256]	@ (800c204 <SendTxData+0x2ac>)
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c108:	1c59      	adds	r1, r3, #1
 800c10a:	6339      	str	r1, [r7, #48]	@ 0x30
 800c10c:	18d4      	adds	r4, r2, r3
 800c10e:	f7f6 ff5f 	bl	8002fd0 <GetBatteryLevel>
 800c112:	4603      	mov	r3, r0
 800c114:	7023      	strb	r3, [r4, #0]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800c116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c118:	1418      	asrs	r0, r3, #16
 800c11a:	4b3a      	ldr	r3, [pc, #232]	@ (800c204 <SendTxData+0x2ac>)
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c120:	1c59      	adds	r1, r3, #1
 800c122:	6339      	str	r1, [r7, #48]	@ 0x30
 800c124:	4413      	add	r3, r2
 800c126:	b2c2      	uxtb	r2, r0
 800c128:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800c12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12c:	1218      	asrs	r0, r3, #8
 800c12e:	4b35      	ldr	r3, [pc, #212]	@ (800c204 <SendTxData+0x2ac>)
 800c130:	685a      	ldr	r2, [r3, #4]
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	1c59      	adds	r1, r3, #1
 800c136:	6339      	str	r1, [r7, #48]	@ 0x30
 800c138:	4413      	add	r3, r2
 800c13a:	b2c2      	uxtb	r2, r0
 800c13c:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800c13e:	4b31      	ldr	r3, [pc, #196]	@ (800c204 <SendTxData+0x2ac>)
 800c140:	685a      	ldr	r2, [r3, #4]
 800c142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c144:	1c59      	adds	r1, r3, #1
 800c146:	6339      	str	r1, [r7, #48]	@ 0x30
 800c148:	4413      	add	r3, r2
 800c14a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c14c:	b2d2      	uxtb	r2, r2
 800c14e:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	1418      	asrs	r0, r3, #16
 800c154:	4b2b      	ldr	r3, [pc, #172]	@ (800c204 <SendTxData+0x2ac>)
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15a:	1c59      	adds	r1, r3, #1
 800c15c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c15e:	4413      	add	r3, r2
 800c160:	b2c2      	uxtb	r2, r0
 800c162:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	1218      	asrs	r0, r3, #8
 800c168:	4b26      	ldr	r3, [pc, #152]	@ (800c204 <SendTxData+0x2ac>)
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c16e:	1c59      	adds	r1, r3, #1
 800c170:	6339      	str	r1, [r7, #48]	@ 0x30
 800c172:	4413      	add	r3, r2
 800c174:	b2c2      	uxtb	r2, r0
 800c176:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800c178:	4b22      	ldr	r3, [pc, #136]	@ (800c204 <SendTxData+0x2ac>)
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17e:	1c59      	adds	r1, r3, #1
 800c180:	6339      	str	r1, [r7, #48]	@ 0x30
 800c182:	4413      	add	r3, r2
 800c184:	6a3a      	ldr	r2, [r7, #32]
 800c186:	b2d2      	uxtb	r2, r2
 800c188:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800c18a:	8bfb      	ldrh	r3, [r7, #30]
 800c18c:	0a1b      	lsrs	r3, r3, #8
 800c18e:	b298      	uxth	r0, r3
 800c190:	4b1c      	ldr	r3, [pc, #112]	@ (800c204 <SendTxData+0x2ac>)
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c196:	1c59      	adds	r1, r3, #1
 800c198:	6339      	str	r1, [r7, #48]	@ 0x30
 800c19a:	4413      	add	r3, r2
 800c19c:	b2c2      	uxtb	r2, r0
 800c19e:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800c1a0:	4b18      	ldr	r3, [pc, #96]	@ (800c204 <SendTxData+0x2ac>)
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a6:	1c59      	adds	r1, r3, #1
 800c1a8:	6339      	str	r1, [r7, #48]	@ 0x30
 800c1aa:	4413      	add	r3, r2
 800c1ac:	8bfa      	ldrh	r2, [r7, #30]
 800c1ae:	b2d2      	uxtb	r2, r2
 800c1b0:	701a      	strb	r2, [r3, #0]
    }

  AppData.BufferSize = i;
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b4:	b2da      	uxtb	r2, r3
 800c1b6:	4b13      	ldr	r3, [pc, #76]	@ (800c204 <SendTxData+0x2ac>)
 800c1b8:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c1ba:	4b17      	ldr	r3, [pc, #92]	@ (800c218 <SendTxData+0x2c0>)
 800c1bc:	7a5b      	ldrb	r3, [r3, #9]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d007      	beq.n	800c1d2 <SendTxData+0x27a>
 800c1c2:	f002 fa71 	bl	800e6a8 <LmHandlerJoinStatus>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d102      	bne.n	800c1d2 <SendTxData+0x27a>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800c1cc:	4812      	ldr	r0, [pc, #72]	@ (800c218 <SendTxData+0x2c0>)
 800c1ce:	f011 f953 	bl	801d478 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800c1d2:	4b10      	ldr	r3, [pc, #64]	@ (800c214 <SendTxData+0x2bc>)
 800c1d4:	78db      	ldrb	r3, [r3, #3]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	4619      	mov	r1, r3
 800c1da:	480a      	ldr	r0, [pc, #40]	@ (800c204 <SendTxData+0x2ac>)
 800c1dc:	f002 fa80 	bl	800e6e0 <LmHandlerSend>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800c1e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d118      	bne.n	800c220 <SendTxData+0x2c8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800c1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c21c <SendTxData+0x2c4>)
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	f011 fb49 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
 800c1fa:	e028      	b.n	800c24e <SendTxData+0x2f6>
 800c1fc:	0801f2dc 	.word	0x0801f2dc
 800c200:	0801f2e8 	.word	0x0801f2e8
 800c204:	2000008c 	.word	0x2000008c
 800c208:	42c80000 	.word	0x42c80000
 800c20c:	41200000 	.word	0x41200000
 800c210:	20000532 	.word	0x20000532
 800c214:	20000070 	.word	0x20000070
 800c218:	20000564 	.word	0x20000564
 800c21c:	0801f2f4 	.word	0x0801f2f4
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800c220:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c224:	f113 0f06 	cmn.w	r3, #6
 800c228:	d111      	bne.n	800c24e <SendTxData+0x2f6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800c22a:	f002 f991 	bl	800e550 <LmHandlerGetDutyCycleWaitTime>
 800c22e:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 800c230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00b      	beq.n	800c24e <SendTxData+0x2f6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800c236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c238:	4a11      	ldr	r2, [pc, #68]	@ (800c280 <SendTxData+0x328>)
 800c23a:	fba2 2303 	umull	r2, r3, r2, r3
 800c23e:	099b      	lsrs	r3, r3, #6
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	4b10      	ldr	r3, [pc, #64]	@ (800c284 <SendTxData+0x32c>)
 800c244:	2201      	movs	r2, #1
 800c246:	2100      	movs	r1, #0
 800c248:	2001      	movs	r0, #1
 800c24a:	f011 fb1f 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800c24e:	4b0e      	ldr	r3, [pc, #56]	@ (800c288 <SendTxData+0x330>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10f      	bne.n	800c276 <SendTxData+0x31e>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800c256:	480d      	ldr	r0, [pc, #52]	@ (800c28c <SendTxData+0x334>)
 800c258:	f011 f90e 	bl	801d478 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800c25c:	4b0c      	ldr	r3, [pc, #48]	@ (800c290 <SendTxData+0x338>)
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c262:	4293      	cmp	r3, r2
 800c264:	bf38      	it	cc
 800c266:	4613      	movcc	r3, r2
 800c268:	4619      	mov	r1, r3
 800c26a:	4808      	ldr	r0, [pc, #32]	@ (800c28c <SendTxData+0x334>)
 800c26c:	f011 f974 	bl	801d558 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800c270:	4806      	ldr	r0, [pc, #24]	@ (800c28c <SendTxData+0x334>)
 800c272:	f011 f893 	bl	801d39c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800c276:	bf00      	nop
 800c278:	373c      	adds	r7, #60	@ 0x3c
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd90      	pop	{r4, r7, pc}
 800c27e:	bf00      	nop
 800c280:	10624dd3 	.word	0x10624dd3
 800c284:	0801f304 	.word	0x0801f304
 800c288:	2000040c 	.word	0x2000040c
 800c28c:	20000410 	.word	0x20000410
 800c290:	20000088 	.word	0x20000088

0800c294 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c29c:	2100      	movs	r1, #0
 800c29e:	2002      	movs	r0, #2
 800c2a0:	f010 ffc6 	bl	801d230 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800c2a4:	4803      	ldr	r0, [pc, #12]	@ (800c2b4 <OnTxTimerEvent+0x20>)
 800c2a6:	f011 f879 	bl	801d39c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800c2aa:	bf00      	nop
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000410 	.word	0x20000410

0800c2b8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bc80      	pop	{r7}
 800c2c8:	4770      	bx	lr

0800c2ca <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800c2d2:	bf00      	nop
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bc80      	pop	{r7}
 800c2da:	4770      	bx	lr

0800c2dc <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bc80      	pop	{r7}
 800c2ec:	4770      	bx	lr
	...

0800c2f0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af04      	add	r7, sp, #16
 800c2f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d041      	beq.n	800c382 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d03d      	beq.n	800c382 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800c306:	4821      	ldr	r0, [pc, #132]	@ (800c38c <OnTxData+0x9c>)
 800c308:	f011 f848 	bl	801d39c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800c30c:	4b20      	ldr	r3, [pc, #128]	@ (800c390 <OnTxData+0xa0>)
 800c30e:	2200      	movs	r2, #0
 800c310:	2100      	movs	r1, #0
 800c312:	2002      	movs	r0, #2
 800c314:	f011 faba 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	7c12      	ldrb	r2, [r2, #16]
 800c320:	4611      	mov	r1, r2
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800c328:	4610      	mov	r0, r2
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800c330:	9203      	str	r2, [sp, #12]
 800c332:	9002      	str	r0, [sp, #8]
 800c334:	9101      	str	r1, [sp, #4]
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	4b16      	ldr	r3, [pc, #88]	@ (800c394 <OnTxData+0xa4>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	2100      	movs	r1, #0
 800c33e:	2003      	movs	r0, #3
 800c340:	f011 faa4 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800c344:	4b14      	ldr	r3, [pc, #80]	@ (800c398 <OnTxData+0xa8>)
 800c346:	2200      	movs	r2, #0
 800c348:	2100      	movs	r1, #0
 800c34a:	2003      	movs	r0, #3
 800c34c:	f011 fa9e 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	7a1b      	ldrb	r3, [r3, #8]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d10e      	bne.n	800c376 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7a5b      	ldrb	r3, [r3, #9]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <OnTxData+0x74>
 800c360:	4b0e      	ldr	r3, [pc, #56]	@ (800c39c <OnTxData+0xac>)
 800c362:	e000      	b.n	800c366 <OnTxData+0x76>
 800c364:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a0 <OnTxData+0xb0>)
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a4 <OnTxData+0xb4>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	2100      	movs	r1, #0
 800c36e:	2003      	movs	r0, #3
 800c370:	f011 fa8c 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800c374:	e005      	b.n	800c382 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800c376:	4b0c      	ldr	r3, [pc, #48]	@ (800c3a8 <OnTxData+0xb8>)
 800c378:	2200      	movs	r2, #0
 800c37a:	2100      	movs	r1, #0
 800c37c:	2003      	movs	r0, #3
 800c37e:	f011 fa85 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 800c382:	bf00      	nop
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20000534 	.word	0x20000534
 800c390:	0801f324 	.word	0x0801f324
 800c394:	0801f358 	.word	0x0801f358
 800c398:	0801f38c 	.word	0x0801f38c
 800c39c:	0801f39c 	.word	0x0801f39c
 800c3a0:	0801f3a0 	.word	0x0801f3a0
 800c3a4:	0801f3a8 	.word	0x0801f3a8
 800c3a8:	0801f3bc 	.word	0x0801f3bc

0800c3ac <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d039      	beq.n	800c42e <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d11e      	bne.n	800c402 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	2004      	movs	r0, #4
 800c3c8:	f010 ff32 	bl	801d230 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800c3cc:	481a      	ldr	r0, [pc, #104]	@ (800c438 <OnJoinRequest+0x8c>)
 800c3ce:	f011 f853 	bl	801d478 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800c3d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c43c <OnJoinRequest+0x90>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	2002      	movs	r0, #2
 800c3da:	f011 fa57 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	79db      	ldrb	r3, [r3, #7]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d106      	bne.n	800c3f4 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800c3e6:	4b16      	ldr	r3, [pc, #88]	@ (800c440 <OnJoinRequest+0x94>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	2002      	movs	r0, #2
 800c3ee:	f011 fa4d 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c3f2:	e01c      	b.n	800c42e <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800c3f4:	4b13      	ldr	r3, [pc, #76]	@ (800c444 <OnJoinRequest+0x98>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	2002      	movs	r0, #2
 800c3fc:	f011 fa46 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 800c400:	e015      	b.n	800c42e <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800c402:	4b11      	ldr	r3, [pc, #68]	@ (800c448 <OnJoinRequest+0x9c>)
 800c404:	2200      	movs	r2, #0
 800c406:	2100      	movs	r1, #0
 800c408:	2002      	movs	r0, #2
 800c40a:	f011 fa3f 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	79db      	ldrb	r3, [r3, #7]
 800c412:	2b02      	cmp	r3, #2
 800c414:	d10b      	bne.n	800c42e <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800c416:	4b0d      	ldr	r3, [pc, #52]	@ (800c44c <OnJoinRequest+0xa0>)
 800c418:	2200      	movs	r2, #0
 800c41a:	2100      	movs	r1, #0
 800c41c:	2002      	movs	r0, #2
 800c41e:	f011 fa35 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c422:	4b0b      	ldr	r3, [pc, #44]	@ (800c450 <OnJoinRequest+0xa4>)
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	2101      	movs	r1, #1
 800c428:	4618      	mov	r0, r3
 800c42a:	f002 f89b 	bl	800e564 <LmHandlerJoin>
}
 800c42e:	bf00      	nop
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20000564 	.word	0x20000564
 800c43c:	0801f3cc 	.word	0x0801f3cc
 800c440:	0801f3e4 	.word	0x0801f3e4
 800c444:	0801f404 	.word	0x0801f404
 800c448:	0801f424 	.word	0x0801f424
 800c44c:	0801f440 	.word	0x0801f440
 800c450:	20000020 	.word	0x20000020

0800c454 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c456:	b093      	sub	sp, #76	@ 0x4c
 800c458:	af0c      	add	r7, sp, #48	@ 0x30
 800c45a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d056      	beq.n	800c510 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	785b      	ldrb	r3, [r3, #1]
 800c466:	2b02      	cmp	r3, #2
 800c468:	d008      	beq.n	800c47c <OnBeaconStatusChange+0x28>
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d049      	beq.n	800c502 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800c46e:	4b2a      	ldr	r3, [pc, #168]	@ (800c518 <OnBeaconStatusChange+0xc4>)
 800c470:	2200      	movs	r2, #0
 800c472:	2100      	movs	r1, #0
 800c474:	2002      	movs	r0, #2
 800c476:	f011 fa09 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c47a:	e049      	b.n	800c510 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	7c1b      	ldrb	r3, [r3, #16]
 800c480:	4618      	mov	r0, r3
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c488:	461c      	mov	r4, r3
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800c490:	461d      	mov	r5, r3
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	6852      	ldr	r2, [r2, #4]
 800c49a:	6979      	ldr	r1, [r7, #20]
 800c49c:	7d89      	ldrb	r1, [r1, #22]
 800c49e:	460e      	mov	r6, r1
 800c4a0:	6979      	ldr	r1, [r7, #20]
 800c4a2:	7dc9      	ldrb	r1, [r1, #23]
 800c4a4:	6139      	str	r1, [r7, #16]
 800c4a6:	6979      	ldr	r1, [r7, #20]
 800c4a8:	7e09      	ldrb	r1, [r1, #24]
 800c4aa:	60f9      	str	r1, [r7, #12]
 800c4ac:	6979      	ldr	r1, [r7, #20]
 800c4ae:	7e49      	ldrb	r1, [r1, #25]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	6979      	ldr	r1, [r7, #20]
 800c4b4:	7e89      	ldrb	r1, [r1, #26]
 800c4b6:	6079      	str	r1, [r7, #4]
 800c4b8:	6979      	ldr	r1, [r7, #20]
 800c4ba:	7ec9      	ldrb	r1, [r1, #27]
 800c4bc:	6039      	str	r1, [r7, #0]
 800c4be:	6979      	ldr	r1, [r7, #20]
 800c4c0:	7f09      	ldrb	r1, [r1, #28]
 800c4c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c4c4:	f8d7 c000 	ldr.w	ip, [r7]
 800c4c8:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800c4cc:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800c4d0:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800c4d4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800c4d8:	f8cd c020 	str.w	ip, [sp, #32]
 800c4dc:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800c4e0:	f8cd c01c 	str.w	ip, [sp, #28]
 800c4e4:	6939      	ldr	r1, [r7, #16]
 800c4e6:	9106      	str	r1, [sp, #24]
 800c4e8:	9605      	str	r6, [sp, #20]
 800c4ea:	9204      	str	r2, [sp, #16]
 800c4ec:	9303      	str	r3, [sp, #12]
 800c4ee:	9502      	str	r5, [sp, #8]
 800c4f0:	9401      	str	r4, [sp, #4]
 800c4f2:	9000      	str	r0, [sp, #0]
 800c4f4:	4b09      	ldr	r3, [pc, #36]	@ (800c51c <OnBeaconStatusChange+0xc8>)
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	2002      	movs	r0, #2
 800c4fc:	f011 f9c6 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800c500:	e006      	b.n	800c510 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800c502:	4b07      	ldr	r3, [pc, #28]	@ (800c520 <OnBeaconStatusChange+0xcc>)
 800c504:	2200      	movs	r2, #0
 800c506:	2100      	movs	r1, #0
 800c508:	2002      	movs	r0, #2
 800c50a:	f011 f9bf 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c50e:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c510:	bf00      	nop
 800c512:	371c      	adds	r7, #28
 800c514:	46bd      	mov	sp, r7
 800c516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c518:	0801f464 	.word	0x0801f464
 800c51c:	0801f47c 	.word	0x0801f47c
 800c520:	0801f4f0 	.word	0x0801f4f0

0800c524 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800c524:	b480      	push	{r7}
 800c526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800c528:	bf00      	nop
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bc80      	pop	{r7}
 800c52e:	4770      	bx	lr

0800c530 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af02      	add	r7, sp, #8
 800c536:	4603      	mov	r3, r0
 800c538:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	4a06      	ldr	r2, [pc, #24]	@ (800c558 <OnClassChange+0x28>)
 800c53e:	5cd3      	ldrb	r3, [r2, r3]
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	4b06      	ldr	r3, [pc, #24]	@ (800c55c <OnClassChange+0x2c>)
 800c544:	2200      	movs	r2, #0
 800c546:	2100      	movs	r1, #0
 800c548:	2002      	movs	r0, #2
 800c54a:	f011 f99f 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	0801f52c 	.word	0x0801f52c
 800c55c:	0801f510 	.word	0x0801f510

0800c560 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c564:	2100      	movs	r1, #0
 800c566:	2001      	movs	r0, #1
 800c568:	f010 fe62 	bl	801d230 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c56c:	bf00      	nop
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c578:	4a0d      	ldr	r2, [pc, #52]	@ (800c5b0 <OnTxPeriodicityChanged+0x40>)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c57e:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b0 <OnTxPeriodicityChanged+0x40>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d103      	bne.n	800c58e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c586:	4b0a      	ldr	r3, [pc, #40]	@ (800c5b0 <OnTxPeriodicityChanged+0x40>)
 800c588:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c58c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c58e:	4809      	ldr	r0, [pc, #36]	@ (800c5b4 <OnTxPeriodicityChanged+0x44>)
 800c590:	f010 ff72 	bl	801d478 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c594:	4b06      	ldr	r3, [pc, #24]	@ (800c5b0 <OnTxPeriodicityChanged+0x40>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4619      	mov	r1, r3
 800c59a:	4806      	ldr	r0, [pc, #24]	@ (800c5b4 <OnTxPeriodicityChanged+0x44>)
 800c59c:	f010 ffdc 	bl	801d558 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c5a0:	4804      	ldr	r0, [pc, #16]	@ (800c5b4 <OnTxPeriodicityChanged+0x44>)
 800c5a2:	f010 fefb 	bl	801d39c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c5a6:	bf00      	nop
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20000088 	.word	0x20000088
 800c5b4:	20000410 	.word	0x20000410

0800c5b8 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c5c2:	4a04      	ldr	r2, [pc, #16]	@ (800c5d4 <OnTxFrameCtrlChanged+0x1c>)
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bc80      	pop	{r7}
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	20000070 	.word	0x20000070

0800c5d8 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c5e2:	4a04      	ldr	r2, [pc, #16]	@ (800c5f4 <OnPingSlotPeriodicityChanged+0x1c>)
 800c5e4:	79fb      	ldrb	r3, [r7, #7]
 800c5e6:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bc80      	pop	{r7}
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	20000070 	.word	0x20000070

0800c5f8 <OnSystemReset>:

static void OnSystemReset(void)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c5fc:	f002 fdab 	bl	800f156 <LmHandlerHalt>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d106      	bne.n	800c614 <OnSystemReset+0x1c>
 800c606:	f002 f84f 	bl	800e6a8 <LmHandlerJoinStatus>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d101      	bne.n	800c614 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c610:	f7ff fae2 	bl	800bbd8 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c614:	bf00      	nop
 800c616:	bd80      	pop	{r7, pc}

0800c618 <StopJoin>:

static void StopJoin(void)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c61c:	4817      	ldr	r0, [pc, #92]	@ (800c67c <StopJoin+0x64>)
 800c61e:	f010 ff2b 	bl	801d478 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c622:	f002 fd8b 	bl	800f13c <LmHandlerStop>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d006      	beq.n	800c63a <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800c62c:	4b14      	ldr	r3, [pc, #80]	@ (800c680 <StopJoin+0x68>)
 800c62e:	2200      	movs	r2, #0
 800c630:	2100      	movs	r1, #0
 800c632:	2002      	movs	r0, #2
 800c634:	f011 f92a 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
 800c638:	e01a      	b.n	800c670 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800c63a:	4b12      	ldr	r3, [pc, #72]	@ (800c684 <StopJoin+0x6c>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	2100      	movs	r1, #0
 800c640:	2002      	movs	r0, #2
 800c642:	f011 f923 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800c646:	4b10      	ldr	r3, [pc, #64]	@ (800c688 <StopJoin+0x70>)
 800c648:	2201      	movs	r2, #1
 800c64a:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800c64c:	4b0f      	ldr	r3, [pc, #60]	@ (800c68c <StopJoin+0x74>)
 800c64e:	2200      	movs	r2, #0
 800c650:	2100      	movs	r1, #0
 800c652:	2002      	movs	r0, #2
 800c654:	f011 f91a 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800c658:	480d      	ldr	r0, [pc, #52]	@ (800c690 <StopJoin+0x78>)
 800c65a:	f001 fe1f 	bl	800e29c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800c65e:	4b0a      	ldr	r3, [pc, #40]	@ (800c688 <StopJoin+0x70>)
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2101      	movs	r1, #1
 800c664:	4618      	mov	r0, r3
 800c666:	f001 ff7d 	bl	800e564 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800c66a:	4804      	ldr	r0, [pc, #16]	@ (800c67c <StopJoin+0x64>)
 800c66c:	f010 fe96 	bl	801d39c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800c670:	4808      	ldr	r0, [pc, #32]	@ (800c694 <StopJoin+0x7c>)
 800c672:	f010 fe93 	bl	801d39c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800c676:	bf00      	nop
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	20000410 	.word	0x20000410
 800c680:	0801f530 	.word	0x0801f530
 800c684:	0801f550 	.word	0x0801f550
 800c688:	20000020 	.word	0x20000020
 800c68c:	0801f564 	.word	0x0801f564
 800c690:	20000070 	.word	0x20000070
 800c694:	20000428 	.word	0x20000428

0800c698 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800c6a0:	4b05      	ldr	r3, [pc, #20]	@ (800c6b8 <OnStopJoinTimerEvent+0x20>)
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d103      	bne.n	800c6b0 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	2008      	movs	r0, #8
 800c6ac:	f010 fdc0 	bl	801d230 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	20000020 	.word	0x20000020

0800c6bc <StoreContext>:

static void StoreContext(void)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c6c2:	23ff      	movs	r3, #255	@ 0xff
 800c6c4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800c6c6:	f002 fd7b 	bl	800f1c0 <LmHandlerNvmDataStore>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800c6ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6d2:	f113 0f08 	cmn.w	r3, #8
 800c6d6:	d106      	bne.n	800c6e6 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800c6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c704 <StoreContext+0x48>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	2100      	movs	r1, #0
 800c6de:	2002      	movs	r0, #2
 800c6e0:	f011 f8d4 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c6e4:	e00a      	b.n	800c6fc <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800c6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ee:	d105      	bne.n	800c6fc <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800c6f0:	4b05      	ldr	r3, [pc, #20]	@ (800c708 <StoreContext+0x4c>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	2002      	movs	r0, #2
 800c6f8:	f011 f8c8 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	0801f584 	.word	0x0801f584
 800c708:	0801f59c 	.word	0x0801f59c

0800c70c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d106      	bne.n	800c72a <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800c71c:	4b08      	ldr	r3, [pc, #32]	@ (800c740 <OnNvmDataChange+0x34>)
 800c71e:	2200      	movs	r2, #0
 800c720:	2100      	movs	r1, #0
 800c722:	2002      	movs	r0, #2
 800c724:	f011 f8b2 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c728:	e005      	b.n	800c736 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800c72a:	4b06      	ldr	r3, [pc, #24]	@ (800c744 <OnNvmDataChange+0x38>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	2100      	movs	r1, #0
 800c730:	2002      	movs	r0, #2
 800c732:	f011 f8ab 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 800c736:	bf00      	nop
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	0801f5b4 	.word	0x0801f5b4
 800c744:	0801f5c8 	.word	0x0801f5c8

0800c748 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800c752:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c756:	4807      	ldr	r0, [pc, #28]	@ (800c774 <OnStoreContextRequest+0x2c>)
 800c758:	f7f5 fe48 	bl	80023ec <FLASH_IF_Erase>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d104      	bne.n	800c76c <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	6879      	ldr	r1, [r7, #4]
 800c766:	4803      	ldr	r0, [pc, #12]	@ (800c774 <OnStoreContextRequest+0x2c>)
 800c768:	f7f5 fdf0 	bl	800234c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c76c:	bf00      	nop
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	0803f000 	.word	0x0803f000

0800c778 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	4903      	ldr	r1, [pc, #12]	@ (800c794 <OnRestoreContextRequest+0x1c>)
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7f5 fe08 	bl	800239c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	0803f000 	.word	0x0803f000

0800c798 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800c79c:	4b15      	ldr	r3, [pc, #84]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c7a2:	4b14      	ldr	r3, [pc, #80]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c7a8:	4b12      	ldr	r3, [pc, #72]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c7ae:	4b11      	ldr	r3, [pc, #68]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	f043 0320 	orr.w	r3, r3, #32
 800c7bc:	4a0d      	ldr	r2, [pc, #52]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c7be:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10d      	bne.n	800c7e4 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c7f8 <LoraInfo_Init+0x60>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	f011 f85c 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c7d4:	bf00      	nop
 800c7d6:	f011 f847 	bl	801d868 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d1fa      	bne.n	800c7d6 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c7e0:	bf00      	nop
 800c7e2:	e7fd      	b.n	800c7e0 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c7e4:	4b03      	ldr	r3, [pc, #12]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800c7ea:	4b02      	ldr	r3, [pc, #8]	@ (800c7f4 <LoraInfo_Init+0x5c>)
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c7f0:	bf00      	nop
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	2000057c 	.word	0x2000057c
 800c7f8:	0801f5dc 	.word	0x0801f5dc

0800c7fc <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c800:	4b02      	ldr	r3, [pc, #8]	@ (800c80c <LoraInfo_GetPtr+0x10>)
}
 800c802:	4618      	mov	r0, r3
 800c804:	46bd      	mov	sp, r7
 800c806:	bc80      	pop	{r7}
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	2000057c 	.word	0x2000057c

0800c810 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c814:	f7f7 fa83 	bl	8003d1e <BSP_RADIO_Init>
 800c818:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b082      	sub	sp, #8
 800c822:	af00      	add	r7, sp, #0
 800c824:	4603      	mov	r3, r0
 800c826:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7f7 faa8 	bl	8003d80 <BSP_RADIO_ConfigRFSwitch>
 800c830:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c832:	4618      	mov	r0, r3
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c83e:	f7f7 faed 	bl	8003e1c <BSP_RADIO_GetTxConfig>
 800c842:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c844:	4618      	mov	r0, r3
 800c846:	bd80      	pop	{r7, pc}

0800c848 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c84c:	f7f7 faed 	bl	8003e2a <BSP_RADIO_IsTCXO>
 800c850:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c852:	4618      	mov	r0, r3
 800c854:	bd80      	pop	{r7, pc}

0800c856 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c85a:	f7f7 faed 	bl	8003e38 <BSP_RADIO_IsDCDC>
 800c85e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c860:	4618      	mov	r0, r3
 800c862:	bd80      	pop	{r7, pc}

0800c864 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	4618      	mov	r0, r3
 800c872:	f7f7 fae8 	bl	8003e46 <BSP_RADIO_GetRFOMaxPowerConfig>
 800c876:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	33f1      	adds	r3, #241	@ 0xf1
 800c88c:	2210      	movs	r2, #16
 800c88e:	2100      	movs	r1, #0
 800c890:	4618      	mov	r0, r3
 800c892:	f00c fcdf 	bl	8019254 <memset1>
    ctx->M_n = 0;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	22f0      	movs	r2, #240	@ 0xf0
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f00c fcd5 	bl	8019254 <memset1>
}
 800c8aa:	bf00      	nop
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	2110      	movs	r1, #16
 800c8c2:	6838      	ldr	r0, [r7, #0]
 800c8c4:	f000 fe5c 	bl	800d580 <lorawan_aes_set_key>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b08c      	sub	sp, #48	@ 0x30
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 80a1 	beq.w	800ca2a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c8ee:	f1c3 0310 	rsb	r3, r3, #16
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	bf28      	it	cs
 800c8f8:	4613      	movcs	r3, r2
 800c8fa:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c908:	4413      	add	r3, r2
 800c90a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c90c:	b292      	uxth	r2, r2
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	4618      	mov	r0, r3
 800c912:	f00c fc64 	bl	80191de <memcpy1>
        ctx->M_n += mlen;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	441a      	add	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c92c:	2b0f      	cmp	r3, #15
 800c92e:	f240 808d 	bls.w	800ca4c <AES_CMAC_Update+0x17c>
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c936:	429a      	cmp	r2, r3
 800c938:	f000 8088 	beq.w	800ca4c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c93c:	2300      	movs	r3, #0
 800c93e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c940:	e015      	b.n	800c96e <AES_CMAC_Update+0x9e>
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c946:	4413      	add	r3, r2
 800c948:	33f1      	adds	r3, #241	@ 0xf1
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	68f9      	ldr	r1, [r7, #12]
 800c94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c950:	440b      	add	r3, r1
 800c952:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	4053      	eors	r3, r2
 800c95a:	b2d9      	uxtb	r1, r3
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	4413      	add	r3, r2
 800c962:	33f1      	adds	r3, #241	@ 0xf1
 800c964:	460a      	mov	r2, r1
 800c966:	701a      	strb	r2, [r3, #0]
 800c968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96a:	3301      	adds	r3, #1
 800c96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c970:	2b0f      	cmp	r3, #15
 800c972:	dde6      	ble.n	800c942 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c97a:	f107 0314 	add.w	r3, r7, #20
 800c97e:	2210      	movs	r2, #16
 800c980:	4618      	mov	r0, r3
 800c982:	f00c fc2c 	bl	80191de <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	f107 0114 	add.w	r1, r7, #20
 800c98c:	f107 0314 	add.w	r3, r7, #20
 800c990:	4618      	mov	r0, r3
 800c992:	f000 fed3 	bl	800d73c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	33f1      	adds	r3, #241	@ 0xf1
 800c99a:	f107 0114 	add.w	r1, r7, #20
 800c99e:	2210      	movs	r2, #16
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f00c fc1c 	bl	80191de <memcpy1>

        data += mlen;
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9aa:	4413      	add	r3, r2
 800c9ac:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c9b6:	e038      	b.n	800ca2a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9bc:	e013      	b.n	800c9e6 <AES_CMAC_Update+0x116>
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c2:	4413      	add	r3, r2
 800c9c4:	33f1      	adds	r3, #241	@ 0xf1
 800c9c6:	781a      	ldrb	r2, [r3, #0]
 800c9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ca:	68b9      	ldr	r1, [r7, #8]
 800c9cc:	440b      	add	r3, r1
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	4053      	eors	r3, r2
 800c9d2:	b2d9      	uxtb	r1, r3
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d8:	4413      	add	r3, r2
 800c9da:	33f1      	adds	r3, #241	@ 0xf1
 800c9dc:	460a      	mov	r2, r1
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e8:	2b0f      	cmp	r3, #15
 800c9ea:	dde8      	ble.n	800c9be <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c9f2:	f107 0314 	add.w	r3, r7, #20
 800c9f6:	2210      	movs	r2, #16
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f00c fbf0 	bl	80191de <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	f107 0114 	add.w	r1, r7, #20
 800ca04:	f107 0314 	add.w	r3, r7, #20
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 fe97 	bl	800d73c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	33f1      	adds	r3, #241	@ 0xf1
 800ca12:	f107 0114 	add.w	r1, r7, #20
 800ca16:	2210      	movs	r2, #16
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f00c fbe0 	bl	80191de <memcpy1>

        data += 16;
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	3310      	adds	r3, #16
 800ca22:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3b10      	subs	r3, #16
 800ca28:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b10      	cmp	r3, #16
 800ca2e:	d8c3      	bhi.n	800c9b8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	b292      	uxth	r2, r2
 800ca3a:	68b9      	ldr	r1, [r7, #8]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f00c fbce 	bl	80191de <memcpy1>
    ctx->M_n = len;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ca4a:	e000      	b.n	800ca4e <AES_CMAC_Update+0x17e>
            return;
 800ca4c:	bf00      	nop
}
 800ca4e:	3730      	adds	r7, #48	@ 0x30
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b092      	sub	sp, #72	@ 0x48
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ca5e:	f107 031c 	add.w	r3, r7, #28
 800ca62:	2210      	movs	r2, #16
 800ca64:	2100      	movs	r1, #0
 800ca66:	4618      	mov	r0, r3
 800ca68:	f00c fbf4 	bl	8019254 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	f107 011c 	add.w	r1, r7, #28
 800ca72:	f107 031c 	add.w	r3, r7, #28
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fe60 	bl	800d73c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ca7c:	7f3b      	ldrb	r3, [r7, #28]
 800ca7e:	b25b      	sxtb	r3, r3
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	da30      	bge.n	800cae6 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800ca84:	2300      	movs	r3, #0
 800ca86:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca88:	e01b      	b.n	800cac2 <AES_CMAC_Final+0x6e>
 800ca8a:	f107 021c 	add.w	r2, r7, #28
 800ca8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca90:	4413      	add	r3, r2
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	b25a      	sxtb	r2, r3
 800ca98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	3348      	adds	r3, #72	@ 0x48
 800ca9e:	443b      	add	r3, r7
 800caa0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800caa4:	09db      	lsrs	r3, r3, #7
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	b25b      	sxtb	r3, r3
 800caaa:	4313      	orrs	r3, r2
 800caac:	b25b      	sxtb	r3, r3
 800caae:	b2d9      	uxtb	r1, r3
 800cab0:	f107 021c 	add.w	r2, r7, #28
 800cab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cab6:	4413      	add	r3, r2
 800cab8:	460a      	mov	r2, r1
 800caba:	701a      	strb	r2, [r3, #0]
 800cabc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cabe:	3301      	adds	r3, #1
 800cac0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cac4:	2b0e      	cmp	r3, #14
 800cac6:	dde0      	ble.n	800ca8a <AES_CMAC_Final+0x36>
 800cac8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800cad4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cad8:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800cadc:	43db      	mvns	r3, r3
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cae4:	e027      	b.n	800cb36 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800cae6:	2300      	movs	r3, #0
 800cae8:	643b      	str	r3, [r7, #64]	@ 0x40
 800caea:	e01b      	b.n	800cb24 <AES_CMAC_Final+0xd0>
 800caec:	f107 021c 	add.w	r2, r7, #28
 800caf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caf2:	4413      	add	r3, r2
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	b25a      	sxtb	r2, r3
 800cafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cafc:	3301      	adds	r3, #1
 800cafe:	3348      	adds	r3, #72	@ 0x48
 800cb00:	443b      	add	r3, r7
 800cb02:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cb06:	09db      	lsrs	r3, r3, #7
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	b25b      	sxtb	r3, r3
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	b25b      	sxtb	r3, r3
 800cb10:	b2d9      	uxtb	r1, r3
 800cb12:	f107 021c 	add.w	r2, r7, #28
 800cb16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb18:	4413      	add	r3, r2
 800cb1a:	460a      	mov	r2, r1
 800cb1c:	701a      	strb	r2, [r3, #0]
 800cb1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb20:	3301      	adds	r3, #1
 800cb22:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb26:	2b0e      	cmp	r3, #14
 800cb28:	dde0      	ble.n	800caec <AES_CMAC_Final+0x98>
 800cb2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800cb3c:	2b10      	cmp	r3, #16
 800cb3e:	d11d      	bne.n	800cb7c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800cb40:	2300      	movs	r3, #0
 800cb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb44:	e016      	b.n	800cb74 <AES_CMAC_Final+0x120>
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb4a:	4413      	add	r3, r2
 800cb4c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800cb50:	781a      	ldrb	r2, [r3, #0]
 800cb52:	f107 011c 	add.w	r1, r7, #28
 800cb56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb58:	440b      	add	r3, r1
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	4053      	eors	r3, r2
 800cb5e:	b2d9      	uxtb	r1, r3
 800cb60:	683a      	ldr	r2, [r7, #0]
 800cb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb64:	4413      	add	r3, r2
 800cb66:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800cb6a:	460a      	mov	r2, r1
 800cb6c:	701a      	strb	r2, [r3, #0]
 800cb6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb70:	3301      	adds	r3, #1
 800cb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb76:	2b0f      	cmp	r3, #15
 800cb78:	dde5      	ble.n	800cb46 <AES_CMAC_Final+0xf2>
 800cb7a:	e096      	b.n	800ccaa <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800cb7c:	7f3b      	ldrb	r3, [r7, #28]
 800cb7e:	b25b      	sxtb	r3, r3
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	da30      	bge.n	800cbe6 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800cb84:	2300      	movs	r3, #0
 800cb86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb88:	e01b      	b.n	800cbc2 <AES_CMAC_Final+0x16e>
 800cb8a:	f107 021c 	add.w	r2, r7, #28
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb90:	4413      	add	r3, r2
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	005b      	lsls	r3, r3, #1
 800cb96:	b25a      	sxtb	r2, r3
 800cb98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	3348      	adds	r3, #72	@ 0x48
 800cb9e:	443b      	add	r3, r7
 800cba0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cba4:	09db      	lsrs	r3, r3, #7
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	b25b      	sxtb	r3, r3
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	b25b      	sxtb	r3, r3
 800cbae:	b2d9      	uxtb	r1, r3
 800cbb0:	f107 021c 	add.w	r2, r7, #28
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb6:	4413      	add	r3, r2
 800cbb8:	460a      	mov	r2, r1
 800cbba:	701a      	strb	r2, [r3, #0]
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc4:	2b0e      	cmp	r3, #14
 800cbc6:	dde0      	ble.n	800cb8a <AES_CMAC_Final+0x136>
 800cbc8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800cbd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cbd8:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800cbdc:	43db      	mvns	r3, r3
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cbe4:	e027      	b.n	800cc36 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbea:	e01b      	b.n	800cc24 <AES_CMAC_Final+0x1d0>
 800cbec:	f107 021c 	add.w	r2, r7, #28
 800cbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf2:	4413      	add	r3, r2
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	005b      	lsls	r3, r3, #1
 800cbf8:	b25a      	sxtb	r2, r3
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	3348      	adds	r3, #72	@ 0x48
 800cc00:	443b      	add	r3, r7
 800cc02:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cc06:	09db      	lsrs	r3, r3, #7
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	b25b      	sxtb	r3, r3
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	b25b      	sxtb	r3, r3
 800cc10:	b2d9      	uxtb	r1, r3
 800cc12:	f107 021c 	add.w	r2, r7, #28
 800cc16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc18:	4413      	add	r3, r2
 800cc1a:	460a      	mov	r2, r1
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc20:	3301      	adds	r3, #1
 800cc22:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc26:	2b0e      	cmp	r3, #14
 800cc28:	dde0      	ble.n	800cbec <AES_CMAC_Final+0x198>
 800cc2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	4413      	add	r3, r2
 800cc40:	2280      	movs	r2, #128	@ 0x80
 800cc42:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800cc46:	e007      	b.n	800cc58 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	4413      	add	r3, r2
 800cc52:	2200      	movs	r2, #0
 800cc54:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800cc6c:	2b0f      	cmp	r3, #15
 800cc6e:	d9eb      	bls.n	800cc48 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800cc70:	2300      	movs	r3, #0
 800cc72:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc74:	e016      	b.n	800cca4 <AES_CMAC_Final+0x250>
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7a:	4413      	add	r3, r2
 800cc7c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800cc80:	781a      	ldrb	r2, [r3, #0]
 800cc82:	f107 011c 	add.w	r1, r7, #28
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	440b      	add	r3, r1
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	4053      	eors	r3, r2
 800cc8e:	b2d9      	uxtb	r1, r3
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc94:	4413      	add	r3, r2
 800cc96:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800cc9a:	460a      	mov	r2, r1
 800cc9c:	701a      	strb	r2, [r3, #0]
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca0:	3301      	adds	r3, #1
 800cca2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca6:	2b0f      	cmp	r3, #15
 800cca8:	dde5      	ble.n	800cc76 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800ccaa:	2300      	movs	r3, #0
 800ccac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ccae:	e015      	b.n	800ccdc <AES_CMAC_Final+0x288>
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb4:	4413      	add	r3, r2
 800ccb6:	33f1      	adds	r3, #241	@ 0xf1
 800ccb8:	781a      	ldrb	r2, [r3, #0]
 800ccba:	6839      	ldr	r1, [r7, #0]
 800ccbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccbe:	440b      	add	r3, r1
 800ccc0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	4053      	eors	r3, r2
 800ccc8:	b2d9      	uxtb	r1, r3
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccce:	4413      	add	r3, r2
 800ccd0:	33f1      	adds	r3, #241	@ 0xf1
 800ccd2:	460a      	mov	r2, r1
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd8:	3301      	adds	r3, #1
 800ccda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ccdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccde:	2b0f      	cmp	r3, #15
 800cce0:	dde6      	ble.n	800ccb0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800cce8:	f107 030c 	add.w	r3, r7, #12
 800ccec:	2210      	movs	r2, #16
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f00c fa75 	bl	80191de <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	f107 030c 	add.w	r3, r7, #12
 800ccfa:	6879      	ldr	r1, [r7, #4]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 fd1d 	bl	800d73c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800cd02:	f107 031c 	add.w	r3, r7, #28
 800cd06:	2210      	movs	r2, #16
 800cd08:	2100      	movs	r1, #0
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f00c faa2 	bl	8019254 <memset1>
}
 800cd10:	bf00      	nop
 800cd12:	3748      	adds	r7, #72	@ 0x48
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	781a      	ldrb	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	7852      	ldrb	r2, [r2, #1]
 800cd32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3302      	adds	r3, #2
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	7892      	ldrb	r2, [r2, #2]
 800cd3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3303      	adds	r3, #3
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	78d2      	ldrb	r2, [r2, #3]
 800cd46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	7912      	ldrb	r2, [r2, #4]
 800cd50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	3305      	adds	r3, #5
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	7952      	ldrb	r2, [r2, #5]
 800cd5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3306      	adds	r3, #6
 800cd60:	683a      	ldr	r2, [r7, #0]
 800cd62:	7992      	ldrb	r2, [r2, #6]
 800cd64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	3307      	adds	r3, #7
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	79d2      	ldrb	r2, [r2, #7]
 800cd6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3308      	adds	r3, #8
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	7a12      	ldrb	r2, [r2, #8]
 800cd78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3309      	adds	r3, #9
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	7a52      	ldrb	r2, [r2, #9]
 800cd82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	330a      	adds	r3, #10
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	7a92      	ldrb	r2, [r2, #10]
 800cd8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	330b      	adds	r3, #11
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	7ad2      	ldrb	r2, [r2, #11]
 800cd96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	330c      	adds	r3, #12
 800cd9c:	683a      	ldr	r2, [r7, #0]
 800cd9e:	7b12      	ldrb	r2, [r2, #12]
 800cda0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	330d      	adds	r3, #13
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	7b52      	ldrb	r2, [r2, #13]
 800cdaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	330e      	adds	r3, #14
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	7b92      	ldrb	r2, [r2, #14]
 800cdb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	330f      	adds	r3, #15
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	7bd2      	ldrb	r2, [r2, #15]
 800cdbe:	701a      	strb	r2, [r3, #0]
#endif
}
 800cdc0:	bf00      	nop
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bc80      	pop	{r7}
 800cdc8:	4770      	bx	lr

0800cdca <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b085      	sub	sp, #20
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	60f8      	str	r0, [r7, #12]
 800cdd2:	60b9      	str	r1, [r7, #8]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800cdd8:	e007      	b.n	800cdea <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	1c53      	adds	r3, r2, #1
 800cdde:	60bb      	str	r3, [r7, #8]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	1c59      	adds	r1, r3, #1
 800cde4:	60f9      	str	r1, [r7, #12]
 800cde6:	7812      	ldrb	r2, [r2, #0]
 800cde8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800cdea:	79fb      	ldrb	r3, [r7, #7]
 800cdec:	1e5a      	subs	r2, r3, #1
 800cdee:	71fa      	strb	r2, [r7, #7]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1f2      	bne.n	800cdda <copy_block_nn+0x10>
}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bc80      	pop	{r7}
 800cdfe:	4770      	bx	lr

0800ce00 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	781a      	ldrb	r2, [r3, #0]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	4053      	eors	r3, r2
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	7819      	ldrb	r1, [r3, #0]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	781a      	ldrb	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	404a      	eors	r2, r1
 800ce2c:	b2d2      	uxtb	r2, r2
 800ce2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	3302      	adds	r3, #2
 800ce34:	7819      	ldrb	r1, [r3, #0]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	3302      	adds	r3, #2
 800ce3a:	781a      	ldrb	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3302      	adds	r3, #2
 800ce40:	404a      	eors	r2, r1
 800ce42:	b2d2      	uxtb	r2, r2
 800ce44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	3303      	adds	r3, #3
 800ce4a:	7819      	ldrb	r1, [r3, #0]
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	3303      	adds	r3, #3
 800ce50:	781a      	ldrb	r2, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3303      	adds	r3, #3
 800ce56:	404a      	eors	r2, r1
 800ce58:	b2d2      	uxtb	r2, r2
 800ce5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	7819      	ldrb	r1, [r3, #0]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	3304      	adds	r3, #4
 800ce66:	781a      	ldrb	r2, [r3, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	404a      	eors	r2, r1
 800ce6e:	b2d2      	uxtb	r2, r2
 800ce70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	3305      	adds	r3, #5
 800ce76:	7819      	ldrb	r1, [r3, #0]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	3305      	adds	r3, #5
 800ce7c:	781a      	ldrb	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3305      	adds	r3, #5
 800ce82:	404a      	eors	r2, r1
 800ce84:	b2d2      	uxtb	r2, r2
 800ce86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	3306      	adds	r3, #6
 800ce8c:	7819      	ldrb	r1, [r3, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	3306      	adds	r3, #6
 800ce92:	781a      	ldrb	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3306      	adds	r3, #6
 800ce98:	404a      	eors	r2, r1
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3307      	adds	r3, #7
 800cea2:	7819      	ldrb	r1, [r3, #0]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	3307      	adds	r3, #7
 800cea8:	781a      	ldrb	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	3307      	adds	r3, #7
 800ceae:	404a      	eors	r2, r1
 800ceb0:	b2d2      	uxtb	r2, r2
 800ceb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	7819      	ldrb	r1, [r3, #0]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	3308      	adds	r3, #8
 800cebe:	781a      	ldrb	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3308      	adds	r3, #8
 800cec4:	404a      	eors	r2, r1
 800cec6:	b2d2      	uxtb	r2, r2
 800cec8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3309      	adds	r3, #9
 800cece:	7819      	ldrb	r1, [r3, #0]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	3309      	adds	r3, #9
 800ced4:	781a      	ldrb	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3309      	adds	r3, #9
 800ceda:	404a      	eors	r2, r1
 800cedc:	b2d2      	uxtb	r2, r2
 800cede:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	330a      	adds	r3, #10
 800cee4:	7819      	ldrb	r1, [r3, #0]
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	330a      	adds	r3, #10
 800ceea:	781a      	ldrb	r2, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	330a      	adds	r3, #10
 800cef0:	404a      	eors	r2, r1
 800cef2:	b2d2      	uxtb	r2, r2
 800cef4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	330b      	adds	r3, #11
 800cefa:	7819      	ldrb	r1, [r3, #0]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	330b      	adds	r3, #11
 800cf00:	781a      	ldrb	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	330b      	adds	r3, #11
 800cf06:	404a      	eors	r2, r1
 800cf08:	b2d2      	uxtb	r2, r2
 800cf0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	330c      	adds	r3, #12
 800cf10:	7819      	ldrb	r1, [r3, #0]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	330c      	adds	r3, #12
 800cf16:	781a      	ldrb	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	330c      	adds	r3, #12
 800cf1c:	404a      	eors	r2, r1
 800cf1e:	b2d2      	uxtb	r2, r2
 800cf20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	330d      	adds	r3, #13
 800cf26:	7819      	ldrb	r1, [r3, #0]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	330d      	adds	r3, #13
 800cf2c:	781a      	ldrb	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	330d      	adds	r3, #13
 800cf32:	404a      	eors	r2, r1
 800cf34:	b2d2      	uxtb	r2, r2
 800cf36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	330e      	adds	r3, #14
 800cf3c:	7819      	ldrb	r1, [r3, #0]
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	330e      	adds	r3, #14
 800cf42:	781a      	ldrb	r2, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	330e      	adds	r3, #14
 800cf48:	404a      	eors	r2, r1
 800cf4a:	b2d2      	uxtb	r2, r2
 800cf4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	330f      	adds	r3, #15
 800cf52:	7819      	ldrb	r1, [r3, #0]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	330f      	adds	r3, #15
 800cf58:	781a      	ldrb	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	330f      	adds	r3, #15
 800cf5e:	404a      	eors	r2, r1
 800cf60:	b2d2      	uxtb	r2, r2
 800cf62:	701a      	strb	r2, [r3, #0]
#endif
}
 800cf64:	bf00      	nop
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bc80      	pop	{r7}
 800cf6c:	4770      	bx	lr

0800cf6e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b085      	sub	sp, #20
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	60f8      	str	r0, [r7, #12]
 800cf76:	60b9      	str	r1, [r7, #8]
 800cf78:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	781a      	ldrb	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	4053      	eors	r3, r2
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	7819      	ldrb	r1, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	3301      	adds	r3, #1
 800cf94:	781a      	ldrb	r2, [r3, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	404a      	eors	r2, r1
 800cf9c:	b2d2      	uxtb	r2, r2
 800cf9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	3302      	adds	r3, #2
 800cfa4:	7819      	ldrb	r1, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	3302      	adds	r3, #2
 800cfaa:	781a      	ldrb	r2, [r3, #0]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3302      	adds	r3, #2
 800cfb0:	404a      	eors	r2, r1
 800cfb2:	b2d2      	uxtb	r2, r2
 800cfb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	3303      	adds	r3, #3
 800cfba:	7819      	ldrb	r1, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	3303      	adds	r3, #3
 800cfc0:	781a      	ldrb	r2, [r3, #0]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	3303      	adds	r3, #3
 800cfc6:	404a      	eors	r2, r1
 800cfc8:	b2d2      	uxtb	r2, r2
 800cfca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	7819      	ldrb	r1, [r3, #0]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	3304      	adds	r3, #4
 800cfd6:	781a      	ldrb	r2, [r3, #0]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	3304      	adds	r3, #4
 800cfdc:	404a      	eors	r2, r1
 800cfde:	b2d2      	uxtb	r2, r2
 800cfe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	3305      	adds	r3, #5
 800cfe6:	7819      	ldrb	r1, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	3305      	adds	r3, #5
 800cfec:	781a      	ldrb	r2, [r3, #0]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	3305      	adds	r3, #5
 800cff2:	404a      	eors	r2, r1
 800cff4:	b2d2      	uxtb	r2, r2
 800cff6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	3306      	adds	r3, #6
 800cffc:	7819      	ldrb	r1, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	3306      	adds	r3, #6
 800d002:	781a      	ldrb	r2, [r3, #0]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	3306      	adds	r3, #6
 800d008:	404a      	eors	r2, r1
 800d00a:	b2d2      	uxtb	r2, r2
 800d00c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	3307      	adds	r3, #7
 800d012:	7819      	ldrb	r1, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3307      	adds	r3, #7
 800d018:	781a      	ldrb	r2, [r3, #0]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	3307      	adds	r3, #7
 800d01e:	404a      	eors	r2, r1
 800d020:	b2d2      	uxtb	r2, r2
 800d022:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	3308      	adds	r3, #8
 800d028:	7819      	ldrb	r1, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	3308      	adds	r3, #8
 800d02e:	781a      	ldrb	r2, [r3, #0]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	3308      	adds	r3, #8
 800d034:	404a      	eors	r2, r1
 800d036:	b2d2      	uxtb	r2, r2
 800d038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	3309      	adds	r3, #9
 800d03e:	7819      	ldrb	r1, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	3309      	adds	r3, #9
 800d044:	781a      	ldrb	r2, [r3, #0]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3309      	adds	r3, #9
 800d04a:	404a      	eors	r2, r1
 800d04c:	b2d2      	uxtb	r2, r2
 800d04e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	330a      	adds	r3, #10
 800d054:	7819      	ldrb	r1, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	330a      	adds	r3, #10
 800d05a:	781a      	ldrb	r2, [r3, #0]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	330a      	adds	r3, #10
 800d060:	404a      	eors	r2, r1
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	330b      	adds	r3, #11
 800d06a:	7819      	ldrb	r1, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	330b      	adds	r3, #11
 800d070:	781a      	ldrb	r2, [r3, #0]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	330b      	adds	r3, #11
 800d076:	404a      	eors	r2, r1
 800d078:	b2d2      	uxtb	r2, r2
 800d07a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	330c      	adds	r3, #12
 800d080:	7819      	ldrb	r1, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	330c      	adds	r3, #12
 800d086:	781a      	ldrb	r2, [r3, #0]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	330c      	adds	r3, #12
 800d08c:	404a      	eors	r2, r1
 800d08e:	b2d2      	uxtb	r2, r2
 800d090:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	330d      	adds	r3, #13
 800d096:	7819      	ldrb	r1, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	330d      	adds	r3, #13
 800d09c:	781a      	ldrb	r2, [r3, #0]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	330d      	adds	r3, #13
 800d0a2:	404a      	eors	r2, r1
 800d0a4:	b2d2      	uxtb	r2, r2
 800d0a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	330e      	adds	r3, #14
 800d0ac:	7819      	ldrb	r1, [r3, #0]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	330e      	adds	r3, #14
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	330e      	adds	r3, #14
 800d0b8:	404a      	eors	r2, r1
 800d0ba:	b2d2      	uxtb	r2, r2
 800d0bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	330f      	adds	r3, #15
 800d0c2:	7819      	ldrb	r1, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	330f      	adds	r3, #15
 800d0c8:	781a      	ldrb	r2, [r3, #0]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	330f      	adds	r3, #15
 800d0ce:	404a      	eors	r2, r1
 800d0d0:	b2d2      	uxtb	r2, r2
 800d0d2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d0d4:	bf00      	nop
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bc80      	pop	{r7}
 800d0dc:	4770      	bx	lr

0800d0de <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff fe88 	bl	800ce00 <xor_block>
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	461a      	mov	r2, r3
 800d106:	4b48      	ldr	r3, [pc, #288]	@ (800d228 <shift_sub_rows+0x130>)
 800d108:	5c9a      	ldrb	r2, [r3, r2]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	701a      	strb	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	3304      	adds	r3, #4
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	4619      	mov	r1, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	3304      	adds	r3, #4
 800d11a:	4a43      	ldr	r2, [pc, #268]	@ (800d228 <shift_sub_rows+0x130>)
 800d11c:	5c52      	ldrb	r2, [r2, r1]
 800d11e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	3308      	adds	r3, #8
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	4619      	mov	r1, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3308      	adds	r3, #8
 800d12c:	4a3e      	ldr	r2, [pc, #248]	@ (800d228 <shift_sub_rows+0x130>)
 800d12e:	5c52      	ldrb	r2, [r2, r1]
 800d130:	701a      	strb	r2, [r3, #0]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	330c      	adds	r3, #12
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	4619      	mov	r1, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	330c      	adds	r3, #12
 800d13e:	4a3a      	ldr	r2, [pc, #232]	@ (800d228 <shift_sub_rows+0x130>)
 800d140:	5c52      	ldrb	r2, [r2, r1]
 800d142:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	785b      	ldrb	r3, [r3, #1]
 800d148:	73fb      	strb	r3, [r7, #15]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3305      	adds	r3, #5
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	4619      	mov	r1, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	3301      	adds	r3, #1
 800d156:	4a34      	ldr	r2, [pc, #208]	@ (800d228 <shift_sub_rows+0x130>)
 800d158:	5c52      	ldrb	r2, [r2, r1]
 800d15a:	701a      	strb	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	3309      	adds	r3, #9
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	4619      	mov	r1, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	3305      	adds	r3, #5
 800d168:	4a2f      	ldr	r2, [pc, #188]	@ (800d228 <shift_sub_rows+0x130>)
 800d16a:	5c52      	ldrb	r2, [r2, r1]
 800d16c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	330d      	adds	r3, #13
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	4619      	mov	r1, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	3309      	adds	r3, #9
 800d17a:	4a2b      	ldr	r2, [pc, #172]	@ (800d228 <shift_sub_rows+0x130>)
 800d17c:	5c52      	ldrb	r2, [r2, r1]
 800d17e:	701a      	strb	r2, [r3, #0]
 800d180:	7bfa      	ldrb	r2, [r7, #15]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	330d      	adds	r3, #13
 800d186:	4928      	ldr	r1, [pc, #160]	@ (800d228 <shift_sub_rows+0x130>)
 800d188:	5c8a      	ldrb	r2, [r1, r2]
 800d18a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	789b      	ldrb	r3, [r3, #2]
 800d190:	73fb      	strb	r3, [r7, #15]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	330a      	adds	r3, #10
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	4619      	mov	r1, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3302      	adds	r3, #2
 800d19e:	4a22      	ldr	r2, [pc, #136]	@ (800d228 <shift_sub_rows+0x130>)
 800d1a0:	5c52      	ldrb	r2, [r2, r1]
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	7bfa      	ldrb	r2, [r7, #15]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	330a      	adds	r3, #10
 800d1aa:	491f      	ldr	r1, [pc, #124]	@ (800d228 <shift_sub_rows+0x130>)
 800d1ac:	5c8a      	ldrb	r2, [r1, r2]
 800d1ae:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	799b      	ldrb	r3, [r3, #6]
 800d1b4:	73fb      	strb	r3, [r7, #15]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	330e      	adds	r3, #14
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	3306      	adds	r3, #6
 800d1c2:	4a19      	ldr	r2, [pc, #100]	@ (800d228 <shift_sub_rows+0x130>)
 800d1c4:	5c52      	ldrb	r2, [r2, r1]
 800d1c6:	701a      	strb	r2, [r3, #0]
 800d1c8:	7bfa      	ldrb	r2, [r7, #15]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	330e      	adds	r3, #14
 800d1ce:	4916      	ldr	r1, [pc, #88]	@ (800d228 <shift_sub_rows+0x130>)
 800d1d0:	5c8a      	ldrb	r2, [r1, r2]
 800d1d2:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7bdb      	ldrb	r3, [r3, #15]
 800d1d8:	73fb      	strb	r3, [r7, #15]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	330b      	adds	r3, #11
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	330f      	adds	r3, #15
 800d1e6:	4a10      	ldr	r2, [pc, #64]	@ (800d228 <shift_sub_rows+0x130>)
 800d1e8:	5c52      	ldrb	r2, [r2, r1]
 800d1ea:	701a      	strb	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	3307      	adds	r3, #7
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	330b      	adds	r3, #11
 800d1f8:	4a0b      	ldr	r2, [pc, #44]	@ (800d228 <shift_sub_rows+0x130>)
 800d1fa:	5c52      	ldrb	r2, [r2, r1]
 800d1fc:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	3303      	adds	r3, #3
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	4619      	mov	r1, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3307      	adds	r3, #7
 800d20a:	4a07      	ldr	r2, [pc, #28]	@ (800d228 <shift_sub_rows+0x130>)
 800d20c:	5c52      	ldrb	r2, [r2, r1]
 800d20e:	701a      	strb	r2, [r3, #0]
 800d210:	7bfa      	ldrb	r2, [r7, #15]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3303      	adds	r3, #3
 800d216:	4904      	ldr	r1, [pc, #16]	@ (800d228 <shift_sub_rows+0x130>)
 800d218:	5c8a      	ldrb	r2, [r1, r2]
 800d21a:	701a      	strb	r2, [r3, #0]
}
 800d21c:	bf00      	nop
 800d21e:	3714      	adds	r7, #20
 800d220:	46bd      	mov	sp, r7
 800d222:	bc80      	pop	{r7}
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	0801fb54 	.word	0x0801fb54

0800d22c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800d234:	f107 0308 	add.w	r3, r7, #8
 800d238:	6879      	ldr	r1, [r7, #4]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff fd6c 	bl	800cd18 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d240:	7a3b      	ldrb	r3, [r7, #8]
 800d242:	461a      	mov	r2, r3
 800d244:	4b9a      	ldr	r3, [pc, #616]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d246:	5c9a      	ldrb	r2, [r3, r2]
 800d248:	7b7b      	ldrb	r3, [r7, #13]
 800d24a:	4619      	mov	r1, r3
 800d24c:	4b99      	ldr	r3, [pc, #612]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d24e:	5c5b      	ldrb	r3, [r3, r1]
 800d250:	4053      	eors	r3, r2
 800d252:	b2da      	uxtb	r2, r3
 800d254:	7cbb      	ldrb	r3, [r7, #18]
 800d256:	4619      	mov	r1, r3
 800d258:	4b97      	ldr	r3, [pc, #604]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d25a:	5c5b      	ldrb	r3, [r3, r1]
 800d25c:	4053      	eors	r3, r2
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	7dfb      	ldrb	r3, [r7, #23]
 800d262:	4619      	mov	r1, r3
 800d264:	4b94      	ldr	r3, [pc, #592]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d266:	5c5b      	ldrb	r3, [r3, r1]
 800d268:	4053      	eors	r3, r2
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d270:	7a3b      	ldrb	r3, [r7, #8]
 800d272:	461a      	mov	r2, r3
 800d274:	4b90      	ldr	r3, [pc, #576]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d276:	5c9a      	ldrb	r2, [r3, r2]
 800d278:	7b7b      	ldrb	r3, [r7, #13]
 800d27a:	4619      	mov	r1, r3
 800d27c:	4b8c      	ldr	r3, [pc, #560]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d27e:	5c5b      	ldrb	r3, [r3, r1]
 800d280:	4053      	eors	r3, r2
 800d282:	b2da      	uxtb	r2, r3
 800d284:	7cbb      	ldrb	r3, [r7, #18]
 800d286:	4619      	mov	r1, r3
 800d288:	4b8a      	ldr	r3, [pc, #552]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d28a:	5c5b      	ldrb	r3, [r3, r1]
 800d28c:	4053      	eors	r3, r2
 800d28e:	b2d9      	uxtb	r1, r3
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	461a      	mov	r2, r3
 800d294:	4b88      	ldr	r3, [pc, #544]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d296:	5c9a      	ldrb	r2, [r3, r2]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3301      	adds	r3, #1
 800d29c:	404a      	eors	r2, r1
 800d29e:	b2d2      	uxtb	r2, r2
 800d2a0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d2a2:	7a3b      	ldrb	r3, [r7, #8]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	4b84      	ldr	r3, [pc, #528]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d2a8:	5c9a      	ldrb	r2, [r3, r2]
 800d2aa:	7b7b      	ldrb	r3, [r7, #13]
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4b82      	ldr	r3, [pc, #520]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d2b0:	5c5b      	ldrb	r3, [r3, r1]
 800d2b2:	4053      	eors	r3, r2
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	7cbb      	ldrb	r3, [r7, #18]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4b7d      	ldr	r3, [pc, #500]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d2bc:	5c5b      	ldrb	r3, [r3, r1]
 800d2be:	4053      	eors	r3, r2
 800d2c0:	b2d9      	uxtb	r1, r3
 800d2c2:	7dfb      	ldrb	r3, [r7, #23]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	4b7b      	ldr	r3, [pc, #492]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d2c8:	5c9a      	ldrb	r2, [r3, r2]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	3302      	adds	r3, #2
 800d2ce:	404a      	eors	r2, r1
 800d2d0:	b2d2      	uxtb	r2, r2
 800d2d2:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d2d4:	7a3b      	ldrb	r3, [r7, #8]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4b76      	ldr	r3, [pc, #472]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d2da:	5c9a      	ldrb	r2, [r3, r2]
 800d2dc:	7b7b      	ldrb	r3, [r7, #13]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4b75      	ldr	r3, [pc, #468]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d2e2:	5c5b      	ldrb	r3, [r3, r1]
 800d2e4:	4053      	eors	r3, r2
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	7cbb      	ldrb	r3, [r7, #18]
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	4b72      	ldr	r3, [pc, #456]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d2ee:	5c5b      	ldrb	r3, [r3, r1]
 800d2f0:	4053      	eors	r3, r2
 800d2f2:	b2d9      	uxtb	r1, r3
 800d2f4:	7dfb      	ldrb	r3, [r7, #23]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	4b6d      	ldr	r3, [pc, #436]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d2fa:	5c9a      	ldrb	r2, [r3, r2]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	3303      	adds	r3, #3
 800d300:	404a      	eors	r2, r1
 800d302:	b2d2      	uxtb	r2, r2
 800d304:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800d306:	7b3b      	ldrb	r3, [r7, #12]
 800d308:	461a      	mov	r2, r3
 800d30a:	4b69      	ldr	r3, [pc, #420]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d30c:	5c9a      	ldrb	r2, [r3, r2]
 800d30e:	7c7b      	ldrb	r3, [r7, #17]
 800d310:	4619      	mov	r1, r3
 800d312:	4b68      	ldr	r3, [pc, #416]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d314:	5c5b      	ldrb	r3, [r3, r1]
 800d316:	4053      	eors	r3, r2
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	7dbb      	ldrb	r3, [r7, #22]
 800d31c:	4619      	mov	r1, r3
 800d31e:	4b66      	ldr	r3, [pc, #408]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d320:	5c5b      	ldrb	r3, [r3, r1]
 800d322:	4053      	eors	r3, r2
 800d324:	b2d9      	uxtb	r1, r3
 800d326:	7afb      	ldrb	r3, [r7, #11]
 800d328:	461a      	mov	r2, r3
 800d32a:	4b63      	ldr	r3, [pc, #396]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d32c:	5c9a      	ldrb	r2, [r3, r2]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3304      	adds	r3, #4
 800d332:	404a      	eors	r2, r1
 800d334:	b2d2      	uxtb	r2, r2
 800d336:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d338:	7b3b      	ldrb	r3, [r7, #12]
 800d33a:	461a      	mov	r2, r3
 800d33c:	4b5e      	ldr	r3, [pc, #376]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d33e:	5c9a      	ldrb	r2, [r3, r2]
 800d340:	7c7b      	ldrb	r3, [r7, #17]
 800d342:	4619      	mov	r1, r3
 800d344:	4b5a      	ldr	r3, [pc, #360]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d346:	5c5b      	ldrb	r3, [r3, r1]
 800d348:	4053      	eors	r3, r2
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	7dbb      	ldrb	r3, [r7, #22]
 800d34e:	4619      	mov	r1, r3
 800d350:	4b58      	ldr	r3, [pc, #352]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d352:	5c5b      	ldrb	r3, [r3, r1]
 800d354:	4053      	eors	r3, r2
 800d356:	b2d9      	uxtb	r1, r3
 800d358:	7afb      	ldrb	r3, [r7, #11]
 800d35a:	461a      	mov	r2, r3
 800d35c:	4b56      	ldr	r3, [pc, #344]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d35e:	5c9a      	ldrb	r2, [r3, r2]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	3305      	adds	r3, #5
 800d364:	404a      	eors	r2, r1
 800d366:	b2d2      	uxtb	r2, r2
 800d368:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d36a:	7b3b      	ldrb	r3, [r7, #12]
 800d36c:	461a      	mov	r2, r3
 800d36e:	4b52      	ldr	r3, [pc, #328]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d370:	5c9a      	ldrb	r2, [r3, r2]
 800d372:	7c7b      	ldrb	r3, [r7, #17]
 800d374:	4619      	mov	r1, r3
 800d376:	4b50      	ldr	r3, [pc, #320]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d378:	5c5b      	ldrb	r3, [r3, r1]
 800d37a:	4053      	eors	r3, r2
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	7dbb      	ldrb	r3, [r7, #22]
 800d380:	4619      	mov	r1, r3
 800d382:	4b4b      	ldr	r3, [pc, #300]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d384:	5c5b      	ldrb	r3, [r3, r1]
 800d386:	4053      	eors	r3, r2
 800d388:	b2d9      	uxtb	r1, r3
 800d38a:	7afb      	ldrb	r3, [r7, #11]
 800d38c:	461a      	mov	r2, r3
 800d38e:	4b49      	ldr	r3, [pc, #292]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d390:	5c9a      	ldrb	r2, [r3, r2]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	3306      	adds	r3, #6
 800d396:	404a      	eors	r2, r1
 800d398:	b2d2      	uxtb	r2, r2
 800d39a:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d39c:	7b3b      	ldrb	r3, [r7, #12]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	4b44      	ldr	r3, [pc, #272]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d3a2:	5c9a      	ldrb	r2, [r3, r2]
 800d3a4:	7c7b      	ldrb	r3, [r7, #17]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	4b43      	ldr	r3, [pc, #268]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d3aa:	5c5b      	ldrb	r3, [r3, r1]
 800d3ac:	4053      	eors	r3, r2
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	7dbb      	ldrb	r3, [r7, #22]
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	4b40      	ldr	r3, [pc, #256]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d3b6:	5c5b      	ldrb	r3, [r3, r1]
 800d3b8:	4053      	eors	r3, r2
 800d3ba:	b2d9      	uxtb	r1, r3
 800d3bc:	7afb      	ldrb	r3, [r7, #11]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	4b3b      	ldr	r3, [pc, #236]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d3c2:	5c9a      	ldrb	r2, [r3, r2]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3307      	adds	r3, #7
 800d3c8:	404a      	eors	r2, r1
 800d3ca:	b2d2      	uxtb	r2, r2
 800d3cc:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d3ce:	7c3b      	ldrb	r3, [r7, #16]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4b37      	ldr	r3, [pc, #220]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d3d4:	5c9a      	ldrb	r2, [r3, r2]
 800d3d6:	7d7b      	ldrb	r3, [r7, #21]
 800d3d8:	4619      	mov	r1, r3
 800d3da:	4b36      	ldr	r3, [pc, #216]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d3dc:	5c5b      	ldrb	r3, [r3, r1]
 800d3de:	4053      	eors	r3, r2
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	7abb      	ldrb	r3, [r7, #10]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	4b34      	ldr	r3, [pc, #208]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d3e8:	5c5b      	ldrb	r3, [r3, r1]
 800d3ea:	4053      	eors	r3, r2
 800d3ec:	b2d9      	uxtb	r1, r3
 800d3ee:	7bfb      	ldrb	r3, [r7, #15]
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	4b31      	ldr	r3, [pc, #196]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d3f4:	5c9a      	ldrb	r2, [r3, r2]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	3308      	adds	r3, #8
 800d3fa:	404a      	eors	r2, r1
 800d3fc:	b2d2      	uxtb	r2, r2
 800d3fe:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d400:	7c3b      	ldrb	r3, [r7, #16]
 800d402:	461a      	mov	r2, r3
 800d404:	4b2c      	ldr	r3, [pc, #176]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d406:	5c9a      	ldrb	r2, [r3, r2]
 800d408:	7d7b      	ldrb	r3, [r7, #21]
 800d40a:	4619      	mov	r1, r3
 800d40c:	4b28      	ldr	r3, [pc, #160]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d40e:	5c5b      	ldrb	r3, [r3, r1]
 800d410:	4053      	eors	r3, r2
 800d412:	b2da      	uxtb	r2, r3
 800d414:	7abb      	ldrb	r3, [r7, #10]
 800d416:	4619      	mov	r1, r3
 800d418:	4b26      	ldr	r3, [pc, #152]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d41a:	5c5b      	ldrb	r3, [r3, r1]
 800d41c:	4053      	eors	r3, r2
 800d41e:	b2d9      	uxtb	r1, r3
 800d420:	7bfb      	ldrb	r3, [r7, #15]
 800d422:	461a      	mov	r2, r3
 800d424:	4b24      	ldr	r3, [pc, #144]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d426:	5c9a      	ldrb	r2, [r3, r2]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3309      	adds	r3, #9
 800d42c:	404a      	eors	r2, r1
 800d42e:	b2d2      	uxtb	r2, r2
 800d430:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d432:	7c3b      	ldrb	r3, [r7, #16]
 800d434:	461a      	mov	r2, r3
 800d436:	4b20      	ldr	r3, [pc, #128]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d438:	5c9a      	ldrb	r2, [r3, r2]
 800d43a:	7d7b      	ldrb	r3, [r7, #21]
 800d43c:	4619      	mov	r1, r3
 800d43e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d440:	5c5b      	ldrb	r3, [r3, r1]
 800d442:	4053      	eors	r3, r2
 800d444:	b2da      	uxtb	r2, r3
 800d446:	7abb      	ldrb	r3, [r7, #10]
 800d448:	4619      	mov	r1, r3
 800d44a:	4b19      	ldr	r3, [pc, #100]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d44c:	5c5b      	ldrb	r3, [r3, r1]
 800d44e:	4053      	eors	r3, r2
 800d450:	b2d9      	uxtb	r1, r3
 800d452:	7bfb      	ldrb	r3, [r7, #15]
 800d454:	461a      	mov	r2, r3
 800d456:	4b17      	ldr	r3, [pc, #92]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d458:	5c9a      	ldrb	r2, [r3, r2]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	330a      	adds	r3, #10
 800d45e:	404a      	eors	r2, r1
 800d460:	b2d2      	uxtb	r2, r2
 800d462:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d464:	7c3b      	ldrb	r3, [r7, #16]
 800d466:	461a      	mov	r2, r3
 800d468:	4b12      	ldr	r3, [pc, #72]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d46a:	5c9a      	ldrb	r2, [r3, r2]
 800d46c:	7d7b      	ldrb	r3, [r7, #21]
 800d46e:	4619      	mov	r1, r3
 800d470:	4b11      	ldr	r3, [pc, #68]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d472:	5c5b      	ldrb	r3, [r3, r1]
 800d474:	4053      	eors	r3, r2
 800d476:	b2da      	uxtb	r2, r3
 800d478:	7abb      	ldrb	r3, [r7, #10]
 800d47a:	4619      	mov	r1, r3
 800d47c:	4b0e      	ldr	r3, [pc, #56]	@ (800d4b8 <mix_sub_columns+0x28c>)
 800d47e:	5c5b      	ldrb	r3, [r3, r1]
 800d480:	4053      	eors	r3, r2
 800d482:	b2d9      	uxtb	r1, r3
 800d484:	7bfb      	ldrb	r3, [r7, #15]
 800d486:	461a      	mov	r2, r3
 800d488:	4b09      	ldr	r3, [pc, #36]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d48a:	5c9a      	ldrb	r2, [r3, r2]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	330b      	adds	r3, #11
 800d490:	404a      	eors	r2, r1
 800d492:	b2d2      	uxtb	r2, r2
 800d494:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d496:	7d3b      	ldrb	r3, [r7, #20]
 800d498:	461a      	mov	r2, r3
 800d49a:	4b05      	ldr	r3, [pc, #20]	@ (800d4b0 <mix_sub_columns+0x284>)
 800d49c:	5c9a      	ldrb	r2, [r3, r2]
 800d49e:	7a7b      	ldrb	r3, [r7, #9]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4b04      	ldr	r3, [pc, #16]	@ (800d4b4 <mix_sub_columns+0x288>)
 800d4a4:	5c5b      	ldrb	r3, [r3, r1]
 800d4a6:	4053      	eors	r3, r2
 800d4a8:	b2da      	uxtb	r2, r3
 800d4aa:	7bbb      	ldrb	r3, [r7, #14]
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	e005      	b.n	800d4bc <mix_sub_columns+0x290>
 800d4b0:	0801fc54 	.word	0x0801fc54
 800d4b4:	0801fd54 	.word	0x0801fd54
 800d4b8:	0801fb54 	.word	0x0801fb54
 800d4bc:	4b2d      	ldr	r3, [pc, #180]	@ (800d574 <mix_sub_columns+0x348>)
 800d4be:	5c5b      	ldrb	r3, [r3, r1]
 800d4c0:	4053      	eors	r3, r2
 800d4c2:	b2d9      	uxtb	r1, r3
 800d4c4:	7cfb      	ldrb	r3, [r7, #19]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	4b2a      	ldr	r3, [pc, #168]	@ (800d574 <mix_sub_columns+0x348>)
 800d4ca:	5c9a      	ldrb	r2, [r3, r2]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	330c      	adds	r3, #12
 800d4d0:	404a      	eors	r2, r1
 800d4d2:	b2d2      	uxtb	r2, r2
 800d4d4:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d4d6:	7d3b      	ldrb	r3, [r7, #20]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	4b26      	ldr	r3, [pc, #152]	@ (800d574 <mix_sub_columns+0x348>)
 800d4dc:	5c9a      	ldrb	r2, [r3, r2]
 800d4de:	7a7b      	ldrb	r3, [r7, #9]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	4b25      	ldr	r3, [pc, #148]	@ (800d578 <mix_sub_columns+0x34c>)
 800d4e4:	5c5b      	ldrb	r3, [r3, r1]
 800d4e6:	4053      	eors	r3, r2
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	4b23      	ldr	r3, [pc, #140]	@ (800d57c <mix_sub_columns+0x350>)
 800d4f0:	5c5b      	ldrb	r3, [r3, r1]
 800d4f2:	4053      	eors	r3, r2
 800d4f4:	b2d9      	uxtb	r1, r3
 800d4f6:	7cfb      	ldrb	r3, [r7, #19]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4b1e      	ldr	r3, [pc, #120]	@ (800d574 <mix_sub_columns+0x348>)
 800d4fc:	5c9a      	ldrb	r2, [r3, r2]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	330d      	adds	r3, #13
 800d502:	404a      	eors	r2, r1
 800d504:	b2d2      	uxtb	r2, r2
 800d506:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d508:	7d3b      	ldrb	r3, [r7, #20]
 800d50a:	461a      	mov	r2, r3
 800d50c:	4b19      	ldr	r3, [pc, #100]	@ (800d574 <mix_sub_columns+0x348>)
 800d50e:	5c9a      	ldrb	r2, [r3, r2]
 800d510:	7a7b      	ldrb	r3, [r7, #9]
 800d512:	4619      	mov	r1, r3
 800d514:	4b17      	ldr	r3, [pc, #92]	@ (800d574 <mix_sub_columns+0x348>)
 800d516:	5c5b      	ldrb	r3, [r3, r1]
 800d518:	4053      	eors	r3, r2
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	7bbb      	ldrb	r3, [r7, #14]
 800d51e:	4619      	mov	r1, r3
 800d520:	4b15      	ldr	r3, [pc, #84]	@ (800d578 <mix_sub_columns+0x34c>)
 800d522:	5c5b      	ldrb	r3, [r3, r1]
 800d524:	4053      	eors	r3, r2
 800d526:	b2d9      	uxtb	r1, r3
 800d528:	7cfb      	ldrb	r3, [r7, #19]
 800d52a:	461a      	mov	r2, r3
 800d52c:	4b13      	ldr	r3, [pc, #76]	@ (800d57c <mix_sub_columns+0x350>)
 800d52e:	5c9a      	ldrb	r2, [r3, r2]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	330e      	adds	r3, #14
 800d534:	404a      	eors	r2, r1
 800d536:	b2d2      	uxtb	r2, r2
 800d538:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d53a:	7d3b      	ldrb	r3, [r7, #20]
 800d53c:	461a      	mov	r2, r3
 800d53e:	4b0f      	ldr	r3, [pc, #60]	@ (800d57c <mix_sub_columns+0x350>)
 800d540:	5c9a      	ldrb	r2, [r3, r2]
 800d542:	7a7b      	ldrb	r3, [r7, #9]
 800d544:	4619      	mov	r1, r3
 800d546:	4b0b      	ldr	r3, [pc, #44]	@ (800d574 <mix_sub_columns+0x348>)
 800d548:	5c5b      	ldrb	r3, [r3, r1]
 800d54a:	4053      	eors	r3, r2
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	7bbb      	ldrb	r3, [r7, #14]
 800d550:	4619      	mov	r1, r3
 800d552:	4b08      	ldr	r3, [pc, #32]	@ (800d574 <mix_sub_columns+0x348>)
 800d554:	5c5b      	ldrb	r3, [r3, r1]
 800d556:	4053      	eors	r3, r2
 800d558:	b2d9      	uxtb	r1, r3
 800d55a:	7cfb      	ldrb	r3, [r7, #19]
 800d55c:	461a      	mov	r2, r3
 800d55e:	4b06      	ldr	r3, [pc, #24]	@ (800d578 <mix_sub_columns+0x34c>)
 800d560:	5c9a      	ldrb	r2, [r3, r2]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	330f      	adds	r3, #15
 800d566:	404a      	eors	r2, r1
 800d568:	b2d2      	uxtb	r2, r2
 800d56a:	701a      	strb	r2, [r3, #0]
  }
 800d56c:	bf00      	nop
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	0801fb54 	.word	0x0801fb54
 800d578:	0801fc54 	.word	0x0801fc54
 800d57c:	0801fd54 	.word	0x0801fd54

0800d580 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	460b      	mov	r3, r1
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d58e:	7afb      	ldrb	r3, [r7, #11]
 800d590:	3b10      	subs	r3, #16
 800d592:	2b10      	cmp	r3, #16
 800d594:	bf8c      	ite	hi
 800d596:	2201      	movhi	r2, #1
 800d598:	2200      	movls	r2, #0
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	2a00      	cmp	r2, #0
 800d59e:	d10b      	bne.n	800d5b8 <lorawan_aes_set_key+0x38>
 800d5a0:	4a64      	ldr	r2, [pc, #400]	@ (800d734 <lorawan_aes_set_key+0x1b4>)
 800d5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a6:	f003 0301 	and.w	r3, r3, #1
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bf14      	ite	ne
 800d5ae:	2301      	movne	r3, #1
 800d5b0:	2300      	moveq	r3, #0
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d105      	bne.n	800d5c4 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800d5c0:	23ff      	movs	r3, #255	@ 0xff
 800d5c2:	e0b2      	b.n	800d72a <lorawan_aes_set_key+0x1aa>
        break;
 800d5c4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	7afa      	ldrb	r2, [r7, #11]
 800d5ca:	68f9      	ldr	r1, [r7, #12]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff fbfc 	bl	800cdca <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d5d2:	7afb      	ldrb	r3, [r7, #11]
 800d5d4:	331c      	adds	r3, #28
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d5dc:	7c7b      	ldrb	r3, [r7, #17]
 800d5de:	091b      	lsrs	r3, r3, #4
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d5ec:	7afb      	ldrb	r3, [r7, #11]
 800d5ee:	75fb      	strb	r3, [r7, #23]
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	75bb      	strb	r3, [r7, #22]
 800d5f4:	e093      	b.n	800d71e <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d5f6:	7dfb      	ldrb	r3, [r7, #23]
 800d5f8:	3b04      	subs	r3, #4
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	5cd3      	ldrb	r3, [r2, r3]
 800d5fe:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d600:	7dfb      	ldrb	r3, [r7, #23]
 800d602:	3b03      	subs	r3, #3
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	5cd3      	ldrb	r3, [r2, r3]
 800d608:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d60a:	7dfb      	ldrb	r3, [r7, #23]
 800d60c:	3b02      	subs	r3, #2
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	5cd3      	ldrb	r3, [r2, r3]
 800d612:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d614:	7dfb      	ldrb	r3, [r7, #23]
 800d616:	3b01      	subs	r3, #1
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	5cd3      	ldrb	r3, [r2, r3]
 800d61c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
 800d620:	7afa      	ldrb	r2, [r7, #11]
 800d622:	fbb3 f1f2 	udiv	r1, r3, r2
 800d626:	fb01 f202 	mul.w	r2, r1, r2
 800d62a:	1a9b      	subs	r3, r3, r2
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d127      	bne.n	800d682 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800d632:	7d7b      	ldrb	r3, [r7, #21]
 800d634:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800d636:	7d3b      	ldrb	r3, [r7, #20]
 800d638:	4a3f      	ldr	r2, [pc, #252]	@ (800d738 <lorawan_aes_set_key+0x1b8>)
 800d63a:	5cd2      	ldrb	r2, [r2, r3]
 800d63c:	7dbb      	ldrb	r3, [r7, #22]
 800d63e:	4053      	eors	r3, r2
 800d640:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800d642:	7cfb      	ldrb	r3, [r7, #19]
 800d644:	4a3c      	ldr	r2, [pc, #240]	@ (800d738 <lorawan_aes_set_key+0x1b8>)
 800d646:	5cd3      	ldrb	r3, [r2, r3]
 800d648:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800d64a:	7cbb      	ldrb	r3, [r7, #18]
 800d64c:	4a3a      	ldr	r2, [pc, #232]	@ (800d738 <lorawan_aes_set_key+0x1b8>)
 800d64e:	5cd3      	ldrb	r3, [r2, r3]
 800d650:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800d652:	7c3b      	ldrb	r3, [r7, #16]
 800d654:	4a38      	ldr	r2, [pc, #224]	@ (800d738 <lorawan_aes_set_key+0x1b8>)
 800d656:	5cd3      	ldrb	r3, [r2, r3]
 800d658:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800d65a:	7dbb      	ldrb	r3, [r7, #22]
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	b25a      	sxtb	r2, r3
 800d660:	7dbb      	ldrb	r3, [r7, #22]
 800d662:	09db      	lsrs	r3, r3, #7
 800d664:	b2db      	uxtb	r3, r3
 800d666:	4619      	mov	r1, r3
 800d668:	0049      	lsls	r1, r1, #1
 800d66a:	440b      	add	r3, r1
 800d66c:	4619      	mov	r1, r3
 800d66e:	00c8      	lsls	r0, r1, #3
 800d670:	4619      	mov	r1, r3
 800d672:	4603      	mov	r3, r0
 800d674:	440b      	add	r3, r1
 800d676:	b2db      	uxtb	r3, r3
 800d678:	b25b      	sxtb	r3, r3
 800d67a:	4053      	eors	r3, r2
 800d67c:	b25b      	sxtb	r3, r3
 800d67e:	75bb      	strb	r3, [r7, #22]
 800d680:	e01c      	b.n	800d6bc <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d682:	7afb      	ldrb	r3, [r7, #11]
 800d684:	2b18      	cmp	r3, #24
 800d686:	d919      	bls.n	800d6bc <lorawan_aes_set_key+0x13c>
 800d688:	7dfb      	ldrb	r3, [r7, #23]
 800d68a:	7afa      	ldrb	r2, [r7, #11]
 800d68c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d690:	fb01 f202 	mul.w	r2, r1, r2
 800d694:	1a9b      	subs	r3, r3, r2
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b10      	cmp	r3, #16
 800d69a:	d10f      	bne.n	800d6bc <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800d69c:	7d7b      	ldrb	r3, [r7, #21]
 800d69e:	4a26      	ldr	r2, [pc, #152]	@ (800d738 <lorawan_aes_set_key+0x1b8>)
 800d6a0:	5cd3      	ldrb	r3, [r2, r3]
 800d6a2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800d6a4:	7d3b      	ldrb	r3, [r7, #20]
 800d6a6:	4a24      	ldr	r2, [pc, #144]	@ (800d738 <lorawan_aes_set_key+0x1b8>)
 800d6a8:	5cd3      	ldrb	r3, [r2, r3]
 800d6aa:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800d6ac:	7cfb      	ldrb	r3, [r7, #19]
 800d6ae:	4a22      	ldr	r2, [pc, #136]	@ (800d738 <lorawan_aes_set_key+0x1b8>)
 800d6b0:	5cd3      	ldrb	r3, [r2, r3]
 800d6b2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800d6b4:	7cbb      	ldrb	r3, [r7, #18]
 800d6b6:	4a20      	ldr	r2, [pc, #128]	@ (800d738 <lorawan_aes_set_key+0x1b8>)
 800d6b8:	5cd3      	ldrb	r3, [r2, r3]
 800d6ba:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800d6bc:	7dfa      	ldrb	r2, [r7, #23]
 800d6be:	7afb      	ldrb	r3, [r7, #11]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d6c4:	7c3b      	ldrb	r3, [r7, #16]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	5cd1      	ldrb	r1, [r2, r3]
 800d6ca:	7dfb      	ldrb	r3, [r7, #23]
 800d6cc:	7d7a      	ldrb	r2, [r7, #21]
 800d6ce:	404a      	eors	r2, r1
 800d6d0:	b2d1      	uxtb	r1, r2
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d6d6:	7c3b      	ldrb	r3, [r7, #16]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	5cd1      	ldrb	r1, [r2, r3]
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	7d3a      	ldrb	r2, [r7, #20]
 800d6e4:	404a      	eors	r2, r1
 800d6e6:	b2d1      	uxtb	r1, r2
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d6ec:	7c3b      	ldrb	r3, [r7, #16]
 800d6ee:	3302      	adds	r3, #2
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	5cd1      	ldrb	r1, [r2, r3]
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	3302      	adds	r3, #2
 800d6f8:	7cfa      	ldrb	r2, [r7, #19]
 800d6fa:	404a      	eors	r2, r1
 800d6fc:	b2d1      	uxtb	r1, r2
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d702:	7c3b      	ldrb	r3, [r7, #16]
 800d704:	3303      	adds	r3, #3
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	5cd1      	ldrb	r1, [r2, r3]
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
 800d70c:	3303      	adds	r3, #3
 800d70e:	7cba      	ldrb	r2, [r7, #18]
 800d710:	404a      	eors	r2, r1
 800d712:	b2d1      	uxtb	r1, r2
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d718:	7dfb      	ldrb	r3, [r7, #23]
 800d71a:	3304      	adds	r3, #4
 800d71c:	75fb      	strb	r3, [r7, #23]
 800d71e:	7dfa      	ldrb	r2, [r7, #23]
 800d720:	7c7b      	ldrb	r3, [r7, #17]
 800d722:	429a      	cmp	r2, r3
 800d724:	f4ff af67 	bcc.w	800d5f6 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	00010101 	.word	0x00010101
 800d738:	0801fb54 	.word	0x0801fb54

0800d73c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08a      	sub	sp, #40	@ 0x28
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d038      	beq.n	800d7c4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	f107 0314 	add.w	r3, r7, #20
 800d758:	68f9      	ldr	r1, [r7, #12]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff fc07 	bl	800cf6e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d760:	2301      	movs	r3, #1
 800d762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d766:	e014      	b.n	800d792 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d768:	f107 0314 	add.w	r3, r7, #20
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff fd5d 	bl	800d22c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d778:	0112      	lsls	r2, r2, #4
 800d77a:	441a      	add	r2, r3
 800d77c:	f107 0314 	add.w	r3, r7, #20
 800d780:	4611      	mov	r1, r2
 800d782:	4618      	mov	r0, r3
 800d784:	f7ff fcab 	bl	800d0de <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d78c:	3301      	adds	r3, #1
 800d78e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d798:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d3e3      	bcc.n	800d768 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d7a0:	f107 0314 	add.w	r3, r7, #20
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff fca7 	bl	800d0f8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d7b0:	0112      	lsls	r2, r2, #4
 800d7b2:	441a      	add	r2, r3
 800d7b4:	f107 0314 	add.w	r3, r7, #20
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	68b8      	ldr	r0, [r7, #8]
 800d7bc:	f7ff fbd7 	bl	800cf6e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	e000      	b.n	800d7c6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d7c4:	23ff      	movs	r3, #255	@ 0xff
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3728      	adds	r7, #40	@ 0x28
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
	...

0800d7d0 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800d7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7d2:	b0a1      	sub	sp, #132	@ 0x84
 800d7d4:	af12      	add	r7, sp, #72	@ 0x48
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800d7dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f000 fa12 	bl	800dc10 <SecureElementGetKeyByID>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d174      	bne.n	800d8dc <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d7f8:	e06c      	b.n	800d8d4 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800d7fa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d7fe:	4939      	ldr	r1, [pc, #228]	@ (800d8e4 <PrintKey+0x114>)
 800d800:	4613      	mov	r3, r2
 800d802:	005b      	lsls	r3, r3, #1
 800d804:	4413      	add	r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	440b      	add	r3, r1
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d810:	429a      	cmp	r2, r3
 800d812:	d15a      	bne.n	800d8ca <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800d814:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d818:	4932      	ldr	r1, [pc, #200]	@ (800d8e4 <PrintKey+0x114>)
 800d81a:	4613      	mov	r3, r2
 800d81c:	005b      	lsls	r3, r3, #1
 800d81e:	4413      	add	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	440b      	add	r3, r1
 800d824:	3308      	adds	r3, #8
 800d826:	6819      	ldr	r1, [r3, #0]
 800d828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82a:	785b      	ldrb	r3, [r3, #1]
 800d82c:	461d      	mov	r5, r3
 800d82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d830:	789b      	ldrb	r3, [r3, #2]
 800d832:	461e      	mov	r6, r3
 800d834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d836:	78db      	ldrb	r3, [r3, #3]
 800d838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83c:	791b      	ldrb	r3, [r3, #4]
 800d83e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d842:	795b      	ldrb	r3, [r3, #5]
 800d844:	623b      	str	r3, [r7, #32]
 800d846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d848:	799b      	ldrb	r3, [r3, #6]
 800d84a:	61fb      	str	r3, [r7, #28]
 800d84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84e:	79db      	ldrb	r3, [r3, #7]
 800d850:	61bb      	str	r3, [r7, #24]
 800d852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d854:	7a1b      	ldrb	r3, [r3, #8]
 800d856:	617b      	str	r3, [r7, #20]
 800d858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85a:	7a5b      	ldrb	r3, [r3, #9]
 800d85c:	613b      	str	r3, [r7, #16]
 800d85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d860:	7a9b      	ldrb	r3, [r3, #10]
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d866:	7adb      	ldrb	r3, [r3, #11]
 800d868:	60bb      	str	r3, [r7, #8]
 800d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86c:	7b1b      	ldrb	r3, [r3, #12]
 800d86e:	607b      	str	r3, [r7, #4]
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	7b5b      	ldrb	r3, [r3, #13]
 800d874:	461c      	mov	r4, r3
 800d876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d878:	7b9b      	ldrb	r3, [r3, #14]
 800d87a:	4618      	mov	r0, r3
 800d87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87e:	7bdb      	ldrb	r3, [r3, #15]
 800d880:	461a      	mov	r2, r3
 800d882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d884:	7c1b      	ldrb	r3, [r3, #16]
 800d886:	9310      	str	r3, [sp, #64]	@ 0x40
 800d888:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d88a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d88c:	940d      	str	r4, [sp, #52]	@ 0x34
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	920c      	str	r2, [sp, #48]	@ 0x30
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	920a      	str	r2, [sp, #40]	@ 0x28
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d89e:	697a      	ldr	r2, [r7, #20]
 800d8a0:	9208      	str	r2, [sp, #32]
 800d8a2:	69ba      	ldr	r2, [r7, #24]
 800d8a4:	9207      	str	r2, [sp, #28]
 800d8a6:	69fa      	ldr	r2, [r7, #28]
 800d8a8:	9206      	str	r2, [sp, #24]
 800d8aa:	6a3a      	ldr	r2, [r7, #32]
 800d8ac:	9205      	str	r2, [sp, #20]
 800d8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8b0:	9204      	str	r2, [sp, #16]
 800d8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b4:	9303      	str	r3, [sp, #12]
 800d8b6:	9602      	str	r6, [sp, #8]
 800d8b8:	9501      	str	r5, [sp, #4]
 800d8ba:	9100      	str	r1, [sp, #0]
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e8 <PrintKey+0x118>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	2002      	movs	r0, #2
 800d8c4:	f00f ffe2 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
 800d8c8:	e008      	b.n	800d8dc <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d8ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d8d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d8d8:	2b0a      	cmp	r3, #10
 800d8da:	d98e      	bls.n	800d7fa <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800d8dc:	373c      	adds	r7, #60	@ 0x3c
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	0801fe54 	.word	0x0801fe54
 800d8e8:	0801f6c0 	.word	0x0801f6c0

0800d8ec <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ee:	b091      	sub	sp, #68	@ 0x44
 800d8f0:	af08      	add	r7, sp, #32
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800d8fa:	f107 0310 	add.w	r3, r7, #16
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 fbda 	bl	800e0b8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800d904:	7c3b      	ldrb	r3, [r7, #16]
 800d906:	7c7a      	ldrb	r2, [r7, #17]
 800d908:	7cb9      	ldrb	r1, [r7, #18]
 800d90a:	7cf8      	ldrb	r0, [r7, #19]
 800d90c:	7d3c      	ldrb	r4, [r7, #20]
 800d90e:	7d7d      	ldrb	r5, [r7, #21]
 800d910:	7dbe      	ldrb	r6, [r7, #22]
 800d912:	f897 c017 	ldrb.w	ip, [r7, #23]
 800d916:	f8cd c01c 	str.w	ip, [sp, #28]
 800d91a:	9606      	str	r6, [sp, #24]
 800d91c:	9505      	str	r5, [sp, #20]
 800d91e:	9404      	str	r4, [sp, #16]
 800d920:	9003      	str	r0, [sp, #12]
 800d922:	9102      	str	r1, [sp, #8]
 800d924:	9201      	str	r2, [sp, #4]
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	4b24      	ldr	r3, [pc, #144]	@ (800d9bc <PrintIds+0xd0>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	2100      	movs	r1, #0
 800d92e:	2002      	movs	r0, #2
 800d930:	f00f ffac 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800d934:	f107 0318 	add.w	r3, r7, #24
 800d938:	4618      	mov	r0, r3
 800d93a:	f000 fbed 	bl	800e118 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800d93e:	7e3b      	ldrb	r3, [r7, #24]
 800d940:	7e7a      	ldrb	r2, [r7, #25]
 800d942:	7eb9      	ldrb	r1, [r7, #26]
 800d944:	7ef8      	ldrb	r0, [r7, #27]
 800d946:	7f3c      	ldrb	r4, [r7, #28]
 800d948:	7f7d      	ldrb	r5, [r7, #29]
 800d94a:	7fbe      	ldrb	r6, [r7, #30]
 800d94c:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800d950:	f8cd c01c 	str.w	ip, [sp, #28]
 800d954:	9606      	str	r6, [sp, #24]
 800d956:	9505      	str	r5, [sp, #20]
 800d958:	9404      	str	r4, [sp, #16]
 800d95a:	9003      	str	r0, [sp, #12]
 800d95c:	9102      	str	r1, [sp, #8]
 800d95e:	9201      	str	r2, [sp, #4]
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	4b17      	ldr	r3, [pc, #92]	@ (800d9c0 <PrintIds+0xd4>)
 800d964:	2200      	movs	r2, #0
 800d966:	2100      	movs	r1, #0
 800d968:	2002      	movs	r0, #2
 800d96a:	f00f ff8f 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800d96e:	f107 020c 	add.w	r2, r7, #12
 800d972:	79fb      	ldrb	r3, [r7, #7]
 800d974:	4611      	mov	r1, r2
 800d976:	4618      	mov	r0, r3
 800d978:	f000 fc00 	bl	800e17c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d97c:	f107 030c 	add.w	r3, r7, #12
 800d980:	3303      	adds	r3, #3
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	461a      	mov	r2, r3
 800d986:	f107 030c 	add.w	r3, r7, #12
 800d98a:	3302      	adds	r3, #2
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	4619      	mov	r1, r3
 800d990:	f107 030c 	add.w	r3, r7, #12
 800d994:	3301      	adds	r3, #1
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	4618      	mov	r0, r3
 800d99a:	f107 030c 	add.w	r3, r7, #12
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	9303      	str	r3, [sp, #12]
 800d9a2:	9002      	str	r0, [sp, #8]
 800d9a4:	9101      	str	r1, [sp, #4]
 800d9a6:	9200      	str	r2, [sp, #0]
 800d9a8:	4b06      	ldr	r3, [pc, #24]	@ (800d9c4 <PrintIds+0xd8>)
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	2002      	movs	r0, #2
 800d9b0:	f00f ff6c 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800d9b4:	bf00      	nop
 800d9b6:	3724      	adds	r7, #36	@ 0x24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9bc:	0801f71c 	.word	0x0801f71c
 800d9c0:	0801f75c 	.word	0x0801f75c
 800d9c4:	0801f79c 	.word	0x0801f79c

0800d9c8 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	6039      	str	r1, [r7, #0]
 800d9d2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73fb      	strb	r3, [r7, #15]
 800d9d8:	e01a      	b.n	800da10 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d9da:	4b12      	ldr	r3, [pc, #72]	@ (800da24 <GetKeyByID+0x5c>)
 800d9dc:	6819      	ldr	r1, [r3, #0]
 800d9de:	7bfa      	ldrb	r2, [r7, #15]
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	011b      	lsls	r3, r3, #4
 800d9e4:	4413      	add	r3, r2
 800d9e6:	440b      	add	r3, r1
 800d9e8:	3318      	adds	r3, #24
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	79fa      	ldrb	r2, [r7, #7]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d10b      	bne.n	800da0a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800da24 <GetKeyByID+0x5c>)
 800d9f4:	6819      	ldr	r1, [r3, #0]
 800d9f6:	7bfa      	ldrb	r2, [r7, #15]
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	011b      	lsls	r3, r3, #4
 800d9fc:	4413      	add	r3, r2
 800d9fe:	3318      	adds	r3, #24
 800da00:	18ca      	adds	r2, r1, r3
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800da06:	2300      	movs	r3, #0
 800da08:	e006      	b.n	800da18 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
 800da0c:	3301      	adds	r3, #1
 800da0e:	73fb      	strb	r3, [r7, #15]
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	2b0a      	cmp	r3, #10
 800da14:	d9e1      	bls.n	800d9da <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800da16:	2303      	movs	r3, #3
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3714      	adds	r7, #20
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bc80      	pop	{r7}
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	2000058c 	.word	0x2000058c

0800da28 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b0d1      	sub	sp, #324	@ 0x144
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800da32:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800da36:	6020      	str	r0, [r4, #0]
 800da38:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800da3c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800da40:	6001      	str	r1, [r0, #0]
 800da42:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800da46:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800da4a:	600a      	str	r2, [r1, #0]
 800da4c:	461a      	mov	r2, r3
 800da4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da52:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800da56:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800da58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da5c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d003      	beq.n	800da6e <ComputeCmac+0x46>
 800da66:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800da6e:	2302      	movs	r3, #2
 800da70:	e05d      	b.n	800db2e <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800da72:	f107 0314 	add.w	r3, r7, #20
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe ff02 	bl	800c880 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800da7c:	f107 0210 	add.w	r2, r7, #16
 800da80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da84:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	4611      	mov	r1, r2
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7ff ff9b 	bl	800d9c8 <GetKeyByID>
 800da92:	4603      	mov	r3, r0
 800da94:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800da98:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d144      	bne.n	800db2a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800daa0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800daa4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	f107 0314 	add.w	r3, r7, #20
 800dab0:	4611      	mov	r1, r2
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fe fefd 	bl	800c8b2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800dab8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dabc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d009      	beq.n	800dada <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800dac6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800daca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800dace:	f107 0014 	add.w	r0, r7, #20
 800dad2:	2210      	movs	r2, #16
 800dad4:	6819      	ldr	r1, [r3, #0]
 800dad6:	f7fe fefb 	bl	800c8d0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800dada:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dade:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800dae2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dae6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800daea:	f107 0014 	add.w	r0, r7, #20
 800daee:	6812      	ldr	r2, [r2, #0]
 800daf0:	6819      	ldr	r1, [r3, #0]
 800daf2:	f7fe feed 	bl	800c8d0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800daf6:	f107 0214 	add.w	r2, r7, #20
 800dafa:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800dafe:	4611      	mov	r1, r2
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe ffa7 	bl	800ca54 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800db06:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800db0a:	461a      	mov	r2, r3
 800db0c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800db10:	021b      	lsls	r3, r3, #8
 800db12:	431a      	orrs	r2, r3
 800db14:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800db18:	041b      	lsls	r3, r3, #16
 800db1a:	431a      	orrs	r2, r3
 800db1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800db20:	061b      	lsls	r3, r3, #24
 800db22:	431a      	orrs	r2, r3
 800db24:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800db28:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800db2a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800db2e:	4618      	mov	r0, r3
 800db30:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800db34:	46bd      	mov	sp, r7
 800db36:	bd90      	pop	{r4, r7, pc}

0800db38 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db46:	2302      	movs	r3, #2
 800db48:	e00a      	b.n	800db60 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800db4a:	4a07      	ldr	r2, [pc, #28]	@ (800db68 <SecureElementInit+0x30>)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800db50:	4b05      	ldr	r3, [pc, #20]	@ (800db68 <SecureElementInit+0x30>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	22d8      	movs	r2, #216	@ 0xd8
 800db56:	4905      	ldr	r1, [pc, #20]	@ (800db6c <SecureElementInit+0x34>)
 800db58:	4618      	mov	r0, r3
 800db5a:	f00b fb40 	bl	80191de <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	2000058c 	.word	0x2000058c
 800db6c:	080200a8 	.word	0x080200a8

0800db70 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800db7e:	f107 030c 	add.w	r3, r7, #12
 800db82:	4618      	mov	r0, r3
 800db84:	f000 fa98 	bl	800e0b8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800db88:	f107 0308 	add.w	r3, r7, #8
 800db8c:	4619      	mov	r1, r3
 800db8e:	2001      	movs	r0, #1
 800db90:	f000 faf4 	bl	800e17c <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d024      	beq.n	800dbe4 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800db9a:	2300      	movs	r3, #0
 800db9c:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800db9e:	2300      	movs	r3, #0
 800dba0:	75bb      	strb	r3, [r7, #22]
 800dba2:	e00c      	b.n	800dbbe <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800dba4:	7dbb      	ldrb	r3, [r7, #22]
 800dba6:	3318      	adds	r3, #24
 800dba8:	443b      	add	r3, r7
 800dbaa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d002      	beq.n	800dbb8 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	75fb      	strb	r3, [r7, #23]
                break;
 800dbb6:	e005      	b.n	800dbc4 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800dbb8:	7dbb      	ldrb	r3, [r7, #22]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	75bb      	strb	r3, [r7, #22]
 800dbbe:	7dbb      	ldrb	r3, [r7, #22]
 800dbc0:	2b07      	cmp	r3, #7
 800dbc2:	d9ef      	bls.n	800dba4 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800dbc4:	7dfb      	ldrb	r3, [r7, #23]
 800dbc6:	f083 0301 	eor.w	r3, r3, #1
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d009      	beq.n	800dbe4 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800dbd0:	f107 020c 	add.w	r2, r7, #12
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4610      	mov	r0, r2
 800dbd8:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800dbda:	f107 030c 	add.w	r3, r7, #12
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 fa52 	bl	800e088 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00c      	beq.n	800dc04 <SecureElementInitMcuID+0x94>
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d109      	bne.n	800dc04 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800dbf0:	f107 0208 	add.w	r2, r7, #8
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	4610      	mov	r0, r2
 800dbf8:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	2001      	movs	r0, #1
 800dc00:	f000 faa2 	bl	800e148 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
	...

0800dc10 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800dc10:	b480      	push	{r7}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	6039      	str	r1, [r7, #0]
 800dc1a:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]
 800dc20:	e01a      	b.n	800dc58 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dc22:	4b12      	ldr	r3, [pc, #72]	@ (800dc6c <SecureElementGetKeyByID+0x5c>)
 800dc24:	6819      	ldr	r1, [r3, #0]
 800dc26:	7bfa      	ldrb	r2, [r7, #15]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	011b      	lsls	r3, r3, #4
 800dc2c:	4413      	add	r3, r2
 800dc2e:	440b      	add	r3, r1
 800dc30:	3318      	adds	r3, #24
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	79fa      	ldrb	r2, [r7, #7]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d10b      	bne.n	800dc52 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800dc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc6c <SecureElementGetKeyByID+0x5c>)
 800dc3c:	6819      	ldr	r1, [r3, #0]
 800dc3e:	7bfa      	ldrb	r2, [r7, #15]
 800dc40:	4613      	mov	r3, r2
 800dc42:	011b      	lsls	r3, r3, #4
 800dc44:	4413      	add	r3, r2
 800dc46:	3318      	adds	r3, #24
 800dc48:	18ca      	adds	r2, r1, r3
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e006      	b.n	800dc60 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	3301      	adds	r3, #1
 800dc56:	73fb      	strb	r3, [r7, #15]
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
 800dc5a:	2b0a      	cmp	r3, #10
 800dc5c:	d9e1      	bls.n	800dc22 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dc5e:	2303      	movs	r3, #3
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3714      	adds	r7, #20
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bc80      	pop	{r7}
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	2000058c 	.word	0x2000058c

0800dc70 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800dc74:	2000      	movs	r0, #0
 800dc76:	f7ff fdab 	bl	800d7d0 <PrintKey>
    PrintKey( NWK_KEY );
 800dc7a:	2001      	movs	r0, #1
 800dc7c:	f7ff fda8 	bl	800d7d0 <PrintKey>
    PrintKey( APP_S_KEY );
 800dc80:	2009      	movs	r0, #9
 800dc82:	f7ff fda5 	bl	800d7d0 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800dc86:	2008      	movs	r0, #8
 800dc88:	f7ff fda2 	bl	800d7d0 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	f7ff fe2d 	bl	800d8ec <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800dca2:	200b      	movs	r0, #11
 800dca4:	f7ff fd94 	bl	800d7d0 <PrintKey>
    PrintKey( MC_KE_KEY );
 800dca8:	200c      	movs	r0, #12
 800dcaa:	f7ff fd91 	bl	800d7d0 <PrintKey>
    PrintKey( APP_S_KEY );
 800dcae:	2009      	movs	r0, #9
 800dcb0:	f7ff fd8e 	bl	800d7d0 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800dcb4:	2008      	movs	r0, #8
 800dcb6:	f7ff fd8b 	bl	800d7d0 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800dcba:	200a      	movs	r0, #10
 800dcbc:	f7ff fd88 	bl	800d7d0 <PrintKey>
    PrintIds( mode );
 800dcc0:	79fb      	ldrb	r3, [r7, #7]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7ff fe12 	bl	800d8ec <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	4603      	mov	r3, r0
 800dcdc:	6039      	str	r1, [r7, #0]
 800dcde:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d101      	bne.n	800dcea <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dce6:	2302      	movs	r3, #2
 800dce8:	e04c      	b.n	800dd84 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dcea:	2300      	movs	r3, #0
 800dcec:	77fb      	strb	r3, [r7, #31]
 800dcee:	e045      	b.n	800dd7c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dcf0:	4b26      	ldr	r3, [pc, #152]	@ (800dd8c <SecureElementSetKey+0xb8>)
 800dcf2:	6819      	ldr	r1, [r3, #0]
 800dcf4:	7ffa      	ldrb	r2, [r7, #31]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	011b      	lsls	r3, r3, #4
 800dcfa:	4413      	add	r3, r2
 800dcfc:	440b      	add	r3, r1
 800dcfe:	3318      	adds	r3, #24
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	79fa      	ldrb	r2, [r7, #7]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d136      	bne.n	800dd76 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	2b0d      	cmp	r3, #13
 800dd0c:	d123      	bne.n	800dd56 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dd0e:	2306      	movs	r3, #6
 800dd10:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800dd12:	2300      	movs	r3, #0
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	f107 0310 	add.w	r3, r7, #16
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	601a      	str	r2, [r3, #0]
 800dd1e:	605a      	str	r2, [r3, #4]
 800dd20:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800dd22:	f107 030c 	add.w	r3, r7, #12
 800dd26:	220c      	movs	r2, #12
 800dd28:	2110      	movs	r1, #16
 800dd2a:	6838      	ldr	r0, [r7, #0]
 800dd2c:	f000 f876 	bl	800de1c <SecureElementAesEncrypt>
 800dd30:	4603      	mov	r3, r0
 800dd32:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800dd34:	4b15      	ldr	r3, [pc, #84]	@ (800dd8c <SecureElementSetKey+0xb8>)
 800dd36:	6819      	ldr	r1, [r3, #0]
 800dd38:	7ffa      	ldrb	r2, [r7, #31]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	011b      	lsls	r3, r3, #4
 800dd3e:	4413      	add	r3, r2
 800dd40:	3318      	adds	r3, #24
 800dd42:	440b      	add	r3, r1
 800dd44:	3301      	adds	r3, #1
 800dd46:	f107 010c 	add.w	r1, r7, #12
 800dd4a:	2210      	movs	r2, #16
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f00b fa46 	bl	80191de <memcpy1>
                return retval;
 800dd52:	7fbb      	ldrb	r3, [r7, #30]
 800dd54:	e016      	b.n	800dd84 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800dd56:	4b0d      	ldr	r3, [pc, #52]	@ (800dd8c <SecureElementSetKey+0xb8>)
 800dd58:	6819      	ldr	r1, [r3, #0]
 800dd5a:	7ffa      	ldrb	r2, [r7, #31]
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	011b      	lsls	r3, r3, #4
 800dd60:	4413      	add	r3, r2
 800dd62:	3318      	adds	r3, #24
 800dd64:	440b      	add	r3, r1
 800dd66:	3301      	adds	r3, #1
 800dd68:	2210      	movs	r2, #16
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f00b fa36 	bl	80191de <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800dd72:	2300      	movs	r3, #0
 800dd74:	e006      	b.n	800dd84 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dd76:	7ffb      	ldrb	r3, [r7, #31]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	77fb      	strb	r3, [r7, #31]
 800dd7c:	7ffb      	ldrb	r3, [r7, #31]
 800dd7e:	2b0a      	cmp	r3, #10
 800dd80:	d9b6      	bls.n	800dcf0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd82:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3720      	adds	r7, #32
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	2000058c 	.word	0x2000058c

0800dd90 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af02      	add	r7, sp, #8
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
 800dd9c:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800dd9e:	78fb      	ldrb	r3, [r7, #3]
 800dda0:	2b0b      	cmp	r3, #11
 800dda2:	d901      	bls.n	800dda8 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dda4:	2303      	movs	r3, #3
 800dda6:	e009      	b.n	800ddbc <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800dda8:	78fa      	ldrb	r2, [r7, #3]
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	68b9      	ldr	r1, [r7, #8]
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f7ff fe37 	bl	800da28 <ComputeCmac>
 800ddba:	4603      	mov	r3, r0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b088      	sub	sp, #32
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d101      	bne.n	800dddc <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ddd8:	2302      	movs	r3, #2
 800ddda:	e01b      	b.n	800de14 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800dddc:	2306      	movs	r3, #6
 800ddde:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800dde0:	2300      	movs	r3, #0
 800dde2:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800dde4:	78fa      	ldrb	r2, [r7, #3]
 800dde6:	f107 0310 	add.w	r3, r7, #16
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	4613      	mov	r3, r2
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	68f9      	ldr	r1, [r7, #12]
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	f7ff fe18 	bl	800da28 <ComputeCmac>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ddfc:	7dfb      	ldrb	r3, [r7, #23]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d001      	beq.n	800de06 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800de02:	7dfb      	ldrb	r3, [r7, #23]
 800de04:	e006      	b.n	800de14 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d001      	beq.n	800de12 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800de0e:	2301      	movs	r3, #1
 800de10:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800de12:	7dfb      	ldrb	r3, [r7, #23]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3718      	adds	r7, #24
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b0c2      	sub	sp, #264	@ 0x108
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800de28:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800de2c:	6001      	str	r1, [r0, #0]
 800de2e:	4611      	mov	r1, r2
 800de30:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800de34:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800de38:	6013      	str	r3, [r2, #0]
 800de3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800de42:	460a      	mov	r2, r1
 800de44:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d006      	beq.n	800de5a <SecureElementAesEncrypt+0x3e>
 800de4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800de5a:	2302      	movs	r3, #2
 800de5c:	e059      	b.n	800df12 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800de5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de62:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f003 030f 	and.w	r3, r3, #15
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d001      	beq.n	800de74 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800de70:	2305      	movs	r3, #5
 800de72:	e04e      	b.n	800df12 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800de74:	f107 0314 	add.w	r3, r7, #20
 800de78:	22f0      	movs	r2, #240	@ 0xf0
 800de7a:	2100      	movs	r1, #0
 800de7c:	4618      	mov	r0, r3
 800de7e:	f00b f9e9 	bl	8019254 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800de82:	f107 0210 	add.w	r2, r7, #16
 800de86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de8a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	4611      	mov	r1, r2
 800de92:	4618      	mov	r0, r3
 800de94:	f7ff fd98 	bl	800d9c8 <GetKeyByID>
 800de98:	4603      	mov	r3, r0
 800de9a:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800de9e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d133      	bne.n	800df0e <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	3301      	adds	r3, #1
 800deaa:	f107 0214 	add.w	r2, r7, #20
 800deae:	2110      	movs	r1, #16
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7ff fb65 	bl	800d580 <lorawan_aes_set_key>

        uint8_t block = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800debc:	e020      	b.n	800df00 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800debe:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800dec2:	68fa      	ldr	r2, [r7, #12]
 800dec4:	18d0      	adds	r0, r2, r3
 800dec6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800deca:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800dece:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800ded2:	6812      	ldr	r2, [r2, #0]
 800ded4:	4413      	add	r3, r2
 800ded6:	f107 0214 	add.w	r2, r7, #20
 800deda:	4619      	mov	r1, r3
 800dedc:	f7ff fc2e 	bl	800d73c <lorawan_aes_encrypt>
            block = block + 16;
 800dee0:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800dee4:	3310      	adds	r3, #16
 800dee6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800deea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800def2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800def6:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800defa:	6812      	ldr	r2, [r2, #0]
 800defc:	3a10      	subs	r2, #16
 800defe:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800df00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1d7      	bne.n	800debe <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800df0e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800df12:	4618      	mov	r0, r3
 800df14:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b088      	sub	sp, #32
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	460b      	mov	r3, r1
 800df26:	70fb      	strb	r3, [r7, #3]
 800df28:	4613      	mov	r3, r2
 800df2a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d101      	bne.n	800df36 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800df32:	2302      	movs	r3, #2
 800df34:	e02e      	b.n	800df94 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800df36:	2306      	movs	r3, #6
 800df38:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800df3a:	78bb      	ldrb	r3, [r7, #2]
 800df3c:	2b0c      	cmp	r3, #12
 800df3e:	d104      	bne.n	800df4a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800df40:	78fb      	ldrb	r3, [r7, #3]
 800df42:	2b0b      	cmp	r3, #11
 800df44:	d001      	beq.n	800df4a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800df46:	2303      	movs	r3, #3
 800df48:	e024      	b.n	800df94 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800df4a:	2300      	movs	r3, #0
 800df4c:	60fb      	str	r3, [r7, #12]
 800df4e:	f107 0310 	add.w	r3, r7, #16
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	605a      	str	r2, [r3, #4]
 800df58:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800df5a:	f107 030c 	add.w	r3, r7, #12
 800df5e:	78fa      	ldrb	r2, [r7, #3]
 800df60:	2110      	movs	r1, #16
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7ff ff5a 	bl	800de1c <SecureElementAesEncrypt>
 800df68:	4603      	mov	r3, r0
 800df6a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800df6c:	7ffb      	ldrb	r3, [r7, #31]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d001      	beq.n	800df76 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800df72:	7ffb      	ldrb	r3, [r7, #31]
 800df74:	e00e      	b.n	800df94 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800df76:	f107 020c 	add.w	r2, r7, #12
 800df7a:	78bb      	ldrb	r3, [r7, #2]
 800df7c:	4611      	mov	r1, r2
 800df7e:	4618      	mov	r0, r3
 800df80:	f7ff fea8 	bl	800dcd4 <SecureElementSetKey>
 800df84:	4603      	mov	r3, r0
 800df86:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800df88:	7ffb      	ldrb	r3, [r7, #31]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800df8e:	7ffb      	ldrb	r3, [r7, #31]
 800df90:	e000      	b.n	800df94 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800df92:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800df94:	4618      	mov	r0, r3
 800df96:	3720      	adds	r7, #32
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60b9      	str	r1, [r7, #8]
 800dfa4:	607b      	str	r3, [r7, #4]
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	73fb      	strb	r3, [r7, #15]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d005      	beq.n	800dfc0 <SecureElementProcessJoinAccept+0x24>
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d002      	beq.n	800dfc0 <SecureElementProcessJoinAccept+0x24>
 800dfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d101      	bne.n	800dfc4 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dfc0:	2302      	movs	r3, #2
 800dfc2:	e05c      	b.n	800e07e <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800dfc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfc8:	2b21      	cmp	r3, #33	@ 0x21
 800dfca:	d901      	bls.n	800dfd0 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dfcc:	2305      	movs	r3, #5
 800dfce:	e056      	b.n	800e07e <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800dfd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	461a      	mov	r2, r3
 800dfdc:	6879      	ldr	r1, [r7, #4]
 800dfde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dfe0:	f00b f8fd 	bl	80191de <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	1c58      	adds	r0, r3, #1
 800dfe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfec:	3b01      	subs	r3, #1
 800dfee:	4619      	mov	r1, r3
 800dff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff2:	3301      	adds	r3, #1
 800dff4:	7dfa      	ldrb	r2, [r7, #23]
 800dff6:	f7ff ff11 	bl	800de1c <SecureElementAesEncrypt>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e000:	2307      	movs	r3, #7
 800e002:	e03c      	b.n	800e07e <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e006:	330b      	adds	r3, #11
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	09db      	lsrs	r3, r3, #7
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e010:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800e012:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e016:	3b04      	subs	r3, #4
 800e018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e01a:	4413      	add	r3, r2
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	4619      	mov	r1, r3
 800e020:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e024:	3b03      	subs	r3, #3
 800e026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e028:	4413      	add	r3, r2
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	021b      	lsls	r3, r3, #8
 800e02e:	ea41 0203 	orr.w	r2, r1, r3
 800e032:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e036:	3b02      	subs	r3, #2
 800e038:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e03a:	440b      	add	r3, r1
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	041b      	lsls	r3, r3, #16
 800e040:	431a      	orrs	r2, r3
 800e042:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e046:	3b01      	subs	r3, #1
 800e048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e04a:	440b      	add	r3, r1
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	061b      	lsls	r3, r3, #24
 800e050:	4313      	orrs	r3, r2
 800e052:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800e054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10d      	bne.n	800e078 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e05c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e060:	3b04      	subs	r3, #4
 800e062:	4619      	mov	r1, r3
 800e064:	2301      	movs	r3, #1
 800e066:	693a      	ldr	r2, [r7, #16]
 800e068:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e06a:	f7ff feab 	bl	800ddc4 <SecureElementVerifyAesCmac>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d003      	beq.n	800e07c <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e074:	2301      	movs	r3, #1
 800e076:	e002      	b.n	800e07e <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e078:	2304      	movs	r3, #4
 800e07a:	e000      	b.n	800e07e <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3718      	adds	r7, #24
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
	...

0800e088 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d101      	bne.n	800e09a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e096:	2302      	movs	r3, #2
 800e098:	e007      	b.n	800e0aa <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800e09a:	4b06      	ldr	r3, [pc, #24]	@ (800e0b4 <SecureElementSetDevEui+0x2c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2208      	movs	r2, #8
 800e0a0:	6879      	ldr	r1, [r7, #4]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f00b f89b 	bl	80191de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e0a8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	2000058c 	.word	0x2000058c

0800e0b8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d101      	bne.n	800e0ca <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e0c6:	2302      	movs	r3, #2
 800e0c8:	e007      	b.n	800e0da <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800e0ca:	4b06      	ldr	r3, [pc, #24]	@ (800e0e4 <SecureElementGetDevEui+0x2c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2208      	movs	r2, #8
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f00b f883 	bl	80191de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e0d8:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	2000058c 	.word	0x2000058c

0800e0e8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d101      	bne.n	800e0fa <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	e008      	b.n	800e10c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800e0fa:	4b06      	ldr	r3, [pc, #24]	@ (800e114 <SecureElementSetJoinEui+0x2c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	3308      	adds	r3, #8
 800e100:	2208      	movs	r2, #8
 800e102:	6879      	ldr	r1, [r7, #4]
 800e104:	4618      	mov	r0, r3
 800e106:	f00b f86a 	bl	80191de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e10a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	2000058c 	.word	0x2000058c

0800e118 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d101      	bne.n	800e12a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e126:	2302      	movs	r3, #2
 800e128:	e008      	b.n	800e13c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800e12a:	4b06      	ldr	r3, [pc, #24]	@ (800e144 <SecureElementGetJoinEui+0x2c>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	3308      	adds	r3, #8
 800e130:	2208      	movs	r2, #8
 800e132:	4619      	mov	r1, r3
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f00b f852 	bl	80191de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e13a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	2000058c 	.word	0x2000058c

0800e148 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	4603      	mov	r3, r0
 800e150:	6039      	str	r1, [r7, #0]
 800e152:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	2b02      	cmp	r3, #2
 800e158:	d104      	bne.n	800e164 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800e15a:	4b07      	ldr	r3, [pc, #28]	@ (800e178 <SecureElementSetDevAddr+0x30>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	611a      	str	r2, [r3, #16]
 800e162:	e003      	b.n	800e16c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800e164:	4b04      	ldr	r3, [pc, #16]	@ (800e178 <SecureElementSetDevAddr+0x30>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	683a      	ldr	r2, [r7, #0]
 800e16a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800e16c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e16e:	4618      	mov	r0, r3
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	bc80      	pop	{r7}
 800e176:	4770      	bx	lr
 800e178:	2000058c 	.word	0x2000058c

0800e17c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	4603      	mov	r3, r0
 800e184:	6039      	str	r1, [r7, #0]
 800e186:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e18e:	2302      	movs	r3, #2
 800e190:	e00e      	b.n	800e1b0 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	2b02      	cmp	r3, #2
 800e196:	d105      	bne.n	800e1a4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800e198:	4b08      	ldr	r3, [pc, #32]	@ (800e1bc <SecureElementGetDevAddr+0x40>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	691a      	ldr	r2, [r3, #16]
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	e004      	b.n	800e1ae <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800e1a4:	4b05      	ldr	r3, [pc, #20]	@ (800e1bc <SecureElementGetDevAddr+0x40>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	695a      	ldr	r2, [r3, #20]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800e1ae:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bc80      	pop	{r7}
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	2000058c 	.word	0x2000058c

0800e1c0 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800e1ca:	4a29      	ldr	r2, [pc, #164]	@ (800e270 <LmHandlerInit+0xb0>)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800e1d0:	4b28      	ldr	r3, [pc, #160]	@ (800e274 <LmHandlerInit+0xb4>)
 800e1d2:	4a29      	ldr	r2, [pc, #164]	@ (800e278 <LmHandlerInit+0xb8>)
 800e1d4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800e1d6:	4b27      	ldr	r3, [pc, #156]	@ (800e274 <LmHandlerInit+0xb4>)
 800e1d8:	4a28      	ldr	r2, [pc, #160]	@ (800e27c <LmHandlerInit+0xbc>)
 800e1da:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800e1dc:	4b25      	ldr	r3, [pc, #148]	@ (800e274 <LmHandlerInit+0xb4>)
 800e1de:	4a28      	ldr	r2, [pc, #160]	@ (800e280 <LmHandlerInit+0xc0>)
 800e1e0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800e1e2:	4b24      	ldr	r3, [pc, #144]	@ (800e274 <LmHandlerInit+0xb4>)
 800e1e4:	4a27      	ldr	r2, [pc, #156]	@ (800e284 <LmHandlerInit+0xc4>)
 800e1e6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800e1e8:	4b21      	ldr	r3, [pc, #132]	@ (800e270 <LmHandlerInit+0xb0>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4a26      	ldr	r2, [pc, #152]	@ (800e288 <LmHandlerInit+0xc8>)
 800e1f0:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800e1f2:	4b1f      	ldr	r3, [pc, #124]	@ (800e270 <LmHandlerInit+0xb0>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	4a23      	ldr	r2, [pc, #140]	@ (800e288 <LmHandlerInit+0xc8>)
 800e1fa:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800e1fc:	4b1c      	ldr	r3, [pc, #112]	@ (800e270 <LmHandlerInit+0xb0>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	4a21      	ldr	r2, [pc, #132]	@ (800e288 <LmHandlerInit+0xc8>)
 800e204:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800e206:	4b1a      	ldr	r3, [pc, #104]	@ (800e270 <LmHandlerInit+0xb0>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	4a1e      	ldr	r2, [pc, #120]	@ (800e288 <LmHandlerInit+0xc8>)
 800e20e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800e210:	4b1d      	ldr	r3, [pc, #116]	@ (800e288 <LmHandlerInit+0xc8>)
 800e212:	4a1e      	ldr	r2, [pc, #120]	@ (800e28c <LmHandlerInit+0xcc>)
 800e214:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800e216:	4b16      	ldr	r3, [pc, #88]	@ (800e270 <LmHandlerInit+0xb0>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	4a1a      	ldr	r2, [pc, #104]	@ (800e288 <LmHandlerInit+0xc8>)
 800e21e:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	4a1b      	ldr	r2, [pc, #108]	@ (800e290 <LmHandlerInit+0xd0>)
 800e224:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800e226:	4b12      	ldr	r3, [pc, #72]	@ (800e270 <LmHandlerInit+0xb0>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e22c:	4a18      	ldr	r2, [pc, #96]	@ (800e290 <LmHandlerInit+0xd0>)
 800e22e:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800e230:	4b17      	ldr	r3, [pc, #92]	@ (800e290 <LmHandlerInit+0xd0>)
 800e232:	4a18      	ldr	r2, [pc, #96]	@ (800e294 <LmHandlerInit+0xd4>)
 800e234:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800e236:	4b16      	ldr	r3, [pc, #88]	@ (800e290 <LmHandlerInit+0xd0>)
 800e238:	4a17      	ldr	r2, [pc, #92]	@ (800e298 <LmHandlerInit+0xd8>)
 800e23a:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800e23c:	4914      	ldr	r1, [pc, #80]	@ (800e290 <LmHandlerInit+0xd0>)
 800e23e:	2000      	movs	r0, #0
 800e240:	f000 fdc0 	bl	800edc4 <LmHandlerPackageRegister>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800e24a:	f04f 33ff 	mov.w	r3, #4294967295
 800e24e:	e00a      	b.n	800e266 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800e250:	463b      	mov	r3, r7
 800e252:	4618      	mov	r0, r3
 800e254:	f001 fd36 	bl	800fcc4 <LmhpPackagesRegistrationInit>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d002      	beq.n	800e264 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800e25e:	f04f 33ff 	mov.w	r3, #4294967295
 800e262:	e000      	b.n	800e266 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3708      	adds	r7, #8
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	200005e4 	.word	0x200005e4
 800e274:	200005e8 	.word	0x200005e8
 800e278:	0800ea9d 	.word	0x0800ea9d
 800e27c:	0800eb11 	.word	0x0800eb11
 800e280:	0800ebe1 	.word	0x0800ebe1
 800e284:	0800ed31 	.word	0x0800ed31
 800e288:	200005f8 	.word	0x200005f8
 800e28c:	0800f271 	.word	0x0800f271
 800e290:	200005a8 	.word	0x200005a8
 800e294:	0800f085 	.word	0x0800f085
 800e298:	0800f0bd 	.word	0x0800f0bd

0800e29c <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b092      	sub	sp, #72	@ 0x48
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800e2a4:	2218      	movs	r2, #24
 800e2a6:	6879      	ldr	r1, [r7, #4]
 800e2a8:	488a      	ldr	r0, [pc, #552]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e2aa:	f00a ff98 	bl	80191de <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800e2ae:	4b8a      	ldr	r3, [pc, #552]	@ (800e4d8 <LmHandlerConfigure+0x23c>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800e2b4:	f7fe faa2 	bl	800c7fc <LoraInfo_GetPtr>
 800e2b8:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800e2ba:	4b86      	ldr	r3, [pc, #536]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	4093      	lsls	r3, r2
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	4013      	ands	r3, r2
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d107      	bne.n	800e2e0 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800e2d0:	4b82      	ldr	r3, [pc, #520]	@ (800e4dc <LmHandlerConfigure+0x240>)
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	f00f fad8 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800e2dc:	bf00      	nop
 800e2de:	e7fd      	b.n	800e2dc <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800e2e0:	4b7c      	ldr	r3, [pc, #496]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	497e      	ldr	r1, [pc, #504]	@ (800e4e0 <LmHandlerConfigure+0x244>)
 800e2e8:	487e      	ldr	r0, [pc, #504]	@ (800e4e4 <LmHandlerConfigure+0x248>)
 800e2ea:	f005 f80d 	bl	8013308 <LoRaMacInitialization>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f8:	e0e8      	b.n	800e4cc <LmHandlerConfigure+0x230>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800e2fa:	2327      	movs	r3, #39	@ 0x27
 800e2fc:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e2fe:	f107 0318 	add.w	r3, r7, #24
 800e302:	4618      	mov	r0, r3
 800e304:	f005 fd8c 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d103      	bne.n	800e316 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800e30e:	4b76      	ldr	r3, [pc, #472]	@ (800e4e8 <LmHandlerConfigure+0x24c>)
 800e310:	2201      	movs	r2, #1
 800e312:	701a      	strb	r2, [r3, #0]
 800e314:	e02a      	b.n	800e36c <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800e316:	2328      	movs	r3, #40	@ 0x28
 800e318:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800e31a:	4b74      	ldr	r3, [pc, #464]	@ (800e4ec <LmHandlerConfigure+0x250>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00c      	beq.n	800e33e <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e324:	f107 0318 	add.w	r3, r7, #24
 800e328:	4618      	mov	r0, r3
 800e32a:	f005 fba1 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800e32e:	4b6f      	ldr	r3, [pc, #444]	@ (800e4ec <LmHandlerConfigure+0x250>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	69fa      	ldr	r2, [r7, #28]
 800e336:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800e33a:	4610      	mov	r0, r2
 800e33c:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800e33e:	2327      	movs	r3, #39	@ 0x27
 800e340:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e342:	f107 0318 	add.w	r3, r7, #24
 800e346:	4618      	mov	r0, r3
 800e348:	f005 fd6a 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d10c      	bne.n	800e36c <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e352:	2301      	movs	r3, #1
 800e354:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e356:	f107 0318 	add.w	r3, r7, #24
 800e35a:	4618      	mov	r0, r3
 800e35c:	f005 fb88 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e360:	7f3b      	ldrb	r3, [r7, #28]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d002      	beq.n	800e36c <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800e366:	4b60      	ldr	r3, [pc, #384]	@ (800e4e8 <LmHandlerConfigure+0x24c>)
 800e368:	2201      	movs	r2, #1
 800e36a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800e36c:	4b5e      	ldr	r3, [pc, #376]	@ (800e4e8 <LmHandlerConfigure+0x24c>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d02e      	beq.n	800e3d2 <LmHandlerConfigure+0x136>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800e374:	4b5d      	ldr	r3, [pc, #372]	@ (800e4ec <LmHandlerConfigure+0x250>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	69db      	ldr	r3, [r3, #28]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d004      	beq.n	800e388 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800e37e:	4b5b      	ldr	r3, [pc, #364]	@ (800e4ec <LmHandlerConfigure+0x250>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	2000      	movs	r0, #0
 800e386:	4798      	blx	r3
        }

        //BZ #156695
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800e388:	f000 f98e 	bl	800e6a8 <LmHandlerJoinStatus>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d106      	bne.n	800e3a0 <LmHandlerConfigure+0x104>
 800e392:	f002 fc99 	bl	8010cc8 <LoRaMacIsStopped>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d001      	beq.n	800e3a0 <LmHandlerConfigure+0x104>
        { 
            LoRaMacStart();
 800e39c:	f005 fa6a 	bl	8013874 <LoRaMacStart>
        }

        mibReq.Type = MIB_NVM_CTXS;
 800e3a0:	2327      	movs	r3, #39	@ 0x27
 800e3a2:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800e3a4:	f107 0318 	add.w	r3, r7, #24
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f005 fb61 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800e3b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3b4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800e3b8:	4b46      	ldr	r3, [pc, #280]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e3ba:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800e3bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3be:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800e3c2:	4b44      	ldr	r3, [pc, #272]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e3c4:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800e3c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3c8:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800e3cc:	4b41      	ldr	r3, [pc, #260]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e3ce:	709a      	strb	r2, [r3, #2]
 800e3d0:	e008      	b.n	800e3e4 <LmHandlerConfigure+0x148>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800e3d2:	2305      	movs	r3, #5
 800e3d4:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e3da:	f107 0318 	add.w	r3, r7, #24
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f005 fd1e 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800e3e4:	4b3e      	ldr	r3, [pc, #248]	@ (800e4e0 <LmHandlerConfigure+0x244>)
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	4a3d      	ldr	r2, [pc, #244]	@ (800e4e0 <LmHandlerConfigure+0x244>)
 800e3ea:	68d2      	ldr	r2, [r2, #12]
 800e3ec:	4611      	mov	r1, r2
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7ff fbbe 	bl	800db70 <SecureElementInitMcuID>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d002      	beq.n	800e400 <LmHandlerConfigure+0x164>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fe:	e065      	b.n	800e4cc <LmHandlerConfigure+0x230>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800e400:	2306      	movs	r3, #6
 800e402:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e404:	f107 0318 	add.w	r3, r7, #24
 800e408:	4618      	mov	r0, r3
 800e40a:	f005 fb31 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	4a37      	ldr	r2, [pc, #220]	@ (800e4f0 <LmHandlerConfigure+0x254>)
 800e412:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e414:	f107 0318 	add.w	r3, r7, #24
 800e418:	4618      	mov	r0, r3
 800e41a:	f005 fd01 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800e41e:	2302      	movs	r3, #2
 800e420:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800e422:	4b33      	ldr	r3, [pc, #204]	@ (800e4f0 <LmHandlerConfigure+0x254>)
 800e424:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e426:	f107 0318 	add.w	r3, r7, #24
 800e42a:	4618      	mov	r0, r3
 800e42c:	f005 fb20 	bl	8013a70 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800e430:	2303      	movs	r3, #3
 800e432:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800e434:	4b2f      	ldr	r3, [pc, #188]	@ (800e4f4 <LmHandlerConfigure+0x258>)
 800e436:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e438:	f107 0318 	add.w	r3, r7, #24
 800e43c:	4618      	mov	r0, r3
 800e43e:	f005 fb17 	bl	8013a70 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800e442:	f7ff fc15 	bl	800dc70 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800e446:	230f      	movs	r3, #15
 800e448:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e44a:	2301      	movs	r3, #1
 800e44c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e44e:	f107 0318 	add.w	r3, r7, #24
 800e452:	4618      	mov	r0, r3
 800e454:	f005 fce4 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800e458:	2310      	movs	r3, #16
 800e45a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e45c:	2300      	movs	r3, #0
 800e45e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e460:	f107 0318 	add.w	r3, r7, #24
 800e464:	4618      	mov	r0, r3
 800e466:	f005 fcdb 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800e46a:	2304      	movs	r3, #4
 800e46c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e46e:	4b19      	ldr	r3, [pc, #100]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e470:	789b      	ldrb	r3, [r3, #2]
 800e472:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e474:	f107 0318 	add.w	r3, r7, #24
 800e478:	4618      	mov	r0, r3
 800e47a:	f005 fcd1 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800e47e:	233a      	movs	r3, #58	@ 0x3a
 800e480:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800e482:	4b14      	ldr	r3, [pc, #80]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e488:	f107 0318 	add.w	r3, r7, #24
 800e48c:	4618      	mov	r0, r3
 800e48e:	f005 fcc7 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e492:	230f      	movs	r3, #15
 800e494:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800e496:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	f107 0210 	add.w	r2, r7, #16
 800e49e:	4611      	mov	r1, r2
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f008 fc70 	bl	8016d86 <RegionGetPhyParam>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	bf14      	ite	ne
 800e4b0:	2301      	movne	r3, #1
 800e4b2:	2300      	moveq	r3, #0
 800e4b4:	b2da      	uxtb	r2, r3
 800e4b6:	4b07      	ldr	r3, [pc, #28]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e4b8:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800e4ba:	2014      	movs	r0, #20
 800e4bc:	f000 fad6 	bl	800ea6c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800e4c0:	4b04      	ldr	r3, [pc, #16]	@ (800e4d4 <LmHandlerConfigure+0x238>)
 800e4c2:	79db      	ldrb	r3, [r3, #7]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f006 fb89 	bl	8014bdc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3748      	adds	r7, #72	@ 0x48
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	200005cc 	.word	0x200005cc
 800e4d8:	20000614 	.word	0x20000614
 800e4dc:	0801f7c8 	.word	0x0801f7c8
 800e4e0:	200005f8 	.word	0x200005f8
 800e4e4:	200005e8 	.word	0x200005e8
 800e4e8:	2000070a 	.word	0x2000070a
 800e4ec:	200005e4 	.word	0x200005e4
 800e4f0:	20000590 	.word	0x20000590
 800e4f4:	20000598 	.word	0x20000598

0800e4f8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800e4fe:	f002 fe61 	bl	80111c4 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800e502:	f000 fd8b 	bl	800f01c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800e506:	f000 fd5f 	bl	800efc8 <LmHandlerPackageIsTxPending>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d117      	bne.n	800e540 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800e510:	4b0d      	ldr	r3, [pc, #52]	@ (800e548 <LmHandlerProcess+0x50>)
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d014      	beq.n	800e542 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800e518:	2300      	movs	r3, #0
 800e51a:	703b      	strb	r3, [r7, #0]
 800e51c:	2300      	movs	r3, #0
 800e51e:	707b      	strb	r3, [r7, #1]
 800e520:	2300      	movs	r3, #0
 800e522:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800e524:	4b09      	ldr	r3, [pc, #36]	@ (800e54c <LmHandlerProcess+0x54>)
 800e526:	78d9      	ldrb	r1, [r3, #3]
 800e528:	463b      	mov	r3, r7
 800e52a:	2200      	movs	r2, #0
 800e52c:	4618      	mov	r0, r3
 800e52e:	f000 f8d7 	bl	800e6e0 <LmHandlerSend>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d104      	bne.n	800e542 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800e538:	4b03      	ldr	r3, [pc, #12]	@ (800e548 <LmHandlerProcess+0x50>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	e000      	b.n	800e542 <LmHandlerProcess+0x4a>
        return;
 800e540:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	20000614 	.word	0x20000614
 800e54c:	200005cc 	.word	0x200005cc

0800e550 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800e550:	b480      	push	{r7}
 800e552:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800e554:	4b02      	ldr	r3, [pc, #8]	@ (800e560 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800e556:	681b      	ldr	r3, [r3, #0]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bc80      	pop	{r7}
 800e55e:	4770      	bx	lr
 800e560:	20000610 	.word	0x20000610

0800e564 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b092      	sub	sp, #72	@ 0x48
 800e568:	af00      	add	r7, sp, #0
 800e56a:	4603      	mov	r3, r0
 800e56c:	460a      	mov	r2, r1
 800e56e:	71fb      	strb	r3, [r7, #7]
 800e570:	4613      	mov	r3, r2
 800e572:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800e574:	2301      	movs	r3, #1
 800e576:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e57a:	4b46      	ldr	r3, [pc, #280]	@ (800e694 <LmHandlerJoin+0x130>)
 800e57c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800e586:	4b43      	ldr	r3, [pc, #268]	@ (800e694 <LmHandlerJoin+0x130>)
 800e588:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e58c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800e590:	79fb      	ldrb	r3, [r7, #7]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d10b      	bne.n	800e5ae <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e596:	2302      	movs	r3, #2
 800e598:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e59c:	4b3e      	ldr	r3, [pc, #248]	@ (800e698 <LmHandlerJoin+0x134>)
 800e59e:	2202      	movs	r2, #2
 800e5a0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800e5a2:	4a3d      	ldr	r2, [pc, #244]	@ (800e698 <LmHandlerJoin+0x134>)
 800e5a4:	79bb      	ldrb	r3, [r7, #6]
 800e5a6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800e5a8:	f005 f964 	bl	8013874 <LoRaMacStart>
 800e5ac:	e05c      	b.n	800e668 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e5b4:	4b38      	ldr	r3, [pc, #224]	@ (800e698 <LmHandlerJoin+0x134>)
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800e5ba:	4b36      	ldr	r3, [pc, #216]	@ (800e694 <LmHandlerJoin+0x130>)
 800e5bc:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e5c0:	4b35      	ldr	r3, [pc, #212]	@ (800e698 <LmHandlerJoin+0x134>)
 800e5c2:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800e5c4:	4b33      	ldr	r3, [pc, #204]	@ (800e694 <LmHandlerJoin+0x130>)
 800e5c6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800e5ca:	4b33      	ldr	r3, [pc, #204]	@ (800e698 <LmHandlerJoin+0x134>)
 800e5cc:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e5ce:	4b32      	ldr	r3, [pc, #200]	@ (800e698 <LmHandlerJoin+0x134>)
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800e5d4:	4a30      	ldr	r2, [pc, #192]	@ (800e698 <LmHandlerJoin+0x134>)
 800e5d6:	79bb      	ldrb	r3, [r7, #6]
 800e5d8:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800e5da:	4b30      	ldr	r3, [pc, #192]	@ (800e69c <LmHandlerJoin+0x138>)
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	f083 0301 	eor.w	r3, r3, #1
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d034      	beq.n	800e652 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800e5e8:	231f      	movs	r3, #31
 800e5ea:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800e5ec:	4b29      	ldr	r3, [pc, #164]	@ (800e694 <LmHandlerJoin+0x130>)
 800e5ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e5f2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e5f4:	f107 030c 	add.w	r3, r7, #12
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f005 fc11 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800e5fe:	2320      	movs	r3, #32
 800e600:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800e602:	4b24      	ldr	r3, [pc, #144]	@ (800e694 <LmHandlerJoin+0x130>)
 800e604:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e608:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e60a:	f107 030c 	add.w	r3, r7, #12
 800e60e:	4618      	mov	r0, r3
 800e610:	f005 fc06 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800e614:	2322      	movs	r3, #34	@ 0x22
 800e616:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800e618:	4b1e      	ldr	r3, [pc, #120]	@ (800e694 <LmHandlerJoin+0x130>)
 800e61a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e61e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e620:	f107 030c 	add.w	r3, r7, #12
 800e624:	4618      	mov	r0, r3
 800e626:	f005 fbfb 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e62a:	2321      	movs	r3, #33	@ 0x21
 800e62c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800e62e:	4b19      	ldr	r3, [pc, #100]	@ (800e694 <LmHandlerJoin+0x130>)
 800e630:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e634:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e636:	f107 030c 	add.w	r3, r7, #12
 800e63a:	4618      	mov	r0, r3
 800e63c:	f005 fbf0 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e640:	2329      	movs	r3, #41	@ 0x29
 800e642:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e644:	4b16      	ldr	r3, [pc, #88]	@ (800e6a0 <LmHandlerJoin+0x13c>)
 800e646:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e648:	f107 030c 	add.w	r3, r7, #12
 800e64c:	4618      	mov	r0, r3
 800e64e:	f005 fbe7 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800e652:	f005 f90f 	bl	8013874 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e656:	2301      	movs	r3, #1
 800e658:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e65a:	2301      	movs	r3, #1
 800e65c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e65e:	f107 030c 	add.w	r3, r7, #12
 800e662:	4618      	mov	r0, r3
 800e664:	f005 fbdc 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800e668:	4b0c      	ldr	r3, [pc, #48]	@ (800e69c <LmHandlerJoin+0x138>)
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	f083 0301 	eor.w	r3, r3, #1
 800e670:	b2db      	uxtb	r3, r3
 800e672:	2b00      	cmp	r3, #0
 800e674:	d102      	bne.n	800e67c <LmHandlerJoin+0x118>
 800e676:	79bb      	ldrb	r3, [r7, #6]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d004      	beq.n	800e686 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800e67c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e680:	4618      	mov	r0, r3
 800e682:	f005 ffcf 	bl	8014624 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e688:	4a06      	ldr	r2, [pc, #24]	@ (800e6a4 <LmHandlerJoin+0x140>)
 800e68a:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800e68c:	bf00      	nop
 800e68e:	3748      	adds	r7, #72	@ 0x48
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	200005cc 	.word	0x200005cc
 800e698:	20000094 	.word	0x20000094
 800e69c:	2000070a 	.word	0x2000070a
 800e6a0:	01000400 	.word	0x01000400
 800e6a4:	20000610 	.word	0x20000610

0800e6a8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08c      	sub	sp, #48	@ 0x30
 800e6ac:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e6b2:	1d3b      	adds	r3, r7, #4
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f005 f9db 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800e6c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e6c8:	7a3b      	ldrb	r3, [r7, #8]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d101      	bne.n	800e6d2 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	e002      	b.n	800e6d8 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e000      	b.n	800e6d8 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e6d6:	2300      	movs	r3, #0
    }
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3730      	adds	r7, #48	@ 0x30
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b08a      	sub	sp, #40	@ 0x28
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e6f0:	23ff      	movs	r3, #255	@ 0xff
 800e6f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800e6f6:	f002 fabf 	bl	8010c78 <LoRaMacIsBusy>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e700:	f06f 0301 	mvn.w	r3, #1
 800e704:	e0ab      	b.n	800e85e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800e706:	f002 fadf 	bl	8010cc8 <LoRaMacIsStopped>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e710:	f06f 0302 	mvn.w	r3, #2
 800e714:	e0a3      	b.n	800e85e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e716:	f7ff ffc7 	bl	800e6a8 <LmHandlerJoinStatus>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d00a      	beq.n	800e736 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e720:	4b51      	ldr	r3, [pc, #324]	@ (800e868 <LmHandlerSend+0x188>)
 800e722:	79db      	ldrb	r3, [r3, #7]
 800e724:	4a50      	ldr	r2, [pc, #320]	@ (800e868 <LmHandlerSend+0x188>)
 800e726:	7a12      	ldrb	r2, [r2, #8]
 800e728:	4611      	mov	r1, r2
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff ff1a 	bl	800e564 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e730:	f06f 0302 	mvn.w	r3, #2
 800e734:	e093      	b.n	800e85e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e736:	4a4d      	ldr	r2, [pc, #308]	@ (800e86c <LmHandlerSend+0x18c>)
 800e738:	78fb      	ldrb	r3, [r7, #3]
 800e73a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e73c:	78fb      	ldrb	r3, [r7, #3]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	bf14      	ite	ne
 800e742:	2301      	movne	r3, #1
 800e744:	2300      	moveq	r3, #0
 800e746:	b2db      	uxtb	r3, r3
 800e748:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e74a:	4b49      	ldr	r3, [pc, #292]	@ (800e870 <LmHandlerSend+0x190>)
 800e74c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e750:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	785b      	ldrb	r3, [r3, #1]
 800e756:	f107 020c 	add.w	r2, r7, #12
 800e75a:	4611      	mov	r1, r2
 800e75c:	4618      	mov	r0, r3
 800e75e:	f005 f8f7 	bl	8013950 <LoRaMacQueryTxPossible>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d009      	beq.n	800e77c <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e768:	2300      	movs	r3, #0
 800e76a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e76c:	2300      	movs	r3, #0
 800e76e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e770:	2300      	movs	r3, #0
 800e772:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e774:	23f9      	movs	r3, #249	@ 0xf9
 800e776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e77a:	e008      	b.n	800e78e <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	785b      	ldrb	r3, [r3, #1]
 800e786:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e78e:	4b37      	ldr	r3, [pc, #220]	@ (800e86c <LmHandlerSend+0x18c>)
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	3310      	adds	r3, #16
 800e794:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e798:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e79c:	4b34      	ldr	r3, [pc, #208]	@ (800e870 <LmHandlerSend+0x190>)
 800e79e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e7a2:	4b32      	ldr	r3, [pc, #200]	@ (800e86c <LmHandlerSend+0x18c>)
 800e7a4:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800e7a6:	78ba      	ldrb	r2, [r7, #2]
 800e7a8:	f107 0310 	add.w	r3, r7, #16
 800e7ac:	4611      	mov	r1, r2
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f006 f8dc 	bl	801496c <LoRaMacMcpsRequest>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e7ba:	6a3b      	ldr	r3, [r7, #32]
 800e7bc:	4a2d      	ldr	r2, [pc, #180]	@ (800e874 <LmHandlerSend+0x194>)
 800e7be:	6013      	str	r3, [r2, #0]

    switch( status )
 800e7c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e7c4:	2b11      	cmp	r3, #17
 800e7c6:	d843      	bhi.n	800e850 <LmHandlerSend+0x170>
 800e7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800e7d0 <LmHandlerSend+0xf0>)
 800e7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ce:	bf00      	nop
 800e7d0:	0800e819 	.word	0x0800e819
 800e7d4:	0800e831 	.word	0x0800e831
 800e7d8:	0800e851 	.word	0x0800e851
 800e7dc:	0800e851 	.word	0x0800e851
 800e7e0:	0800e851 	.word	0x0800e851
 800e7e4:	0800e851 	.word	0x0800e851
 800e7e8:	0800e851 	.word	0x0800e851
 800e7ec:	0800e839 	.word	0x0800e839
 800e7f0:	0800e851 	.word	0x0800e851
 800e7f4:	0800e851 	.word	0x0800e851
 800e7f8:	0800e851 	.word	0x0800e851
 800e7fc:	0800e849 	.word	0x0800e849
 800e800:	0800e851 	.word	0x0800e851
 800e804:	0800e851 	.word	0x0800e851
 800e808:	0800e831 	.word	0x0800e831
 800e80c:	0800e831 	.word	0x0800e831
 800e810:	0800e831 	.word	0x0800e831
 800e814:	0800e841 	.word	0x0800e841
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800e818:	4b17      	ldr	r3, [pc, #92]	@ (800e878 <LmHandlerSend+0x198>)
 800e81a:	2200      	movs	r2, #0
 800e81c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800e81e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e822:	f113 0f07 	cmn.w	r3, #7
 800e826:	d017      	beq.n	800e858 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e828:	2300      	movs	r3, #0
 800e82a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800e82e:	e013      	b.n	800e858 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e830:	23fe      	movs	r3, #254	@ 0xfe
 800e832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e836:	e010      	b.n	800e85a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e838:	23fd      	movs	r3, #253	@ 0xfd
 800e83a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e83e:	e00c      	b.n	800e85a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e840:	23fb      	movs	r3, #251	@ 0xfb
 800e842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e846:	e008      	b.n	800e85a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e848:	23fa      	movs	r3, #250	@ 0xfa
 800e84a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e84e:	e004      	b.n	800e85a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e850:	23ff      	movs	r3, #255	@ 0xff
 800e852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e856:	e000      	b.n	800e85a <LmHandlerSend+0x17a>
            break;
 800e858:	bf00      	nop
    }

    return lmhStatus;
 800e85a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3728      	adds	r7, #40	@ 0x28
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	20000094 	.word	0x20000094
 800e86c:	200000a0 	.word	0x200000a0
 800e870:	200005cc 	.word	0x200005cc
 800e874:	20000610 	.word	0x20000610
 800e878:	20000614 	.word	0x20000614

0800e87c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e882:	2309      	movs	r3, #9
 800e884:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e886:	463b      	mov	r3, r7
 800e888:	4618      	mov	r0, r3
 800e88a:	f005 fecb 	bl	8014624 <LoRaMacMlmeRequest>
 800e88e:	4603      	mov	r3, r0
 800e890:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	4a06      	ldr	r2, [pc, #24]	@ (800e8b0 <LmHandlerDeviceTimeReq+0x34>)
 800e896:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d101      	bne.n	800e8a2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	e001      	b.n	800e8a6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e8a2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3718      	adds	r7, #24
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20000610 	.word	0x20000610

0800e8b4 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e8be:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bc80      	pop	{r7}
 800e8ca:	4770      	bx	lr

0800e8cc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b08e      	sub	sp, #56	@ 0x38
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800e8dc:	f002 f9cc 	bl	8010c78 <LoRaMacIsBusy>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d002      	beq.n	800e8ec <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e8e6:	f06f 0301 	mvn.w	r3, #1
 800e8ea:	e071      	b.n	800e9d0 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800e8ec:	f7ff fedc 	bl	800e6a8 <LmHandlerJoinStatus>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d002      	beq.n	800e8fc <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e8f6:	f06f 0302 	mvn.w	r3, #2
 800e8fa:	e069      	b.n	800e9d0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e900:	f107 030c 	add.w	r3, r7, #12
 800e904:	4618      	mov	r0, r3
 800e906:	f005 f8b3 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e910:	f04f 33ff 	mov.w	r3, #4294967295
 800e914:	e05c      	b.n	800e9d0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800e916:	7c3b      	ldrb	r3, [r7, #16]
 800e918:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800e91c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e920:	79fb      	ldrb	r3, [r7, #7]
 800e922:	429a      	cmp	r2, r3
 800e924:	d052      	beq.n	800e9cc <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800e926:	79fb      	ldrb	r3, [r7, #7]
 800e928:	2b02      	cmp	r3, #2
 800e92a:	d028      	beq.n	800e97e <LmHandlerRequestClass+0xb2>
 800e92c:	2b02      	cmp	r3, #2
 800e92e:	dc48      	bgt.n	800e9c2 <LmHandlerRequestClass+0xf6>
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <LmHandlerRequestClass+0x6e>
 800e934:	2b01      	cmp	r3, #1
 800e936:	d01e      	beq.n	800e976 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800e938:	e043      	b.n	800e9c2 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800e93a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d041      	beq.n	800e9c6 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e946:	f107 030c 	add.w	r3, r7, #12
 800e94a:	4618      	mov	r0, r3
 800e94c:	f005 fa68 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d10b      	bne.n	800e96e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e956:	4b20      	ldr	r3, [pc, #128]	@ (800e9d8 <LmHandlerRequestClass+0x10c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d032      	beq.n	800e9c6 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e960:	4b1d      	ldr	r3, [pc, #116]	@ (800e9d8 <LmHandlerRequestClass+0x10c>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e966:	79fa      	ldrb	r2, [r7, #7]
 800e968:	4610      	mov	r0, r2
 800e96a:	4798      	blx	r3
                break;
 800e96c:	e02b      	b.n	800e9c6 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e96e:	23ff      	movs	r3, #255	@ 0xff
 800e970:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e974:	e027      	b.n	800e9c6 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e976:	23ff      	movs	r3, #255	@ 0xff
 800e978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e97c:	e026      	b.n	800e9cc <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800e97e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e986:	23ff      	movs	r3, #255	@ 0xff
 800e988:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e98c:	e01d      	b.n	800e9ca <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800e98e:	79fb      	ldrb	r3, [r7, #7]
 800e990:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e992:	f107 030c 	add.w	r3, r7, #12
 800e996:	4618      	mov	r0, r3
 800e998:	f005 fa42 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10b      	bne.n	800e9ba <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d8 <LmHandlerRequestClass+0x10c>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00e      	beq.n	800e9ca <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e9d8 <LmHandlerRequestClass+0x10c>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9b2:	79fa      	ldrb	r2, [r7, #7]
 800e9b4:	4610      	mov	r0, r2
 800e9b6:	4798      	blx	r3
                break;
 800e9b8:	e007      	b.n	800e9ca <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e9ba:	23ff      	movs	r3, #255	@ 0xff
 800e9bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e9c0:	e003      	b.n	800e9ca <LmHandlerRequestClass+0xfe>
                break;
 800e9c2:	bf00      	nop
 800e9c4:	e002      	b.n	800e9cc <LmHandlerRequestClass+0x100>
                break;
 800e9c6:	bf00      	nop
 800e9c8:	e000      	b.n	800e9cc <LmHandlerRequestClass+0x100>
                break;
 800e9ca:	bf00      	nop
        }
    }
    return errorStatus;
 800e9cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3738      	adds	r7, #56	@ 0x38
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	200005e4 	.word	0x200005e4

0800e9dc <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08c      	sub	sp, #48	@ 0x30
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d102      	bne.n	800e9f0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ee:	e010      	b.n	800ea12 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e9f4:	f107 0308 	add.w	r3, r7, #8
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f005 f839 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea04:	f04f 33ff 	mov.w	r3, #4294967295
 800ea08:	e003      	b.n	800ea12 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800ea0a:	7b3a      	ldrb	r2, [r7, #12]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ea10:	2300      	movs	r3, #0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3730      	adds	r7, #48	@ 0x30
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
	...

0800ea1c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b08c      	sub	sp, #48	@ 0x30
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d102      	bne.n	800ea30 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea2e:	e016      	b.n	800ea5e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ea30:	2320      	movs	r3, #32
 800ea32:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800ea34:	f107 0308 	add.w	r3, r7, #8
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f005 f819 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d002      	beq.n	800ea4a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea44:	f04f 33ff 	mov.w	r3, #4294967295
 800ea48:	e009      	b.n	800ea5e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ea4a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f993 2000 	ldrsb.w	r2, [r3]
 800ea58:	4b03      	ldr	r3, [pc, #12]	@ (800ea68 <LmHandlerGetTxDatarate+0x4c>)
 800ea5a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3730      	adds	r7, #48	@ 0x30
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	200005cc 	.word	0x200005cc

0800ea6c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b08c      	sub	sp, #48	@ 0x30
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ea74:	2323      	movs	r3, #35	@ 0x23
 800ea76:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ea7c:	f107 0308 	add.w	r3, r7, #8
 800ea80:	4618      	mov	r0, r3
 800ea82:	f005 f9cd 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea90:	e000      	b.n	800ea94 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3730      	adds	r7, #48	@ 0x30
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800eaa4:	4b18      	ldr	r3, [pc, #96]	@ (800eb08 <McpsConfirm+0x6c>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	785a      	ldrb	r2, [r3, #1]
 800eaae:	4b16      	ldr	r3, [pc, #88]	@ (800eb08 <McpsConfirm+0x6c>)
 800eab0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	789b      	ldrb	r3, [r3, #2]
 800eab6:	b25a      	sxtb	r2, r3
 800eab8:	4b13      	ldr	r3, [pc, #76]	@ (800eb08 <McpsConfirm+0x6c>)
 800eaba:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	4a11      	ldr	r2, [pc, #68]	@ (800eb08 <McpsConfirm+0x6c>)
 800eac2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800eaca:	4b0f      	ldr	r3, [pc, #60]	@ (800eb08 <McpsConfirm+0x6c>)
 800eacc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	4b0c      	ldr	r3, [pc, #48]	@ (800eb08 <McpsConfirm+0x6c>)
 800ead6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	791b      	ldrb	r3, [r3, #4]
 800eadc:	461a      	mov	r2, r3
 800eade:	4b0a      	ldr	r3, [pc, #40]	@ (800eb08 <McpsConfirm+0x6c>)
 800eae0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800eae2:	4b0a      	ldr	r3, [pc, #40]	@ (800eb0c <McpsConfirm+0x70>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d004      	beq.n	800eaf6 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800eaec:	4b07      	ldr	r3, [pc, #28]	@ (800eb0c <McpsConfirm+0x70>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaf2:	4805      	ldr	r0, [pc, #20]	@ (800eb08 <McpsConfirm+0x6c>)
 800eaf4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	2000      	movs	r0, #0
 800eafa:	f000 f9e9 	bl	800eed0 <LmHandlerPackagesNotify>
}
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	200000a0 	.word	0x200000a0
 800eb0c:	200005e4 	.word	0x200005e4

0800eb10 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b086      	sub	sp, #24
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800eb1e:	4b2d      	ldr	r3, [pc, #180]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb20:	2201      	movs	r2, #1
 800eb22:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	785a      	ldrb	r2, [r3, #1]
 800eb28:	4b2a      	ldr	r3, [pc, #168]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb2a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800eb2c:	4b29      	ldr	r3, [pc, #164]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb2e:	785b      	ldrb	r3, [r3, #1]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d14b      	bne.n	800ebcc <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	791b      	ldrb	r3, [r3, #4]
 800eb38:	b25a      	sxtb	r2, r3
 800eb3a:	4b26      	ldr	r3, [pc, #152]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb3c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb44:	b25a      	sxtb	r2, r3
 800eb46:	4b23      	ldr	r3, [pc, #140]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb48:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800eb50:	4b20      	ldr	r3, [pc, #128]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb52:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	78da      	ldrb	r2, [r3, #3]
 800eb58:	4b1e      	ldr	r3, [pc, #120]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb5a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	4a1c      	ldr	r2, [pc, #112]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb62:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	78db      	ldrb	r3, [r3, #3]
 800eb68:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	7b1b      	ldrb	r3, [r3, #12]
 800eb6e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800eb76:	4b18      	ldr	r3, [pc, #96]	@ (800ebd8 <McpsIndication+0xc8>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d007      	beq.n	800eb90 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800eb80:	4b15      	ldr	r3, [pc, #84]	@ (800ebd8 <McpsIndication+0xc8>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb86:	f107 0210 	add.w	r2, r7, #16
 800eb8a:	4912      	ldr	r1, [pc, #72]	@ (800ebd4 <McpsIndication+0xc4>)
 800eb8c:	4610      	mov	r0, r2
 800eb8e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800eb90:	4b11      	ldr	r3, [pc, #68]	@ (800ebd8 <McpsIndication+0xc8>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d007      	beq.n	800ebaa <McpsIndication+0x9a>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	7e1b      	ldrb	r3, [r3, #24]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d003      	beq.n	800ebaa <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800eba2:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd8 <McpsIndication+0xc8>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eba8:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ebaa:	6879      	ldr	r1, [r7, #4]
 800ebac:	2001      	movs	r0, #1
 800ebae:	f000 f98f 	bl	800eed0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ebb2:	f107 030f 	add.w	r3, r7, #15
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7ff ff10 	bl	800e9dc <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	795b      	ldrb	r3, [r3, #5]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d004      	beq.n	800ebce <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800ebc4:	4b05      	ldr	r3, [pc, #20]	@ (800ebdc <McpsIndication+0xcc>)
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	701a      	strb	r2, [r3, #0]
 800ebca:	e000      	b.n	800ebce <McpsIndication+0xbe>
        return;
 800ebcc:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	200000bc 	.word	0x200000bc
 800ebd8:	200005e4 	.word	0x200005e4
 800ebdc:	20000614 	.word	0x20000614

0800ebe0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b08c      	sub	sp, #48	@ 0x30
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ebe8:	4b49      	ldr	r3, [pc, #292]	@ (800ed10 <MlmeConfirm+0x130>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	785a      	ldrb	r2, [r3, #1]
 800ebf2:	4b47      	ldr	r3, [pc, #284]	@ (800ed10 <MlmeConfirm+0x130>)
 800ebf4:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800ebf6:	4b47      	ldr	r3, [pc, #284]	@ (800ed14 <MlmeConfirm+0x134>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d004      	beq.n	800ec0a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ec00:	4b44      	ldr	r3, [pc, #272]	@ (800ed14 <MlmeConfirm+0x134>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec06:	4842      	ldr	r0, [pc, #264]	@ (800ed10 <MlmeConfirm+0x130>)
 800ec08:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ec0a:	6879      	ldr	r1, [r7, #4]
 800ec0c:	2002      	movs	r0, #2
 800ec0e:	f000 f95f 	bl	800eed0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	3b01      	subs	r3, #1
 800ec18:	2b0b      	cmp	r3, #11
 800ec1a:	d872      	bhi.n	800ed02 <MlmeConfirm+0x122>
 800ec1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ec24 <MlmeConfirm+0x44>)
 800ec1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec22:	bf00      	nop
 800ec24:	0800ec55 	.word	0x0800ec55
 800ec28:	0800ed03 	.word	0x0800ed03
 800ec2c:	0800ed03 	.word	0x0800ed03
 800ec30:	0800ed03 	.word	0x0800ed03
 800ec34:	0800ecd1 	.word	0x0800ecd1
 800ec38:	0800ed03 	.word	0x0800ed03
 800ec3c:	0800ed03 	.word	0x0800ed03
 800ec40:	0800ed03 	.word	0x0800ed03
 800ec44:	0800ed03 	.word	0x0800ed03
 800ec48:	0800ed03 	.word	0x0800ed03
 800ec4c:	0800ece9 	.word	0x0800ece9
 800ec50:	0800ed03 	.word	0x0800ed03
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800ec54:	2306      	movs	r3, #6
 800ec56:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800ec58:	f107 0308 	add.w	r3, r7, #8
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f004 ff07 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800ec62:	4b2d      	ldr	r3, [pc, #180]	@ (800ed18 <MlmeConfirm+0x138>)
 800ec64:	79db      	ldrb	r3, [r3, #7]
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	4611      	mov	r1, r2
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff fa6c 	bl	800e148 <SecureElementSetDevAddr>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d102      	bne.n	800ec7c <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	4a28      	ldr	r2, [pc, #160]	@ (800ed1c <MlmeConfirm+0x13c>)
 800ec7a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800ec7c:	4828      	ldr	r0, [pc, #160]	@ (800ed20 <MlmeConfirm+0x140>)
 800ec7e:	f7ff fecd 	bl	800ea1c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800ec82:	4828      	ldr	r0, [pc, #160]	@ (800ed24 <MlmeConfirm+0x144>)
 800ec84:	f000 fa74 	bl	800f170 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ec88:	4b21      	ldr	r3, [pc, #132]	@ (800ed10 <MlmeConfirm+0x130>)
 800ec8a:	785b      	ldrb	r3, [r3, #1]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d108      	bne.n	800eca2 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ec90:	4b21      	ldr	r3, [pc, #132]	@ (800ed18 <MlmeConfirm+0x138>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800ec96:	4b24      	ldr	r3, [pc, #144]	@ (800ed28 <MlmeConfirm+0x148>)
 800ec98:	785b      	ldrb	r3, [r3, #1]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7ff fe16 	bl	800e8cc <LmHandlerRequestClass>
 800eca0:	e002      	b.n	800eca8 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800eca2:	4b1d      	ldr	r3, [pc, #116]	@ (800ed18 <MlmeConfirm+0x138>)
 800eca4:	22ff      	movs	r2, #255	@ 0xff
 800eca6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800eca8:	4b1a      	ldr	r3, [pc, #104]	@ (800ed14 <MlmeConfirm+0x134>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d004      	beq.n	800ecbc <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ecb2:	4b18      	ldr	r3, [pc, #96]	@ (800ed14 <MlmeConfirm+0x134>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb8:	4817      	ldr	r0, [pc, #92]	@ (800ed18 <MlmeConfirm+0x138>)
 800ecba:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ecbc:	4b14      	ldr	r3, [pc, #80]	@ (800ed10 <MlmeConfirm+0x130>)
 800ecbe:	785b      	ldrb	r3, [r3, #1]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d120      	bne.n	800ed06 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800ecc4:	4b14      	ldr	r3, [pc, #80]	@ (800ed18 <MlmeConfirm+0x138>)
 800ecc6:	79db      	ldrb	r3, [r3, #7]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fe ffe5 	bl	800dc98 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800ecce:	e01a      	b.n	800ed06 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800ecd0:	4b16      	ldr	r3, [pc, #88]	@ (800ed2c <MlmeConfirm+0x14c>)
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	7a1a      	ldrb	r2, [r3, #8]
 800ecda:	4b14      	ldr	r3, [pc, #80]	@ (800ed2c <MlmeConfirm+0x14c>)
 800ecdc:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	7a5a      	ldrb	r2, [r3, #9]
 800ece2:	4b12      	ldr	r3, [pc, #72]	@ (800ed2c <MlmeConfirm+0x14c>)
 800ece4:	74da      	strb	r2, [r3, #19]
            }
            break;
 800ece6:	e00f      	b.n	800ed08 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	785b      	ldrb	r3, [r3, #1]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d105      	bne.n	800ecfc <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800ecf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ed28 <MlmeConfirm+0x148>)
 800ecf2:	7c1b      	ldrb	r3, [r3, #16]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff fddd 	bl	800e8b4 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800ecfa:	e005      	b.n	800ed08 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800ecfc:	f7ff fdbe 	bl	800e87c <LmHandlerDeviceTimeReq>
            break;
 800ed00:	e002      	b.n	800ed08 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800ed02:	bf00      	nop
 800ed04:	e000      	b.n	800ed08 <MlmeConfirm+0x128>
            break;
 800ed06:	bf00      	nop
    }
}
 800ed08:	bf00      	nop
 800ed0a:	3730      	adds	r7, #48	@ 0x30
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	200000a0 	.word	0x200000a0
 800ed14:	200005e4 	.word	0x200005e4
 800ed18:	20000094 	.word	0x20000094
 800ed1c:	20000590 	.word	0x20000590
 800ed20:	20000098 	.word	0x20000098
 800ed24:	20000099 	.word	0x20000099
 800ed28:	200005cc 	.word	0x200005cc
 800ed2c:	200000bc 	.word	0x200000bc

0800ed30 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ed3a:	4b20      	ldr	r3, [pc, #128]	@ (800edbc <MlmeIndication+0x8c>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	785a      	ldrb	r2, [r3, #1]
 800ed44:	4b1d      	ldr	r3, [pc, #116]	@ (800edbc <MlmeIndication+0x8c>)
 800ed46:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	789b      	ldrb	r3, [r3, #2]
 800ed4c:	b25a      	sxtb	r2, r3
 800ed4e:	4b1b      	ldr	r3, [pc, #108]	@ (800edbc <MlmeIndication+0x8c>)
 800ed50:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed58:	b25a      	sxtb	r2, r3
 800ed5a:	4b18      	ldr	r3, [pc, #96]	@ (800edbc <MlmeIndication+0x8c>)
 800ed5c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ed64:	4b15      	ldr	r3, [pc, #84]	@ (800edbc <MlmeIndication+0x8c>)
 800ed66:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	78da      	ldrb	r2, [r3, #3]
 800ed6c:	4b13      	ldr	r3, [pc, #76]	@ (800edbc <MlmeIndication+0x8c>)
 800ed6e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	4a11      	ldr	r2, [pc, #68]	@ (800edbc <MlmeIndication+0x8c>)
 800ed76:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800ed78:	4b11      	ldr	r3, [pc, #68]	@ (800edc0 <MlmeIndication+0x90>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00d      	beq.n	800ed9e <MlmeIndication+0x6e>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b0a      	cmp	r3, #10
 800ed88:	d009      	beq.n	800ed9e <MlmeIndication+0x6e>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	2b0e      	cmp	r3, #14
 800ed90:	d005      	beq.n	800ed9e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ed92:	4b0b      	ldr	r3, [pc, #44]	@ (800edc0 <MlmeIndication+0x90>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed98:	4908      	ldr	r1, [pc, #32]	@ (800edbc <MlmeIndication+0x8c>)
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ed9e:	6879      	ldr	r1, [r7, #4]
 800eda0:	2003      	movs	r0, #3
 800eda2:	f000 f895 	bl	800eed0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	2b0a      	cmp	r3, #10
 800edac:	d001      	beq.n	800edb2 <MlmeIndication+0x82>
 800edae:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800edb0:	e000      	b.n	800edb4 <MlmeIndication+0x84>
            break;
 800edb2:	bf00      	nop
    }
}
 800edb4:	bf00      	nop
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	200000bc 	.word	0x200000bc
 800edc0:	200005e4 	.word	0x200005e4

0800edc4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	4603      	mov	r3, r0
 800edcc:	6039      	str	r1, [r7, #0]
 800edce:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800edd0:	2300      	movs	r3, #0
 800edd2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800edd4:	79fb      	ldrb	r3, [r7, #7]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d104      	bne.n	800ede4 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800edda:	f000 fa8b 	bl	800f2f4 <LmhpCompliancePackageFactory>
 800edde:	4603      	mov	r3, r0
 800ede0:	60fb      	str	r3, [r7, #12]
                break;
 800ede2:	e00d      	b.n	800ee00 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800ede4:	f107 020c 	add.w	r2, r7, #12
 800ede8:	79fb      	ldrb	r3, [r7, #7]
 800edea:	4611      	mov	r1, r2
 800edec:	4618      	mov	r0, r3
 800edee:	f000 ff73 	bl	800fcd8 <LmhpPackagesRegister>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d002      	beq.n	800edfe <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800edf8:	f04f 33ff 	mov.w	r3, #4294967295
 800edfc:	e03b      	b.n	800ee76 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800edfe:	bf00      	nop
            }
    }
    if( package != NULL )
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d035      	beq.n	800ee72 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800ee06:	79fb      	ldrb	r3, [r7, #7]
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	491d      	ldr	r1, [pc, #116]	@ (800ee80 <LmHandlerPackageRegister+0xbc>)
 800ee0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	4a1b      	ldr	r2, [pc, #108]	@ (800ee80 <LmHandlerPackageRegister+0xbc>)
 800ee14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee18:	4a1a      	ldr	r2, [pc, #104]	@ (800ee84 <LmHandlerPackageRegister+0xc0>)
 800ee1a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800ee1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ee88 <LmHandlerPackageRegister+0xc4>)
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	79fb      	ldrb	r3, [r7, #7]
 800ee22:	4917      	ldr	r1, [pc, #92]	@ (800ee80 <LmHandlerPackageRegister+0xbc>)
 800ee24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ee28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ee2a:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800ee2c:	4b16      	ldr	r3, [pc, #88]	@ (800ee88 <LmHandlerPackageRegister+0xc4>)
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	79fb      	ldrb	r3, [r7, #7]
 800ee32:	4913      	ldr	r1, [pc, #76]	@ (800ee80 <LmHandlerPackageRegister+0xbc>)
 800ee34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ee38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ee3a:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
 800ee3e:	4a10      	ldr	r2, [pc, #64]	@ (800ee80 <LmHandlerPackageRegister+0xbc>)
 800ee40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee44:	4a11      	ldr	r2, [pc, #68]	@ (800ee8c <LmHandlerPackageRegister+0xc8>)
 800ee46:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800ee48:	4b0f      	ldr	r3, [pc, #60]	@ (800ee88 <LmHandlerPackageRegister+0xc4>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	490c      	ldr	r1, [pc, #48]	@ (800ee80 <LmHandlerPackageRegister+0xbc>)
 800ee50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ee54:	6992      	ldr	r2, [r2, #24]
 800ee56:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800ee58:	79fb      	ldrb	r3, [r7, #7]
 800ee5a:	4a09      	ldr	r2, [pc, #36]	@ (800ee80 <LmHandlerPackageRegister+0xbc>)
 800ee5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	4a0b      	ldr	r2, [pc, #44]	@ (800ee90 <LmHandlerPackageRegister+0xcc>)
 800ee64:	6851      	ldr	r1, [r2, #4]
 800ee66:	4a0a      	ldr	r2, [pc, #40]	@ (800ee90 <LmHandlerPackageRegister+0xcc>)
 800ee68:	7852      	ldrb	r2, [r2, #1]
 800ee6a:	6838      	ldr	r0, [r7, #0]
 800ee6c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	e001      	b.n	800ee76 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ee72:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	200005b8 	.word	0x200005b8
 800ee84:	0800e565 	.word	0x0800e565
 800ee88:	200005e4 	.word	0x200005e4
 800ee8c:	0800e87d 	.word	0x0800e87d
 800ee90:	200000d0 	.word	0x200000d0

0800ee94 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	2b04      	cmp	r3, #4
 800eea2:	d80e      	bhi.n	800eec2 <LmHandlerPackageIsInitialized+0x2e>
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	4a09      	ldr	r2, [pc, #36]	@ (800eecc <LmHandlerPackageIsInitialized+0x38>)
 800eea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d007      	beq.n	800eec2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800eeb2:	79fb      	ldrb	r3, [r7, #7]
 800eeb4:	4a05      	ldr	r2, [pc, #20]	@ (800eecc <LmHandlerPackageIsInitialized+0x38>)
 800eeb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	4798      	blx	r3
 800eebe:	4603      	mov	r3, r0
 800eec0:	e000      	b.n	800eec4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800eec2:	2300      	movs	r3, #0
    }
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	200005b8 	.word	0x200005b8

0800eed0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4603      	mov	r3, r0
 800eed8:	6039      	str	r1, [r7, #0]
 800eeda:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800eedc:	2300      	movs	r3, #0
 800eede:	73fb      	strb	r3, [r7, #15]
 800eee0:	e067      	b.n	800efb2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800eee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eee6:	4a37      	ldr	r2, [pc, #220]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800eee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d05a      	beq.n	800efa6 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800eef0:	79fb      	ldrb	r3, [r7, #7]
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d84e      	bhi.n	800ef94 <LmHandlerPackagesNotify+0xc4>
 800eef6:	a201      	add	r2, pc, #4	@ (adr r2, 800eefc <LmHandlerPackagesNotify+0x2c>)
 800eef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefc:	0800ef0d 	.word	0x0800ef0d
 800ef00:	0800ef2f 	.word	0x0800ef2f
 800ef04:	0800ef51 	.word	0x0800ef51
 800ef08:	0800ef73 	.word	0x0800ef73
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ef0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef10:	4a2c      	ldr	r2, [pc, #176]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800ef12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d03d      	beq.n	800ef98 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800ef1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef20:	4a28      	ldr	r2, [pc, #160]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800ef22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef26:	699b      	ldr	r3, [r3, #24]
 800ef28:	6838      	ldr	r0, [r7, #0]
 800ef2a:	4798      	blx	r3
                        }
                        break;
 800ef2c:	e034      	b.n	800ef98 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800ef2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef32:	4a24      	ldr	r2, [pc, #144]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800ef34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef38:	69db      	ldr	r3, [r3, #28]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d02e      	beq.n	800ef9c <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800ef3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef42:	4a20      	ldr	r2, [pc, #128]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800ef44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef48:	69db      	ldr	r3, [r3, #28]
 800ef4a:	6838      	ldr	r0, [r7, #0]
 800ef4c:	4798      	blx	r3
                        }
                        break;
 800ef4e:	e025      	b.n	800ef9c <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ef50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef54:	4a1b      	ldr	r2, [pc, #108]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800ef56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef5a:	6a1b      	ldr	r3, [r3, #32]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d01f      	beq.n	800efa0 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800ef60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef64:	4a17      	ldr	r2, [pc, #92]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800ef66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef6a:	6a1b      	ldr	r3, [r3, #32]
 800ef6c:	6838      	ldr	r0, [r7, #0]
 800ef6e:	4798      	blx	r3
                        }
                        break;
 800ef70:	e016      	b.n	800efa0 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ef72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef76:	4a13      	ldr	r2, [pc, #76]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800ef78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d010      	beq.n	800efa4 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800ef82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef86:	4a0f      	ldr	r2, [pc, #60]	@ (800efc4 <LmHandlerPackagesNotify+0xf4>)
 800ef88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef8e:	6838      	ldr	r0, [r7, #0]
 800ef90:	4798      	blx	r3
                        }
                        break;
 800ef92:	e007      	b.n	800efa4 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800ef94:	bf00      	nop
 800ef96:	e006      	b.n	800efa6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800ef98:	bf00      	nop
 800ef9a:	e004      	b.n	800efa6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800ef9c:	bf00      	nop
 800ef9e:	e002      	b.n	800efa6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800efa0:	bf00      	nop
 800efa2:	e000      	b.n	800efa6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800efa4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800efa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	3301      	adds	r3, #1
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	73fb      	strb	r3, [r7, #15]
 800efb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efb6:	2b04      	cmp	r3, #4
 800efb8:	dd93      	ble.n	800eee2 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800efba:	bf00      	nop
 800efbc:	bf00      	nop
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	200005b8 	.word	0x200005b8

0800efc8 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800efce:	2300      	movs	r3, #0
 800efd0:	71fb      	strb	r3, [r7, #7]
 800efd2:	e018      	b.n	800f006 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800efd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efd8:	4a0f      	ldr	r2, [pc, #60]	@ (800f018 <LmHandlerPackageIsTxPending+0x50>)
 800efda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00b      	beq.n	800effa <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800efe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efe6:	4a0c      	ldr	r2, [pc, #48]	@ (800f018 <LmHandlerPackageIsTxPending+0x50>)
 800efe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	4798      	blx	r3
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d001      	beq.n	800effa <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800eff6:	2301      	movs	r3, #1
 800eff8:	e00a      	b.n	800f010 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800effa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800effe:	b2db      	uxtb	r3, r3
 800f000:	3301      	adds	r3, #1
 800f002:	b2db      	uxtb	r3, r3
 800f004:	71fb      	strb	r3, [r7, #7]
 800f006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f00a:	2b04      	cmp	r3, #4
 800f00c:	dde2      	ble.n	800efd4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	200005b8 	.word	0x200005b8

0800f01c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f022:	2300      	movs	r3, #0
 800f024:	71fb      	strb	r3, [r7, #7]
 800f026:	e022      	b.n	800f06e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f02c:	4a14      	ldr	r2, [pc, #80]	@ (800f080 <LmHandlerPackagesProcess+0x64>)
 800f02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d015      	beq.n	800f062 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f03a:	4a11      	ldr	r2, [pc, #68]	@ (800f080 <LmHandlerPackagesProcess+0x64>)
 800f03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f040:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00d      	beq.n	800f062 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800f046:	79fb      	ldrb	r3, [r7, #7]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff ff23 	bl	800ee94 <LmHandlerPackageIsInitialized>
 800f04e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f050:	2b00      	cmp	r3, #0
 800f052:	d006      	beq.n	800f062 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800f054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f058:	4a09      	ldr	r2, [pc, #36]	@ (800f080 <LmHandlerPackagesProcess+0x64>)
 800f05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f05e:	691b      	ldr	r3, [r3, #16]
 800f060:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f066:	b2db      	uxtb	r3, r3
 800f068:	3301      	adds	r3, #1
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	71fb      	strb	r3, [r7, #7]
 800f06e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f072:	2b04      	cmp	r3, #4
 800f074:	ddd8      	ble.n	800f028 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800f076:	bf00      	nop
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	200005b8 	.word	0x200005b8

0800f084 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800f08e:	4a09      	ldr	r2, [pc, #36]	@ (800f0b4 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800f090:	79fb      	ldrb	r3, [r7, #7]
 800f092:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800f094:	4b08      	ldr	r3, [pc, #32]	@ (800f0b8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d005      	beq.n	800f0aa <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800f09e:	4b06      	ldr	r3, [pc, #24]	@ (800f0b8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0a4:	79fa      	ldrb	r2, [r7, #7]
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	4798      	blx	r3
    }
}
 800f0aa:	bf00      	nop
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	200005cc 	.word	0x200005cc
 800f0b8:	200005e4 	.word	0x200005e4

0800f0bc <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800f0c6:	4a09      	ldr	r2, [pc, #36]	@ (800f0ec <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800f0c8:	79fb      	ldrb	r3, [r7, #7]
 800f0ca:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800f0cc:	4b08      	ldr	r3, [pc, #32]	@ (800f0f0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d005      	beq.n	800f0e2 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800f0d6:	4b06      	ldr	r3, [pc, #24]	@ (800f0f0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0dc:	79fa      	ldrb	r2, [r7, #7]
 800f0de:	4610      	mov	r0, r2
 800f0e0:	4798      	blx	r3
    }
}
 800f0e2:	bf00      	nop
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	200005cc 	.word	0x200005cc
 800f0f0:	200005e4 	.word	0x200005e4

0800f0f4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	6039      	str	r1, [r7, #0]
 800f0fe:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d102      	bne.n	800f10c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800f106:	f04f 33ff 	mov.w	r3, #4294967295
 800f10a:	e00e      	b.n	800f12a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800f10c:	79fb      	ldrb	r3, [r7, #7]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d002      	beq.n	800f118 <LmHandlerGetVersion+0x24>
 800f112:	2b01      	cmp	r3, #1
 800f114:	d004      	beq.n	800f120 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800f116:	e007      	b.n	800f128 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	4a06      	ldr	r2, [pc, #24]	@ (800f134 <LmHandlerGetVersion+0x40>)
 800f11c:	601a      	str	r2, [r3, #0]
            break;
 800f11e:	e003      	b.n	800f128 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	4a05      	ldr	r2, [pc, #20]	@ (800f138 <LmHandlerGetVersion+0x44>)
 800f124:	601a      	str	r2, [r3, #0]
            break;
 800f126:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f128:	2300      	movs	r3, #0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	370c      	adds	r7, #12
 800f12e:	46bd      	mov	sp, r7
 800f130:	bc80      	pop	{r7}
 800f132:	4770      	bx	lr
 800f134:	01000400 	.word	0x01000400
 800f138:	02010003 	.word	0x02010003

0800f13c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800f140:	f005 fd72 	bl	8014c28 <LoRaMacDeInitialization>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d101      	bne.n	800f14e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f14a:	2300      	movs	r3, #0
 800f14c:	e001      	b.n	800f152 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f14e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f152:	4618      	mov	r0, r3
 800f154:	bd80      	pop	{r7, pc}

0800f156 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800f156:	b580      	push	{r7, lr}
 800f158:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800f15a:	f004 fbc1 	bl	80138e0 <LoRaMacHalt>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d101      	bne.n	800f168 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f164:	2300      	movs	r3, #0
 800f166:	e001      	b.n	800f16c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f168:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b08c      	sub	sp, #48	@ 0x30
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d102      	bne.n	800f184 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f17e:	f04f 33ff 	mov.w	r3, #4294967295
 800f182:	e016      	b.n	800f1b2 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f184:	2321      	movs	r3, #33	@ 0x21
 800f186:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f188:	f107 0308 	add.w	r3, r7, #8
 800f18c:	4618      	mov	r0, r3
 800f18e:	f004 fc6f 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f198:	f04f 33ff 	mov.w	r3, #4294967295
 800f19c:	e009      	b.n	800f1b2 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800f19e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f993 2000 	ldrsb.w	r2, [r3]
 800f1ac:	4b03      	ldr	r3, [pc, #12]	@ (800f1bc <LmHandlerGetTxPower+0x4c>)
 800f1ae:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3730      	adds	r7, #48	@ 0x30
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	200005cc 	.word	0x200005cc

0800f1c0 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b08e      	sub	sp, #56	@ 0x38
 800f1c4:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800f1d0:	f7ff ffc1 	bl	800f156 <LmHandlerHalt>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800f1da:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d12f      	bne.n	800f242 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800f1e2:	f000 f859 	bl	800f298 <NvmDataMgmtStoreBegin>
 800f1e6:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ea:	f113 0f02 	cmn.w	r3, #2
 800f1ee:	d103      	bne.n	800f1f8 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800f1f0:	23f8      	movs	r3, #248	@ 0xf8
 800f1f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f1f6:	e01c      	b.n	800f232 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d104      	bne.n	800f208 <LmHandlerNvmDataStore+0x48>
 800f1fe:	4b1b      	ldr	r3, [pc, #108]	@ (800f26c <LmHandlerNvmDataStore+0xac>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	695b      	ldr	r3, [r3, #20]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d103      	bne.n	800f210 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f208:	23ff      	movs	r3, #255	@ 0xff
 800f20a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f20e:	e010      	b.n	800f232 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800f210:	2327      	movs	r3, #39	@ 0x27
 800f212:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f214:	463b      	mov	r3, r7
 800f216:	4618      	mov	r0, r3
 800f218:	f004 fc2a 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800f220:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800f224:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800f226:	4b11      	ldr	r3, [pc, #68]	@ (800f26c <LmHandlerNvmDataStore+0xac>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	695b      	ldr	r3, [r3, #20]
 800f22c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f22e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f230:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800f232:	f000 f847 	bl	800f2c4 <NvmDataMgmtStoreEnd>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f23c:	23ff      	movs	r3, #255	@ 0xff
 800f23e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800f242:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f246:	2b00      	cmp	r3, #0
 800f248:	d109      	bne.n	800f25e <LmHandlerNvmDataStore+0x9e>
 800f24a:	4b08      	ldr	r3, [pc, #32]	@ (800f26c <LmHandlerNvmDataStore+0xac>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	69db      	ldr	r3, [r3, #28]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d004      	beq.n	800f25e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800f254:	4b05      	ldr	r3, [pc, #20]	@ (800f26c <LmHandlerNvmDataStore+0xac>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	69db      	ldr	r3, [r3, #28]
 800f25a:	2001      	movs	r0, #1
 800f25c:	4798      	blx	r3
    }

    return lmhStatus;
 800f25e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f262:	4618      	mov	r0, r3
 800f264:	3738      	adds	r7, #56	@ 0x38
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	200005e4 	.word	0x200005e4

0800f270 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	4603      	mov	r3, r0
 800f278:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800f27a:	4b06      	ldr	r3, [pc, #24]	@ (800f294 <NvmDataMgmtEvent+0x24>)
 800f27c:	881a      	ldrh	r2, [r3, #0]
 800f27e:	88fb      	ldrh	r3, [r7, #6]
 800f280:	4313      	orrs	r3, r2
 800f282:	b29a      	uxth	r2, r3
 800f284:	4b03      	ldr	r3, [pc, #12]	@ (800f294 <NvmDataMgmtEvent+0x24>)
 800f286:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bc80      	pop	{r7}
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	2000070c 	.word	0x2000070c

0800f298 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800f29c:	4b08      	ldr	r3, [pc, #32]	@ (800f2c0 <NvmDataMgmtStoreBegin+0x28>)
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d102      	bne.n	800f2aa <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800f2a4:	f06f 0301 	mvn.w	r3, #1
 800f2a8:	e008      	b.n	800f2bc <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800f2aa:	f004 faf1 	bl	8013890 <LoRaMacStop>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d002      	beq.n	800f2ba <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800f2b4:	f06f 0302 	mvn.w	r3, #2
 800f2b8:	e000      	b.n	800f2bc <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800f2ba:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	2000070c 	.word	0x2000070c

0800f2c4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f2c8:	4b03      	ldr	r3, [pc, #12]	@ (800f2d8 <NvmDataMgmtStoreEnd+0x14>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800f2ce:	f004 fad1 	bl	8013874 <LoRaMacStart>
    return NVM_DATA_OK;
 800f2d2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	2000070c 	.word	0x2000070c

0800f2dc <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800f2e0:	2220      	movs	r2, #32
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	4802      	ldr	r0, [pc, #8]	@ (800f2f0 <ClassBStatusReset+0x14>)
 800f2e6:	f009 ffb5 	bl	8019254 <memset1>
}
 800f2ea:	bf00      	nop
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	20000724 	.word	0x20000724

0800f2f4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800f2f8:	4b02      	ldr	r3, [pc, #8]	@ (800f304 <LmhpCompliancePackageFactory+0x10>)
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bc80      	pop	{r7}
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	200000d8 	.word	0x200000d8

0800f308 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af02      	add	r7, sp, #8
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	4613      	mov	r3, r2
 800f314:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d018      	beq.n	800f34e <LmhpComplianceInit+0x46>
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d015      	beq.n	800f34e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800f322:	4a19      	ldr	r2, [pc, #100]	@ (800f388 <LmhpComplianceInit+0x80>)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800f328:	4a18      	ldr	r2, [pc, #96]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f32e:	4a17      	ldr	r2, [pc, #92]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f330:	79fb      	ldrb	r3, [r7, #7]
 800f332:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800f334:	4b15      	ldr	r3, [pc, #84]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f336:	2201      	movs	r2, #1
 800f338:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800f33a:	2300      	movs	r3, #0
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	4b14      	ldr	r3, [pc, #80]	@ (800f390 <LmhpComplianceInit+0x88>)
 800f340:	2200      	movs	r2, #0
 800f342:	f04f 31ff 	mov.w	r1, #4294967295
 800f346:	4813      	ldr	r0, [pc, #76]	@ (800f394 <LmhpComplianceInit+0x8c>)
 800f348:	f00d fff2 	bl	801d330 <UTIL_TIMER_Create>
 800f34c:	e005      	b.n	800f35a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800f34e:	4b0e      	ldr	r3, [pc, #56]	@ (800f388 <LmhpComplianceInit+0x80>)
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800f354:	4b0d      	ldr	r3, [pc, #52]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f356:	2200      	movs	r2, #0
 800f358:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800f35a:	4b0c      	ldr	r3, [pc, #48]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f35c:	2200      	movs	r2, #0
 800f35e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800f360:	f7ff ffbc 	bl	800f2dc <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800f364:	4b09      	ldr	r3, [pc, #36]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f366:	2200      	movs	r2, #0
 800f368:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800f36a:	4b08      	ldr	r3, [pc, #32]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800f370:	4b06      	ldr	r3, [pc, #24]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f372:	2200      	movs	r2, #0
 800f374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800f378:	4b04      	ldr	r3, [pc, #16]	@ (800f38c <LmhpComplianceInit+0x84>)
 800f37a:	2200      	movs	r2, #0
 800f37c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800f380:	bf00      	nop
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	20000748 	.word	0x20000748
 800f38c:	20000710 	.word	0x20000710
 800f390:	0800fc91 	.word	0x0800fc91
 800f394:	2000074c 	.word	0x2000074c

0800f398 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800f398:	b480      	push	{r7}
 800f39a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800f39c:	4b02      	ldr	r3, [pc, #8]	@ (800f3a8 <LmhpComplianceIsInitialized+0x10>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bc80      	pop	{r7}
 800f3a6:	4770      	bx	lr
 800f3a8:	20000710 	.word	0x20000710

0800f3ac <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800f3b0:	4b02      	ldr	r3, [pc, #8]	@ (800f3bc <LmhpComplianceIsTxPending+0x10>)
 800f3b2:	785b      	ldrb	r3, [r3, #1]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bc80      	pop	{r7}
 800f3ba:	4770      	bx	lr
 800f3bc:	20000710 	.word	0x20000710

0800f3c0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800f3c0:	b590      	push	{r4, r7, lr}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800f3c6:	4b33      	ldr	r3, [pc, #204]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f3c8:	785b      	ldrb	r3, [r3, #1]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d03e      	beq.n	800f44c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800f3ce:	f00e f96d 	bl	801d6ac <UTIL_TIMER_GetCurrentTime>
 800f3d2:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800f3d4:	4b2f      	ldr	r3, [pc, #188]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f3d6:	685c      	ldr	r4, [r3, #4]
 800f3d8:	f7ff f8ba 	bl	800e550 <LmHandlerGetDutyCycleWaitTime>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	4423      	add	r3, r4
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d941      	bls.n	800f46a <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800f3e6:	4b2b      	ldr	r3, [pc, #172]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f3e8:	7a9b      	ldrb	r3, [r3, #10]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d03d      	beq.n	800f46a <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800f3ee:	23e0      	movs	r3, #224	@ 0xe0
 800f3f0:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800f3f2:	4b28      	ldr	r3, [pc, #160]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f3f4:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800f3f6:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800f3f8:	4b26      	ldr	r3, [pc, #152]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f3fa:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800f3fc:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f3fe:	23ff      	movs	r3, #255	@ 0xff
 800f400:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800f402:	4b24      	ldr	r3, [pc, #144]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f404:	7a19      	ldrb	r1, [r3, #8]
 800f406:	463b      	mov	r3, r7
 800f408:	2201      	movs	r2, #1
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff f968 	bl	800e6e0 <LmHandlerSend>
 800f410:	4603      	mov	r3, r0
 800f412:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800f414:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d004      	beq.n	800f426 <LmhpComplianceProcess+0x66>
 800f41c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f420:	f113 0f07 	cmn.w	r3, #7
 800f424:	d106      	bne.n	800f434 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800f426:	4b1b      	ldr	r3, [pc, #108]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f428:	2200      	movs	r2, #0
 800f42a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800f42c:	4b19      	ldr	r3, [pc, #100]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f42e:	2200      	movs	r2, #0
 800f430:	729a      	strb	r2, [r3, #10]
 800f432:	e007      	b.n	800f444 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800f434:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800f438:	4817      	ldr	r0, [pc, #92]	@ (800f498 <LmhpComplianceProcess+0xd8>)
 800f43a:	f00e f88d 	bl	801d558 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800f43e:	4816      	ldr	r0, [pc, #88]	@ (800f498 <LmhpComplianceProcess+0xd8>)
 800f440:	f00d ffac 	bl	801d39c <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800f444:	4a13      	ldr	r2, [pc, #76]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6053      	str	r3, [r2, #4]
 800f44a:	e00e      	b.n	800f46a <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800f44c:	4b11      	ldr	r3, [pc, #68]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f44e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f452:	2b00      	cmp	r3, #0
 800f454:	d009      	beq.n	800f46a <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800f456:	4b0f      	ldr	r3, [pc, #60]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f458:	2200      	movs	r2, #0
 800f45a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800f45e:	4b0d      	ldr	r3, [pc, #52]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f460:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f464:	4618      	mov	r0, r3
 800f466:	f7ff fa31 	bl	800e8cc <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800f46a:	4b0a      	ldr	r3, [pc, #40]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f46c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f470:	2b00      	cmp	r3, #0
 800f472:	d00a      	beq.n	800f48a <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800f474:	4b07      	ldr	r3, [pc, #28]	@ (800f494 <LmhpComplianceProcess+0xd4>)
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800f47c:	4b07      	ldr	r3, [pc, #28]	@ (800f49c <LmhpComplianceProcess+0xdc>)
 800f47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f480:	2b00      	cmp	r3, #0
 800f482:	d002      	beq.n	800f48a <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800f484:	4b05      	ldr	r3, [pc, #20]	@ (800f49c <LmhpComplianceProcess+0xdc>)
 800f486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f488:	4798      	blx	r3
        }
    }
}
 800f48a:	bf00      	nop
 800f48c:	3714      	adds	r7, #20
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd90      	pop	{r4, r7, pc}
 800f492:	bf00      	nop
 800f494:	20000710 	.word	0x20000710
 800f498:	2000074c 	.word	0x2000074c
 800f49c:	200000d8 	.word	0x200000d8

0800f4a0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800f4a0:	b5b0      	push	{r4, r5, r7, lr}
 800f4a2:	b0a4      	sub	sp, #144	@ 0x90
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800f4ae:	4bd0      	ldr	r3, [pc, #832]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	f083 0301 	eor.w	r3, r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f040 83bf 	bne.w	800fc3c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	78db      	ldrb	r3, [r3, #3]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d103      	bne.n	800f4ce <LmhpComplianceOnMcpsIndication+0x2e>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	7b9b      	ldrb	r3, [r3, #14]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d005      	beq.n	800f4da <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800f4ce:	4bc8      	ldr	r3, [pc, #800]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f4d0:	8a1b      	ldrh	r3, [r3, #16]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	4bc6      	ldr	r3, [pc, #792]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f4d8:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	7b5b      	ldrb	r3, [r3, #13]
 800f4de:	f083 0301 	eor.w	r3, r3, #1
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f040 83ab 	bne.w	800fc40 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	78db      	ldrb	r3, [r3, #3]
 800f4ee:	2be0      	cmp	r3, #224	@ 0xe0
 800f4f0:	f040 83a8 	bne.w	800fc44 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800f4f4:	4bbe      	ldr	r3, [pc, #760]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	689a      	ldr	r2, [r3, #8]
 800f4fe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f502:	1c59      	adds	r1, r3, #1
 800f504:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f508:	4413      	add	r3, r2
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f50e:	f200 8372 	bhi.w	800fbf6 <LmhpComplianceOnMcpsIndication+0x756>
 800f512:	a201      	add	r2, pc, #4	@ (adr r2, 800f518 <LmhpComplianceOnMcpsIndication+0x78>)
 800f514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f518:	0800f719 	.word	0x0800f719
 800f51c:	0800f75d 	.word	0x0800f75d
 800f520:	0800f767 	.word	0x0800f767
 800f524:	0800f77d 	.word	0x0800f77d
 800f528:	0800f79f 	.word	0x0800f79f
 800f52c:	0800f7cd 	.word	0x0800f7cd
 800f530:	0800f7f9 	.word	0x0800f7f9
 800f534:	0800f857 	.word	0x0800f857
 800f538:	0800f8af 	.word	0x0800f8af
 800f53c:	0800f91b 	.word	0x0800f91b
 800f540:	0800f96b 	.word	0x0800f96b
 800f544:	0800fbf7 	.word	0x0800fbf7
 800f548:	0800fbf7 	.word	0x0800fbf7
 800f54c:	0800fbf7 	.word	0x0800fbf7
 800f550:	0800fbf7 	.word	0x0800fbf7
 800f554:	0800fbf7 	.word	0x0800fbf7
 800f558:	0800fbf7 	.word	0x0800fbf7
 800f55c:	0800fbf7 	.word	0x0800fbf7
 800f560:	0800fbf7 	.word	0x0800fbf7
 800f564:	0800fbf7 	.word	0x0800fbf7
 800f568:	0800fbf7 	.word	0x0800fbf7
 800f56c:	0800fbf7 	.word	0x0800fbf7
 800f570:	0800fbf7 	.word	0x0800fbf7
 800f574:	0800fbf7 	.word	0x0800fbf7
 800f578:	0800fbf7 	.word	0x0800fbf7
 800f57c:	0800fbf7 	.word	0x0800fbf7
 800f580:	0800fbf7 	.word	0x0800fbf7
 800f584:	0800fbf7 	.word	0x0800fbf7
 800f588:	0800fbf7 	.word	0x0800fbf7
 800f58c:	0800fbf7 	.word	0x0800fbf7
 800f590:	0800fbf7 	.word	0x0800fbf7
 800f594:	0800fbf7 	.word	0x0800fbf7
 800f598:	0800f973 	.word	0x0800f973
 800f59c:	0800f985 	.word	0x0800f985
 800f5a0:	0800f98d 	.word	0x0800f98d
 800f5a4:	0800fbf7 	.word	0x0800fbf7
 800f5a8:	0800fbf7 	.word	0x0800fbf7
 800f5ac:	0800fbf7 	.word	0x0800fbf7
 800f5b0:	0800fbf7 	.word	0x0800fbf7
 800f5b4:	0800fbf7 	.word	0x0800fbf7
 800f5b8:	0800fbf7 	.word	0x0800fbf7
 800f5bc:	0800fbf7 	.word	0x0800fbf7
 800f5c0:	0800fbf7 	.word	0x0800fbf7
 800f5c4:	0800fbf7 	.word	0x0800fbf7
 800f5c8:	0800fbf7 	.word	0x0800fbf7
 800f5cc:	0800fbf7 	.word	0x0800fbf7
 800f5d0:	0800fbf7 	.word	0x0800fbf7
 800f5d4:	0800fbf7 	.word	0x0800fbf7
 800f5d8:	0800fbf7 	.word	0x0800fbf7
 800f5dc:	0800fbf7 	.word	0x0800fbf7
 800f5e0:	0800fbf7 	.word	0x0800fbf7
 800f5e4:	0800fbf7 	.word	0x0800fbf7
 800f5e8:	0800fbf7 	.word	0x0800fbf7
 800f5ec:	0800fbf7 	.word	0x0800fbf7
 800f5f0:	0800fbf7 	.word	0x0800fbf7
 800f5f4:	0800fbf7 	.word	0x0800fbf7
 800f5f8:	0800fbf7 	.word	0x0800fbf7
 800f5fc:	0800fbf7 	.word	0x0800fbf7
 800f600:	0800fbf7 	.word	0x0800fbf7
 800f604:	0800fbf7 	.word	0x0800fbf7
 800f608:	0800fbf7 	.word	0x0800fbf7
 800f60c:	0800fbf7 	.word	0x0800fbf7
 800f610:	0800fbf7 	.word	0x0800fbf7
 800f614:	0800fbf7 	.word	0x0800fbf7
 800f618:	0800fbf7 	.word	0x0800fbf7
 800f61c:	0800fbf7 	.word	0x0800fbf7
 800f620:	0800fbf7 	.word	0x0800fbf7
 800f624:	0800fbf7 	.word	0x0800fbf7
 800f628:	0800fbf7 	.word	0x0800fbf7
 800f62c:	0800fbf7 	.word	0x0800fbf7
 800f630:	0800fbf7 	.word	0x0800fbf7
 800f634:	0800fbf7 	.word	0x0800fbf7
 800f638:	0800fbf7 	.word	0x0800fbf7
 800f63c:	0800fbf7 	.word	0x0800fbf7
 800f640:	0800fbf7 	.word	0x0800fbf7
 800f644:	0800fbf7 	.word	0x0800fbf7
 800f648:	0800fbf7 	.word	0x0800fbf7
 800f64c:	0800fbf7 	.word	0x0800fbf7
 800f650:	0800fbf7 	.word	0x0800fbf7
 800f654:	0800fbf7 	.word	0x0800fbf7
 800f658:	0800fbf7 	.word	0x0800fbf7
 800f65c:	0800fbf7 	.word	0x0800fbf7
 800f660:	0800fbf7 	.word	0x0800fbf7
 800f664:	0800fbf7 	.word	0x0800fbf7
 800f668:	0800fbf7 	.word	0x0800fbf7
 800f66c:	0800fbf7 	.word	0x0800fbf7
 800f670:	0800fbf7 	.word	0x0800fbf7
 800f674:	0800fbf7 	.word	0x0800fbf7
 800f678:	0800fbf7 	.word	0x0800fbf7
 800f67c:	0800fbf7 	.word	0x0800fbf7
 800f680:	0800fbf7 	.word	0x0800fbf7
 800f684:	0800fbf7 	.word	0x0800fbf7
 800f688:	0800fbf7 	.word	0x0800fbf7
 800f68c:	0800fbf7 	.word	0x0800fbf7
 800f690:	0800fbf7 	.word	0x0800fbf7
 800f694:	0800fbf7 	.word	0x0800fbf7
 800f698:	0800fbf7 	.word	0x0800fbf7
 800f69c:	0800fbf7 	.word	0x0800fbf7
 800f6a0:	0800fbf7 	.word	0x0800fbf7
 800f6a4:	0800fbf7 	.word	0x0800fbf7
 800f6a8:	0800fbf7 	.word	0x0800fbf7
 800f6ac:	0800fbf7 	.word	0x0800fbf7
 800f6b0:	0800fbf7 	.word	0x0800fbf7
 800f6b4:	0800fbf7 	.word	0x0800fbf7
 800f6b8:	0800fbf7 	.word	0x0800fbf7
 800f6bc:	0800fbf7 	.word	0x0800fbf7
 800f6c0:	0800fbf7 	.word	0x0800fbf7
 800f6c4:	0800fbf7 	.word	0x0800fbf7
 800f6c8:	0800fbf7 	.word	0x0800fbf7
 800f6cc:	0800fbf7 	.word	0x0800fbf7
 800f6d0:	0800fbf7 	.word	0x0800fbf7
 800f6d4:	0800fbf7 	.word	0x0800fbf7
 800f6d8:	0800fbf7 	.word	0x0800fbf7
 800f6dc:	0800fbf7 	.word	0x0800fbf7
 800f6e0:	0800fbf7 	.word	0x0800fbf7
 800f6e4:	0800fbf7 	.word	0x0800fbf7
 800f6e8:	0800fbf7 	.word	0x0800fbf7
 800f6ec:	0800fbf7 	.word	0x0800fbf7
 800f6f0:	0800fbf7 	.word	0x0800fbf7
 800f6f4:	0800fbf7 	.word	0x0800fbf7
 800f6f8:	0800fbf7 	.word	0x0800fbf7
 800f6fc:	0800fbf7 	.word	0x0800fbf7
 800f700:	0800fbf7 	.word	0x0800fbf7
 800f704:	0800fbf7 	.word	0x0800fbf7
 800f708:	0800fbf7 	.word	0x0800fbf7
 800f70c:	0800f9bf 	.word	0x0800f9bf
 800f710:	0800fa6f 	.word	0x0800fa6f
 800f714:	0800faa1 	.word	0x0800faa1
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800f718:	4b35      	ldr	r3, [pc, #212]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f71a:	68da      	ldr	r2, [r3, #12]
 800f71c:	4b34      	ldr	r3, [pc, #208]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f71e:	7a9b      	ldrb	r3, [r3, #10]
 800f720:	1c59      	adds	r1, r3, #1
 800f722:	b2c8      	uxtb	r0, r1
 800f724:	4932      	ldr	r1, [pc, #200]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f726:	7288      	strb	r0, [r1, #10]
 800f728:	4413      	add	r3, r2
 800f72a:	2200      	movs	r2, #0
 800f72c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800f72e:	4b30      	ldr	r3, [pc, #192]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f730:	68da      	ldr	r2, [r3, #12]
 800f732:	4b2f      	ldr	r3, [pc, #188]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f734:	7a9b      	ldrb	r3, [r3, #10]
 800f736:	1c59      	adds	r1, r3, #1
 800f738:	b2c8      	uxtb	r0, r1
 800f73a:	492d      	ldr	r1, [pc, #180]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f73c:	7288      	strb	r0, [r1, #10]
 800f73e:	4413      	add	r3, r2
 800f740:	2206      	movs	r2, #6
 800f742:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800f744:	4b2a      	ldr	r3, [pc, #168]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f746:	68da      	ldr	r2, [r3, #12]
 800f748:	4b29      	ldr	r3, [pc, #164]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f74a:	7a9b      	ldrb	r3, [r3, #10]
 800f74c:	1c59      	adds	r1, r3, #1
 800f74e:	b2c8      	uxtb	r0, r1
 800f750:	4927      	ldr	r1, [pc, #156]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f752:	7288      	strb	r0, [r1, #10]
 800f754:	4413      	add	r3, r2
 800f756:	2201      	movs	r2, #1
 800f758:	701a      	strb	r2, [r3, #0]
                break;
 800f75a:	e257      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800f75c:	4b24      	ldr	r3, [pc, #144]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f75e:	2201      	movs	r2, #1
 800f760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800f764:	e252      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800f766:	4b23      	ldr	r3, [pc, #140]	@ (800f7f4 <LmhpComplianceOnMcpsIndication+0x354>)
 800f768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f000 8245 	beq.w	800fbfa <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f770:	4b20      	ldr	r3, [pc, #128]	@ (800f7f4 <LmhpComplianceOnMcpsIndication+0x354>)
 800f772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f774:	2101      	movs	r1, #1
 800f776:	2002      	movs	r0, #2
 800f778:	4798      	blx	r3
                }
                break;
 800f77a:	e23e      	b.n	800fbfa <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	689a      	ldr	r2, [r3, #8]
 800f780:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f784:	1c59      	adds	r1, r3, #1
 800f786:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f78a:	4413      	add	r3, r2
 800f78c:	781a      	ldrb	r2, [r3, #0]
 800f78e:	4b18      	ldr	r3, [pc, #96]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f790:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800f794:	4b16      	ldr	r3, [pc, #88]	@ (800f7f0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f796:	2201      	movs	r2, #1
 800f798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800f79c:	e236      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800f79e:	2304      	movs	r3, #4
 800f7a0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	689a      	ldr	r2, [r3, #8]
 800f7a6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f7aa:	1c59      	adds	r1, r3, #1
 800f7ac:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f7b0:	4413      	add	r3, r2
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	bf14      	ite	ne
 800f7b8:	2301      	movne	r3, #1
 800f7ba:	2300      	moveq	r3, #0
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800f7c0:	f107 0308 	add.w	r3, r7, #8
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f004 fb2b 	bl	8013e20 <LoRaMacMibSetRequestConfirm>
                break;
 800f7ca:	e21f      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	689a      	ldr	r2, [r3, #8]
 800f7d0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f7d4:	1c59      	adds	r1, r3, #1
 800f7d6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f7da:	4413      	add	r3, r2
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	bf14      	ite	ne
 800f7e2:	2301      	movne	r3, #1
 800f7e4:	2300      	moveq	r3, #0
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f005 f9f7 	bl	8014bdc <LoRaMacTestSetDutyCycleOn>
                break;
 800f7ee:	e20d      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
 800f7f0:	20000710 	.word	0x20000710
 800f7f4:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800f7f8:	4ba5      	ldr	r3, [pc, #660]	@ (800fa90 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f7fa:	f107 0408 	add.w	r4, r7, #8
 800f7fe:	461d      	mov	r5, r3
 800f800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f808:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f80c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	689a      	ldr	r2, [r3, #8]
 800f814:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f818:	1c59      	adds	r1, r3, #1
 800f81a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f81e:	4413      	add	r3, r2
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800f826:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f82a:	2b0a      	cmp	r3, #10
 800f82c:	f200 81e7 	bhi.w	800fbfe <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800f830:	4b98      	ldr	r3, [pc, #608]	@ (800fa94 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	f000 81e1 	beq.w	800fbfe <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800f83c:	4b95      	ldr	r3, [pc, #596]	@ (800fa94 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	685a      	ldr	r2, [r3, #4]
 800f842:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	3390      	adds	r3, #144	@ 0x90
 800f84a:	443b      	add	r3, r7
 800f84c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800f850:	4618      	mov	r0, r3
 800f852:	4790      	blx	r2
                    }
                }
                break;
 800f854:	e1d3      	b.n	800fbfe <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	689a      	ldr	r2, [r3, #8]
 800f85a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f85e:	1c59      	adds	r1, r3, #1
 800f860:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f864:	4413      	add	r3, r2
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800f86c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f870:	2b01      	cmp	r3, #1
 800f872:	d004      	beq.n	800f87e <LmhpComplianceOnMcpsIndication+0x3de>
 800f874:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f878:	2b02      	cmp	r3, #2
 800f87a:	f040 81c2 	bne.w	800fc02 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f87e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f882:	2b01      	cmp	r3, #1
 800f884:	bf14      	ite	ne
 800f886:	2301      	movne	r3, #1
 800f888:	2300      	moveq	r3, #0
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	461a      	mov	r2, r3
 800f88e:	4b82      	ldr	r3, [pc, #520]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f890:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800f892:	4b80      	ldr	r3, [pc, #512]	@ (800fa94 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f000 81b2 	beq.w	800fc02 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800f89e:	4b7d      	ldr	r3, [pc, #500]	@ (800fa94 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	4a7c      	ldr	r2, [pc, #496]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f8a6:	7a12      	ldrb	r2, [r2, #8]
 800f8a8:	4610      	mov	r0, r2
 800f8aa:	4798      	blx	r3
                    }
                }
                break;
 800f8ac:	e1a9      	b.n	800fc02 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800f8ae:	4b7a      	ldr	r3, [pc, #488]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f8b0:	68da      	ldr	r2, [r3, #12]
 800f8b2:	4b79      	ldr	r3, [pc, #484]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f8b4:	7a9b      	ldrb	r3, [r3, #10]
 800f8b6:	1c59      	adds	r1, r3, #1
 800f8b8:	b2c8      	uxtb	r0, r1
 800f8ba:	4977      	ldr	r1, [pc, #476]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f8bc:	7288      	strb	r0, [r1, #10]
 800f8be:	4413      	add	r3, r2
 800f8c0:	2208      	movs	r2, #8
 800f8c2:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800f8ca:	e019      	b.n	800f900 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	689a      	ldr	r2, [r3, #8]
 800f8d0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f8d4:	1c59      	adds	r1, r3, #1
 800f8d6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f8da:	4413      	add	r3, r2
 800f8dc:	781a      	ldrb	r2, [r3, #0]
 800f8de:	4b6e      	ldr	r3, [pc, #440]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f8e0:	68d9      	ldr	r1, [r3, #12]
 800f8e2:	4b6d      	ldr	r3, [pc, #436]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f8e4:	7a9b      	ldrb	r3, [r3, #10]
 800f8e6:	1c58      	adds	r0, r3, #1
 800f8e8:	b2c4      	uxtb	r4, r0
 800f8ea:	486b      	ldr	r0, [pc, #428]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f8ec:	7284      	strb	r4, [r0, #10]
 800f8ee:	440b      	add	r3, r1
 800f8f0:	3201      	adds	r2, #1
 800f8f2:	b2d2      	uxtb	r2, r2
 800f8f4:	701a      	strb	r2, [r3, #0]
                     i++ )
 800f8f6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f900:	4b65      	ldr	r3, [pc, #404]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f902:	7a5a      	ldrb	r2, [r3, #9]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	7b1b      	ldrb	r3, [r3, #12]
 800f908:	4293      	cmp	r3, r2
 800f90a:	bf28      	it	cs
 800f90c:	4613      	movcs	r3, r2
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800f914:	429a      	cmp	r2, r3
 800f916:	d3d9      	bcc.n	800f8cc <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800f918:	e178      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800f91a:	4b5f      	ldr	r3, [pc, #380]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f91c:	68da      	ldr	r2, [r3, #12]
 800f91e:	4b5e      	ldr	r3, [pc, #376]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f920:	7a9b      	ldrb	r3, [r3, #10]
 800f922:	1c59      	adds	r1, r3, #1
 800f924:	b2c8      	uxtb	r0, r1
 800f926:	495c      	ldr	r1, [pc, #368]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f928:	7288      	strb	r0, [r1, #10]
 800f92a:	4413      	add	r3, r2
 800f92c:	2209      	movs	r2, #9
 800f92e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800f930:	4b59      	ldr	r3, [pc, #356]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f932:	8a18      	ldrh	r0, [r3, #16]
 800f934:	4b58      	ldr	r3, [pc, #352]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f936:	68da      	ldr	r2, [r3, #12]
 800f938:	4b57      	ldr	r3, [pc, #348]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f93a:	7a9b      	ldrb	r3, [r3, #10]
 800f93c:	1c59      	adds	r1, r3, #1
 800f93e:	b2cc      	uxtb	r4, r1
 800f940:	4955      	ldr	r1, [pc, #340]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f942:	728c      	strb	r4, [r1, #10]
 800f944:	4413      	add	r3, r2
 800f946:	b2c2      	uxtb	r2, r0
 800f948:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800f94a:	4b53      	ldr	r3, [pc, #332]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f94c:	8a1b      	ldrh	r3, [r3, #16]
 800f94e:	0a1b      	lsrs	r3, r3, #8
 800f950:	b298      	uxth	r0, r3
 800f952:	4b51      	ldr	r3, [pc, #324]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f954:	68da      	ldr	r2, [r3, #12]
 800f956:	4b50      	ldr	r3, [pc, #320]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f958:	7a9b      	ldrb	r3, [r3, #10]
 800f95a:	1c59      	adds	r1, r3, #1
 800f95c:	b2cc      	uxtb	r4, r1
 800f95e:	494e      	ldr	r1, [pc, #312]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f960:	728c      	strb	r4, [r1, #10]
 800f962:	4413      	add	r3, r2
 800f964:	b2c2      	uxtb	r2, r0
 800f966:	701a      	strb	r2, [r3, #0]
                break;
 800f968:	e150      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800f96a:	4b4b      	ldr	r3, [pc, #300]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f96c:	2200      	movs	r2, #0
 800f96e:	821a      	strh	r2, [r3, #16]
                break;
 800f970:	e14c      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800f972:	2305      	movs	r3, #5
 800f974:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800f978:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f97c:	4618      	mov	r0, r3
 800f97e:	f004 fe51 	bl	8014624 <LoRaMacMlmeRequest>
                break;
 800f982:	e143      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800f984:	4b45      	ldr	r3, [pc, #276]	@ (800fa9c <LmhpComplianceOnMcpsIndication+0x5fc>)
 800f986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f988:	4798      	blx	r3
                break;
 800f98a:	e13f      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	689a      	ldr	r2, [r3, #8]
 800f990:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f994:	1c59      	adds	r1, r3, #1
 800f996:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f99a:	4413      	add	r3, r2
 800f99c:	781a      	ldrb	r2, [r3, #0]
 800f99e:	4b3e      	ldr	r3, [pc, #248]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9a0:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800f9a2:	4b3c      	ldr	r3, [pc, #240]	@ (800fa94 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 812c 	beq.w	800fc06 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800f9ae:	4b39      	ldr	r3, [pc, #228]	@ (800fa94 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	4a38      	ldr	r2, [pc, #224]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9b6:	7d52      	ldrb	r2, [r2, #21]
 800f9b8:	4610      	mov	r0, r2
 800f9ba:	4798      	blx	r3
                }
                break;
 800f9bc:	e123      	b.n	800fc06 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	7b1b      	ldrb	r3, [r3, #12]
 800f9c2:	2b07      	cmp	r3, #7
 800f9c4:	f040 8121 	bne.w	800fc0a <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f9c8:	2306      	movs	r3, #6
 800f9ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	689a      	ldr	r2, [r3, #8]
 800f9d2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f9d6:	4413      	add	r3, r2
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	b21a      	sxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6899      	ldr	r1, [r3, #8]
 800f9e0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	440b      	add	r3, r1
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	021b      	lsls	r3, r3, #8
 800f9ec:	b21b      	sxth	r3, r3
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	b21b      	sxth	r3, r3
 800f9f2:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800f9f4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800f9f8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f9fc:	3302      	adds	r3, #2
 800f9fe:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	689a      	ldr	r2, [r3, #8]
 800fa06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800fa0a:	4413      	add	r3, r2
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	4619      	mov	r1, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	689a      	ldr	r2, [r3, #8]
 800fa14:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800fa18:	3301      	adds	r3, #1
 800fa1a:	4413      	add	r3, r2
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	021b      	lsls	r3, r3, #8
 800fa20:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6899      	ldr	r1, [r3, #8]
 800fa28:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800fa2c:	3302      	adds	r3, #2
 800fa2e:	440b      	add	r3, r1
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800fa34:	4313      	orrs	r3, r2
 800fa36:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800fa38:	2364      	movs	r3, #100	@ 0x64
 800fa3a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800fa3e:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800fa40:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800fa44:	3303      	adds	r3, #3
 800fa46:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	689a      	ldr	r2, [r3, #8]
 800fa4e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800fa52:	1c59      	adds	r1, r3, #1
 800fa54:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800fa58:	4413      	add	r3, r2
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	b25b      	sxtb	r3, r3
 800fa5e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800fa62:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800fa66:	4618      	mov	r0, r3
 800fa68:	f004 fddc 	bl	8014624 <LoRaMacMlmeRequest>
                }
                break;
 800fa6c:	e0cd      	b.n	800fc0a <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800fa6e:	233b      	movs	r3, #59	@ 0x3b
 800fa70:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800fa74:	2300      	movs	r3, #0
 800fa76:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800fa7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f004 f9ce 	bl	8013e20 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800fa84:	4b04      	ldr	r3, [pc, #16]	@ (800fa98 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa86:	2201      	movs	r2, #1
 800fa88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800fa8c:	e0be      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
 800fa8e:	bf00      	nop
 800fa90:	0801f814 	.word	0x0801f814
 800fa94:	20000748 	.word	0x20000748
 800fa98:	20000710 	.word	0x20000710
 800fa9c:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800faa0:	232a      	movs	r3, #42	@ 0x2a
 800faa2:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800faa4:	f107 0308 	add.w	r3, r7, #8
 800faa8:	4618      	mov	r0, r3
 800faaa:	f003 ffe1 	bl	8013a70 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800fab6:	4b65      	ldr	r3, [pc, #404]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fab8:	68da      	ldr	r2, [r3, #12]
 800faba:	4b64      	ldr	r3, [pc, #400]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fabc:	7a9b      	ldrb	r3, [r3, #10]
 800fabe:	1c59      	adds	r1, r3, #1
 800fac0:	b2c8      	uxtb	r0, r1
 800fac2:	4962      	ldr	r1, [pc, #392]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fac4:	7288      	strb	r0, [r1, #10]
 800fac6:	4413      	add	r3, r2
 800fac8:	227f      	movs	r2, #127	@ 0x7f
 800faca:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800facc:	4b60      	ldr	r3, [pc, #384]	@ (800fc50 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	4b5e      	ldr	r3, [pc, #376]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fad2:	68d9      	ldr	r1, [r3, #12]
 800fad4:	4b5d      	ldr	r3, [pc, #372]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fad6:	7a9b      	ldrb	r3, [r3, #10]
 800fad8:	1c58      	adds	r0, r3, #1
 800fada:	b2c4      	uxtb	r4, r0
 800fadc:	485b      	ldr	r0, [pc, #364]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fade:	7284      	strb	r4, [r0, #10]
 800fae0:	440b      	add	r3, r1
 800fae2:	78d2      	ldrb	r2, [r2, #3]
 800fae4:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800fae6:	4b5a      	ldr	r3, [pc, #360]	@ (800fc50 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	4b58      	ldr	r3, [pc, #352]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800faec:	68d9      	ldr	r1, [r3, #12]
 800faee:	4b57      	ldr	r3, [pc, #348]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800faf0:	7a9b      	ldrb	r3, [r3, #10]
 800faf2:	1c58      	adds	r0, r3, #1
 800faf4:	b2c4      	uxtb	r4, r0
 800faf6:	4855      	ldr	r0, [pc, #340]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800faf8:	7284      	strb	r4, [r0, #10]
 800fafa:	440b      	add	r3, r1
 800fafc:	7892      	ldrb	r2, [r2, #2]
 800fafe:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800fb00:	4b53      	ldr	r3, [pc, #332]	@ (800fc50 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	4b51      	ldr	r3, [pc, #324]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb06:	68d9      	ldr	r1, [r3, #12]
 800fb08:	4b50      	ldr	r3, [pc, #320]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb0a:	7a9b      	ldrb	r3, [r3, #10]
 800fb0c:	1c58      	adds	r0, r3, #1
 800fb0e:	b2c4      	uxtb	r4, r0
 800fb10:	484e      	ldr	r0, [pc, #312]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb12:	7284      	strb	r4, [r0, #10]
 800fb14:	440b      	add	r3, r1
 800fb16:	7852      	ldrb	r2, [r2, #1]
 800fb18:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800fb1a:	4b4d      	ldr	r3, [pc, #308]	@ (800fc50 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	4b4b      	ldr	r3, [pc, #300]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb20:	68d9      	ldr	r1, [r3, #12]
 800fb22:	4b4a      	ldr	r3, [pc, #296]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb24:	7a9b      	ldrb	r3, [r3, #10]
 800fb26:	1c58      	adds	r0, r3, #1
 800fb28:	b2c4      	uxtb	r4, r0
 800fb2a:	4848      	ldr	r0, [pc, #288]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb2c:	7284      	strb	r4, [r0, #10]
 800fb2e:	440b      	add	r3, r1
 800fb30:	7812      	ldrb	r2, [r2, #0]
 800fb32:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800fb34:	4b45      	ldr	r3, [pc, #276]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb36:	68da      	ldr	r2, [r3, #12]
 800fb38:	4b44      	ldr	r3, [pc, #272]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb3a:	7a9b      	ldrb	r3, [r3, #10]
 800fb3c:	1c59      	adds	r1, r3, #1
 800fb3e:	b2c8      	uxtb	r0, r1
 800fb40:	4942      	ldr	r1, [pc, #264]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb42:	7288      	strb	r0, [r1, #10]
 800fb44:	4413      	add	r3, r2
 800fb46:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800fb4a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800fb4c:	4b3f      	ldr	r3, [pc, #252]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb4e:	68da      	ldr	r2, [r3, #12]
 800fb50:	4b3e      	ldr	r3, [pc, #248]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb52:	7a9b      	ldrb	r3, [r3, #10]
 800fb54:	1c59      	adds	r1, r3, #1
 800fb56:	b2c8      	uxtb	r0, r1
 800fb58:	493c      	ldr	r1, [pc, #240]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb5a:	7288      	strb	r0, [r1, #10]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800fb62:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800fb64:	4b39      	ldr	r3, [pc, #228]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb66:	68da      	ldr	r2, [r3, #12]
 800fb68:	4b38      	ldr	r3, [pc, #224]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb6a:	7a9b      	ldrb	r3, [r3, #10]
 800fb6c:	1c59      	adds	r1, r3, #1
 800fb6e:	b2c8      	uxtb	r0, r1
 800fb70:	4936      	ldr	r1, [pc, #216]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb72:	7288      	strb	r0, [r1, #10]
 800fb74:	4413      	add	r3, r2
 800fb76:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800fb7a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800fb7c:	4b33      	ldr	r3, [pc, #204]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb7e:	68da      	ldr	r2, [r3, #12]
 800fb80:	4b32      	ldr	r3, [pc, #200]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb82:	7a9b      	ldrb	r3, [r3, #10]
 800fb84:	1c59      	adds	r1, r3, #1
 800fb86:	b2c8      	uxtb	r0, r1
 800fb88:	4930      	ldr	r1, [pc, #192]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb8a:	7288      	strb	r0, [r1, #10]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fb92:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800fb94:	4b2d      	ldr	r3, [pc, #180]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb96:	68da      	ldr	r2, [r3, #12]
 800fb98:	4b2c      	ldr	r3, [pc, #176]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb9a:	7a9b      	ldrb	r3, [r3, #10]
 800fb9c:	1c59      	adds	r1, r3, #1
 800fb9e:	b2c8      	uxtb	r0, r1
 800fba0:	492a      	ldr	r1, [pc, #168]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fba2:	7288      	strb	r0, [r1, #10]
 800fba4:	4413      	add	r3, r2
 800fba6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800fbaa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800fbac:	4b27      	ldr	r3, [pc, #156]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbae:	68da      	ldr	r2, [r3, #12]
 800fbb0:	4b26      	ldr	r3, [pc, #152]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbb2:	7a9b      	ldrb	r3, [r3, #10]
 800fbb4:	1c59      	adds	r1, r3, #1
 800fbb6:	b2c8      	uxtb	r0, r1
 800fbb8:	4924      	ldr	r1, [pc, #144]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbba:	7288      	strb	r0, [r1, #10]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800fbc2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800fbc4:	4b21      	ldr	r3, [pc, #132]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbc6:	68da      	ldr	r2, [r3, #12]
 800fbc8:	4b20      	ldr	r3, [pc, #128]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbca:	7a9b      	ldrb	r3, [r3, #10]
 800fbcc:	1c59      	adds	r1, r3, #1
 800fbce:	b2c8      	uxtb	r0, r1
 800fbd0:	491e      	ldr	r1, [pc, #120]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbd2:	7288      	strb	r0, [r1, #10]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800fbda:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800fbdc:	4b1b      	ldr	r3, [pc, #108]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbde:	68da      	ldr	r2, [r3, #12]
 800fbe0:	4b1a      	ldr	r3, [pc, #104]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbe2:	7a9b      	ldrb	r3, [r3, #10]
 800fbe4:	1c59      	adds	r1, r3, #1
 800fbe6:	b2c8      	uxtb	r0, r1
 800fbe8:	4918      	ldr	r1, [pc, #96]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbea:	7288      	strb	r0, [r1, #10]
 800fbec:	4413      	add	r3, r2
 800fbee:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800fbf2:	701a      	strb	r2, [r3, #0]
                break;
 800fbf4:	e00a      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800fbf6:	bf00      	nop
 800fbf8:	e008      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fbfa:	bf00      	nop
 800fbfc:	e006      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fbfe:	bf00      	nop
 800fc00:	e004      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fc02:	bf00      	nop
 800fc04:	e002      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fc06:	bf00      	nop
 800fc08:	e000      	b.n	800fc0c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fc0a:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800fc0c:	4b0f      	ldr	r3, [pc, #60]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc0e:	7a9b      	ldrb	r3, [r3, #10]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00c      	beq.n	800fc2e <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800fc14:	4b0f      	ldr	r3, [pc, #60]	@ (800fc54 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800fc16:	7a5b      	ldrb	r3, [r3, #9]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d114      	bne.n	800fc46 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800fc1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fc20:	480c      	ldr	r0, [pc, #48]	@ (800fc54 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800fc22:	f00d fc99 	bl	801d558 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800fc26:	480b      	ldr	r0, [pc, #44]	@ (800fc54 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800fc28:	f00d fbb8 	bl	801d39c <UTIL_TIMER_Start>
 800fc2c:	e00b      	b.n	800fc46 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800fc2e:	4809      	ldr	r0, [pc, #36]	@ (800fc54 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800fc30:	f00d fc22 	bl	801d478 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800fc34:	4b05      	ldr	r3, [pc, #20]	@ (800fc4c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	705a      	strb	r2, [r3, #1]
 800fc3a:	e004      	b.n	800fc46 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800fc3c:	bf00      	nop
 800fc3e:	e002      	b.n	800fc46 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800fc40:	bf00      	nop
 800fc42:	e000      	b.n	800fc46 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800fc44:	bf00      	nop
    }
}
 800fc46:	3790      	adds	r7, #144	@ 0x90
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc4c:	20000710 	.word	0x20000710
 800fc50:	20000748 	.word	0x20000748
 800fc54:	2000074c 	.word	0x2000074c

0800fc58 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800fc60:	bf00      	nop
    }
}
 800fc62:	bf00      	nop
 800fc64:	370c      	adds	r7, #12
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bc80      	pop	{r7}
 800fc6a:	4770      	bx	lr

0800fc6c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b083      	sub	sp, #12
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800fc74:	4b05      	ldr	r3, [pc, #20]	@ (800fc8c <LmhpComplianceOnMlmeIndication+0x20>)
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	f083 0301 	eor.w	r3, r3, #1
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	2b00      	cmp	r3, #0
    {
        return;
 800fc80:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bc80      	pop	{r7}
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop
 800fc8c:	20000710 	.word	0x20000710

0800fc90 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800fc98:	4b08      	ldr	r3, [pc, #32]	@ (800fcbc <OnProcessTimer+0x2c>)
 800fc9a:	7a9b      	ldrb	r3, [r3, #10]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800fca0:	4b06      	ldr	r3, [pc, #24]	@ (800fcbc <OnProcessTimer+0x2c>)
 800fca2:	2201      	movs	r2, #1
 800fca4:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800fca6:	4b06      	ldr	r3, [pc, #24]	@ (800fcc0 <OnProcessTimer+0x30>)
 800fca8:	695b      	ldr	r3, [r3, #20]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d002      	beq.n	800fcb4 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800fcae:	4b04      	ldr	r3, [pc, #16]	@ (800fcc0 <OnProcessTimer+0x30>)
 800fcb0:	695b      	ldr	r3, [r3, #20]
 800fcb2:	4798      	blx	r3
    }
}
 800fcb4:	bf00      	nop
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	20000710 	.word	0x20000710
 800fcc0:	200000d8 	.word	0x200000d8

0800fcc4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	370c      	adds	r7, #12
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bc80      	pop	{r7}
 800fcd6:	4770      	bx	lr

0800fcd8 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	4603      	mov	r3, r0
 800fce0:	6039      	str	r1, [r7, #0]
 800fce2:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800fce4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bc80      	pop	{r7}
 800fcf0:	4770      	bx	lr
	...

0800fcf4 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800fcf4:	b590      	push	{r4, r7, lr}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800fcfa:	f00d fcd7 	bl	801d6ac <UTIL_TIMER_GetCurrentTime>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	4a0f      	ldr	r2, [pc, #60]	@ (800fd40 <OnRadioTxDone+0x4c>)
 800fd02:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800fd04:	4c0f      	ldr	r4, [pc, #60]	@ (800fd44 <OnRadioTxDone+0x50>)
 800fd06:	463b      	mov	r3, r7
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f00c feb5 	bl	801ca78 <SysTimeGet>
 800fd0e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800fd12:	463a      	mov	r2, r7
 800fd14:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd18:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800fd1c:	4a0a      	ldr	r2, [pc, #40]	@ (800fd48 <OnRadioTxDone+0x54>)
 800fd1e:	7813      	ldrb	r3, [r2, #0]
 800fd20:	f043 0320 	orr.w	r3, r3, #32
 800fd24:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fd26:	f003 fa9f 	bl	8013268 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800fd2a:	4b08      	ldr	r3, [pc, #32]	@ (800fd4c <OnRadioTxDone+0x58>)
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	2100      	movs	r1, #0
 800fd30:	2002      	movs	r0, #2
 800fd32:	f00d fdab 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 800fd36:	bf00      	nop
 800fd38:	370c      	adds	r7, #12
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd90      	pop	{r4, r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	200018a4 	.word	0x200018a4
 800fd44:	20000764 	.word	0x20000764
 800fd48:	200018a0 	.word	0x200018a0
 800fd4c:	0801f840 	.word	0x0801f840

0800fd50 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	4608      	mov	r0, r1
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	4603      	mov	r3, r0
 800fd60:	817b      	strh	r3, [r7, #10]
 800fd62:	460b      	mov	r3, r1
 800fd64:	813b      	strh	r3, [r7, #8]
 800fd66:	4613      	mov	r3, r2
 800fd68:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800fd6a:	f00d fc9f 	bl	801d6ac <UTIL_TIMER_GetCurrentTime>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	4a11      	ldr	r2, [pc, #68]	@ (800fdb8 <OnRadioRxDone+0x68>)
 800fd72:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800fd74:	4a10      	ldr	r2, [pc, #64]	@ (800fdb8 <OnRadioRxDone+0x68>)
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800fd7a:	4a0f      	ldr	r2, [pc, #60]	@ (800fdb8 <OnRadioRxDone+0x68>)
 800fd7c:	897b      	ldrh	r3, [r7, #10]
 800fd7e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800fd80:	4a0d      	ldr	r2, [pc, #52]	@ (800fdb8 <OnRadioRxDone+0x68>)
 800fd82:	893b      	ldrh	r3, [r7, #8]
 800fd84:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800fd86:	4a0c      	ldr	r2, [pc, #48]	@ (800fdb8 <OnRadioRxDone+0x68>)
 800fd88:	79fb      	ldrb	r3, [r7, #7]
 800fd8a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800fd8c:	4a0b      	ldr	r2, [pc, #44]	@ (800fdbc <OnRadioRxDone+0x6c>)
 800fd8e:	7813      	ldrb	r3, [r2, #0]
 800fd90:	f043 0310 	orr.w	r3, r3, #16
 800fd94:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800fd96:	4a09      	ldr	r2, [pc, #36]	@ (800fdbc <OnRadioRxDone+0x6c>)
 800fd98:	7813      	ldrb	r3, [r2, #0]
 800fd9a:	f043 0301 	orr.w	r3, r3, #1
 800fd9e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800fda0:	f003 fa62 	bl	8013268 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800fda4:	4b06      	ldr	r3, [pc, #24]	@ (800fdc0 <OnRadioRxDone+0x70>)
 800fda6:	2201      	movs	r2, #1
 800fda8:	2100      	movs	r1, #0
 800fdaa:	2002      	movs	r0, #2
 800fdac:	f00d fd6e 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 800fdb0:	bf00      	nop
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	200018a8 	.word	0x200018a8
 800fdbc:	200018a0 	.word	0x200018a0
 800fdc0:	0801f850 	.word	0x0801f850

0800fdc4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800fdc8:	4a07      	ldr	r2, [pc, #28]	@ (800fde8 <OnRadioTxTimeout+0x24>)
 800fdca:	7813      	ldrb	r3, [r2, #0]
 800fdcc:	f043 0308 	orr.w	r3, r3, #8
 800fdd0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fdd2:	f003 fa49 	bl	8013268 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800fdd6:	4b05      	ldr	r3, [pc, #20]	@ (800fdec <OnRadioTxTimeout+0x28>)
 800fdd8:	2201      	movs	r2, #1
 800fdda:	2100      	movs	r1, #0
 800fddc:	2002      	movs	r0, #2
 800fdde:	f00d fd55 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 800fde2:	bf00      	nop
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	200018a0 	.word	0x200018a0
 800fdec:	0801f860 	.word	0x0801f860

0800fdf0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800fdf4:	4a04      	ldr	r2, [pc, #16]	@ (800fe08 <OnRadioRxError+0x18>)
 800fdf6:	7813      	ldrb	r3, [r2, #0]
 800fdf8:	f043 0304 	orr.w	r3, r3, #4
 800fdfc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fdfe:	f003 fa33 	bl	8013268 <OnMacProcessNotify>
}
 800fe02:	bf00      	nop
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	200018a0 	.word	0x200018a0

0800fe0c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800fe10:	4a07      	ldr	r2, [pc, #28]	@ (800fe30 <OnRadioRxTimeout+0x24>)
 800fe12:	7813      	ldrb	r3, [r2, #0]
 800fe14:	f043 0302 	orr.w	r3, r3, #2
 800fe18:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fe1a:	f003 fa25 	bl	8013268 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800fe1e:	4b05      	ldr	r3, [pc, #20]	@ (800fe34 <OnRadioRxTimeout+0x28>)
 800fe20:	2201      	movs	r2, #1
 800fe22:	2100      	movs	r1, #0
 800fe24:	2002      	movs	r0, #2
 800fe26:	f00d fd31 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 800fe2a:	bf00      	nop
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	200018a0 	.word	0x200018a0
 800fe34:	0801f870 	.word	0x0801f870

0800fe38 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800fe38:	b480      	push	{r7}
 800fe3a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fe3c:	4b08      	ldr	r3, [pc, #32]	@ (800fe60 <UpdateRxSlotIdleState+0x28>)
 800fe3e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	d004      	beq.n	800fe50 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800fe46:	4b07      	ldr	r3, [pc, #28]	@ (800fe64 <UpdateRxSlotIdleState+0x2c>)
 800fe48:	2206      	movs	r2, #6
 800fe4a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800fe4e:	e003      	b.n	800fe58 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fe50:	4b04      	ldr	r3, [pc, #16]	@ (800fe64 <UpdateRxSlotIdleState+0x2c>)
 800fe52:	2202      	movs	r2, #2
 800fe54:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800fe58:	bf00      	nop
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bc80      	pop	{r7}
 800fe5e:	4770      	bx	lr
 800fe60:	20000c98 	.word	0x20000c98
 800fe64:	20000764 	.word	0x20000764

0800fe68 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b092      	sub	sp, #72	@ 0x48
 800fe6c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fe6e:	4b4a      	ldr	r3, [pc, #296]	@ (800ff98 <ProcessRadioTxDone+0x130>)
 800fe70:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	d002      	beq.n	800fe7e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800fe78:	4b48      	ldr	r3, [pc, #288]	@ (800ff9c <ProcessRadioTxDone+0x134>)
 800fe7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe7c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe7e:	f3ef 8310 	mrs	r3, PRIMASK
 800fe82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800fe84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800fe86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800fe88:	b672      	cpsid	i
}
 800fe8a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800fe8c:	f00d fc0e 	bl	801d6ac <UTIL_TIMER_GetCurrentTime>
 800fe90:	4602      	mov	r2, r0
 800fe92:	4b43      	ldr	r3, [pc, #268]	@ (800ffa0 <ProcessRadioTxDone+0x138>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800fe9a:	4b42      	ldr	r3, [pc, #264]	@ (800ffa4 <ProcessRadioTxDone+0x13c>)
 800fe9c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800fea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	4619      	mov	r1, r3
 800fea6:	4840      	ldr	r0, [pc, #256]	@ (800ffa8 <ProcessRadioTxDone+0x140>)
 800fea8:	f00d fb56 	bl	801d558 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800feac:	483e      	ldr	r0, [pc, #248]	@ (800ffa8 <ProcessRadioTxDone+0x140>)
 800feae:	f00d fa75 	bl	801d39c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800feb2:	4b3c      	ldr	r3, [pc, #240]	@ (800ffa4 <ProcessRadioTxDone+0x13c>)
 800feb4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800feb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feba:	1ad3      	subs	r3, r2, r3
 800febc:	4619      	mov	r1, r3
 800febe:	483b      	ldr	r0, [pc, #236]	@ (800ffac <ProcessRadioTxDone+0x144>)
 800fec0:	f00d fb4a 	bl	801d558 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800fec4:	4839      	ldr	r0, [pc, #228]	@ (800ffac <ProcessRadioTxDone+0x144>)
 800fec6:	f00d fa69 	bl	801d39c <UTIL_TIMER_Start>
 800feca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fecc:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fed0:	f383 8810 	msr	PRIMASK, r3
}
 800fed4:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800fed6:	4b33      	ldr	r3, [pc, #204]	@ (800ffa4 <ProcessRadioTxDone+0x13c>)
 800fed8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d01a      	beq.n	800ff16 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800fee0:	2315      	movs	r3, #21
 800fee2:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fee6:	4b2c      	ldr	r3, [pc, #176]	@ (800ff98 <ProcessRadioTxDone+0x130>)
 800fee8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800feec:	f107 0220 	add.w	r2, r7, #32
 800fef0:	4611      	mov	r1, r2
 800fef2:	4618      	mov	r0, r3
 800fef4:	f006 ff47 	bl	8016d86 <RegionGetPhyParam>
 800fef8:	4603      	mov	r3, r0
 800fefa:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800fefc:	4b29      	ldr	r3, [pc, #164]	@ (800ffa4 <ProcessRadioTxDone+0x13c>)
 800fefe:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800ff02:	69fb      	ldr	r3, [r7, #28]
 800ff04:	4413      	add	r3, r2
 800ff06:	4619      	mov	r1, r3
 800ff08:	4829      	ldr	r0, [pc, #164]	@ (800ffb0 <ProcessRadioTxDone+0x148>)
 800ff0a:	f00d fb25 	bl	801d558 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800ff0e:	4828      	ldr	r0, [pc, #160]	@ (800ffb0 <ProcessRadioTxDone+0x148>)
 800ff10:	f00d fa44 	bl	801d39c <UTIL_TIMER_Start>
 800ff14:	e003      	b.n	800ff1e <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ff16:	4b23      	ldr	r3, [pc, #140]	@ (800ffa4 <ProcessRadioTxDone+0x13c>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800ff1e:	4b20      	ldr	r3, [pc, #128]	@ (800ffa0 <ProcessRadioTxDone+0x138>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4a1d      	ldr	r2, [pc, #116]	@ (800ff98 <ProcessRadioTxDone+0x130>)
 800ff24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ff26:	4b1f      	ldr	r3, [pc, #124]	@ (800ffa4 <ProcessRadioTxDone+0x13c>)
 800ff28:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800ff2c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ff2e:	4b1c      	ldr	r3, [pc, #112]	@ (800ffa0 <ProcessRadioTxDone+0x138>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ff34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f00c fdd5 	bl	801cae8 <SysTimeGetMcuTime>
 800ff3e:	4638      	mov	r0, r7
 800ff40:	4b15      	ldr	r3, [pc, #84]	@ (800ff98 <ProcessRadioTxDone+0x130>)
 800ff42:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800ff46:	9200      	str	r2, [sp, #0]
 800ff48:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ff4c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ff50:	ca06      	ldmia	r2, {r1, r2}
 800ff52:	f00c fd2a 	bl	801c9aa <SysTimeSub>
 800ff56:	f107 0314 	add.w	r3, r7, #20
 800ff5a:	463a      	mov	r2, r7
 800ff5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff60:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800ff64:	4b0f      	ldr	r3, [pc, #60]	@ (800ffa4 <ProcessRadioTxDone+0x13c>)
 800ff66:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800ff6a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ff70:	4b09      	ldr	r3, [pc, #36]	@ (800ff98 <ProcessRadioTxDone+0x130>)
 800ff72:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d101      	bne.n	800ff7e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800ff7e:	4b06      	ldr	r3, [pc, #24]	@ (800ff98 <ProcessRadioTxDone+0x130>)
 800ff80:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ff84:	f107 0208 	add.w	r2, r7, #8
 800ff88:	4611      	mov	r1, r2
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f006 ff13 	bl	8016db6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800ff90:	bf00      	nop
 800ff92:	3740      	adds	r7, #64	@ 0x40
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20000c98 	.word	0x20000c98
 800ff9c:	0801ff20 	.word	0x0801ff20
 800ffa0:	200018a4 	.word	0x200018a4
 800ffa4:	20000764 	.word	0x20000764
 800ffa8:	20000ae4 	.word	0x20000ae4
 800ffac:	20000afc 	.word	0x20000afc
 800ffb0:	20000b64 	.word	0x20000b64

0800ffb4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ffb8:	4b10      	ldr	r3, [pc, #64]	@ (800fffc <PrepareRxDoneAbort+0x48>)
 800ffba:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ffbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffc2:	4a0e      	ldr	r2, [pc, #56]	@ (800fffc <PrepareRxDoneAbort+0x48>)
 800ffc4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800ffc8:	4b0c      	ldr	r3, [pc, #48]	@ (800fffc <PrepareRxDoneAbort+0x48>)
 800ffca:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800ffd2:	2000      	movs	r0, #0
 800ffd4:	f001 fa12 	bl	80113fc <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800ffd8:	4a08      	ldr	r2, [pc, #32]	@ (800fffc <PrepareRxDoneAbort+0x48>)
 800ffda:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ffde:	f043 0302 	orr.w	r3, r3, #2
 800ffe2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ffe6:	4a05      	ldr	r2, [pc, #20]	@ (800fffc <PrepareRxDoneAbort+0x48>)
 800ffe8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ffec:	f043 0310 	orr.w	r3, r3, #16
 800fff0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800fff4:	f7ff ff20 	bl	800fe38 <UpdateRxSlotIdleState>
}
 800fff8:	bf00      	nop
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	20000764 	.word	0x20000764

08010000 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010000:	b590      	push	{r4, r7, lr}
 8010002:	b0a9      	sub	sp, #164	@ 0xa4
 8010004:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010006:	2312      	movs	r3, #18
 8010008:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 801000c:	4ba1      	ldr	r3, [pc, #644]	@ (8010294 <ProcessRadioRxDone+0x294>)
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 8010014:	4b9f      	ldr	r3, [pc, #636]	@ (8010294 <ProcessRadioRxDone+0x294>)
 8010016:	891b      	ldrh	r3, [r3, #8]
 8010018:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 801001c:	4b9d      	ldr	r3, [pc, #628]	@ (8010294 <ProcessRadioRxDone+0x294>)
 801001e:	895b      	ldrh	r3, [r3, #10]
 8010020:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 8010024:	4b9b      	ldr	r3, [pc, #620]	@ (8010294 <ProcessRadioRxDone+0x294>)
 8010026:	7b1b      	ldrb	r3, [r3, #12]
 8010028:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 801002c:	2300      	movs	r3, #0
 801002e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 8010032:	2300      	movs	r3, #0
 8010034:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010036:	4b98      	ldr	r3, [pc, #608]	@ (8010298 <ProcessRadioRxDone+0x298>)
 8010038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801003c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 8010040:	2300      	movs	r3, #0
 8010042:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010046:	2301      	movs	r3, #1
 8010048:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 801004c:	2301      	movs	r3, #1
 801004e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8010052:	4a92      	ldr	r2, [pc, #584]	@ (801029c <ProcessRadioRxDone+0x29c>)
 8010054:	7813      	ldrb	r3, [r2, #0]
 8010056:	f36f 0300 	bfc	r3, #0, #1
 801005a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 801005c:	4b90      	ldr	r3, [pc, #576]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 801005e:	2200      	movs	r2, #0
 8010060:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8010064:	4a8e      	ldr	r2, [pc, #568]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010066:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 801006a:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 801006e:	4a8c      	ldr	r2, [pc, #560]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010070:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8010074:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010078:	4b89      	ldr	r3, [pc, #548]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 801007a:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 801007e:	4b88      	ldr	r3, [pc, #544]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010080:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 8010084:	4b86      	ldr	r3, [pc, #536]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010086:	2200      	movs	r2, #0
 8010088:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 801008c:	4b84      	ldr	r3, [pc, #528]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 801008e:	2200      	movs	r2, #0
 8010090:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010094:	4b82      	ldr	r3, [pc, #520]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010096:	2200      	movs	r2, #0
 8010098:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 801009c:	4b80      	ldr	r3, [pc, #512]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 801009e:	2200      	movs	r2, #0
 80100a0:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 80100a4:	4b7e      	ldr	r3, [pc, #504]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 80100ac:	4b7c      	ldr	r3, [pc, #496]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100ae:	2200      	movs	r2, #0
 80100b0:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 80100b4:	4b7a      	ldr	r3, [pc, #488]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100b6:	2200      	movs	r2, #0
 80100b8:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80100bc:	4b78      	ldr	r3, [pc, #480]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100be:	2200      	movs	r2, #0
 80100c0:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80100c4:	4b76      	ldr	r3, [pc, #472]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100c6:	2200      	movs	r2, #0
 80100c8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 80100cc:	4b74      	ldr	r3, [pc, #464]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80100d4:	4b72      	ldr	r3, [pc, #456]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100d6:	2200      	movs	r2, #0
 80100d8:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 80100dc:	4b70      	ldr	r3, [pc, #448]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100de:	2200      	movs	r2, #0
 80100e0:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 80100e4:	4b6f      	ldr	r3, [pc, #444]	@ (80102a4 <ProcessRadioRxDone+0x2a4>)
 80100e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100e8:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80100ea:	4b6d      	ldr	r3, [pc, #436]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80100ec:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d102      	bne.n	80100fa <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 80100f4:	486c      	ldr	r0, [pc, #432]	@ (80102a8 <ProcessRadioRxDone+0x2a8>)
 80100f6:	f00d f9bf 	bl	801d478 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80100fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80100fe:	4619      	mov	r1, r3
 8010100:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8010104:	f004 feba 	bl	8014e7c <LoRaMacClassBRxBeacon>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d00b      	beq.n	8010126 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 801010e:	4a64      	ldr	r2, [pc, #400]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010110:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8010114:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8010118:	4a61      	ldr	r2, [pc, #388]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 801011a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801011e:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 8010122:	f000 bc8d 	b.w	8010a40 <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010126:	4b5c      	ldr	r3, [pc, #368]	@ (8010298 <ProcessRadioRxDone+0x298>)
 8010128:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801012c:	2b01      	cmp	r3, #1
 801012e:	d11e      	bne.n	801016e <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010130:	f004 feb7 	bl	8014ea2 <LoRaMacClassBIsPingExpected>
 8010134:	4603      	mov	r3, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00a      	beq.n	8010150 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801013a:	2000      	movs	r0, #0
 801013c:	f004 fe68 	bl	8014e10 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010140:	2000      	movs	r0, #0
 8010142:	f004 fe89 	bl	8014e58 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010146:	4b56      	ldr	r3, [pc, #344]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010148:	2204      	movs	r2, #4
 801014a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 801014e:	e00e      	b.n	801016e <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010150:	f004 feae 	bl	8014eb0 <LoRaMacClassBIsMulticastExpected>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d009      	beq.n	801016e <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801015a:	2000      	movs	r0, #0
 801015c:	f004 fe62 	bl	8014e24 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010160:	2000      	movs	r0, #0
 8010162:	f004 fe82 	bl	8014e6a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010166:	4b4e      	ldr	r3, [pc, #312]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010168:	2205      	movs	r2, #5
 801016a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 801016e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010172:	2b00      	cmp	r3, #0
 8010174:	d107      	bne.n	8010186 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010176:	4b4a      	ldr	r3, [pc, #296]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010178:	2201      	movs	r2, #1
 801017a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 801017e:	f7ff ff19 	bl	800ffb4 <PrepareRxDoneAbort>
        return;
 8010182:	f000 bc5d 	b.w	8010a40 <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010186:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801018a:	1c5a      	adds	r2, r3, #1
 801018c:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 8010190:	461a      	mov	r2, r3
 8010192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010196:	4413      	add	r3, r2
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 801019e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80101a2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	3b01      	subs	r3, #1
 80101aa:	2b06      	cmp	r3, #6
 80101ac:	f200 8419 	bhi.w	80109e2 <ProcessRadioRxDone+0x9e2>
 80101b0:	a201      	add	r2, pc, #4	@ (adr r2, 80101b8 <ProcessRadioRxDone+0x1b8>)
 80101b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b6:	bf00      	nop
 80101b8:	080101d5 	.word	0x080101d5
 80101bc:	080109e3 	.word	0x080109e3
 80101c0:	080103f3 	.word	0x080103f3
 80101c4:	080109e3 	.word	0x080109e3
 80101c8:	080103eb 	.word	0x080103eb
 80101cc:	080109e3 	.word	0x080109e3
 80101d0:	08010987 	.word	0x08010987
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80101d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80101d8:	2b10      	cmp	r3, #16
 80101da:	d807      	bhi.n	80101ec <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80101dc:	4b30      	ldr	r3, [pc, #192]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 80101de:	2201      	movs	r2, #1
 80101e0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 80101e4:	f7ff fee6 	bl	800ffb4 <PrepareRxDoneAbort>
                return;
 80101e8:	f000 bc2a 	b.w	8010a40 <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 80101ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80101f0:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 80101f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80101fa:	4b27      	ldr	r3, [pc, #156]	@ (8010298 <ProcessRadioRxDone+0x298>)
 80101fc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8010200:	2b00      	cmp	r3, #0
 8010202:	d007      	beq.n	8010214 <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010204:	4b26      	ldr	r3, [pc, #152]	@ (80102a0 <ProcessRadioRxDone+0x2a0>)
 8010206:	2201      	movs	r2, #1
 8010208:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 801020c:	f7ff fed2 	bl	800ffb4 <PrepareRxDoneAbort>
                return;
 8010210:	f000 bc16 	b.w	8010a40 <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 8010214:	1d3b      	adds	r3, r7, #4
 8010216:	4618      	mov	r0, r3
 8010218:	f7fd ff7e 	bl	800e118 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 801021c:	f107 0214 	add.w	r2, r7, #20
 8010220:	1d3b      	adds	r3, r7, #4
 8010222:	4619      	mov	r1, r3
 8010224:	20ff      	movs	r0, #255	@ 0xff
 8010226:	f006 f835 	bl	8016294 <LoRaMacCryptoHandleJoinAccept>
 801022a:	4603      	mov	r3, r0
 801022c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8010230:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8010234:	2b00      	cmp	r3, #0
 8010236:	f040 80cc 	bne.w	80103d2 <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 801023a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801023e:	f003 030f 	and.w	r3, r3, #15
 8010242:	b2db      	uxtb	r3, r3
 8010244:	2b0f      	cmp	r3, #15
 8010246:	d031      	beq.n	80102ac <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010248:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801024c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010250:	b2db      	uxtb	r3, r3
 8010252:	b25b      	sxtb	r3, r3
 8010254:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010256:	4b10      	ldr	r3, [pc, #64]	@ (8010298 <ProcessRadioRxDone+0x298>)
 8010258:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801025c:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 801025e:	4b0e      	ldr	r3, [pc, #56]	@ (8010298 <ProcessRadioRxDone+0x298>)
 8010260:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010264:	4639      	mov	r1, r7
 8010266:	2207      	movs	r2, #7
 8010268:	4618      	mov	r0, r3
 801026a:	f006 fdc7 	bl	8016dfc <RegionVerify>
 801026e:	4603      	mov	r3, r0
 8010270:	f083 0301 	eor.w	r3, r3, #1
 8010274:	b2db      	uxtb	r3, r3
 8010276:	2b00      	cmp	r3, #0
 8010278:	d018      	beq.n	80102ac <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801027a:	2001      	movs	r0, #1
 801027c:	f005 fb14 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	f000 83b4 	beq.w	80109f0 <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010288:	2101      	movs	r1, #1
 801028a:	2007      	movs	r0, #7
 801028c:	f005 fa80 	bl	8015790 <LoRaMacConfirmQueueSetStatus>
 8010290:	e3b1      	b.n	80109f6 <ProcessRadioRxDone+0x9f6>
 8010292:	bf00      	nop
 8010294:	200018a8 	.word	0x200018a8
 8010298:	20000c98 	.word	0x20000c98
 801029c:	200018a0 	.word	0x200018a0
 80102a0:	20000764 	.word	0x20000764
 80102a4:	0801ff20 	.word	0x0801ff20
 80102a8:	20000afc 	.word	0x20000afc
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80102ac:	7f7b      	ldrb	r3, [r7, #29]
 80102ae:	461a      	mov	r2, r3
 80102b0:	4ba5      	ldr	r3, [pc, #660]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80102b2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80102b6:	4ba4      	ldr	r3, [pc, #656]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80102b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80102bc:	7fbb      	ldrb	r3, [r7, #30]
 80102be:	021b      	lsls	r3, r3, #8
 80102c0:	4313      	orrs	r3, r2
 80102c2:	4aa1      	ldr	r2, [pc, #644]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80102c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80102c8:	4b9f      	ldr	r3, [pc, #636]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80102ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80102ce:	7ffb      	ldrb	r3, [r7, #31]
 80102d0:	041b      	lsls	r3, r3, #16
 80102d2:	4313      	orrs	r3, r2
 80102d4:	4a9c      	ldr	r2, [pc, #624]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80102d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80102da:	6a3b      	ldr	r3, [r7, #32]
 80102dc:	4a9a      	ldr	r2, [pc, #616]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80102de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80102e2:	4b99      	ldr	r3, [pc, #612]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80102e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80102e8:	4619      	mov	r1, r3
 80102ea:	2002      	movs	r0, #2
 80102ec:	f7fd ff2c 	bl	800e148 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80102f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80102f4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80102f8:	b2db      	uxtb	r3, r3
 80102fa:	461a      	mov	r2, r3
 80102fc:	4b92      	ldr	r3, [pc, #584]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80102fe:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 8010302:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010306:	f003 030f 	and.w	r3, r3, #15
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b0f      	cmp	r3, #15
 801030e:	d011      	beq.n	8010334 <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010314:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010318:	b2db      	uxtb	r3, r3
 801031a:	461a      	mov	r2, r3
 801031c:	4b8a      	ldr	r3, [pc, #552]	@ (8010548 <ProcessRadioRxDone+0x548>)
 801031e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010322:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010326:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801032a:	b2db      	uxtb	r3, r3
 801032c:	461a      	mov	r2, r3
 801032e:	4b86      	ldr	r3, [pc, #536]	@ (8010548 <ProcessRadioRxDone+0x548>)
 8010330:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8010334:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010338:	461a      	mov	r2, r3
 801033a:	4b83      	ldr	r3, [pc, #524]	@ (8010548 <ProcessRadioRxDone+0x548>)
 801033c:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 801033e:	4b82      	ldr	r3, [pc, #520]	@ (8010548 <ProcessRadioRxDone+0x548>)
 8010340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010342:	2b00      	cmp	r3, #0
 8010344:	d102      	bne.n	801034c <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8010346:	4b80      	ldr	r3, [pc, #512]	@ (8010548 <ProcessRadioRxDone+0x548>)
 8010348:	2201      	movs	r2, #1
 801034a:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 801034c:	4b7e      	ldr	r3, [pc, #504]	@ (8010548 <ProcessRadioRxDone+0x548>)
 801034e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010354:	fb02 f303 	mul.w	r3, r2, r3
 8010358:	4a7b      	ldr	r2, [pc, #492]	@ (8010548 <ProcessRadioRxDone+0x548>)
 801035a:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801035c:	4b7a      	ldr	r3, [pc, #488]	@ (8010548 <ProcessRadioRxDone+0x548>)
 801035e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010360:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8010364:	4a78      	ldr	r2, [pc, #480]	@ (8010548 <ProcessRadioRxDone+0x548>)
 8010366:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8010368:	4b77      	ldr	r3, [pc, #476]	@ (8010548 <ProcessRadioRxDone+0x548>)
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8010370:	4b75      	ldr	r3, [pc, #468]	@ (8010548 <ProcessRadioRxDone+0x548>)
 8010372:	2200      	movs	r2, #0
 8010374:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010378:	f107 0314 	add.w	r3, r7, #20
 801037c:	3312      	adds	r3, #18
 801037e:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010380:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010384:	b2db      	uxtb	r3, r3
 8010386:	3b11      	subs	r3, #17
 8010388:	b2db      	uxtb	r3, r3
 801038a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 801038e:	4b6f      	ldr	r3, [pc, #444]	@ (801054c <ProcessRadioRxDone+0x54c>)
 8010390:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8010394:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010398:	4b6b      	ldr	r3, [pc, #428]	@ (8010548 <ProcessRadioRxDone+0x548>)
 801039a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801039e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80103a2:	4611      	mov	r1, r2
 80103a4:	4618      	mov	r0, r3
 80103a6:	f006 fd40 	bl	8016e2a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80103aa:	4b67      	ldr	r3, [pc, #412]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80103ac:	2202      	movs	r2, #2
 80103ae:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80103b2:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80103b6:	4618      	mov	r0, r3
 80103b8:	f005 fa76 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f000 8318 	beq.w	80109f4 <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80103c4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80103c8:	4619      	mov	r1, r3
 80103ca:	2000      	movs	r0, #0
 80103cc:	f005 f9e0 	bl	8015790 <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 80103d0:	e310      	b.n	80109f4 <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80103d2:	2001      	movs	r0, #1
 80103d4:	f005 fa68 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 830a 	beq.w	80109f4 <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80103e0:	2101      	movs	r1, #1
 80103e2:	2007      	movs	r0, #7
 80103e4:	f005 f9d4 	bl	8015790 <LoRaMacConfirmQueueSetStatus>
            break;
 80103e8:	e304      	b.n	80109f4 <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80103ea:	4b58      	ldr	r3, [pc, #352]	@ (801054c <ProcessRadioRxDone+0x54c>)
 80103ec:	2201      	movs	r2, #1
 80103ee:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80103f2:	4b55      	ldr	r3, [pc, #340]	@ (8010548 <ProcessRadioRxDone+0x548>)
 80103f4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80103f8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80103fc:	4b53      	ldr	r3, [pc, #332]	@ (801054c <ProcessRadioRxDone+0x54c>)
 80103fe:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 8010402:	b25b      	sxtb	r3, r3
 8010404:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010408:	230d      	movs	r3, #13
 801040a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801040e:	4b4e      	ldr	r3, [pc, #312]	@ (8010548 <ProcessRadioRxDone+0x548>)
 8010410:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8010414:	2b00      	cmp	r3, #0
 8010416:	d002      	beq.n	801041e <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010418:	230e      	movs	r3, #14
 801041a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801041e:	4b4a      	ldr	r3, [pc, #296]	@ (8010548 <ProcessRadioRxDone+0x548>)
 8010420:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010424:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8010428:	4611      	mov	r1, r2
 801042a:	4618      	mov	r0, r3
 801042c:	f006 fcab 	bl	8016d86 <RegionGetPhyParam>
 8010430:	4603      	mov	r3, r0
 8010432:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8010434:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010438:	3b0d      	subs	r3, #13
 801043a:	b29b      	uxth	r3, r3
 801043c:	b21b      	sxth	r3, r3
 801043e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010442:	b21a      	sxth	r2, r3
 8010444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010446:	b21b      	sxth	r3, r3
 8010448:	429a      	cmp	r2, r3
 801044a:	dc03      	bgt.n	8010454 <ProcessRadioRxDone+0x454>
 801044c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010450:	2b0b      	cmp	r3, #11
 8010452:	d806      	bhi.n	8010462 <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010454:	4b3d      	ldr	r3, [pc, #244]	@ (801054c <ProcessRadioRxDone+0x54c>)
 8010456:	2201      	movs	r2, #1
 8010458:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 801045c:	f7ff fdaa 	bl	800ffb4 <PrepareRxDoneAbort>
                return;
 8010460:	e2ee      	b.n	8010a40 <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 8010462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010466:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 8010468:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801046c:	b2db      	uxtb	r3, r3
 801046e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8010472:	4b37      	ldr	r3, [pc, #220]	@ (8010550 <ProcessRadioRxDone+0x550>)
 8010474:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010476:	23ff      	movs	r3, #255	@ 0xff
 8010478:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801047c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010480:	4618      	mov	r0, r3
 8010482:	f006 fa07 	bl	8016894 <LoRaMacParserData>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d006      	beq.n	801049a <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801048c:	4b2f      	ldr	r3, [pc, #188]	@ (801054c <ProcessRadioRxDone+0x54c>)
 801048e:	2201      	movs	r2, #1
 8010490:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8010494:	f7ff fd8e 	bl	800ffb4 <PrepareRxDoneAbort>
                return;
 8010498:	e2d2      	b.n	8010a40 <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801049a:	4b2b      	ldr	r3, [pc, #172]	@ (8010548 <ProcessRadioRxDone+0x548>)
 801049c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d132      	bne.n	801050a <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 80104a4:	f004 fcfd 	bl	8014ea2 <LoRaMacClassBIsPingExpected>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d014      	beq.n	80104d8 <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80104ae:	2000      	movs	r0, #0
 80104b0:	f004 fcae 	bl	8014e10 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80104b4:	2000      	movs	r0, #0
 80104b6:	f004 fccf 	bl	8014e58 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80104ba:	4b24      	ldr	r3, [pc, #144]	@ (801054c <ProcessRadioRxDone+0x54c>)
 80104bc:	2204      	movs	r2, #4
 80104be:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80104c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104c4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80104c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	4619      	mov	r1, r3
 80104d0:	4610      	mov	r0, r2
 80104d2:	f004 fd6f 	bl	8014fb4 <LoRaMacClassBSetFPendingBit>
 80104d6:	e018      	b.n	801050a <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80104d8:	f004 fcea 	bl	8014eb0 <LoRaMacClassBIsMulticastExpected>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d013      	beq.n	801050a <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80104e2:	2000      	movs	r0, #0
 80104e4:	f004 fc9e 	bl	8014e24 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80104e8:	2000      	movs	r0, #0
 80104ea:	f004 fcbe 	bl	8014e6a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80104ee:	4b17      	ldr	r3, [pc, #92]	@ (801054c <ProcessRadioRxDone+0x54c>)
 80104f0:	2205      	movs	r2, #5
 80104f2:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80104f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104f8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80104fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010500:	b2db      	uxtb	r3, r3
 8010502:	4619      	mov	r1, r3
 8010504:	4610      	mov	r0, r2
 8010506:	f004 fd55 	bl	8014fb4 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 801050a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801050c:	4a0f      	ldr	r2, [pc, #60]	@ (801054c <ProcessRadioRxDone+0x54c>)
 801050e:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8010512:	f107 020e 	add.w	r2, r7, #14
 8010516:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801051a:	4611      	mov	r1, r2
 801051c:	4618      	mov	r0, r3
 801051e:	f002 fd9f 	bl	8013060 <DetermineFrameType>
 8010522:	4603      	mov	r3, r0
 8010524:	2b00      	cmp	r3, #0
 8010526:	d006      	beq.n	8010536 <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010528:	4b08      	ldr	r3, [pc, #32]	@ (801054c <ProcessRadioRxDone+0x54c>)
 801052a:	2201      	movs	r2, #1
 801052c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8010530:	f7ff fd40 	bl	800ffb4 <PrepareRxDoneAbort>
                return;
 8010534:	e284      	b.n	8010a40 <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 8010536:	2300      	movs	r3, #0
 8010538:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010540:	2300      	movs	r3, #0
 8010542:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8010546:	e055      	b.n	80105f4 <ProcessRadioRxDone+0x5f4>
 8010548:	20000c98 	.word	0x20000c98
 801054c:	20000764 	.word	0x20000764
 8010550:	2000099c 	.word	0x2000099c
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010554:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8010558:	499f      	ldr	r1, [pc, #636]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 801055a:	4613      	mov	r3, r2
 801055c:	005b      	lsls	r3, r3, #1
 801055e:	4413      	add	r3, r2
 8010560:	011b      	lsls	r3, r3, #4
 8010562:	440b      	add	r3, r1
 8010564:	33ec      	adds	r3, #236	@ 0xec
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801056a:	429a      	cmp	r2, r3
 801056c:	d13d      	bne.n	80105ea <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 801056e:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8010572:	4999      	ldr	r1, [pc, #612]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 8010574:	4613      	mov	r3, r2
 8010576:	005b      	lsls	r3, r3, #1
 8010578:	4413      	add	r3, r2
 801057a:	011b      	lsls	r3, r3, #4
 801057c:	440b      	add	r3, r1
 801057e:	33e9      	adds	r3, #233	@ 0xe9
 8010580:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010582:	2b00      	cmp	r3, #0
 8010584:	d031      	beq.n	80105ea <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 8010586:	2301      	movs	r3, #1
 8010588:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 801058c:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8010590:	4991      	ldr	r1, [pc, #580]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 8010592:	4613      	mov	r3, r2
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	4413      	add	r3, r2
 8010598:	011b      	lsls	r3, r3, #4
 801059a:	440b      	add	r3, r1
 801059c:	33ea      	adds	r3, #234	@ 0xea
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80105a4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 80105a8:	498b      	ldr	r1, [pc, #556]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 80105aa:	4613      	mov	r3, r2
 80105ac:	005b      	lsls	r3, r3, #1
 80105ae:	4413      	add	r3, r2
 80105b0:	011b      	lsls	r3, r3, #4
 80105b2:	440b      	add	r3, r1
 80105b4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80105be:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 80105c2:	4985      	ldr	r1, [pc, #532]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 80105c4:	4613      	mov	r3, r2
 80105c6:	005b      	lsls	r3, r3, #1
 80105c8:	4413      	add	r3, r2
 80105ca:	011b      	lsls	r3, r3, #4
 80105cc:	440b      	add	r3, r1
 80105ce:	33ec      	adds	r3, #236	@ 0xec
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80105d6:	4b80      	ldr	r3, [pc, #512]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 80105d8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80105dc:	2b02      	cmp	r3, #2
 80105de:	d10e      	bne.n	80105fe <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80105e0:	4b7e      	ldr	r3, [pc, #504]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80105e2:	2203      	movs	r2, #3
 80105e4:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 80105e8:	e009      	b.n	80105fe <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80105ea:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80105ee:	3301      	adds	r3, #1
 80105f0:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 80105f4:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d0ab      	beq.n	8010554 <ProcessRadioRxDone+0x554>
 80105fc:	e000      	b.n	8010600 <ProcessRadioRxDone+0x600>
                    break;
 80105fe:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010600:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8010604:	2b01      	cmp	r3, #1
 8010606:	d117      	bne.n	8010638 <ProcessRadioRxDone+0x638>
 8010608:	7bbb      	ldrb	r3, [r7, #14]
 801060a:	2b03      	cmp	r3, #3
 801060c:	d10d      	bne.n	801062a <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801060e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010612:	f003 0320 	and.w	r3, r3, #32
 8010616:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010618:	2b00      	cmp	r3, #0
 801061a:	d106      	bne.n	801062a <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 801061c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010624:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010626:	2b00      	cmp	r3, #0
 8010628:	d006      	beq.n	8010638 <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801062a:	4b6c      	ldr	r3, [pc, #432]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 801062c:	2201      	movs	r2, #1
 801062e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8010632:	f7ff fcbf 	bl	800ffb4 <PrepareRxDoneAbort>
                return;
 8010636:	e203      	b.n	8010a40 <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8010638:	7bb9      	ldrb	r1, [r7, #14]
 801063a:	4c67      	ldr	r4, [pc, #412]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 801063c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8010640:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 8010644:	f107 0310 	add.w	r3, r7, #16
 8010648:	9301      	str	r3, [sp, #4]
 801064a:	f107 030f 	add.w	r3, r7, #15
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8010654:	f000 feec 	bl	8011430 <GetFCntDown>
 8010658:	4603      	mov	r3, r0
 801065a:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801065e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8010662:	2b00      	cmp	r3, #0
 8010664:	d017      	beq.n	8010696 <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8010666:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 801066a:	2b07      	cmp	r3, #7
 801066c:	d104      	bne.n	8010678 <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 801066e:	4b5b      	ldr	r3, [pc, #364]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 8010670:	2208      	movs	r2, #8
 8010672:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 8010676:	e003      	b.n	8010680 <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010678:	4b58      	ldr	r3, [pc, #352]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 801067a:	2201      	movs	r2, #1
 801067c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	4a56      	ldr	r2, [pc, #344]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 8010684:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	4a54      	ldr	r2, [pc, #336]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 801068c:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 8010690:	f7ff fc90 	bl	800ffb4 <PrepareRxDoneAbort>
                return;
 8010694:	e1d4      	b.n	8010a40 <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8010696:	7bfa      	ldrb	r2, [r7, #15]
 8010698:	6939      	ldr	r1, [r7, #16]
 801069a:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 801069e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	460b      	mov	r3, r1
 80106a6:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80106aa:	f005 ff55 	bl	8016558 <LoRaMacCryptoUnsecureMessage>
 80106ae:	4603      	mov	r3, r0
 80106b0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80106b4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00f      	beq.n	80106dc <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80106bc:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80106c0:	2b02      	cmp	r3, #2
 80106c2:	d104      	bne.n	80106ce <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80106c4:	4b45      	ldr	r3, [pc, #276]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80106c6:	220a      	movs	r2, #10
 80106c8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 80106cc:	e003      	b.n	80106d6 <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80106ce:	4b43      	ldr	r3, [pc, #268]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80106d0:	220b      	movs	r2, #11
 80106d2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 80106d6:	f7ff fc6d 	bl	800ffb4 <PrepareRxDoneAbort>
                return;
 80106da:	e1b1      	b.n	8010a40 <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80106dc:	4b3f      	ldr	r3, [pc, #252]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80106de:	2200      	movs	r2, #0
 80106e0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 80106e4:	4a3d      	ldr	r2, [pc, #244]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80106e6:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80106ea:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80106ee:	4b3b      	ldr	r3, [pc, #236]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80106f6:	4b39      	ldr	r3, [pc, #228]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80106f8:	2200      	movs	r2, #0
 80106fa:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	4a36      	ldr	r2, [pc, #216]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 8010702:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	4a34      	ldr	r2, [pc, #208]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 801070a:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801070e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010712:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010716:	b2db      	uxtb	r3, r3
 8010718:	2b00      	cmp	r3, #0
 801071a:	bf14      	ite	ne
 801071c:	2301      	movne	r3, #1
 801071e:	2300      	moveq	r3, #0
 8010720:	b2da      	uxtb	r2, r3
 8010722:	4b2e      	ldr	r3, [pc, #184]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 8010724:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010728:	4b2c      	ldr	r3, [pc, #176]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 801072a:	2200      	movs	r2, #0
 801072c:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010730:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010734:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010738:	b2db      	uxtb	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	bf14      	ite	ne
 801073e:	2301      	movne	r3, #1
 8010740:	2300      	moveq	r3, #0
 8010742:	b2da      	uxtb	r2, r3
 8010744:	4b25      	ldr	r3, [pc, #148]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 8010746:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801074a:	4b24      	ldr	r3, [pc, #144]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 801074c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010750:	2b00      	cmp	r3, #0
 8010752:	d004      	beq.n	801075e <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010754:	4b21      	ldr	r3, [pc, #132]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 8010756:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801075a:	2b01      	cmp	r3, #1
 801075c:	d106      	bne.n	801076c <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801075e:	4b1e      	ldr	r3, [pc, #120]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 8010760:	2200      	movs	r2, #0
 8010762:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8010764:	4b1c      	ldr	r3, [pc, #112]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 8010766:	2201      	movs	r2, #1
 8010768:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 801076c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8010770:	2b01      	cmp	r3, #1
 8010772:	d104      	bne.n	801077e <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8010774:	4b19      	ldr	r3, [pc, #100]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 8010776:	2202      	movs	r2, #2
 8010778:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 801077c:	e03a      	b.n	80107f4 <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 801077e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010782:	f023 031f 	bic.w	r3, r3, #31
 8010786:	b2db      	uxtb	r3, r3
 8010788:	2ba0      	cmp	r3, #160	@ 0xa0
 801078a:	d12b      	bne.n	80107e4 <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 801078c:	4b12      	ldr	r3, [pc, #72]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 801078e:	2201      	movs	r2, #1
 8010790:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010794:	4b10      	ldr	r3, [pc, #64]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 8010796:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 801079a:	2b00      	cmp	r3, #0
 801079c:	d102      	bne.n	80107a4 <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 801079e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80107a0:	4a0d      	ldr	r2, [pc, #52]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 80107a2:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80107a4:	4b0d      	ldr	r3, [pc, #52]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80107ac:	4b0b      	ldr	r3, [pc, #44]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80107ae:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d01e      	beq.n	80107f4 <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 80107b6:	4b09      	ldr	r3, [pc, #36]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80107b8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d019      	beq.n	80107f4 <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80107c0:	4b05      	ldr	r3, [pc, #20]	@ (80107d8 <ProcessRadioRxDone+0x7d8>)
 80107c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107c6:	4a05      	ldr	r2, [pc, #20]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80107c8:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80107cc:	4b04      	ldr	r3, [pc, #16]	@ (80107e0 <ProcessRadioRxDone+0x7e0>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4a02      	ldr	r2, [pc, #8]	@ (80107dc <ProcessRadioRxDone+0x7dc>)
 80107d2:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 80107d6:	e00d      	b.n	80107f4 <ProcessRadioRxDone+0x7f4>
 80107d8:	20000c98 	.word	0x20000c98
 80107dc:	20000764 	.word	0x20000764
 80107e0:	200018a8 	.word	0x200018a8
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80107e4:	4b98      	ldr	r3, [pc, #608]	@ (8010a48 <ProcessRadioRxDone+0xa48>)
 80107e6:	2200      	movs	r2, #0
 80107e8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80107ec:	4b97      	ldr	r3, [pc, #604]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80107ee:	2200      	movs	r2, #0
 80107f0:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 80107f4:	4b94      	ldr	r3, [pc, #592]	@ (8010a48 <ProcessRadioRxDone+0xa48>)
 80107f6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d106      	bne.n	801080c <ProcessRadioRxDone+0x80c>
 80107fe:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010802:	f003 0310 	and.w	r3, r3, #16
 8010806:	b2db      	uxtb	r3, r3
 8010808:	2b00      	cmp	r3, #0
 801080a:	d004      	beq.n	8010816 <ProcessRadioRxDone+0x816>
 801080c:	4b8e      	ldr	r3, [pc, #568]	@ (8010a48 <ProcessRadioRxDone+0xa48>)
 801080e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010812:	2b00      	cmp	r3, #0
 8010814:	d004      	beq.n	8010820 <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 8010816:	4b8d      	ldr	r3, [pc, #564]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010818:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8010820:	4b8a      	ldr	r3, [pc, #552]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010822:	2201      	movs	r2, #1
 8010824:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8010828:	4b88      	ldr	r3, [pc, #544]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 801082a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801082e:	4a87      	ldr	r2, [pc, #540]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010830:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 8010834:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8010838:	4618      	mov	r0, r3
 801083a:	f001 ffa5 	bl	8012788 <RemoveMacCommands>

            switch( fType )
 801083e:	7bbb      	ldrb	r3, [r7, #14]
 8010840:	2b03      	cmp	r3, #3
 8010842:	d874      	bhi.n	801092e <ProcessRadioRxDone+0x92e>
 8010844:	a201      	add	r2, pc, #4	@ (adr r2, 801084c <ProcessRadioRxDone+0x84c>)
 8010846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801084a:	bf00      	nop
 801084c:	0801085d 	.word	0x0801085d
 8010850:	080108ad 	.word	0x080108ad
 8010854:	080108e3 	.word	0x080108e3
 8010858:	08010909 	.word	0x08010909
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801085c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010860:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010864:	b2db      	uxtb	r3, r3
 8010866:	461c      	mov	r4, r3
 8010868:	4b78      	ldr	r3, [pc, #480]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 801086a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801086e:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 8010872:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8010876:	f102 0010 	add.w	r0, r2, #16
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	460b      	mov	r3, r1
 801087e:	4622      	mov	r2, r4
 8010880:	2100      	movs	r1, #0
 8010882:	f000 ff51 	bl	8011728 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010886:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 801088a:	4b70      	ldr	r3, [pc, #448]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 801088c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010892:	4a6e      	ldr	r2, [pc, #440]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010894:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010898:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 801089c:	4b6b      	ldr	r3, [pc, #428]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 801089e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80108a2:	4b6a      	ldr	r3, [pc, #424]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80108a4:	2201      	movs	r2, #1
 80108a6:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 80108aa:	e047      	b.n	801093c <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80108ac:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80108b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	461c      	mov	r4, r3
 80108b8:	4b64      	ldr	r3, [pc, #400]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80108ba:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80108be:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 80108c2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80108c6:	f102 0010 	add.w	r0, r2, #16
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	460b      	mov	r3, r1
 80108ce:	4622      	mov	r2, r4
 80108d0:	2100      	movs	r1, #0
 80108d2:	f000 ff29 	bl	8011728 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80108d6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80108da:	4b5c      	ldr	r3, [pc, #368]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80108dc:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 80108e0:	e02c      	b.n	801093c <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80108e2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80108e4:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80108e8:	4b58      	ldr	r3, [pc, #352]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80108ea:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80108ee:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	460b      	mov	r3, r1
 80108f6:	2100      	movs	r1, #0
 80108f8:	f000 ff16 	bl	8011728 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80108fc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010900:	4b52      	ldr	r3, [pc, #328]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010902:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 8010906:	e019      	b.n	801093c <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010908:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 801090c:	4b4f      	ldr	r3, [pc, #316]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 801090e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010914:	4a4d      	ldr	r2, [pc, #308]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010916:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801091a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 801091e:	4b4b      	ldr	r3, [pc, #300]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010920:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8010924:	4b49      	ldr	r3, [pc, #292]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010926:	2201      	movs	r2, #1
 8010928:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 801092c:	e006      	b.n	801093c <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801092e:	4b47      	ldr	r3, [pc, #284]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010930:	2201      	movs	r2, #1
 8010932:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 8010936:	f7ff fb3d 	bl	800ffb4 <PrepareRxDoneAbort>
                    break;
 801093a:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 801093c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8010940:	2be0      	cmp	r3, #224	@ 0xe0
 8010942:	d118      	bne.n	8010976 <ProcessRadioRxDone+0x976>
 8010944:	4b40      	ldr	r3, [pc, #256]	@ (8010a48 <ProcessRadioRxDone+0xa48>)
 8010946:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 801094a:	f083 0301 	eor.w	r3, r3, #1
 801094e:	b2db      	uxtb	r3, r3
 8010950:	2b00      	cmp	r3, #0
 8010952:	d010      	beq.n	8010976 <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010954:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010958:	4b3c      	ldr	r3, [pc, #240]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 801095a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 801095e:	4b3b      	ldr	r3, [pc, #236]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010960:	2200      	movs	r2, #0
 8010962:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8010966:	4b39      	ldr	r3, [pc, #228]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010968:	2200      	movs	r2, #0
 801096a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 801096e:	4b37      	ldr	r3, [pc, #220]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010970:	2200      	movs	r2, #0
 8010972:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010976:	4a35      	ldr	r2, [pc, #212]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010978:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801097c:	f043 0302 	orr.w	r3, r3, #2
 8010980:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 8010984:	e037      	b.n	80109f6 <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8010986:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801098a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801098e:	18d1      	adds	r1, r2, r3
 8010990:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8010994:	b29b      	uxth	r3, r3
 8010996:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801099a:	1ad3      	subs	r3, r2, r3
 801099c:	b29b      	uxth	r3, r3
 801099e:	461a      	mov	r2, r3
 80109a0:	482b      	ldr	r0, [pc, #172]	@ (8010a50 <ProcessRadioRxDone+0xa50>)
 80109a2:	f008 fc1c 	bl	80191de <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80109a6:	4b29      	ldr	r3, [pc, #164]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80109a8:	2203      	movs	r2, #3
 80109aa:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80109ae:	4b27      	ldr	r3, [pc, #156]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80109b6:	4b25      	ldr	r3, [pc, #148]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80109b8:	4a25      	ldr	r2, [pc, #148]	@ (8010a50 <ProcessRadioRxDone+0xa50>)
 80109ba:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80109be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80109c2:	b2da      	uxtb	r2, r3
 80109c4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	4b1f      	ldr	r3, [pc, #124]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80109ce:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80109d2:	4a1e      	ldr	r2, [pc, #120]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80109d4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80109d8:	f043 0302 	orr.w	r3, r3, #2
 80109dc:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 80109e0:	e009      	b.n	80109f6 <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80109e2:	4b1a      	ldr	r3, [pc, #104]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80109e4:	2201      	movs	r2, #1
 80109e6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 80109ea:	f7ff fae3 	bl	800ffb4 <PrepareRxDoneAbort>
            break;
 80109ee:	e002      	b.n	80109f6 <ProcessRadioRxDone+0x9f6>
                        break;
 80109f0:	bf00      	nop
 80109f2:	e000      	b.n	80109f6 <ProcessRadioRxDone+0x9f6>
            break;
 80109f4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80109f6:	4b15      	ldr	r3, [pc, #84]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 80109f8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d004      	beq.n	8010a0a <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010a00:	4b12      	ldr	r3, [pc, #72]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010a02:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d10c      	bne.n	8010a24 <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 8010a0a:	4b10      	ldr	r3, [pc, #64]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010a0c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d007      	beq.n	8010a24 <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8010a14:	4b0d      	ldr	r3, [pc, #52]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010a16:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d002      	beq.n	8010a24 <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8010a1e:	2000      	movs	r0, #0
 8010a20:	f000 fcec 	bl	80113fc <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8010a24:	4b09      	ldr	r3, [pc, #36]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010a26:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010a2a:	2b02      	cmp	r3, #2
 8010a2c:	d006      	beq.n	8010a3c <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010a2e:	4a07      	ldr	r2, [pc, #28]	@ (8010a4c <ProcessRadioRxDone+0xa4c>)
 8010a30:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010a34:	f043 0310 	orr.w	r3, r3, #16
 8010a38:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8010a3c:	f7ff f9fc 	bl	800fe38 <UpdateRxSlotIdleState>
}
 8010a40:	379c      	adds	r7, #156	@ 0x9c
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd90      	pop	{r4, r7, pc}
 8010a46:	bf00      	nop
 8010a48:	20000c98 	.word	0x20000c98
 8010a4c:	20000764 	.word	0x20000764
 8010a50:	2000099c 	.word	0x2000099c

08010a54 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010a58:	4b11      	ldr	r3, [pc, #68]	@ (8010aa0 <ProcessRadioTxTimeout+0x4c>)
 8010a5a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d002      	beq.n	8010a68 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8010a62:	4b10      	ldr	r3, [pc, #64]	@ (8010aa4 <ProcessRadioTxTimeout+0x50>)
 8010a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a66:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010a68:	f7ff f9e6 	bl	800fe38 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8010aa8 <ProcessRadioTxTimeout+0x54>)
 8010a6e:	2202      	movs	r2, #2
 8010a70:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010a74:	2002      	movs	r0, #2
 8010a76:	f004 fee3 	bl	8015840 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8010a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8010aa8 <ProcessRadioTxTimeout+0x54>)
 8010a7c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d003      	beq.n	8010a8c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8010a84:	4b08      	ldr	r3, [pc, #32]	@ (8010aa8 <ProcessRadioTxTimeout+0x54>)
 8010a86:	2201      	movs	r2, #1
 8010a88:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010a8c:	4a06      	ldr	r2, [pc, #24]	@ (8010aa8 <ProcessRadioTxTimeout+0x54>)
 8010a8e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010a92:	f043 0310 	orr.w	r3, r3, #16
 8010a96:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 8010a9a:	bf00      	nop
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	20000c98 	.word	0x20000c98
 8010aa4:	0801ff20 	.word	0x0801ff20
 8010aa8:	20000764 	.word	0x20000764

08010aac <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	460a      	mov	r2, r1
 8010ab6:	71fb      	strb	r3, [r7, #7]
 8010ab8:	4613      	mov	r3, r2
 8010aba:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8010abc:	2300      	movs	r3, #0
 8010abe:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8010bb8 <HandleRadioRxErrorTimeout+0x10c>)
 8010ac2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d002      	beq.n	8010ad0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8010aca:	4b3c      	ldr	r3, [pc, #240]	@ (8010bbc <HandleRadioRxErrorTimeout+0x110>)
 8010acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ace:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010ad0:	f004 f9e0 	bl	8014e94 <LoRaMacClassBIsBeaconExpected>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d007      	beq.n	8010aea <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8010ada:	2002      	movs	r0, #2
 8010adc:	f004 f98e 	bl	8014dfc <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	f004 f9b0 	bl	8014e46 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010aea:	4b33      	ldr	r3, [pc, #204]	@ (8010bb8 <HandleRadioRxErrorTimeout+0x10c>)
 8010aec:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d119      	bne.n	8010b28 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010af4:	f004 f9d5 	bl	8014ea2 <LoRaMacClassBIsPingExpected>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d007      	beq.n	8010b0e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010afe:	2000      	movs	r0, #0
 8010b00:	f004 f986 	bl	8014e10 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010b04:	2000      	movs	r0, #0
 8010b06:	f004 f9a7 	bl	8014e58 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010b0e:	f004 f9cf 	bl	8014eb0 <LoRaMacClassBIsMulticastExpected>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d007      	beq.n	8010b28 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010b18:	2000      	movs	r0, #0
 8010b1a:	f004 f983 	bl	8014e24 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010b1e:	2000      	movs	r0, #0
 8010b20:	f004 f9a3 	bl	8014e6a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010b24:	2301      	movs	r3, #1
 8010b26:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010b28:	7bfb      	ldrb	r3, [r7, #15]
 8010b2a:	f083 0301 	eor.w	r3, r3, #1
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d03b      	beq.n	8010bac <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010b34:	4b22      	ldr	r3, [pc, #136]	@ (8010bc0 <HandleRadioRxErrorTimeout+0x114>)
 8010b36:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d122      	bne.n	8010b84 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8010b3e:	4b20      	ldr	r3, [pc, #128]	@ (8010bc0 <HandleRadioRxErrorTimeout+0x114>)
 8010b40:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d003      	beq.n	8010b50 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010b48:	4a1d      	ldr	r2, [pc, #116]	@ (8010bc0 <HandleRadioRxErrorTimeout+0x114>)
 8010b4a:	79fb      	ldrb	r3, [r7, #7]
 8010b4c:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010b50:	79fb      	ldrb	r3, [r7, #7]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f004 fe74 	bl	8015840 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010b58:	4b17      	ldr	r3, [pc, #92]	@ (8010bb8 <HandleRadioRxErrorTimeout+0x10c>)
 8010b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f00c fdb7 	bl	801d6d0 <UTIL_TIMER_GetElapsedTime>
 8010b62:	4602      	mov	r2, r0
 8010b64:	4b16      	ldr	r3, [pc, #88]	@ (8010bc0 <HandleRadioRxErrorTimeout+0x114>)
 8010b66:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d31e      	bcc.n	8010bac <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8010b6e:	4815      	ldr	r0, [pc, #84]	@ (8010bc4 <HandleRadioRxErrorTimeout+0x118>)
 8010b70:	f00c fc82 	bl	801d478 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010b74:	4a12      	ldr	r2, [pc, #72]	@ (8010bc0 <HandleRadioRxErrorTimeout+0x114>)
 8010b76:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010b7a:	f043 0310 	orr.w	r3, r3, #16
 8010b7e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8010b82:	e013      	b.n	8010bac <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010b84:	4b0e      	ldr	r3, [pc, #56]	@ (8010bc0 <HandleRadioRxErrorTimeout+0x114>)
 8010b86:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d003      	beq.n	8010b96 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8010bc0 <HandleRadioRxErrorTimeout+0x114>)
 8010b90:	79bb      	ldrb	r3, [r7, #6]
 8010b92:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8010b96:	79bb      	ldrb	r3, [r7, #6]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f004 fe51 	bl	8015840 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8010b9e:	4a08      	ldr	r2, [pc, #32]	@ (8010bc0 <HandleRadioRxErrorTimeout+0x114>)
 8010ba0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010ba4:	f043 0310 	orr.w	r3, r3, #16
 8010ba8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8010bac:	f7ff f944 	bl	800fe38 <UpdateRxSlotIdleState>
}
 8010bb0:	bf00      	nop
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	20000c98 	.word	0x20000c98
 8010bbc:	0801ff20 	.word	0x0801ff20
 8010bc0:	20000764 	.word	0x20000764
 8010bc4:	20000afc 	.word	0x20000afc

08010bc8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8010bcc:	2106      	movs	r1, #6
 8010bce:	2005      	movs	r0, #5
 8010bd0:	f7ff ff6c 	bl	8010aac <HandleRadioRxErrorTimeout>
}
 8010bd4:	bf00      	nop
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8010bdc:	2104      	movs	r1, #4
 8010bde:	2003      	movs	r0, #3
 8010be0:	f7ff ff64 	bl	8010aac <HandleRadioRxErrorTimeout>
}
 8010be4:	bf00      	nop
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bee:	f3ef 8310 	mrs	r3, PRIMASK
 8010bf2:	607b      	str	r3, [r7, #4]
  return(result);
 8010bf4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010bf6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010bf8:	b672      	cpsid	i
}
 8010bfa:	bf00      	nop
    events = LoRaMacRadioEvents;
 8010bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8010c74 <LoRaMacHandleIrqEvents+0x8c>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010c02:	4b1c      	ldr	r3, [pc, #112]	@ (8010c74 <LoRaMacHandleIrqEvents+0x8c>)
 8010c04:	2200      	movs	r2, #0
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	f383 8810 	msr	PRIMASK, r3
}
 8010c12:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d027      	beq.n	8010c6a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8010c1a:	783b      	ldrb	r3, [r7, #0]
 8010c1c:	f003 0320 	and.w	r3, r3, #32
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d001      	beq.n	8010c2a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8010c26:	f7ff f91f 	bl	800fe68 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8010c2a:	783b      	ldrb	r3, [r7, #0]
 8010c2c:	f003 0310 	and.w	r3, r3, #16
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d001      	beq.n	8010c3a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8010c36:	f7ff f9e3 	bl	8010000 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8010c3a:	783b      	ldrb	r3, [r7, #0]
 8010c3c:	f003 0308 	and.w	r3, r3, #8
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d001      	beq.n	8010c4a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8010c46:	f7ff ff05 	bl	8010a54 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8010c4a:	783b      	ldrb	r3, [r7, #0]
 8010c4c:	f003 0304 	and.w	r3, r3, #4
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d001      	beq.n	8010c5a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8010c56:	f7ff ffb7 	bl	8010bc8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8010c5a:	783b      	ldrb	r3, [r7, #0]
 8010c5c:	f003 0302 	and.w	r3, r3, #2
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d001      	beq.n	8010c6a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8010c66:	f7ff ffb7 	bl	8010bd8 <ProcessRadioRxTimeout>
        }
    }
}
 8010c6a:	bf00      	nop
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	200018a0 	.word	0x200018a0

08010c78 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8010c78:	b480      	push	{r7}
 8010c7a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8010c7c:	4b10      	ldr	r3, [pc, #64]	@ (8010cc0 <LoRaMacIsBusy+0x48>)
 8010c7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	d101      	bne.n	8010c8a <LoRaMacIsBusy+0x12>
    {
        return false;
 8010c86:	2300      	movs	r3, #0
 8010c88:	e015      	b.n	8010cb6 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8010c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc4 <LoRaMacIsBusy+0x4c>)
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	f003 0301 	and.w	r3, r3, #1
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d001      	beq.n	8010c9c <LoRaMacIsBusy+0x24>
    {
        return true;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	e00c      	b.n	8010cb6 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010c9c:	4b08      	ldr	r3, [pc, #32]	@ (8010cc0 <LoRaMacIsBusy+0x48>)
 8010c9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d106      	bne.n	8010cb4 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8010ca6:	4b06      	ldr	r3, [pc, #24]	@ (8010cc0 <LoRaMacIsBusy+0x48>)
 8010ca8:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d101      	bne.n	8010cb4 <LoRaMacIsBusy+0x3c>
    {
        return false;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	e000      	b.n	8010cb6 <LoRaMacIsBusy+0x3e>
    }
    return true;
 8010cb4:	2301      	movs	r3, #1
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bc80      	pop	{r7}
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	20000764 	.word	0x20000764
 8010cc4:	200018a0 	.word	0x200018a0

08010cc8 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8010cc8:	b480      	push	{r7}
 8010cca:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8010ccc:	4b05      	ldr	r3, [pc, #20]	@ (8010ce4 <LoRaMacIsStopped+0x1c>)
 8010cce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d101      	bne.n	8010cda <LoRaMacIsStopped+0x12>
    {
        return true;
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	e000      	b.n	8010cdc <LoRaMacIsStopped+0x14>
    }
    return false;
 8010cda:	2300      	movs	r3, #0
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bc80      	pop	{r7}
 8010ce2:	4770      	bx	lr
 8010ce4:	20000764 	.word	0x20000764

08010ce8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	4603      	mov	r3, r0
 8010cf0:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8010cf2:	4a04      	ldr	r2, [pc, #16]	@ (8010d04 <LoRaMacEnableRequests+0x1c>)
 8010cf4:	79fb      	ldrb	r3, [r7, #7]
 8010cf6:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 8010cfa:	bf00      	nop
 8010cfc:	370c      	adds	r7, #12
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bc80      	pop	{r7}
 8010d02:	4770      	bx	lr
 8010d04:	20000764 	.word	0x20000764

08010d08 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8010d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010d10:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010d14:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010d16:	4b2a      	ldr	r3, [pc, #168]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010d18:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d14a      	bne.n	8010db6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010d20:	4b27      	ldr	r3, [pc, #156]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010d22:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010d26:	f003 0301 	and.w	r3, r3, #1
 8010d2a:	b2db      	uxtb	r3, r3
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d006      	beq.n	8010d3e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010d30:	4a23      	ldr	r2, [pc, #140]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010d32:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010d36:	f36f 0300 	bfc	r3, #0, #1
 8010d3a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010d3e:	4b20      	ldr	r3, [pc, #128]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010d40:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010d44:	f003 0304 	and.w	r3, r3, #4
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d006      	beq.n	8010d5c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010d50:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010d54:	f36f 0382 	bfc	r3, #2, #1
 8010d58:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010d5c:	2001      	movs	r0, #1
 8010d5e:	f7ff ffc3 	bl	8010ce8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010d62:	793b      	ldrb	r3, [r7, #4]
 8010d64:	f003 0301 	and.w	r3, r3, #1
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d005      	beq.n	8010d7a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010d6e:	4b14      	ldr	r3, [pc, #80]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010d70:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4813      	ldr	r0, [pc, #76]	@ (8010dc4 <LoRaMacHandleRequestEvents+0xbc>)
 8010d78:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010d7a:	793b      	ldrb	r3, [r7, #4]
 8010d7c:	f003 0304 	and.w	r3, r3, #4
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00e      	beq.n	8010da4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8010d86:	4810      	ldr	r0, [pc, #64]	@ (8010dc8 <LoRaMacHandleRequestEvents+0xc0>)
 8010d88:	f004 fda8 	bl	80158dc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010d8c:	f004 fdf8 	bl	8015980 <LoRaMacConfirmQueueGetCnt>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d006      	beq.n	8010da4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010d96:	4a0a      	ldr	r2, [pc, #40]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010d98:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010d9c:	f043 0304 	orr.w	r3, r3, #4
 8010da0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8010da4:	f004 f8a2 	bl	8014eec <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8010da8:	4a05      	ldr	r2, [pc, #20]	@ (8010dc0 <LoRaMacHandleRequestEvents+0xb8>)
 8010daa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010dae:	f36f 1304 	bfc	r3, #4, #1
 8010db2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8010db6:	bf00      	nop
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20000764 	.word	0x20000764
 8010dc4:	20000ba4 	.word	0x20000ba4
 8010dc8:	20000bb8 	.word	0x20000bb8

08010dcc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010dd0:	4b16      	ldr	r3, [pc, #88]	@ (8010e2c <LoRaMacHandleIndicationEvents+0x60>)
 8010dd2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010dd6:	f003 0308 	and.w	r3, r3, #8
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00d      	beq.n	8010dfc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010de0:	4a12      	ldr	r2, [pc, #72]	@ (8010e2c <LoRaMacHandleIndicationEvents+0x60>)
 8010de2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010de6:	f36f 03c3 	bfc	r3, #3, #1
 8010dea:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8010dee:	4b0f      	ldr	r3, [pc, #60]	@ (8010e2c <LoRaMacHandleIndicationEvents+0x60>)
 8010df0:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010df4:	68db      	ldr	r3, [r3, #12]
 8010df6:	490e      	ldr	r1, [pc, #56]	@ (8010e30 <LoRaMacHandleIndicationEvents+0x64>)
 8010df8:	480e      	ldr	r0, [pc, #56]	@ (8010e34 <LoRaMacHandleIndicationEvents+0x68>)
 8010dfa:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8010e2c <LoRaMacHandleIndicationEvents+0x60>)
 8010dfe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010e02:	f003 0302 	and.w	r3, r3, #2
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d00d      	beq.n	8010e28 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010e0c:	4a07      	ldr	r2, [pc, #28]	@ (8010e2c <LoRaMacHandleIndicationEvents+0x60>)
 8010e0e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010e12:	f36f 0341 	bfc	r3, #1, #1
 8010e16:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8010e1a:	4b04      	ldr	r3, [pc, #16]	@ (8010e2c <LoRaMacHandleIndicationEvents+0x60>)
 8010e1c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	4903      	ldr	r1, [pc, #12]	@ (8010e30 <LoRaMacHandleIndicationEvents+0x64>)
 8010e24:	4804      	ldr	r0, [pc, #16]	@ (8010e38 <LoRaMacHandleIndicationEvents+0x6c>)
 8010e26:	4798      	blx	r3
    }
}
 8010e28:	bf00      	nop
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20000764 	.word	0x20000764
 8010e30:	20000bf0 	.word	0x20000bf0
 8010e34:	20000bcc 	.word	0x20000bcc
 8010e38:	20000b84 	.word	0x20000b84

08010e3c <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010e42:	4b2a      	ldr	r3, [pc, #168]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010e44:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010e48:	f003 0301 	and.w	r3, r3, #1
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d048      	beq.n	8010ee4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8010e52:	2300      	movs	r3, #0
 8010e54:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010e56:	2300      	movs	r3, #0
 8010e58:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010e5a:	4b24      	ldr	r3, [pc, #144]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010e5c:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d004      	beq.n	8010e6e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010e64:	4b21      	ldr	r3, [pc, #132]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010e66:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010e6a:	2b03      	cmp	r3, #3
 8010e6c:	d104      	bne.n	8010e78 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010e6e:	f002 f959 	bl	8013124 <CheckRetransUnconfirmedUplink>
 8010e72:	4603      	mov	r3, r0
 8010e74:	71fb      	strb	r3, [r7, #7]
 8010e76:	e010      	b.n	8010e9a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010e78:	4b1c      	ldr	r3, [pc, #112]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010e7a:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8010e7e:	2b01      	cmp	r3, #1
 8010e80:	d10b      	bne.n	8010e9a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8010e82:	4b1a      	ldr	r3, [pc, #104]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010e84:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d004      	beq.n	8010e96 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010e8c:	f002 f976 	bl	801317c <CheckRetransConfirmedUplink>
 8010e90:	4603      	mov	r3, r0
 8010e92:	71fb      	strb	r3, [r7, #7]
 8010e94:	e001      	b.n	8010e9a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8010e96:	2301      	movs	r3, #1
 8010e98:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8010e9a:	79fb      	ldrb	r3, [r7, #7]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00d      	beq.n	8010ebc <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010ea0:	4813      	ldr	r0, [pc, #76]	@ (8010ef0 <LoRaMacHandleMcpsRequest+0xb4>)
 8010ea2:	f00c fae9 	bl	801d478 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010ea6:	4b11      	ldr	r3, [pc, #68]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010ea8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010eac:	f023 0320 	bic.w	r3, r3, #32
 8010eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010eb2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 8010eb6:	f002 f99b 	bl	80131f0 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010eba:	e013      	b.n	8010ee4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8010ebc:	79bb      	ldrb	r3, [r7, #6]
 8010ebe:	f083 0301 	eor.w	r3, r3, #1
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00d      	beq.n	8010ee4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010ec8:	4a08      	ldr	r2, [pc, #32]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010eca:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010ece:	f36f 1304 	bfc	r3, #4, #1
 8010ed2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8010ed6:	4b05      	ldr	r3, [pc, #20]	@ (8010eec <LoRaMacHandleMcpsRequest+0xb0>)
 8010ed8:	2200      	movs	r2, #0
 8010eda:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 8010ede:	2000      	movs	r0, #0
 8010ee0:	f000 f9c8 	bl	8011274 <OnTxDelayedTimerEvent>
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	20000764 	.word	0x20000764
 8010ef0:	20000acc 	.word	0x20000acc

08010ef4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010ef8:	4b18      	ldr	r3, [pc, #96]	@ (8010f5c <LoRaMacHandleMlmeRequest+0x68>)
 8010efa:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010efe:	f003 0304 	and.w	r3, r3, #4
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d026      	beq.n	8010f56 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010f08:	2001      	movs	r0, #1
 8010f0a:	f004 fccd 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d012      	beq.n	8010f3a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010f14:	2001      	movs	r0, #1
 8010f16:	f004 fc69 	bl	80157ec <LoRaMacConfirmQueueGetStatus>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d103      	bne.n	8010f28 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010f20:	4b0e      	ldr	r3, [pc, #56]	@ (8010f5c <LoRaMacHandleMlmeRequest+0x68>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010f28:	4b0c      	ldr	r3, [pc, #48]	@ (8010f5c <LoRaMacHandleMlmeRequest+0x68>)
 8010f2a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f2e:	f023 0302 	bic.w	r3, r3, #2
 8010f32:	4a0a      	ldr	r2, [pc, #40]	@ (8010f5c <LoRaMacHandleMlmeRequest+0x68>)
 8010f34:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010f38:	e00d      	b.n	8010f56 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8010f3a:	2006      	movs	r0, #6
 8010f3c:	f004 fcb4 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d007      	beq.n	8010f56 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010f46:	4b05      	ldr	r3, [pc, #20]	@ (8010f5c <LoRaMacHandleMlmeRequest+0x68>)
 8010f48:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f4c:	f023 0302 	bic.w	r3, r3, #2
 8010f50:	4a02      	ldr	r2, [pc, #8]	@ (8010f5c <LoRaMacHandleMlmeRequest+0x68>)
 8010f52:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8010f56:	bf00      	nop
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	20000764 	.word	0x20000764

08010f60 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010f64:	200b      	movs	r0, #11
 8010f66:	f004 fc9f 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d019      	beq.n	8010fa4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010f70:	4b0e      	ldr	r3, [pc, #56]	@ (8010fac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010f72:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010f76:	f003 0301 	and.w	r3, r3, #1
 8010f7a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d111      	bne.n	8010fa4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010f80:	4b0a      	ldr	r3, [pc, #40]	@ (8010fac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010f82:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010f86:	f003 0304 	and.w	r3, r3, #4
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d009      	beq.n	8010fa4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010f90:	4b06      	ldr	r3, [pc, #24]	@ (8010fac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010f92:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f96:	f023 0302 	bic.w	r3, r3, #2
 8010f9a:	4a04      	ldr	r2, [pc, #16]	@ (8010fac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010f9c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e000      	b.n	8010fa6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	20000764 	.word	0x20000764

08010fb0 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b083      	sub	sp, #12
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	71fb      	strb	r3, [r7, #7]
 8010fba:	460b      	mov	r3, r1
 8010fbc:	71bb      	strb	r3, [r7, #6]
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8010fc2:	79fb      	ldrb	r3, [r7, #7]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00a      	beq.n	8010fde <CheckForMinimumAbpDatarate+0x2e>
 8010fc8:	79bb      	ldrb	r3, [r7, #6]
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d107      	bne.n	8010fde <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 8010fce:	797b      	ldrb	r3, [r7, #5]
 8010fd0:	f083 0301 	eor.w	r3, r3, #1
 8010fd4:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d001      	beq.n	8010fde <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e000      	b.n	8010fe0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 8010fde:	2300      	movs	r3, #0
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bc80      	pop	{r7}
 8010fe8:	4770      	bx	lr
	...

08010fec <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010fec:	b480      	push	{r7}
 8010fee:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8011028 <LoRaMacCheckForRxAbort+0x3c>)
 8010ff2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00f      	beq.n	801101e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8011028 <LoRaMacCheckForRxAbort+0x3c>)
 8011000:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011008:	4a07      	ldr	r2, [pc, #28]	@ (8011028 <LoRaMacCheckForRxAbort+0x3c>)
 801100a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801100e:	4b06      	ldr	r3, [pc, #24]	@ (8011028 <LoRaMacCheckForRxAbort+0x3c>)
 8011010:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011014:	f023 0302 	bic.w	r3, r3, #2
 8011018:	4a03      	ldr	r2, [pc, #12]	@ (8011028 <LoRaMacCheckForRxAbort+0x3c>)
 801101a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 801101e:	bf00      	nop
 8011020:	46bd      	mov	sp, r7
 8011022:	bc80      	pop	{r7}
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop
 8011028:	20000764 	.word	0x20000764

0801102c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011034:	2300      	movs	r3, #0
 8011036:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011038:	2300      	movs	r3, #0
 801103a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801103c:	4b51      	ldr	r3, [pc, #324]	@ (8011184 <LoRaMacHandleNvm+0x158>)
 801103e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011042:	2b00      	cmp	r3, #0
 8011044:	f040 8099 	bne.w	801117a <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2124      	movs	r1, #36	@ 0x24
 801104c:	4618      	mov	r0, r3
 801104e:	f008 f91b 	bl	8019288 <Crc32>
 8011052:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	429a      	cmp	r2, r3
 801105c:	d006      	beq.n	801106c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	68ba      	ldr	r2, [r7, #8]
 8011062:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011064:	89fb      	ldrh	r3, [r7, #14]
 8011066:	f043 0301 	orr.w	r3, r3, #1
 801106a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	3328      	adds	r3, #40	@ 0x28
 8011070:	211c      	movs	r1, #28
 8011072:	4618      	mov	r0, r3
 8011074:	f008 f908 	bl	8019288 <Crc32>
 8011078:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	429a      	cmp	r2, r3
 8011082:	d006      	beq.n	8011092 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	68ba      	ldr	r2, [r7, #8]
 8011088:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801108a:	89fb      	ldrh	r3, [r7, #14]
 801108c:	f043 0302 	orr.w	r3, r3, #2
 8011090:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	3348      	adds	r3, #72	@ 0x48
 8011096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801109a:	4618      	mov	r0, r3
 801109c:	f008 f8f4 	bl	8019288 <Crc32>
 80110a0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80110a8:	68ba      	ldr	r2, [r7, #8]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d007      	beq.n	80110be <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	68ba      	ldr	r2, [r7, #8]
 80110b2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80110b6:	89fb      	ldrh	r3, [r7, #14]
 80110b8:	f043 0304 	orr.w	r3, r3, #4
 80110bc:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80110c4:	21d4      	movs	r1, #212	@ 0xd4
 80110c6:	4618      	mov	r0, r3
 80110c8:	f008 f8de 	bl	8019288 <Crc32>
 80110cc:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d007      	beq.n	80110ea <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80110e2:	89fb      	ldrh	r3, [r7, #14]
 80110e4:	f043 0308 	orr.w	r3, r3, #8
 80110e8:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80110f0:	2100      	movs	r1, #0
 80110f2:	4618      	mov	r0, r3
 80110f4:	f008 f8c8 	bl	8019288 <Crc32>
 80110f8:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011100:	68ba      	ldr	r2, [r7, #8]
 8011102:	429a      	cmp	r2, r3
 8011104:	d007      	beq.n	8011116 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	68ba      	ldr	r2, [r7, #8]
 801110a:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801110e:	89fb      	ldrh	r3, [r7, #14]
 8011110:	f043 0310 	orr.w	r3, r3, #16
 8011114:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 801111c:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8011120:	4618      	mov	r0, r3
 8011122:	f008 f8b1 	bl	8019288 <Crc32>
 8011126:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 801112e:	68ba      	ldr	r2, [r7, #8]
 8011130:	429a      	cmp	r2, r3
 8011132:	d007      	beq.n	8011144 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	68ba      	ldr	r2, [r7, #8]
 8011138:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801113c:	89fb      	ldrh	r3, [r7, #14]
 801113e:	f043 0320 	orr.w	r3, r3, #32
 8011142:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 801114a:	2114      	movs	r1, #20
 801114c:	4618      	mov	r0, r3
 801114e:	f008 f89b 	bl	8019288 <Crc32>
 8011152:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 801115a:	68ba      	ldr	r2, [r7, #8]
 801115c:	429a      	cmp	r2, r3
 801115e:	d007      	beq.n	8011170 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	68ba      	ldr	r2, [r7, #8]
 8011164:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011168:	89fb      	ldrh	r3, [r7, #14]
 801116a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801116e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011170:	89fb      	ldrh	r3, [r7, #14]
 8011172:	4618      	mov	r0, r3
 8011174:	f002 f88e 	bl	8013294 <CallNvmDataChangeCallback>
 8011178:	e000      	b.n	801117c <LoRaMacHandleNvm+0x150>
        return;
 801117a:	bf00      	nop
}
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	20000764 	.word	0x20000764

08011188 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00d      	beq.n	80111b4 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8011198:	6838      	ldr	r0, [r7, #0]
 801119a:	f00c fa99 	bl	801d6d0 <UTIL_TIMER_GetElapsedTime>
 801119e:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80111a0:	68fa      	ldr	r2, [r7, #12]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d905      	bls.n	80111b4 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80111a8:	4b05      	ldr	r3, [pc, #20]	@ (80111c0 <LoRaMacHandleResponseTimeout+0x38>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 80111b0:	2301      	movs	r3, #1
 80111b2:	e000      	b.n	80111b6 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	20000c98 	.word	0x20000c98

080111c4 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80111ca:	2300      	movs	r3, #0
 80111cc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80111ce:	f7ff fd0b 	bl	8010be8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80111d2:	f003 fefa 	bl	8014fca <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80111d6:	4b25      	ldr	r3, [pc, #148]	@ (801126c <LoRaMacProcess+0xa8>)
 80111d8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80111dc:	f003 0310 	and.w	r3, r3, #16
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d023      	beq.n	801122e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80111e6:	2000      	movs	r0, #0
 80111e8:	f7ff fd7e 	bl	8010ce8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80111ec:	f7ff fefe 	bl	8010fec <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80111f0:	f002 f86e 	bl	80132d0 <IsRequestPending>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d006      	beq.n	8011208 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80111fa:	f7ff feb1 	bl	8010f60 <LoRaMacCheckForBeaconAcquisition>
 80111fe:	4603      	mov	r3, r0
 8011200:	461a      	mov	r2, r3
 8011202:	79fb      	ldrb	r3, [r7, #7]
 8011204:	4313      	orrs	r3, r2
 8011206:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011208:	79fb      	ldrb	r3, [r7, #7]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d103      	bne.n	8011216 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801120e:	f7ff fe71 	bl	8010ef4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011212:	f7ff fe13 	bl	8010e3c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011216:	f7ff fd77 	bl	8010d08 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801121a:	2001      	movs	r0, #1
 801121c:	f7ff fd64 	bl	8010ce8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011220:	4a12      	ldr	r2, [pc, #72]	@ (801126c <LoRaMacProcess+0xa8>)
 8011222:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8011226:	f043 0320 	orr.w	r3, r3, #32
 801122a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 801122e:	f7ff fdcd 	bl	8010dcc <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011232:	4b0e      	ldr	r3, [pc, #56]	@ (801126c <LoRaMacProcess+0xa8>)
 8011234:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011238:	2b02      	cmp	r3, #2
 801123a:	d101      	bne.n	8011240 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 801123c:	f001 fc32 	bl	8012aa4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011240:	4b0a      	ldr	r3, [pc, #40]	@ (801126c <LoRaMacProcess+0xa8>)
 8011242:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011246:	f003 0320 	and.w	r3, r3, #32
 801124a:	b2db      	uxtb	r3, r3
 801124c:	2b00      	cmp	r3, #0
 801124e:	d009      	beq.n	8011264 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8011250:	4a06      	ldr	r2, [pc, #24]	@ (801126c <LoRaMacProcess+0xa8>)
 8011252:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8011256:	f36f 1345 	bfc	r3, #5, #1
 801125a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 801125e:	4804      	ldr	r0, [pc, #16]	@ (8011270 <LoRaMacProcess+0xac>)
 8011260:	f7ff fee4 	bl	801102c <LoRaMacHandleNvm>
    }
}
 8011264:	bf00      	nop
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	20000764 	.word	0x20000764
 8011270:	20000c98 	.word	0x20000c98

08011274 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 801127c:	481e      	ldr	r0, [pc, #120]	@ (80112f8 <OnTxDelayedTimerEvent+0x84>)
 801127e:	f00c f8fb 	bl	801d478 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011282:	4b1e      	ldr	r3, [pc, #120]	@ (80112fc <OnTxDelayedTimerEvent+0x88>)
 8011284:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011288:	f023 0320 	bic.w	r3, r3, #32
 801128c:	4a1b      	ldr	r2, [pc, #108]	@ (80112fc <OnTxDelayedTimerEvent+0x88>)
 801128e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8011292:	4b1b      	ldr	r3, [pc, #108]	@ (8011300 <OnTxDelayedTimerEvent+0x8c>)
 8011294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011298:	4a18      	ldr	r2, [pc, #96]	@ (80112fc <OnTxDelayedTimerEvent+0x88>)
 801129a:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 801129e:	4611      	mov	r1, r2
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff ff71 	bl	8011188 <LoRaMacHandleResponseTimeout>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d11e      	bne.n	80112ea <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80112ac:	2001      	movs	r0, #1
 80112ae:	f001 f943 	bl	8012538 <ScheduleTx>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d01a      	beq.n	80112ee <OnTxDelayedTimerEvent+0x7a>
 80112b8:	2b0b      	cmp	r3, #11
 80112ba:	d018      	beq.n	80112ee <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80112bc:	4b10      	ldr	r3, [pc, #64]	@ (8011300 <OnTxDelayedTimerEvent+0x8c>)
 80112be:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	4b0d      	ldr	r3, [pc, #52]	@ (80112fc <OnTxDelayedTimerEvent+0x88>)
 80112c6:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80112ca:	4b0c      	ldr	r3, [pc, #48]	@ (80112fc <OnTxDelayedTimerEvent+0x88>)
 80112cc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80112d0:	4b0a      	ldr	r3, [pc, #40]	@ (80112fc <OnTxDelayedTimerEvent+0x88>)
 80112d2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80112d6:	4b09      	ldr	r3, [pc, #36]	@ (80112fc <OnTxDelayedTimerEvent+0x88>)
 80112d8:	2209      	movs	r2, #9
 80112da:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80112de:	2009      	movs	r0, #9
 80112e0:	f004 faae 	bl	8015840 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80112e4:	f001 ff84 	bl	80131f0 <StopRetransmission>
            break;
 80112e8:	e002      	b.n	80112f0 <OnTxDelayedTimerEvent+0x7c>
        return;
 80112ea:	bf00      	nop
 80112ec:	e000      	b.n	80112f0 <OnTxDelayedTimerEvent+0x7c>
            break;
 80112ee:	bf00      	nop
        }
    }
}
 80112f0:	3708      	adds	r7, #8
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	20000acc 	.word	0x20000acc
 80112fc:	20000764 	.word	0x20000764
 8011300:	20000c98 	.word	0x20000c98

08011304 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 801130c:	4b17      	ldr	r3, [pc, #92]	@ (801136c <OnRxWindow1TimerEvent+0x68>)
 801130e:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8011312:	4b16      	ldr	r3, [pc, #88]	@ (801136c <OnRxWindow1TimerEvent+0x68>)
 8011314:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011318:	4b15      	ldr	r3, [pc, #84]	@ (8011370 <OnRxWindow1TimerEvent+0x6c>)
 801131a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801131e:	b25a      	sxtb	r2, r3
 8011320:	4b12      	ldr	r3, [pc, #72]	@ (801136c <OnRxWindow1TimerEvent+0x68>)
 8011322:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011326:	4b12      	ldr	r3, [pc, #72]	@ (8011370 <OnRxWindow1TimerEvent+0x6c>)
 8011328:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801132c:	4b0f      	ldr	r3, [pc, #60]	@ (801136c <OnRxWindow1TimerEvent+0x68>)
 801132e:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011332:	4b0f      	ldr	r3, [pc, #60]	@ (8011370 <OnRxWindow1TimerEvent+0x6c>)
 8011334:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011338:	4b0c      	ldr	r3, [pc, #48]	@ (801136c <OnRxWindow1TimerEvent+0x68>)
 801133a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801133e:	4b0b      	ldr	r3, [pc, #44]	@ (801136c <OnRxWindow1TimerEvent+0x68>)
 8011340:	2200      	movs	r2, #0
 8011342:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8011346:	4b09      	ldr	r3, [pc, #36]	@ (801136c <OnRxWindow1TimerEvent+0x68>)
 8011348:	2200      	movs	r2, #0
 801134a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801134e:	4b08      	ldr	r3, [pc, #32]	@ (8011370 <OnRxWindow1TimerEvent+0x6c>)
 8011350:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011354:	4b05      	ldr	r3, [pc, #20]	@ (801136c <OnRxWindow1TimerEvent+0x68>)
 8011356:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801135a:	4906      	ldr	r1, [pc, #24]	@ (8011374 <OnRxWindow1TimerEvent+0x70>)
 801135c:	4806      	ldr	r0, [pc, #24]	@ (8011378 <OnRxWindow1TimerEvent+0x74>)
 801135e:	f001 fb6d 	bl	8012a3c <RxWindowSetup>
}
 8011362:	bf00      	nop
 8011364:	3708      	adds	r7, #8
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	20000764 	.word	0x20000764
 8011370:	20000c98 	.word	0x20000c98
 8011374:	20000b1c 	.word	0x20000b1c
 8011378:	20000ae4 	.word	0x20000ae4

0801137c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011384:	4b19      	ldr	r3, [pc, #100]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 8011386:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 801138a:	2b00      	cmp	r3, #0
 801138c:	d029      	beq.n	80113e2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801138e:	4b17      	ldr	r3, [pc, #92]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 8011390:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8011394:	4b15      	ldr	r3, [pc, #84]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 8011396:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801139a:	4b15      	ldr	r3, [pc, #84]	@ (80113f0 <OnRxWindow2TimerEvent+0x74>)
 801139c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801139e:	4a13      	ldr	r2, [pc, #76]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 80113a0:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80113a4:	4b12      	ldr	r3, [pc, #72]	@ (80113f0 <OnRxWindow2TimerEvent+0x74>)
 80113a6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80113aa:	4b10      	ldr	r3, [pc, #64]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 80113ac:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80113b0:	4b0f      	ldr	r3, [pc, #60]	@ (80113f0 <OnRxWindow2TimerEvent+0x74>)
 80113b2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80113b6:	4b0d      	ldr	r3, [pc, #52]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 80113b8:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80113bc:	4b0b      	ldr	r3, [pc, #44]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 80113be:	2200      	movs	r2, #0
 80113c0:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80113c4:	4b09      	ldr	r3, [pc, #36]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 80113c6:	2201      	movs	r2, #1
 80113c8:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80113cc:	4b08      	ldr	r3, [pc, #32]	@ (80113f0 <OnRxWindow2TimerEvent+0x74>)
 80113ce:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80113d2:	4b06      	ldr	r3, [pc, #24]	@ (80113ec <OnRxWindow2TimerEvent+0x70>)
 80113d4:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80113d8:	4906      	ldr	r1, [pc, #24]	@ (80113f4 <OnRxWindow2TimerEvent+0x78>)
 80113da:	4807      	ldr	r0, [pc, #28]	@ (80113f8 <OnRxWindow2TimerEvent+0x7c>)
 80113dc:	f001 fb2e 	bl	8012a3c <RxWindowSetup>
 80113e0:	e000      	b.n	80113e4 <OnRxWindow2TimerEvent+0x68>
        return;
 80113e2:	bf00      	nop
}
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	20000764 	.word	0x20000764
 80113f0:	20000c98 	.word	0x20000c98
 80113f4:	20000b34 	.word	0x20000b34
 80113f8:	20000afc 	.word	0x20000afc

080113fc <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011404:	4808      	ldr	r0, [pc, #32]	@ (8011428 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8011406:	f00c f837 	bl	801d478 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801140a:	4b08      	ldr	r3, [pc, #32]	@ (801142c <OnRetransmitTimeoutTimerEvent+0x30>)
 801140c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8011410:	2b00      	cmp	r3, #0
 8011412:	d003      	beq.n	801141c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8011414:	4b05      	ldr	r3, [pc, #20]	@ (801142c <OnRetransmitTimeoutTimerEvent+0x30>)
 8011416:	2201      	movs	r2, #1
 8011418:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 801141c:	f001 ff24 	bl	8013268 <OnMacProcessNotify>
}
 8011420:	bf00      	nop
 8011422:	3708      	adds	r7, #8
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}
 8011428:	20000b64 	.word	0x20000b64
 801142c:	20000764 	.word	0x20000764

08011430 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	60ba      	str	r2, [r7, #8]
 8011438:	607b      	str	r3, [r7, #4]
 801143a:	4603      	mov	r3, r0
 801143c:	73fb      	strb	r3, [r7, #15]
 801143e:	460b      	mov	r3, r1
 8011440:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d005      	beq.n	8011454 <GetFCntDown+0x24>
 8011448:	69bb      	ldr	r3, [r7, #24]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d002      	beq.n	8011454 <GetFCntDown+0x24>
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d101      	bne.n	8011458 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011454:	2309      	movs	r3, #9
 8011456:	e028      	b.n	80114aa <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011458:	7bfb      	ldrb	r3, [r7, #15]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d016      	beq.n	801148c <GetFCntDown+0x5c>
 801145e:	2b01      	cmp	r3, #1
 8011460:	d118      	bne.n	8011494 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8011462:	79bb      	ldrb	r3, [r7, #6]
 8011464:	2b01      	cmp	r3, #1
 8011466:	d10d      	bne.n	8011484 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8011468:	7bbb      	ldrb	r3, [r7, #14]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d002      	beq.n	8011474 <GetFCntDown+0x44>
 801146e:	7bbb      	ldrb	r3, [r7, #14]
 8011470:	2b03      	cmp	r3, #3
 8011472:	d103      	bne.n	801147c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8011474:	69bb      	ldr	r3, [r7, #24]
 8011476:	2202      	movs	r2, #2
 8011478:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801147a:	e00d      	b.n	8011498 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	2201      	movs	r2, #1
 8011480:	701a      	strb	r2, [r3, #0]
            break;
 8011482:	e009      	b.n	8011498 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	2203      	movs	r2, #3
 8011488:	701a      	strb	r2, [r3, #0]
            break;
 801148a:	e005      	b.n	8011498 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	2204      	movs	r2, #4
 8011490:	701a      	strb	r2, [r3, #0]
            break;
 8011492:	e001      	b.n	8011498 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011494:	2305      	movs	r3, #5
 8011496:	e008      	b.n	80114aa <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	7818      	ldrb	r0, [r3, #0]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	89db      	ldrh	r3, [r3, #14]
 80114a0:	69fa      	ldr	r2, [r7, #28]
 80114a2:	4619      	mov	r1, r3
 80114a4:	f004 fe0a 	bl	80160bc <LoRaMacCryptoGetFCntDown>
 80114a8:	4603      	mov	r3, r0
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
	...

080114b4 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80114b4:	b5b0      	push	{r4, r5, r7, lr}
 80114b6:	b084      	sub	sp, #16
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	4603      	mov	r3, r0
 80114bc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114be:	2303      	movs	r3, #3
 80114c0:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80114c2:	4b6e      	ldr	r3, [pc, #440]	@ (801167c <SwitchClass+0x1c8>)
 80114c4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80114c8:	2b02      	cmp	r3, #2
 80114ca:	f000 80bb 	beq.w	8011644 <SwitchClass+0x190>
 80114ce:	2b02      	cmp	r3, #2
 80114d0:	f300 80ce 	bgt.w	8011670 <SwitchClass+0x1bc>
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d003      	beq.n	80114e0 <SwitchClass+0x2c>
 80114d8:	2b01      	cmp	r3, #1
 80114da:	f000 80a5 	beq.w	8011628 <SwitchClass+0x174>
 80114de:	e0c7      	b.n	8011670 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80114e0:	79fb      	ldrb	r3, [r7, #7]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d109      	bne.n	80114fa <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80114e6:	4b65      	ldr	r3, [pc, #404]	@ (801167c <SwitchClass+0x1c8>)
 80114e8:	4a64      	ldr	r2, [pc, #400]	@ (801167c <SwitchClass+0x1c8>)
 80114ea:	3374      	adds	r3, #116	@ 0x74
 80114ec:	326c      	adds	r2, #108	@ 0x6c
 80114ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114f2:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80114f6:	2300      	movs	r3, #0
 80114f8:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80114fa:	79fb      	ldrb	r3, [r7, #7]
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	d10c      	bne.n	801151a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8011500:	79fb      	ldrb	r3, [r7, #7]
 8011502:	4618      	mov	r0, r3
 8011504:	f003 fcf8 	bl	8014ef8 <LoRaMacClassBSwitchClass>
 8011508:	4603      	mov	r3, r0
 801150a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 801150c:	7bfb      	ldrb	r3, [r7, #15]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d103      	bne.n	801151a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8011512:	4a5a      	ldr	r2, [pc, #360]	@ (801167c <SwitchClass+0x1c8>)
 8011514:	79fb      	ldrb	r3, [r7, #7]
 8011516:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 801151a:	79fb      	ldrb	r3, [r7, #7]
 801151c:	2b02      	cmp	r3, #2
 801151e:	f040 80a2 	bne.w	8011666 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011522:	4a56      	ldr	r2, [pc, #344]	@ (801167c <SwitchClass+0x1c8>)
 8011524:	79fb      	ldrb	r3, [r7, #7]
 8011526:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801152a:	4a55      	ldr	r2, [pc, #340]	@ (8011680 <SwitchClass+0x1cc>)
 801152c:	4b54      	ldr	r3, [pc, #336]	@ (8011680 <SwitchClass+0x1cc>)
 801152e:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8011532:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8011536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801153a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801153e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011542:	4b4f      	ldr	r3, [pc, #316]	@ (8011680 <SwitchClass+0x1cc>)
 8011544:	2202      	movs	r2, #2
 8011546:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801154a:	2300      	movs	r3, #0
 801154c:	73bb      	strb	r3, [r7, #14]
 801154e:	e05b      	b.n	8011608 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8011550:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011554:	4949      	ldr	r1, [pc, #292]	@ (801167c <SwitchClass+0x1c8>)
 8011556:	4613      	mov	r3, r2
 8011558:	005b      	lsls	r3, r3, #1
 801155a:	4413      	add	r3, r2
 801155c:	011b      	lsls	r3, r3, #4
 801155e:	440b      	add	r3, r1
 8011560:	33e9      	adds	r3, #233	@ 0xe9
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d049      	beq.n	80115fc <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8011568:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801156c:	4943      	ldr	r1, [pc, #268]	@ (801167c <SwitchClass+0x1c8>)
 801156e:	4613      	mov	r3, r2
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	4413      	add	r3, r2
 8011574:	011b      	lsls	r3, r3, #4
 8011576:	440b      	add	r3, r1
 8011578:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801157c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801157e:	2b02      	cmp	r3, #2
 8011580:	d13c      	bne.n	80115fc <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8011582:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011586:	493d      	ldr	r1, [pc, #244]	@ (801167c <SwitchClass+0x1c8>)
 8011588:	4613      	mov	r3, r2
 801158a:	005b      	lsls	r3, r3, #1
 801158c:	4413      	add	r3, r2
 801158e:	011b      	lsls	r3, r3, #4
 8011590:	440b      	add	r3, r1
 8011592:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4a38      	ldr	r2, [pc, #224]	@ (801167c <SwitchClass+0x1c8>)
 801159a:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 801159c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80115a0:	4936      	ldr	r1, [pc, #216]	@ (801167c <SwitchClass+0x1c8>)
 80115a2:	4613      	mov	r3, r2
 80115a4:	005b      	lsls	r3, r3, #1
 80115a6:	4413      	add	r3, r2
 80115a8:	011b      	lsls	r3, r3, #4
 80115aa:	440b      	add	r3, r1
 80115ac:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80115b0:	f993 3000 	ldrsb.w	r3, [r3]
 80115b4:	b2da      	uxtb	r2, r3
 80115b6:	4b31      	ldr	r3, [pc, #196]	@ (801167c <SwitchClass+0x1c8>)
 80115b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80115bc:	4b30      	ldr	r3, [pc, #192]	@ (8011680 <SwitchClass+0x1cc>)
 80115be:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 80115c2:	4b2f      	ldr	r3, [pc, #188]	@ (8011680 <SwitchClass+0x1cc>)
 80115c4:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80115c8:	4b2c      	ldr	r3, [pc, #176]	@ (801167c <SwitchClass+0x1c8>)
 80115ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115cc:	4a2c      	ldr	r2, [pc, #176]	@ (8011680 <SwitchClass+0x1cc>)
 80115ce:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115d2:	4b2a      	ldr	r3, [pc, #168]	@ (801167c <SwitchClass+0x1c8>)
 80115d4:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80115d8:	4b29      	ldr	r3, [pc, #164]	@ (8011680 <SwitchClass+0x1cc>)
 80115da:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80115de:	4b27      	ldr	r3, [pc, #156]	@ (801167c <SwitchClass+0x1c8>)
 80115e0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80115e4:	4b26      	ldr	r3, [pc, #152]	@ (8011680 <SwitchClass+0x1cc>)
 80115e6:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80115ea:	4b25      	ldr	r3, [pc, #148]	@ (8011680 <SwitchClass+0x1cc>)
 80115ec:	2203      	movs	r2, #3
 80115ee:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80115f2:	4b23      	ldr	r3, [pc, #140]	@ (8011680 <SwitchClass+0x1cc>)
 80115f4:	2201      	movs	r2, #1
 80115f6:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 80115fa:	e009      	b.n	8011610 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80115fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011600:	b2db      	uxtb	r3, r3
 8011602:	3301      	adds	r3, #1
 8011604:	b2db      	uxtb	r3, r3
 8011606:	73bb      	strb	r3, [r7, #14]
 8011608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801160c:	2b00      	cmp	r3, #0
 801160e:	dd9f      	ble.n	8011550 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8011610:	4b1b      	ldr	r3, [pc, #108]	@ (8011680 <SwitchClass+0x1cc>)
 8011612:	2200      	movs	r2, #0
 8011614:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8011618:	4b1a      	ldr	r3, [pc, #104]	@ (8011684 <SwitchClass+0x1d0>)
 801161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801161c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801161e:	f001 fa41 	bl	8012aa4 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8011622:	2300      	movs	r3, #0
 8011624:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8011626:	e01e      	b.n	8011666 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011628:	79fb      	ldrb	r3, [r7, #7]
 801162a:	4618      	mov	r0, r3
 801162c:	f003 fc64 	bl	8014ef8 <LoRaMacClassBSwitchClass>
 8011630:	4603      	mov	r3, r0
 8011632:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8011634:	7bfb      	ldrb	r3, [r7, #15]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d117      	bne.n	801166a <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801163a:	4a10      	ldr	r2, [pc, #64]	@ (801167c <SwitchClass+0x1c8>)
 801163c:	79fb      	ldrb	r3, [r7, #7]
 801163e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 8011642:	e012      	b.n	801166a <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011644:	79fb      	ldrb	r3, [r7, #7]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d111      	bne.n	801166e <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 801164a:	4b0d      	ldr	r3, [pc, #52]	@ (8011680 <SwitchClass+0x1cc>)
 801164c:	2206      	movs	r2, #6
 801164e:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011652:	4a0a      	ldr	r2, [pc, #40]	@ (801167c <SwitchClass+0x1c8>)
 8011654:	79fb      	ldrb	r3, [r7, #7]
 8011656:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801165a:	4b0a      	ldr	r3, [pc, #40]	@ (8011684 <SwitchClass+0x1d0>)
 801165c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801165e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8011660:	2300      	movs	r3, #0
 8011662:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8011664:	e003      	b.n	801166e <SwitchClass+0x1ba>
            break;
 8011666:	bf00      	nop
 8011668:	e002      	b.n	8011670 <SwitchClass+0x1bc>
            break;
 801166a:	bf00      	nop
 801166c:	e000      	b.n	8011670 <SwitchClass+0x1bc>
            break;
 801166e:	bf00      	nop
        }
    }

    return status;
 8011670:	7bfb      	ldrb	r3, [r7, #15]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bdb0      	pop	{r4, r5, r7, pc}
 801167a:	bf00      	nop
 801167c:	20000c98 	.word	0x20000c98
 8011680:	20000764 	.word	0x20000764
 8011684:	0801ff20 	.word	0x0801ff20

08011688 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b086      	sub	sp, #24
 801168c:	af00      	add	r7, sp, #0
 801168e:	4603      	mov	r3, r0
 8011690:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011692:	4b10      	ldr	r3, [pc, #64]	@ (80116d4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011694:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011698:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801169a:	79fb      	ldrb	r3, [r7, #7]
 801169c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801169e:	230d      	movs	r3, #13
 80116a0:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80116a2:	4b0c      	ldr	r3, [pc, #48]	@ (80116d4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80116a4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d001      	beq.n	80116b0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80116ac:	230e      	movs	r3, #14
 80116ae:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116b0:	4b08      	ldr	r3, [pc, #32]	@ (80116d4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80116b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116b6:	f107 0210 	add.w	r2, r7, #16
 80116ba:	4611      	mov	r1, r2
 80116bc:	4618      	mov	r0, r3
 80116be:	f005 fb62 	bl	8016d86 <RegionGetPhyParam>
 80116c2:	4603      	mov	r3, r0
 80116c4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	b2db      	uxtb	r3, r3
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3718      	adds	r7, #24
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	bf00      	nop
 80116d4:	20000c98 	.word	0x20000c98

080116d8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
 80116de:	4603      	mov	r3, r0
 80116e0:	71fb      	strb	r3, [r7, #7]
 80116e2:	460b      	mov	r3, r1
 80116e4:	71bb      	strb	r3, [r7, #6]
 80116e6:	4613      	mov	r3, r2
 80116e8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80116ee:	2300      	movs	r3, #0
 80116f0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80116f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7ff ffc6 	bl	8011688 <GetMaxAppPayloadWithoutFOptsLength>
 80116fc:	4603      	mov	r3, r0
 80116fe:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011700:	79fb      	ldrb	r3, [r7, #7]
 8011702:	b29a      	uxth	r2, r3
 8011704:	797b      	ldrb	r3, [r7, #5]
 8011706:	b29b      	uxth	r3, r3
 8011708:	4413      	add	r3, r2
 801170a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 801170c:	89ba      	ldrh	r2, [r7, #12]
 801170e:	89fb      	ldrh	r3, [r7, #14]
 8011710:	429a      	cmp	r2, r3
 8011712:	d804      	bhi.n	801171e <ValidatePayloadLength+0x46>
 8011714:	89bb      	ldrh	r3, [r7, #12]
 8011716:	2bff      	cmp	r3, #255	@ 0xff
 8011718:	d801      	bhi.n	801171e <ValidatePayloadLength+0x46>
    {
        return true;
 801171a:	2301      	movs	r3, #1
 801171c:	e000      	b.n	8011720 <ValidatePayloadLength+0x48>
    }
    return false;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8011728:	b590      	push	{r4, r7, lr}
 801172a:	b0a5      	sub	sp, #148	@ 0x94
 801172c:	af02      	add	r7, sp, #8
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	4608      	mov	r0, r1
 8011732:	4611      	mov	r1, r2
 8011734:	461a      	mov	r2, r3
 8011736:	4603      	mov	r3, r0
 8011738:	70fb      	strb	r3, [r7, #3]
 801173a:	460b      	mov	r3, r1
 801173c:	70bb      	strb	r3, [r7, #2]
 801173e:	4613      	mov	r3, r2
 8011740:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8011742:	2300      	movs	r3, #0
 8011744:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8011748:	2300      	movs	r3, #0
 801174a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801174e:	2300      	movs	r3, #0
 8011750:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8011754:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8011758:	2b00      	cmp	r3, #0
 801175a:	f000 84c3 	beq.w	80120e4 <ProcessMacCommands+0x9bc>
 801175e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8011762:	2b01      	cmp	r3, #1
 8011764:	f040 84c4 	bne.w	80120f0 <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8011768:	f000 bcbc 	b.w	80120e4 <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801176c:	78fb      	ldrb	r3, [r7, #3]
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	4413      	add	r3, r2
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	4618      	mov	r0, r3
 8011776:	f003 febf 	bl	80154f8 <LoRaMacCommandsGetCmdSize>
 801177a:	4603      	mov	r3, r0
 801177c:	461a      	mov	r2, r3
 801177e:	78fb      	ldrb	r3, [r7, #3]
 8011780:	441a      	add	r2, r3
 8011782:	78bb      	ldrb	r3, [r7, #2]
 8011784:	429a      	cmp	r2, r3
 8011786:	f300 84b5 	bgt.w	80120f4 <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801178a:	78fb      	ldrb	r3, [r7, #3]
 801178c:	1c5a      	adds	r2, r3, #1
 801178e:	70fa      	strb	r2, [r7, #3]
 8011790:	461a      	mov	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4413      	add	r3, r2
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	3b02      	subs	r3, #2
 801179a:	2b11      	cmp	r3, #17
 801179c:	f200 84ac 	bhi.w	80120f8 <ProcessMacCommands+0x9d0>
 80117a0:	a201      	add	r2, pc, #4	@ (adr r2, 80117a8 <ProcessMacCommands+0x80>)
 80117a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117a6:	bf00      	nop
 80117a8:	080117f1 	.word	0x080117f1
 80117ac:	08011833 	.word	0x08011833
 80117b0:	080119af 	.word	0x080119af
 80117b4:	080119ed 	.word	0x080119ed
 80117b8:	08011af9 	.word	0x08011af9
 80117bc:	08011b49 	.word	0x08011b49
 80117c0:	08011c05 	.word	0x08011c05
 80117c4:	08011c5b 	.word	0x08011c5b
 80117c8:	08011d41 	.word	0x08011d41
 80117cc:	080120f9 	.word	0x080120f9
 80117d0:	080120f9 	.word	0x080120f9
 80117d4:	08011de9 	.word	0x08011de9
 80117d8:	080120f9 	.word	0x080120f9
 80117dc:	080120f9 	.word	0x080120f9
 80117e0:	08011f09 	.word	0x08011f09
 80117e4:	08011f3d 	.word	0x08011f3d
 80117e8:	08011fcd 	.word	0x08011fcd
 80117ec:	08012045 	.word	0x08012045
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80117f0:	2005      	movs	r0, #5
 80117f2:	f004 f859 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f000 8466 	beq.w	80120ca <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80117fe:	2105      	movs	r1, #5
 8011800:	2000      	movs	r0, #0
 8011802:	f003 ffc5 	bl	8015790 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011806:	78fb      	ldrb	r3, [r7, #3]
 8011808:	1c5a      	adds	r2, r3, #1
 801180a:	70fa      	strb	r2, [r7, #3]
 801180c:	461a      	mov	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4413      	add	r3, r2
 8011812:	781a      	ldrb	r2, [r3, #0]
 8011814:	4bb5      	ldr	r3, [pc, #724]	@ (8011aec <ProcessMacCommands+0x3c4>)
 8011816:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801181a:	78fb      	ldrb	r3, [r7, #3]
 801181c:	1c5a      	adds	r2, r3, #1
 801181e:	70fa      	strb	r2, [r7, #3]
 8011820:	461a      	mov	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4413      	add	r3, r2
 8011826:	781a      	ldrb	r2, [r3, #0]
 8011828:	4bb0      	ldr	r3, [pc, #704]	@ (8011aec <ProcessMacCommands+0x3c4>)
 801182a:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 801182e:	f000 bc4c 	b.w	80120ca <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8011832:	2300      	movs	r3, #0
 8011834:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8011838:	2300      	movs	r3, #0
 801183a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 801183e:	2300      	movs	r3, #0
 8011840:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8011844:	2300      	movs	r3, #0
 8011846:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 801184a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801184e:	f083 0301 	eor.w	r3, r3, #1
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b00      	cmp	r3, #0
 8011856:	f000 80a6 	beq.w	80119a6 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 801185a:	2301      	movs	r3, #1
 801185c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8011860:	78fb      	ldrb	r3, [r7, #3]
 8011862:	3b01      	subs	r3, #1
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	4413      	add	r3, r2
 8011868:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801186a:	4ba1      	ldr	r3, [pc, #644]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 801186c:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011870:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011874:	4b9e      	ldr	r3, [pc, #632]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011876:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801187a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801187e:	4b9c      	ldr	r3, [pc, #624]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011880:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011884:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011888:	4b99      	ldr	r3, [pc, #612]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 801188a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801188e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011892:	4b97      	ldr	r3, [pc, #604]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011894:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011898:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 801189c:	4b94      	ldr	r3, [pc, #592]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 801189e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80118a2:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80118a4:	4b92      	ldr	r3, [pc, #584]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 80118a6:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d008      	beq.n	80118c0 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80118ae:	78ba      	ldrb	r2, [r7, #2]
 80118b0:	78fb      	ldrb	r3, [r7, #3]
 80118b2:	1ad3      	subs	r3, r2, r3
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	3301      	adds	r3, #1
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80118be:	e002      	b.n	80118c6 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80118c0:	2305      	movs	r3, #5
 80118c2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80118c6:	4b8a      	ldr	r3, [pc, #552]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 80118c8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80118cc:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 80118d0:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 80118d4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80118d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80118dc:	9301      	str	r3, [sp, #4]
 80118de:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80118e2:	9300      	str	r3, [sp, #0]
 80118e4:	4623      	mov	r3, r4
 80118e6:	f005 fb0b 	bl	8016f00 <RegionLinkAdrReq>
 80118ea:	4603      	mov	r3, r0
 80118ec:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80118f0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80118f4:	f003 0307 	and.w	r3, r3, #7
 80118f8:	2b07      	cmp	r3, #7
 80118fa:	d119      	bne.n	8011930 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80118fc:	4b7c      	ldr	r3, [pc, #496]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 80118fe:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011902:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8011906:	429a      	cmp	r2, r3
 8011908:	da03      	bge.n	8011912 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 801190a:	4b79      	ldr	r3, [pc, #484]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 801190c:	2201      	movs	r2, #1
 801190e:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8011912:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8011916:	4b76      	ldr	r3, [pc, #472]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011918:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801191c:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8011920:	4b73      	ldr	r3, [pc, #460]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011922:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8011926:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 801192a:	4b71      	ldr	r3, [pc, #452]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 801192c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011930:	2300      	movs	r3, #0
 8011932:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8011936:	e00b      	b.n	8011950 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8011938:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 801193c:	2201      	movs	r2, #1
 801193e:	4619      	mov	r1, r3
 8011940:	2003      	movs	r0, #3
 8011942:	f003 fc79 	bl	8015238 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011946:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801194a:	3301      	adds	r3, #1
 801194c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8011950:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8011954:	4a67      	ldr	r2, [pc, #412]	@ (8011af4 <ProcessMacCommands+0x3cc>)
 8011956:	fba2 2303 	umull	r2, r3, r2, r3
 801195a:	089b      	lsrs	r3, r3, #2
 801195c:	b2db      	uxtb	r3, r3
 801195e:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8011962:	429a      	cmp	r2, r3
 8011964:	d3e8      	bcc.n	8011938 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8011966:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801196a:	78fb      	ldrb	r3, [r7, #3]
 801196c:	4413      	add	r3, r2
 801196e:	b2db      	uxtb	r3, r3
 8011970:	3b01      	subs	r3, #1
 8011972:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8011974:	78fa      	ldrb	r2, [r7, #3]
 8011976:	78bb      	ldrb	r3, [r7, #2]
 8011978:	429a      	cmp	r2, r3
 801197a:	d20a      	bcs.n	8011992 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 801197c:	78fb      	ldrb	r3, [r7, #3]
 801197e:	1c5a      	adds	r2, r3, #1
 8011980:	70fa      	strb	r2, [r7, #3]
 8011982:	461a      	mov	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	4413      	add	r3, r2
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	2b03      	cmp	r3, #3
 801198c:	f43f af68 	beq.w	8011860 <ProcessMacCommands+0x138>
 8011990:	e000      	b.n	8011994 <ProcessMacCommands+0x26c>
                            break;
 8011992:	bf00      	nop

                    if( macIndex < commandsSize )
 8011994:	78fa      	ldrb	r2, [r7, #3]
 8011996:	78bb      	ldrb	r3, [r7, #2]
 8011998:	429a      	cmp	r2, r3
 801199a:	f080 8398 	bcs.w	80120ce <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 801199e:	78fb      	ldrb	r3, [r7, #3]
 80119a0:	3b01      	subs	r3, #1
 80119a2:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80119a4:	e393      	b.n	80120ce <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 80119a6:	78fb      	ldrb	r3, [r7, #3]
 80119a8:	3304      	adds	r3, #4
 80119aa:	70fb      	strb	r3, [r7, #3]
                break;
 80119ac:	e38f      	b.n	80120ce <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80119ae:	78fb      	ldrb	r3, [r7, #3]
 80119b0:	1c5a      	adds	r2, r3, #1
 80119b2:	70fa      	strb	r2, [r7, #3]
 80119b4:	461a      	mov	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	4413      	add	r3, r2
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	f003 030f 	and.w	r3, r3, #15
 80119c0:	b2da      	uxtb	r2, r3
 80119c2:	4b4b      	ldr	r3, [pc, #300]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 80119c4:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80119c8:	4b49      	ldr	r3, [pc, #292]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 80119ca:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80119ce:	461a      	mov	r2, r3
 80119d0:	2301      	movs	r3, #1
 80119d2:	4093      	lsls	r3, r2
 80119d4:	b29a      	uxth	r2, r3
 80119d6:	4b46      	ldr	r3, [pc, #280]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 80119d8:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80119dc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80119e0:	2200      	movs	r2, #0
 80119e2:	4619      	mov	r1, r3
 80119e4:	2004      	movs	r0, #4
 80119e6:	f003 fc27 	bl	8015238 <LoRaMacCommandsAddCmd>
                break;
 80119ea:	e37b      	b.n	80120e4 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80119ec:	2307      	movs	r3, #7
 80119ee:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80119f2:	78fb      	ldrb	r3, [r7, #3]
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	4413      	add	r3, r2
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	091b      	lsrs	r3, r3, #4
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	b25b      	sxtb	r3, r3
 8011a00:	f003 0307 	and.w	r3, r3, #7
 8011a04:	b25b      	sxtb	r3, r3
 8011a06:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8011a0a:	78fb      	ldrb	r3, [r7, #3]
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	4413      	add	r3, r2
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	b25b      	sxtb	r3, r3
 8011a14:	f003 030f 	and.w	r3, r3, #15
 8011a18:	b25b      	sxtb	r3, r3
 8011a1a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8011a1e:	78fb      	ldrb	r3, [r7, #3]
 8011a20:	3301      	adds	r3, #1
 8011a22:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 8011a24:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8011a28:	2b0f      	cmp	r3, #15
 8011a2a:	d105      	bne.n	8011a38 <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 8011a2c:	4b30      	ldr	r3, [pc, #192]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011a2e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011a32:	b25b      	sxtb	r3, r3
 8011a34:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011a38:	78fb      	ldrb	r3, [r7, #3]
 8011a3a:	1c5a      	adds	r2, r3, #1
 8011a3c:	70fa      	strb	r2, [r7, #3]
 8011a3e:	461a      	mov	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	4413      	add	r3, r2
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011a48:	78fb      	ldrb	r3, [r7, #3]
 8011a4a:	1c5a      	adds	r2, r3, #1
 8011a4c:	70fa      	strb	r2, [r7, #3]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	4413      	add	r3, r2
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	021a      	lsls	r2, r3, #8
 8011a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011a5e:	78fb      	ldrb	r3, [r7, #3]
 8011a60:	1c5a      	adds	r2, r3, #1
 8011a62:	70fa      	strb	r2, [r7, #3]
 8011a64:	461a      	mov	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	4413      	add	r3, r2
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	041a      	lsls	r2, r3, #16
 8011a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a70:	4313      	orrs	r3, r2
 8011a72:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8011a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a76:	2264      	movs	r2, #100	@ 0x64
 8011a78:	fb02 f303 	mul.w	r3, r2, r3
 8011a7c:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8011a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011a80:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a84:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8011a88:	4611      	mov	r1, r2
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f005 fa52 	bl	8016f34 <RegionRxParamSetupReq>
 8011a90:	4603      	mov	r3, r0
 8011a92:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8011a96:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011a9a:	f003 0307 	and.w	r3, r3, #7
 8011a9e:	2b07      	cmp	r3, #7
 8011aa0:	d117      	bne.n	8011ad2 <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011aa2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8011aa6:	b2da      	uxtb	r2, r3
 8011aa8:	4b11      	ldr	r3, [pc, #68]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011aaa:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8011aae:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8011aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011abc:	4a0c      	ldr	r2, [pc, #48]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011abe:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8011ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011ac4:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8011ac6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	4b08      	ldr	r3, [pc, #32]	@ (8011af0 <ProcessMacCommands+0x3c8>)
 8011ace:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 8011ad2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011ad6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8011ada:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011ade:	2201      	movs	r2, #1
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	2005      	movs	r0, #5
 8011ae4:	f003 fba8 	bl	8015238 <LoRaMacCommandsAddCmd>
                break;
 8011ae8:	e2fc      	b.n	80120e4 <ProcessMacCommands+0x9bc>
 8011aea:	bf00      	nop
 8011aec:	20000764 	.word	0x20000764
 8011af0:	20000c98 	.word	0x20000c98
 8011af4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8011af8:	23ff      	movs	r3, #255	@ 0xff
 8011afa:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8011afe:	4bb7      	ldr	r3, [pc, #732]	@ (8011ddc <ProcessMacCommands+0x6b4>)
 8011b00:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d00d      	beq.n	8011b24 <ProcessMacCommands+0x3fc>
 8011b08:	4bb4      	ldr	r3, [pc, #720]	@ (8011ddc <ProcessMacCommands+0x6b4>)
 8011b0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d007      	beq.n	8011b24 <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011b14:	4bb1      	ldr	r3, [pc, #708]	@ (8011ddc <ProcessMacCommands+0x6b4>)
 8011b16:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	4798      	blx	r3
 8011b1e:	4603      	mov	r3, r0
 8011b20:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011b24:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8011b28:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011b2c:	787b      	ldrb	r3, [r7, #1]
 8011b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011b38:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011b3c:	2202      	movs	r2, #2
 8011b3e:	4619      	mov	r1, r3
 8011b40:	2006      	movs	r0, #6
 8011b42:	f003 fb79 	bl	8015238 <LoRaMacCommandsAddCmd>
                break;
 8011b46:	e2cd      	b.n	80120e4 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011b48:	2303      	movs	r3, #3
 8011b4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8011b4e:	78fb      	ldrb	r3, [r7, #3]
 8011b50:	1c5a      	adds	r2, r3, #1
 8011b52:	70fa      	strb	r2, [r7, #3]
 8011b54:	461a      	mov	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	4413      	add	r3, r2
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	b25b      	sxtb	r3, r3
 8011b5e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8011b62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011b66:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011b68:	78fb      	ldrb	r3, [r7, #3]
 8011b6a:	1c5a      	adds	r2, r3, #1
 8011b6c:	70fa      	strb	r2, [r7, #3]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	4413      	add	r3, r2
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011b78:	78fb      	ldrb	r3, [r7, #3]
 8011b7a:	1c5a      	adds	r2, r3, #1
 8011b7c:	70fa      	strb	r2, [r7, #3]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	4413      	add	r3, r2
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	021a      	lsls	r2, r3, #8
 8011b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011b8e:	78fb      	ldrb	r3, [r7, #3]
 8011b90:	1c5a      	adds	r2, r3, #1
 8011b92:	70fa      	strb	r2, [r7, #3]
 8011b94:	461a      	mov	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	4413      	add	r3, r2
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	041a      	lsls	r2, r3, #16
 8011b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8011ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ba6:	2264      	movs	r2, #100	@ 0x64
 8011ba8:	fb02 f303 	mul.w	r3, r2, r3
 8011bac:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8011bb2:	78fb      	ldrb	r3, [r7, #3]
 8011bb4:	1c5a      	adds	r2, r3, #1
 8011bb6:	70fa      	strb	r2, [r7, #3]
 8011bb8:	461a      	mov	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	b25b      	sxtb	r3, r3
 8011bc2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8011bc6:	4b86      	ldr	r3, [pc, #536]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011bc8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011bcc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8011bd0:	4611      	mov	r1, r2
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f005 f9c1 	bl	8016f5a <RegionNewChannelReq>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	b2db      	uxtb	r3, r3
 8011bdc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8011be0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011be4:	b25b      	sxtb	r3, r3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f2c0 8273 	blt.w	80120d2 <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 8011bec:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011bf0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011bf4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	2007      	movs	r0, #7
 8011bfe:	f003 fb1b 	bl	8015238 <LoRaMacCommandsAddCmd>
                }
                break;
 8011c02:	e266      	b.n	80120d2 <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011c04:	78fb      	ldrb	r3, [r7, #3]
 8011c06:	1c5a      	adds	r2, r3, #1
 8011c08:	70fa      	strb	r2, [r7, #3]
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	4413      	add	r3, r2
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	f003 030f 	and.w	r3, r3, #15
 8011c16:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8011c1a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d104      	bne.n	8011c2c <ProcessMacCommands+0x504>
                {
                    delay++;
 8011c22:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011c26:	3301      	adds	r3, #1
 8011c28:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8011c2c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011c30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011c34:	fb02 f303 	mul.w	r3, r2, r3
 8011c38:	461a      	mov	r2, r3
 8011c3a:	4b69      	ldr	r3, [pc, #420]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011c3c:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011c3e:	4b68      	ldr	r3, [pc, #416]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c42:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8011c46:	4a66      	ldr	r2, [pc, #408]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011c48:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8011c4a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011c4e:	2200      	movs	r2, #0
 8011c50:	4619      	mov	r1, r3
 8011c52:	2008      	movs	r0, #8
 8011c54:	f003 faf0 	bl	8015238 <LoRaMacCommandsAddCmd>
                break;
 8011c58:	e244      	b.n	80120e4 <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8011c5a:	78fb      	ldrb	r3, [r7, #3]
 8011c5c:	1c5a      	adds	r2, r3, #1
 8011c5e:	70fa      	strb	r2, [r7, #3]
 8011c60:	461a      	mov	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4413      	add	r3, r2
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8011c72:	2300      	movs	r3, #0
 8011c74:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011c78:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8011c7c:	f003 0320 	and.w	r3, r3, #32
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d002      	beq.n	8011c8a <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011c84:	2301      	movs	r3, #1
 8011c86:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8011c8a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8011c8e:	f003 0310 	and.w	r3, r3, #16
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d002      	beq.n	8011c9c <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011c96:	2301      	movs	r3, #1
 8011c98:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011c9c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8011ca0:	f003 030f 	and.w	r3, r3, #15
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8011caa:	4b4d      	ldr	r3, [pc, #308]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011cac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cb0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8011cb4:	4611      	mov	r1, r2
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f005 f962 	bl	8016f80 <RegionTxParamSetupReq>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc2:	f000 8208 	beq.w	80120d6 <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011cc6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8011cca:	4b45      	ldr	r3, [pc, #276]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011ccc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011cd0:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8011cd4:	4b42      	ldr	r3, [pc, #264]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011cd6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011cda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8011cde:	461a      	mov	r2, r3
 8011ce0:	4b40      	ldr	r3, [pc, #256]	@ (8011de4 <ProcessMacCommands+0x6bc>)
 8011ce2:	5c9b      	ldrb	r3, [r3, r2]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ee ffe9 	bl	8000cbc <__aeabi_ui2f>
 8011cea:	4603      	mov	r3, r0
 8011cec:	4a3c      	ldr	r2, [pc, #240]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011cee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011cf2:	2302      	movs	r3, #2
 8011cf4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011cf8:	4b39      	ldr	r3, [pc, #228]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011cfa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011cfe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d02:	4b37      	ldr	r3, [pc, #220]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011d04:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d08:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f005 f839 	bl	8016d86 <RegionGetPhyParam>
 8011d14:	4603      	mov	r3, r0
 8011d16:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d1a:	b25a      	sxtb	r2, r3
 8011d1c:	4b30      	ldr	r3, [pc, #192]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011d1e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011d22:	4293      	cmp	r3, r2
 8011d24:	bfb8      	it	lt
 8011d26:	4613      	movlt	r3, r2
 8011d28:	b25a      	sxtb	r2, r3
 8011d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011d2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011d30:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011d34:	2200      	movs	r2, #0
 8011d36:	4619      	mov	r1, r3
 8011d38:	2009      	movs	r0, #9
 8011d3a:	f003 fa7d 	bl	8015238 <LoRaMacCommandsAddCmd>
                }
                break;
 8011d3e:	e1ca      	b.n	80120d6 <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011d40:	2303      	movs	r3, #3
 8011d42:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011d46:	78fb      	ldrb	r3, [r7, #3]
 8011d48:	1c5a      	adds	r2, r3, #1
 8011d4a:	70fa      	strb	r2, [r7, #3]
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4413      	add	r3, r2
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011d58:	78fb      	ldrb	r3, [r7, #3]
 8011d5a:	1c5a      	adds	r2, r3, #1
 8011d5c:	70fa      	strb	r2, [r7, #3]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	4413      	add	r3, r2
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011d68:	78fb      	ldrb	r3, [r7, #3]
 8011d6a:	1c5a      	adds	r2, r3, #1
 8011d6c:	70fa      	strb	r2, [r7, #3]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	4413      	add	r3, r2
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	021a      	lsls	r2, r3, #8
 8011d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7a:	4313      	orrs	r3, r2
 8011d7c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011d7e:	78fb      	ldrb	r3, [r7, #3]
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	70fa      	strb	r2, [r7, #3]
 8011d84:	461a      	mov	r2, r3
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	4413      	add	r3, r2
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	041a      	lsls	r2, r3, #16
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d90:	4313      	orrs	r3, r2
 8011d92:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8011d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d96:	2264      	movs	r2, #100	@ 0x64
 8011d98:	fb02 f303 	mul.w	r3, r2, r3
 8011d9c:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8011d9e:	4b10      	ldr	r3, [pc, #64]	@ (8011de0 <ProcessMacCommands+0x6b8>)
 8011da0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011da4:	f107 0220 	add.w	r2, r7, #32
 8011da8:	4611      	mov	r1, r2
 8011daa:	4618      	mov	r0, r3
 8011dac:	f005 f8fb 	bl	8016fa6 <RegionDlChannelReq>
 8011db0:	4603      	mov	r3, r0
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8011db8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011dbc:	b25b      	sxtb	r3, r3
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	f2c0 818b 	blt.w	80120da <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 8011dc4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011dc8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011dcc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	200a      	movs	r0, #10
 8011dd6:	f003 fa2f 	bl	8015238 <LoRaMacCommandsAddCmd>
                }
                break;
 8011dda:	e17e      	b.n	80120da <ProcessMacCommands+0x9b2>
 8011ddc:	20000764 	.word	0x20000764
 8011de0:	20000c98 	.word	0x20000c98
 8011de4:	0801fed8 	.word	0x0801fed8
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011de8:	2009      	movs	r0, #9
 8011dea:	f003 fd5d 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	f000 8084 	beq.w	8011efe <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011df6:	2109      	movs	r1, #9
 8011df8:	2000      	movs	r0, #0
 8011dfa:	f003 fcc9 	bl	8015790 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8011dfe:	f107 0318 	add.w	r3, r7, #24
 8011e02:	2200      	movs	r2, #0
 8011e04:	601a      	str	r2, [r3, #0]
 8011e06:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011e08:	f107 0310 	add.w	r3, r7, #16
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011e12:	f107 0308 	add.w	r3, r7, #8
 8011e16:	2200      	movs	r2, #0
 8011e18:	601a      	str	r2, [r3, #0]
 8011e1a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011e1c:	78fb      	ldrb	r3, [r7, #3]
 8011e1e:	1c5a      	adds	r2, r3, #1
 8011e20:	70fa      	strb	r2, [r7, #3]
 8011e22:	461a      	mov	r2, r3
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	4413      	add	r3, r2
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011e2c:	78fb      	ldrb	r3, [r7, #3]
 8011e2e:	1c5a      	adds	r2, r3, #1
 8011e30:	70fa      	strb	r2, [r7, #3]
 8011e32:	461a      	mov	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	4413      	add	r3, r2
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	021a      	lsls	r2, r3, #8
 8011e3c:	69bb      	ldr	r3, [r7, #24]
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011e42:	78fb      	ldrb	r3, [r7, #3]
 8011e44:	1c5a      	adds	r2, r3, #1
 8011e46:	70fa      	strb	r2, [r7, #3]
 8011e48:	461a      	mov	r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	4413      	add	r3, r2
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	041a      	lsls	r2, r3, #16
 8011e52:	69bb      	ldr	r3, [r7, #24]
 8011e54:	4313      	orrs	r3, r2
 8011e56:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011e58:	78fb      	ldrb	r3, [r7, #3]
 8011e5a:	1c5a      	adds	r2, r3, #1
 8011e5c:	70fa      	strb	r2, [r7, #3]
 8011e5e:	461a      	mov	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	4413      	add	r3, r2
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	061a      	lsls	r2, r3, #24
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	4313      	orrs	r3, r2
 8011e6c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011e6e:	78fb      	ldrb	r3, [r7, #3]
 8011e70:	1c5a      	adds	r2, r3, #1
 8011e72:	70fa      	strb	r2, [r7, #3]
 8011e74:	461a      	mov	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	4413      	add	r3, r2
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	b21b      	sxth	r3, r3
 8011e7e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011e80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011e84:	461a      	mov	r2, r3
 8011e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011e8a:	fb02 f303 	mul.w	r3, r2, r3
 8011e8e:	121b      	asrs	r3, r3, #8
 8011e90:	b21b      	sxth	r3, r3
 8011e92:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011e94:	f107 0310 	add.w	r3, r7, #16
 8011e98:	f107 0218 	add.w	r2, r7, #24
 8011e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ea0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011ea4:	693a      	ldr	r2, [r7, #16]
 8011ea6:	4b96      	ldr	r3, [pc, #600]	@ (8012100 <ProcessMacCommands+0x9d8>)
 8011ea8:	4413      	add	r3, r2
 8011eaa:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011eac:	f107 0308 	add.w	r3, r7, #8
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f00a fde1 	bl	801ca78 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011eb6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8011eba:	4b92      	ldr	r3, [pc, #584]	@ (8012104 <ProcessMacCommands+0x9dc>)
 8011ebc:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8011ec0:	9200      	str	r2, [sp, #0]
 8011ec2:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 8011ec6:	f107 0210 	add.w	r2, r7, #16
 8011eca:	ca06      	ldmia	r2, {r1, r2}
 8011ecc:	f00a fd6d 	bl	801c9aa <SysTimeSub>
 8011ed0:	f107 0010 	add.w	r0, r7, #16
 8011ed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011ed6:	9300      	str	r3, [sp, #0]
 8011ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011eda:	f107 0208 	add.w	r2, r7, #8
 8011ede:	ca06      	ldmia	r2, {r1, r2}
 8011ee0:	f00a fd2a 	bl	801c938 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011ee4:	f107 0310 	add.w	r3, r7, #16
 8011ee8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011eec:	f00a fd96 	bl	801ca1c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011ef0:	f003 f840 	bl	8014f74 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011ef4:	4b83      	ldr	r3, [pc, #524]	@ (8012104 <ProcessMacCommands+0x9dc>)
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8011efc:	e0f2      	b.n	80120e4 <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011efe:	4b81      	ldr	r3, [pc, #516]	@ (8012104 <ProcessMacCommands+0x9dc>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 8011f06:	e0ed      	b.n	80120e4 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011f08:	200c      	movs	r0, #12
 8011f0a:	f003 fccd 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f000 80e4 	beq.w	80120de <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011f16:	210c      	movs	r1, #12
 8011f18:	2000      	movs	r0, #0
 8011f1a:	f003 fc39 	bl	8015790 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011f1e:	4b79      	ldr	r3, [pc, #484]	@ (8012104 <ProcessMacCommands+0x9dc>)
 8011f20:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011f24:	2b04      	cmp	r3, #4
 8011f26:	f000 80da 	beq.w	80120de <ProcessMacCommands+0x9b6>
 8011f2a:	4b76      	ldr	r3, [pc, #472]	@ (8012104 <ProcessMacCommands+0x9dc>)
 8011f2c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011f30:	2b05      	cmp	r3, #5
 8011f32:	f000 80d4 	beq.w	80120de <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011f36:	f002 fffe 	bl	8014f36 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011f3a:	e0d0      	b.n	80120de <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011f3c:	2303      	movs	r3, #3
 8011f3e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8011f42:	2300      	movs	r3, #0
 8011f44:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011f46:	78fb      	ldrb	r3, [r7, #3]
 8011f48:	1c5a      	adds	r2, r3, #1
 8011f4a:	70fa      	strb	r2, [r7, #3]
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4413      	add	r3, r2
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011f56:	78fb      	ldrb	r3, [r7, #3]
 8011f58:	1c5a      	adds	r2, r3, #1
 8011f5a:	70fa      	strb	r2, [r7, #3]
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	4413      	add	r3, r2
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	021b      	lsls	r3, r3, #8
 8011f66:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011f6c:	78fb      	ldrb	r3, [r7, #3]
 8011f6e:	1c5a      	adds	r2, r3, #1
 8011f70:	70fa      	strb	r2, [r7, #3]
 8011f72:	461a      	mov	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	4413      	add	r3, r2
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	041b      	lsls	r3, r3, #16
 8011f7c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011f7e:	4313      	orrs	r3, r2
 8011f80:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8011f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f84:	2264      	movs	r2, #100	@ 0x64
 8011f86:	fb02 f303 	mul.w	r3, r2, r3
 8011f8a:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011f8c:	78fb      	ldrb	r3, [r7, #3]
 8011f8e:	1c5a      	adds	r2, r3, #1
 8011f90:	70fa      	strb	r2, [r7, #3]
 8011f92:	461a      	mov	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	4413      	add	r3, r2
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	f003 030f 	and.w	r3, r3, #15
 8011f9e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011fa2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011fa6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f002 ffca 	bl	8014f42 <LoRaMacClassBPingSlotChannelReq>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 8011fb4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8011fb8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8011fbc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	2011      	movs	r0, #17
 8011fc6:	f003 f937 	bl	8015238 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8011fca:	e08b      	b.n	80120e4 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011fcc:	200d      	movs	r0, #13
 8011fce:	f003 fc6b 	bl	80158a8 <LoRaMacConfirmQueueIsCmdActive>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f000 8084 	beq.w	80120e2 <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011fda:	210d      	movs	r1, #13
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f003 fbd7 	bl	8015790 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011fee:	78fb      	ldrb	r3, [r7, #3]
 8011ff0:	1c5a      	adds	r2, r3, #1
 8011ff2:	70fa      	strb	r2, [r7, #3]
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012000:	78fb      	ldrb	r3, [r7, #3]
 8012002:	1c5a      	adds	r2, r3, #1
 8012004:	70fa      	strb	r2, [r7, #3]
 8012006:	461a      	mov	r2, r3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	4413      	add	r3, r2
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	021b      	lsls	r3, r3, #8
 8012010:	b21a      	sxth	r2, r3
 8012012:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8012016:	4313      	orrs	r3, r2
 8012018:	b21b      	sxth	r3, r3
 801201a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801201e:	78fb      	ldrb	r3, [r7, #3]
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	70fa      	strb	r2, [r7, #3]
 8012024:	461a      	mov	r2, r3
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4413      	add	r3, r2
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012030:	4b35      	ldr	r3, [pc, #212]	@ (8012108 <ProcessMacCommands+0x9e0>)
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8012038:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 801203c:	4618      	mov	r0, r3
 801203e:	f002 ff8c 	bl	8014f5a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012042:	e04e      	b.n	80120e2 <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012044:	2300      	movs	r3, #0
 8012046:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801204a:	78fb      	ldrb	r3, [r7, #3]
 801204c:	1c5a      	adds	r2, r3, #1
 801204e:	70fa      	strb	r2, [r7, #3]
 8012050:	461a      	mov	r2, r3
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	4413      	add	r3, r2
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801205c:	78fb      	ldrb	r3, [r7, #3]
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	70fa      	strb	r2, [r7, #3]
 8012062:	461a      	mov	r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	4413      	add	r3, r2
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	021b      	lsls	r3, r3, #8
 801206c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012070:	4313      	orrs	r3, r2
 8012072:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012076:	78fb      	ldrb	r3, [r7, #3]
 8012078:	1c5a      	adds	r2, r3, #1
 801207a:	70fa      	strb	r2, [r7, #3]
 801207c:	461a      	mov	r2, r3
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	4413      	add	r3, r2
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	041b      	lsls	r3, r3, #16
 8012086:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801208a:	4313      	orrs	r3, r2
 801208c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8012090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012094:	2264      	movs	r2, #100	@ 0x64
 8012096:	fb02 f303 	mul.w	r3, r2, r3
 801209a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801209e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80120a2:	f002 ff6d 	bl	8014f80 <LoRaMacClassBBeaconFreqReq>
 80120a6:	4603      	mov	r3, r0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d003      	beq.n	80120b4 <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 80120ac:	2301      	movs	r3, #1
 80120ae:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80120b2:	e002      	b.n	80120ba <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80120b4:	2300      	movs	r3, #0
 80120b6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80120ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80120be:	2201      	movs	r2, #1
 80120c0:	4619      	mov	r1, r3
 80120c2:	2013      	movs	r0, #19
 80120c4:	f003 f8b8 	bl	8015238 <LoRaMacCommandsAddCmd>
                }
                break;
 80120c8:	e00c      	b.n	80120e4 <ProcessMacCommands+0x9bc>
                break;
 80120ca:	bf00      	nop
 80120cc:	e00a      	b.n	80120e4 <ProcessMacCommands+0x9bc>
                break;
 80120ce:	bf00      	nop
 80120d0:	e008      	b.n	80120e4 <ProcessMacCommands+0x9bc>
                break;
 80120d2:	bf00      	nop
 80120d4:	e006      	b.n	80120e4 <ProcessMacCommands+0x9bc>
                break;
 80120d6:	bf00      	nop
 80120d8:	e004      	b.n	80120e4 <ProcessMacCommands+0x9bc>
                break;
 80120da:	bf00      	nop
 80120dc:	e002      	b.n	80120e4 <ProcessMacCommands+0x9bc>
                break;
 80120de:	bf00      	nop
 80120e0:	e000      	b.n	80120e4 <ProcessMacCommands+0x9bc>
                break;
 80120e2:	bf00      	nop
    while( macIndex < commandsSize )
 80120e4:	78fa      	ldrb	r2, [r7, #3]
 80120e6:	78bb      	ldrb	r3, [r7, #2]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	f4ff ab3f 	bcc.w	801176c <ProcessMacCommands+0x44>
 80120ee:	e004      	b.n	80120fa <ProcessMacCommands+0x9d2>
        return;
 80120f0:	bf00      	nop
 80120f2:	e002      	b.n	80120fa <ProcessMacCommands+0x9d2>
            return;
 80120f4:	bf00      	nop
 80120f6:	e000      	b.n	80120fa <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80120f8:	bf00      	nop
        }
    }
}
 80120fa:	378c      	adds	r7, #140	@ 0x8c
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd90      	pop	{r4, r7, pc}
 8012100:	12d53d80 	.word	0x12d53d80
 8012104:	20000764 	.word	0x20000764
 8012108:	200018a8 	.word	0x200018a8

0801210c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b08e      	sub	sp, #56	@ 0x38
 8012110:	af02      	add	r7, sp, #8
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	607a      	str	r2, [r7, #4]
 8012116:	461a      	mov	r2, r3
 8012118:	460b      	mov	r3, r1
 801211a:	72fb      	strb	r3, [r7, #11]
 801211c:	4613      	mov	r3, r2
 801211e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012120:	2303      	movs	r3, #3
 8012122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012126:	4b66      	ldr	r3, [pc, #408]	@ (80122c0 <Send+0x1b4>)
 8012128:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801212c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012130:	4b63      	ldr	r3, [pc, #396]	@ (80122c0 <Send+0x1b4>)
 8012132:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012136:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801213a:	4b61      	ldr	r3, [pc, #388]	@ (80122c0 <Send+0x1b4>)
 801213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801213e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012140:	4b5f      	ldr	r3, [pc, #380]	@ (80122c0 <Send+0x1b4>)
 8012142:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012146:	2b00      	cmp	r3, #0
 8012148:	d101      	bne.n	801214e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801214a:	2307      	movs	r3, #7
 801214c:	e0b4      	b.n	80122b8 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801214e:	4b5c      	ldr	r3, [pc, #368]	@ (80122c0 <Send+0x1b4>)
 8012150:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8012154:	2b00      	cmp	r3, #0
 8012156:	d102      	bne.n	801215e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012158:	4b59      	ldr	r3, [pc, #356]	@ (80122c0 <Send+0x1b4>)
 801215a:	2200      	movs	r2, #0
 801215c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 801215e:	2300      	movs	r3, #0
 8012160:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012164:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012168:	f36f 0303 	bfc	r3, #0, #4
 801216c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012170:	4b53      	ldr	r3, [pc, #332]	@ (80122c0 <Send+0x1b4>)
 8012172:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8012176:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801217a:	f362 13c7 	bfi	r3, r2, #7, #1
 801217e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012182:	4b4f      	ldr	r3, [pc, #316]	@ (80122c0 <Send+0x1b4>)
 8012184:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012188:	2b01      	cmp	r3, #1
 801218a:	d106      	bne.n	801219a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801218c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012190:	f043 0310 	orr.w	r3, r3, #16
 8012194:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8012198:	e005      	b.n	80121a6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801219a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801219e:	f36f 1304 	bfc	r3, #4, #1
 80121a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80121a6:	4b46      	ldr	r3, [pc, #280]	@ (80122c0 <Send+0x1b4>)
 80121a8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d005      	beq.n	80121bc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80121b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80121b4:	f043 0320 	orr.w	r3, r3, #32
 80121b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 80121bc:	2301      	movs	r3, #1
 80121be:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80121c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80121c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	bf14      	ite	ne
 80121ce:	2301      	movne	r3, #1
 80121d0:	2300      	moveq	r3, #0
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80121d6:	4b3a      	ldr	r3, [pc, #232]	@ (80122c0 <Send+0x1b4>)
 80121d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121da:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80121dc:	4b38      	ldr	r3, [pc, #224]	@ (80122c0 <Send+0x1b4>)
 80121de:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80121e2:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80121e4:	4b36      	ldr	r3, [pc, #216]	@ (80122c0 <Send+0x1b4>)
 80121e6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80121ea:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80121ec:	4b34      	ldr	r3, [pc, #208]	@ (80122c0 <Send+0x1b4>)
 80121ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80121f2:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80121f6:	4b32      	ldr	r3, [pc, #200]	@ (80122c0 <Send+0x1b4>)
 80121f8:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80121fc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012200:	4b2f      	ldr	r3, [pc, #188]	@ (80122c0 <Send+0x1b4>)
 8012202:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801220a:	4b2d      	ldr	r3, [pc, #180]	@ (80122c0 <Send+0x1b4>)
 801220c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012210:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012214:	4b2a      	ldr	r3, [pc, #168]	@ (80122c0 <Send+0x1b4>)
 8012216:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801221a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801221e:	f107 0014 	add.w	r0, r7, #20
 8012222:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	4b26      	ldr	r3, [pc, #152]	@ (80122c4 <Send+0x1b8>)
 801222a:	4a27      	ldr	r2, [pc, #156]	@ (80122c8 <Send+0x1bc>)
 801222c:	4927      	ldr	r1, [pc, #156]	@ (80122cc <Send+0x1c0>)
 801222e:	f002 fd21 	bl	8014c74 <LoRaMacAdrCalcNext>
 8012232:	4603      	mov	r3, r0
 8012234:	461a      	mov	r2, r3
 8012236:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801223a:	f362 1386 	bfi	r3, r2, #6, #1
 801223e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012242:	7afa      	ldrb	r2, [r7, #11]
 8012244:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8012248:	893b      	ldrh	r3, [r7, #8]
 801224a:	9300      	str	r3, [sp, #0]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f000 fc72 	bl	8012b38 <PrepareFrame>
 8012254:	4603      	mov	r3, r0
 8012256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801225a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801225e:	2b00      	cmp	r3, #0
 8012260:	d003      	beq.n	801226a <Send+0x15e>
 8012262:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012266:	2b0a      	cmp	r3, #10
 8012268:	d107      	bne.n	801227a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 801226a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801226e:	4618      	mov	r0, r3
 8012270:	f000 f962 	bl	8012538 <ScheduleTx>
 8012274:	4603      	mov	r3, r0
 8012276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801227a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00a      	beq.n	8012298 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012282:	4a0f      	ldr	r2, [pc, #60]	@ (80122c0 <Send+0x1b4>)
 8012284:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012288:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801228c:	4a0c      	ldr	r2, [pc, #48]	@ (80122c0 <Send+0x1b4>)
 801228e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012292:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8012296:	e00d      	b.n	80122b4 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012298:	4b09      	ldr	r3, [pc, #36]	@ (80122c0 <Send+0x1b4>)
 801229a:	2200      	movs	r2, #0
 801229c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80122a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122a2:	4a07      	ldr	r2, [pc, #28]	@ (80122c0 <Send+0x1b4>)
 80122a4:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80122a6:	f003 f86d 	bl	8015384 <LoRaMacCommandsRemoveNoneStickyCmds>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d001      	beq.n	80122b4 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80122b0:	2313      	movs	r3, #19
 80122b2:	e001      	b.n	80122b8 <Send+0x1ac>
        }
    }
    return status;
 80122b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	3730      	adds	r7, #48	@ 0x30
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	20000c98 	.word	0x20000c98
 80122c4:	20000d00 	.word	0x20000d00
 80122c8:	20000cd0 	.word	0x20000cd0
 80122cc:	20000cd1 	.word	0x20000cd1

080122d0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	4603      	mov	r3, r0
 80122d8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80122da:	2300      	movs	r3, #0
 80122dc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80122de:	2300      	movs	r3, #0
 80122e0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80122e2:	2301      	movs	r3, #1
 80122e4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80122e6:	79fb      	ldrb	r3, [r7, #7]
 80122e8:	2bff      	cmp	r3, #255	@ 0xff
 80122ea:	d11f      	bne.n	801232c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80122ec:	2000      	movs	r0, #0
 80122ee:	f7ff f8e1 	bl	80114b4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80122f2:	4b15      	ldr	r3, [pc, #84]	@ (8012348 <SendReJoinReq+0x78>)
 80122f4:	2200      	movs	r2, #0
 80122f6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80122fa:	4b13      	ldr	r3, [pc, #76]	@ (8012348 <SendReJoinReq+0x78>)
 80122fc:	4a13      	ldr	r2, [pc, #76]	@ (801234c <SendReJoinReq+0x7c>)
 80122fe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012302:	4b11      	ldr	r3, [pc, #68]	@ (8012348 <SendReJoinReq+0x78>)
 8012304:	22ff      	movs	r2, #255	@ 0xff
 8012306:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801230a:	7b3b      	ldrb	r3, [r7, #12]
 801230c:	f36f 1347 	bfc	r3, #5, #3
 8012310:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012312:	7b3a      	ldrb	r2, [r7, #12]
 8012314:	4b0c      	ldr	r3, [pc, #48]	@ (8012348 <SendReJoinReq+0x78>)
 8012316:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801231a:	480d      	ldr	r0, [pc, #52]	@ (8012350 <SendReJoinReq+0x80>)
 801231c:	f7fb fefc 	bl	800e118 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8012320:	480c      	ldr	r0, [pc, #48]	@ (8012354 <SendReJoinReq+0x84>)
 8012322:	f7fb fec9 	bl	800e0b8 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8012326:	2300      	movs	r3, #0
 8012328:	73fb      	strb	r3, [r7, #15]

            break;
 801232a:	e002      	b.n	8012332 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801232c:	2302      	movs	r3, #2
 801232e:	73bb      	strb	r3, [r7, #14]
            break;
 8012330:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	4618      	mov	r0, r3
 8012336:	f000 f8ff 	bl	8012538 <ScheduleTx>
 801233a:	4603      	mov	r3, r0
 801233c:	73bb      	strb	r3, [r7, #14]
    return status;
 801233e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	20000764 	.word	0x20000764
 801234c:	20000766 	.word	0x20000766
 8012350:	20000872 	.word	0x20000872
 8012354:	2000087a 	.word	0x2000087a

08012358 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801235c:	f002 fd9a 	bl	8014e94 <LoRaMacClassBIsBeaconExpected>
 8012360:	4603      	mov	r3, r0
 8012362:	2b00      	cmp	r3, #0
 8012364:	d001      	beq.n	801236a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012366:	230e      	movs	r3, #14
 8012368:	e013      	b.n	8012392 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801236a:	4b0b      	ldr	r3, [pc, #44]	@ (8012398 <CheckForClassBCollision+0x40>)
 801236c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012370:	2b01      	cmp	r3, #1
 8012372:	d10d      	bne.n	8012390 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012374:	f002 fd95 	bl	8014ea2 <LoRaMacClassBIsPingExpected>
 8012378:	4603      	mov	r3, r0
 801237a:	2b00      	cmp	r3, #0
 801237c:	d001      	beq.n	8012382 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801237e:	230f      	movs	r3, #15
 8012380:	e007      	b.n	8012392 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012382:	f002 fd95 	bl	8014eb0 <LoRaMacClassBIsMulticastExpected>
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d001      	beq.n	8012390 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801238c:	230f      	movs	r3, #15
 801238e:	e000      	b.n	8012392 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8012390:	2300      	movs	r3, #0
}
 8012392:	4618      	mov	r0, r3
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	20000c98 	.word	0x20000c98

0801239c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801239c:	b590      	push	{r4, r7, lr}
 801239e:	b083      	sub	sp, #12
 80123a0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80123a2:	4b2d      	ldr	r3, [pc, #180]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123a4:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80123a8:	4b2b      	ldr	r3, [pc, #172]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123aa:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80123ae:	4b2a      	ldr	r3, [pc, #168]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123b0:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 80123b4:	4b28      	ldr	r3, [pc, #160]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123b6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80123ba:	4b27      	ldr	r3, [pc, #156]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123bc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80123c0:	b25b      	sxtb	r3, r3
 80123c2:	f004 fe35 	bl	8017030 <RegionApplyDrOffset>
 80123c6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80123c8:	b259      	sxtb	r1, r3
 80123ca:	4b23      	ldr	r3, [pc, #140]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123cc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80123d0:	4b21      	ldr	r3, [pc, #132]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123d4:	4821      	ldr	r0, [pc, #132]	@ (801245c <ComputeRxWindowParameters+0xc0>)
 80123d6:	9000      	str	r0, [sp, #0]
 80123d8:	4620      	mov	r0, r4
 80123da:	f004 fd4b 	bl	8016e74 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80123de:	4b1e      	ldr	r3, [pc, #120]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123e0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80123e4:	4b1c      	ldr	r3, [pc, #112]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80123ea:	b259      	sxtb	r1, r3
 80123ec:	4b1a      	ldr	r3, [pc, #104]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123ee:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80123f2:	4b19      	ldr	r3, [pc, #100]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 80123f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123f6:	4c1a      	ldr	r4, [pc, #104]	@ (8012460 <ComputeRxWindowParameters+0xc4>)
 80123f8:	9400      	str	r4, [sp, #0]
 80123fa:	f004 fd3b 	bl	8016e74 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80123fe:	4b16      	ldr	r3, [pc, #88]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 8012400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012402:	4a18      	ldr	r2, [pc, #96]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 8012404:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8012408:	4413      	add	r3, r2
 801240a:	4a16      	ldr	r2, [pc, #88]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 801240c:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012410:	4b11      	ldr	r3, [pc, #68]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 8012412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012414:	4a13      	ldr	r2, [pc, #76]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 8012416:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 801241a:	4413      	add	r3, r2
 801241c:	4a11      	ldr	r2, [pc, #68]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 801241e:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8012422:	4b10      	ldr	r3, [pc, #64]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 8012424:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012428:	2b04      	cmp	r3, #4
 801242a:	d011      	beq.n	8012450 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801242c:	4b0a      	ldr	r3, [pc, #40]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 801242e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012430:	4a0c      	ldr	r2, [pc, #48]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 8012432:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8012436:	4413      	add	r3, r2
 8012438:	4a0a      	ldr	r2, [pc, #40]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 801243a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801243e:	4b06      	ldr	r3, [pc, #24]	@ (8012458 <ComputeRxWindowParameters+0xbc>)
 8012440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012442:	4a08      	ldr	r2, [pc, #32]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 8012444:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8012448:	4413      	add	r3, r2
 801244a:	4a06      	ldr	r2, [pc, #24]	@ (8012464 <ComputeRxWindowParameters+0xc8>)
 801244c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8012450:	bf00      	nop
 8012452:	3704      	adds	r7, #4
 8012454:	46bd      	mov	sp, r7
 8012456:	bd90      	pop	{r4, r7, pc}
 8012458:	20000c98 	.word	0x20000c98
 801245c:	20000b1c 	.word	0x20000b1c
 8012460:	20000b34 	.word	0x20000b34
 8012464:	20000764 	.word	0x20000764

08012468 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b082      	sub	sp, #8
 801246c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801246e:	2300      	movs	r3, #0
 8012470:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012472:	4b13      	ldr	r3, [pc, #76]	@ (80124c0 <VerifyTxFrame+0x58>)
 8012474:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012478:	2b00      	cmp	r3, #0
 801247a:	d01b      	beq.n	80124b4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801247c:	1d3b      	adds	r3, r7, #4
 801247e:	4618      	mov	r0, r3
 8012480:	f002 ffd0 	bl	8015424 <LoRaMacCommandsGetSizeSerializedCmds>
 8012484:	4603      	mov	r3, r0
 8012486:	2b00      	cmp	r3, #0
 8012488:	d001      	beq.n	801248e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801248a:	2313      	movs	r3, #19
 801248c:	e013      	b.n	80124b6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801248e:	4b0d      	ldr	r3, [pc, #52]	@ (80124c4 <VerifyTxFrame+0x5c>)
 8012490:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012494:	4a0a      	ldr	r2, [pc, #40]	@ (80124c0 <VerifyTxFrame+0x58>)
 8012496:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	b2d2      	uxtb	r2, r2
 801249e:	4618      	mov	r0, r3
 80124a0:	f7ff f91a 	bl	80116d8 <ValidatePayloadLength>
 80124a4:	4603      	mov	r3, r0
 80124a6:	f083 0301 	eor.w	r3, r3, #1
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d001      	beq.n	80124b4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80124b0:	2308      	movs	r3, #8
 80124b2:	e000      	b.n	80124b6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80124b4:	2300      	movs	r3, #0
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3708      	adds	r7, #8
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	20000c98 	.word	0x20000c98
 80124c4:	20000764 	.word	0x20000764

080124c8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80124ce:	4b18      	ldr	r3, [pc, #96]	@ (8012530 <SerializeTxFrame+0x68>)
 80124d0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d002      	beq.n	80124de <SerializeTxFrame+0x16>
 80124d8:	2b04      	cmp	r3, #4
 80124da:	d011      	beq.n	8012500 <SerializeTxFrame+0x38>
 80124dc:	e021      	b.n	8012522 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80124de:	4815      	ldr	r0, [pc, #84]	@ (8012534 <SerializeTxFrame+0x6c>)
 80124e0:	f004 faca 	bl	8016a78 <LoRaMacSerializerJoinRequest>
 80124e4:	4603      	mov	r3, r0
 80124e6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80124e8:	79fb      	ldrb	r3, [r7, #7]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d001      	beq.n	80124f2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80124ee:	2311      	movs	r3, #17
 80124f0:	e01a      	b.n	8012528 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80124f2:	4b0f      	ldr	r3, [pc, #60]	@ (8012530 <SerializeTxFrame+0x68>)
 80124f4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80124f8:	461a      	mov	r2, r3
 80124fa:	4b0d      	ldr	r3, [pc, #52]	@ (8012530 <SerializeTxFrame+0x68>)
 80124fc:	801a      	strh	r2, [r3, #0]
            break;
 80124fe:	e012      	b.n	8012526 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8012500:	480c      	ldr	r0, [pc, #48]	@ (8012534 <SerializeTxFrame+0x6c>)
 8012502:	f004 fb3b 	bl	8016b7c <LoRaMacSerializerData>
 8012506:	4603      	mov	r3, r0
 8012508:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801250a:	79fb      	ldrb	r3, [r7, #7]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d001      	beq.n	8012514 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012510:	2311      	movs	r3, #17
 8012512:	e009      	b.n	8012528 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012514:	4b06      	ldr	r3, [pc, #24]	@ (8012530 <SerializeTxFrame+0x68>)
 8012516:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801251a:	461a      	mov	r2, r3
 801251c:	4b04      	ldr	r3, [pc, #16]	@ (8012530 <SerializeTxFrame+0x68>)
 801251e:	801a      	strh	r2, [r3, #0]
            break;
 8012520:	e001      	b.n	8012526 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012522:	2303      	movs	r3, #3
 8012524:	e000      	b.n	8012528 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8012526:	2300      	movs	r3, #0
}
 8012528:	4618      	mov	r0, r3
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	20000764 	.word	0x20000764
 8012534:	2000086c 	.word	0x2000086c

08012538 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b090      	sub	sp, #64	@ 0x40
 801253c:	af02      	add	r7, sp, #8
 801253e:	4603      	mov	r3, r0
 8012540:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012542:	2303      	movs	r3, #3
 8012544:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8012548:	f7ff ff06 	bl	8012358 <CheckForClassBCollision>
 801254c:	4603      	mov	r3, r0
 801254e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8012552:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012556:	2b00      	cmp	r3, #0
 8012558:	d002      	beq.n	8012560 <ScheduleTx+0x28>
    {
        return status;
 801255a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801255e:	e092      	b.n	8012686 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8012560:	f000 f8f8 	bl	8012754 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8012564:	f7ff ffb0 	bl	80124c8 <SerializeTxFrame>
 8012568:	4603      	mov	r3, r0
 801256a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801256e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012572:	2b00      	cmp	r3, #0
 8012574:	d002      	beq.n	801257c <ScheduleTx+0x44>
    {
        return status;
 8012576:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801257a:	e084      	b.n	8012686 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801257c:	4b44      	ldr	r3, [pc, #272]	@ (8012690 <ScheduleTx+0x158>)
 801257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012580:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012582:	4b43      	ldr	r3, [pc, #268]	@ (8012690 <ScheduleTx+0x158>)
 8012584:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012588:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801258a:	4b41      	ldr	r3, [pc, #260]	@ (8012690 <ScheduleTx+0x158>)
 801258c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8012590:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8012592:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012596:	4618      	mov	r0, r3
 8012598:	f00a faa6 	bl	801cae8 <SysTimeGetMcuTime>
 801259c:	4638      	mov	r0, r7
 801259e:	4b3c      	ldr	r3, [pc, #240]	@ (8012690 <ScheduleTx+0x158>)
 80125a0:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 80125a4:	9200      	str	r2, [sp, #0]
 80125a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80125aa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80125ae:	ca06      	ldmia	r2, {r1, r2}
 80125b0:	f00a f9fb 	bl	801c9aa <SysTimeSub>
 80125b4:	f107 0320 	add.w	r3, r7, #32
 80125b8:	463a      	mov	r2, r7
 80125ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80125be:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80125c2:	4b33      	ldr	r3, [pc, #204]	@ (8012690 <ScheduleTx+0x158>)
 80125c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125c6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80125c8:	2300      	movs	r3, #0
 80125ca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80125ce:	2301      	movs	r3, #1
 80125d0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80125d2:	4b30      	ldr	r3, [pc, #192]	@ (8012694 <ScheduleTx+0x15c>)
 80125d4:	881b      	ldrh	r3, [r3, #0]
 80125d6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80125d8:	4b2d      	ldr	r3, [pc, #180]	@ (8012690 <ScheduleTx+0x158>)
 80125da:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d104      	bne.n	80125ec <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80125e2:	2301      	movs	r3, #1
 80125e4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80125e8:	2300      	movs	r3, #0
 80125ea:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80125ec:	4b28      	ldr	r3, [pc, #160]	@ (8012690 <ScheduleTx+0x158>)
 80125ee:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80125f2:	f107 0114 	add.w	r1, r7, #20
 80125f6:	4b28      	ldr	r3, [pc, #160]	@ (8012698 <ScheduleTx+0x160>)
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	4b28      	ldr	r3, [pc, #160]	@ (801269c <ScheduleTx+0x164>)
 80125fc:	4a28      	ldr	r2, [pc, #160]	@ (80126a0 <ScheduleTx+0x168>)
 80125fe:	f004 fcff 	bl	8017000 <RegionNextChannel>
 8012602:	4603      	mov	r3, r0
 8012604:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8012608:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801260c:	2b00      	cmp	r3, #0
 801260e:	d025      	beq.n	801265c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8012610:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012614:	2b0b      	cmp	r3, #11
 8012616:	d11e      	bne.n	8012656 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8012618:	4b1e      	ldr	r3, [pc, #120]	@ (8012694 <ScheduleTx+0x15c>)
 801261a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 801261e:	2b00      	cmp	r3, #0
 8012620:	d01c      	beq.n	801265c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8012622:	7bfb      	ldrb	r3, [r7, #15]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d013      	beq.n	8012650 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012628:	4b1a      	ldr	r3, [pc, #104]	@ (8012694 <ScheduleTx+0x15c>)
 801262a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801262e:	f043 0320 	orr.w	r3, r3, #32
 8012632:	4a18      	ldr	r2, [pc, #96]	@ (8012694 <ScheduleTx+0x15c>)
 8012634:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012638:	4b16      	ldr	r3, [pc, #88]	@ (8012694 <ScheduleTx+0x15c>)
 801263a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 801263e:	4619      	mov	r1, r3
 8012640:	4818      	ldr	r0, [pc, #96]	@ (80126a4 <ScheduleTx+0x16c>)
 8012642:	f00a ff89 	bl	801d558 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8012646:	4817      	ldr	r0, [pc, #92]	@ (80126a4 <ScheduleTx+0x16c>)
 8012648:	f00a fea8 	bl	801d39c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 801264c:	2300      	movs	r3, #0
 801264e:	e01a      	b.n	8012686 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8012650:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012654:	e017      	b.n	8012686 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8012656:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801265a:	e014      	b.n	8012686 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801265c:	f7ff fe9e 	bl	801239c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8012660:	f7ff ff02 	bl	8012468 <VerifyTxFrame>
 8012664:	4603      	mov	r3, r0
 8012666:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801266a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801266e:	2b00      	cmp	r3, #0
 8012670:	d002      	beq.n	8012678 <ScheduleTx+0x140>
    {
        return status;
 8012672:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012676:	e006      	b.n	8012686 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012678:	4b06      	ldr	r3, [pc, #24]	@ (8012694 <ScheduleTx+0x15c>)
 801267a:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 801267e:	4618      	mov	r0, r3
 8012680:	f000 fb74 	bl	8012d6c <SendFrameOnChannel>
 8012684:	4603      	mov	r3, r0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3738      	adds	r7, #56	@ 0x38
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	20000c98 	.word	0x20000c98
 8012694:	20000764 	.word	0x20000764
 8012698:	20000cc8 	.word	0x20000cc8
 801269c:	20000bf8 	.word	0x20000bf8
 80126a0:	20000b7f 	.word	0x20000b7f
 80126a4:	20000acc 	.word	0x20000acc

080126a8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	4603      	mov	r3, r0
 80126b0:	460a      	mov	r2, r1
 80126b2:	71fb      	strb	r3, [r7, #7]
 80126b4:	4613      	mov	r3, r2
 80126b6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80126b8:	2312      	movs	r3, #18
 80126ba:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80126c0:	4b22      	ldr	r3, [pc, #136]	@ (801274c <SecureFrame+0xa4>)
 80126c2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d002      	beq.n	80126d0 <SecureFrame+0x28>
 80126ca:	2b04      	cmp	r3, #4
 80126cc:	d011      	beq.n	80126f2 <SecureFrame+0x4a>
 80126ce:	e036      	b.n	801273e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80126d0:	481f      	ldr	r0, [pc, #124]	@ (8012750 <SecureFrame+0xa8>)
 80126d2:	f003 fda1 	bl	8016218 <LoRaMacCryptoPrepareJoinRequest>
 80126d6:	4603      	mov	r3, r0
 80126d8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80126da:	7bfb      	ldrb	r3, [r7, #15]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d001      	beq.n	80126e4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80126e0:	2311      	movs	r3, #17
 80126e2:	e02f      	b.n	8012744 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80126e4:	4b19      	ldr	r3, [pc, #100]	@ (801274c <SecureFrame+0xa4>)
 80126e6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80126ea:	461a      	mov	r2, r3
 80126ec:	4b17      	ldr	r3, [pc, #92]	@ (801274c <SecureFrame+0xa4>)
 80126ee:	801a      	strh	r2, [r3, #0]
            break;
 80126f0:	e027      	b.n	8012742 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80126f2:	f107 0308 	add.w	r3, r7, #8
 80126f6:	4618      	mov	r0, r3
 80126f8:	f003 fcc8 	bl	801608c <LoRaMacCryptoGetFCntUp>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d001      	beq.n	8012706 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012702:	2312      	movs	r3, #18
 8012704:	e01e      	b.n	8012744 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8012706:	4b11      	ldr	r3, [pc, #68]	@ (801274c <SecureFrame+0xa4>)
 8012708:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801270c:	2b00      	cmp	r3, #0
 801270e:	d002      	beq.n	8012716 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	3b01      	subs	r3, #1
 8012714:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012716:	68b8      	ldr	r0, [r7, #8]
 8012718:	79ba      	ldrb	r2, [r7, #6]
 801271a:	79f9      	ldrb	r1, [r7, #7]
 801271c:	4b0c      	ldr	r3, [pc, #48]	@ (8012750 <SecureFrame+0xa8>)
 801271e:	f003 fea3 	bl	8016468 <LoRaMacCryptoSecureMessage>
 8012722:	4603      	mov	r3, r0
 8012724:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012726:	7bfb      	ldrb	r3, [r7, #15]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d001      	beq.n	8012730 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801272c:	2311      	movs	r3, #17
 801272e:	e009      	b.n	8012744 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012730:	4b06      	ldr	r3, [pc, #24]	@ (801274c <SecureFrame+0xa4>)
 8012732:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8012736:	461a      	mov	r2, r3
 8012738:	4b04      	ldr	r3, [pc, #16]	@ (801274c <SecureFrame+0xa4>)
 801273a:	801a      	strh	r2, [r3, #0]
            break;
 801273c:	e001      	b.n	8012742 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801273e:	2303      	movs	r3, #3
 8012740:	e000      	b.n	8012744 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8012742:	2300      	movs	r3, #0
}
 8012744:	4618      	mov	r0, r3
 8012746:	3710      	adds	r7, #16
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	20000764 	.word	0x20000764
 8012750:	2000086c 	.word	0x2000086c

08012754 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012754:	b480      	push	{r7}
 8012756:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012758:	4b09      	ldr	r3, [pc, #36]	@ (8012780 <CalculateBackOff+0x2c>)
 801275a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801275c:	2b00      	cmp	r3, #0
 801275e:	d10a      	bne.n	8012776 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012760:	4b07      	ldr	r3, [pc, #28]	@ (8012780 <CalculateBackOff+0x2c>)
 8012762:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8012766:	3b01      	subs	r3, #1
 8012768:	4a06      	ldr	r2, [pc, #24]	@ (8012784 <CalculateBackOff+0x30>)
 801276a:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 801276e:	fb02 f303 	mul.w	r3, r2, r3
 8012772:	4a03      	ldr	r2, [pc, #12]	@ (8012780 <CalculateBackOff+0x2c>)
 8012774:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8012776:	bf00      	nop
 8012778:	46bd      	mov	sp, r7
 801277a:	bc80      	pop	{r7}
 801277c:	4770      	bx	lr
 801277e:	bf00      	nop
 8012780:	20000c98 	.word	0x20000c98
 8012784:	20000764 	.word	0x20000764

08012788 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af00      	add	r7, sp, #0
 801278e:	4603      	mov	r3, r0
 8012790:	7139      	strb	r1, [r7, #4]
 8012792:	71fb      	strb	r3, [r7, #7]
 8012794:	4613      	mov	r3, r2
 8012796:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8012798:	79fb      	ldrb	r3, [r7, #7]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d002      	beq.n	80127a4 <RemoveMacCommands+0x1c>
 801279e:	79fb      	ldrb	r3, [r7, #7]
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d10d      	bne.n	80127c0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80127a4:	79bb      	ldrb	r3, [r7, #6]
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d108      	bne.n	80127bc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80127aa:	793b      	ldrb	r3, [r7, #4]
 80127ac:	f003 0320 	and.w	r3, r3, #32
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d004      	beq.n	80127c0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80127b6:	f002 fe09 	bl	80153cc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80127ba:	e001      	b.n	80127c0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80127bc:	f002 fe06 	bl	80153cc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80127c0:	bf00      	nop
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80127c8:	b5b0      	push	{r4, r5, r7, lr}
 80127ca:	b092      	sub	sp, #72	@ 0x48
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	4603      	mov	r3, r0
 80127d0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80127d2:	79fb      	ldrb	r3, [r7, #7]
 80127d4:	f083 0301 	eor.w	r3, r3, #1
 80127d8:	b2db      	uxtb	r3, r3
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d003      	beq.n	80127e6 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80127de:	4b88      	ldr	r3, [pc, #544]	@ (8012a00 <ResetMacParameters+0x238>)
 80127e0:	2200      	movs	r2, #0
 80127e2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80127e6:	4b86      	ldr	r3, [pc, #536]	@ (8012a00 <ResetMacParameters+0x238>)
 80127e8:	2200      	movs	r2, #0
 80127ea:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80127ec:	4b85      	ldr	r3, [pc, #532]	@ (8012a04 <ResetMacParameters+0x23c>)
 80127ee:	2200      	movs	r2, #0
 80127f0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80127f4:	4b83      	ldr	r3, [pc, #524]	@ (8012a04 <ResetMacParameters+0x23c>)
 80127f6:	2200      	movs	r2, #0
 80127f8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 80127fc:	4b81      	ldr	r3, [pc, #516]	@ (8012a04 <ResetMacParameters+0x23c>)
 80127fe:	2200      	movs	r2, #0
 8012800:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8012804:	4b7e      	ldr	r3, [pc, #504]	@ (8012a00 <ResetMacParameters+0x238>)
 8012806:	2200      	movs	r2, #0
 8012808:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801280c:	4b7c      	ldr	r3, [pc, #496]	@ (8012a00 <ResetMacParameters+0x238>)
 801280e:	2201      	movs	r2, #1
 8012810:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012814:	4b7a      	ldr	r3, [pc, #488]	@ (8012a00 <ResetMacParameters+0x238>)
 8012816:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801281a:	4b79      	ldr	r3, [pc, #484]	@ (8012a00 <ResetMacParameters+0x238>)
 801281c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012820:	4b77      	ldr	r3, [pc, #476]	@ (8012a00 <ResetMacParameters+0x238>)
 8012822:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8012826:	4b76      	ldr	r3, [pc, #472]	@ (8012a00 <ResetMacParameters+0x238>)
 8012828:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801282c:	4b74      	ldr	r3, [pc, #464]	@ (8012a00 <ResetMacParameters+0x238>)
 801282e:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8012832:	4b73      	ldr	r3, [pc, #460]	@ (8012a00 <ResetMacParameters+0x238>)
 8012834:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012838:	4b71      	ldr	r3, [pc, #452]	@ (8012a00 <ResetMacParameters+0x238>)
 801283a:	4a71      	ldr	r2, [pc, #452]	@ (8012a00 <ResetMacParameters+0x238>)
 801283c:	336c      	adds	r3, #108	@ 0x6c
 801283e:	32b4      	adds	r2, #180	@ 0xb4
 8012840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012844:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012848:	4b6d      	ldr	r3, [pc, #436]	@ (8012a00 <ResetMacParameters+0x238>)
 801284a:	4a6d      	ldr	r2, [pc, #436]	@ (8012a00 <ResetMacParameters+0x238>)
 801284c:	3374      	adds	r3, #116	@ 0x74
 801284e:	32bc      	adds	r2, #188	@ 0xbc
 8012850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012854:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8012858:	4b69      	ldr	r3, [pc, #420]	@ (8012a00 <ResetMacParameters+0x238>)
 801285a:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 801285e:	4b68      	ldr	r3, [pc, #416]	@ (8012a00 <ResetMacParameters+0x238>)
 8012860:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012864:	4b66      	ldr	r3, [pc, #408]	@ (8012a00 <ResetMacParameters+0x238>)
 8012866:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 801286a:	4b65      	ldr	r3, [pc, #404]	@ (8012a00 <ResetMacParameters+0x238>)
 801286c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8012870:	4b63      	ldr	r3, [pc, #396]	@ (8012a00 <ResetMacParameters+0x238>)
 8012872:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8012876:	4a62      	ldr	r2, [pc, #392]	@ (8012a00 <ResetMacParameters+0x238>)
 8012878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801287c:	4b60      	ldr	r3, [pc, #384]	@ (8012a00 <ResetMacParameters+0x238>)
 801287e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8012882:	4a5f      	ldr	r2, [pc, #380]	@ (8012a00 <ResetMacParameters+0x238>)
 8012884:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012888:	4b5d      	ldr	r3, [pc, #372]	@ (8012a00 <ResetMacParameters+0x238>)
 801288a:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 801288e:	4b5c      	ldr	r3, [pc, #368]	@ (8012a00 <ResetMacParameters+0x238>)
 8012890:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8012894:	4b5a      	ldr	r3, [pc, #360]	@ (8012a00 <ResetMacParameters+0x238>)
 8012896:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 801289a:	4b59      	ldr	r3, [pc, #356]	@ (8012a00 <ResetMacParameters+0x238>)
 801289c:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 80128a0:	4b58      	ldr	r3, [pc, #352]	@ (8012a04 <ResetMacParameters+0x23c>)
 80128a2:	2200      	movs	r2, #0
 80128a4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 80128a8:	4b55      	ldr	r3, [pc, #340]	@ (8012a00 <ResetMacParameters+0x238>)
 80128aa:	2200      	movs	r2, #0
 80128ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80128b0:	4b53      	ldr	r3, [pc, #332]	@ (8012a00 <ResetMacParameters+0x238>)
 80128b2:	2200      	movs	r2, #0
 80128b4:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 80128b8:	4b51      	ldr	r3, [pc, #324]	@ (8012a00 <ResetMacParameters+0x238>)
 80128ba:	2200      	movs	r2, #0
 80128bc:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80128c0:	4b4f      	ldr	r3, [pc, #316]	@ (8012a00 <ResetMacParameters+0x238>)
 80128c2:	2200      	movs	r2, #0
 80128c4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80128c8:	4b4d      	ldr	r3, [pc, #308]	@ (8012a00 <ResetMacParameters+0x238>)
 80128ca:	2200      	movs	r2, #0
 80128cc:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 80128d0:	4b4b      	ldr	r3, [pc, #300]	@ (8012a00 <ResetMacParameters+0x238>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80128d8:	4b49      	ldr	r3, [pc, #292]	@ (8012a00 <ResetMacParameters+0x238>)
 80128da:	2200      	movs	r2, #0
 80128dc:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80128e0:	4b47      	ldr	r3, [pc, #284]	@ (8012a00 <ResetMacParameters+0x238>)
 80128e2:	2200      	movs	r2, #0
 80128e4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80128e8:	4b45      	ldr	r3, [pc, #276]	@ (8012a00 <ResetMacParameters+0x238>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80128f0:	4b43      	ldr	r3, [pc, #268]	@ (8012a00 <ResetMacParameters+0x238>)
 80128f2:	2200      	movs	r2, #0
 80128f4:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80128f8:	4b41      	ldr	r3, [pc, #260]	@ (8012a00 <ResetMacParameters+0x238>)
 80128fa:	2200      	movs	r2, #0
 80128fc:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012900:	2301      	movs	r3, #1
 8012902:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012904:	4b40      	ldr	r3, [pc, #256]	@ (8012a08 <ResetMacParameters+0x240>)
 8012906:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012908:	4b40      	ldr	r3, [pc, #256]	@ (8012a0c <ResetMacParameters+0x244>)
 801290a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 801290c:	4b40      	ldr	r3, [pc, #256]	@ (8012a10 <ResetMacParameters+0x248>)
 801290e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012910:	4b3b      	ldr	r3, [pc, #236]	@ (8012a00 <ResetMacParameters+0x238>)
 8012912:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012916:	f107 020c 	add.w	r2, r7, #12
 801291a:	4611      	mov	r1, r2
 801291c:	4618      	mov	r0, r3
 801291e:	f004 fa5b 	bl	8016dd8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012922:	4b38      	ldr	r3, [pc, #224]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012924:	2200      	movs	r2, #0
 8012926:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801292a:	4b36      	ldr	r3, [pc, #216]	@ (8012a04 <ResetMacParameters+0x23c>)
 801292c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012930:	4b34      	ldr	r3, [pc, #208]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012932:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012936:	4b32      	ldr	r3, [pc, #200]	@ (8012a00 <ResetMacParameters+0x238>)
 8012938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801293a:	4a32      	ldr	r2, [pc, #200]	@ (8012a04 <ResetMacParameters+0x23c>)
 801293c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012940:	4b2f      	ldr	r3, [pc, #188]	@ (8012a00 <ResetMacParameters+0x238>)
 8012942:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8012946:	4b2f      	ldr	r3, [pc, #188]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012948:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801294c:	4b2c      	ldr	r3, [pc, #176]	@ (8012a00 <ResetMacParameters+0x238>)
 801294e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012952:	4b2c      	ldr	r3, [pc, #176]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012954:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012958:	4b2a      	ldr	r3, [pc, #168]	@ (8012a04 <ResetMacParameters+0x23c>)
 801295a:	2200      	movs	r2, #0
 801295c:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012960:	4b28      	ldr	r3, [pc, #160]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012962:	2201      	movs	r2, #1
 8012964:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012968:	4b25      	ldr	r3, [pc, #148]	@ (8012a00 <ResetMacParameters+0x238>)
 801296a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801296e:	4b25      	ldr	r3, [pc, #148]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012970:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012974:	4a23      	ldr	r2, [pc, #140]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012976:	4b23      	ldr	r3, [pc, #140]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012978:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 801297c:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8012980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012984:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012988:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801298c:	4b1d      	ldr	r3, [pc, #116]	@ (8012a04 <ResetMacParameters+0x23c>)
 801298e:	2201      	movs	r2, #1
 8012990:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012994:	4b1b      	ldr	r3, [pc, #108]	@ (8012a04 <ResetMacParameters+0x23c>)
 8012996:	2202      	movs	r2, #2
 8012998:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801299c:	2300      	movs	r3, #0
 801299e:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 80129a0:	2300      	movs	r3, #0
 80129a2:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 80129a4:	4b17      	ldr	r3, [pc, #92]	@ (8012a04 <ResetMacParameters+0x23c>)
 80129a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d009      	beq.n	80129c2 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80129ae:	4b15      	ldr	r3, [pc, #84]	@ (8012a04 <ResetMacParameters+0x23c>)
 80129b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80129b8:	4b12      	ldr	r3, [pc, #72]	@ (8012a04 <ResetMacParameters+0x23c>)
 80129ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80129be:	695b      	ldr	r3, [r3, #20]
 80129c0:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80129c2:	4b14      	ldr	r3, [pc, #80]	@ (8012a14 <ResetMacParameters+0x24c>)
 80129c4:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80129c6:	4b14      	ldr	r3, [pc, #80]	@ (8012a18 <ResetMacParameters+0x250>)
 80129c8:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80129ca:	4b14      	ldr	r3, [pc, #80]	@ (8012a1c <ResetMacParameters+0x254>)
 80129cc:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80129ce:	4b14      	ldr	r3, [pc, #80]	@ (8012a20 <ResetMacParameters+0x258>)
 80129d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80129d2:	4b14      	ldr	r3, [pc, #80]	@ (8012a24 <ResetMacParameters+0x25c>)
 80129d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80129d6:	4b14      	ldr	r3, [pc, #80]	@ (8012a28 <ResetMacParameters+0x260>)
 80129d8:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80129da:	4b14      	ldr	r3, [pc, #80]	@ (8012a2c <ResetMacParameters+0x264>)
 80129dc:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80129de:	4b14      	ldr	r3, [pc, #80]	@ (8012a30 <ResetMacParameters+0x268>)
 80129e0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80129e2:	4b14      	ldr	r3, [pc, #80]	@ (8012a34 <ResetMacParameters+0x26c>)
 80129e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80129e6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80129ea:	f107 031c 	add.w	r3, r7, #28
 80129ee:	4a12      	ldr	r2, [pc, #72]	@ (8012a38 <ResetMacParameters+0x270>)
 80129f0:	4618      	mov	r0, r3
 80129f2:	f002 f9f8 	bl	8014de6 <LoRaMacClassBInit>
}
 80129f6:	bf00      	nop
 80129f8:	3748      	adds	r7, #72	@ 0x48
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bdb0      	pop	{r4, r5, r7, pc}
 80129fe:	bf00      	nop
 8012a00:	20000c98 	.word	0x20000c98
 8012a04:	20000764 	.word	0x20000764
 8012a08:	20000ebc 	.word	0x20000ebc
 8012a0c:	20000ec0 	.word	0x20000ec0
 8012a10:	20001810 	.word	0x20001810
 8012a14:	20000bcc 	.word	0x20000bcc
 8012a18:	20000b84 	.word	0x20000b84
 8012a1c:	20000bb8 	.word	0x20000bb8
 8012a20:	20000bf5 	.word	0x20000bf5
 8012a24:	20000d7c 	.word	0x20000d7c
 8012a28:	20000ce0 	.word	0x20000ce0
 8012a2c:	20000ce4 	.word	0x20000ce4
 8012a30:	20000d80 	.word	0x20000d80
 8012a34:	20000dc8 	.word	0x20000dc8
 8012a38:	2000123c 	.word	0x2000123c

08012a3c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f00a fd16 	bl	801d478 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012a4c:	4b11      	ldr	r3, [pc, #68]	@ (8012a94 <RxWindowSetup+0x58>)
 8012a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a50:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012a52:	4b11      	ldr	r3, [pc, #68]	@ (8012a98 <RxWindowSetup+0x5c>)
 8012a54:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012a58:	4a10      	ldr	r2, [pc, #64]	@ (8012a9c <RxWindowSetup+0x60>)
 8012a5a:	6839      	ldr	r1, [r7, #0]
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f004 fa23 	bl	8016ea8 <RegionRxConfig>
 8012a62:	4603      	mov	r3, r0
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d010      	beq.n	8012a8a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012a68:	4b0d      	ldr	r3, [pc, #52]	@ (8012aa0 <RxWindowSetup+0x64>)
 8012a6a:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8012a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8012aa0 <RxWindowSetup+0x64>)
 8012a70:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012a74:	4b07      	ldr	r3, [pc, #28]	@ (8012a94 <RxWindowSetup+0x58>)
 8012a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a78:	4a07      	ldr	r2, [pc, #28]	@ (8012a98 <RxWindowSetup+0x5c>)
 8012a7a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	7cda      	ldrb	r2, [r3, #19]
 8012a84:	4b06      	ldr	r3, [pc, #24]	@ (8012aa0 <RxWindowSetup+0x64>)
 8012a86:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8012a8a:	bf00      	nop
 8012a8c:	3708      	adds	r7, #8
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
 8012a92:	bf00      	nop
 8012a94:	0801ff20 	.word	0x0801ff20
 8012a98:	20000c98 	.word	0x20000c98
 8012a9c:	20000b88 	.word	0x20000b88
 8012aa0:	20000764 	.word	0x20000764

08012aa4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012aa4:	b590      	push	{r4, r7, lr}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8012b24 <OpenContinuousRxCWindow+0x80>)
 8012aac:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8012ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8012b24 <OpenContinuousRxCWindow+0x80>)
 8012ab2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012ab6:	b259      	sxtb	r1, r3
 8012ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8012b24 <OpenContinuousRxCWindow+0x80>)
 8012aba:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8012abe:	4b19      	ldr	r3, [pc, #100]	@ (8012b24 <OpenContinuousRxCWindow+0x80>)
 8012ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ac2:	4c19      	ldr	r4, [pc, #100]	@ (8012b28 <OpenContinuousRxCWindow+0x84>)
 8012ac4:	9400      	str	r4, [sp, #0]
 8012ac6:	f004 f9d5 	bl	8016e74 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012aca:	4b18      	ldr	r3, [pc, #96]	@ (8012b2c <OpenContinuousRxCWindow+0x88>)
 8012acc:	2202      	movs	r2, #2
 8012ace:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012ad2:	4b14      	ldr	r3, [pc, #80]	@ (8012b24 <OpenContinuousRxCWindow+0x80>)
 8012ad4:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012ad8:	4b14      	ldr	r3, [pc, #80]	@ (8012b2c <OpenContinuousRxCWindow+0x88>)
 8012ada:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012ade:	4b13      	ldr	r3, [pc, #76]	@ (8012b2c <OpenContinuousRxCWindow+0x88>)
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8012b24 <OpenContinuousRxCWindow+0x80>)
 8012ae8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012aec:	4a10      	ldr	r2, [pc, #64]	@ (8012b30 <OpenContinuousRxCWindow+0x8c>)
 8012aee:	490e      	ldr	r1, [pc, #56]	@ (8012b28 <OpenContinuousRxCWindow+0x84>)
 8012af0:	4618      	mov	r0, r3
 8012af2:	f004 f9d9 	bl	8016ea8 <RegionRxConfig>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00f      	beq.n	8012b1c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012afc:	4b0b      	ldr	r3, [pc, #44]	@ (8012b2c <OpenContinuousRxCWindow+0x88>)
 8012afe:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8012b02:	4b0a      	ldr	r3, [pc, #40]	@ (8012b2c <OpenContinuousRxCWindow+0x88>)
 8012b04:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8012b08:	4b0a      	ldr	r3, [pc, #40]	@ (8012b34 <OpenContinuousRxCWindow+0x90>)
 8012b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b0c:	2000      	movs	r0, #0
 8012b0e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012b10:	4b06      	ldr	r3, [pc, #24]	@ (8012b2c <OpenContinuousRxCWindow+0x88>)
 8012b12:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8012b16:	4b05      	ldr	r3, [pc, #20]	@ (8012b2c <OpenContinuousRxCWindow+0x88>)
 8012b18:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8012b1c:	bf00      	nop
 8012b1e:	3704      	adds	r7, #4
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd90      	pop	{r4, r7, pc}
 8012b24:	20000c98 	.word	0x20000c98
 8012b28:	20000b4c 	.word	0x20000b4c
 8012b2c:	20000764 	.word	0x20000764
 8012b30:	20000b88 	.word	0x20000b88
 8012b34:	0801ff20 	.word	0x0801ff20

08012b38 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b088      	sub	sp, #32
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	603b      	str	r3, [r7, #0]
 8012b44:	4613      	mov	r3, r2
 8012b46:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012b48:	4b81      	ldr	r3, [pc, #516]	@ (8012d50 <PrepareFrame+0x218>)
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012b4e:	4b80      	ldr	r3, [pc, #512]	@ (8012d50 <PrepareFrame+0x218>)
 8012b50:	2200      	movs	r2, #0
 8012b52:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 8012b56:	2300      	movs	r3, #0
 8012b58:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d101      	bne.n	8012b6c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012b6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012b6e:	461a      	mov	r2, r3
 8012b70:	6839      	ldr	r1, [r7, #0]
 8012b72:	4878      	ldr	r0, [pc, #480]	@ (8012d54 <PrepareFrame+0x21c>)
 8012b74:	f006 fb33 	bl	80191de <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012b78:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012b7a:	b2da      	uxtb	r2, r3
 8012b7c:	4b74      	ldr	r3, [pc, #464]	@ (8012d50 <PrepareFrame+0x218>)
 8012b7e:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	781a      	ldrb	r2, [r3, #0]
 8012b86:	4b72      	ldr	r3, [pc, #456]	@ (8012d50 <PrepareFrame+0x218>)
 8012b88:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	2b07      	cmp	r3, #7
 8012b96:	f000 80b9 	beq.w	8012d0c <PrepareFrame+0x1d4>
 8012b9a:	2b07      	cmp	r3, #7
 8012b9c:	f300 80ce 	bgt.w	8012d3c <PrepareFrame+0x204>
 8012ba0:	2b02      	cmp	r3, #2
 8012ba2:	d006      	beq.n	8012bb2 <PrepareFrame+0x7a>
 8012ba4:	2b04      	cmp	r3, #4
 8012ba6:	f040 80c9 	bne.w	8012d3c <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8012baa:	4b69      	ldr	r3, [pc, #420]	@ (8012d50 <PrepareFrame+0x218>)
 8012bac:	2201      	movs	r2, #1
 8012bae:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8012bb2:	4b67      	ldr	r3, [pc, #412]	@ (8012d50 <PrepareFrame+0x218>)
 8012bb4:	2204      	movs	r2, #4
 8012bb6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8012bba:	4b65      	ldr	r3, [pc, #404]	@ (8012d50 <PrepareFrame+0x218>)
 8012bbc:	4a66      	ldr	r2, [pc, #408]	@ (8012d58 <PrepareFrame+0x220>)
 8012bbe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012bc2:	4b63      	ldr	r3, [pc, #396]	@ (8012d50 <PrepareFrame+0x218>)
 8012bc4:	22ff      	movs	r2, #255	@ 0xff
 8012bc6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	781a      	ldrb	r2, [r3, #0]
 8012bce:	4b60      	ldr	r3, [pc, #384]	@ (8012d50 <PrepareFrame+0x218>)
 8012bd0:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012bd4:	4a5e      	ldr	r2, [pc, #376]	@ (8012d50 <PrepareFrame+0x218>)
 8012bd6:	79fb      	ldrb	r3, [r7, #7]
 8012bd8:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8012bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8012d5c <PrepareFrame+0x224>)
 8012bde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012be2:	4a5b      	ldr	r2, [pc, #364]	@ (8012d50 <PrepareFrame+0x218>)
 8012be4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	781a      	ldrb	r2, [r3, #0]
 8012bec:	4b58      	ldr	r3, [pc, #352]	@ (8012d50 <PrepareFrame+0x218>)
 8012bee:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012bf2:	4b57      	ldr	r3, [pc, #348]	@ (8012d50 <PrepareFrame+0x218>)
 8012bf4:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8012bf8:	4b55      	ldr	r3, [pc, #340]	@ (8012d50 <PrepareFrame+0x218>)
 8012bfa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012bfe:	4b54      	ldr	r3, [pc, #336]	@ (8012d50 <PrepareFrame+0x218>)
 8012c00:	4a54      	ldr	r2, [pc, #336]	@ (8012d54 <PrepareFrame+0x21c>)
 8012c02:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012c06:	f107 0318 	add.w	r3, r7, #24
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f003 fa3e 	bl	801608c <LoRaMacCryptoGetFCntUp>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d001      	beq.n	8012c1a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012c16:	2312      	movs	r3, #18
 8012c18:	e096      	b.n	8012d48 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012c1a:	69bb      	ldr	r3, [r7, #24]
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8012d50 <PrepareFrame+0x218>)
 8012c20:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8012c24:	4b4a      	ldr	r3, [pc, #296]	@ (8012d50 <PrepareFrame+0x218>)
 8012c26:	2200      	movs	r2, #0
 8012c28:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012c2c:	4b48      	ldr	r3, [pc, #288]	@ (8012d50 <PrepareFrame+0x218>)
 8012c2e:	2200      	movs	r2, #0
 8012c30:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	4a46      	ldr	r2, [pc, #280]	@ (8012d50 <PrepareFrame+0x218>)
 8012c38:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012c3c:	f107 0314 	add.w	r3, r7, #20
 8012c40:	4618      	mov	r0, r3
 8012c42:	f002 fbef 	bl	8015424 <LoRaMacCommandsGetSizeSerializedCmds>
 8012c46:	4603      	mov	r3, r0
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d001      	beq.n	8012c50 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c4c:	2313      	movs	r3, #19
 8012c4e:	e07b      	b.n	8012d48 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d074      	beq.n	8012d40 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8012c56:	4b41      	ldr	r3, [pc, #260]	@ (8012d5c <PrepareFrame+0x224>)
 8012c58:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7fe fd13 	bl	8011688 <GetMaxAppPayloadWithoutFOptsLength>
 8012c62:	4603      	mov	r3, r0
 8012c64:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012c66:	4b3a      	ldr	r3, [pc, #232]	@ (8012d50 <PrepareFrame+0x218>)
 8012c68:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d01d      	beq.n	8012cac <PrepareFrame+0x174>
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	2b0f      	cmp	r3, #15
 8012c74:	d81a      	bhi.n	8012cac <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012c76:	f107 0314 	add.w	r3, r7, #20
 8012c7a:	4a39      	ldr	r2, [pc, #228]	@ (8012d60 <PrepareFrame+0x228>)
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	200f      	movs	r0, #15
 8012c80:	f002 fbe6 	bl	8015450 <LoRaMacCommandsSerializeCmds>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d001      	beq.n	8012c8e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c8a:	2313      	movs	r3, #19
 8012c8c:	e05c      	b.n	8012d48 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	f003 030f 	and.w	r3, r3, #15
 8012c94:	b2d9      	uxtb	r1, r3
 8012c96:	68ba      	ldr	r2, [r7, #8]
 8012c98:	7813      	ldrb	r3, [r2, #0]
 8012c9a:	f361 0303 	bfi	r3, r1, #0, #4
 8012c9e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	781a      	ldrb	r2, [r3, #0]
 8012ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8012d50 <PrepareFrame+0x218>)
 8012ca6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8012caa:	e049      	b.n	8012d40 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012cac:	4b28      	ldr	r3, [pc, #160]	@ (8012d50 <PrepareFrame+0x218>)
 8012cae:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d010      	beq.n	8012cd8 <PrepareFrame+0x1a0>
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	2b0f      	cmp	r3, #15
 8012cba:	d90d      	bls.n	8012cd8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012cbc:	7ffb      	ldrb	r3, [r7, #31]
 8012cbe:	f107 0114 	add.w	r1, r7, #20
 8012cc2:	4a28      	ldr	r2, [pc, #160]	@ (8012d64 <PrepareFrame+0x22c>)
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f002 fbc3 	bl	8015450 <LoRaMacCommandsSerializeCmds>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d001      	beq.n	8012cd4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cd0:	2313      	movs	r3, #19
 8012cd2:	e039      	b.n	8012d48 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012cd4:	230a      	movs	r3, #10
 8012cd6:	e037      	b.n	8012d48 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012cd8:	7ffb      	ldrb	r3, [r7, #31]
 8012cda:	f107 0114 	add.w	r1, r7, #20
 8012cde:	4a21      	ldr	r2, [pc, #132]	@ (8012d64 <PrepareFrame+0x22c>)
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f002 fbb5 	bl	8015450 <LoRaMacCommandsSerializeCmds>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d001      	beq.n	8012cf0 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cec:	2313      	movs	r3, #19
 8012cee:	e02b      	b.n	8012d48 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012cf0:	4b17      	ldr	r3, [pc, #92]	@ (8012d50 <PrepareFrame+0x218>)
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8012cf8:	4b15      	ldr	r3, [pc, #84]	@ (8012d50 <PrepareFrame+0x218>)
 8012cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8012d64 <PrepareFrame+0x22c>)
 8012cfc:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	b2da      	uxtb	r2, r3
 8012d04:	4b12      	ldr	r3, [pc, #72]	@ (8012d50 <PrepareFrame+0x218>)
 8012d06:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8012d0a:	e019      	b.n	8012d40 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d018      	beq.n	8012d44 <PrepareFrame+0x20c>
 8012d12:	4b0f      	ldr	r3, [pc, #60]	@ (8012d50 <PrepareFrame+0x218>)
 8012d14:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d013      	beq.n	8012d44 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012d1c:	4812      	ldr	r0, [pc, #72]	@ (8012d68 <PrepareFrame+0x230>)
 8012d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8012d50 <PrepareFrame+0x218>)
 8012d20:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012d24:	461a      	mov	r2, r3
 8012d26:	6839      	ldr	r1, [r7, #0]
 8012d28:	f006 fa59 	bl	80191de <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012d2c:	4b08      	ldr	r3, [pc, #32]	@ (8012d50 <PrepareFrame+0x218>)
 8012d2e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012d32:	3301      	adds	r3, #1
 8012d34:	b29a      	uxth	r2, r3
 8012d36:	4b06      	ldr	r3, [pc, #24]	@ (8012d50 <PrepareFrame+0x218>)
 8012d38:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012d3a:	e003      	b.n	8012d44 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d3c:	2302      	movs	r3, #2
 8012d3e:	e003      	b.n	8012d48 <PrepareFrame+0x210>
            break;
 8012d40:	bf00      	nop
 8012d42:	e000      	b.n	8012d46 <PrepareFrame+0x20e>
            break;
 8012d44:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012d46:	2300      	movs	r3, #0
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3720      	adds	r7, #32
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	20000764 	.word	0x20000764
 8012d54:	2000089c 	.word	0x2000089c
 8012d58:	20000766 	.word	0x20000766
 8012d5c:	20000c98 	.word	0x20000c98
 8012d60:	2000087c 	.word	0x2000087c
 8012d64:	20000c18 	.word	0x20000c18
 8012d68:	20000767 	.word	0x20000767

08012d6c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b08a      	sub	sp, #40	@ 0x28
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	4603      	mov	r3, r0
 8012d74:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d76:	2303      	movs	r3, #3
 8012d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8012d80:	79fb      	ldrb	r3, [r7, #7]
 8012d82:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012d84:	4b4b      	ldr	r3, [pc, #300]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012d86:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012d8a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012d8c:	4b49      	ldr	r3, [pc, #292]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012d8e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8012d92:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012d94:	4b47      	ldr	r3, [pc, #284]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d9a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012d9c:	4b45      	ldr	r3, [pc, #276]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012da2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012da4:	4b44      	ldr	r3, [pc, #272]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012da6:	881b      	ldrh	r3, [r3, #0]
 8012da8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012daa:	4b42      	ldr	r3, [pc, #264]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012dac:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012db0:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012db2:	4b40      	ldr	r3, [pc, #256]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012db4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8012db8:	f107 020f 	add.w	r2, r7, #15
 8012dbc:	f107 0110 	add.w	r1, r7, #16
 8012dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8012ebc <SendFrameOnChannel+0x150>)
 8012dc2:	f004 f886 	bl	8016ed2 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012dc6:	4b3c      	ldr	r3, [pc, #240]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012dc8:	2201      	movs	r2, #1
 8012dca:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012dce:	4b39      	ldr	r3, [pc, #228]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012dd0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012dd4:	b2da      	uxtb	r2, r3
 8012dd6:	4b38      	ldr	r3, [pc, #224]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012dd8:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8012ddc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012de0:	4b35      	ldr	r3, [pc, #212]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012de2:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8012de6:	79fb      	ldrb	r3, [r7, #7]
 8012de8:	4a33      	ldr	r2, [pc, #204]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012dea:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012dee:	4b32      	ldr	r3, [pc, #200]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012df0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012df4:	4a30      	ldr	r2, [pc, #192]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012df6:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012dfc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012e00:	4a2d      	ldr	r2, [pc, #180]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e02:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012e06:	f002 f85a 	bl	8014ebe <LoRaMacClassBIsBeaconModeActive>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00b      	beq.n	8012e28 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012e10:	4b29      	ldr	r3, [pc, #164]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e12:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012e16:	4618      	mov	r0, r3
 8012e18:	f002 f8bc 	bl	8014f94 <LoRaMacClassBIsUplinkCollision>
 8012e1c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8012e1e:	6a3b      	ldr	r3, [r7, #32]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012e24:	2310      	movs	r3, #16
 8012e26:	e040      	b.n	8012eaa <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012e28:	4b22      	ldr	r3, [pc, #136]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012e2a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012e2e:	2b01      	cmp	r3, #1
 8012e30:	d101      	bne.n	8012e36 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8012e32:	f002 f8b9 	bl	8014fa8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012e36:	f002 f853 	bl	8014ee0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8012e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8012eb4 <SendFrameOnChannel+0x148>)
 8012e3c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012e40:	b2db      	uxtb	r3, r3
 8012e42:	4a1d      	ldr	r2, [pc, #116]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e44:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8012e48:	4611      	mov	r1, r2
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7ff fc2c 	bl	80126a8 <SecureFrame>
 8012e50:	4603      	mov	r3, r0
 8012e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8012e56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d002      	beq.n	8012e64 <SendFrameOnChannel+0xf8>
    {
        return status;
 8012e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e62:	e022      	b.n	8012eaa <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012e64:	4b14      	ldr	r3, [pc, #80]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e66:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012e6a:	f043 0302 	orr.w	r3, r3, #2
 8012e6e:	4a12      	ldr	r2, [pc, #72]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e70:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8012e74:	4b10      	ldr	r3, [pc, #64]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e76:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	b2da      	uxtb	r2, r3
 8012e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e80:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012e84:	4b0c      	ldr	r3, [pc, #48]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e86:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8012e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e8c:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8012e90:	4b09      	ldr	r3, [pc, #36]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012e98:	4b09      	ldr	r3, [pc, #36]	@ (8012ec0 <SendFrameOnChannel+0x154>)
 8012e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e9c:	4a06      	ldr	r2, [pc, #24]	@ (8012eb8 <SendFrameOnChannel+0x14c>)
 8012e9e:	8812      	ldrh	r2, [r2, #0]
 8012ea0:	b2d2      	uxtb	r2, r2
 8012ea2:	4611      	mov	r1, r2
 8012ea4:	4807      	ldr	r0, [pc, #28]	@ (8012ec4 <SendFrameOnChannel+0x158>)
 8012ea6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012ea8:	2300      	movs	r3, #0
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3728      	adds	r7, #40	@ 0x28
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	20000c98 	.word	0x20000c98
 8012eb8:	20000764 	.word	0x20000764
 8012ebc:	20000b80 	.word	0x20000b80
 8012ec0:	0801ff20 	.word	0x0801ff20
 8012ec4:	20000766 	.word	0x20000766

08012ec8 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	4603      	mov	r3, r0
 8012ed0:	6039      	str	r1, [r7, #0]
 8012ed2:	80fb      	strh	r3, [r7, #6]
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012ed8:	4b09      	ldr	r3, [pc, #36]	@ (8012f00 <SetTxContinuousWave+0x38>)
 8012eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012edc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012ee0:	88fa      	ldrh	r2, [r7, #6]
 8012ee2:	6838      	ldr	r0, [r7, #0]
 8012ee4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012ee6:	4b07      	ldr	r3, [pc, #28]	@ (8012f04 <SetTxContinuousWave+0x3c>)
 8012ee8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012eec:	f043 0302 	orr.w	r3, r3, #2
 8012ef0:	4a04      	ldr	r2, [pc, #16]	@ (8012f04 <SetTxContinuousWave+0x3c>)
 8012ef2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012ef6:	2300      	movs	r3, #0
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3708      	adds	r7, #8
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	0801ff20 	.word	0x0801ff20
 8012f04:	20000764 	.word	0x20000764

08012f08 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012f12:	4b49      	ldr	r3, [pc, #292]	@ (8013038 <RestoreNvmData+0x130>)
 8012f14:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	d001      	beq.n	8012f20 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	e087      	b.n	8013030 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8012f20:	2124      	movs	r1, #36	@ 0x24
 8012f22:	4846      	ldr	r0, [pc, #280]	@ (801303c <RestoreNvmData+0x134>)
 8012f24:	f006 f9b0 	bl	8019288 <Crc32>
 8012f28:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8012f2a:	4b44      	ldr	r3, [pc, #272]	@ (801303c <RestoreNvmData+0x134>)
 8012f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d001      	beq.n	8012f38 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012f34:	2317      	movs	r3, #23
 8012f36:	e07b      	b.n	8013030 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012f38:	211c      	movs	r1, #28
 8012f3a:	4841      	ldr	r0, [pc, #260]	@ (8013040 <RestoreNvmData+0x138>)
 8012f3c:	f006 f9a4 	bl	8019288 <Crc32>
 8012f40:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8012f42:	4b3e      	ldr	r3, [pc, #248]	@ (801303c <RestoreNvmData+0x134>)
 8012f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d001      	beq.n	8012f50 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012f4c:	2317      	movs	r3, #23
 8012f4e:	e06f      	b.n	8013030 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8012f50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012f54:	483b      	ldr	r0, [pc, #236]	@ (8013044 <RestoreNvmData+0x13c>)
 8012f56:	f006 f997 	bl	8019288 <Crc32>
 8012f5a:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012f5c:	4b37      	ldr	r3, [pc, #220]	@ (801303c <RestoreNvmData+0x134>)
 8012f5e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d001      	beq.n	8012f6c <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012f68:	2317      	movs	r3, #23
 8012f6a:	e061      	b.n	8013030 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012f6c:	21d4      	movs	r1, #212	@ 0xd4
 8012f6e:	4836      	ldr	r0, [pc, #216]	@ (8013048 <RestoreNvmData+0x140>)
 8012f70:	f006 f98a 	bl	8019288 <Crc32>
 8012f74:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012f76:	4b31      	ldr	r3, [pc, #196]	@ (801303c <RestoreNvmData+0x134>)
 8012f78:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d001      	beq.n	8012f86 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012f82:	2317      	movs	r3, #23
 8012f84:	e054      	b.n	8013030 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8012f86:	2100      	movs	r1, #0
 8012f88:	4830      	ldr	r0, [pc, #192]	@ (801304c <RestoreNvmData+0x144>)
 8012f8a:	f006 f97d 	bl	8019288 <Crc32>
 8012f8e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8012f90:	4b2a      	ldr	r3, [pc, #168]	@ (801303c <RestoreNvmData+0x134>)
 8012f92:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d001      	beq.n	8012fa0 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012f9c:	2317      	movs	r3, #23
 8012f9e:	e047      	b.n	8013030 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8012fa0:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8012fa4:	482a      	ldr	r0, [pc, #168]	@ (8013050 <RestoreNvmData+0x148>)
 8012fa6:	f006 f96f 	bl	8019288 <Crc32>
 8012faa:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8012fac:	4b23      	ldr	r3, [pc, #140]	@ (801303c <RestoreNvmData+0x134>)
 8012fae:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 8012fb2:	687a      	ldr	r2, [r7, #4]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d001      	beq.n	8012fbc <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012fb8:	2317      	movs	r3, #23
 8012fba:	e039      	b.n	8013030 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8012fbc:	2114      	movs	r1, #20
 8012fbe:	4825      	ldr	r0, [pc, #148]	@ (8013054 <RestoreNvmData+0x14c>)
 8012fc0:	f006 f962 	bl	8019288 <Crc32>
 8012fc4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8012fc6:	4b1d      	ldr	r3, [pc, #116]	@ (801303c <RestoreNvmData+0x134>)
 8012fc8:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 8012fcc:	687a      	ldr	r2, [r7, #4]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d001      	beq.n	8012fd6 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012fd2:	2317      	movs	r3, #23
 8012fd4:	e02c      	b.n	8013030 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8012fd6:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012fda:	4918      	ldr	r1, [pc, #96]	@ (801303c <RestoreNvmData+0x134>)
 8012fdc:	481e      	ldr	r0, [pc, #120]	@ (8013058 <RestoreNvmData+0x150>)
 8012fde:	f006 f8fe 	bl	80191de <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8012fe2:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012fe6:	2100      	movs	r1, #0
 8012fe8:	4814      	ldr	r0, [pc, #80]	@ (801303c <RestoreNvmData+0x134>)
 8012fea:	f006 f933 	bl	8019254 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012fee:	4b12      	ldr	r3, [pc, #72]	@ (8013038 <RestoreNvmData+0x130>)
 8012ff0:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012ff4:	4b10      	ldr	r3, [pc, #64]	@ (8013038 <RestoreNvmData+0x130>)
 8012ff6:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012ffa:	4b17      	ldr	r3, [pc, #92]	@ (8013058 <RestoreNvmData+0x150>)
 8012ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8013038 <RestoreNvmData+0x130>)
 8013000:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013004:	4b14      	ldr	r3, [pc, #80]	@ (8013058 <RestoreNvmData+0x150>)
 8013006:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801300a:	4b0b      	ldr	r3, [pc, #44]	@ (8013038 <RestoreNvmData+0x130>)
 801300c:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013010:	4b09      	ldr	r3, [pc, #36]	@ (8013038 <RestoreNvmData+0x130>)
 8013012:	2201      	movs	r2, #1
 8013014:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013018:	4b07      	ldr	r3, [pc, #28]	@ (8013038 <RestoreNvmData+0x130>)
 801301a:	2202      	movs	r2, #2
 801301c:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013020:	4b0e      	ldr	r3, [pc, #56]	@ (801305c <RestoreNvmData+0x154>)
 8013022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013024:	4a0c      	ldr	r2, [pc, #48]	@ (8013058 <RestoreNvmData+0x150>)
 8013026:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801302a:	4610      	mov	r0, r2
 801302c:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801302e:	2300      	movs	r3, #0
}
 8013030:	4618      	mov	r0, r3
 8013032:	3708      	adds	r7, #8
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	20000764 	.word	0x20000764
 801303c:	20001254 	.word	0x20001254
 8013040:	2000127c 	.word	0x2000127c
 8013044:	2000129c 	.word	0x2000129c
 8013048:	200013a0 	.word	0x200013a0
 801304c:	20001478 	.word	0x20001478
 8013050:	2000147c 	.word	0x2000147c
 8013054:	200017f8 	.word	0x200017f8
 8013058:	20000c98 	.word	0x20000c98
 801305c:	0801ff20 	.word	0x0801ff20

08013060 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013060:	b480      	push	{r7}
 8013062:	b083      	sub	sp, #12
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d002      	beq.n	8013076 <DetermineFrameType+0x16>
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d101      	bne.n	801307a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013076:	2303      	movs	r3, #3
 8013078:	e03b      	b.n	80130f2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	7b1b      	ldrb	r3, [r3, #12]
 801307e:	f003 030f 	and.w	r3, r3, #15
 8013082:	b2db      	uxtb	r3, r3
 8013084:	2b00      	cmp	r3, #0
 8013086:	d008      	beq.n	801309a <DetermineFrameType+0x3a>
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	2200      	movs	r2, #0
 8013096:	701a      	strb	r2, [r3, #0]
 8013098:	e02a      	b.n	80130f0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d103      	bne.n	80130ac <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	2201      	movs	r2, #1
 80130a8:	701a      	strb	r2, [r3, #0]
 80130aa:	e021      	b.n	80130f0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	7b1b      	ldrb	r3, [r3, #12]
 80130b0:	f003 030f 	and.w	r3, r3, #15
 80130b4:	b2db      	uxtb	r3, r3
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d108      	bne.n	80130cc <DetermineFrameType+0x6c>
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d103      	bne.n	80130cc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	2202      	movs	r2, #2
 80130c8:	701a      	strb	r2, [r3, #0]
 80130ca:	e011      	b.n	80130f0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	7b1b      	ldrb	r3, [r3, #12]
 80130d0:	f003 030f 	and.w	r3, r3, #15
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d108      	bne.n	80130ec <DetermineFrameType+0x8c>
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d003      	beq.n	80130ec <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	2203      	movs	r2, #3
 80130e8:	701a      	strb	r2, [r3, #0]
 80130ea:	e001      	b.n	80130f0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80130ec:	2318      	movs	r3, #24
 80130ee:	e000      	b.n	80130f2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80130f0:	2300      	movs	r3, #0
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	370c      	adds	r7, #12
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bc80      	pop	{r7}
 80130fa:	4770      	bx	lr

080130fc <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80130fc:	b480      	push	{r7}
 80130fe:	b083      	sub	sp, #12
 8013100:	af00      	add	r7, sp, #0
 8013102:	4603      	mov	r3, r0
 8013104:	460a      	mov	r2, r1
 8013106:	71fb      	strb	r3, [r7, #7]
 8013108:	4613      	mov	r3, r2
 801310a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 801310c:	79fa      	ldrb	r2, [r7, #7]
 801310e:	79bb      	ldrb	r3, [r7, #6]
 8013110:	429a      	cmp	r2, r3
 8013112:	d301      	bcc.n	8013118 <CheckRetrans+0x1c>
    {
        return true;
 8013114:	2301      	movs	r3, #1
 8013116:	e000      	b.n	801311a <CheckRetrans+0x1e>
    }
    return false;
 8013118:	2300      	movs	r3, #0
}
 801311a:	4618      	mov	r0, r3
 801311c:	370c      	adds	r7, #12
 801311e:	46bd      	mov	sp, r7
 8013120:	bc80      	pop	{r7}
 8013122:	4770      	bx	lr

08013124 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8013124:	b580      	push	{r7, lr}
 8013126:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8013128:	4b12      	ldr	r3, [pc, #72]	@ (8013174 <CheckRetransUnconfirmedUplink+0x50>)
 801312a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801312e:	4a12      	ldr	r2, [pc, #72]	@ (8013178 <CheckRetransUnconfirmedUplink+0x54>)
 8013130:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8013134:	4611      	mov	r1, r2
 8013136:	4618      	mov	r0, r3
 8013138:	f7ff ffe0 	bl	80130fc <CheckRetrans>
 801313c:	4603      	mov	r3, r0
 801313e:	2b00      	cmp	r3, #0
 8013140:	d001      	beq.n	8013146 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8013142:	2301      	movs	r3, #1
 8013144:	e014      	b.n	8013170 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013146:	4b0b      	ldr	r3, [pc, #44]	@ (8013174 <CheckRetransUnconfirmedUplink+0x50>)
 8013148:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801314c:	f003 0302 	and.w	r3, r3, #2
 8013150:	b2db      	uxtb	r3, r3
 8013152:	2b00      	cmp	r3, #0
 8013154:	d00b      	beq.n	801316e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013156:	4b07      	ldr	r3, [pc, #28]	@ (8013174 <CheckRetransUnconfirmedUplink+0x50>)
 8013158:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801315c:	2b00      	cmp	r3, #0
 801315e:	d004      	beq.n	801316a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8013160:	4b04      	ldr	r3, [pc, #16]	@ (8013174 <CheckRetransUnconfirmedUplink+0x50>)
 8013162:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013166:	2b01      	cmp	r3, #1
 8013168:	d101      	bne.n	801316e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801316a:	2301      	movs	r3, #1
 801316c:	e000      	b.n	8013170 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801316e:	2300      	movs	r3, #0
}
 8013170:	4618      	mov	r0, r3
 8013172:	bd80      	pop	{r7, pc}
 8013174:	20000764 	.word	0x20000764
 8013178:	20000c98 	.word	0x20000c98

0801317c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801317c:	b580      	push	{r7, lr}
 801317e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8013180:	4b10      	ldr	r3, [pc, #64]	@ (80131c4 <CheckRetransConfirmedUplink+0x48>)
 8013182:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8013186:	4a10      	ldr	r2, [pc, #64]	@ (80131c8 <CheckRetransConfirmedUplink+0x4c>)
 8013188:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 801318c:	4611      	mov	r1, r2
 801318e:	4618      	mov	r0, r3
 8013190:	f7ff ffb4 	bl	80130fc <CheckRetrans>
 8013194:	4603      	mov	r3, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d001      	beq.n	801319e <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801319a:	2301      	movs	r3, #1
 801319c:	e00f      	b.n	80131be <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801319e:	4b09      	ldr	r3, [pc, #36]	@ (80131c4 <CheckRetransConfirmedUplink+0x48>)
 80131a0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80131a4:	f003 0302 	and.w	r3, r3, #2
 80131a8:	b2db      	uxtb	r3, r3
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d006      	beq.n	80131bc <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80131ae:	4b05      	ldr	r3, [pc, #20]	@ (80131c4 <CheckRetransConfirmedUplink+0x48>)
 80131b0:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d001      	beq.n	80131bc <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80131b8:	2301      	movs	r3, #1
 80131ba:	e000      	b.n	80131be <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80131bc:	2300      	movs	r3, #0
}
 80131be:	4618      	mov	r0, r3
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	20000764 	.word	0x20000764
 80131c8:	20000c98 	.word	0x20000c98

080131cc <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131da:	d002      	beq.n	80131e2 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	3301      	adds	r3, #1
 80131e0:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80131e2:	687b      	ldr	r3, [r7, #4]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	370c      	adds	r7, #12
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bc80      	pop	{r7}
 80131ec:	4770      	bx	lr
	...

080131f0 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80131f4:	4b1a      	ldr	r3, [pc, #104]	@ (8013260 <StopRetransmission+0x70>)
 80131f6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80131fa:	f003 0302 	and.w	r3, r3, #2
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	2b00      	cmp	r3, #0
 8013202:	d009      	beq.n	8013218 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013204:	4b16      	ldr	r3, [pc, #88]	@ (8013260 <StopRetransmission+0x70>)
 8013206:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801320a:	2b00      	cmp	r3, #0
 801320c:	d011      	beq.n	8013232 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801320e:	4b14      	ldr	r3, [pc, #80]	@ (8013260 <StopRetransmission+0x70>)
 8013210:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013214:	2b01      	cmp	r3, #1
 8013216:	d00c      	beq.n	8013232 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013218:	4b12      	ldr	r3, [pc, #72]	@ (8013264 <StopRetransmission+0x74>)
 801321a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801321e:	2b00      	cmp	r3, #0
 8013220:	d007      	beq.n	8013232 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8013222:	4b10      	ldr	r3, [pc, #64]	@ (8013264 <StopRetransmission+0x74>)
 8013224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013226:	4618      	mov	r0, r3
 8013228:	f7ff ffd0 	bl	80131cc <IncreaseAdrAckCounter>
 801322c:	4603      	mov	r3, r0
 801322e:	4a0d      	ldr	r2, [pc, #52]	@ (8013264 <StopRetransmission+0x74>)
 8013230:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013232:	4b0b      	ldr	r3, [pc, #44]	@ (8013260 <StopRetransmission+0x70>)
 8013234:	2200      	movs	r2, #0
 8013236:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 801323a:	4b09      	ldr	r3, [pc, #36]	@ (8013260 <StopRetransmission+0x70>)
 801323c:	2200      	movs	r2, #0
 801323e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8013242:	4b07      	ldr	r3, [pc, #28]	@ (8013260 <StopRetransmission+0x70>)
 8013244:	2200      	movs	r2, #0
 8013246:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801324a:	4b05      	ldr	r3, [pc, #20]	@ (8013260 <StopRetransmission+0x70>)
 801324c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013250:	f023 0302 	bic.w	r3, r3, #2
 8013254:	4a02      	ldr	r2, [pc, #8]	@ (8013260 <StopRetransmission+0x70>)
 8013256:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 801325a:	2301      	movs	r3, #1
}
 801325c:	4618      	mov	r0, r3
 801325e:	bd80      	pop	{r7, pc}
 8013260:	20000764 	.word	0x20000764
 8013264:	20000c98 	.word	0x20000c98

08013268 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013268:	b580      	push	{r7, lr}
 801326a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801326c:	4b08      	ldr	r3, [pc, #32]	@ (8013290 <OnMacProcessNotify+0x28>)
 801326e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8013272:	2b00      	cmp	r3, #0
 8013274:	d00a      	beq.n	801328c <OnMacProcessNotify+0x24>
 8013276:	4b06      	ldr	r3, [pc, #24]	@ (8013290 <OnMacProcessNotify+0x28>)
 8013278:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801327c:	695b      	ldr	r3, [r3, #20]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d004      	beq.n	801328c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013282:	4b03      	ldr	r3, [pc, #12]	@ (8013290 <OnMacProcessNotify+0x28>)
 8013284:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8013288:	695b      	ldr	r3, [r3, #20]
 801328a:	4798      	blx	r3
    }
}
 801328c:	bf00      	nop
 801328e:	bd80      	pop	{r7, pc}
 8013290:	20000764 	.word	0x20000764

08013294 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	4603      	mov	r3, r0
 801329c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801329e:	4b0b      	ldr	r3, [pc, #44]	@ (80132cc <CallNvmDataChangeCallback+0x38>)
 80132a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00c      	beq.n	80132c2 <CallNvmDataChangeCallback+0x2e>
 80132a8:	4b08      	ldr	r3, [pc, #32]	@ (80132cc <CallNvmDataChangeCallback+0x38>)
 80132aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80132ae:	691b      	ldr	r3, [r3, #16]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d006      	beq.n	80132c2 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80132b4:	4b05      	ldr	r3, [pc, #20]	@ (80132cc <CallNvmDataChangeCallback+0x38>)
 80132b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80132ba:	691b      	ldr	r3, [r3, #16]
 80132bc:	88fa      	ldrh	r2, [r7, #6]
 80132be:	4610      	mov	r0, r2
 80132c0:	4798      	blx	r3
    }
}
 80132c2:	bf00      	nop
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	20000764 	.word	0x20000764

080132d0 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80132d0:	b480      	push	{r7}
 80132d2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80132d4:	4b0b      	ldr	r3, [pc, #44]	@ (8013304 <IsRequestPending+0x34>)
 80132d6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80132da:	f003 0304 	and.w	r3, r3, #4
 80132de:	b2db      	uxtb	r3, r3
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d107      	bne.n	80132f4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80132e4:	4b07      	ldr	r3, [pc, #28]	@ (8013304 <IsRequestPending+0x34>)
 80132e6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80132ea:	f003 0301 	and.w	r3, r3, #1
 80132ee:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d001      	beq.n	80132f8 <IsRequestPending+0x28>
    {
        return 1;
 80132f4:	2301      	movs	r3, #1
 80132f6:	e000      	b.n	80132fa <IsRequestPending+0x2a>
    }
    return 0;
 80132f8:	2300      	movs	r3, #0
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bc80      	pop	{r7}
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	20000764 	.word	0x20000764

08013308 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013308:	b590      	push	{r4, r7, lr}
 801330a:	b091      	sub	sp, #68	@ 0x44
 801330c:	af02      	add	r7, sp, #8
 801330e:	6178      	str	r0, [r7, #20]
 8013310:	6139      	str	r1, [r7, #16]
 8013312:	4613      	mov	r3, r2
 8013314:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d002      	beq.n	8013322 <LoRaMacInitialization+0x1a>
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d101      	bne.n	8013326 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013322:	2303      	movs	r3, #3
 8013324:	e27a      	b.n	801381c <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00b      	beq.n	8013346 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013332:	2b00      	cmp	r3, #0
 8013334:	d007      	beq.n	8013346 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801333a:	2b00      	cmp	r3, #0
 801333c:	d003      	beq.n	8013346 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013342:	2b00      	cmp	r3, #0
 8013344:	d101      	bne.n	801334a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013346:	2303      	movs	r3, #3
 8013348:	e268      	b.n	801381c <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801334a:	7bfb      	ldrb	r3, [r7, #15]
 801334c:	4618      	mov	r0, r3
 801334e:	f003 fd0a 	bl	8016d66 <RegionIsActive>
 8013352:	4603      	mov	r3, r0
 8013354:	f083 0301 	eor.w	r3, r3, #1
 8013358:	b2db      	uxtb	r3, r3
 801335a:	2b00      	cmp	r3, #0
 801335c:	d001      	beq.n	8013362 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801335e:	2309      	movs	r3, #9
 8013360:	e25c      	b.n	801381c <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013362:	6978      	ldr	r0, [r7, #20]
 8013364:	f002 f996 	bl	8015694 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013368:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 801336c:	2100      	movs	r1, #0
 801336e:	48c7      	ldr	r0, [pc, #796]	@ (801368c <LoRaMacInitialization+0x384>)
 8013370:	f005 ff70 	bl	8019254 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013374:	f240 5234 	movw	r2, #1332	@ 0x534
 8013378:	2100      	movs	r1, #0
 801337a:	48c5      	ldr	r0, [pc, #788]	@ (8013690 <LoRaMacInitialization+0x388>)
 801337c:	f005 ff6a 	bl	8019254 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013380:	4ac2      	ldr	r2, [pc, #776]	@ (801368c <LoRaMacInitialization+0x384>)
 8013382:	7bfb      	ldrb	r3, [r7, #15]
 8013384:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013388:	4bc0      	ldr	r3, [pc, #768]	@ (801368c <LoRaMacInitialization+0x384>)
 801338a:	2200      	movs	r2, #0
 801338c:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8013390:	4bbe      	ldr	r3, [pc, #760]	@ (801368c <LoRaMacInitialization+0x384>)
 8013392:	2200      	movs	r2, #0
 8013394:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013398:	4bbc      	ldr	r3, [pc, #752]	@ (801368c <LoRaMacInitialization+0x384>)
 801339a:	4abe      	ldr	r2, [pc, #760]	@ (8013694 <LoRaMacInitialization+0x38c>)
 801339c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80133a0:	2300      	movs	r3, #0
 80133a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80133a6:	4bbc      	ldr	r3, [pc, #752]	@ (8013698 <LoRaMacInitialization+0x390>)
 80133a8:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80133aa:	4bbc      	ldr	r3, [pc, #752]	@ (801369c <LoRaMacInitialization+0x394>)
 80133ac:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80133ae:	4bbc      	ldr	r3, [pc, #752]	@ (80136a0 <LoRaMacInitialization+0x398>)
 80133b0:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80133b2:	4bb6      	ldr	r3, [pc, #728]	@ (801368c <LoRaMacInitialization+0x384>)
 80133b4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80133b8:	f107 021c 	add.w	r2, r7, #28
 80133bc:	4611      	mov	r1, r2
 80133be:	4618      	mov	r0, r3
 80133c0:	f003 fd0a 	bl	8016dd8 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80133c4:	230f      	movs	r3, #15
 80133c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80133ca:	4bb0      	ldr	r3, [pc, #704]	@ (801368c <LoRaMacInitialization+0x384>)
 80133cc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80133d0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80133d4:	4611      	mov	r1, r2
 80133d6:	4618      	mov	r0, r3
 80133d8:	f003 fcd5 	bl	8016d86 <RegionGetPhyParam>
 80133dc:	4603      	mov	r3, r0
 80133de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80133e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	bf14      	ite	ne
 80133e6:	2301      	movne	r3, #1
 80133e8:	2300      	moveq	r3, #0
 80133ea:	b2da      	uxtb	r2, r3
 80133ec:	4ba7      	ldr	r3, [pc, #668]	@ (801368c <LoRaMacInitialization+0x384>)
 80133ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80133f2:	230a      	movs	r3, #10
 80133f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80133f8:	4ba4      	ldr	r3, [pc, #656]	@ (801368c <LoRaMacInitialization+0x384>)
 80133fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80133fe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013402:	4611      	mov	r1, r2
 8013404:	4618      	mov	r0, r3
 8013406:	f003 fcbe 	bl	8016d86 <RegionGetPhyParam>
 801340a:	4603      	mov	r3, r0
 801340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013410:	b25a      	sxtb	r2, r3
 8013412:	4b9e      	ldr	r3, [pc, #632]	@ (801368c <LoRaMacInitialization+0x384>)
 8013414:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013418:	2306      	movs	r3, #6
 801341a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801341e:	4b9b      	ldr	r3, [pc, #620]	@ (801368c <LoRaMacInitialization+0x384>)
 8013420:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013424:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013428:	4611      	mov	r1, r2
 801342a:	4618      	mov	r0, r3
 801342c:	f003 fcab 	bl	8016d86 <RegionGetPhyParam>
 8013430:	4603      	mov	r3, r0
 8013432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013436:	b25a      	sxtb	r2, r3
 8013438:	4b94      	ldr	r3, [pc, #592]	@ (801368c <LoRaMacInitialization+0x384>)
 801343a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801343e:	2310      	movs	r3, #16
 8013440:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013444:	4b91      	ldr	r3, [pc, #580]	@ (801368c <LoRaMacInitialization+0x384>)
 8013446:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801344a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801344e:	4611      	mov	r1, r2
 8013450:	4618      	mov	r0, r3
 8013452:	f003 fc98 	bl	8016d86 <RegionGetPhyParam>
 8013456:	4603      	mov	r3, r0
 8013458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801345c:	4a8b      	ldr	r2, [pc, #556]	@ (801368c <LoRaMacInitialization+0x384>)
 801345e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013462:	2311      	movs	r3, #17
 8013464:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013468:	4b88      	ldr	r3, [pc, #544]	@ (801368c <LoRaMacInitialization+0x384>)
 801346a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801346e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013472:	4611      	mov	r1, r2
 8013474:	4618      	mov	r0, r3
 8013476:	f003 fc86 	bl	8016d86 <RegionGetPhyParam>
 801347a:	4603      	mov	r3, r0
 801347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013480:	4a82      	ldr	r2, [pc, #520]	@ (801368c <LoRaMacInitialization+0x384>)
 8013482:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8013486:	2312      	movs	r3, #18
 8013488:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801348c:	4b7f      	ldr	r3, [pc, #508]	@ (801368c <LoRaMacInitialization+0x384>)
 801348e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013492:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013496:	4611      	mov	r1, r2
 8013498:	4618      	mov	r0, r3
 801349a:	f003 fc74 	bl	8016d86 <RegionGetPhyParam>
 801349e:	4603      	mov	r3, r0
 80134a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80134a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a4:	4a79      	ldr	r2, [pc, #484]	@ (801368c <LoRaMacInitialization+0x384>)
 80134a6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80134aa:	2313      	movs	r3, #19
 80134ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134b0:	4b76      	ldr	r3, [pc, #472]	@ (801368c <LoRaMacInitialization+0x384>)
 80134b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134b6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80134ba:	4611      	mov	r1, r2
 80134bc:	4618      	mov	r0, r3
 80134be:	f003 fc62 	bl	8016d86 <RegionGetPhyParam>
 80134c2:	4603      	mov	r3, r0
 80134c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80134c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134c8:	4a70      	ldr	r2, [pc, #448]	@ (801368c <LoRaMacInitialization+0x384>)
 80134ca:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80134ce:	2314      	movs	r3, #20
 80134d0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134d4:	4b6d      	ldr	r3, [pc, #436]	@ (801368c <LoRaMacInitialization+0x384>)
 80134d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80134de:	4611      	mov	r1, r2
 80134e0:	4618      	mov	r0, r3
 80134e2:	f003 fc50 	bl	8016d86 <RegionGetPhyParam>
 80134e6:	4603      	mov	r3, r0
 80134e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80134ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ec:	4a67      	ldr	r2, [pc, #412]	@ (801368c <LoRaMacInitialization+0x384>)
 80134ee:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80134f2:	2316      	movs	r3, #22
 80134f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134f8:	4b64      	ldr	r3, [pc, #400]	@ (801368c <LoRaMacInitialization+0x384>)
 80134fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134fe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013502:	4611      	mov	r1, r2
 8013504:	4618      	mov	r0, r3
 8013506:	f003 fc3e 	bl	8016d86 <RegionGetPhyParam>
 801350a:	4603      	mov	r3, r0
 801350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013510:	b2da      	uxtb	r2, r3
 8013512:	4b5e      	ldr	r3, [pc, #376]	@ (801368c <LoRaMacInitialization+0x384>)
 8013514:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013518:	2317      	movs	r3, #23
 801351a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801351e:	4b5b      	ldr	r3, [pc, #364]	@ (801368c <LoRaMacInitialization+0x384>)
 8013520:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013524:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013528:	4611      	mov	r1, r2
 801352a:	4618      	mov	r0, r3
 801352c:	f003 fc2b 	bl	8016d86 <RegionGetPhyParam>
 8013530:	4603      	mov	r3, r0
 8013532:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013536:	4a55      	ldr	r2, [pc, #340]	@ (801368c <LoRaMacInitialization+0x384>)
 8013538:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801353e:	4a53      	ldr	r2, [pc, #332]	@ (801368c <LoRaMacInitialization+0x384>)
 8013540:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8013544:	2318      	movs	r3, #24
 8013546:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801354a:	4b50      	ldr	r3, [pc, #320]	@ (801368c <LoRaMacInitialization+0x384>)
 801354c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013550:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013554:	4611      	mov	r1, r2
 8013556:	4618      	mov	r0, r3
 8013558:	f003 fc15 	bl	8016d86 <RegionGetPhyParam>
 801355c:	4603      	mov	r3, r0
 801355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8013560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013562:	b2da      	uxtb	r2, r3
 8013564:	4b49      	ldr	r3, [pc, #292]	@ (801368c <LoRaMacInitialization+0x384>)
 8013566:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801356c:	b2da      	uxtb	r2, r3
 801356e:	4b47      	ldr	r3, [pc, #284]	@ (801368c <LoRaMacInitialization+0x384>)
 8013570:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8013574:	231d      	movs	r3, #29
 8013576:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801357a:	4b44      	ldr	r3, [pc, #272]	@ (801368c <LoRaMacInitialization+0x384>)
 801357c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013580:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013584:	4611      	mov	r1, r2
 8013586:	4618      	mov	r0, r3
 8013588:	f003 fbfd 	bl	8016d86 <RegionGetPhyParam>
 801358c:	4603      	mov	r3, r0
 801358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013592:	b2da      	uxtb	r2, r3
 8013594:	4b3d      	ldr	r3, [pc, #244]	@ (801368c <LoRaMacInitialization+0x384>)
 8013596:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801359a:	231e      	movs	r3, #30
 801359c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135a0:	4b3a      	ldr	r3, [pc, #232]	@ (801368c <LoRaMacInitialization+0x384>)
 80135a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135a6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80135aa:	4611      	mov	r1, r2
 80135ac:	4618      	mov	r0, r3
 80135ae:	f003 fbea 	bl	8016d86 <RegionGetPhyParam>
 80135b2:	4603      	mov	r3, r0
 80135b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80135b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b8:	b2da      	uxtb	r2, r3
 80135ba:	4b34      	ldr	r3, [pc, #208]	@ (801368c <LoRaMacInitialization+0x384>)
 80135bc:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80135c0:	231f      	movs	r3, #31
 80135c2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135c6:	4b31      	ldr	r3, [pc, #196]	@ (801368c <LoRaMacInitialization+0x384>)
 80135c8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135cc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80135d0:	4611      	mov	r1, r2
 80135d2:	4618      	mov	r0, r3
 80135d4:	f003 fbd7 	bl	8016d86 <RegionGetPhyParam>
 80135d8:	4603      	mov	r3, r0
 80135da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80135dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135de:	4a2b      	ldr	r2, [pc, #172]	@ (801368c <LoRaMacInitialization+0x384>)
 80135e0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80135e4:	2320      	movs	r3, #32
 80135e6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135ea:	4b28      	ldr	r3, [pc, #160]	@ (801368c <LoRaMacInitialization+0x384>)
 80135ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135f0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80135f4:	4611      	mov	r1, r2
 80135f6:	4618      	mov	r0, r3
 80135f8:	f003 fbc5 	bl	8016d86 <RegionGetPhyParam>
 80135fc:	4603      	mov	r3, r0
 80135fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013602:	4a22      	ldr	r2, [pc, #136]	@ (801368c <LoRaMacInitialization+0x384>)
 8013604:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013608:	230b      	movs	r3, #11
 801360a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801360e:	4b1f      	ldr	r3, [pc, #124]	@ (801368c <LoRaMacInitialization+0x384>)
 8013610:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013614:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013618:	4611      	mov	r1, r2
 801361a:	4618      	mov	r0, r3
 801361c:	f003 fbb3 	bl	8016d86 <RegionGetPhyParam>
 8013620:	4603      	mov	r3, r0
 8013622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8013624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013626:	b29a      	uxth	r2, r3
 8013628:	4b18      	ldr	r3, [pc, #96]	@ (801368c <LoRaMacInitialization+0x384>)
 801362a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801362e:	230c      	movs	r3, #12
 8013630:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013634:	4b15      	ldr	r3, [pc, #84]	@ (801368c <LoRaMacInitialization+0x384>)
 8013636:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801363a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801363e:	4611      	mov	r1, r2
 8013640:	4618      	mov	r0, r3
 8013642:	f003 fba0 	bl	8016d86 <RegionGetPhyParam>
 8013646:	4603      	mov	r3, r0
 8013648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 801364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801364c:	b29a      	uxth	r2, r3
 801364e:	4b0f      	ldr	r3, [pc, #60]	@ (801368c <LoRaMacInitialization+0x384>)
 8013650:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8013654:	4b0d      	ldr	r3, [pc, #52]	@ (801368c <LoRaMacInitialization+0x384>)
 8013656:	2201      	movs	r2, #1
 8013658:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 801365c:	4b0b      	ldr	r3, [pc, #44]	@ (801368c <LoRaMacInitialization+0x384>)
 801365e:	220a      	movs	r2, #10
 8013660:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8013664:	4b09      	ldr	r3, [pc, #36]	@ (801368c <LoRaMacInitialization+0x384>)
 8013666:	2206      	movs	r2, #6
 8013668:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 801366c:	4b07      	ldr	r3, [pc, #28]	@ (801368c <LoRaMacInitialization+0x384>)
 801366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013672:	4a06      	ldr	r2, [pc, #24]	@ (801368c <LoRaMacInitialization+0x384>)
 8013674:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8013676:	4b05      	ldr	r3, [pc, #20]	@ (801368c <LoRaMacInitialization+0x384>)
 8013678:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 801367c:	4b03      	ldr	r3, [pc, #12]	@ (801368c <LoRaMacInitialization+0x384>)
 801367e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8013682:	4b02      	ldr	r3, [pc, #8]	@ (801368c <LoRaMacInitialization+0x384>)
 8013684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013688:	e00c      	b.n	80136a4 <LoRaMacInitialization+0x39c>
 801368a:	bf00      	nop
 801368c:	20000c98 	.word	0x20000c98
 8013690:	20000764 	.word	0x20000764
 8013694:	01000400 	.word	0x01000400
 8013698:	20000ebc 	.word	0x20000ebc
 801369c:	20000ec0 	.word	0x20000ec0
 80136a0:	20001810 	.word	0x20001810
 80136a4:	4a5f      	ldr	r2, [pc, #380]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136a6:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80136a8:	4b5e      	ldr	r3, [pc, #376]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80136ae:	4a5d      	ldr	r2, [pc, #372]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136b0:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80136b2:	4b5c      	ldr	r3, [pc, #368]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80136b8:	4a5a      	ldr	r2, [pc, #360]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136ba:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80136bc:	4b59      	ldr	r3, [pc, #356]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80136c2:	4a58      	ldr	r2, [pc, #352]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136c4:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80136c6:	4b57      	ldr	r3, [pc, #348]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80136cc:	4a55      	ldr	r2, [pc, #340]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136ce:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80136d0:	4b54      	ldr	r3, [pc, #336]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136d2:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 80136d6:	4b53      	ldr	r3, [pc, #332]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80136dc:	4b51      	ldr	r3, [pc, #324]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136de:	2201      	movs	r2, #1
 80136e0:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80136e4:	4a50      	ldr	r2, [pc, #320]	@ (8013828 <LoRaMacInitialization+0x520>)
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 80136ec:	2000      	movs	r0, #0
 80136ee:	f7ff f86b 	bl	80127c8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80136f2:	4b4c      	ldr	r3, [pc, #304]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80136f4:	2201      	movs	r2, #1
 80136f6:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 80136fa:	4a4b      	ldr	r2, [pc, #300]	@ (8013828 <LoRaMacInitialization+0x520>)
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8013702:	4b49      	ldr	r3, [pc, #292]	@ (8013828 <LoRaMacInitialization+0x520>)
 8013704:	2200      	movs	r2, #0
 8013706:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 801370a:	4b47      	ldr	r3, [pc, #284]	@ (8013828 <LoRaMacInitialization+0x520>)
 801370c:	2201      	movs	r2, #1
 801370e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013712:	4b44      	ldr	r3, [pc, #272]	@ (8013824 <LoRaMacInitialization+0x51c>)
 8013714:	2200      	movs	r2, #0
 8013716:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013718:	4b42      	ldr	r3, [pc, #264]	@ (8013824 <LoRaMacInitialization+0x51c>)
 801371a:	2200      	movs	r2, #0
 801371c:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801371e:	2300      	movs	r3, #0
 8013720:	9300      	str	r3, [sp, #0]
 8013722:	4b42      	ldr	r3, [pc, #264]	@ (801382c <LoRaMacInitialization+0x524>)
 8013724:	2200      	movs	r2, #0
 8013726:	f04f 31ff 	mov.w	r1, #4294967295
 801372a:	4841      	ldr	r0, [pc, #260]	@ (8013830 <LoRaMacInitialization+0x528>)
 801372c:	f009 fe00 	bl	801d330 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013730:	2300      	movs	r3, #0
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	4b3f      	ldr	r3, [pc, #252]	@ (8013834 <LoRaMacInitialization+0x52c>)
 8013736:	2200      	movs	r2, #0
 8013738:	f04f 31ff 	mov.w	r1, #4294967295
 801373c:	483e      	ldr	r0, [pc, #248]	@ (8013838 <LoRaMacInitialization+0x530>)
 801373e:	f009 fdf7 	bl	801d330 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013742:	2300      	movs	r3, #0
 8013744:	9300      	str	r3, [sp, #0]
 8013746:	4b3d      	ldr	r3, [pc, #244]	@ (801383c <LoRaMacInitialization+0x534>)
 8013748:	2200      	movs	r2, #0
 801374a:	f04f 31ff 	mov.w	r1, #4294967295
 801374e:	483c      	ldr	r0, [pc, #240]	@ (8013840 <LoRaMacInitialization+0x538>)
 8013750:	f009 fdee 	bl	801d330 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8013754:	2300      	movs	r3, #0
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	4b3a      	ldr	r3, [pc, #232]	@ (8013844 <LoRaMacInitialization+0x53c>)
 801375a:	2200      	movs	r2, #0
 801375c:	f04f 31ff 	mov.w	r1, #4294967295
 8013760:	4839      	ldr	r0, [pc, #228]	@ (8013848 <LoRaMacInitialization+0x540>)
 8013762:	f009 fde5 	bl	801d330 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8013766:	4c2f      	ldr	r4, [pc, #188]	@ (8013824 <LoRaMacInitialization+0x51c>)
 8013768:	463b      	mov	r3, r7
 801376a:	4618      	mov	r0, r3
 801376c:	f009 f9bc 	bl	801cae8 <SysTimeGetMcuTime>
 8013770:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8013774:	463a      	mov	r2, r7
 8013776:	e892 0003 	ldmia.w	r2, {r0, r1}
 801377a:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 801377e:	4b33      	ldr	r3, [pc, #204]	@ (801384c <LoRaMacInitialization+0x544>)
 8013780:	2200      	movs	r2, #0
 8013782:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8013784:	4b28      	ldr	r3, [pc, #160]	@ (8013828 <LoRaMacInitialization+0x520>)
 8013786:	4a32      	ldr	r2, [pc, #200]	@ (8013850 <LoRaMacInitialization+0x548>)
 8013788:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801378c:	4b26      	ldr	r3, [pc, #152]	@ (8013828 <LoRaMacInitialization+0x520>)
 801378e:	4a31      	ldr	r2, [pc, #196]	@ (8013854 <LoRaMacInitialization+0x54c>)
 8013790:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013794:	4b24      	ldr	r3, [pc, #144]	@ (8013828 <LoRaMacInitialization+0x520>)
 8013796:	4a30      	ldr	r2, [pc, #192]	@ (8013858 <LoRaMacInitialization+0x550>)
 8013798:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801379c:	4b22      	ldr	r3, [pc, #136]	@ (8013828 <LoRaMacInitialization+0x520>)
 801379e:	4a2f      	ldr	r2, [pc, #188]	@ (801385c <LoRaMacInitialization+0x554>)
 80137a0:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80137a4:	4b20      	ldr	r3, [pc, #128]	@ (8013828 <LoRaMacInitialization+0x520>)
 80137a6:	4a2e      	ldr	r2, [pc, #184]	@ (8013860 <LoRaMacInitialization+0x558>)
 80137a8:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80137ac:	4b2d      	ldr	r3, [pc, #180]	@ (8013864 <LoRaMacInitialization+0x55c>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	482d      	ldr	r0, [pc, #180]	@ (8013868 <LoRaMacInitialization+0x560>)
 80137b2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80137b4:	482d      	ldr	r0, [pc, #180]	@ (801386c <LoRaMacInitialization+0x564>)
 80137b6:	f7fa f9bf 	bl	800db38 <SecureElementInit>
 80137ba:	4603      	mov	r3, r0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d001      	beq.n	80137c4 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80137c0:	2311      	movs	r3, #17
 80137c2:	e02b      	b.n	801381c <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80137c4:	4817      	ldr	r0, [pc, #92]	@ (8013824 <LoRaMacInitialization+0x51c>)
 80137c6:	f002 fc25 	bl	8016014 <LoRaMacCryptoInit>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80137d0:	2311      	movs	r3, #17
 80137d2:	e023      	b.n	801381c <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80137d4:	f001 fd20 	bl	8015218 <LoRaMacCommandsInit>
 80137d8:	4603      	mov	r3, r0
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d001      	beq.n	80137e2 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137de:	2313      	movs	r3, #19
 80137e0:	e01c      	b.n	801381c <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80137e2:	4823      	ldr	r0, [pc, #140]	@ (8013870 <LoRaMacInitialization+0x568>)
 80137e4:	f002 fcb6 	bl	8016154 <LoRaMacCryptoSetMulticastReference>
 80137e8:	4603      	mov	r3, r0
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d001      	beq.n	80137f2 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80137ee:	2311      	movs	r3, #17
 80137f0:	e014      	b.n	801381c <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80137f2:	4b1c      	ldr	r3, [pc, #112]	@ (8013864 <LoRaMacInitialization+0x55c>)
 80137f4:	695b      	ldr	r3, [r3, #20]
 80137f6:	4798      	blx	r3
 80137f8:	4603      	mov	r3, r0
 80137fa:	4618      	mov	r0, r3
 80137fc:	f005 fcca 	bl	8019194 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013800:	4b18      	ldr	r3, [pc, #96]	@ (8013864 <LoRaMacInitialization+0x55c>)
 8013802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013804:	4a07      	ldr	r2, [pc, #28]	@ (8013824 <LoRaMacInitialization+0x51c>)
 8013806:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801380a:	4610      	mov	r0, r2
 801380c:	4798      	blx	r3
    Radio.Sleep( );
 801380e:	4b15      	ldr	r3, [pc, #84]	@ (8013864 <LoRaMacInitialization+0x55c>)
 8013810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013812:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013814:	2001      	movs	r0, #1
 8013816:	f7fd fa67 	bl	8010ce8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801381a:	2300      	movs	r3, #0
}
 801381c:	4618      	mov	r0, r3
 801381e:	373c      	adds	r7, #60	@ 0x3c
 8013820:	46bd      	mov	sp, r7
 8013822:	bd90      	pop	{r4, r7, pc}
 8013824:	20000c98 	.word	0x20000c98
 8013828:	20000764 	.word	0x20000764
 801382c:	08011275 	.word	0x08011275
 8013830:	20000acc 	.word	0x20000acc
 8013834:	08011305 	.word	0x08011305
 8013838:	20000ae4 	.word	0x20000ae4
 801383c:	0801137d 	.word	0x0801137d
 8013840:	20000afc 	.word	0x20000afc
 8013844:	080113fd 	.word	0x080113fd
 8013848:	20000b64 	.word	0x20000b64
 801384c:	200018a0 	.word	0x200018a0
 8013850:	0800fcf5 	.word	0x0800fcf5
 8013854:	0800fd51 	.word	0x0800fd51
 8013858:	0800fdf1 	.word	0x0800fdf1
 801385c:	0800fdc5 	.word	0x0800fdc5
 8013860:	0800fe0d 	.word	0x0800fe0d
 8013864:	0801ff20 	.word	0x0801ff20
 8013868:	20000ab0 	.word	0x20000ab0
 801386c:	20000de4 	.word	0x20000de4
 8013870:	20000d80 	.word	0x20000d80

08013874 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013874:	b580      	push	{r7, lr}
 8013876:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013878:	4b04      	ldr	r3, [pc, #16]	@ (801388c <LoRaMacStart+0x18>)
 801387a:	2200      	movs	r2, #0
 801387c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8013880:	f7fc fada 	bl	800fe38 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8013884:	2300      	movs	r3, #0
}
 8013886:	4618      	mov	r0, r3
 8013888:	bd80      	pop	{r7, pc}
 801388a:	bf00      	nop
 801388c:	20000764 	.word	0x20000764

08013890 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8013890:	b580      	push	{r7, lr}
 8013892:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8013894:	f7fd f9f0 	bl	8010c78 <LoRaMacIsBusy>
 8013898:	4603      	mov	r3, r0
 801389a:	f083 0301 	eor.w	r3, r3, #1
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d00d      	beq.n	80138c0 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80138a4:	4b0b      	ldr	r3, [pc, #44]	@ (80138d4 <LoRaMacStop+0x44>)
 80138a6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80138aa:	2b02      	cmp	r3, #2
 80138ac:	d102      	bne.n	80138b4 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80138ae:	4b0a      	ldr	r3, [pc, #40]	@ (80138d8 <LoRaMacStop+0x48>)
 80138b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138b2:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80138b4:	4b09      	ldr	r3, [pc, #36]	@ (80138dc <LoRaMacStop+0x4c>)
 80138b6:	2201      	movs	r2, #1
 80138b8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80138bc:	2300      	movs	r3, #0
 80138be:	e007      	b.n	80138d0 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80138c0:	4b06      	ldr	r3, [pc, #24]	@ (80138dc <LoRaMacStop+0x4c>)
 80138c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	d101      	bne.n	80138ce <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80138ca:	2300      	movs	r3, #0
 80138cc:	e000      	b.n	80138d0 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80138ce:	2301      	movs	r3, #1
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	bd80      	pop	{r7, pc}
 80138d4:	20000c98 	.word	0x20000c98
 80138d8:	0801ff20 	.word	0x0801ff20
 80138dc:	20000764 	.word	0x20000764

080138e0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80138e4:	4812      	ldr	r0, [pc, #72]	@ (8013930 <LoRaMacHalt+0x50>)
 80138e6:	f009 fdc7 	bl	801d478 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80138ea:	4812      	ldr	r0, [pc, #72]	@ (8013934 <LoRaMacHalt+0x54>)
 80138ec:	f009 fdc4 	bl	801d478 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80138f0:	4811      	ldr	r0, [pc, #68]	@ (8013938 <LoRaMacHalt+0x58>)
 80138f2:	f009 fdc1 	bl	801d478 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80138f6:	4811      	ldr	r0, [pc, #68]	@ (801393c <LoRaMacHalt+0x5c>)
 80138f8:	f009 fdbe 	bl	801d478 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80138fc:	f001 faf0 	bl	8014ee0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8013900:	4b0f      	ldr	r3, [pc, #60]	@ (8013940 <LoRaMacHalt+0x60>)
 8013902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013904:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8013906:	4b0f      	ldr	r3, [pc, #60]	@ (8013944 <LoRaMacHalt+0x64>)
 8013908:	2200      	movs	r2, #0
 801390a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 801390e:	480e      	ldr	r0, [pc, #56]	@ (8013948 <LoRaMacHalt+0x68>)
 8013910:	f7fd fb8c 	bl	801102c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8013914:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8013918:	490b      	ldr	r1, [pc, #44]	@ (8013948 <LoRaMacHalt+0x68>)
 801391a:	480c      	ldr	r0, [pc, #48]	@ (801394c <LoRaMacHalt+0x6c>)
 801391c:	f005 fc5f 	bl	80191de <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8013920:	4b08      	ldr	r3, [pc, #32]	@ (8013944 <LoRaMacHalt+0x64>)
 8013922:	2201      	movs	r2, #1
 8013924:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8013928:	2300      	movs	r3, #0
}
 801392a:	4618      	mov	r0, r3
 801392c:	bd80      	pop	{r7, pc}
 801392e:	bf00      	nop
 8013930:	20000acc 	.word	0x20000acc
 8013934:	20000ae4 	.word	0x20000ae4
 8013938:	20000afc 	.word	0x20000afc
 801393c:	20000b64 	.word	0x20000b64
 8013940:	0801ff20 	.word	0x0801ff20
 8013944:	20000764 	.word	0x20000764
 8013948:	20000c98 	.word	0x20000c98
 801394c:	20001254 	.word	0x20001254

08013950 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013950:	b590      	push	{r4, r7, lr}
 8013952:	b08d      	sub	sp, #52	@ 0x34
 8013954:	af02      	add	r7, sp, #8
 8013956:	4603      	mov	r3, r0
 8013958:	6039      	str	r1, [r7, #0]
 801395a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801395c:	4b42      	ldr	r3, [pc, #264]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 801395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013960:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013962:	4b41      	ldr	r3, [pc, #260]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 8013964:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8013968:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801396a:	4b3f      	ldr	r3, [pc, #252]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 801396c:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8013970:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8013972:	4b3e      	ldr	r3, [pc, #248]	@ (8013a6c <LoRaMacQueryTxPossible+0x11c>)
 8013974:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8013978:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801397a:	2300      	movs	r3, #0
 801397c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d101      	bne.n	8013988 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013984:	2303      	movs	r3, #3
 8013986:	e06b      	b.n	8013a60 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8013988:	2300      	movs	r3, #0
 801398a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801398c:	4b36      	ldr	r3, [pc, #216]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 801398e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013992:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013994:	4b34      	ldr	r3, [pc, #208]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 8013996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013998:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801399a:	4b33      	ldr	r3, [pc, #204]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 801399c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80139a0:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80139a2:	4b31      	ldr	r3, [pc, #196]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 80139a4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80139a8:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80139aa:	4b2f      	ldr	r3, [pc, #188]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 80139ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80139b0:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80139b4:	4b2c      	ldr	r3, [pc, #176]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 80139b6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80139ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80139be:	4b2b      	ldr	r3, [pc, #172]	@ (8013a6c <LoRaMacQueryTxPossible+0x11c>)
 80139c0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80139c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80139c8:	4b27      	ldr	r3, [pc, #156]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 80139ca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80139ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80139d2:	4b25      	ldr	r3, [pc, #148]	@ (8013a68 <LoRaMacQueryTxPossible+0x118>)
 80139d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80139d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80139dc:	f107 040d 	add.w	r4, r7, #13
 80139e0:	f107 020e 	add.w	r2, r7, #14
 80139e4:	f107 010f 	add.w	r1, r7, #15
 80139e8:	f107 0014 	add.w	r0, r7, #20
 80139ec:	f107 0310 	add.w	r3, r7, #16
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	4623      	mov	r3, r4
 80139f4:	f001 f93e 	bl	8014c74 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80139f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7fd fe43 	bl	8011688 <GetMaxAppPayloadWithoutFOptsLength>
 8013a02:	4603      	mov	r3, r0
 8013a04:	461a      	mov	r2, r3
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013a0a:	f107 0308 	add.w	r3, r7, #8
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f001 fd08 	bl	8015424 <LoRaMacCommandsGetSizeSerializedCmds>
 8013a14:	4603      	mov	r3, r0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d001      	beq.n	8013a1e <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013a1a:	2313      	movs	r3, #19
 8013a1c:	e020      	b.n	8013a60 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	2b0f      	cmp	r3, #15
 8013a22:	d819      	bhi.n	8013a58 <LoRaMacQueryTxPossible+0x108>
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	785b      	ldrb	r3, [r3, #1]
 8013a28:	461a      	mov	r2, r3
 8013a2a:	68bb      	ldr	r3, [r7, #8]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d313      	bcc.n	8013a58 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	785a      	ldrb	r2, [r3, #1]
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	1ad3      	subs	r3, r2, r3
 8013a3a:	b2da      	uxtb	r2, r3
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	785b      	ldrb	r3, [r3, #1]
 8013a44:	4619      	mov	r1, r3
 8013a46:	79fa      	ldrb	r2, [r7, #7]
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	4413      	add	r3, r2
 8013a4c:	4299      	cmp	r1, r3
 8013a4e:	d301      	bcc.n	8013a54 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8013a50:	2300      	movs	r3, #0
 8013a52:	e005      	b.n	8013a60 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013a54:	2308      	movs	r3, #8
 8013a56:	e003      	b.n	8013a60 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013a5e:	2308      	movs	r3, #8
    }
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	372c      	adds	r7, #44	@ 0x2c
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd90      	pop	{r4, r7, pc}
 8013a68:	20000c98 	.word	0x20000c98
 8013a6c:	20000764 	.word	0x20000764

08013a70 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013a70:	b590      	push	{r4, r7, lr}
 8013a72:	b087      	sub	sp, #28
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d101      	bne.n	8013a86 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a82:	2303      	movs	r3, #3
 8013a84:	e1c4      	b.n	8013e10 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	2b41      	cmp	r3, #65	@ 0x41
 8013a8c:	f200 81b9 	bhi.w	8013e02 <LoRaMacMibGetRequestConfirm+0x392>
 8013a90:	a201      	add	r2, pc, #4	@ (adr r2, 8013a98 <LoRaMacMibGetRequestConfirm+0x28>)
 8013a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a96:	bf00      	nop
 8013a98:	08013ba1 	.word	0x08013ba1
 8013a9c:	08013bad 	.word	0x08013bad
 8013aa0:	08013bb9 	.word	0x08013bb9
 8013aa4:	08013bc5 	.word	0x08013bc5
 8013aa8:	08013bd1 	.word	0x08013bd1
 8013aac:	08013bdd 	.word	0x08013bdd
 8013ab0:	08013be9 	.word	0x08013be9
 8013ab4:	08013e03 	.word	0x08013e03
 8013ab8:	08013e03 	.word	0x08013e03
 8013abc:	08013e03 	.word	0x08013e03
 8013ac0:	08013e03 	.word	0x08013e03
 8013ac4:	08013e03 	.word	0x08013e03
 8013ac8:	08013e03 	.word	0x08013e03
 8013acc:	08013e03 	.word	0x08013e03
 8013ad0:	08013e03 	.word	0x08013e03
 8013ad4:	08013bfd 	.word	0x08013bfd
 8013ad8:	08013c09 	.word	0x08013c09
 8013adc:	08013c15 	.word	0x08013c15
 8013ae0:	08013c37 	.word	0x08013c37
 8013ae4:	08013c49 	.word	0x08013c49
 8013ae8:	08013c5b 	.word	0x08013c5b
 8013aec:	08013c6d 	.word	0x08013c6d
 8013af0:	08013ca1 	.word	0x08013ca1
 8013af4:	08013c7f 	.word	0x08013c7f
 8013af8:	08013cc3 	.word	0x08013cc3
 8013afc:	08013ccf 	.word	0x08013ccf
 8013b00:	08013cd9 	.word	0x08013cd9
 8013b04:	08013ce3 	.word	0x08013ce3
 8013b08:	08013ced 	.word	0x08013ced
 8013b0c:	08013cf7 	.word	0x08013cf7
 8013b10:	08013d01 	.word	0x08013d01
 8013b14:	08013d2d 	.word	0x08013d2d
 8013b18:	08013d39 	.word	0x08013d39
 8013b1c:	08013d51 	.word	0x08013d51
 8013b20:	08013d45 	.word	0x08013d45
 8013b24:	08013d5d 	.word	0x08013d5d
 8013b28:	08013d67 	.word	0x08013d67
 8013b2c:	08013d73 	.word	0x08013d73
 8013b30:	08013d8f 	.word	0x08013d8f
 8013b34:	08013d7f 	.word	0x08013d7f
 8013b38:	08013d87 	.word	0x08013d87
 8013b3c:	08013e03 	.word	0x08013e03
 8013b40:	08013d9b 	.word	0x08013d9b
 8013b44:	08013e03 	.word	0x08013e03
 8013b48:	08013e03 	.word	0x08013e03
 8013b4c:	08013e03 	.word	0x08013e03
 8013b50:	08013e03 	.word	0x08013e03
 8013b54:	08013e03 	.word	0x08013e03
 8013b58:	08013e03 	.word	0x08013e03
 8013b5c:	08013e03 	.word	0x08013e03
 8013b60:	08013e03 	.word	0x08013e03
 8013b64:	08013e03 	.word	0x08013e03
 8013b68:	08013e03 	.word	0x08013e03
 8013b6c:	08013e03 	.word	0x08013e03
 8013b70:	08013e03 	.word	0x08013e03
 8013b74:	08013e03 	.word	0x08013e03
 8013b78:	08013e03 	.word	0x08013e03
 8013b7c:	08013e03 	.word	0x08013e03
 8013b80:	08013daf 	.word	0x08013daf
 8013b84:	08013dbb 	.word	0x08013dbb
 8013b88:	08013dc7 	.word	0x08013dc7
 8013b8c:	08013dd3 	.word	0x08013dd3
 8013b90:	08013ddf 	.word	0x08013ddf
 8013b94:	08013deb 	.word	0x08013deb
 8013b98:	08013df7 	.word	0x08013df7
 8013b9c:	08013dfd 	.word	0x08013dfd
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8013ba0:	4b9d      	ldr	r3, [pc, #628]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013ba2:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	711a      	strb	r2, [r3, #4]
            break;
 8013baa:	e130      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013bac:	4b9a      	ldr	r3, [pc, #616]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013bae:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	711a      	strb	r2, [r3, #4]
            break;
 8013bb6:	e12a      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	685b      	ldr	r3, [r3, #4]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fa fa7b 	bl	800e0b8 <SecureElementGetDevEui>
            break;
 8013bc2:	e124      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fa faa5 	bl	800e118 <SecureElementGetJoinEui>
            break;
 8013bce:	e11e      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8013bd0:	4b91      	ldr	r3, [pc, #580]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013bd2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	711a      	strb	r2, [r3, #4]
            break;
 8013bda:	e118      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8013bdc:	4b8e      	ldr	r3, [pc, #568]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013bde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	605a      	str	r2, [r3, #4]
            break;
 8013be6:	e112      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8013be8:	4b8b      	ldr	r3, [pc, #556]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013bea:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	3304      	adds	r3, #4
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	4610      	mov	r0, r2
 8013bf6:	f7fa fac1 	bl	800e17c <SecureElementGetDevAddr>
            break;
 8013bfa:	e108      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8013bfc:	4b86      	ldr	r3, [pc, #536]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013bfe:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	711a      	strb	r2, [r3, #4]
            break;
 8013c06:	e102      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013c08:	4b83      	ldr	r3, [pc, #524]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c0a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	711a      	strb	r2, [r3, #4]
            break;
 8013c12:	e0fc      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013c14:	231c      	movs	r3, #28
 8013c16:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c18:	4b7f      	ldr	r3, [pc, #508]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c1a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013c1e:	f107 0210 	add.w	r2, r7, #16
 8013c22:	4611      	mov	r1, r2
 8013c24:	4618      	mov	r0, r3
 8013c26:	f003 f8ae 	bl	8016d86 <RegionGetPhyParam>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013c2e:	68fa      	ldr	r2, [r7, #12]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	605a      	str	r2, [r3, #4]
            break;
 8013c34:	e0eb      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	4a77      	ldr	r2, [pc, #476]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	326c      	adds	r2, #108	@ 0x6c
 8013c3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c42:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013c46:	e0e2      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4a73      	ldr	r2, [pc, #460]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c4c:	3304      	adds	r3, #4
 8013c4e:	32b4      	adds	r2, #180	@ 0xb4
 8013c50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c54:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013c58:	e0d9      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c5e:	3304      	adds	r3, #4
 8013c60:	3274      	adds	r2, #116	@ 0x74
 8013c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c66:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013c6a:	e0d0      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c70:	3304      	adds	r3, #4
 8013c72:	32bc      	adds	r2, #188	@ 0xbc
 8013c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c78:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013c7c:	e0c7      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013c7e:	231a      	movs	r3, #26
 8013c80:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c82:	4b65      	ldr	r3, [pc, #404]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c84:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013c88:	f107 0210 	add.w	r2, r7, #16
 8013c8c:	4611      	mov	r1, r2
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f003 f879 	bl	8016d86 <RegionGetPhyParam>
 8013c94:	4603      	mov	r3, r0
 8013c96:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013c98:	68fa      	ldr	r2, [r7, #12]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	605a      	str	r2, [r3, #4]
            break;
 8013c9e:	e0b6      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013ca0:	2319      	movs	r3, #25
 8013ca2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013ca6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013caa:	f107 0210 	add.w	r2, r7, #16
 8013cae:	4611      	mov	r1, r2
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f003 f868 	bl	8016d86 <RegionGetPhyParam>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8013cba:	68fa      	ldr	r2, [r7, #12]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	605a      	str	r2, [r3, #4]
            break;
 8013cc0:	e0a5      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013cc2:	4b55      	ldr	r3, [pc, #340]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013cc4:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	711a      	strb	r2, [r3, #4]
            break;
 8013ccc:	e09f      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8013cce:	4b52      	ldr	r3, [pc, #328]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013cd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	605a      	str	r2, [r3, #4]
            break;
 8013cd6:	e09a      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8013cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013cda:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	605a      	str	r2, [r3, #4]
            break;
 8013ce0:	e095      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8013ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013ce4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	605a      	str	r2, [r3, #4]
            break;
 8013cea:	e090      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8013cec:	4b4a      	ldr	r3, [pc, #296]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013cee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	605a      	str	r2, [r3, #4]
            break;
 8013cf4:	e08b      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8013cf6:	4b48      	ldr	r3, [pc, #288]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013cf8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	605a      	str	r2, [r3, #4]
            break;
 8013cfe:	e086      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8013d00:	2302      	movs	r3, #2
 8013d02:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013d04:	4b44      	ldr	r3, [pc, #272]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d06:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013d0a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d0c:	4b42      	ldr	r3, [pc, #264]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d0e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013d12:	f107 0210 	add.w	r2, r7, #16
 8013d16:	4611      	mov	r1, r2
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f003 f834 	bl	8016d86 <RegionGetPhyParam>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	b25a      	sxtb	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	711a      	strb	r2, [r3, #4]
            break;
 8013d2a:	e070      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d2e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	711a      	strb	r2, [r3, #4]
            break;
 8013d36:	e06a      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013d38:	4b37      	ldr	r3, [pc, #220]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d3a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	711a      	strb	r2, [r3, #4]
            break;
 8013d42:	e064      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013d44:	4b34      	ldr	r3, [pc, #208]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d46:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	711a      	strb	r2, [r3, #4]
            break;
 8013d4e:	e05e      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013d50:	4b31      	ldr	r3, [pc, #196]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d52:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	711a      	strb	r2, [r3, #4]
            break;
 8013d5a:	e058      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	605a      	str	r2, [r3, #4]
            break;
 8013d64:	e053      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8013d66:	4b2c      	ldr	r3, [pc, #176]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d68:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	711a      	strb	r2, [r3, #4]
            break;
 8013d70:	e04d      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013d72:	4b29      	ldr	r3, [pc, #164]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d74:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	605a      	str	r2, [r3, #4]
            break;
 8013d7c:	e047      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	4a25      	ldr	r2, [pc, #148]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d82:	605a      	str	r2, [r3, #4]
            break;
 8013d84:	e043      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	4a24      	ldr	r2, [pc, #144]	@ (8013e1c <LoRaMacMibGetRequestConfirm+0x3ac>)
 8013d8a:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8013d8c:	e03f      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013d8e:	4b22      	ldr	r3, [pc, #136]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d90:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	605a      	str	r2, [r3, #4]
            break;
 8013d98:	e039      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d9e:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8013da2:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013da4:	687c      	ldr	r4, [r7, #4]
 8013da6:	f003 f965 	bl	8017074 <RegionGetVersion>
 8013daa:	60a0      	str	r0, [r4, #8]
            break;
 8013dac:	e02f      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8013dae:	4b1a      	ldr	r3, [pc, #104]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013db0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	605a      	str	r2, [r3, #4]
            break;
 8013db8:	e029      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8013dba:	4b17      	ldr	r3, [pc, #92]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013dbc:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	711a      	strb	r2, [r3, #4]
            break;
 8013dc4:	e023      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013dc6:	4b14      	ldr	r3, [pc, #80]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013dc8:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	809a      	strh	r2, [r3, #4]
            break;
 8013dd0:	e01d      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013dd2:	4b11      	ldr	r3, [pc, #68]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013dd4:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	809a      	strh	r2, [r3, #4]
            break;
 8013ddc:	e017      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013dde:	4b0e      	ldr	r3, [pc, #56]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013de0:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	809a      	strh	r2, [r3, #4]
            break;
 8013de8:	e011      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013dea:	4b0b      	ldr	r3, [pc, #44]	@ (8013e18 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013dec:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	809a      	strh	r2, [r3, #4]
            break;
 8013df4:	e00b      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013df6:	2318      	movs	r3, #24
 8013df8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013dfa:	e008      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013dfc:	2318      	movs	r3, #24
 8013dfe:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013e00:	e005      	b.n	8013e0e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f001 f883 	bl	8014f0e <LoRaMacClassBMibGetRequestConfirm>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	75fb      	strb	r3, [r7, #23]
            break;
 8013e0c:	bf00      	nop
        }
    }
    return status;
 8013e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	371c      	adds	r7, #28
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd90      	pop	{r4, r7, pc}
 8013e18:	20000c98 	.word	0x20000c98
 8013e1c:	20001254 	.word	0x20001254

08013e20 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b086      	sub	sp, #24
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d101      	bne.n	8013e36 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e32:	2303      	movs	r3, #3
 8013e34:	e39e      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013e36:	4bbd      	ldr	r3, [pc, #756]	@ (801412c <LoRaMacMibSetRequestConfirm+0x30c>)
 8013e38:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013e3c:	f003 0302 	and.w	r3, r3, #2
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d001      	beq.n	8013e48 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013e44:	2301      	movs	r3, #1
 8013e46:	e395      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	2b41      	cmp	r3, #65	@ 0x41
 8013e4e:	f200 8365 	bhi.w	801451c <LoRaMacMibSetRequestConfirm+0x6fc>
 8013e52:	a201      	add	r2, pc, #4	@ (adr r2, 8013e58 <LoRaMacMibSetRequestConfirm+0x38>)
 8013e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e58:	08013f61 	.word	0x08013f61
 8013e5c:	08013f71 	.word	0x08013f71
 8013e60:	08013f8b 	.word	0x08013f8b
 8013e64:	08013fa3 	.word	0x08013fa3
 8013e68:	08013fbb 	.word	0x08013fbb
 8013e6c:	08013fc7 	.word	0x08013fc7
 8013e70:	08013fd3 	.word	0x08013fd3
 8013e74:	08013ffd 	.word	0x08013ffd
 8013e78:	08014023 	.word	0x08014023
 8013e7c:	08014049 	.word	0x08014049
 8013e80:	0801406f 	.word	0x0801406f
 8013e84:	08014095 	.word	0x08014095
 8013e88:	080140bb 	.word	0x080140bb
 8013e8c:	080140e1 	.word	0x080140e1
 8013e90:	08014107 	.word	0x08014107
 8013e94:	08014135 	.word	0x08014135
 8013e98:	08014155 	.word	0x08014155
 8013e9c:	0801451d 	.word	0x0801451d
 8013ea0:	08014161 	.word	0x08014161
 8013ea4:	080141d1 	.word	0x080141d1
 8013ea8:	08014211 	.word	0x08014211
 8013eac:	08014273 	.word	0x08014273
 8013eb0:	080142e3 	.word	0x080142e3
 8013eb4:	080142b3 	.word	0x080142b3
 8013eb8:	08014313 	.word	0x08014313
 8013ebc:	08014335 	.word	0x08014335
 8013ec0:	0801433f 	.word	0x0801433f
 8013ec4:	08014349 	.word	0x08014349
 8013ec8:	08014353 	.word	0x08014353
 8013ecc:	0801435d 	.word	0x0801435d
 8013ed0:	0801451d 	.word	0x0801451d
 8013ed4:	08014367 	.word	0x08014367
 8013ed8:	08014399 	.word	0x08014399
 8013edc:	0801440d 	.word	0x0801440d
 8013ee0:	080143d3 	.word	0x080143d3
 8013ee4:	0801443f 	.word	0x0801443f
 8013ee8:	08014465 	.word	0x08014465
 8013eec:	0801447d 	.word	0x0801447d
 8013ef0:	08014489 	.word	0x08014489
 8013ef4:	08014495 	.word	0x08014495
 8013ef8:	0801451d 	.word	0x0801451d
 8013efc:	0801449f 	.word	0x0801449f
 8013f00:	0801451d 	.word	0x0801451d
 8013f04:	0801451d 	.word	0x0801451d
 8013f08:	0801451d 	.word	0x0801451d
 8013f0c:	0801451d 	.word	0x0801451d
 8013f10:	0801451d 	.word	0x0801451d
 8013f14:	0801451d 	.word	0x0801451d
 8013f18:	0801451d 	.word	0x0801451d
 8013f1c:	0801451d 	.word	0x0801451d
 8013f20:	0801451d 	.word	0x0801451d
 8013f24:	0801451d 	.word	0x0801451d
 8013f28:	0801451d 	.word	0x0801451d
 8013f2c:	0801451d 	.word	0x0801451d
 8013f30:	0801451d 	.word	0x0801451d
 8013f34:	0801451d 	.word	0x0801451d
 8013f38:	0801451d 	.word	0x0801451d
 8013f3c:	0801451d 	.word	0x0801451d
 8013f40:	080144c9 	.word	0x080144c9
 8013f44:	080144d5 	.word	0x080144d5
 8013f48:	080144e1 	.word	0x080144e1
 8013f4c:	080144ed 	.word	0x080144ed
 8013f50:	080144f9 	.word	0x080144f9
 8013f54:	08014505 	.word	0x08014505
 8013f58:	08014511 	.word	0x08014511
 8013f5c:	08014517 	.word	0x08014517
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	791b      	ldrb	r3, [r3, #4]
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fd faa5 	bl	80114b4 <SwitchClass>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	75fb      	strb	r3, [r7, #23]
            break;
 8013f6e:	e2f6      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	791b      	ldrb	r3, [r3, #4]
 8013f74:	2b02      	cmp	r3, #2
 8013f76:	d005      	beq.n	8013f84 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	791a      	ldrb	r2, [r3, #4]
 8013f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8014130 <LoRaMacMibSetRequestConfirm+0x310>)
 8013f7e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f82:	e2ec      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f84:	2303      	movs	r3, #3
 8013f86:	75fb      	strb	r3, [r7, #23]
            break;
 8013f88:	e2e9      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fa f87a 	bl	800e088 <SecureElementSetDevEui>
 8013f94:	4603      	mov	r3, r0
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	f000 82c6 	beq.w	8014528 <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f9c:	2303      	movs	r3, #3
 8013f9e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013fa0:	e2c2      	b.n	8014528 <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7fa f89e 	bl	800e0e8 <SecureElementSetJoinEui>
 8013fac:	4603      	mov	r3, r0
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	f000 82bc 	beq.w	801452c <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fb4:	2303      	movs	r3, #3
 8013fb6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013fb8:	e2b8      	b.n	801452c <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	791a      	ldrb	r2, [r3, #4]
 8013fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8014130 <LoRaMacMibSetRequestConfirm+0x310>)
 8013fc0:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8013fc4:	e2cb      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	685b      	ldr	r3, [r3, #4]
 8013fca:	4a59      	ldr	r2, [pc, #356]	@ (8014130 <LoRaMacMibSetRequestConfirm+0x310>)
 8013fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8013fd0:	e2c5      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8013fd2:	4b57      	ldr	r3, [pc, #348]	@ (8014130 <LoRaMacMibSetRequestConfirm+0x310>)
 8013fd4:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	4619      	mov	r1, r3
 8013fde:	4610      	mov	r0, r2
 8013fe0:	f7fa f8b2 	bl	800e148 <SecureElementSetDevAddr>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d002      	beq.n	8013ff0 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fea:	2303      	movs	r3, #3
 8013fec:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8013fee:	e2b6      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8014130 <LoRaMacMibSetRequestConfirm+0x310>)
 8013ff6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8013ffa:	e2b0      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d00b      	beq.n	801401c <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	685b      	ldr	r3, [r3, #4]
 8014008:	4619      	mov	r1, r3
 801400a:	2000      	movs	r0, #0
 801400c:	f002 f8cc 	bl	80161a8 <LoRaMacCryptoSetKey>
 8014010:	4603      	mov	r3, r0
 8014012:	2b00      	cmp	r3, #0
 8014014:	f000 828c 	beq.w	8014530 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014018:	2311      	movs	r3, #17
 801401a:	e2ab      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801401c:	2303      	movs	r3, #3
 801401e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014020:	e286      	b.n	8014530 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d00b      	beq.n	8014042 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	4619      	mov	r1, r3
 8014030:	2001      	movs	r0, #1
 8014032:	f002 f8b9 	bl	80161a8 <LoRaMacCryptoSetKey>
 8014036:	4603      	mov	r3, r0
 8014038:	2b00      	cmp	r3, #0
 801403a:	f000 827b 	beq.w	8014534 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801403e:	2311      	movs	r3, #17
 8014040:	e298      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014042:	2303      	movs	r3, #3
 8014044:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014046:	e275      	b.n	8014534 <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00b      	beq.n	8014068 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	685b      	ldr	r3, [r3, #4]
 8014054:	4619      	mov	r1, r3
 8014056:	2008      	movs	r0, #8
 8014058:	f002 f8a6 	bl	80161a8 <LoRaMacCryptoSetKey>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	f000 826a 	beq.w	8014538 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014064:	2311      	movs	r3, #17
 8014066:	e285      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014068:	2303      	movs	r3, #3
 801406a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801406c:	e264      	b.n	8014538 <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d00b      	beq.n	801408e <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	685b      	ldr	r3, [r3, #4]
 801407a:	4619      	mov	r1, r3
 801407c:	2009      	movs	r0, #9
 801407e:	f002 f893 	bl	80161a8 <LoRaMacCryptoSetKey>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 8259 	beq.w	801453c <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801408a:	2311      	movs	r3, #17
 801408c:	e272      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801408e:	2303      	movs	r3, #3
 8014090:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014092:	e253      	b.n	801453c <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d00b      	beq.n	80140b4 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	4619      	mov	r1, r3
 80140a2:	200c      	movs	r0, #12
 80140a4:	f002 f880 	bl	80161a8 <LoRaMacCryptoSetKey>
 80140a8:	4603      	mov	r3, r0
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	f000 8248 	beq.w	8014540 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140b0:	2311      	movs	r3, #17
 80140b2:	e25f      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140b4:	2303      	movs	r3, #3
 80140b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80140b8:	e242      	b.n	8014540 <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d00b      	beq.n	80140da <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	685b      	ldr	r3, [r3, #4]
 80140c6:	4619      	mov	r1, r3
 80140c8:	200d      	movs	r0, #13
 80140ca:	f002 f86d 	bl	80161a8 <LoRaMacCryptoSetKey>
 80140ce:	4603      	mov	r3, r0
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	f000 8237 	beq.w	8014544 <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140d6:	2311      	movs	r3, #17
 80140d8:	e24c      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140da:	2303      	movs	r3, #3
 80140dc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80140de:	e231      	b.n	8014544 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d00b      	beq.n	8014100 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	4619      	mov	r1, r3
 80140ee:	200e      	movs	r0, #14
 80140f0:	f002 f85a 	bl	80161a8 <LoRaMacCryptoSetKey>
 80140f4:	4603      	mov	r3, r0
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	f000 8226 	beq.w	8014548 <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140fc:	2311      	movs	r3, #17
 80140fe:	e239      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014100:	2303      	movs	r3, #3
 8014102:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014104:	e220      	b.n	8014548 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d00b      	beq.n	8014126 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	4619      	mov	r1, r3
 8014114:	200f      	movs	r0, #15
 8014116:	f002 f847 	bl	80161a8 <LoRaMacCryptoSetKey>
 801411a:	4603      	mov	r3, r0
 801411c:	2b00      	cmp	r3, #0
 801411e:	f000 8215 	beq.w	801454c <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014122:	2311      	movs	r3, #17
 8014124:	e226      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014126:	2303      	movs	r3, #3
 8014128:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801412a:	e20f      	b.n	801454c <LoRaMacMibSetRequestConfirm+0x72c>
 801412c:	20000764 	.word	0x20000764
 8014130:	20000c98 	.word	0x20000c98
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	791a      	ldrb	r2, [r3, #4]
 8014138:	4bb2      	ldr	r3, [pc, #712]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801413a:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801413e:	4bb2      	ldr	r3, [pc, #712]	@ (8014408 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014142:	4ab0      	ldr	r2, [pc, #704]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014144:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8014148:	4610      	mov	r0, r2
 801414a:	4798      	blx	r3
            Radio.Sleep( );
 801414c:	4bae      	ldr	r3, [pc, #696]	@ (8014408 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014150:	4798      	blx	r3
            break;
 8014152:	e204      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	791a      	ldrb	r2, [r3, #4]
 8014158:	4baa      	ldr	r3, [pc, #680]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801415a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 801415e:	e1fe      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	7a1b      	ldrb	r3, [r3, #8]
 8014164:	b25b      	sxtb	r3, r3
 8014166:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014168:	4ba6      	ldr	r3, [pc, #664]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801416a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801416e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014170:	4ba4      	ldr	r3, [pc, #656]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014172:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014176:	f107 0108 	add.w	r1, r7, #8
 801417a:	2207      	movs	r2, #7
 801417c:	4618      	mov	r0, r3
 801417e:	f002 fe3d 	bl	8016dfc <RegionVerify>
 8014182:	4603      	mov	r3, r0
 8014184:	f083 0301 	eor.w	r3, r3, #1
 8014188:	b2db      	uxtb	r3, r3
 801418a:	2b00      	cmp	r3, #0
 801418c:	d002      	beq.n	8014194 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801418e:	2303      	movs	r3, #3
 8014190:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014192:	e1e4      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	685b      	ldr	r3, [r3, #4]
 8014198:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801419a:	4b9a      	ldr	r3, [pc, #616]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801419c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80141a0:	f107 0108 	add.w	r1, r7, #8
 80141a4:	2200      	movs	r2, #0
 80141a6:	4618      	mov	r0, r3
 80141a8:	f002 fe28 	bl	8016dfc <RegionVerify>
 80141ac:	4603      	mov	r3, r0
 80141ae:	f083 0301 	eor.w	r3, r3, #1
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d002      	beq.n	80141be <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80141b8:	2303      	movs	r3, #3
 80141ba:	75fb      	strb	r3, [r7, #23]
            break;
 80141bc:	e1cf      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80141be:	4b91      	ldr	r3, [pc, #580]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	336c      	adds	r3, #108	@ 0x6c
 80141c4:	3204      	adds	r2, #4
 80141c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80141ca:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80141ce:	e1c6      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	7a1b      	ldrb	r3, [r3, #8]
 80141d4:	b25b      	sxtb	r3, r3
 80141d6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80141d8:	4b8a      	ldr	r3, [pc, #552]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80141da:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80141de:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80141e0:	4b88      	ldr	r3, [pc, #544]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80141e2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80141e6:	f107 0108 	add.w	r1, r7, #8
 80141ea:	2207      	movs	r2, #7
 80141ec:	4618      	mov	r0, r3
 80141ee:	f002 fe05 	bl	8016dfc <RegionVerify>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d008      	beq.n	801420a <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80141f8:	4b82      	ldr	r3, [pc, #520]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80141fa:	687a      	ldr	r2, [r7, #4]
 80141fc:	33b4      	adds	r3, #180	@ 0xb4
 80141fe:	3204      	adds	r2, #4
 8014200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014204:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014208:	e1a9      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801420a:	2303      	movs	r3, #3
 801420c:	75fb      	strb	r3, [r7, #23]
            break;
 801420e:	e1a6      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	7a1b      	ldrb	r3, [r3, #8]
 8014214:	b25b      	sxtb	r3, r3
 8014216:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014218:	4b7a      	ldr	r3, [pc, #488]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801421a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801421e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014220:	4b78      	ldr	r3, [pc, #480]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014222:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014226:	f107 0108 	add.w	r1, r7, #8
 801422a:	2207      	movs	r2, #7
 801422c:	4618      	mov	r0, r3
 801422e:	f002 fde5 	bl	8016dfc <RegionVerify>
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	d019      	beq.n	801426c <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014238:	4b72      	ldr	r3, [pc, #456]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801423a:	687a      	ldr	r2, [r7, #4]
 801423c:	3374      	adds	r3, #116	@ 0x74
 801423e:	3204      	adds	r2, #4
 8014240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014244:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014248:	4b6e      	ldr	r3, [pc, #440]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801424a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801424e:	2b02      	cmp	r3, #2
 8014250:	f040 817e 	bne.w	8014550 <LoRaMacMibSetRequestConfirm+0x730>
 8014254:	4b6b      	ldr	r3, [pc, #428]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014256:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801425a:	2b00      	cmp	r3, #0
 801425c:	f000 8178 	beq.w	8014550 <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014260:	4b69      	ldr	r3, [pc, #420]	@ (8014408 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014264:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014266:	f7fe fc1d 	bl	8012aa4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801426a:	e171      	b.n	8014550 <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801426c:	2303      	movs	r3, #3
 801426e:	75fb      	strb	r3, [r7, #23]
            break;
 8014270:	e16e      	b.n	8014550 <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	7a1b      	ldrb	r3, [r3, #8]
 8014276:	b25b      	sxtb	r3, r3
 8014278:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801427a:	4b62      	ldr	r3, [pc, #392]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801427c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8014280:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014282:	4b60      	ldr	r3, [pc, #384]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014284:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014288:	f107 0108 	add.w	r1, r7, #8
 801428c:	2207      	movs	r2, #7
 801428e:	4618      	mov	r0, r3
 8014290:	f002 fdb4 	bl	8016dfc <RegionVerify>
 8014294:	4603      	mov	r3, r0
 8014296:	2b00      	cmp	r3, #0
 8014298:	d008      	beq.n	80142ac <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801429a:	4b5a      	ldr	r3, [pc, #360]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801429c:	687a      	ldr	r2, [r7, #4]
 801429e:	33bc      	adds	r3, #188	@ 0xbc
 80142a0:	3204      	adds	r2, #4
 80142a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142a6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80142aa:	e158      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142ac:	2303      	movs	r3, #3
 80142ae:	75fb      	strb	r3, [r7, #23]
            break;
 80142b0:	e155      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80142b8:	2301      	movs	r3, #1
 80142ba:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80142bc:	4b51      	ldr	r3, [pc, #324]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80142be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80142c2:	f107 020c 	add.w	r2, r7, #12
 80142c6:	4611      	mov	r1, r2
 80142c8:	4618      	mov	r0, r3
 80142ca:	f002 fdc0 	bl	8016e4e <RegionChanMaskSet>
 80142ce:	4603      	mov	r3, r0
 80142d0:	f083 0301 	eor.w	r3, r3, #1
 80142d4:	b2db      	uxtb	r3, r3
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f000 813c 	beq.w	8014554 <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142dc:	2303      	movs	r3, #3
 80142de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80142e0:	e138      	b.n	8014554 <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	685b      	ldr	r3, [r3, #4]
 80142e6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80142e8:	2300      	movs	r3, #0
 80142ea:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80142ec:	4b45      	ldr	r3, [pc, #276]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80142ee:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80142f2:	f107 020c 	add.w	r2, r7, #12
 80142f6:	4611      	mov	r1, r2
 80142f8:	4618      	mov	r0, r3
 80142fa:	f002 fda8 	bl	8016e4e <RegionChanMaskSet>
 80142fe:	4603      	mov	r3, r0
 8014300:	f083 0301 	eor.w	r3, r3, #1
 8014304:	b2db      	uxtb	r3, r3
 8014306:	2b00      	cmp	r3, #0
 8014308:	f000 8126 	beq.w	8014558 <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801430c:	2303      	movs	r3, #3
 801430e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014310:	e122      	b.n	8014558 <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	791b      	ldrb	r3, [r3, #4]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d009      	beq.n	801432e <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801431e:	2b0f      	cmp	r3, #15
 8014320:	d805      	bhi.n	801432e <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	791a      	ldrb	r2, [r3, #4]
 8014326:	4b37      	ldr	r3, [pc, #220]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014328:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801432c:	e117      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801432e:	2303      	movs	r3, #3
 8014330:	75fb      	strb	r3, [r7, #23]
            break;
 8014332:	e114      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	4a32      	ldr	r2, [pc, #200]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801433a:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 801433c:	e10f      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	4a30      	ldr	r2, [pc, #192]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014344:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8014346:	e10a      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	4a2d      	ldr	r2, [pc, #180]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801434e:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8014350:	e105      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	4a2b      	ldr	r2, [pc, #172]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014358:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 801435a:	e100      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	685b      	ldr	r3, [r3, #4]
 8014360:	4a28      	ldr	r2, [pc, #160]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014362:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8014364:	e0fb      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801436c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801436e:	4b25      	ldr	r3, [pc, #148]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014370:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014374:	f107 0108 	add.w	r1, r7, #8
 8014378:	2206      	movs	r2, #6
 801437a:	4618      	mov	r0, r3
 801437c:	f002 fd3e 	bl	8016dfc <RegionVerify>
 8014380:	4603      	mov	r3, r0
 8014382:	2b00      	cmp	r3, #0
 8014384:	d005      	beq.n	8014392 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014386:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801438a:	4b1e      	ldr	r3, [pc, #120]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801438c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014390:	e0e5      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014392:	2303      	movs	r3, #3
 8014394:	75fb      	strb	r3, [r7, #23]
            break;
 8014396:	e0e2      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801439e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80143a0:	4b18      	ldr	r3, [pc, #96]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143a2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80143a6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80143a8:	4b16      	ldr	r3, [pc, #88]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143aa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80143ae:	f107 0108 	add.w	r1, r7, #8
 80143b2:	2205      	movs	r2, #5
 80143b4:	4618      	mov	r0, r3
 80143b6:	f002 fd21 	bl	8016dfc <RegionVerify>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d005      	beq.n	80143cc <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80143c0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80143c4:	4b0f      	ldr	r3, [pc, #60]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80143ca:	e0c8      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143cc:	2303      	movs	r3, #3
 80143ce:	75fb      	strb	r3, [r7, #23]
            break;
 80143d0:	e0c5      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80143d8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80143da:	4b0a      	ldr	r3, [pc, #40]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80143e0:	f107 0108 	add.w	r1, r7, #8
 80143e4:	220a      	movs	r2, #10
 80143e6:	4618      	mov	r0, r3
 80143e8:	f002 fd08 	bl	8016dfc <RegionVerify>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d005      	beq.n	80143fe <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80143f2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80143f6:	4b03      	ldr	r3, [pc, #12]	@ (8014404 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143f8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80143fc:	e0af      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143fe:	2303      	movs	r3, #3
 8014400:	75fb      	strb	r3, [r7, #23]
            break;
 8014402:	e0ac      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
 8014404:	20000c98 	.word	0x20000c98
 8014408:	0801ff20 	.word	0x0801ff20
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014412:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014414:	4b59      	ldr	r3, [pc, #356]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 8014416:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801441a:	f107 0108 	add.w	r1, r7, #8
 801441e:	2209      	movs	r2, #9
 8014420:	4618      	mov	r0, r3
 8014422:	f002 fceb 	bl	8016dfc <RegionVerify>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d005      	beq.n	8014438 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801442c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014430:	4b52      	ldr	r3, [pc, #328]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 8014432:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014436:	e092      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014438:	2303      	movs	r3, #3
 801443a:	75fb      	strb	r3, [r7, #23]
            break;
 801443c:	e08f      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8014446:	d80a      	bhi.n	801445e <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	4a4b      	ldr	r2, [pc, #300]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 801444e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8014452:	4b4a      	ldr	r3, [pc, #296]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 8014454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014458:	4a48      	ldr	r2, [pc, #288]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 801445a:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 801445c:	e07f      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801445e:	2303      	movs	r3, #3
 8014460:	75fb      	strb	r3, [r7, #23]
            break;
 8014462:	e07c      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	791a      	ldrb	r2, [r3, #4]
 8014468:	4b44      	ldr	r3, [pc, #272]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 801446a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 801446e:	4b43      	ldr	r3, [pc, #268]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 8014470:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8014474:	4b41      	ldr	r3, [pc, #260]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 8014476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 801447a:	e070      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	4a3e      	ldr	r2, [pc, #248]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 8014482:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8014486:	e06a      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	4a3b      	ldr	r2, [pc, #236]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 801448e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8014492:	e064      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8014494:	f7fe fd38 	bl	8012f08 <RestoreNvmData>
 8014498:	4603      	mov	r3, r0
 801449a:	75fb      	strb	r3, [r7, #23]
            break;
 801449c:	e05f      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	799b      	ldrb	r3, [r3, #6]
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	d80d      	bhi.n	80144c2 <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80144a6:	4a35      	ldr	r2, [pc, #212]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6858      	ldr	r0, [r3, #4]
 80144b4:	f001 fdda 	bl	801606c <LoRaMacCryptoSetLrWanVersion>
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d04e      	beq.n	801455c <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80144be:	2311      	movs	r3, #17
 80144c0:	e058      	b.n	8014574 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144c2:	2303      	movs	r3, #3
 80144c4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80144c6:	e049      	b.n	801455c <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	4a2b      	ldr	r2, [pc, #172]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 80144ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 80144d2:	e044      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	791a      	ldrb	r2, [r3, #4]
 80144d8:	4b28      	ldr	r3, [pc, #160]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 80144da:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 80144de:	e03e      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	889a      	ldrh	r2, [r3, #4]
 80144e4:	4b25      	ldr	r3, [pc, #148]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 80144e6:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 80144ea:	e038      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	889a      	ldrh	r2, [r3, #4]
 80144f0:	4b22      	ldr	r3, [pc, #136]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 80144f2:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 80144f6:	e032      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	889a      	ldrh	r2, [r3, #4]
 80144fc:	4b1f      	ldr	r3, [pc, #124]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 80144fe:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8014502:	e02c      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	889a      	ldrh	r2, [r3, #4]
 8014508:	4b1c      	ldr	r3, [pc, #112]	@ (801457c <LoRaMacMibSetRequestConfirm+0x75c>)
 801450a:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 801450e:	e026      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014510:	2318      	movs	r3, #24
 8014512:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014514:	e023      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014516:	2318      	movs	r3, #24
 8014518:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801451a:	e020      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f000 fd00 	bl	8014f22 <LoRaMacMibClassBSetRequestConfirm>
 8014522:	4603      	mov	r3, r0
 8014524:	75fb      	strb	r3, [r7, #23]
            break;
 8014526:	e01a      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014528:	bf00      	nop
 801452a:	e018      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801452c:	bf00      	nop
 801452e:	e016      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014530:	bf00      	nop
 8014532:	e014      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014534:	bf00      	nop
 8014536:	e012      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014538:	bf00      	nop
 801453a:	e010      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801453c:	bf00      	nop
 801453e:	e00e      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014540:	bf00      	nop
 8014542:	e00c      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014544:	bf00      	nop
 8014546:	e00a      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014548:	bf00      	nop
 801454a:	e008      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801454c:	bf00      	nop
 801454e:	e006      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014550:	bf00      	nop
 8014552:	e004      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014554:	bf00      	nop
 8014556:	e002      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014558:	bf00      	nop
 801455a:	e000      	b.n	801455e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801455c:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 801455e:	7dfb      	ldrb	r3, [r7, #23]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d106      	bne.n	8014572 <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8014564:	4a06      	ldr	r2, [pc, #24]	@ (8014580 <LoRaMacMibSetRequestConfirm+0x760>)
 8014566:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801456a:	f043 0320 	orr.w	r3, r3, #32
 801456e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8014572:	7dfb      	ldrb	r3, [r7, #23]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3718      	adds	r7, #24
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	20000c98 	.word	0x20000c98
 8014580:	20000764 	.word	0x20000764

08014584 <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b082      	sub	sp, #8
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 801458c:	4b0a      	ldr	r3, [pc, #40]	@ (80145b8 <OnAbpJoinPendingTimerEvent+0x34>)
 801458e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8014592:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014596:	4a08      	ldr	r2, [pc, #32]	@ (80145b8 <OnAbpJoinPendingTimerEvent+0x34>)
 8014598:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 801459c:	4a06      	ldr	r2, [pc, #24]	@ (80145b8 <OnAbpJoinPendingTimerEvent+0x34>)
 801459e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80145a2:	f043 0310 	orr.w	r3, r3, #16
 80145a6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 80145aa:	f7fe fe5d 	bl	8013268 <OnMacProcessNotify>
}
 80145ae:	bf00      	nop
 80145b0:	3708      	adds	r7, #8
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	20000764 	.word	0x20000764

080145bc <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 80145c2:	4b14      	ldr	r3, [pc, #80]	@ (8014614 <AbpJoinPendingStart+0x58>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	f083 0301 	eor.w	r3, r3, #1
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d00b      	beq.n	80145e8 <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 80145d0:	4b10      	ldr	r3, [pc, #64]	@ (8014614 <AbpJoinPendingStart+0x58>)
 80145d2:	2201      	movs	r2, #1
 80145d4:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 80145d6:	2300      	movs	r3, #0
 80145d8:	9300      	str	r3, [sp, #0]
 80145da:	4b0f      	ldr	r3, [pc, #60]	@ (8014618 <AbpJoinPendingStart+0x5c>)
 80145dc:	2200      	movs	r2, #0
 80145de:	f04f 31ff 	mov.w	r1, #4294967295
 80145e2:	480e      	ldr	r0, [pc, #56]	@ (801461c <AbpJoinPendingStart+0x60>)
 80145e4:	f008 fea4 	bl	801d330 <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 80145e8:	4b0d      	ldr	r3, [pc, #52]	@ (8014620 <AbpJoinPendingStart+0x64>)
 80145ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80145ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80145f2:	4a0b      	ldr	r2, [pc, #44]	@ (8014620 <AbpJoinPendingStart+0x64>)
 80145f4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 80145f8:	4808      	ldr	r0, [pc, #32]	@ (801461c <AbpJoinPendingStart+0x60>)
 80145fa:	f008 ff3d 	bl	801d478 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 80145fe:	210a      	movs	r1, #10
 8014600:	4806      	ldr	r0, [pc, #24]	@ (801461c <AbpJoinPendingStart+0x60>)
 8014602:	f008 ffa9 	bl	801d558 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 8014606:	4805      	ldr	r0, [pc, #20]	@ (801461c <AbpJoinPendingStart+0x60>)
 8014608:	f008 fec8 	bl	801d39c <UTIL_TIMER_Start>
}
 801460c:	bf00      	nop
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	200018b8 	.word	0x200018b8
 8014618:	08014585 	.word	0x08014585
 801461c:	20000c00 	.word	0x20000c00
 8014620:	20000764 	.word	0x20000764

08014624 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b08a      	sub	sp, #40	@ 0x28
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801462c:	2302      	movs	r3, #2
 801462e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 8014632:	2300      	movs	r3, #0
 8014634:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014638:	2300      	movs	r3, #0
 801463a:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d101      	bne.n	8014646 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014642:	2303      	movs	r3, #3
 8014644:	e188      	b.n	8014958 <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2200      	movs	r2, #0
 801464a:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801464c:	f7fc fb14 	bl	8010c78 <LoRaMacIsBusy>
 8014650:	4603      	mov	r3, r0
 8014652:	2b00      	cmp	r3, #0
 8014654:	d001      	beq.n	801465a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8014656:	2301      	movs	r3, #1
 8014658:	e17e      	b.n	8014958 <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801465a:	f001 f99d 	bl	8015998 <LoRaMacConfirmQueueIsFull>
 801465e:	4603      	mov	r3, r0
 8014660:	2b00      	cmp	r3, #0
 8014662:	d001      	beq.n	8014668 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8014664:	2301      	movs	r3, #1
 8014666:	e177      	b.n	8014958 <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014668:	f001 f98a 	bl	8015980 <LoRaMacConfirmQueueGetCnt>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d104      	bne.n	801467c <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8014672:	2214      	movs	r2, #20
 8014674:	2100      	movs	r1, #0
 8014676:	48ba      	ldr	r0, [pc, #744]	@ (8014960 <LoRaMacMlmeRequest+0x33c>)
 8014678:	f004 fdec 	bl	8019254 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801467c:	4bb9      	ldr	r3, [pc, #740]	@ (8014964 <LoRaMacMlmeRequest+0x340>)
 801467e:	2201      	movs	r2, #1
 8014680:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014684:	4ab7      	ldr	r2, [pc, #732]	@ (8014964 <LoRaMacMlmeRequest+0x340>)
 8014686:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801468a:	f043 0304 	orr.w	r3, r3, #4
 801468e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801469a:	2301      	movs	r3, #1
 801469c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80146a0:	2300      	movs	r3, #0
 80146a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 80146a6:	2300      	movs	r3, #0
 80146a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	3b01      	subs	r3, #1
 80146b2:	2b0c      	cmp	r3, #12
 80146b4:	f200 811e 	bhi.w	80148f4 <LoRaMacMlmeRequest+0x2d0>
 80146b8:	a201      	add	r2, pc, #4	@ (adr r2, 80146c0 <LoRaMacMlmeRequest+0x9c>)
 80146ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146be:	bf00      	nop
 80146c0:	080146f5 	.word	0x080146f5
 80146c4:	080148f5 	.word	0x080148f5
 80146c8:	080148f5 	.word	0x080148f5
 80146cc:	080148f5 	.word	0x080148f5
 80146d0:	080147d9 	.word	0x080147d9
 80146d4:	080147fd 	.word	0x080147fd
 80146d8:	080148f5 	.word	0x080148f5
 80146dc:	080148f5 	.word	0x080148f5
 80146e0:	0801481b 	.word	0x0801481b
 80146e4:	080148f5 	.word	0x080148f5
 80146e8:	080148c3 	.word	0x080148c3
 80146ec:	08014857 	.word	0x08014857
 80146f0:	080148a1 	.word	0x080148a1
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80146f4:	4b9b      	ldr	r3, [pc, #620]	@ (8014964 <LoRaMacMlmeRequest+0x340>)
 80146f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80146fa:	f003 0320 	and.w	r3, r3, #32
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d001      	beq.n	8014706 <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 8014702:	2301      	movs	r3, #1
 8014704:	e128      	b.n	8014958 <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	791b      	ldrb	r3, [r3, #4]
 801470a:	2b02      	cmp	r3, #2
 801470c:	d135      	bne.n	801477a <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 801470e:	2000      	movs	r0, #0
 8014710:	f7fe f85a 	bl	80127c8 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014714:	4b94      	ldr	r3, [pc, #592]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 8014716:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	795b      	ldrb	r3, [r3, #5]
 801471e:	b25b      	sxtb	r3, r3
 8014720:	2200      	movs	r2, #0
 8014722:	4619      	mov	r1, r3
 8014724:	f002 fc52 	bl	8016fcc <RegionAlternateDr>
 8014728:	4603      	mov	r3, r0
 801472a:	461a      	mov	r2, r3
 801472c:	4b8e      	ldr	r3, [pc, #568]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 801472e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014738:	4b8b      	ldr	r3, [pc, #556]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 801473a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801473e:	2307      	movs	r3, #7
 8014740:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8014744:	20ff      	movs	r0, #255	@ 0xff
 8014746:	f7fd fdc3 	bl	80122d0 <SendReJoinReq>
 801474a:	4603      	mov	r3, r0
 801474c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8014750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014754:	2b00      	cmp	r3, #0
 8014756:	f000 80cf 	beq.w	80148f8 <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801475a:	4b83      	ldr	r3, [pc, #524]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 801475c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	795b      	ldrb	r3, [r3, #5]
 8014764:	b25b      	sxtb	r3, r3
 8014766:	2201      	movs	r2, #1
 8014768:	4619      	mov	r1, r3
 801476a:	f002 fc2f 	bl	8016fcc <RegionAlternateDr>
 801476e:	4603      	mov	r3, r0
 8014770:	461a      	mov	r2, r3
 8014772:	4b7d      	ldr	r3, [pc, #500]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 8014774:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014778:	e0be      	b.n	80148f8 <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	791b      	ldrb	r3, [r3, #4]
 801477e:	2b01      	cmp	r3, #1
 8014780:	f040 80ba 	bne.w	80148f8 <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8014784:	4b78      	ldr	r3, [pc, #480]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 8014786:	2200      	movs	r2, #0
 8014788:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801478c:	2302      	movs	r3, #2
 801478e:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014790:	4b75      	ldr	r3, [pc, #468]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 8014792:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014796:	f107 020c 	add.w	r2, r7, #12
 801479a:	4611      	mov	r1, r2
 801479c:	4618      	mov	r0, r3
 801479e:	f002 fb1b 	bl	8016dd8 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	791a      	ldrb	r2, [r3, #4]
 80147a6:	4b70      	ldr	r3, [pc, #448]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 80147a8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80147ac:	2300      	movs	r3, #0
 80147ae:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80147b2:	2301      	movs	r3, #1
 80147b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 80147b8:	f7fe fd56 	bl	8013268 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80147bc:	4a69      	ldr	r2, [pc, #420]	@ (8014964 <LoRaMacMlmeRequest+0x340>)
 80147be:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80147c2:	f043 0310 	orr.w	r3, r3, #16
 80147c6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 80147ca:	2301      	movs	r3, #1
 80147cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 80147d0:	2300      	movs	r3, #0
 80147d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80147d6:	e08f      	b.n	80148f8 <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80147de:	f107 031c 	add.w	r3, r7, #28
 80147e2:	2200      	movs	r2, #0
 80147e4:	4619      	mov	r1, r3
 80147e6:	2002      	movs	r0, #2
 80147e8:	f000 fd26 	bl	8015238 <LoRaMacCommandsAddCmd>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	f000 8084 	beq.w	80148fc <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80147f4:	2313      	movs	r3, #19
 80147f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80147fa:	e07f      	b.n	80148fc <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	8898      	ldrh	r0, [r3, #4]
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6899      	ldr	r1, [r3, #8]
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801480a:	b2db      	uxtb	r3, r3
 801480c:	461a      	mov	r2, r3
 801480e:	f7fe fb5b 	bl	8012ec8 <SetTxContinuousWave>
 8014812:	4603      	mov	r3, r0
 8014814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014818:	e077      	b.n	801490a <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801481a:	2300      	movs	r3, #0
 801481c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8014820:	f107 0308 	add.w	r3, r7, #8
 8014824:	4619      	mov	r1, r3
 8014826:	200d      	movs	r0, #13
 8014828:	f000 fd86 	bl	8015338 <LoRaMacCommandsGetCmd>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d103      	bne.n	801483a <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 8014832:	2300      	movs	r3, #0
 8014834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8014838:	e062      	b.n	8014900 <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801483a:	f107 031c 	add.w	r3, r7, #28
 801483e:	2200      	movs	r2, #0
 8014840:	4619      	mov	r1, r3
 8014842:	200d      	movs	r0, #13
 8014844:	f000 fcf8 	bl	8015238 <LoRaMacCommandsAddCmd>
 8014848:	4603      	mov	r3, r0
 801484a:	2b00      	cmp	r3, #0
 801484c:	d058      	beq.n	8014900 <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801484e:	2313      	movs	r3, #19
 8014850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014854:	e054      	b.n	8014900 <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014856:	4b44      	ldr	r3, [pc, #272]	@ (8014968 <LoRaMacMlmeRequest+0x344>)
 8014858:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801485c:	2b00      	cmp	r3, #0
 801485e:	d151      	bne.n	8014904 <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	791b      	ldrb	r3, [r3, #4]
 8014864:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	791b      	ldrb	r3, [r3, #4]
 801486c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014870:	b2db      	uxtb	r3, r3
 8014872:	4618      	mov	r0, r3
 8014874:	f000 fb2a 	bl	8014ecc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014878:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801487c:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 801487e:	2300      	movs	r3, #0
 8014880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014884:	f107 031c 	add.w	r3, r7, #28
 8014888:	2201      	movs	r2, #1
 801488a:	4619      	mov	r1, r3
 801488c:	2010      	movs	r0, #16
 801488e:	f000 fcd3 	bl	8015238 <LoRaMacCommandsAddCmd>
 8014892:	4603      	mov	r3, r0
 8014894:	2b00      	cmp	r3, #0
 8014896:	d035      	beq.n	8014904 <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014898:	2313      	movs	r3, #19
 801489a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 801489e:	e031      	b.n	8014904 <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80148a0:	2300      	movs	r3, #0
 80148a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80148a6:	f107 031c 	add.w	r3, r7, #28
 80148aa:	2200      	movs	r2, #0
 80148ac:	4619      	mov	r1, r3
 80148ae:	2012      	movs	r0, #18
 80148b0:	f000 fcc2 	bl	8015238 <LoRaMacCommandsAddCmd>
 80148b4:	4603      	mov	r3, r0
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d026      	beq.n	8014908 <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80148ba:	2313      	movs	r3, #19
 80148bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80148c0:	e022      	b.n	8014908 <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80148c2:	2301      	movs	r3, #1
 80148c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80148c8:	f000 fab6 	bl	8014e38 <LoRaMacClassBIsAcquisitionInProgress>
 80148cc:	4603      	mov	r3, r0
 80148ce:	f083 0301 	eor.w	r3, r3, #1
 80148d2:	b2db      	uxtb	r3, r3
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d009      	beq.n	80148ec <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80148d8:	2000      	movs	r0, #0
 80148da:	f000 fa8f 	bl	8014dfc <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80148de:	2000      	movs	r0, #0
 80148e0:	f000 fab1 	bl	8014e46 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80148e4:	2300      	movs	r3, #0
 80148e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80148ea:	e00e      	b.n	801490a <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 80148ec:	2301      	movs	r3, #1
 80148ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80148f2:	e00a      	b.n	801490a <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 80148f4:	bf00      	nop
 80148f6:	e008      	b.n	801490a <LoRaMacMlmeRequest+0x2e6>
            break;
 80148f8:	bf00      	nop
 80148fa:	e006      	b.n	801490a <LoRaMacMlmeRequest+0x2e6>
            break;
 80148fc:	bf00      	nop
 80148fe:	e004      	b.n	801490a <LoRaMacMlmeRequest+0x2e6>
            break;
 8014900:	bf00      	nop
 8014902:	e002      	b.n	801490a <LoRaMacMlmeRequest+0x2e6>
            break;
 8014904:	bf00      	nop
 8014906:	e000      	b.n	801490a <LoRaMacMlmeRequest+0x2e6>
            break;
 8014908:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801490a:	4b16      	ldr	r3, [pc, #88]	@ (8014964 <LoRaMacMlmeRequest+0x340>)
 801490c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014918:	2b00      	cmp	r3, #0
 801491a:	d010      	beq.n	801493e <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801491c:	f001 f830 	bl	8015980 <LoRaMacConfirmQueueGetCnt>
 8014920:	4603      	mov	r3, r0
 8014922:	2b00      	cmp	r3, #0
 8014924:	d116      	bne.n	8014954 <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 8014926:	4b0f      	ldr	r3, [pc, #60]	@ (8014964 <LoRaMacMlmeRequest+0x340>)
 8014928:	2200      	movs	r2, #0
 801492a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801492e:	4a0d      	ldr	r2, [pc, #52]	@ (8014964 <LoRaMacMlmeRequest+0x340>)
 8014930:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014934:	f36f 0382 	bfc	r3, #2, #1
 8014938:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 801493c:	e00a      	b.n	8014954 <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801493e:	f107 0320 	add.w	r3, r7, #32
 8014942:	4618      	mov	r0, r3
 8014944:	f000 fec8 	bl	80156d8 <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 8014948:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801494c:	2b00      	cmp	r3, #0
 801494e:	d001      	beq.n	8014954 <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 8014950:	f7ff fe34 	bl	80145bc <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 8014954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8014958:	4618      	mov	r0, r3
 801495a:	3728      	adds	r7, #40	@ 0x28
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	20000bb8 	.word	0x20000bb8
 8014964:	20000764 	.word	0x20000764
 8014968:	20000c98 	.word	0x20000c98

0801496c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801496c:	b5b0      	push	{r4, r5, r7, lr}
 801496e:	b092      	sub	sp, #72	@ 0x48
 8014970:	af02      	add	r7, sp, #8
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	460b      	mov	r3, r1
 8014976:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014978:	2302      	movs	r3, #2
 801497a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801497e:	2300      	movs	r3, #0
 8014980:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 8014984:	2300      	movs	r3, #0
 8014986:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014988:	2300      	movs	r3, #0
 801498a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 801498e:	2300      	movs	r3, #0
 8014990:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d101      	bne.n	801499e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801499a:	2303      	movs	r3, #3
 801499c:	e113      	b.n	8014bc6 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2200      	movs	r2, #0
 80149a2:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80149a4:	f7fc f968 	bl	8010c78 <LoRaMacIsBusy>
 80149a8:	4603      	mov	r3, r0
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d001      	beq.n	80149b2 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80149ae:	2301      	movs	r3, #1
 80149b0:	e109      	b.n	8014bc6 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f107 040c 	add.w	r4, r7, #12
 80149b8:	461d      	mov	r5, r3
 80149ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149be:	682b      	ldr	r3, [r5, #0]
 80149c0:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80149c2:	2300      	movs	r3, #0
 80149c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80149c8:	2214      	movs	r2, #20
 80149ca:	2100      	movs	r1, #0
 80149cc:	4880      	ldr	r0, [pc, #512]	@ (8014bd0 <LoRaMacMcpsRequest+0x264>)
 80149ce:	f004 fc41 	bl	8019254 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80149d2:	4b80      	ldr	r3, [pc, #512]	@ (8014bd4 <LoRaMacMcpsRequest+0x268>)
 80149d4:	2201      	movs	r2, #1
 80149d6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80149da:	4b7f      	ldr	r3, [pc, #508]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 80149dc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80149e0:	2b02      	cmp	r3, #2
 80149e2:	d111      	bne.n	8014a08 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80149e4:	4b7c      	ldr	r3, [pc, #496]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 80149e6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80149ea:	2b02      	cmp	r3, #2
 80149ec:	d10c      	bne.n	8014a08 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80149ee:	4b7a      	ldr	r3, [pc, #488]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 80149f0:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 80149f4:	f083 0301 	eor.w	r3, r3, #1
 80149f8:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d004      	beq.n	8014a08 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80149fe:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d101      	bne.n	8014a08 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8014a04:	2301      	movs	r3, #1
 8014a06:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8014a08:	7b3b      	ldrb	r3, [r7, #12]
 8014a0a:	2b03      	cmp	r3, #3
 8014a0c:	d030      	beq.n	8014a70 <LoRaMacMcpsRequest+0x104>
 8014a0e:	2b03      	cmp	r3, #3
 8014a10:	dc3f      	bgt.n	8014a92 <LoRaMacMcpsRequest+0x126>
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d002      	beq.n	8014a1c <LoRaMacMcpsRequest+0xb0>
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d015      	beq.n	8014a46 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014a1a:	e03a      	b.n	8014a92 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014a22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014a26:	2202      	movs	r2, #2
 8014a28:	f362 1347 	bfi	r3, r2, #5, #3
 8014a2c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8014a30:	7c3b      	ldrb	r3, [r7, #16]
 8014a32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8014a3a:	8b3b      	ldrh	r3, [r7, #24]
 8014a3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8014a3e:	7ebb      	ldrb	r3, [r7, #26]
 8014a40:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014a44:	e026      	b.n	8014a94 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014a46:	2301      	movs	r3, #1
 8014a48:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014a4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014a50:	2204      	movs	r2, #4
 8014a52:	f362 1347 	bfi	r3, r2, #5, #3
 8014a56:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8014a5a:	7c3b      	ldrb	r3, [r7, #16]
 8014a5c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8014a64:	8b3b      	ldrh	r3, [r7, #24]
 8014a66:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8014a68:	7ebb      	ldrb	r3, [r7, #26]
 8014a6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014a6e:	e011      	b.n	8014a94 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014a70:	2301      	movs	r3, #1
 8014a72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014a76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014a7a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8014a7e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8014a86:	8abb      	ldrh	r3, [r7, #20]
 8014a88:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8014a8a:	7dbb      	ldrb	r3, [r7, #22]
 8014a8c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014a90:	e000      	b.n	8014a94 <LoRaMacMcpsRequest+0x128>
            break;
 8014a92:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014a94:	2302      	movs	r3, #2
 8014a96:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014a9c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014aa0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014aa6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014aaa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8014aae:	4611      	mov	r1, r2
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f002 f968 	bl	8016d86 <RegionGetPhyParam>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014abc:	b25b      	sxtb	r3, r3
 8014abe:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	bfb8      	it	lt
 8014ac6:	4613      	movlt	r3, r2
 8014ac8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014acc:	4b42      	ldr	r3, [pc, #264]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014ace:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8014ad2:	4a41      	ldr	r2, [pc, #260]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014ad4:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8014ad8:	4a3f      	ldr	r2, [pc, #252]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014ada:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7fc fa66 	bl	8010fb0 <CheckForMinimumAbpDatarate>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d002      	beq.n	8014af0 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8014aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8014af0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d05f      	beq.n	8014bb8 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014af8:	4b37      	ldr	r3, [pc, #220]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014afa:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8014afe:	f083 0301 	eor.w	r3, r3, #1
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d10e      	bne.n	8014b26 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014b08:	4b33      	ldr	r3, [pc, #204]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014b0a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8014b0e:	4a32      	ldr	r2, [pc, #200]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014b10:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8014b14:	4a30      	ldr	r2, [pc, #192]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014b16:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7fc fa48 	bl	8010fb0 <CheckForMinimumAbpDatarate>
 8014b20:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d01c      	beq.n	8014b60 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8014b26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8014b2a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014b30:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014b34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014b38:	4b27      	ldr	r3, [pc, #156]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014b3a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014b3e:	f107 0120 	add.w	r1, r7, #32
 8014b42:	2205      	movs	r2, #5
 8014b44:	4618      	mov	r0, r3
 8014b46:	f002 f959 	bl	8016dfc <RegionVerify>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d005      	beq.n	8014b5c <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014b50:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8014b54:	4b20      	ldr	r3, [pc, #128]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014b56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8014b5a:	e001      	b.n	8014b60 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014b5c:	2303      	movs	r3, #3
 8014b5e:	e032      	b.n	8014bc6 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8014b60:	4b1d      	ldr	r3, [pc, #116]	@ (8014bd8 <LoRaMacMcpsRequest+0x26c>)
 8014b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014b66:	4a1b      	ldr	r2, [pc, #108]	@ (8014bd4 <LoRaMacMcpsRequest+0x268>)
 8014b68:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8014b6c:	4611      	mov	r1, r2
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fc fb0a 	bl	8011188 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014b74:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014b76:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8014b7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014b7e:	78fb      	ldrb	r3, [r7, #3]
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	4613      	mov	r3, r2
 8014b84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b86:	f7fd fac1 	bl	801210c <Send>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8014b90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d10b      	bne.n	8014bb0 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8014b98:	7b3a      	ldrb	r2, [r7, #12]
 8014b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8014bd4 <LoRaMacMcpsRequest+0x268>)
 8014b9c:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8014bd4 <LoRaMacMcpsRequest+0x268>)
 8014ba2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014ba6:	f043 0301 	orr.w	r3, r3, #1
 8014baa:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8014bae:	e003      	b.n	8014bb8 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014bb0:	4b08      	ldr	r3, [pc, #32]	@ (8014bd4 <LoRaMacMcpsRequest+0x268>)
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014bb8:	4b06      	ldr	r3, [pc, #24]	@ (8014bd4 <LoRaMacMcpsRequest+0x268>)
 8014bba:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	611a      	str	r2, [r3, #16]

    return status;
 8014bc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3740      	adds	r7, #64	@ 0x40
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8014bce:	bf00      	nop
 8014bd0:	20000ba4 	.word	0x20000ba4
 8014bd4:	20000764 	.word	0x20000764
 8014bd8:	20000c98 	.word	0x20000c98

08014bdc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	4603      	mov	r3, r0
 8014be4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014be6:	79fb      	ldrb	r3, [r7, #7]
 8014be8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8014bea:	4b0d      	ldr	r3, [pc, #52]	@ (8014c20 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014bec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014bf0:	f107 010c 	add.w	r1, r7, #12
 8014bf4:	220f      	movs	r2, #15
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f002 f900 	bl	8016dfc <RegionVerify>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d00a      	beq.n	8014c18 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8014c02:	4a07      	ldr	r2, [pc, #28]	@ (8014c20 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014c04:	79fb      	ldrb	r3, [r7, #7]
 8014c06:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8014c0a:	4a06      	ldr	r2, [pc, #24]	@ (8014c24 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014c0c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014c10:	f043 0320 	orr.w	r3, r3, #32
 8014c14:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8014c18:	bf00      	nop
 8014c1a:	3710      	adds	r7, #16
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	20000c98 	.word	0x20000c98
 8014c24:	20000764 	.word	0x20000764

08014c28 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8014c2c:	f7fe fe30 	bl	8013890 <LoRaMacStop>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d112      	bne.n	8014c5c <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8014c36:	480b      	ldr	r0, [pc, #44]	@ (8014c64 <LoRaMacDeInitialization+0x3c>)
 8014c38:	f008 fc1e 	bl	801d478 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014c3c:	480a      	ldr	r0, [pc, #40]	@ (8014c68 <LoRaMacDeInitialization+0x40>)
 8014c3e:	f008 fc1b 	bl	801d478 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014c42:	480a      	ldr	r0, [pc, #40]	@ (8014c6c <LoRaMacDeInitialization+0x44>)
 8014c44:	f008 fc18 	bl	801d478 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014c48:	f000 f94a 	bl	8014ee0 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	f7fd fdbb 	bl	80127c8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014c52:	4b07      	ldr	r3, [pc, #28]	@ (8014c70 <LoRaMacDeInitialization+0x48>)
 8014c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c56:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	e000      	b.n	8014c5e <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8014c5c:	2301      	movs	r3, #1
    }
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	20000acc 	.word	0x20000acc
 8014c68:	20000ae4 	.word	0x20000ae4
 8014c6c:	20000afc 	.word	0x20000afc
 8014c70:	0801ff20 	.word	0x0801ff20

08014c74 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b08c      	sub	sp, #48	@ 0x30
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	607a      	str	r2, [r7, #4]
 8014c80:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014c82:	2300      	movs	r3, #0
 8014c84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	7b1b      	ldrb	r3, [r3, #12]
 8014c8c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	7b5b      	ldrb	r3, [r3, #13]
 8014c94:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	7b9b      	ldrb	r3, [r3, #14]
 8014c9c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	685a      	ldr	r2, [r3, #4]
 8014ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ca6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	785b      	ldrb	r3, [r3, #1]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	f000 8088 	beq.w	8014dc2 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014cb2:	2302      	movs	r3, #2
 8014cb4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	7bdb      	ldrb	r3, [r3, #15]
 8014cbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	7c1b      	ldrb	r3, [r3, #16]
 8014cc4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014cc8:	4611      	mov	r1, r2
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f002 f85b 	bl	8016d86 <RegionGetPhyParam>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8014cd4:	6a3b      	ldr	r3, [r7, #32]
 8014cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8014cda:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8014cde:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8014ce2:	4293      	cmp	r3, r2
 8014ce4:	bfb8      	it	lt
 8014ce6:	4613      	movlt	r3, r2
 8014ce8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	685b      	ldr	r3, [r3, #4]
 8014cf0:	68fa      	ldr	r2, [r7, #12]
 8014cf2:	8912      	ldrh	r2, [r2, #8]
 8014cf4:	4293      	cmp	r3, r2
 8014cf6:	d302      	bcc.n	8014cfe <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	68fa      	ldr	r2, [r7, #12]
 8014d04:	8912      	ldrh	r2, [r2, #8]
 8014d06:	4611      	mov	r1, r2
 8014d08:	68fa      	ldr	r2, [r7, #12]
 8014d0a:	8952      	ldrh	r2, [r2, #10]
 8014d0c:	440a      	add	r2, r1
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	d30f      	bcc.n	8014d32 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8014d12:	230a      	movs	r3, #10
 8014d14:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	7c1b      	ldrb	r3, [r3, #16]
 8014d1c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014d20:	4611      	mov	r1, r2
 8014d22:	4618      	mov	r0, r3
 8014d24:	f002 f82f 	bl	8016d86 <RegionGetPhyParam>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8014d2c:	6a3b      	ldr	r3, [r7, #32]
 8014d2e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	68fa      	ldr	r2, [r7, #12]
 8014d38:	8912      	ldrh	r2, [r2, #8]
 8014d3a:	4611      	mov	r1, r2
 8014d3c:	68fa      	ldr	r2, [r7, #12]
 8014d3e:	8952      	ldrh	r2, [r2, #10]
 8014d40:	0052      	lsls	r2, r2, #1
 8014d42:	440a      	add	r2, r1
 8014d44:	4293      	cmp	r3, r2
 8014d46:	d33c      	bcc.n	8014dc2 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	68fa      	ldr	r2, [r7, #12]
 8014d4e:	8912      	ldrh	r2, [r2, #8]
 8014d50:	1a9b      	subs	r3, r3, r2
 8014d52:	68fa      	ldr	r2, [r7, #12]
 8014d54:	8952      	ldrh	r2, [r2, #10]
 8014d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8014d5a:	fb01 f202 	mul.w	r2, r1, r2
 8014d5e:	1a9b      	subs	r3, r3, r2
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d12e      	bne.n	8014dc2 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8014d64:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8014d68:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d110      	bne.n	8014d92 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d009      	beq.n	8014d8c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014d78:	2302      	movs	r3, #2
 8014d7a:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	7c1b      	ldrb	r3, [r3, #16]
 8014d80:	f107 0210 	add.w	r2, r7, #16
 8014d84:	4611      	mov	r1, r2
 8014d86:	4618      	mov	r0, r3
 8014d88:	f002 f826 	bl	8016dd8 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014d92:	2321      	movs	r3, #33	@ 0x21
 8014d94:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8014d98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014d9c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	7bdb      	ldrb	r3, [r3, #15]
 8014da4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	7c1b      	ldrb	r3, [r3, #16]
 8014dac:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014db0:	4611      	mov	r1, r2
 8014db2:	4618      	mov	r0, r3
 8014db4:	f001 ffe7 	bl	8016d86 <RegionGetPhyParam>
 8014db8:	4603      	mov	r3, r0
 8014dba:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8014dbc:	6a3b      	ldr	r3, [r7, #32]
 8014dbe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8014dc8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8014dd0:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014dd8:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3730      	adds	r7, #48	@ 0x30
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}

08014de6 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014de6:	b480      	push	{r7}
 8014de8:	b085      	sub	sp, #20
 8014dea:	af00      	add	r7, sp, #0
 8014dec:	60f8      	str	r0, [r7, #12]
 8014dee:	60b9      	str	r1, [r7, #8]
 8014df0:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014df2:	bf00      	nop
 8014df4:	3714      	adds	r7, #20
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bc80      	pop	{r7}
 8014dfa:	4770      	bx	lr

08014dfc <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	4603      	mov	r3, r0
 8014e04:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e06:	bf00      	nop
 8014e08:	370c      	adds	r7, #12
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bc80      	pop	{r7}
 8014e0e:	4770      	bx	lr

08014e10 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014e10:	b480      	push	{r7}
 8014e12:	b083      	sub	sp, #12
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	4603      	mov	r3, r0
 8014e18:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e1a:	bf00      	nop
 8014e1c:	370c      	adds	r7, #12
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bc80      	pop	{r7}
 8014e22:	4770      	bx	lr

08014e24 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014e24:	b480      	push	{r7}
 8014e26:	b083      	sub	sp, #12
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e2e:	bf00      	nop
 8014e30:	370c      	adds	r7, #12
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bc80      	pop	{r7}
 8014e36:	4770      	bx	lr

08014e38 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014e38:	b480      	push	{r7}
 8014e3a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014e3c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bc80      	pop	{r7}
 8014e44:	4770      	bx	lr

08014e46 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014e46:	b480      	push	{r7}
 8014e48:	b083      	sub	sp, #12
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e4e:	bf00      	nop
 8014e50:	370c      	adds	r7, #12
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bc80      	pop	{r7}
 8014e56:	4770      	bx	lr

08014e58 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e60:	bf00      	nop
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bc80      	pop	{r7}
 8014e68:	4770      	bx	lr

08014e6a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014e6a:	b480      	push	{r7}
 8014e6c:	b083      	sub	sp, #12
 8014e6e:	af00      	add	r7, sp, #0
 8014e70:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e72:	bf00      	nop
 8014e74:	370c      	adds	r7, #12
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bc80      	pop	{r7}
 8014e7a:	4770      	bx	lr

08014e7c <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b083      	sub	sp, #12
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	460b      	mov	r3, r1
 8014e86:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014e88:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	370c      	adds	r7, #12
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bc80      	pop	{r7}
 8014e92:	4770      	bx	lr

08014e94 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8014e94:	b480      	push	{r7}
 8014e96:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014e98:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bc80      	pop	{r7}
 8014ea0:	4770      	bx	lr

08014ea2 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014ea2:	b480      	push	{r7}
 8014ea4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014ea6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bc80      	pop	{r7}
 8014eae:	4770      	bx	lr

08014eb0 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014eb4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bc80      	pop	{r7}
 8014ebc:	4770      	bx	lr

08014ebe <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8014ebe:	b480      	push	{r7}
 8014ec0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014ec2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bc80      	pop	{r7}
 8014eca:	4770      	bx	lr

08014ecc <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ed6:	bf00      	nop
 8014ed8:	370c      	adds	r7, #12
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bc80      	pop	{r7}
 8014ede:	4770      	bx	lr

08014ee0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ee4:	bf00      	nop
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bc80      	pop	{r7}
 8014eea:	4770      	bx	lr

08014eec <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014eec:	b480      	push	{r7}
 8014eee:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ef0:	bf00      	nop
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bc80      	pop	{r7}
 8014ef6:	4770      	bx	lr

08014ef8 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014ef8:	b480      	push	{r7}
 8014efa:	b083      	sub	sp, #12
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	4603      	mov	r3, r0
 8014f00:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014f02:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	370c      	adds	r7, #12
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bc80      	pop	{r7}
 8014f0c:	4770      	bx	lr

08014f0e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014f0e:	b480      	push	{r7}
 8014f10:	b083      	sub	sp, #12
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014f16:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	370c      	adds	r7, #12
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bc80      	pop	{r7}
 8014f20:	4770      	bx	lr

08014f22 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014f22:	b480      	push	{r7}
 8014f24:	b083      	sub	sp, #12
 8014f26:	af00      	add	r7, sp, #0
 8014f28:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014f2a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	370c      	adds	r7, #12
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bc80      	pop	{r7}
 8014f34:	4770      	bx	lr

08014f36 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014f36:	b480      	push	{r7}
 8014f38:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f3a:	bf00      	nop
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bc80      	pop	{r7}
 8014f40:	4770      	bx	lr

08014f42 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014f42:	b480      	push	{r7}
 8014f44:	b083      	sub	sp, #12
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	4603      	mov	r3, r0
 8014f4a:	6039      	str	r1, [r7, #0]
 8014f4c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8014f4e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	370c      	adds	r7, #12
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bc80      	pop	{r7}
 8014f58:	4770      	bx	lr

08014f5a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014f5a:	b480      	push	{r7}
 8014f5c:	b083      	sub	sp, #12
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	4603      	mov	r3, r0
 8014f62:	603a      	str	r2, [r7, #0]
 8014f64:	80fb      	strh	r3, [r7, #6]
 8014f66:	460b      	mov	r3, r1
 8014f68:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f6a:	bf00      	nop
 8014f6c:	370c      	adds	r7, #12
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bc80      	pop	{r7}
 8014f72:	4770      	bx	lr

08014f74 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014f74:	b480      	push	{r7}
 8014f76:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f78:	bf00      	nop
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bc80      	pop	{r7}
 8014f7e:	4770      	bx	lr

08014f80 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8014f80:	b480      	push	{r7}
 8014f82:	b083      	sub	sp, #12
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8014f88:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	370c      	adds	r7, #12
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bc80      	pop	{r7}
 8014f92:	4770      	bx	lr

08014f94 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8014f94:	b480      	push	{r7}
 8014f96:	b083      	sub	sp, #12
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8014f9c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	370c      	adds	r7, #12
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bc80      	pop	{r7}
 8014fa6:	4770      	bx	lr

08014fa8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8014fa8:	b480      	push	{r7}
 8014faa:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014fac:	bf00      	nop
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bc80      	pop	{r7}
 8014fb2:	4770      	bx	lr

08014fb4 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b083      	sub	sp, #12
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014fc0:	bf00      	nop
 8014fc2:	370c      	adds	r7, #12
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bc80      	pop	{r7}
 8014fc8:	4770      	bx	lr

08014fca <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8014fca:	b480      	push	{r7}
 8014fcc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014fce:	bf00      	nop
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bc80      	pop	{r7}
 8014fd4:	4770      	bx	lr

08014fd6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014fd6:	b480      	push	{r7}
 8014fd8:	b085      	sub	sp, #20
 8014fda:	af00      	add	r7, sp, #0
 8014fdc:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	81fb      	strh	r3, [r7, #14]
 8014fe6:	e00a      	b.n	8014ffe <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8014fe8:	89fb      	ldrh	r3, [r7, #14]
 8014fea:	68ba      	ldr	r2, [r7, #8]
 8014fec:	4413      	add	r3, r2
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d001      	beq.n	8014ff8 <IsSlotFree+0x22>
        {
            return false;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	e006      	b.n	8015006 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014ff8:	89fb      	ldrh	r3, [r7, #14]
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	81fb      	strh	r3, [r7, #14]
 8014ffe:	89fb      	ldrh	r3, [r7, #14]
 8015000:	2b0f      	cmp	r3, #15
 8015002:	d9f1      	bls.n	8014fe8 <IsSlotFree+0x12>
        }
    }
    return true;
 8015004:	2301      	movs	r3, #1
}
 8015006:	4618      	mov	r0, r3
 8015008:	3714      	adds	r7, #20
 801500a:	46bd      	mov	sp, r7
 801500c:	bc80      	pop	{r7}
 801500e:	4770      	bx	lr

08015010 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015016:	2300      	movs	r3, #0
 8015018:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801501a:	e007      	b.n	801502c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801501c:	79fb      	ldrb	r3, [r7, #7]
 801501e:	3301      	adds	r3, #1
 8015020:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015022:	79fb      	ldrb	r3, [r7, #7]
 8015024:	2b20      	cmp	r3, #32
 8015026:	d101      	bne.n	801502c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015028:	2300      	movs	r3, #0
 801502a:	e012      	b.n	8015052 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801502c:	79fb      	ldrb	r3, [r7, #7]
 801502e:	011b      	lsls	r3, r3, #4
 8015030:	3308      	adds	r3, #8
 8015032:	4a0a      	ldr	r2, [pc, #40]	@ (801505c <MallocNewMacCommandSlot+0x4c>)
 8015034:	4413      	add	r3, r2
 8015036:	4618      	mov	r0, r3
 8015038:	f7ff ffcd 	bl	8014fd6 <IsSlotFree>
 801503c:	4603      	mov	r3, r0
 801503e:	f083 0301 	eor.w	r3, r3, #1
 8015042:	b2db      	uxtb	r3, r3
 8015044:	2b00      	cmp	r3, #0
 8015046:	d1e9      	bne.n	801501c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015048:	79fb      	ldrb	r3, [r7, #7]
 801504a:	011b      	lsls	r3, r3, #4
 801504c:	3308      	adds	r3, #8
 801504e:	4a03      	ldr	r2, [pc, #12]	@ (801505c <MallocNewMacCommandSlot+0x4c>)
 8015050:	4413      	add	r3, r2
}
 8015052:	4618      	mov	r0, r3
 8015054:	3708      	adds	r7, #8
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	200018bc 	.word	0x200018bc

08015060 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d101      	bne.n	8015072 <FreeMacCommandSlot+0x12>
    {
        return false;
 801506e:	2300      	movs	r3, #0
 8015070:	e005      	b.n	801507e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015072:	2210      	movs	r2, #16
 8015074:	2100      	movs	r1, #0
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	f004 f8ec 	bl	8019254 <memset1>

    return true;
 801507c:	2301      	movs	r3, #1
}
 801507e:	4618      	mov	r0, r3
 8015080:	3708      	adds	r7, #8
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}

08015086 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015086:	b480      	push	{r7}
 8015088:	b083      	sub	sp, #12
 801508a:	af00      	add	r7, sp, #0
 801508c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d101      	bne.n	8015098 <LinkedListInit+0x12>
    {
        return false;
 8015094:	2300      	movs	r3, #0
 8015096:	e006      	b.n	80150a6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2200      	movs	r2, #0
 801509c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	605a      	str	r2, [r3, #4]

    return true;
 80150a4:	2301      	movs	r3, #1
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	370c      	adds	r7, #12
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bc80      	pop	{r7}
 80150ae:	4770      	bx	lr

080150b0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80150b0:	b480      	push	{r7}
 80150b2:	b083      	sub	sp, #12
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d002      	beq.n	80150c6 <LinkedListAdd+0x16>
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d101      	bne.n	80150ca <LinkedListAdd+0x1a>
    {
        return false;
 80150c6:	2300      	movs	r3, #0
 80150c8:	e015      	b.n	80150f6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d102      	bne.n	80150d8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	683a      	ldr	r2, [r7, #0]
 80150d6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d003      	beq.n	80150e8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	685b      	ldr	r3, [r3, #4]
 80150e4:	683a      	ldr	r2, [r7, #0]
 80150e6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	2200      	movs	r2, #0
 80150ec:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	683a      	ldr	r2, [r7, #0]
 80150f2:	605a      	str	r2, [r3, #4]

    return true;
 80150f4:	2301      	movs	r3, #1
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	370c      	adds	r7, #12
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bc80      	pop	{r7}
 80150fe:	4770      	bx	lr

08015100 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015100:	b480      	push	{r7}
 8015102:	b085      	sub	sp, #20
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d002      	beq.n	8015116 <LinkedListGetPrevious+0x16>
 8015110:	683b      	ldr	r3, [r7, #0]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d101      	bne.n	801511a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015116:	2300      	movs	r3, #0
 8015118:	e016      	b.n	8015148 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015120:	683a      	ldr	r2, [r7, #0]
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	429a      	cmp	r2, r3
 8015126:	d00c      	beq.n	8015142 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015128:	e002      	b.n	8015130 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d007      	beq.n	8015146 <LinkedListGetPrevious+0x46>
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	683a      	ldr	r2, [r7, #0]
 801513c:	429a      	cmp	r2, r3
 801513e:	d1f4      	bne.n	801512a <LinkedListGetPrevious+0x2a>
 8015140:	e001      	b.n	8015146 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015142:	2300      	movs	r3, #0
 8015144:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015146:	68fb      	ldr	r3, [r7, #12]
}
 8015148:	4618      	mov	r0, r3
 801514a:	3714      	adds	r7, #20
 801514c:	46bd      	mov	sp, r7
 801514e:	bc80      	pop	{r7}
 8015150:	4770      	bx	lr

08015152 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015152:	b580      	push	{r7, lr}
 8015154:	b084      	sub	sp, #16
 8015156:	af00      	add	r7, sp, #0
 8015158:	6078      	str	r0, [r7, #4]
 801515a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d002      	beq.n	8015168 <LinkedListRemove+0x16>
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d101      	bne.n	801516c <LinkedListRemove+0x1a>
    {
        return false;
 8015168:	2300      	movs	r3, #0
 801516a:	e020      	b.n	80151ae <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801516c:	6839      	ldr	r1, [r7, #0]
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f7ff ffc6 	bl	8015100 <LinkedListGetPrevious>
 8015174:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	683a      	ldr	r2, [r7, #0]
 801517c:	429a      	cmp	r2, r3
 801517e:	d103      	bne.n	8015188 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	681a      	ldr	r2, [r3, #0]
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	685b      	ldr	r3, [r3, #4]
 801518c:	683a      	ldr	r2, [r7, #0]
 801518e:	429a      	cmp	r2, r3
 8015190:	d102      	bne.n	8015198 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	68fa      	ldr	r2, [r7, #12]
 8015196:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d003      	beq.n	80151a6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	2200      	movs	r2, #0
 80151aa:	601a      	str	r2, [r3, #0]

    return true;
 80151ac:	2301      	movs	r3, #1
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
	...

080151b8 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80151b8:	b480      	push	{r7}
 80151ba:	b083      	sub	sp, #12
 80151bc:	af00      	add	r7, sp, #0
 80151be:	4603      	mov	r3, r0
 80151c0:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80151c2:	79fb      	ldrb	r3, [r7, #7]
 80151c4:	2b11      	cmp	r3, #17
 80151c6:	bf8c      	ite	hi
 80151c8:	2201      	movhi	r2, #1
 80151ca:	2200      	movls	r2, #0
 80151cc:	b2d2      	uxtb	r2, r2
 80151ce:	2a00      	cmp	r2, #0
 80151d0:	d10d      	bne.n	80151ee <IsSticky+0x36>
 80151d2:	4a0a      	ldr	r2, [pc, #40]	@ (80151fc <IsSticky+0x44>)
 80151d4:	fa22 f303 	lsr.w	r3, r2, r3
 80151d8:	f003 0301 	and.w	r3, r3, #1
 80151dc:	2b00      	cmp	r3, #0
 80151de:	bf14      	ite	ne
 80151e0:	2301      	movne	r3, #1
 80151e2:	2300      	moveq	r3, #0
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d001      	beq.n	80151ee <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80151ea:	2301      	movs	r3, #1
 80151ec:	e000      	b.n	80151f0 <IsSticky+0x38>
        default:
            return false;
 80151ee:	2300      	movs	r3, #0
    }
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	370c      	adds	r7, #12
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bc80      	pop	{r7}
 80151f8:	4770      	bx	lr
 80151fa:	bf00      	nop
 80151fc:	00020720 	.word	0x00020720

08015200 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015200:	b480      	push	{r7}
 8015202:	b083      	sub	sp, #12
 8015204:	af00      	add	r7, sp, #0
 8015206:	4603      	mov	r3, r0
 8015208:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801520a:	2300      	movs	r3, #0
    }
}
 801520c:	4618      	mov	r0, r3
 801520e:	370c      	adds	r7, #12
 8015210:	46bd      	mov	sp, r7
 8015212:	bc80      	pop	{r7}
 8015214:	4770      	bx	lr
	...

08015218 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015218:	b580      	push	{r7, lr}
 801521a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801521c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8015220:	2100      	movs	r1, #0
 8015222:	4804      	ldr	r0, [pc, #16]	@ (8015234 <LoRaMacCommandsInit+0x1c>)
 8015224:	f004 f816 	bl	8019254 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015228:	4802      	ldr	r0, [pc, #8]	@ (8015234 <LoRaMacCommandsInit+0x1c>)
 801522a:	f7ff ff2c 	bl	8015086 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801522e:	2300      	movs	r3, #0
}
 8015230:	4618      	mov	r0, r3
 8015232:	bd80      	pop	{r7, pc}
 8015234:	200018bc 	.word	0x200018bc

08015238 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b086      	sub	sp, #24
 801523c:	af00      	add	r7, sp, #0
 801523e:	4603      	mov	r3, r0
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	607a      	str	r2, [r7, #4]
 8015244:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d101      	bne.n	8015250 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801524c:	2301      	movs	r3, #1
 801524e:	e03b      	b.n	80152c8 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015250:	f7ff fede 	bl	8015010 <MallocNewMacCommandSlot>
 8015254:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d101      	bne.n	8015260 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801525c:	2302      	movs	r3, #2
 801525e:	e033      	b.n	80152c8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015260:	6979      	ldr	r1, [r7, #20]
 8015262:	481b      	ldr	r0, [pc, #108]	@ (80152d0 <LoRaMacCommandsAddCmd+0x98>)
 8015264:	f7ff ff24 	bl	80150b0 <LinkedListAdd>
 8015268:	4603      	mov	r3, r0
 801526a:	f083 0301 	eor.w	r3, r3, #1
 801526e:	b2db      	uxtb	r3, r3
 8015270:	2b00      	cmp	r3, #0
 8015272:	d001      	beq.n	8015278 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015274:	2305      	movs	r3, #5
 8015276:	e027      	b.n	80152c8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	7bfa      	ldrb	r2, [r7, #15]
 801527c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	687a      	ldr	r2, [r7, #4]
 8015282:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	3305      	adds	r3, #5
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	b292      	uxth	r2, r2
 801528c:	68b9      	ldr	r1, [r7, #8]
 801528e:	4618      	mov	r0, r3
 8015290:	f003 ffa5 	bl	80191de <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015294:	7bfb      	ldrb	r3, [r7, #15]
 8015296:	4618      	mov	r0, r3
 8015298:	f7ff ff8e 	bl	80151b8 <IsSticky>
 801529c:	4603      	mov	r3, r0
 801529e:	461a      	mov	r2, r3
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80152a4:	7bfb      	ldrb	r3, [r7, #15]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7ff ffaa 	bl	8015200 <IsConfirmationRequired>
 80152ac:	4603      	mov	r3, r0
 80152ae:	461a      	mov	r2, r3
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80152b4:	4b06      	ldr	r3, [pc, #24]	@ (80152d0 <LoRaMacCommandsAddCmd+0x98>)
 80152b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	4413      	add	r3, r2
 80152be:	3301      	adds	r3, #1
 80152c0:	4a03      	ldr	r2, [pc, #12]	@ (80152d0 <LoRaMacCommandsAddCmd+0x98>)
 80152c2:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80152c6:	2300      	movs	r3, #0
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	3718      	adds	r7, #24
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	200018bc 	.word	0x200018bc

080152d4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d101      	bne.n	80152e6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80152e2:	2301      	movs	r3, #1
 80152e4:	e021      	b.n	801532a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80152e6:	6879      	ldr	r1, [r7, #4]
 80152e8:	4812      	ldr	r0, [pc, #72]	@ (8015334 <LoRaMacCommandsRemoveCmd+0x60>)
 80152ea:	f7ff ff32 	bl	8015152 <LinkedListRemove>
 80152ee:	4603      	mov	r3, r0
 80152f0:	f083 0301 	eor.w	r3, r3, #1
 80152f4:	b2db      	uxtb	r3, r3
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d001      	beq.n	80152fe <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80152fa:	2303      	movs	r3, #3
 80152fc:	e015      	b.n	801532a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80152fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015334 <LoRaMacCommandsRemoveCmd+0x60>)
 8015300:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	689b      	ldr	r3, [r3, #8]
 8015308:	1ad3      	subs	r3, r2, r3
 801530a:	3b01      	subs	r3, #1
 801530c:	4a09      	ldr	r2, [pc, #36]	@ (8015334 <LoRaMacCommandsRemoveCmd+0x60>)
 801530e:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f7ff fea4 	bl	8015060 <FreeMacCommandSlot>
 8015318:	4603      	mov	r3, r0
 801531a:	f083 0301 	eor.w	r3, r3, #1
 801531e:	b2db      	uxtb	r3, r3
 8015320:	2b00      	cmp	r3, #0
 8015322:	d001      	beq.n	8015328 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015324:	2305      	movs	r3, #5
 8015326:	e000      	b.n	801532a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015328:	2300      	movs	r3, #0
}
 801532a:	4618      	mov	r0, r3
 801532c:	3708      	adds	r7, #8
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	200018bc 	.word	0x200018bc

08015338 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015338:	b480      	push	{r7}
 801533a:	b085      	sub	sp, #20
 801533c:	af00      	add	r7, sp, #0
 801533e:	4603      	mov	r3, r0
 8015340:	6039      	str	r1, [r7, #0]
 8015342:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015344:	4b0e      	ldr	r3, [pc, #56]	@ (8015380 <LoRaMacCommandsGetCmd+0x48>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801534a:	e002      	b.n	8015352 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d004      	beq.n	8015362 <LoRaMacCommandsGetCmd+0x2a>
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	791b      	ldrb	r3, [r3, #4]
 801535c:	79fa      	ldrb	r2, [r7, #7]
 801535e:	429a      	cmp	r2, r3
 8015360:	d1f4      	bne.n	801534c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	68fa      	ldr	r2, [r7, #12]
 8015366:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d101      	bne.n	8015372 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801536e:	2303      	movs	r3, #3
 8015370:	e000      	b.n	8015374 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015372:	2300      	movs	r3, #0
}
 8015374:	4618      	mov	r0, r3
 8015376:	3714      	adds	r7, #20
 8015378:	46bd      	mov	sp, r7
 801537a:	bc80      	pop	{r7}
 801537c:	4770      	bx	lr
 801537e:	bf00      	nop
 8015380:	200018bc 	.word	0x200018bc

08015384 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b082      	sub	sp, #8
 8015388:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801538a:	4b0f      	ldr	r3, [pc, #60]	@ (80153c8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015390:	e012      	b.n	80153b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	7b1b      	ldrb	r3, [r3, #12]
 8015396:	f083 0301 	eor.w	r3, r3, #1
 801539a:	b2db      	uxtb	r3, r3
 801539c:	2b00      	cmp	r3, #0
 801539e:	d008      	beq.n	80153b2 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f7ff ff94 	bl	80152d4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	607b      	str	r3, [r7, #4]
 80153b0:	e002      	b.n	80153b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d1e9      	bne.n	8015392 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80153be:	2300      	movs	r3, #0
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	200018bc 	.word	0x200018bc

080153cc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80153d2:	4b13      	ldr	r3, [pc, #76]	@ (8015420 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80153d8:	e01a      	b.n	8015410 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	791b      	ldrb	r3, [r3, #4]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7ff fee7 	bl	80151b8 <IsSticky>
 80153ea:	4603      	mov	r3, r0
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d00d      	beq.n	801540c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	791b      	ldrb	r3, [r3, #4]
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7ff ff03 	bl	8015200 <IsConfirmationRequired>
 80153fa:	4603      	mov	r3, r0
 80153fc:	f083 0301 	eor.w	r3, r3, #1
 8015400:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015402:	2b00      	cmp	r3, #0
 8015404:	d002      	beq.n	801540c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f7ff ff64 	bl	80152d4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d1e1      	bne.n	80153da <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015416:	2300      	movs	r3, #0
}
 8015418:	4618      	mov	r0, r3
 801541a:	3708      	adds	r7, #8
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	200018bc 	.word	0x200018bc

08015424 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015424:	b480      	push	{r7}
 8015426:	b083      	sub	sp, #12
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d101      	bne.n	8015436 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015432:	2301      	movs	r3, #1
 8015434:	e005      	b.n	8015442 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015436:	4b05      	ldr	r3, [pc, #20]	@ (801544c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015438:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015440:	2300      	movs	r3, #0
}
 8015442:	4618      	mov	r0, r3
 8015444:	370c      	adds	r7, #12
 8015446:	46bd      	mov	sp, r7
 8015448:	bc80      	pop	{r7}
 801544a:	4770      	bx	lr
 801544c:	200018bc 	.word	0x200018bc

08015450 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b088      	sub	sp, #32
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801545c:	4b25      	ldr	r3, [pc, #148]	@ (80154f4 <LoRaMacCommandsSerializeCmds+0xa4>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015462:	2300      	movs	r3, #0
 8015464:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d002      	beq.n	8015472 <LoRaMacCommandsSerializeCmds+0x22>
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d126      	bne.n	80154c0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015472:	2301      	movs	r3, #1
 8015474:	e039      	b.n	80154ea <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015476:	7efb      	ldrb	r3, [r7, #27]
 8015478:	68fa      	ldr	r2, [r7, #12]
 801547a:	1ad2      	subs	r2, r2, r3
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	689b      	ldr	r3, [r3, #8]
 8015480:	3301      	adds	r3, #1
 8015482:	429a      	cmp	r2, r3
 8015484:	d320      	bcc.n	80154c8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015486:	7efb      	ldrb	r3, [r7, #27]
 8015488:	1c5a      	adds	r2, r3, #1
 801548a:	76fa      	strb	r2, [r7, #27]
 801548c:	461a      	mov	r2, r3
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	4413      	add	r3, r2
 8015492:	69fa      	ldr	r2, [r7, #28]
 8015494:	7912      	ldrb	r2, [r2, #4]
 8015496:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015498:	7efb      	ldrb	r3, [r7, #27]
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	18d0      	adds	r0, r2, r3
 801549e:	69fb      	ldr	r3, [r7, #28]
 80154a0:	1d59      	adds	r1, r3, #5
 80154a2:	69fb      	ldr	r3, [r7, #28]
 80154a4:	689b      	ldr	r3, [r3, #8]
 80154a6:	b29b      	uxth	r3, r3
 80154a8:	461a      	mov	r2, r3
 80154aa:	f003 fe98 	bl	80191de <memcpy1>
            itr += curElement->PayloadSize;
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	689b      	ldr	r3, [r3, #8]
 80154b2:	b2da      	uxtb	r2, r3
 80154b4:	7efb      	ldrb	r3, [r7, #27]
 80154b6:	4413      	add	r3, r2
 80154b8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80154c0:	69fb      	ldr	r3, [r7, #28]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d1d7      	bne.n	8015476 <LoRaMacCommandsSerializeCmds+0x26>
 80154c6:	e009      	b.n	80154dc <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80154c8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80154ca:	e007      	b.n	80154dc <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80154cc:	69fb      	ldr	r3, [r7, #28]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80154d2:	69f8      	ldr	r0, [r7, #28]
 80154d4:	f7ff fefe 	bl	80152d4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80154d8:	697b      	ldr	r3, [r7, #20]
 80154da:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80154dc:	69fb      	ldr	r3, [r7, #28]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d1f4      	bne.n	80154cc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80154e2:	68b8      	ldr	r0, [r7, #8]
 80154e4:	f7ff ff9e 	bl	8015424 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3720      	adds	r7, #32
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	200018bc 	.word	0x200018bc

080154f8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80154f8:	b480      	push	{r7}
 80154fa:	b085      	sub	sp, #20
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	4603      	mov	r3, r0
 8015500:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015502:	2300      	movs	r3, #0
 8015504:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015506:	79fb      	ldrb	r3, [r7, #7]
 8015508:	3b02      	subs	r3, #2
 801550a:	2b11      	cmp	r3, #17
 801550c:	d850      	bhi.n	80155b0 <LoRaMacCommandsGetCmdSize+0xb8>
 801550e:	a201      	add	r2, pc, #4	@ (adr r2, 8015514 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015514:	0801555d 	.word	0x0801555d
 8015518:	08015563 	.word	0x08015563
 801551c:	08015569 	.word	0x08015569
 8015520:	0801556f 	.word	0x0801556f
 8015524:	08015575 	.word	0x08015575
 8015528:	0801557b 	.word	0x0801557b
 801552c:	08015581 	.word	0x08015581
 8015530:	08015587 	.word	0x08015587
 8015534:	0801558d 	.word	0x0801558d
 8015538:	080155b1 	.word	0x080155b1
 801553c:	080155b1 	.word	0x080155b1
 8015540:	08015593 	.word	0x08015593
 8015544:	080155b1 	.word	0x080155b1
 8015548:	080155b1 	.word	0x080155b1
 801554c:	08015599 	.word	0x08015599
 8015550:	0801559f 	.word	0x0801559f
 8015554:	080155a5 	.word	0x080155a5
 8015558:	080155ab 	.word	0x080155ab
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801555c:	2303      	movs	r3, #3
 801555e:	73fb      	strb	r3, [r7, #15]
            break;
 8015560:	e027      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015562:	2305      	movs	r3, #5
 8015564:	73fb      	strb	r3, [r7, #15]
            break;
 8015566:	e024      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015568:	2302      	movs	r3, #2
 801556a:	73fb      	strb	r3, [r7, #15]
            break;
 801556c:	e021      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801556e:	2305      	movs	r3, #5
 8015570:	73fb      	strb	r3, [r7, #15]
            break;
 8015572:	e01e      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015574:	2301      	movs	r3, #1
 8015576:	73fb      	strb	r3, [r7, #15]
            break;
 8015578:	e01b      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801557a:	2306      	movs	r3, #6
 801557c:	73fb      	strb	r3, [r7, #15]
            break;
 801557e:	e018      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015580:	2302      	movs	r3, #2
 8015582:	73fb      	strb	r3, [r7, #15]
            break;
 8015584:	e015      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015586:	2302      	movs	r3, #2
 8015588:	73fb      	strb	r3, [r7, #15]
            break;
 801558a:	e012      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801558c:	2305      	movs	r3, #5
 801558e:	73fb      	strb	r3, [r7, #15]
            break;
 8015590:	e00f      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015592:	2306      	movs	r3, #6
 8015594:	73fb      	strb	r3, [r7, #15]
            break;
 8015596:	e00c      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015598:	2301      	movs	r3, #1
 801559a:	73fb      	strb	r3, [r7, #15]
            break;
 801559c:	e009      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801559e:	2305      	movs	r3, #5
 80155a0:	73fb      	strb	r3, [r7, #15]
            break;
 80155a2:	e006      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80155a4:	2304      	movs	r3, #4
 80155a6:	73fb      	strb	r3, [r7, #15]
            break;
 80155a8:	e003      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80155aa:	2304      	movs	r3, #4
 80155ac:	73fb      	strb	r3, [r7, #15]
            break;
 80155ae:	e000      	b.n	80155b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80155b0:	bf00      	nop
        }
    }
    return cidSize;
 80155b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3714      	adds	r7, #20
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bc80      	pop	{r7}
 80155bc:	4770      	bx	lr
 80155be:	bf00      	nop

080155c0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80155c0:	b480      	push	{r7}
 80155c2:	b083      	sub	sp, #12
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	4a07      	ldr	r2, [pc, #28]	@ (80155e8 <IncreaseBufferPointer+0x28>)
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d102      	bne.n	80155d6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80155d0:	4b06      	ldr	r3, [pc, #24]	@ (80155ec <IncreaseBufferPointer+0x2c>)
 80155d2:	607b      	str	r3, [r7, #4]
 80155d4:	e002      	b.n	80155dc <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	3304      	adds	r3, #4
 80155da:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80155dc:	687b      	ldr	r3, [r7, #4]
}
 80155de:	4618      	mov	r0, r3
 80155e0:	370c      	adds	r7, #12
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bc80      	pop	{r7}
 80155e6:	4770      	bx	lr
 80155e8:	20001ae4 	.word	0x20001ae4
 80155ec:	20001ad4 	.word	0x20001ad4

080155f0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80155f0:	b480      	push	{r7}
 80155f2:	b083      	sub	sp, #12
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	4603      	mov	r3, r0
 80155f8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80155fa:	79fb      	ldrb	r3, [r7, #7]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d101      	bne.n	8015604 <IsListEmpty+0x14>
    {
        return true;
 8015600:	2301      	movs	r3, #1
 8015602:	e000      	b.n	8015606 <IsListEmpty+0x16>
    }
    return false;
 8015604:	2300      	movs	r3, #0
}
 8015606:	4618      	mov	r0, r3
 8015608:	370c      	adds	r7, #12
 801560a:	46bd      	mov	sp, r7
 801560c:	bc80      	pop	{r7}
 801560e:	4770      	bx	lr

08015610 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015610:	b480      	push	{r7}
 8015612:	b083      	sub	sp, #12
 8015614:	af00      	add	r7, sp, #0
 8015616:	4603      	mov	r3, r0
 8015618:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801561a:	79fb      	ldrb	r3, [r7, #7]
 801561c:	2b04      	cmp	r3, #4
 801561e:	d901      	bls.n	8015624 <IsListFull+0x14>
    {
        return true;
 8015620:	2301      	movs	r3, #1
 8015622:	e000      	b.n	8015626 <IsListFull+0x16>
    }
    return false;
 8015624:	2300      	movs	r3, #0
}
 8015626:	4618      	mov	r0, r3
 8015628:	370c      	adds	r7, #12
 801562a:	46bd      	mov	sp, r7
 801562c:	bc80      	pop	{r7}
 801562e:	4770      	bx	lr

08015630 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b086      	sub	sp, #24
 8015634:	af00      	add	r7, sp, #0
 8015636:	4603      	mov	r3, r0
 8015638:	60b9      	str	r1, [r7, #8]
 801563a:	607a      	str	r2, [r7, #4]
 801563c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015642:	4b13      	ldr	r3, [pc, #76]	@ (8015690 <GetElement+0x60>)
 8015644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015648:	4618      	mov	r0, r3
 801564a:	f7ff ffd1 	bl	80155f0 <IsListEmpty>
 801564e:	4603      	mov	r3, r0
 8015650:	2b00      	cmp	r3, #0
 8015652:	d001      	beq.n	8015658 <GetElement+0x28>
    {
        return NULL;
 8015654:	2300      	movs	r3, #0
 8015656:	e017      	b.n	8015688 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015658:	2300      	movs	r3, #0
 801565a:	74fb      	strb	r3, [r7, #19]
 801565c:	e00d      	b.n	801567a <GetElement+0x4a>
    {
        if( element->Request == request )
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	7bfa      	ldrb	r2, [r7, #15]
 8015664:	429a      	cmp	r2, r3
 8015666:	d101      	bne.n	801566c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8015668:	697b      	ldr	r3, [r7, #20]
 801566a:	e00d      	b.n	8015688 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801566c:	6978      	ldr	r0, [r7, #20]
 801566e:	f7ff ffa7 	bl	80155c0 <IncreaseBufferPointer>
 8015672:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015674:	7cfb      	ldrb	r3, [r7, #19]
 8015676:	3301      	adds	r3, #1
 8015678:	74fb      	strb	r3, [r7, #19]
 801567a:	4b05      	ldr	r3, [pc, #20]	@ (8015690 <GetElement+0x60>)
 801567c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015680:	7cfa      	ldrb	r2, [r7, #19]
 8015682:	429a      	cmp	r2, r3
 8015684:	d3eb      	bcc.n	801565e <GetElement+0x2e>
    }

    return NULL;
 8015686:	2300      	movs	r3, #0
}
 8015688:	4618      	mov	r0, r3
 801568a:	3718      	adds	r7, #24
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	20001ac8 	.word	0x20001ac8

08015694 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801569c:	4a0c      	ldr	r2, [pc, #48]	@ (80156d0 <LoRaMacConfirmQueueInit+0x3c>)
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80156a2:	4b0b      	ldr	r3, [pc, #44]	@ (80156d0 <LoRaMacConfirmQueueInit+0x3c>)
 80156a4:	2200      	movs	r2, #0
 80156a6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80156aa:	4b09      	ldr	r3, [pc, #36]	@ (80156d0 <LoRaMacConfirmQueueInit+0x3c>)
 80156ac:	4a09      	ldr	r2, [pc, #36]	@ (80156d4 <LoRaMacConfirmQueueInit+0x40>)
 80156ae:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80156b0:	4b07      	ldr	r3, [pc, #28]	@ (80156d0 <LoRaMacConfirmQueueInit+0x3c>)
 80156b2:	4a08      	ldr	r2, [pc, #32]	@ (80156d4 <LoRaMacConfirmQueueInit+0x40>)
 80156b4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80156b6:	2214      	movs	r2, #20
 80156b8:	21ff      	movs	r1, #255	@ 0xff
 80156ba:	4806      	ldr	r0, [pc, #24]	@ (80156d4 <LoRaMacConfirmQueueInit+0x40>)
 80156bc:	f003 fdca 	bl	8019254 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80156c0:	4b03      	ldr	r3, [pc, #12]	@ (80156d0 <LoRaMacConfirmQueueInit+0x3c>)
 80156c2:	2201      	movs	r2, #1
 80156c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80156c8:	bf00      	nop
 80156ca:	3708      	adds	r7, #8
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd80      	pop	{r7, pc}
 80156d0:	20001ac8 	.word	0x20001ac8
 80156d4:	20001ad4 	.word	0x20001ad4

080156d8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80156e0:	4b19      	ldr	r3, [pc, #100]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 80156e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7ff ff92 	bl	8015610 <IsListFull>
 80156ec:	4603      	mov	r3, r0
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d001      	beq.n	80156f6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80156f2:	2300      	movs	r3, #0
 80156f4:	e024      	b.n	8015740 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80156f6:	4b14      	ldr	r3, [pc, #80]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 80156f8:	689b      	ldr	r3, [r3, #8]
 80156fa:	687a      	ldr	r2, [r7, #4]
 80156fc:	7812      	ldrb	r2, [r2, #0]
 80156fe:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015700:	4b11      	ldr	r3, [pc, #68]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 8015702:	689b      	ldr	r3, [r3, #8]
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	7852      	ldrb	r2, [r2, #1]
 8015708:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801570a:	4b0f      	ldr	r3, [pc, #60]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 801570c:	689b      	ldr	r3, [r3, #8]
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	78d2      	ldrb	r2, [r2, #3]
 8015712:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8015714:	4b0c      	ldr	r3, [pc, #48]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 8015716:	689b      	ldr	r3, [r3, #8]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	7892      	ldrb	r2, [r2, #2]
 801571c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801571e:	4b0a      	ldr	r3, [pc, #40]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 8015720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015724:	3301      	adds	r3, #1
 8015726:	b2da      	uxtb	r2, r3
 8015728:	4b07      	ldr	r3, [pc, #28]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 801572a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801572e:	4b06      	ldr	r3, [pc, #24]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 8015730:	689b      	ldr	r3, [r3, #8]
 8015732:	4618      	mov	r0, r3
 8015734:	f7ff ff44 	bl	80155c0 <IncreaseBufferPointer>
 8015738:	4603      	mov	r3, r0
 801573a:	4a03      	ldr	r2, [pc, #12]	@ (8015748 <LoRaMacConfirmQueueAdd+0x70>)
 801573c:	6093      	str	r3, [r2, #8]

    return true;
 801573e:	2301      	movs	r3, #1
}
 8015740:	4618      	mov	r0, r3
 8015742:	3708      	adds	r7, #8
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	20001ac8 	.word	0x20001ac8

0801574c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801574c:	b580      	push	{r7, lr}
 801574e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015750:	4b0e      	ldr	r3, [pc, #56]	@ (801578c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015756:	4618      	mov	r0, r3
 8015758:	f7ff ff4a 	bl	80155f0 <IsListEmpty>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d001      	beq.n	8015766 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8015762:	2300      	movs	r3, #0
 8015764:	e010      	b.n	8015788 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015766:	4b09      	ldr	r3, [pc, #36]	@ (801578c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015768:	f893 3020 	ldrb.w	r3, [r3, #32]
 801576c:	3b01      	subs	r3, #1
 801576e:	b2da      	uxtb	r2, r3
 8015770:	4b06      	ldr	r3, [pc, #24]	@ (801578c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015772:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015776:	4b05      	ldr	r3, [pc, #20]	@ (801578c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	4618      	mov	r0, r3
 801577c:	f7ff ff20 	bl	80155c0 <IncreaseBufferPointer>
 8015780:	4603      	mov	r3, r0
 8015782:	4a02      	ldr	r2, [pc, #8]	@ (801578c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015784:	6053      	str	r3, [r2, #4]

    return true;
 8015786:	2301      	movs	r3, #1
}
 8015788:	4618      	mov	r0, r3
 801578a:	bd80      	pop	{r7, pc}
 801578c:	20001ac8 	.word	0x20001ac8

08015790 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b084      	sub	sp, #16
 8015794:	af00      	add	r7, sp, #0
 8015796:	4603      	mov	r3, r0
 8015798:	460a      	mov	r2, r1
 801579a:	71fb      	strb	r3, [r7, #7]
 801579c:	4613      	mov	r3, r2
 801579e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80157a0:	2300      	movs	r3, #0
 80157a2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80157a4:	4b10      	ldr	r3, [pc, #64]	@ (80157e8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80157a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7ff ff20 	bl	80155f0 <IsListEmpty>
 80157b0:	4603      	mov	r3, r0
 80157b2:	f083 0301 	eor.w	r3, r3, #1
 80157b6:	b2db      	uxtb	r3, r3
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d011      	beq.n	80157e0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80157bc:	4b0a      	ldr	r3, [pc, #40]	@ (80157e8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80157be:	6859      	ldr	r1, [r3, #4]
 80157c0:	4b09      	ldr	r3, [pc, #36]	@ (80157e8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80157c2:	689a      	ldr	r2, [r3, #8]
 80157c4:	79bb      	ldrb	r3, [r7, #6]
 80157c6:	4618      	mov	r0, r3
 80157c8:	f7ff ff32 	bl	8015630 <GetElement>
 80157cc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d005      	beq.n	80157e0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	79fa      	ldrb	r2, [r7, #7]
 80157d8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2201      	movs	r2, #1
 80157de:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80157e0:	bf00      	nop
 80157e2:	3710      	adds	r7, #16
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}
 80157e8:	20001ac8 	.word	0x20001ac8

080157ec <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	4603      	mov	r3, r0
 80157f4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80157f6:	2300      	movs	r3, #0
 80157f8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80157fa:	4b10      	ldr	r3, [pc, #64]	@ (801583c <LoRaMacConfirmQueueGetStatus+0x50>)
 80157fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015800:	4618      	mov	r0, r3
 8015802:	f7ff fef5 	bl	80155f0 <IsListEmpty>
 8015806:	4603      	mov	r3, r0
 8015808:	f083 0301 	eor.w	r3, r3, #1
 801580c:	b2db      	uxtb	r3, r3
 801580e:	2b00      	cmp	r3, #0
 8015810:	d00e      	beq.n	8015830 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015812:	4b0a      	ldr	r3, [pc, #40]	@ (801583c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015814:	6859      	ldr	r1, [r3, #4]
 8015816:	4b09      	ldr	r3, [pc, #36]	@ (801583c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015818:	689a      	ldr	r2, [r3, #8]
 801581a:	79fb      	ldrb	r3, [r7, #7]
 801581c:	4618      	mov	r0, r3
 801581e:	f7ff ff07 	bl	8015630 <GetElement>
 8015822:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d002      	beq.n	8015830 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	785b      	ldrb	r3, [r3, #1]
 801582e:	e000      	b.n	8015832 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015830:	2301      	movs	r3, #1
}
 8015832:	4618      	mov	r0, r3
 8015834:	3710      	adds	r7, #16
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}
 801583a:	bf00      	nop
 801583c:	20001ac8 	.word	0x20001ac8

08015840 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	4603      	mov	r3, r0
 8015848:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801584a:	4b16      	ldr	r3, [pc, #88]	@ (80158a4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801584c:	685b      	ldr	r3, [r3, #4]
 801584e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015850:	4a14      	ldr	r2, [pc, #80]	@ (80158a4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015852:	79fb      	ldrb	r3, [r7, #7]
 8015854:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015858:	4b12      	ldr	r3, [pc, #72]	@ (80158a4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801585a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801585e:	4618      	mov	r0, r3
 8015860:	f7ff fec6 	bl	80155f0 <IsListEmpty>
 8015864:	4603      	mov	r3, r0
 8015866:	f083 0301 	eor.w	r3, r3, #1
 801586a:	b2db      	uxtb	r3, r3
 801586c:	2b00      	cmp	r3, #0
 801586e:	d015      	beq.n	801589c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	79fa      	ldrb	r2, [r7, #7]
 8015874:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	78db      	ldrb	r3, [r3, #3]
 801587a:	f083 0301 	eor.w	r3, r3, #1
 801587e:	b2db      	uxtb	r3, r3
 8015880:	2b00      	cmp	r3, #0
 8015882:	d002      	beq.n	801588a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2201      	movs	r2, #1
 8015888:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801588a:	68f8      	ldr	r0, [r7, #12]
 801588c:	f7ff fe98 	bl	80155c0 <IncreaseBufferPointer>
 8015890:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015892:	4b04      	ldr	r3, [pc, #16]	@ (80158a4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015894:	689b      	ldr	r3, [r3, #8]
 8015896:	68fa      	ldr	r2, [r7, #12]
 8015898:	429a      	cmp	r2, r3
 801589a:	d1e9      	bne.n	8015870 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801589c:	bf00      	nop
 801589e:	3710      	adds	r7, #16
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}
 80158a4:	20001ac8 	.word	0x20001ac8

080158a8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	4603      	mov	r3, r0
 80158b0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80158b2:	4b09      	ldr	r3, [pc, #36]	@ (80158d8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80158b4:	6859      	ldr	r1, [r3, #4]
 80158b6:	4b08      	ldr	r3, [pc, #32]	@ (80158d8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80158b8:	689a      	ldr	r2, [r3, #8]
 80158ba:	79fb      	ldrb	r3, [r7, #7]
 80158bc:	4618      	mov	r0, r3
 80158be:	f7ff feb7 	bl	8015630 <GetElement>
 80158c2:	4603      	mov	r3, r0
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d001      	beq.n	80158cc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80158c8:	2301      	movs	r3, #1
 80158ca:	e000      	b.n	80158ce <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80158cc:	2300      	movs	r3, #0
}
 80158ce:	4618      	mov	r0, r3
 80158d0:	3708      	adds	r7, #8
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	20001ac8 	.word	0x20001ac8

080158dc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80158e4:	4b25      	ldr	r3, [pc, #148]	@ (801597c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80158e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80158ea:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80158ec:	2300      	movs	r3, #0
 80158ee:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80158f0:	f107 0308 	add.w	r3, r7, #8
 80158f4:	2204      	movs	r2, #4
 80158f6:	2100      	movs	r1, #0
 80158f8:	4618      	mov	r0, r3
 80158fa:	f003 fcab 	bl	8019254 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80158fe:	2300      	movs	r3, #0
 8015900:	73fb      	strb	r3, [r7, #15]
 8015902:	e032      	b.n	801596a <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015904:	4b1d      	ldr	r3, [pc, #116]	@ (801597c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015906:	685b      	ldr	r3, [r3, #4]
 8015908:	781a      	ldrb	r2, [r3, #0]
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801590e:	4b1b      	ldr	r3, [pc, #108]	@ (801597c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	785a      	ldrb	r2, [r3, #1]
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015918:	4b18      	ldr	r3, [pc, #96]	@ (801597c <LoRaMacConfirmQueueHandleCb+0xa0>)
 801591a:	685b      	ldr	r3, [r3, #4]
 801591c:	789b      	ldrb	r3, [r3, #2]
 801591e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015920:	7b7b      	ldrb	r3, [r7, #13]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d005      	beq.n	8015932 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015926:	4b15      	ldr	r3, [pc, #84]	@ (801597c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	689b      	ldr	r3, [r3, #8]
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	4798      	blx	r3
 8015930:	e00b      	b.n	801594a <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015932:	4b12      	ldr	r3, [pc, #72]	@ (801597c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801593a:	4b10      	ldr	r3, [pc, #64]	@ (801597c <LoRaMacConfirmQueueHandleCb+0xa0>)
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	785b      	ldrb	r3, [r3, #1]
 8015940:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015942:	4b0e      	ldr	r3, [pc, #56]	@ (801597c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	78db      	ldrb	r3, [r3, #3]
 8015948:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801594a:	f7ff feff 	bl	801574c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801594e:	7b7b      	ldrb	r3, [r7, #13]
 8015950:	f083 0301 	eor.w	r3, r3, #1
 8015954:	b2db      	uxtb	r3, r3
 8015956:	2b00      	cmp	r3, #0
 8015958:	d004      	beq.n	8015964 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801595a:	f107 0308 	add.w	r3, r7, #8
 801595e:	4618      	mov	r0, r3
 8015960:	f7ff feba 	bl	80156d8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015964:	7bfb      	ldrb	r3, [r7, #15]
 8015966:	3301      	adds	r3, #1
 8015968:	73fb      	strb	r3, [r7, #15]
 801596a:	7bfa      	ldrb	r2, [r7, #15]
 801596c:	7bbb      	ldrb	r3, [r7, #14]
 801596e:	429a      	cmp	r2, r3
 8015970:	d3c8      	bcc.n	8015904 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8015972:	bf00      	nop
 8015974:	bf00      	nop
 8015976:	3710      	adds	r7, #16
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}
 801597c:	20001ac8 	.word	0x20001ac8

08015980 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015980:	b480      	push	{r7}
 8015982:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015984:	4b03      	ldr	r3, [pc, #12]	@ (8015994 <LoRaMacConfirmQueueGetCnt+0x14>)
 8015986:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801598a:	4618      	mov	r0, r3
 801598c:	46bd      	mov	sp, r7
 801598e:	bc80      	pop	{r7}
 8015990:	4770      	bx	lr
 8015992:	bf00      	nop
 8015994:	20001ac8 	.word	0x20001ac8

08015998 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015998:	b580      	push	{r7, lr}
 801599a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801599c:	4b06      	ldr	r3, [pc, #24]	@ (80159b8 <LoRaMacConfirmQueueIsFull+0x20>)
 801599e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7ff fe34 	bl	8015610 <IsListFull>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d001      	beq.n	80159b2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80159ae:	2301      	movs	r3, #1
 80159b0:	e000      	b.n	80159b4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80159b2:	2300      	movs	r3, #0
    }
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	bd80      	pop	{r7, pc}
 80159b8:	20001ac8 	.word	0x20001ac8

080159bc <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b08e      	sub	sp, #56	@ 0x38
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	60f8      	str	r0, [r7, #12]
 80159c4:	607b      	str	r3, [r7, #4]
 80159c6:	460b      	mov	r3, r1
 80159c8:	817b      	strh	r3, [r7, #10]
 80159ca:	4613      	mov	r3, r2
 80159cc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d101      	bne.n	80159d8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80159d4:	2309      	movs	r3, #9
 80159d6:	e086      	b.n	8015ae6 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80159d8:	2300      	movs	r3, #0
 80159da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80159de:	2301      	movs	r3, #1
 80159e0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80159e2:	2300      	movs	r3, #0
 80159e4:	623b      	str	r3, [r7, #32]
 80159e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80159ea:	2200      	movs	r2, #0
 80159ec:	601a      	str	r2, [r3, #0]
 80159ee:	605a      	str	r2, [r3, #4]
 80159f0:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80159f2:	2300      	movs	r3, #0
 80159f4:	613b      	str	r3, [r7, #16]
 80159f6:	f107 0314 	add.w	r3, r7, #20
 80159fa:	2200      	movs	r2, #0
 80159fc:	601a      	str	r2, [r3, #0]
 80159fe:	605a      	str	r2, [r3, #4]
 8015a00:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015a02:	2301      	movs	r3, #1
 8015a04:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8015a06:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015a0a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	b2db      	uxtb	r3, r3
 8015a10:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	0a1b      	lsrs	r3, r3, #8
 8015a16:	b2db      	uxtb	r3, r3
 8015a18:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	0c1b      	lsrs	r3, r3, #16
 8015a1e:	b2db      	uxtb	r3, r3
 8015a20:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	0e1b      	lsrs	r3, r3, #24
 8015a26:	b2db      	uxtb	r3, r3
 8015a28:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8015a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a2c:	b2db      	uxtb	r3, r3
 8015a2e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a32:	0a1b      	lsrs	r3, r3, #8
 8015a34:	b2db      	uxtb	r3, r3
 8015a36:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a3a:	0c1b      	lsrs	r3, r3, #16
 8015a3c:	b2db      	uxtb	r3, r3
 8015a3e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a42:	0e1b      	lsrs	r3, r3, #24
 8015a44:	b2db      	uxtb	r3, r3
 8015a46:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015a48:	e048      	b.n	8015adc <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8015a4a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015a4c:	b2db      	uxtb	r3, r3
 8015a4e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015a50:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015a52:	3301      	adds	r3, #1
 8015a54:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015a56:	f107 0320 	add.w	r3, r7, #32
 8015a5a:	7a7a      	ldrb	r2, [r7, #9]
 8015a5c:	f107 0010 	add.w	r0, r7, #16
 8015a60:	2110      	movs	r1, #16
 8015a62:	f7f8 f9db 	bl	800de1c <SecureElementAesEncrypt>
 8015a66:	4603      	mov	r3, r0
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d001      	beq.n	8015a70 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a6c:	230e      	movs	r3, #14
 8015a6e:	e03a      	b.n	8015ae6 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015a70:	2300      	movs	r3, #0
 8015a72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8015a76:	e01e      	b.n	8015ab6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015a78:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8015a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015a80:	4413      	add	r3, r2
 8015a82:	461a      	mov	r2, r3
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	4413      	add	r3, r2
 8015a88:	7819      	ldrb	r1, [r3, #0]
 8015a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015a8e:	3338      	adds	r3, #56	@ 0x38
 8015a90:	443b      	add	r3, r7
 8015a92:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8015a96:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8015a9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015a9e:	4403      	add	r3, r0
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	4403      	add	r3, r0
 8015aa6:	404a      	eors	r2, r1
 8015aa8:	b2d2      	uxtb	r2, r2
 8015aaa:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015aac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015ab0:	3301      	adds	r3, #1
 8015ab2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8015ab6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015aba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015abe:	2a10      	cmp	r2, #16
 8015ac0:	bfa8      	it	ge
 8015ac2:	2210      	movge	r2, #16
 8015ac4:	b212      	sxth	r2, r2
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	dbd6      	blt.n	8015a78 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8015aca:	897b      	ldrh	r3, [r7, #10]
 8015acc:	3b10      	subs	r3, #16
 8015ace:	b29b      	uxth	r3, r3
 8015ad0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8015ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015ad6:	3310      	adds	r3, #16
 8015ad8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8015adc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	dcb2      	bgt.n	8015a4a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015ae4:	2300      	movs	r3, #0
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3738      	adds	r7, #56	@ 0x38
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015aee:	b490      	push	{r4, r7}
 8015af0:	b082      	sub	sp, #8
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	4604      	mov	r4, r0
 8015af6:	4608      	mov	r0, r1
 8015af8:	4611      	mov	r1, r2
 8015afa:	461a      	mov	r2, r3
 8015afc:	4623      	mov	r3, r4
 8015afe:	80fb      	strh	r3, [r7, #6]
 8015b00:	4603      	mov	r3, r0
 8015b02:	717b      	strb	r3, [r7, #5]
 8015b04:	460b      	mov	r3, r1
 8015b06:	713b      	strb	r3, [r7, #4]
 8015b08:	4613      	mov	r3, r2
 8015b0a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015b0c:	69bb      	ldr	r3, [r7, #24]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d101      	bne.n	8015b16 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b12:	2309      	movs	r3, #9
 8015b14:	e04e      	b.n	8015bb4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8015b16:	69bb      	ldr	r3, [r7, #24]
 8015b18:	2249      	movs	r2, #73	@ 0x49
 8015b1a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8015b1c:	69bb      	ldr	r3, [r7, #24]
 8015b1e:	3301      	adds	r3, #1
 8015b20:	2200      	movs	r2, #0
 8015b22:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015b24:	69bb      	ldr	r3, [r7, #24]
 8015b26:	3302      	adds	r3, #2
 8015b28:	2200      	movs	r2, #0
 8015b2a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	3303      	adds	r3, #3
 8015b30:	2200      	movs	r2, #0
 8015b32:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015b34:	69bb      	ldr	r3, [r7, #24]
 8015b36:	3304      	adds	r3, #4
 8015b38:	2200      	movs	r2, #0
 8015b3a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	3305      	adds	r3, #5
 8015b40:	78fa      	ldrb	r2, [r7, #3]
 8015b42:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015b44:	69bb      	ldr	r3, [r7, #24]
 8015b46:	3306      	adds	r3, #6
 8015b48:	693a      	ldr	r2, [r7, #16]
 8015b4a:	b2d2      	uxtb	r2, r2
 8015b4c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	0a1a      	lsrs	r2, r3, #8
 8015b52:	69bb      	ldr	r3, [r7, #24]
 8015b54:	3307      	adds	r3, #7
 8015b56:	b2d2      	uxtb	r2, r2
 8015b58:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	0c1a      	lsrs	r2, r3, #16
 8015b5e:	69bb      	ldr	r3, [r7, #24]
 8015b60:	3308      	adds	r3, #8
 8015b62:	b2d2      	uxtb	r2, r2
 8015b64:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	0e1a      	lsrs	r2, r3, #24
 8015b6a:	69bb      	ldr	r3, [r7, #24]
 8015b6c:	3309      	adds	r3, #9
 8015b6e:	b2d2      	uxtb	r2, r2
 8015b70:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015b72:	69bb      	ldr	r3, [r7, #24]
 8015b74:	330a      	adds	r3, #10
 8015b76:	697a      	ldr	r2, [r7, #20]
 8015b78:	b2d2      	uxtb	r2, r2
 8015b7a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	0a1a      	lsrs	r2, r3, #8
 8015b80:	69bb      	ldr	r3, [r7, #24]
 8015b82:	330b      	adds	r3, #11
 8015b84:	b2d2      	uxtb	r2, r2
 8015b86:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	0c1a      	lsrs	r2, r3, #16
 8015b8c:	69bb      	ldr	r3, [r7, #24]
 8015b8e:	330c      	adds	r3, #12
 8015b90:	b2d2      	uxtb	r2, r2
 8015b92:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	0e1a      	lsrs	r2, r3, #24
 8015b98:	69bb      	ldr	r3, [r7, #24]
 8015b9a:	330d      	adds	r3, #13
 8015b9c:	b2d2      	uxtb	r2, r2
 8015b9e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015ba0:	69bb      	ldr	r3, [r7, #24]
 8015ba2:	330e      	adds	r3, #14
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015ba8:	69bb      	ldr	r3, [r7, #24]
 8015baa:	330f      	adds	r3, #15
 8015bac:	88fa      	ldrh	r2, [r7, #6]
 8015bae:	b2d2      	uxtb	r2, r2
 8015bb0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015bb2:	2300      	movs	r3, #0
}
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	3708      	adds	r7, #8
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bc90      	pop	{r4, r7}
 8015bbc:	4770      	bx	lr

08015bbe <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015bbe:	b590      	push	{r4, r7, lr}
 8015bc0:	b08b      	sub	sp, #44	@ 0x2c
 8015bc2:	af04      	add	r7, sp, #16
 8015bc4:	6078      	str	r0, [r7, #4]
 8015bc6:	4608      	mov	r0, r1
 8015bc8:	4611      	mov	r1, r2
 8015bca:	461a      	mov	r2, r3
 8015bcc:	4603      	mov	r3, r0
 8015bce:	807b      	strh	r3, [r7, #2]
 8015bd0:	460b      	mov	r3, r1
 8015bd2:	707b      	strb	r3, [r7, #1]
 8015bd4:	4613      	mov	r3, r2
 8015bd6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d002      	beq.n	8015be4 <ComputeCmacB0+0x26>
 8015bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d101      	bne.n	8015be8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015be4:	2309      	movs	r3, #9
 8015be6:	e024      	b.n	8015c32 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015be8:	887b      	ldrh	r3, [r7, #2]
 8015bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015bee:	d901      	bls.n	8015bf4 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015bf0:	230d      	movs	r3, #13
 8015bf2:	e01e      	b.n	8015c32 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015bf4:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8015bf8:	783a      	ldrb	r2, [r7, #0]
 8015bfa:	7879      	ldrb	r1, [r7, #1]
 8015bfc:	8878      	ldrh	r0, [r7, #2]
 8015bfe:	f107 0308 	add.w	r3, r7, #8
 8015c02:	9302      	str	r3, [sp, #8]
 8015c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c06:	9301      	str	r3, [sp, #4]
 8015c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	4623      	mov	r3, r4
 8015c0e:	f7ff ff6e 	bl	8015aee <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015c12:	887a      	ldrh	r2, [r7, #2]
 8015c14:	7879      	ldrb	r1, [r7, #1]
 8015c16:	f107 0008 	add.w	r0, r7, #8
 8015c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c1c:	9300      	str	r3, [sp, #0]
 8015c1e:	460b      	mov	r3, r1
 8015c20:	6879      	ldr	r1, [r7, #4]
 8015c22:	f7f8 f8b5 	bl	800dd90 <SecureElementComputeAesCmac>
 8015c26:	4603      	mov	r3, r0
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d001      	beq.n	8015c30 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015c2c:	230e      	movs	r3, #14
 8015c2e:	e000      	b.n	8015c32 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015c30:	2300      	movs	r3, #0
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	371c      	adds	r7, #28
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd90      	pop	{r4, r7, pc}

08015c3a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015c3a:	b590      	push	{r4, r7, lr}
 8015c3c:	b0cd      	sub	sp, #308	@ 0x134
 8015c3e:	af04      	add	r7, sp, #16
 8015c40:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8015c44:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8015c48:	6020      	str	r0, [r4, #0]
 8015c4a:	460c      	mov	r4, r1
 8015c4c:	4610      	mov	r0, r2
 8015c4e:	4619      	mov	r1, r3
 8015c50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c54:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015c58:	4622      	mov	r2, r4
 8015c5a:	801a      	strh	r2, [r3, #0]
 8015c5c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c60:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015c64:	4602      	mov	r2, r0
 8015c66:	701a      	strb	r2, [r3, #0]
 8015c68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c6c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015c70:	460a      	mov	r2, r1
 8015c72:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015c74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c78:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d101      	bne.n	8015c86 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015c82:	2309      	movs	r3, #9
 8015c84:	e063      	b.n	8015d4e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015c86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c8a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015c8e:	881b      	ldrh	r3, [r3, #0]
 8015c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015c94:	d901      	bls.n	8015c9a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015c96:	230d      	movs	r3, #13
 8015c98:	e059      	b.n	8015d4e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015c9a:	f107 030c 	add.w	r3, r7, #12
 8015c9e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8015ca2:	2100      	movs	r1, #0
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f003 fad5 	bl	8019254 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015caa:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8015cae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015cb2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015cb6:	781a      	ldrb	r2, [r3, #0]
 8015cb8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015cbc:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015cc0:	7819      	ldrb	r1, [r3, #0]
 8015cc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015cc6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015cca:	8818      	ldrh	r0, [r3, #0]
 8015ccc:	f107 030c 	add.w	r3, r7, #12
 8015cd0:	9302      	str	r3, [sp, #8]
 8015cd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015cd6:	9301      	str	r3, [sp, #4]
 8015cd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015cdc:	9300      	str	r3, [sp, #0]
 8015cde:	4623      	mov	r3, r4
 8015ce0:	f7ff ff05 	bl	8015aee <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015ce4:	f107 030c 	add.w	r3, r7, #12
 8015ce8:	3310      	adds	r3, #16
 8015cea:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8015cee:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8015cf2:	8812      	ldrh	r2, [r2, #0]
 8015cf4:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8015cf8:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8015cfc:	6809      	ldr	r1, [r1, #0]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f003 fa6d 	bl	80191de <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015d04:	2306      	movs	r3, #6
 8015d06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015d0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d0e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015d12:	881b      	ldrh	r3, [r3, #0]
 8015d14:	3310      	adds	r3, #16
 8015d16:	4619      	mov	r1, r3
 8015d18:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d1c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	f107 000c 	add.w	r0, r7, #12
 8015d26:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8015d2a:	f7f8 f84b 	bl	800ddc4 <SecureElementVerifyAesCmac>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015d34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d101      	bne.n	8015d40 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	e006      	b.n	8015d4e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015d44:	2b01      	cmp	r3, #1
 8015d46:	d101      	bne.n	8015d4c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015d48:	2301      	movs	r3, #1
 8015d4a:	e000      	b.n	8015d4e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015d4c:	230e      	movs	r3, #14
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd90      	pop	{r4, r7, pc}

08015d58 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015d58:	b480      	push	{r7}
 8015d5a:	b085      	sub	sp, #20
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	4603      	mov	r3, r0
 8015d60:	6039      	str	r1, [r7, #0]
 8015d62:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015d64:	2300      	movs	r3, #0
 8015d66:	73fb      	strb	r3, [r7, #15]
 8015d68:	e011      	b.n	8015d8e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015d6a:	7bfb      	ldrb	r3, [r7, #15]
 8015d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8015da0 <GetKeyAddrItem+0x48>)
 8015d6e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015d72:	79fa      	ldrb	r2, [r7, #7]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d107      	bne.n	8015d88 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8015d78:	7bfb      	ldrb	r3, [r7, #15]
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	4a08      	ldr	r2, [pc, #32]	@ (8015da0 <GetKeyAddrItem+0x48>)
 8015d7e:	441a      	add	r2, r3
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015d84:	2300      	movs	r3, #0
 8015d86:	e006      	b.n	8015d96 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015d88:	7bfb      	ldrb	r3, [r7, #15]
 8015d8a:	3301      	adds	r3, #1
 8015d8c:	73fb      	strb	r3, [r7, #15]
 8015d8e:	7bfb      	ldrb	r3, [r7, #15]
 8015d90:	2b01      	cmp	r3, #1
 8015d92:	d9ea      	bls.n	8015d6a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015d94:	230b      	movs	r3, #11
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3714      	adds	r7, #20
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bc80      	pop	{r7}
 8015d9e:	4770      	bx	lr
 8015da0:	20000110 	.word	0x20000110

08015da4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b088      	sub	sp, #32
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	60b9      	str	r1, [r7, #8]
 8015dac:	607a      	str	r2, [r7, #4]
 8015dae:	461a      	mov	r2, r3
 8015db0:	4603      	mov	r3, r0
 8015db2:	73fb      	strb	r3, [r7, #15]
 8015db4:	4613      	mov	r3, r2
 8015db6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8015db8:	2300      	movs	r3, #0
 8015dba:	613b      	str	r3, [r7, #16]
 8015dbc:	f107 0314 	add.w	r3, r7, #20
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	601a      	str	r2, [r3, #0]
 8015dc4:	605a      	str	r2, [r3, #4]
 8015dc6:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8015dc8:	7bfb      	ldrb	r3, [r7, #15]
 8015dca:	2b08      	cmp	r3, #8
 8015dcc:	d002      	beq.n	8015dd4 <DeriveSessionKey10x+0x30>
 8015dce:	2b09      	cmp	r3, #9
 8015dd0:	d003      	beq.n	8015dda <DeriveSessionKey10x+0x36>
 8015dd2:	e005      	b.n	8015de0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	743b      	strb	r3, [r7, #16]
            break;
 8015dd8:	e004      	b.n	8015de4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015dda:	2302      	movs	r3, #2
 8015ddc:	743b      	strb	r3, [r7, #16]
            break;
 8015dde:	e001      	b.n	8015de4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015de0:	230a      	movs	r3, #10
 8015de2:	e02a      	b.n	8015e3a <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	0a1b      	lsrs	r3, r3, #8
 8015dee:	b2db      	uxtb	r3, r3
 8015df0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	0c1b      	lsrs	r3, r3, #16
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	0a1b      	lsrs	r3, r3, #8
 8015e04:	b2db      	uxtb	r3, r3
 8015e06:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	0c1b      	lsrs	r3, r3, #16
 8015e0c:	b2db      	uxtb	r3, r3
 8015e0e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015e10:	89bb      	ldrh	r3, [r7, #12]
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8015e16:	89bb      	ldrh	r3, [r7, #12]
 8015e18:	0a1b      	lsrs	r3, r3, #8
 8015e1a:	b29b      	uxth	r3, r3
 8015e1c:	b2db      	uxtb	r3, r3
 8015e1e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015e20:	7bfa      	ldrb	r2, [r7, #15]
 8015e22:	f107 0310 	add.w	r3, r7, #16
 8015e26:	2101      	movs	r1, #1
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7f8 f877 	bl	800df1c <SecureElementDeriveAndStoreKey>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d001      	beq.n	8015e38 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015e34:	230e      	movs	r3, #14
 8015e36:	e000      	b.n	8015e3a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e38:	2300      	movs	r3, #0
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3720      	adds	r7, #32
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
	...

08015e44 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015e44:	b480      	push	{r7}
 8015e46:	b083      	sub	sp, #12
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	6039      	str	r1, [r7, #0]
 8015e4e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d101      	bne.n	8015e5a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e56:	2309      	movs	r3, #9
 8015e58:	e029      	b.n	8015eae <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8015e5a:	79fb      	ldrb	r3, [r7, #7]
 8015e5c:	3b01      	subs	r3, #1
 8015e5e:	2b03      	cmp	r3, #3
 8015e60:	d822      	bhi.n	8015ea8 <GetLastFcntDown+0x64>
 8015e62:	a201      	add	r2, pc, #4	@ (adr r2, 8015e68 <GetLastFcntDown+0x24>)
 8015e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e68:	08015e79 	.word	0x08015e79
 8015e6c:	08015e85 	.word	0x08015e85
 8015e70:	08015e91 	.word	0x08015e91
 8015e74:	08015e9d 	.word	0x08015e9d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8015e78:	4b0f      	ldr	r3, [pc, #60]	@ (8015eb8 <GetLastFcntDown+0x74>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	691a      	ldr	r2, [r3, #16]
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	601a      	str	r2, [r3, #0]
            break;
 8015e82:	e013      	b.n	8015eac <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8015e84:	4b0c      	ldr	r3, [pc, #48]	@ (8015eb8 <GetLastFcntDown+0x74>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	695a      	ldr	r2, [r3, #20]
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	601a      	str	r2, [r3, #0]
            break;
 8015e8e:	e00d      	b.n	8015eac <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8015e90:	4b09      	ldr	r3, [pc, #36]	@ (8015eb8 <GetLastFcntDown+0x74>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	699a      	ldr	r2, [r3, #24]
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	601a      	str	r2, [r3, #0]
            break;
 8015e9a:	e007      	b.n	8015eac <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8015e9c:	4b06      	ldr	r3, [pc, #24]	@ (8015eb8 <GetLastFcntDown+0x74>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	69da      	ldr	r2, [r3, #28]
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	601a      	str	r2, [r3, #0]
            break;
 8015ea6:	e001      	b.n	8015eac <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015ea8:	2305      	movs	r3, #5
 8015eaa:	e000      	b.n	8015eae <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015eac:	2300      	movs	r3, #0
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	370c      	adds	r7, #12
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bc80      	pop	{r7}
 8015eb6:	4770      	bx	lr
 8015eb8:	20001aec 	.word	0x20001aec

08015ebc <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b084      	sub	sp, #16
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	6039      	str	r1, [r7, #0]
 8015ec6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015ecc:	f107 020c 	add.w	r2, r7, #12
 8015ed0:	79fb      	ldrb	r3, [r7, #7]
 8015ed2:	4611      	mov	r1, r2
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7ff ffb5 	bl	8015e44 <GetLastFcntDown>
 8015eda:	4603      	mov	r3, r0
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d001      	beq.n	8015ee4 <CheckFCntDown+0x28>
    {
        return false;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	e00a      	b.n	8015efa <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	683a      	ldr	r2, [r7, #0]
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d803      	bhi.n	8015ef4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8015eec:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ef2:	d101      	bne.n	8015ef8 <CheckFCntDown+0x3c>
    {
        return true;
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	e000      	b.n	8015efa <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015ef8:	2300      	movs	r3, #0
    }
}
 8015efa:	4618      	mov	r0, r3
 8015efc:	3710      	adds	r7, #16
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
	...

08015f04 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015f04:	b480      	push	{r7}
 8015f06:	b083      	sub	sp, #12
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	6039      	str	r1, [r7, #0]
 8015f0e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015f10:	79fb      	ldrb	r3, [r7, #7]
 8015f12:	3b01      	subs	r3, #1
 8015f14:	2b03      	cmp	r3, #3
 8015f16:	d82b      	bhi.n	8015f70 <UpdateFCntDown+0x6c>
 8015f18:	a201      	add	r2, pc, #4	@ (adr r2, 8015f20 <UpdateFCntDown+0x1c>)
 8015f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f1e:	bf00      	nop
 8015f20:	08015f31 	.word	0x08015f31
 8015f24:	08015f43 	.word	0x08015f43
 8015f28:	08015f55 	.word	0x08015f55
 8015f2c:	08015f67 	.word	0x08015f67
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015f30:	4b12      	ldr	r3, [pc, #72]	@ (8015f7c <UpdateFCntDown+0x78>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	683a      	ldr	r2, [r7, #0]
 8015f36:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8015f38:	4b10      	ldr	r3, [pc, #64]	@ (8015f7c <UpdateFCntDown+0x78>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	683a      	ldr	r2, [r7, #0]
 8015f3e:	621a      	str	r2, [r3, #32]
            break;
 8015f40:	e017      	b.n	8015f72 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015f42:	4b0e      	ldr	r3, [pc, #56]	@ (8015f7c <UpdateFCntDown+0x78>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	683a      	ldr	r2, [r7, #0]
 8015f48:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8015f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8015f7c <UpdateFCntDown+0x78>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	683a      	ldr	r2, [r7, #0]
 8015f50:	621a      	str	r2, [r3, #32]
            break;
 8015f52:	e00e      	b.n	8015f72 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015f54:	4b09      	ldr	r3, [pc, #36]	@ (8015f7c <UpdateFCntDown+0x78>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	683a      	ldr	r2, [r7, #0]
 8015f5a:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8015f5c:	4b07      	ldr	r3, [pc, #28]	@ (8015f7c <UpdateFCntDown+0x78>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	683a      	ldr	r2, [r7, #0]
 8015f62:	621a      	str	r2, [r3, #32]
            break;
 8015f64:	e005      	b.n	8015f72 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8015f66:	4b05      	ldr	r3, [pc, #20]	@ (8015f7c <UpdateFCntDown+0x78>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	683a      	ldr	r2, [r7, #0]
 8015f6c:	61da      	str	r2, [r3, #28]
            break;
 8015f6e:	e000      	b.n	8015f72 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015f70:	bf00      	nop
    }
}
 8015f72:	bf00      	nop
 8015f74:	370c      	adds	r7, #12
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bc80      	pop	{r7}
 8015f7a:	4770      	bx	lr
 8015f7c:	20001aec 	.word	0x20001aec

08015f80 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015f80:	b480      	push	{r7}
 8015f82:	b083      	sub	sp, #12
 8015f84:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8015f86:	4b18      	ldr	r3, [pc, #96]	@ (8015fe8 <ResetFCnts+0x68>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015f8e:	4b16      	ldr	r3, [pc, #88]	@ (8015fe8 <ResetFCnts+0x68>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	f04f 32ff 	mov.w	r2, #4294967295
 8015f96:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015f98:	4b13      	ldr	r3, [pc, #76]	@ (8015fe8 <ResetFCnts+0x68>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8015fa0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015fa2:	4b11      	ldr	r3, [pc, #68]	@ (8015fe8 <ResetFCnts+0x68>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8015faa:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8015fac:	4b0e      	ldr	r3, [pc, #56]	@ (8015fe8 <ResetFCnts+0x68>)
 8015fae:	681a      	ldr	r2, [r3, #0]
 8015fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8015fe8 <ResetFCnts+0x68>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	6992      	ldr	r2, [r2, #24]
 8015fb6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015fb8:	2300      	movs	r3, #0
 8015fba:	607b      	str	r3, [r7, #4]
 8015fbc:	e00b      	b.n	8015fd6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8015fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8015fe8 <ResetFCnts+0x68>)
 8015fc0:	681a      	ldr	r2, [r3, #0]
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	3306      	adds	r3, #6
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	4413      	add	r3, r2
 8015fca:	f04f 32ff 	mov.w	r2, #4294967295
 8015fce:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	607b      	str	r3, [r7, #4]
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	ddf0      	ble.n	8015fbe <ResetFCnts+0x3e>
    }
}
 8015fdc:	bf00      	nop
 8015fde:	bf00      	nop
 8015fe0:	370c      	adds	r7, #12
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bc80      	pop	{r7}
 8015fe6:	4770      	bx	lr
 8015fe8:	20001aec 	.word	0x20001aec

08015fec <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8015fec:	b480      	push	{r7}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8015ff4:	4b06      	ldr	r3, [pc, #24]	@ (8016010 <IsJoinNonce10xOk+0x24>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	689b      	ldr	r3, [r3, #8]
 8015ffa:	687a      	ldr	r2, [r7, #4]
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	bf8c      	ite	hi
 8016000:	2301      	movhi	r3, #1
 8016002:	2300      	movls	r3, #0
 8016004:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016006:	4618      	mov	r0, r3
 8016008:	370c      	adds	r7, #12
 801600a:	46bd      	mov	sp, r7
 801600c:	bc80      	pop	{r7}
 801600e:	4770      	bx	lr
 8016010:	20001aec 	.word	0x20001aec

08016014 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d101      	bne.n	8016026 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016022:	2308      	movs	r3, #8
 8016024:	e01c      	b.n	8016060 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016026:	4a10      	ldr	r2, [pc, #64]	@ (8016068 <LoRaMacCryptoInit+0x54>)
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801602c:	4b0e      	ldr	r3, [pc, #56]	@ (8016068 <LoRaMacCryptoInit+0x54>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	2228      	movs	r2, #40	@ 0x28
 8016032:	2100      	movs	r1, #0
 8016034:	4618      	mov	r0, r3
 8016036:	f003 f90d 	bl	8019254 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801603a:	4b0b      	ldr	r3, [pc, #44]	@ (8016068 <LoRaMacCryptoInit+0x54>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	2201      	movs	r2, #1
 8016040:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016042:	4b09      	ldr	r3, [pc, #36]	@ (8016068 <LoRaMacCryptoInit+0x54>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	2201      	movs	r2, #1
 8016048:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801604a:	4b07      	ldr	r3, [pc, #28]	@ (8016068 <LoRaMacCryptoInit+0x54>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	2201      	movs	r2, #1
 8016050:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016052:	4b05      	ldr	r3, [pc, #20]	@ (8016068 <LoRaMacCryptoInit+0x54>)
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	2200      	movs	r2, #0
 8016058:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801605a:	f7ff ff91 	bl	8015f80 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801605e:	2300      	movs	r3, #0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3708      	adds	r7, #8
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}
 8016068:	20001aec 	.word	0x20001aec

0801606c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801606c:	b480      	push	{r7}
 801606e:	b083      	sub	sp, #12
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016074:	4b04      	ldr	r3, [pc, #16]	@ (8016088 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801607c:	2300      	movs	r3, #0
}
 801607e:	4618      	mov	r0, r3
 8016080:	370c      	adds	r7, #12
 8016082:	46bd      	mov	sp, r7
 8016084:	bc80      	pop	{r7}
 8016086:	4770      	bx	lr
 8016088:	20001aec 	.word	0x20001aec

0801608c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801608c:	b480      	push	{r7}
 801608e:	b083      	sub	sp, #12
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d101      	bne.n	801609e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801609a:	2309      	movs	r3, #9
 801609c:	e006      	b.n	80160ac <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801609e:	4b06      	ldr	r3, [pc, #24]	@ (80160b8 <LoRaMacCryptoGetFCntUp+0x2c>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	1c5a      	adds	r2, r3, #1
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80160aa:	2300      	movs	r3, #0
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bc80      	pop	{r7}
 80160b4:	4770      	bx	lr
 80160b6:	bf00      	nop
 80160b8:	20001aec 	.word	0x20001aec

080160bc <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b088      	sub	sp, #32
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	4603      	mov	r3, r0
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	607a      	str	r2, [r7, #4]
 80160c8:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80160ca:	2300      	movs	r3, #0
 80160cc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80160ce:	2300      	movs	r3, #0
 80160d0:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80160d2:	2312      	movs	r3, #18
 80160d4:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d101      	bne.n	80160e0 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80160dc:	2309      	movs	r3, #9
 80160de:	e035      	b.n	801614c <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80160e0:	f107 0214 	add.w	r2, r7, #20
 80160e4:	7bfb      	ldrb	r3, [r7, #15]
 80160e6:	4611      	mov	r1, r2
 80160e8:	4618      	mov	r0, r3
 80160ea:	f7ff feab 	bl	8015e44 <GetLastFcntDown>
 80160ee:	4603      	mov	r3, r0
 80160f0:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80160f2:	7efb      	ldrb	r3, [r7, #27]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d001      	beq.n	80160fc <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80160f8:	7efb      	ldrb	r3, [r7, #27]
 80160fa:	e027      	b.n	801614c <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016102:	d103      	bne.n	801610c <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	68ba      	ldr	r2, [r7, #8]
 8016108:	601a      	str	r2, [r3, #0]
 801610a:	e01e      	b.n	801614a <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	b29b      	uxth	r3, r3
 8016110:	68ba      	ldr	r2, [r7, #8]
 8016112:	1ad3      	subs	r3, r2, r3
 8016114:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8016116:	69fb      	ldr	r3, [r7, #28]
 8016118:	2b00      	cmp	r3, #0
 801611a:	dd05      	ble.n	8016128 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801611c:	697a      	ldr	r2, [r7, #20]
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	441a      	add	r2, r3
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	601a      	str	r2, [r3, #0]
 8016126:	e010      	b.n	801614a <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8016128:	69fb      	ldr	r3, [r7, #28]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d104      	bne.n	8016138 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801612e:	697a      	ldr	r2, [r7, #20]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016134:	2307      	movs	r3, #7
 8016136:	e009      	b.n	801614c <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016138:	697b      	ldr	r3, [r7, #20]
 801613a:	0c1b      	lsrs	r3, r3, #16
 801613c:	041b      	lsls	r3, r3, #16
 801613e:	68ba      	ldr	r2, [r7, #8]
 8016140:	4413      	add	r3, r2
 8016142:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801614a:	2300      	movs	r3, #0
}
 801614c:	4618      	mov	r0, r3
 801614e:	3720      	adds	r7, #32
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}

08016154 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016154:	b480      	push	{r7}
 8016156:	b085      	sub	sp, #20
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d101      	bne.n	8016166 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016162:	2309      	movs	r3, #9
 8016164:	e019      	b.n	801619a <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016166:	2300      	movs	r3, #0
 8016168:	60fb      	str	r3, [r7, #12]
 801616a:	e012      	b.n	8016192 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801616c:	4b0d      	ldr	r3, [pc, #52]	@ (80161a4 <LoRaMacCryptoSetMulticastReference+0x50>)
 801616e:	6819      	ldr	r1, [r3, #0]
 8016170:	68fa      	ldr	r2, [r7, #12]
 8016172:	4613      	mov	r3, r2
 8016174:	005b      	lsls	r3, r3, #1
 8016176:	4413      	add	r3, r2
 8016178:	011b      	lsls	r3, r3, #4
 801617a:	461a      	mov	r2, r3
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	4413      	add	r3, r2
 8016180:	68fa      	ldr	r2, [r7, #12]
 8016182:	3206      	adds	r2, #6
 8016184:	0092      	lsls	r2, r2, #2
 8016186:	440a      	add	r2, r1
 8016188:	3204      	adds	r2, #4
 801618a:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	3301      	adds	r3, #1
 8016190:	60fb      	str	r3, [r7, #12]
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2b00      	cmp	r3, #0
 8016196:	dde9      	ble.n	801616c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016198:	2300      	movs	r3, #0
}
 801619a:	4618      	mov	r0, r3
 801619c:	3714      	adds	r7, #20
 801619e:	46bd      	mov	sp, r7
 80161a0:	bc80      	pop	{r7}
 80161a2:	4770      	bx	lr
 80161a4:	20001aec 	.word	0x20001aec

080161a8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b082      	sub	sp, #8
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	4603      	mov	r3, r0
 80161b0:	6039      	str	r1, [r7, #0]
 80161b2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80161b4:	79fb      	ldrb	r3, [r7, #7]
 80161b6:	6839      	ldr	r1, [r7, #0]
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7f7 fd8b 	bl	800dcd4 <SecureElementSetKey>
 80161be:	4603      	mov	r3, r0
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d001      	beq.n	80161c8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161c4:	230e      	movs	r3, #14
 80161c6:	e021      	b.n	801620c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80161c8:	79fb      	ldrb	r3, [r7, #7]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d11d      	bne.n	801620a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80161ce:	4b11      	ldr	r3, [pc, #68]	@ (8016214 <LoRaMacCryptoSetKey+0x6c>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	789b      	ldrb	r3, [r3, #2]
 80161d4:	210b      	movs	r1, #11
 80161d6:	4618      	mov	r0, r3
 80161d8:	f000 fa56 	bl	8016688 <LoRaMacCryptoDeriveLifeTimeKey>
 80161dc:	4603      	mov	r3, r0
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d001      	beq.n	80161e6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161e2:	230e      	movs	r3, #14
 80161e4:	e012      	b.n	801620c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80161e6:	210c      	movs	r1, #12
 80161e8:	2000      	movs	r0, #0
 80161ea:	f000 fa4d 	bl	8016688 <LoRaMacCryptoDeriveLifeTimeKey>
 80161ee:	4603      	mov	r3, r0
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d001      	beq.n	80161f8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161f4:	230e      	movs	r3, #14
 80161f6:	e009      	b.n	801620c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80161f8:	210a      	movs	r1, #10
 80161fa:	2000      	movs	r0, #0
 80161fc:	f000 fa44 	bl	8016688 <LoRaMacCryptoDeriveLifeTimeKey>
 8016200:	4603      	mov	r3, r0
 8016202:	2b00      	cmp	r3, #0
 8016204:	d001      	beq.n	801620a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016206:	230e      	movs	r3, #14
 8016208:	e000      	b.n	801620c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801620a:	2300      	movs	r3, #0
}
 801620c:	4618      	mov	r0, r3
 801620e:	3708      	adds	r7, #8
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}
 8016214:	20001aec 	.word	0x20001aec

08016218 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b086      	sub	sp, #24
 801621c:	af02      	add	r7, sp, #8
 801621e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d101      	bne.n	801622a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016226:	2309      	movs	r3, #9
 8016228:	e02d      	b.n	8016286 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801622a:	2301      	movs	r3, #1
 801622c:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801622e:	4b18      	ldr	r3, [pc, #96]	@ (8016290 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	889a      	ldrh	r2, [r3, #4]
 8016234:	3201      	adds	r2, #1
 8016236:	b292      	uxth	r2, r2
 8016238:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801623a:	4b15      	ldr	r3, [pc, #84]	@ (8016290 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	889a      	ldrh	r2, [r3, #4]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f000 fc17 	bl	8016a78 <LoRaMacSerializerJoinRequest>
 801624a:	4603      	mov	r3, r0
 801624c:	2b00      	cmp	r3, #0
 801624e:	d001      	beq.n	8016254 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016250:	2310      	movs	r3, #16
 8016252:	e018      	b.n	8016286 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6819      	ldr	r1, [r3, #0]
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	3318      	adds	r3, #24
 801625c:	7bfa      	ldrb	r2, [r7, #15]
 801625e:	9300      	str	r3, [sp, #0]
 8016260:	4613      	mov	r3, r2
 8016262:	2213      	movs	r2, #19
 8016264:	2000      	movs	r0, #0
 8016266:	f7f7 fd93 	bl	800dd90 <SecureElementComputeAesCmac>
 801626a:	4603      	mov	r3, r0
 801626c:	2b00      	cmp	r3, #0
 801626e:	d001      	beq.n	8016274 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016270:	230e      	movs	r3, #14
 8016272:	e008      	b.n	8016286 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f000 fbff 	bl	8016a78 <LoRaMacSerializerJoinRequest>
 801627a:	4603      	mov	r3, r0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d001      	beq.n	8016284 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016280:	2310      	movs	r3, #16
 8016282:	e000      	b.n	8016286 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016284:	2300      	movs	r3, #0
}
 8016286:	4618      	mov	r0, r3
 8016288:	3710      	adds	r7, #16
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	20001aec 	.word	0x20001aec

08016294 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016294:	b590      	push	{r4, r7, lr}
 8016296:	b097      	sub	sp, #92	@ 0x5c
 8016298:	af04      	add	r7, sp, #16
 801629a:	4603      	mov	r3, r0
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	607a      	str	r2, [r7, #4]
 80162a0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d002      	beq.n	80162ae <LoRaMacCryptoHandleJoinAccept+0x1a>
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d101      	bne.n	80162b2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80162ae:	2309      	movs	r3, #9
 80162b0:	e0d3      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80162b2:	2312      	movs	r3, #18
 80162b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80162b8:	2300      	movs	r3, #0
 80162ba:	617b      	str	r3, [r7, #20]
 80162bc:	f107 0318 	add.w	r3, r7, #24
 80162c0:	221d      	movs	r2, #29
 80162c2:	2100      	movs	r1, #0
 80162c4:	4618      	mov	r0, r3
 80162c6:	f007 fd59 	bl	801dd7c <memset>
    uint8_t versionMinor         = 0;
 80162ca:	2300      	movs	r3, #0
 80162cc:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80162ce:	4b65      	ldr	r3, [pc, #404]	@ (8016464 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	889b      	ldrh	r3, [r3, #4]
 80162d4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681c      	ldr	r4, [r3, #0]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	791b      	ldrb	r3, [r3, #4]
 80162e0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80162e4:	7bf8      	ldrb	r0, [r7, #15]
 80162e6:	f107 0213 	add.w	r2, r7, #19
 80162ea:	9202      	str	r2, [sp, #8]
 80162ec:	f107 0214 	add.w	r2, r7, #20
 80162f0:	9201      	str	r2, [sp, #4]
 80162f2:	9300      	str	r3, [sp, #0]
 80162f4:	4623      	mov	r3, r4
 80162f6:	460a      	mov	r2, r1
 80162f8:	68b9      	ldr	r1, [r7, #8]
 80162fa:	f7f7 fe4f 	bl	800df9c <SecureElementProcessJoinAccept>
 80162fe:	4603      	mov	r3, r0
 8016300:	2b00      	cmp	r3, #0
 8016302:	d001      	beq.n	8016308 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016304:	230e      	movs	r3, #14
 8016306:	e0a8      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6818      	ldr	r0, [r3, #0]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	791b      	ldrb	r3, [r3, #4]
 8016310:	461a      	mov	r2, r3
 8016312:	f107 0314 	add.w	r3, r7, #20
 8016316:	4619      	mov	r1, r3
 8016318:	f002 ff61 	bl	80191de <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 f9ee 	bl	80166fe <LoRaMacParserJoinAccept>
 8016322:	4603      	mov	r3, r0
 8016324:	2b00      	cmp	r3, #0
 8016326:	d001      	beq.n	801632c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016328:	230f      	movs	r3, #15
 801632a:	e096      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 801632c:	2300      	movs	r3, #0
 801632e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	799b      	ldrb	r3, [r3, #6]
 8016336:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	79db      	ldrb	r3, [r3, #7]
 801633c:	021b      	lsls	r3, r3, #8
 801633e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016340:	4313      	orrs	r3, r2
 8016342:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	7a1b      	ldrb	r3, [r3, #8]
 8016348:	041b      	lsls	r3, r3, #16
 801634a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801634c:	4313      	orrs	r3, r2
 801634e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016350:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016352:	f7ff fe4b 	bl	8015fec <IsJoinNonce10xOk>
 8016356:	4603      	mov	r3, r0
 8016358:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 801635c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016360:	2b00      	cmp	r3, #0
 8016362:	d010      	beq.n	8016386 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016364:	4b3f      	ldr	r3, [pc, #252]	@ (8016464 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801636a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 801636c:	7cfb      	ldrb	r3, [r7, #19]
 801636e:	210b      	movs	r1, #11
 8016370:	4618      	mov	r0, r3
 8016372:	f000 f989 	bl	8016688 <LoRaMacCryptoDeriveLifeTimeKey>
 8016376:	4603      	mov	r3, r0
 8016378:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801637c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016380:	2b00      	cmp	r3, #0
 8016382:	d005      	beq.n	8016390 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016384:	e001      	b.n	801638a <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016386:	2303      	movs	r3, #3
 8016388:	e067      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 801638a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801638e:	e064      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016390:	210c      	movs	r1, #12
 8016392:	2000      	movs	r0, #0
 8016394:	f000 f978 	bl	8016688 <LoRaMacCryptoDeriveLifeTimeKey>
 8016398:	4603      	mov	r3, r0
 801639a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801639e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d002      	beq.n	80163ac <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 80163a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163aa:	e056      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80163ac:	210a      	movs	r1, #10
 80163ae:	2000      	movs	r0, #0
 80163b0:	f000 f96a 	bl	8016688 <LoRaMacCryptoDeriveLifeTimeKey>
 80163b4:	4603      	mov	r3, r0
 80163b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80163ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d002      	beq.n	80163c8 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80163c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163c6:	e048      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	7a5b      	ldrb	r3, [r3, #9]
 80163cc:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	7a9b      	ldrb	r3, [r3, #10]
 80163d2:	021b      	lsls	r3, r3, #8
 80163d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80163d6:	4313      	orrs	r3, r2
 80163d8:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	7adb      	ldrb	r3, [r3, #11]
 80163de:	041b      	lsls	r3, r3, #16
 80163e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80163e2:	4313      	orrs	r3, r2
 80163e4:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80163e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80163ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80163ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80163ee:	2009      	movs	r0, #9
 80163f0:	f7ff fcd8 	bl	8015da4 <DeriveSessionKey10x>
 80163f4:	4603      	mov	r3, r0
 80163f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80163fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d002      	beq.n	8016408 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016406:	e028      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016408:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801640c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801640e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016410:	2008      	movs	r0, #8
 8016412:	f7ff fcc7 	bl	8015da4 <DeriveSessionKey10x>
 8016416:	4603      	mov	r3, r0
 8016418:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801641c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016420:	2b00      	cmp	r3, #0
 8016422:	d002      	beq.n	801642a <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016424:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016428:	e017      	b.n	801645a <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801642a:	4b0e      	ldr	r3, [pc, #56]	@ (8016464 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	7cfa      	ldrb	r2, [r7, #19]
 8016430:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016432:	4b0c      	ldr	r3, [pc, #48]	@ (8016464 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	2200      	movs	r2, #0
 8016438:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801643a:	4b0a      	ldr	r3, [pc, #40]	@ (8016464 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	f04f 32ff 	mov.w	r2, #4294967295
 8016442:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016444:	4b07      	ldr	r3, [pc, #28]	@ (8016464 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	f04f 32ff 	mov.w	r2, #4294967295
 801644c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801644e:	4b05      	ldr	r3, [pc, #20]	@ (8016464 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f04f 32ff 	mov.w	r2, #4294967295
 8016456:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016458:	2300      	movs	r3, #0
}
 801645a:	4618      	mov	r0, r3
 801645c:	374c      	adds	r7, #76	@ 0x4c
 801645e:	46bd      	mov	sp, r7
 8016460:	bd90      	pop	{r4, r7, pc}
 8016462:	bf00      	nop
 8016464:	20001aec 	.word	0x20001aec

08016468 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016468:	b590      	push	{r4, r7, lr}
 801646a:	b08b      	sub	sp, #44	@ 0x2c
 801646c:	af04      	add	r7, sp, #16
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	607b      	str	r3, [r7, #4]
 8016472:	460b      	mov	r3, r1
 8016474:	72fb      	strb	r3, [r7, #11]
 8016476:	4613      	mov	r3, r2
 8016478:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801647a:	2312      	movs	r3, #18
 801647c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801647e:	2309      	movs	r3, #9
 8016480:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d101      	bne.n	801648c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016488:	2309      	movs	r3, #9
 801648a:	e05e      	b.n	801654a <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801648c:	4b31      	ldr	r3, [pc, #196]	@ (8016554 <LoRaMacCryptoSecureMessage+0xec>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	68db      	ldr	r3, [r3, #12]
 8016492:	68fa      	ldr	r2, [r7, #12]
 8016494:	429a      	cmp	r2, r3
 8016496:	d201      	bcs.n	801649c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016498:	2306      	movs	r3, #6
 801649a:	e056      	b.n	801654a <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d101      	bne.n	80164aa <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80164a6:	2308      	movs	r3, #8
 80164a8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80164aa:	4b2a      	ldr	r3, [pc, #168]	@ (8016554 <LoRaMacCryptoSecureMessage+0xec>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	68fa      	ldr	r2, [r7, #12]
 80164b2:	429a      	cmp	r2, r3
 80164b4:	d916      	bls.n	80164e4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80164c0:	b219      	sxth	r1, r3
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	689c      	ldr	r4, [r3, #8]
 80164c6:	7dfa      	ldrb	r2, [r7, #23]
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	9301      	str	r3, [sp, #4]
 80164cc:	2300      	movs	r3, #0
 80164ce:	9300      	str	r3, [sp, #0]
 80164d0:	4623      	mov	r3, r4
 80164d2:	f7ff fa73 	bl	80159bc <PayloadEncrypt>
 80164d6:	4603      	mov	r3, r0
 80164d8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80164da:	7dbb      	ldrb	r3, [r7, #22]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d001      	beq.n	80164e4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80164e0:	7dbb      	ldrb	r3, [r7, #22]
 80164e2:	e032      	b.n	801654a <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f000 fb49 	bl	8016b7c <LoRaMacSerializerData>
 80164ea:	4603      	mov	r3, r0
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d001      	beq.n	80164f4 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80164f0:	2310      	movs	r3, #16
 80164f2:	e02a      	b.n	801654a <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80164f4:	2308      	movs	r3, #8
 80164f6:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6818      	ldr	r0, [r3, #0]
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	791b      	ldrb	r3, [r3, #4]
 8016500:	3b04      	subs	r3, #4
 8016502:	b299      	uxth	r1, r3
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	689b      	ldr	r3, [r3, #8]
 8016508:	687a      	ldr	r2, [r7, #4]
 801650a:	322c      	adds	r2, #44	@ 0x2c
 801650c:	7dfc      	ldrb	r4, [r7, #23]
 801650e:	9203      	str	r2, [sp, #12]
 8016510:	68fa      	ldr	r2, [r7, #12]
 8016512:	9202      	str	r2, [sp, #8]
 8016514:	9301      	str	r3, [sp, #4]
 8016516:	2300      	movs	r3, #0
 8016518:	9300      	str	r3, [sp, #0]
 801651a:	2300      	movs	r3, #0
 801651c:	4622      	mov	r2, r4
 801651e:	f7ff fb4e 	bl	8015bbe <ComputeCmacB0>
 8016522:	4603      	mov	r3, r0
 8016524:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016526:	7dbb      	ldrb	r3, [r7, #22]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d001      	beq.n	8016530 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 801652c:	7dbb      	ldrb	r3, [r7, #22]
 801652e:	e00c      	b.n	801654a <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f000 fb23 	bl	8016b7c <LoRaMacSerializerData>
 8016536:	4603      	mov	r3, r0
 8016538:	2b00      	cmp	r3, #0
 801653a:	d001      	beq.n	8016540 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801653c:	2310      	movs	r3, #16
 801653e:	e004      	b.n	801654a <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016540:	4b04      	ldr	r3, [pc, #16]	@ (8016554 <LoRaMacCryptoSecureMessage+0xec>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	68fa      	ldr	r2, [r7, #12]
 8016546:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016548:	2300      	movs	r3, #0
}
 801654a:	4618      	mov	r0, r3
 801654c:	371c      	adds	r7, #28
 801654e:	46bd      	mov	sp, r7
 8016550:	bd90      	pop	{r4, r7, pc}
 8016552:	bf00      	nop
 8016554:	20001aec 	.word	0x20001aec

08016558 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016558:	b590      	push	{r4, r7, lr}
 801655a:	b08b      	sub	sp, #44	@ 0x2c
 801655c:	af04      	add	r7, sp, #16
 801655e:	60b9      	str	r1, [r7, #8]
 8016560:	607b      	str	r3, [r7, #4]
 8016562:	4603      	mov	r3, r0
 8016564:	73fb      	strb	r3, [r7, #15]
 8016566:	4613      	mov	r3, r2
 8016568:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801656c:	2b00      	cmp	r3, #0
 801656e:	d101      	bne.n	8016574 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016570:	2309      	movs	r3, #9
 8016572:	e083      	b.n	801667c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016574:	7bbb      	ldrb	r3, [r7, #14]
 8016576:	6879      	ldr	r1, [r7, #4]
 8016578:	4618      	mov	r0, r3
 801657a:	f7ff fc9f 	bl	8015ebc <CheckFCntDown>
 801657e:	4603      	mov	r3, r0
 8016580:	f083 0301 	eor.w	r3, r3, #1
 8016584:	b2db      	uxtb	r3, r3
 8016586:	2b00      	cmp	r3, #0
 8016588:	d001      	beq.n	801658e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801658a:	2306      	movs	r3, #6
 801658c:	e076      	b.n	801667c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801658e:	2312      	movs	r3, #18
 8016590:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016592:	2309      	movs	r3, #9
 8016594:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016596:	2308      	movs	r3, #8
 8016598:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801659a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801659c:	f000 f97a 	bl	8016894 <LoRaMacParserData>
 80165a0:	4603      	mov	r3, r0
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d001      	beq.n	80165aa <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80165a6:	230f      	movs	r3, #15
 80165a8:	e068      	b.n	801667c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80165aa:	f107 0210 	add.w	r2, r7, #16
 80165ae:	7bfb      	ldrb	r3, [r7, #15]
 80165b0:	4611      	mov	r1, r2
 80165b2:	4618      	mov	r0, r3
 80165b4:	f7ff fbd0 	bl	8015d58 <GetKeyAddrItem>
 80165b8:	4603      	mov	r3, r0
 80165ba:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80165bc:	7d7b      	ldrb	r3, [r7, #21]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d001      	beq.n	80165c6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80165c2:	7d7b      	ldrb	r3, [r7, #21]
 80165c4:	e05a      	b.n	801667c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	785b      	ldrb	r3, [r3, #1]
 80165ca:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80165cc:	693b      	ldr	r3, [r7, #16]
 80165ce:	789b      	ldrb	r3, [r3, #2]
 80165d0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80165d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165d4:	689b      	ldr	r3, [r3, #8]
 80165d6:	68ba      	ldr	r2, [r7, #8]
 80165d8:	429a      	cmp	r2, r3
 80165da:	d001      	beq.n	80165e0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80165dc:	2302      	movs	r3, #2
 80165de:	e04d      	b.n	801667c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80165e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165e2:	7b1b      	ldrb	r3, [r3, #12]
 80165e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	bf14      	ite	ne
 80165ee:	2301      	movne	r3, #1
 80165f0:	2300      	moveq	r3, #0
 80165f2:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80165f4:	4b23      	ldr	r3, [pc, #140]	@ (8016684 <LoRaMacCryptoUnsecureMessage+0x12c>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	789b      	ldrb	r3, [r3, #2]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d101      	bne.n	8016602 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80165fe:	2300      	movs	r3, #0
 8016600:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016604:	6818      	ldr	r0, [r3, #0]
 8016606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016608:	791b      	ldrb	r3, [r3, #4]
 801660a:	3b04      	subs	r3, #4
 801660c:	b299      	uxth	r1, r3
 801660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016612:	7dbc      	ldrb	r4, [r7, #22]
 8016614:	7d3a      	ldrb	r2, [r7, #20]
 8016616:	9303      	str	r3, [sp, #12]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	9302      	str	r3, [sp, #8]
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	9301      	str	r3, [sp, #4]
 8016620:	2301      	movs	r3, #1
 8016622:	9300      	str	r3, [sp, #0]
 8016624:	4623      	mov	r3, r4
 8016626:	f7ff fb08 	bl	8015c3a <VerifyCmacB0>
 801662a:	4603      	mov	r3, r0
 801662c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801662e:	7d7b      	ldrb	r3, [r7, #21]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d001      	beq.n	8016638 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8016634:	7d7b      	ldrb	r3, [r7, #21]
 8016636:	e021      	b.n	801667c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801663a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d101      	bne.n	8016646 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016642:	2308      	movs	r3, #8
 8016644:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016648:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801664c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016650:	b219      	sxth	r1, r3
 8016652:	7dfa      	ldrb	r2, [r7, #23]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	9301      	str	r3, [sp, #4]
 8016658:	2301      	movs	r3, #1
 801665a:	9300      	str	r3, [sp, #0]
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	f7ff f9ad 	bl	80159bc <PayloadEncrypt>
 8016662:	4603      	mov	r3, r0
 8016664:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016666:	7d7b      	ldrb	r3, [r7, #21]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d001      	beq.n	8016670 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 801666c:	7d7b      	ldrb	r3, [r7, #21]
 801666e:	e005      	b.n	801667c <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8016670:	7bbb      	ldrb	r3, [r7, #14]
 8016672:	6879      	ldr	r1, [r7, #4]
 8016674:	4618      	mov	r0, r3
 8016676:	f7ff fc45 	bl	8015f04 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801667a:	2300      	movs	r3, #0
}
 801667c:	4618      	mov	r0, r3
 801667e:	371c      	adds	r7, #28
 8016680:	46bd      	mov	sp, r7
 8016682:	bd90      	pop	{r4, r7, pc}
 8016684:	20001aec 	.word	0x20001aec

08016688 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b088      	sub	sp, #32
 801668c:	af00      	add	r7, sp, #0
 801668e:	4603      	mov	r3, r0
 8016690:	460a      	mov	r2, r1
 8016692:	71fb      	strb	r3, [r7, #7]
 8016694:	4613      	mov	r3, r2
 8016696:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8016698:	2300      	movs	r3, #0
 801669a:	60fb      	str	r3, [r7, #12]
 801669c:	f107 0310 	add.w	r3, r7, #16
 80166a0:	2200      	movs	r2, #0
 80166a2:	601a      	str	r2, [r3, #0]
 80166a4:	605a      	str	r2, [r3, #4]
 80166a6:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80166a8:	2300      	movs	r3, #0
 80166aa:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80166ac:	79bb      	ldrb	r3, [r7, #6]
 80166ae:	2b0c      	cmp	r3, #12
 80166b0:	d00b      	beq.n	80166ca <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 80166b2:	2b0c      	cmp	r3, #12
 80166b4:	dc0f      	bgt.n	80166d6 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 80166b6:	2b0a      	cmp	r3, #10
 80166b8:	d00a      	beq.n	80166d0 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 80166ba:	2b0b      	cmp	r3, #11
 80166bc:	d10b      	bne.n	80166d6 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80166be:	79fb      	ldrb	r3, [r7, #7]
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d10a      	bne.n	80166da <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 80166c4:	2320      	movs	r3, #32
 80166c6:	733b      	strb	r3, [r7, #12]
            }
            break;
 80166c8:	e007      	b.n	80166da <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80166ca:	230b      	movs	r3, #11
 80166cc:	77fb      	strb	r3, [r7, #31]
            break;
 80166ce:	e005      	b.n	80166dc <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80166d0:	2330      	movs	r3, #48	@ 0x30
 80166d2:	733b      	strb	r3, [r7, #12]
            break;
 80166d4:	e002      	b.n	80166dc <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80166d6:	230a      	movs	r3, #10
 80166d8:	e00d      	b.n	80166f6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80166da:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80166dc:	79ba      	ldrb	r2, [r7, #6]
 80166de:	7ff9      	ldrb	r1, [r7, #31]
 80166e0:	f107 030c 	add.w	r3, r7, #12
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7f7 fc19 	bl	800df1c <SecureElementDeriveAndStoreKey>
 80166ea:	4603      	mov	r3, r0
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d001      	beq.n	80166f4 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80166f0:	230e      	movs	r3, #14
 80166f2:	e000      	b.n	80166f6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80166f4:	2300      	movs	r3, #0
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3720      	adds	r7, #32
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}

080166fe <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80166fe:	b580      	push	{r7, lr}
 8016700:	b084      	sub	sp, #16
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d003      	beq.n	8016714 <LoRaMacParserJoinAccept+0x16>
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d101      	bne.n	8016718 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016714:	2302      	movs	r3, #2
 8016716:	e0b9      	b.n	801688c <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8016718:	2300      	movs	r3, #0
 801671a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	89fb      	ldrh	r3, [r7, #14]
 8016722:	1c59      	adds	r1, r3, #1
 8016724:	81f9      	strh	r1, [r7, #14]
 8016726:	4413      	add	r3, r2
 8016728:	781a      	ldrb	r2, [r3, #0]
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	1d98      	adds	r0, r3, #6
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	89fb      	ldrh	r3, [r7, #14]
 8016738:	4413      	add	r3, r2
 801673a:	2203      	movs	r2, #3
 801673c:	4619      	mov	r1, r3
 801673e:	f002 fd4e 	bl	80191de <memcpy1>
    bufItr = bufItr + 3;
 8016742:	89fb      	ldrh	r3, [r7, #14]
 8016744:	3303      	adds	r3, #3
 8016746:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	f103 0009 	add.w	r0, r3, #9
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	681a      	ldr	r2, [r3, #0]
 8016752:	89fb      	ldrh	r3, [r7, #14]
 8016754:	4413      	add	r3, r2
 8016756:	2203      	movs	r2, #3
 8016758:	4619      	mov	r1, r3
 801675a:	f002 fd40 	bl	80191de <memcpy1>
    bufItr = bufItr + 3;
 801675e:	89fb      	ldrh	r3, [r7, #14]
 8016760:	3303      	adds	r3, #3
 8016762:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681a      	ldr	r2, [r3, #0]
 8016768:	89fb      	ldrh	r3, [r7, #14]
 801676a:	1c59      	adds	r1, r3, #1
 801676c:	81f9      	strh	r1, [r7, #14]
 801676e:	4413      	add	r3, r2
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	461a      	mov	r2, r3
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681a      	ldr	r2, [r3, #0]
 801677c:	89fb      	ldrh	r3, [r7, #14]
 801677e:	1c59      	adds	r1, r3, #1
 8016780:	81f9      	strh	r1, [r7, #14]
 8016782:	4413      	add	r3, r2
 8016784:	781b      	ldrb	r3, [r3, #0]
 8016786:	021a      	lsls	r2, r3, #8
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	431a      	orrs	r2, r3
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681a      	ldr	r2, [r3, #0]
 8016796:	89fb      	ldrh	r3, [r7, #14]
 8016798:	1c59      	adds	r1, r3, #1
 801679a:	81f9      	strh	r1, [r7, #14]
 801679c:	4413      	add	r3, r2
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	041a      	lsls	r2, r3, #16
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	68db      	ldr	r3, [r3, #12]
 80167a6:	431a      	orrs	r2, r3
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681a      	ldr	r2, [r3, #0]
 80167b0:	89fb      	ldrh	r3, [r7, #14]
 80167b2:	1c59      	adds	r1, r3, #1
 80167b4:	81f9      	strh	r1, [r7, #14]
 80167b6:	4413      	add	r3, r2
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	061a      	lsls	r2, r3, #24
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	431a      	orrs	r2, r3
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	89fb      	ldrh	r3, [r7, #14]
 80167cc:	1c59      	adds	r1, r3, #1
 80167ce:	81f9      	strh	r1, [r7, #14]
 80167d0:	4413      	add	r3, r2
 80167d2:	781a      	ldrb	r2, [r3, #0]
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681a      	ldr	r2, [r3, #0]
 80167dc:	89fb      	ldrh	r3, [r7, #14]
 80167de:	1c59      	adds	r1, r3, #1
 80167e0:	81f9      	strh	r1, [r7, #14]
 80167e2:	4413      	add	r3, r2
 80167e4:	781a      	ldrb	r2, [r3, #0]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	791b      	ldrb	r3, [r3, #4]
 80167ee:	1f1a      	subs	r2, r3, #4
 80167f0:	89fb      	ldrh	r3, [r7, #14]
 80167f2:	1ad3      	subs	r3, r2, r3
 80167f4:	2b10      	cmp	r3, #16
 80167f6:	d10e      	bne.n	8016816 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	f103 0012 	add.w	r0, r3, #18
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	681a      	ldr	r2, [r3, #0]
 8016802:	89fb      	ldrh	r3, [r7, #14]
 8016804:	4413      	add	r3, r2
 8016806:	2210      	movs	r2, #16
 8016808:	4619      	mov	r1, r3
 801680a:	f002 fce8 	bl	80191de <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801680e:	89fb      	ldrh	r3, [r7, #14]
 8016810:	3310      	adds	r3, #16
 8016812:	81fb      	strh	r3, [r7, #14]
 8016814:	e008      	b.n	8016828 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	791b      	ldrb	r3, [r3, #4]
 801681a:	1f1a      	subs	r2, r3, #4
 801681c:	89fb      	ldrh	r3, [r7, #14]
 801681e:	1ad3      	subs	r3, r2, r3
 8016820:	2b00      	cmp	r3, #0
 8016822:	dd01      	ble.n	8016828 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016824:	2301      	movs	r3, #1
 8016826:	e031      	b.n	801688c <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	89fb      	ldrh	r3, [r7, #14]
 801682e:	1c59      	adds	r1, r3, #1
 8016830:	81f9      	strh	r1, [r7, #14]
 8016832:	4413      	add	r3, r2
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	461a      	mov	r2, r3
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681a      	ldr	r2, [r3, #0]
 8016840:	89fb      	ldrh	r3, [r7, #14]
 8016842:	1c59      	adds	r1, r3, #1
 8016844:	81f9      	strh	r1, [r7, #14]
 8016846:	4413      	add	r3, r2
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	021a      	lsls	r2, r3, #8
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016850:	431a      	orrs	r2, r3
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	89fb      	ldrh	r3, [r7, #14]
 801685c:	1c59      	adds	r1, r3, #1
 801685e:	81f9      	strh	r1, [r7, #14]
 8016860:	4413      	add	r3, r2
 8016862:	781b      	ldrb	r3, [r3, #0]
 8016864:	041a      	lsls	r2, r3, #16
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801686a:	431a      	orrs	r2, r3
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	89fb      	ldrh	r3, [r7, #14]
 8016876:	1c59      	adds	r1, r3, #1
 8016878:	81f9      	strh	r1, [r7, #14]
 801687a:	4413      	add	r3, r2
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	061a      	lsls	r2, r3, #24
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016884:	431a      	orrs	r2, r3
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 801688a:	2300      	movs	r3, #0
}
 801688c:	4618      	mov	r0, r3
 801688e:	3710      	adds	r7, #16
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d003      	beq.n	80168aa <LoRaMacParserData+0x16>
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d101      	bne.n	80168ae <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80168aa:	2302      	movs	r3, #2
 80168ac:	e0e0      	b.n	8016a70 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 80168ae:	2300      	movs	r3, #0
 80168b0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681a      	ldr	r2, [r3, #0]
 80168b6:	89fb      	ldrh	r3, [r7, #14]
 80168b8:	1c59      	adds	r1, r3, #1
 80168ba:	81f9      	strh	r1, [r7, #14]
 80168bc:	4413      	add	r3, r2
 80168be:	781a      	ldrb	r2, [r3, #0]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681a      	ldr	r2, [r3, #0]
 80168c8:	89fb      	ldrh	r3, [r7, #14]
 80168ca:	1c59      	adds	r1, r3, #1
 80168cc:	81f9      	strh	r1, [r7, #14]
 80168ce:	4413      	add	r3, r2
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	461a      	mov	r2, r3
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681a      	ldr	r2, [r3, #0]
 80168dc:	89fb      	ldrh	r3, [r7, #14]
 80168de:	1c59      	adds	r1, r3, #1
 80168e0:	81f9      	strh	r1, [r7, #14]
 80168e2:	4413      	add	r3, r2
 80168e4:	781b      	ldrb	r3, [r3, #0]
 80168e6:	021a      	lsls	r2, r3, #8
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	689b      	ldr	r3, [r3, #8]
 80168ec:	431a      	orrs	r2, r3
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	89fb      	ldrh	r3, [r7, #14]
 80168f8:	1c59      	adds	r1, r3, #1
 80168fa:	81f9      	strh	r1, [r7, #14]
 80168fc:	4413      	add	r3, r2
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	041a      	lsls	r2, r3, #16
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	689b      	ldr	r3, [r3, #8]
 8016906:	431a      	orrs	r2, r3
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681a      	ldr	r2, [r3, #0]
 8016910:	89fb      	ldrh	r3, [r7, #14]
 8016912:	1c59      	adds	r1, r3, #1
 8016914:	81f9      	strh	r1, [r7, #14]
 8016916:	4413      	add	r3, r2
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	061a      	lsls	r2, r3, #24
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	689b      	ldr	r3, [r3, #8]
 8016920:	431a      	orrs	r2, r3
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681a      	ldr	r2, [r3, #0]
 801692a:	89fb      	ldrh	r3, [r7, #14]
 801692c:	1c59      	adds	r1, r3, #1
 801692e:	81f9      	strh	r1, [r7, #14]
 8016930:	4413      	add	r3, r2
 8016932:	781a      	ldrb	r2, [r3, #0]
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	89fb      	ldrh	r3, [r7, #14]
 801693e:	1c59      	adds	r1, r3, #1
 8016940:	81f9      	strh	r1, [r7, #14]
 8016942:	4413      	add	r3, r2
 8016944:	781b      	ldrb	r3, [r3, #0]
 8016946:	461a      	mov	r2, r3
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	681a      	ldr	r2, [r3, #0]
 8016950:	89fb      	ldrh	r3, [r7, #14]
 8016952:	1c59      	adds	r1, r3, #1
 8016954:	81f9      	strh	r1, [r7, #14]
 8016956:	4413      	add	r3, r2
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	0219      	lsls	r1, r3, #8
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	89db      	ldrh	r3, [r3, #14]
 8016960:	b21a      	sxth	r2, r3
 8016962:	b20b      	sxth	r3, r1
 8016964:	4313      	orrs	r3, r2
 8016966:	b21b      	sxth	r3, r3
 8016968:	b29a      	uxth	r2, r3
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	f103 0010 	add.w	r0, r3, #16
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	89fb      	ldrh	r3, [r7, #14]
 801697a:	18d1      	adds	r1, r2, r3
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	7b1b      	ldrb	r3, [r3, #12]
 8016980:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016984:	b2db      	uxtb	r3, r3
 8016986:	461a      	mov	r2, r3
 8016988:	f002 fc29 	bl	80191de <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	7b1b      	ldrb	r3, [r3, #12]
 8016990:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016994:	b2db      	uxtb	r3, r3
 8016996:	461a      	mov	r2, r3
 8016998:	89fb      	ldrh	r3, [r7, #14]
 801699a:	4413      	add	r3, r2
 801699c:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2200      	movs	r2, #0
 80169a2:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2200      	movs	r2, #0
 80169aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	791b      	ldrb	r3, [r3, #4]
 80169b2:	461a      	mov	r2, r3
 80169b4:	89fb      	ldrh	r3, [r7, #14]
 80169b6:	1ad3      	subs	r3, r2, r3
 80169b8:	2b04      	cmp	r3, #4
 80169ba:	dd27      	ble.n	8016a0c <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681a      	ldr	r2, [r3, #0]
 80169c0:	89fb      	ldrh	r3, [r7, #14]
 80169c2:	1c59      	adds	r1, r3, #1
 80169c4:	81f9      	strh	r1, [r7, #14]
 80169c6:	4413      	add	r3, r2
 80169c8:	781a      	ldrb	r2, [r3, #0]
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	791a      	ldrb	r2, [r3, #4]
 80169d4:	89fb      	ldrh	r3, [r7, #14]
 80169d6:	b2db      	uxtb	r3, r3
 80169d8:	1ad3      	subs	r3, r2, r3
 80169da:	b2db      	uxtb	r3, r3
 80169dc:	3b04      	subs	r3, #4
 80169de:	b2da      	uxtb	r2, r3
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681a      	ldr	r2, [r3, #0]
 80169ee:	89fb      	ldrh	r3, [r7, #14]
 80169f0:	18d1      	adds	r1, r2, r3
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80169f8:	461a      	mov	r2, r3
 80169fa:	f002 fbf0 	bl	80191de <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a04:	461a      	mov	r2, r3
 8016a06:	89fb      	ldrh	r3, [r7, #14]
 8016a08:	4413      	add	r3, r2
 8016a0a:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681a      	ldr	r2, [r3, #0]
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	791b      	ldrb	r3, [r3, #4]
 8016a14:	3b04      	subs	r3, #4
 8016a16:	4413      	add	r3, r2
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6819      	ldr	r1, [r3, #0]
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	791b      	ldrb	r3, [r3, #4]
 8016a2c:	3b03      	subs	r3, #3
 8016a2e:	440b      	add	r3, r1
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	021b      	lsls	r3, r3, #8
 8016a34:	431a      	orrs	r2, r3
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	6819      	ldr	r1, [r3, #0]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	791b      	ldrb	r3, [r3, #4]
 8016a46:	3b02      	subs	r3, #2
 8016a48:	440b      	add	r3, r1
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	041b      	lsls	r3, r3, #16
 8016a4e:	431a      	orrs	r2, r3
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6819      	ldr	r1, [r3, #0]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	791b      	ldrb	r3, [r3, #4]
 8016a60:	3b01      	subs	r3, #1
 8016a62:	440b      	add	r3, r1
 8016a64:	781b      	ldrb	r3, [r3, #0]
 8016a66:	061b      	lsls	r3, r3, #24
 8016a68:	431a      	orrs	r2, r3
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016a6e:	2300      	movs	r3, #0
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	3710      	adds	r7, #16
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}

08016a78 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b084      	sub	sp, #16
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d003      	beq.n	8016a8e <LoRaMacSerializerJoinRequest+0x16>
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d101      	bne.n	8016a92 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016a8e:	2301      	movs	r3, #1
 8016a90:	e070      	b.n	8016b74 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8016a92:	2300      	movs	r3, #0
 8016a94:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	791b      	ldrb	r3, [r3, #4]
 8016a9a:	2b16      	cmp	r3, #22
 8016a9c:	d801      	bhi.n	8016aa2 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016a9e:	2302      	movs	r3, #2
 8016aa0:	e068      	b.n	8016b74 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681a      	ldr	r2, [r3, #0]
 8016aa6:	89fb      	ldrh	r3, [r7, #14]
 8016aa8:	1c59      	adds	r1, r3, #1
 8016aaa:	81f9      	strh	r1, [r7, #14]
 8016aac:	4413      	add	r3, r2
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	7952      	ldrb	r2, [r2, #5]
 8016ab2:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	681a      	ldr	r2, [r3, #0]
 8016ab8:	89fb      	ldrh	r3, [r7, #14]
 8016aba:	18d0      	adds	r0, r2, r3
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	3306      	adds	r3, #6
 8016ac0:	2208      	movs	r2, #8
 8016ac2:	4619      	mov	r1, r3
 8016ac4:	f002 fba6 	bl	8019214 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016ac8:	89fb      	ldrh	r3, [r7, #14]
 8016aca:	3308      	adds	r3, #8
 8016acc:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681a      	ldr	r2, [r3, #0]
 8016ad2:	89fb      	ldrh	r3, [r7, #14]
 8016ad4:	18d0      	adds	r0, r2, r3
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	330e      	adds	r3, #14
 8016ada:	2208      	movs	r2, #8
 8016adc:	4619      	mov	r1, r3
 8016ade:	f002 fb99 	bl	8019214 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016ae2:	89fb      	ldrh	r3, [r7, #14]
 8016ae4:	3308      	adds	r3, #8
 8016ae6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	8ad9      	ldrh	r1, [r3, #22]
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681a      	ldr	r2, [r3, #0]
 8016af0:	89fb      	ldrh	r3, [r7, #14]
 8016af2:	1c58      	adds	r0, r3, #1
 8016af4:	81f8      	strh	r0, [r7, #14]
 8016af6:	4413      	add	r3, r2
 8016af8:	b2ca      	uxtb	r2, r1
 8016afa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	8adb      	ldrh	r3, [r3, #22]
 8016b00:	0a1b      	lsrs	r3, r3, #8
 8016b02:	b299      	uxth	r1, r3
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681a      	ldr	r2, [r3, #0]
 8016b08:	89fb      	ldrh	r3, [r7, #14]
 8016b0a:	1c58      	adds	r0, r3, #1
 8016b0c:	81f8      	strh	r0, [r7, #14]
 8016b0e:	4413      	add	r3, r2
 8016b10:	b2ca      	uxtb	r2, r1
 8016b12:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6999      	ldr	r1, [r3, #24]
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681a      	ldr	r2, [r3, #0]
 8016b1c:	89fb      	ldrh	r3, [r7, #14]
 8016b1e:	1c58      	adds	r0, r3, #1
 8016b20:	81f8      	strh	r0, [r7, #14]
 8016b22:	4413      	add	r3, r2
 8016b24:	b2ca      	uxtb	r2, r1
 8016b26:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	699b      	ldr	r3, [r3, #24]
 8016b2c:	0a19      	lsrs	r1, r3, #8
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681a      	ldr	r2, [r3, #0]
 8016b32:	89fb      	ldrh	r3, [r7, #14]
 8016b34:	1c58      	adds	r0, r3, #1
 8016b36:	81f8      	strh	r0, [r7, #14]
 8016b38:	4413      	add	r3, r2
 8016b3a:	b2ca      	uxtb	r2, r1
 8016b3c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	699b      	ldr	r3, [r3, #24]
 8016b42:	0c19      	lsrs	r1, r3, #16
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	681a      	ldr	r2, [r3, #0]
 8016b48:	89fb      	ldrh	r3, [r7, #14]
 8016b4a:	1c58      	adds	r0, r3, #1
 8016b4c:	81f8      	strh	r0, [r7, #14]
 8016b4e:	4413      	add	r3, r2
 8016b50:	b2ca      	uxtb	r2, r1
 8016b52:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	699b      	ldr	r3, [r3, #24]
 8016b58:	0e19      	lsrs	r1, r3, #24
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	681a      	ldr	r2, [r3, #0]
 8016b5e:	89fb      	ldrh	r3, [r7, #14]
 8016b60:	1c58      	adds	r0, r3, #1
 8016b62:	81f8      	strh	r0, [r7, #14]
 8016b64:	4413      	add	r3, r2
 8016b66:	b2ca      	uxtb	r2, r1
 8016b68:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016b6a:	89fb      	ldrh	r3, [r7, #14]
 8016b6c:	b2da      	uxtb	r2, r3
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016b72:	2300      	movs	r3, #0
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	3710      	adds	r7, #16
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d003      	beq.n	8016b92 <LoRaMacSerializerData+0x16>
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d101      	bne.n	8016b96 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016b92:	2301      	movs	r3, #1
 8016b94:	e0e3      	b.n	8016d5e <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8016b96:	2300      	movs	r3, #0
 8016b98:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8016b9a:	2308      	movs	r3, #8
 8016b9c:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	7b1b      	ldrb	r3, [r3, #12]
 8016ba2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	461a      	mov	r2, r3
 8016baa:	89bb      	ldrh	r3, [r7, #12]
 8016bac:	4413      	add	r3, r2
 8016bae:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d002      	beq.n	8016bc0 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016bba:	89bb      	ldrh	r3, [r7, #12]
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	89bb      	ldrh	r3, [r7, #12]
 8016bca:	4413      	add	r3, r2
 8016bcc:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8016bce:	89bb      	ldrh	r3, [r7, #12]
 8016bd0:	3304      	adds	r3, #4
 8016bd2:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	791b      	ldrb	r3, [r3, #4]
 8016bd8:	461a      	mov	r2, r3
 8016bda:	89bb      	ldrh	r3, [r7, #12]
 8016bdc:	4293      	cmp	r3, r2
 8016bde:	d901      	bls.n	8016be4 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016be0:	2302      	movs	r3, #2
 8016be2:	e0bc      	b.n	8016d5e <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681a      	ldr	r2, [r3, #0]
 8016be8:	89fb      	ldrh	r3, [r7, #14]
 8016bea:	1c59      	adds	r1, r3, #1
 8016bec:	81f9      	strh	r1, [r7, #14]
 8016bee:	4413      	add	r3, r2
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	7952      	ldrb	r2, [r2, #5]
 8016bf4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	6899      	ldr	r1, [r3, #8]
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681a      	ldr	r2, [r3, #0]
 8016bfe:	89fb      	ldrh	r3, [r7, #14]
 8016c00:	1c58      	adds	r0, r3, #1
 8016c02:	81f8      	strh	r0, [r7, #14]
 8016c04:	4413      	add	r3, r2
 8016c06:	b2ca      	uxtb	r2, r1
 8016c08:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	689b      	ldr	r3, [r3, #8]
 8016c0e:	0a19      	lsrs	r1, r3, #8
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	89fb      	ldrh	r3, [r7, #14]
 8016c16:	1c58      	adds	r0, r3, #1
 8016c18:	81f8      	strh	r0, [r7, #14]
 8016c1a:	4413      	add	r3, r2
 8016c1c:	b2ca      	uxtb	r2, r1
 8016c1e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	689b      	ldr	r3, [r3, #8]
 8016c24:	0c19      	lsrs	r1, r3, #16
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681a      	ldr	r2, [r3, #0]
 8016c2a:	89fb      	ldrh	r3, [r7, #14]
 8016c2c:	1c58      	adds	r0, r3, #1
 8016c2e:	81f8      	strh	r0, [r7, #14]
 8016c30:	4413      	add	r3, r2
 8016c32:	b2ca      	uxtb	r2, r1
 8016c34:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	689b      	ldr	r3, [r3, #8]
 8016c3a:	0e19      	lsrs	r1, r3, #24
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	89fb      	ldrh	r3, [r7, #14]
 8016c42:	1c58      	adds	r0, r3, #1
 8016c44:	81f8      	strh	r0, [r7, #14]
 8016c46:	4413      	add	r3, r2
 8016c48:	b2ca      	uxtb	r2, r1
 8016c4a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	89fb      	ldrh	r3, [r7, #14]
 8016c52:	1c59      	adds	r1, r3, #1
 8016c54:	81f9      	strh	r1, [r7, #14]
 8016c56:	4413      	add	r3, r2
 8016c58:	687a      	ldr	r2, [r7, #4]
 8016c5a:	7b12      	ldrb	r2, [r2, #12]
 8016c5c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	89d9      	ldrh	r1, [r3, #14]
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	89fb      	ldrh	r3, [r7, #14]
 8016c68:	1c58      	adds	r0, r3, #1
 8016c6a:	81f8      	strh	r0, [r7, #14]
 8016c6c:	4413      	add	r3, r2
 8016c6e:	b2ca      	uxtb	r2, r1
 8016c70:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	89db      	ldrh	r3, [r3, #14]
 8016c76:	0a1b      	lsrs	r3, r3, #8
 8016c78:	b299      	uxth	r1, r3
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681a      	ldr	r2, [r3, #0]
 8016c7e:	89fb      	ldrh	r3, [r7, #14]
 8016c80:	1c58      	adds	r0, r3, #1
 8016c82:	81f8      	strh	r0, [r7, #14]
 8016c84:	4413      	add	r3, r2
 8016c86:	b2ca      	uxtb	r2, r1
 8016c88:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	681a      	ldr	r2, [r3, #0]
 8016c8e:	89fb      	ldrh	r3, [r7, #14]
 8016c90:	18d0      	adds	r0, r2, r3
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f103 0110 	add.w	r1, r3, #16
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	7b1b      	ldrb	r3, [r3, #12]
 8016c9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016ca0:	b2db      	uxtb	r3, r3
 8016ca2:	461a      	mov	r2, r3
 8016ca4:	f002 fa9b 	bl	80191de <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	7b1b      	ldrb	r3, [r3, #12]
 8016cac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	89fb      	ldrh	r3, [r7, #14]
 8016cb6:	4413      	add	r3, r2
 8016cb8:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d009      	beq.n	8016cd8 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	89fb      	ldrh	r3, [r7, #14]
 8016cca:	1c59      	adds	r1, r3, #1
 8016ccc:	81f9      	strh	r1, [r7, #14]
 8016cce:	4413      	add	r3, r2
 8016cd0:	687a      	ldr	r2, [r7, #4]
 8016cd2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016cd6:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681a      	ldr	r2, [r3, #0]
 8016cdc:	89fb      	ldrh	r3, [r7, #14]
 8016cde:	18d0      	adds	r0, r2, r3
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016cea:	461a      	mov	r2, r3
 8016cec:	f002 fa77 	bl	80191de <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	89fb      	ldrh	r3, [r7, #14]
 8016cfa:	4413      	add	r3, r2
 8016cfc:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681a      	ldr	r2, [r3, #0]
 8016d06:	89fb      	ldrh	r3, [r7, #14]
 8016d08:	1c58      	adds	r0, r3, #1
 8016d0a:	81f8      	strh	r0, [r7, #14]
 8016d0c:	4413      	add	r3, r2
 8016d0e:	b2ca      	uxtb	r2, r1
 8016d10:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d16:	0a19      	lsrs	r1, r3, #8
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	89fb      	ldrh	r3, [r7, #14]
 8016d1e:	1c58      	adds	r0, r3, #1
 8016d20:	81f8      	strh	r0, [r7, #14]
 8016d22:	4413      	add	r3, r2
 8016d24:	b2ca      	uxtb	r2, r1
 8016d26:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d2c:	0c19      	lsrs	r1, r3, #16
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681a      	ldr	r2, [r3, #0]
 8016d32:	89fb      	ldrh	r3, [r7, #14]
 8016d34:	1c58      	adds	r0, r3, #1
 8016d36:	81f8      	strh	r0, [r7, #14]
 8016d38:	4413      	add	r3, r2
 8016d3a:	b2ca      	uxtb	r2, r1
 8016d3c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d42:	0e19      	lsrs	r1, r3, #24
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	89fb      	ldrh	r3, [r7, #14]
 8016d4a:	1c58      	adds	r0, r3, #1
 8016d4c:	81f8      	strh	r0, [r7, #14]
 8016d4e:	4413      	add	r3, r2
 8016d50:	b2ca      	uxtb	r2, r1
 8016d52:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016d54:	89fb      	ldrh	r3, [r7, #14]
 8016d56:	b2da      	uxtb	r2, r3
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016d5c:	2300      	movs	r3, #0
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3710      	adds	r7, #16
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}

08016d66 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016d66:	b480      	push	{r7}
 8016d68:	b083      	sub	sp, #12
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016d70:	79fb      	ldrb	r3, [r7, #7]
 8016d72:	2b05      	cmp	r3, #5
 8016d74:	d101      	bne.n	8016d7a <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016d76:	2301      	movs	r3, #1
 8016d78:	e000      	b.n	8016d7c <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016d7a:	2300      	movs	r3, #0
        }
    }
}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	370c      	adds	r7, #12
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bc80      	pop	{r7}
 8016d84:	4770      	bx	lr

08016d86 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016d86:	b580      	push	{r7, lr}
 8016d88:	b084      	sub	sp, #16
 8016d8a:	af00      	add	r7, sp, #0
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	6039      	str	r1, [r7, #0]
 8016d90:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8016d92:	2300      	movs	r3, #0
 8016d94:	60bb      	str	r3, [r7, #8]
    switch( region )
 8016d96:	79fb      	ldrb	r3, [r7, #7]
 8016d98:	2b05      	cmp	r3, #5
 8016d9a:	d105      	bne.n	8016da8 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016d9c:	6838      	ldr	r0, [r7, #0]
 8016d9e:	f001 f8fb 	bl	8017f98 <RegionEU868GetPhyParam>
 8016da2:	4603      	mov	r3, r0
 8016da4:	60fb      	str	r3, [r7, #12]
 8016da6:	e001      	b.n	8016dac <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	4618      	mov	r0, r3
 8016db0:	3710      	adds	r7, #16
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}

08016db6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b082      	sub	sp, #8
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	6039      	str	r1, [r7, #0]
 8016dc0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016dc2:	79fb      	ldrb	r3, [r7, #7]
 8016dc4:	2b05      	cmp	r3, #5
 8016dc6:	d103      	bne.n	8016dd0 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016dc8:	6838      	ldr	r0, [r7, #0]
 8016dca:	f001 fa2b 	bl	8018224 <RegionEU868SetBandTxDone>
 8016dce:	e000      	b.n	8016dd2 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016dd0:	bf00      	nop
        }
    }
}
 8016dd2:	3708      	adds	r7, #8
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bd80      	pop	{r7, pc}

08016dd8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b082      	sub	sp, #8
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	4603      	mov	r3, r0
 8016de0:	6039      	str	r1, [r7, #0]
 8016de2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016de4:	79fb      	ldrb	r3, [r7, #7]
 8016de6:	2b05      	cmp	r3, #5
 8016de8:	d103      	bne.n	8016df2 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016dea:	6838      	ldr	r0, [r7, #0]
 8016dec:	f001 fa46 	bl	801827c <RegionEU868InitDefaults>
 8016df0:	e000      	b.n	8016df4 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016df2:	bf00      	nop
        }
    }
}
 8016df4:	bf00      	nop
 8016df6:	3708      	adds	r7, #8
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b082      	sub	sp, #8
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	4603      	mov	r3, r0
 8016e04:	6039      	str	r1, [r7, #0]
 8016e06:	71fb      	strb	r3, [r7, #7]
 8016e08:	4613      	mov	r3, r2
 8016e0a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8016e0c:	79fb      	ldrb	r3, [r7, #7]
 8016e0e:	2b05      	cmp	r3, #5
 8016e10:	d106      	bne.n	8016e20 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016e12:	79bb      	ldrb	r3, [r7, #6]
 8016e14:	4619      	mov	r1, r3
 8016e16:	6838      	ldr	r0, [r7, #0]
 8016e18:	f001 face 	bl	80183b8 <RegionEU868Verify>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	e000      	b.n	8016e22 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016e20:	2300      	movs	r3, #0
        }
    }
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3708      	adds	r7, #8
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}

08016e2a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016e2a:	b580      	push	{r7, lr}
 8016e2c:	b082      	sub	sp, #8
 8016e2e:	af00      	add	r7, sp, #0
 8016e30:	4603      	mov	r3, r0
 8016e32:	6039      	str	r1, [r7, #0]
 8016e34:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016e36:	79fb      	ldrb	r3, [r7, #7]
 8016e38:	2b05      	cmp	r3, #5
 8016e3a:	d103      	bne.n	8016e44 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016e3c:	6838      	ldr	r0, [r7, #0]
 8016e3e:	f001 fb37 	bl	80184b0 <RegionEU868ApplyCFList>
 8016e42:	e000      	b.n	8016e46 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016e44:	bf00      	nop
        }
    }
}
 8016e46:	bf00      	nop
 8016e48:	3708      	adds	r7, #8
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}

08016e4e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016e4e:	b580      	push	{r7, lr}
 8016e50:	b082      	sub	sp, #8
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	4603      	mov	r3, r0
 8016e56:	6039      	str	r1, [r7, #0]
 8016e58:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016e5a:	79fb      	ldrb	r3, [r7, #7]
 8016e5c:	2b05      	cmp	r3, #5
 8016e5e:	d104      	bne.n	8016e6a <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016e60:	6838      	ldr	r0, [r7, #0]
 8016e62:	f001 fb99 	bl	8018598 <RegionEU868ChanMaskSet>
 8016e66:	4603      	mov	r3, r0
 8016e68:	e000      	b.n	8016e6c <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016e6a:	2300      	movs	r3, #0
        }
    }
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	3708      	adds	r7, #8
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	603b      	str	r3, [r7, #0]
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	71fb      	strb	r3, [r7, #7]
 8016e80:	460b      	mov	r3, r1
 8016e82:	71bb      	strb	r3, [r7, #6]
 8016e84:	4613      	mov	r3, r2
 8016e86:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016e88:	79fb      	ldrb	r3, [r7, #7]
 8016e8a:	2b05      	cmp	r3, #5
 8016e8c:	d107      	bne.n	8016e9e <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016e8e:	7979      	ldrb	r1, [r7, #5]
 8016e90:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	683a      	ldr	r2, [r7, #0]
 8016e98:	f001 fba8 	bl	80185ec <RegionEU868ComputeRxWindowParameters>
 8016e9c:	e000      	b.n	8016ea0 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016e9e:	bf00      	nop
        }
    }
}
 8016ea0:	bf00      	nop
 8016ea2:	3708      	adds	r7, #8
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}

08016ea8 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b084      	sub	sp, #16
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	4603      	mov	r3, r0
 8016eb0:	60b9      	str	r1, [r7, #8]
 8016eb2:	607a      	str	r2, [r7, #4]
 8016eb4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016eb6:	7bfb      	ldrb	r3, [r7, #15]
 8016eb8:	2b05      	cmp	r3, #5
 8016eba:	d105      	bne.n	8016ec8 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016ebc:	6879      	ldr	r1, [r7, #4]
 8016ebe:	68b8      	ldr	r0, [r7, #8]
 8016ec0:	f001 fbee 	bl	80186a0 <RegionEU868RxConfig>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	e000      	b.n	8016eca <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016ec8:	2300      	movs	r3, #0
        }
    }
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3710      	adds	r7, #16
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}

08016ed2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016ed2:	b580      	push	{r7, lr}
 8016ed4:	b084      	sub	sp, #16
 8016ed6:	af00      	add	r7, sp, #0
 8016ed8:	60b9      	str	r1, [r7, #8]
 8016eda:	607a      	str	r2, [r7, #4]
 8016edc:	603b      	str	r3, [r7, #0]
 8016ede:	4603      	mov	r3, r0
 8016ee0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016ee2:	7bfb      	ldrb	r3, [r7, #15]
 8016ee4:	2b05      	cmp	r3, #5
 8016ee6:	d106      	bne.n	8016ef6 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016ee8:	683a      	ldr	r2, [r7, #0]
 8016eea:	6879      	ldr	r1, [r7, #4]
 8016eec:	68b8      	ldr	r0, [r7, #8]
 8016eee:	f001 fca7 	bl	8018840 <RegionEU868TxConfig>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	e000      	b.n	8016ef8 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016ef6:	2300      	movs	r3, #0
        }
    }
}
 8016ef8:	4618      	mov	r0, r3
 8016efa:	3710      	adds	r7, #16
 8016efc:	46bd      	mov	sp, r7
 8016efe:	bd80      	pop	{r7, pc}

08016f00 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b086      	sub	sp, #24
 8016f04:	af02      	add	r7, sp, #8
 8016f06:	60b9      	str	r1, [r7, #8]
 8016f08:	607a      	str	r2, [r7, #4]
 8016f0a:	603b      	str	r3, [r7, #0]
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016f10:	7bfb      	ldrb	r3, [r7, #15]
 8016f12:	2b05      	cmp	r3, #5
 8016f14:	d109      	bne.n	8016f2a <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016f16:	69fb      	ldr	r3, [r7, #28]
 8016f18:	9300      	str	r3, [sp, #0]
 8016f1a:	69bb      	ldr	r3, [r7, #24]
 8016f1c:	683a      	ldr	r2, [r7, #0]
 8016f1e:	6879      	ldr	r1, [r7, #4]
 8016f20:	68b8      	ldr	r0, [r7, #8]
 8016f22:	f001 fd5d 	bl	80189e0 <RegionEU868LinkAdrReq>
 8016f26:	4603      	mov	r3, r0
 8016f28:	e000      	b.n	8016f2c <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016f2a:	2300      	movs	r3, #0
        }
    }
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3710      	adds	r7, #16
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	6039      	str	r1, [r7, #0]
 8016f3e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016f40:	79fb      	ldrb	r3, [r7, #7]
 8016f42:	2b05      	cmp	r3, #5
 8016f44:	d104      	bne.n	8016f50 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016f46:	6838      	ldr	r0, [r7, #0]
 8016f48:	f001 fe6c 	bl	8018c24 <RegionEU868RxParamSetupReq>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	e000      	b.n	8016f52 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016f50:	2300      	movs	r3, #0
        }
    }
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3708      	adds	r7, #8
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}

08016f5a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016f5a:	b580      	push	{r7, lr}
 8016f5c:	b082      	sub	sp, #8
 8016f5e:	af00      	add	r7, sp, #0
 8016f60:	4603      	mov	r3, r0
 8016f62:	6039      	str	r1, [r7, #0]
 8016f64:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016f66:	79fb      	ldrb	r3, [r7, #7]
 8016f68:	2b05      	cmp	r3, #5
 8016f6a:	d104      	bne.n	8016f76 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016f6c:	6838      	ldr	r0, [r7, #0]
 8016f6e:	f001 fe97 	bl	8018ca0 <RegionEU868NewChannelReq>
 8016f72:	4603      	mov	r3, r0
 8016f74:	e000      	b.n	8016f78 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016f76:	2300      	movs	r3, #0
        }
    }
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}

08016f80 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	4603      	mov	r3, r0
 8016f88:	6039      	str	r1, [r7, #0]
 8016f8a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016f8c:	79fb      	ldrb	r3, [r7, #7]
 8016f8e:	2b05      	cmp	r3, #5
 8016f90:	d104      	bne.n	8016f9c <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016f92:	6838      	ldr	r0, [r7, #0]
 8016f94:	f001 fee2 	bl	8018d5c <RegionEU868TxParamSetupReq>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	e000      	b.n	8016f9e <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016f9c:	2300      	movs	r3, #0
        }
    }
}
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	3708      	adds	r7, #8
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	bd80      	pop	{r7, pc}

08016fa6 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016fa6:	b580      	push	{r7, lr}
 8016fa8:	b082      	sub	sp, #8
 8016faa:	af00      	add	r7, sp, #0
 8016fac:	4603      	mov	r3, r0
 8016fae:	6039      	str	r1, [r7, #0]
 8016fb0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016fb2:	79fb      	ldrb	r3, [r7, #7]
 8016fb4:	2b05      	cmp	r3, #5
 8016fb6:	d104      	bne.n	8016fc2 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016fb8:	6838      	ldr	r0, [r7, #0]
 8016fba:	f001 fedb 	bl	8018d74 <RegionEU868DlChannelReq>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	e000      	b.n	8016fc4 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016fc2:	2300      	movs	r3, #0
        }
    }
}
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	3708      	adds	r7, #8
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd80      	pop	{r7, pc}

08016fcc <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b082      	sub	sp, #8
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	71fb      	strb	r3, [r7, #7]
 8016fd6:	460b      	mov	r3, r1
 8016fd8:	71bb      	strb	r3, [r7, #6]
 8016fda:	4613      	mov	r3, r2
 8016fdc:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016fde:	79fb      	ldrb	r3, [r7, #7]
 8016fe0:	2b05      	cmp	r3, #5
 8016fe2:	d108      	bne.n	8016ff6 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016fe4:	797a      	ldrb	r2, [r7, #5]
 8016fe6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016fea:	4611      	mov	r1, r2
 8016fec:	4618      	mov	r0, r3
 8016fee:	f001 ff0b 	bl	8018e08 <RegionEU868AlternateDr>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	e000      	b.n	8016ff8 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016ff6:	2300      	movs	r3, #0
        }
    }
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	3708      	adds	r7, #8
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd80      	pop	{r7, pc}

08017000 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b084      	sub	sp, #16
 8017004:	af00      	add	r7, sp, #0
 8017006:	60b9      	str	r1, [r7, #8]
 8017008:	607a      	str	r2, [r7, #4]
 801700a:	603b      	str	r3, [r7, #0]
 801700c:	4603      	mov	r3, r0
 801700e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017010:	7bfb      	ldrb	r3, [r7, #15]
 8017012:	2b05      	cmp	r3, #5
 8017014:	d107      	bne.n	8017026 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017016:	69bb      	ldr	r3, [r7, #24]
 8017018:	683a      	ldr	r2, [r7, #0]
 801701a:	6879      	ldr	r1, [r7, #4]
 801701c:	68b8      	ldr	r0, [r7, #8]
 801701e:	f001 ff03 	bl	8018e28 <RegionEU868NextChannel>
 8017022:	4603      	mov	r3, r0
 8017024:	e000      	b.n	8017028 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017026:	2309      	movs	r3, #9
        }
    }
}
 8017028:	4618      	mov	r0, r3
 801702a:	3710      	adds	r7, #16
 801702c:	46bd      	mov	sp, r7
 801702e:	bd80      	pop	{r7, pc}

08017030 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017030:	b590      	push	{r4, r7, lr}
 8017032:	b083      	sub	sp, #12
 8017034:	af00      	add	r7, sp, #0
 8017036:	4604      	mov	r4, r0
 8017038:	4608      	mov	r0, r1
 801703a:	4611      	mov	r1, r2
 801703c:	461a      	mov	r2, r3
 801703e:	4623      	mov	r3, r4
 8017040:	71fb      	strb	r3, [r7, #7]
 8017042:	4603      	mov	r3, r0
 8017044:	71bb      	strb	r3, [r7, #6]
 8017046:	460b      	mov	r3, r1
 8017048:	717b      	strb	r3, [r7, #5]
 801704a:	4613      	mov	r3, r2
 801704c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801704e:	79fb      	ldrb	r3, [r7, #7]
 8017050:	2b05      	cmp	r3, #5
 8017052:	d109      	bne.n	8017068 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017054:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017058:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801705c:	79bb      	ldrb	r3, [r7, #6]
 801705e:	4618      	mov	r0, r3
 8017060:	f002 f85c 	bl	801911c <RegionEU868ApplyDrOffset>
 8017064:	4603      	mov	r3, r0
 8017066:	e000      	b.n	801706a <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017068:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801706a:	4618      	mov	r0, r3
 801706c:	370c      	adds	r7, #12
 801706e:	46bd      	mov	sp, r7
 8017070:	bd90      	pop	{r4, r7, pc}
	...

08017074 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017074:	b480      	push	{r7}
 8017076:	b083      	sub	sp, #12
 8017078:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801707a:	4b04      	ldr	r3, [pc, #16]	@ (801708c <RegionGetVersion+0x18>)
 801707c:	607b      	str	r3, [r7, #4]

    return version;
 801707e:	687b      	ldr	r3, [r7, #4]
}
 8017080:	4618      	mov	r0, r3
 8017082:	370c      	adds	r7, #12
 8017084:	46bd      	mov	sp, r7
 8017086:	bc80      	pop	{r7}
 8017088:	4770      	bx	lr
 801708a:	bf00      	nop
 801708c:	02010003 	.word	0x02010003

08017090 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017090:	b480      	push	{r7}
 8017092:	b087      	sub	sp, #28
 8017094:	af00      	add	r7, sp, #0
 8017096:	60f8      	str	r0, [r7, #12]
 8017098:	4608      	mov	r0, r1
 801709a:	4639      	mov	r1, r7
 801709c:	e881 000c 	stmia.w	r1, {r2, r3}
 80170a0:	4603      	mov	r3, r0
 80170a2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	881b      	ldrh	r3, [r3, #0]
 80170a8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80170aa:	7afb      	ldrb	r3, [r7, #11]
 80170ac:	f083 0301 	eor.w	r3, r3, #1
 80170b0:	b2db      	uxtb	r3, r3
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d007      	beq.n	80170c6 <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 80170b6:	2364      	movs	r3, #100	@ 0x64
 80170b8:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80170ba:	8aba      	ldrh	r2, [r7, #20]
 80170bc:	8afb      	ldrh	r3, [r7, #22]
 80170be:	4293      	cmp	r3, r2
 80170c0:	bf38      	it	cc
 80170c2:	4613      	movcc	r3, r2
 80170c4:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80170c6:	8afb      	ldrh	r3, [r7, #22]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d101      	bne.n	80170d0 <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 80170cc:	2301      	movs	r3, #1
 80170ce:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80170d0:	8afb      	ldrh	r3, [r7, #22]
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	371c      	adds	r7, #28
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bc80      	pop	{r7}
 80170da:	4770      	bx	lr

080170dc <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b086      	sub	sp, #24
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	4608      	mov	r0, r1
 80170e6:	4639      	mov	r1, r7
 80170e8:	e881 000c 	stmia.w	r1, {r2, r3}
 80170ec:	4603      	mov	r3, r0
 80170ee:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	881b      	ldrh	r3, [r3, #0]
 80170f4:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80170f6:	4b1a      	ldr	r3, [pc, #104]	@ (8017160 <SetMaxTimeCredits+0x84>)
 80170f8:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80170fa:	7af9      	ldrb	r1, [r7, #11]
 80170fc:	463b      	mov	r3, r7
 80170fe:	cb0c      	ldmia	r3, {r2, r3}
 8017100:	68f8      	ldr	r0, [r7, #12]
 8017102:	f7ff ffc5 	bl	8017090 <GetDutyCycle>
 8017106:	4603      	mov	r3, r0
 8017108:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 801710a:	7afb      	ldrb	r3, [r7, #11]
 801710c:	f083 0301 	eor.w	r3, r3, #1
 8017110:	b2db      	uxtb	r3, r3
 8017112:	2b00      	cmp	r3, #0
 8017114:	d011      	beq.n	801713a <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801711c:	d202      	bcs.n	8017124 <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801711e:	4b10      	ldr	r3, [pc, #64]	@ (8017160 <SetMaxTimeCredits+0x84>)
 8017120:	617b      	str	r3, [r7, #20]
 8017122:	e014      	b.n	801714e <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801712a:	4293      	cmp	r3, r2
 801712c:	d802      	bhi.n	8017134 <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801712e:	4b0c      	ldr	r3, [pc, #48]	@ (8017160 <SetMaxTimeCredits+0x84>)
 8017130:	617b      	str	r3, [r7, #20]
 8017132:	e00c      	b.n	801714e <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 8017134:	4b0b      	ldr	r3, [pc, #44]	@ (8017164 <SetMaxTimeCredits+0x88>)
 8017136:	617b      	str	r3, [r7, #20]
 8017138:	e009      	b.n	801714e <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 801713a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801713e:	f083 0301 	eor.w	r3, r3, #1
 8017142:	b2db      	uxtb	r3, r3
 8017144:	2b00      	cmp	r3, #0
 8017146:	d002      	beq.n	801714e <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	697a      	ldr	r2, [r7, #20]
 801714c:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	697a      	ldr	r2, [r7, #20]
 8017152:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017154:	8a7b      	ldrh	r3, [r7, #18]
}
 8017156:	4618      	mov	r0, r3
 8017158:	3718      	adds	r7, #24
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}
 801715e:	bf00      	nop
 8017160:	0036ee80 	.word	0x0036ee80
 8017164:	000d4670 	.word	0x000d4670

08017168 <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b086      	sub	sp, #24
 801716c:	af02      	add	r7, sp, #8
 801716e:	6078      	str	r0, [r7, #4]
 8017170:	4608      	mov	r0, r1
 8017172:	4611      	mov	r1, r2
 8017174:	461a      	mov	r2, r3
 8017176:	4603      	mov	r3, r0
 8017178:	70fb      	strb	r3, [r7, #3]
 801717a:	460b      	mov	r3, r1
 801717c:	70bb      	strb	r3, [r7, #2]
 801717e:	4613      	mov	r3, r2
 8017180:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017182:	78f9      	ldrb	r1, [r7, #3]
 8017184:	787b      	ldrb	r3, [r7, #1]
 8017186:	9301      	str	r3, [sp, #4]
 8017188:	78bb      	ldrb	r3, [r7, #2]
 801718a:	9300      	str	r3, [sp, #0]
 801718c:	f107 0318 	add.w	r3, r7, #24
 8017190:	cb0c      	ldmia	r3, {r2, r3}
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f7ff ffa2 	bl	80170dc <SetMaxTimeCredits>
 8017198:	4603      	mov	r3, r0
 801719a:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 801719c:	4b1a      	ldr	r3, [pc, #104]	@ (8017208 <UpdateTimeCredits+0xa0>)
 801719e:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 80171a0:	78fb      	ldrb	r3, [r7, #3]
 80171a2:	f083 0301 	eor.w	r3, r3, #1
 80171a6:	b2db      	uxtb	r3, r3
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d010      	beq.n	80171ce <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80171ac:	69bb      	ldr	r3, [r7, #24]
 80171ae:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80171b2:	d202      	bcs.n	80171ba <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 80171b4:	4b14      	ldr	r3, [pc, #80]	@ (8017208 <UpdateTimeCredits+0xa0>)
 80171b6:	60fb      	str	r3, [r7, #12]
 80171b8:	e009      	b.n	80171ce <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80171ba:	69bb      	ldr	r3, [r7, #24]
 80171bc:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80171c0:	4293      	cmp	r3, r2
 80171c2:	d802      	bhi.n	80171ca <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 80171c4:	4b11      	ldr	r3, [pc, #68]	@ (801720c <UpdateTimeCredits+0xa4>)
 80171c6:	60fb      	str	r3, [r7, #12]
 80171c8:	e001      	b.n	80171ce <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 80171ca:	4b11      	ldr	r3, [pc, #68]	@ (8017210 <UpdateTimeCredits+0xa8>)
 80171cc:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 80171ce:	68fa      	ldr	r2, [r7, #12]
 80171d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d908      	bls.n	80171e8 <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 80171da:	68fa      	ldr	r2, [r7, #12]
 80171dc:	429a      	cmp	r2, r3
 80171de:	d103      	bne.n	80171e8 <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d109      	bne.n	80171fc <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	691a      	ldr	r2, [r3, #16]
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	6a3a      	ldr	r2, [r7, #32]
 80171f4:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	68fa      	ldr	r2, [r7, #12]
 80171fa:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 80171fc:	897b      	ldrh	r3, [r7, #10]
}
 80171fe:	4618      	mov	r0, r3
 8017200:	3710      	adds	r7, #16
 8017202:	46bd      	mov	sp, r7
 8017204:	bd80      	pop	{r7, pc}
 8017206:	bf00      	nop
 8017208:	0036ee80 	.word	0x0036ee80
 801720c:	025c3f80 	.word	0x025c3f80
 8017210:	07829b80 	.word	0x07829b80

08017214 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017214:	b480      	push	{r7}
 8017216:	b085      	sub	sp, #20
 8017218:	af00      	add	r7, sp, #0
 801721a:	4603      	mov	r3, r0
 801721c:	460a      	mov	r2, r1
 801721e:	80fb      	strh	r3, [r7, #6]
 8017220:	4613      	mov	r3, r2
 8017222:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017224:	2300      	movs	r3, #0
 8017226:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017228:	2300      	movs	r3, #0
 801722a:	73bb      	strb	r3, [r7, #14]
 801722c:	e011      	b.n	8017252 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801722e:	88fa      	ldrh	r2, [r7, #6]
 8017230:	7bbb      	ldrb	r3, [r7, #14]
 8017232:	2101      	movs	r1, #1
 8017234:	fa01 f303 	lsl.w	r3, r1, r3
 8017238:	401a      	ands	r2, r3
 801723a:	7bbb      	ldrb	r3, [r7, #14]
 801723c:	2101      	movs	r1, #1
 801723e:	fa01 f303 	lsl.w	r3, r1, r3
 8017242:	429a      	cmp	r2, r3
 8017244:	d102      	bne.n	801724c <CountChannels+0x38>
        {
            nbActiveBits++;
 8017246:	7bfb      	ldrb	r3, [r7, #15]
 8017248:	3301      	adds	r3, #1
 801724a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801724c:	7bbb      	ldrb	r3, [r7, #14]
 801724e:	3301      	adds	r3, #1
 8017250:	73bb      	strb	r3, [r7, #14]
 8017252:	7bba      	ldrb	r2, [r7, #14]
 8017254:	797b      	ldrb	r3, [r7, #5]
 8017256:	429a      	cmp	r2, r3
 8017258:	d3e9      	bcc.n	801722e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801725a:	7bfb      	ldrb	r3, [r7, #15]
}
 801725c:	4618      	mov	r0, r3
 801725e:	3714      	adds	r7, #20
 8017260:	46bd      	mov	sp, r7
 8017262:	bc80      	pop	{r7}
 8017264:	4770      	bx	lr

08017266 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017266:	b580      	push	{r7, lr}
 8017268:	b084      	sub	sp, #16
 801726a:	af00      	add	r7, sp, #0
 801726c:	6039      	str	r1, [r7, #0]
 801726e:	4611      	mov	r1, r2
 8017270:	461a      	mov	r2, r3
 8017272:	4603      	mov	r3, r0
 8017274:	71fb      	strb	r3, [r7, #7]
 8017276:	460b      	mov	r3, r1
 8017278:	71bb      	strb	r3, [r7, #6]
 801727a:	4613      	mov	r3, r2
 801727c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801727e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017282:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017286:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801728a:	4618      	mov	r0, r3
 801728c:	f000 f85d 	bl	801734a <RegionCommonValueInRange>
 8017290:	4603      	mov	r3, r0
 8017292:	2b00      	cmp	r3, #0
 8017294:	d101      	bne.n	801729a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017296:	2300      	movs	r3, #0
 8017298:	e053      	b.n	8017342 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801729a:	2300      	movs	r3, #0
 801729c:	73fb      	strb	r3, [r7, #15]
 801729e:	2300      	movs	r3, #0
 80172a0:	73bb      	strb	r3, [r7, #14]
 80172a2:	e049      	b.n	8017338 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80172a4:	2300      	movs	r3, #0
 80172a6:	737b      	strb	r3, [r7, #13]
 80172a8:	e03d      	b.n	8017326 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80172aa:	7bbb      	ldrb	r3, [r7, #14]
 80172ac:	005b      	lsls	r3, r3, #1
 80172ae:	683a      	ldr	r2, [r7, #0]
 80172b0:	4413      	add	r3, r2
 80172b2:	881b      	ldrh	r3, [r3, #0]
 80172b4:	461a      	mov	r2, r3
 80172b6:	7b7b      	ldrb	r3, [r7, #13]
 80172b8:	fa42 f303 	asr.w	r3, r2, r3
 80172bc:	f003 0301 	and.w	r3, r3, #1
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d02d      	beq.n	8017320 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80172c4:	7bfa      	ldrb	r2, [r7, #15]
 80172c6:	7b7b      	ldrb	r3, [r7, #13]
 80172c8:	4413      	add	r3, r2
 80172ca:	461a      	mov	r2, r3
 80172cc:	4613      	mov	r3, r2
 80172ce:	005b      	lsls	r3, r3, #1
 80172d0:	4413      	add	r3, r2
 80172d2:	009b      	lsls	r3, r3, #2
 80172d4:	461a      	mov	r2, r3
 80172d6:	69fb      	ldr	r3, [r7, #28]
 80172d8:	4413      	add	r3, r2
 80172da:	7a1b      	ldrb	r3, [r3, #8]
 80172dc:	f343 0303 	sbfx	r3, r3, #0, #4
 80172e0:	b25b      	sxtb	r3, r3
 80172e2:	f003 030f 	and.w	r3, r3, #15
 80172e6:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80172e8:	7bfa      	ldrb	r2, [r7, #15]
 80172ea:	7b7b      	ldrb	r3, [r7, #13]
 80172ec:	4413      	add	r3, r2
 80172ee:	461a      	mov	r2, r3
 80172f0:	4613      	mov	r3, r2
 80172f2:	005b      	lsls	r3, r3, #1
 80172f4:	4413      	add	r3, r2
 80172f6:	009b      	lsls	r3, r3, #2
 80172f8:	461a      	mov	r2, r3
 80172fa:	69fb      	ldr	r3, [r7, #28]
 80172fc:	4413      	add	r3, r2
 80172fe:	7a1b      	ldrb	r3, [r3, #8]
 8017300:	f343 1303 	sbfx	r3, r3, #4, #4
 8017304:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017306:	f003 030f 	and.w	r3, r3, #15
 801730a:	b25a      	sxtb	r2, r3
 801730c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017310:	4618      	mov	r0, r3
 8017312:	f000 f81a 	bl	801734a <RegionCommonValueInRange>
 8017316:	4603      	mov	r3, r0
 8017318:	2b01      	cmp	r3, #1
 801731a:	d101      	bne.n	8017320 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801731c:	2301      	movs	r3, #1
 801731e:	e010      	b.n	8017342 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017320:	7b7b      	ldrb	r3, [r7, #13]
 8017322:	3301      	adds	r3, #1
 8017324:	737b      	strb	r3, [r7, #13]
 8017326:	7b7b      	ldrb	r3, [r7, #13]
 8017328:	2b0f      	cmp	r3, #15
 801732a:	d9be      	bls.n	80172aa <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801732c:	7bfb      	ldrb	r3, [r7, #15]
 801732e:	3310      	adds	r3, #16
 8017330:	73fb      	strb	r3, [r7, #15]
 8017332:	7bbb      	ldrb	r3, [r7, #14]
 8017334:	3301      	adds	r3, #1
 8017336:	73bb      	strb	r3, [r7, #14]
 8017338:	7bfa      	ldrb	r2, [r7, #15]
 801733a:	79fb      	ldrb	r3, [r7, #7]
 801733c:	429a      	cmp	r2, r3
 801733e:	d3b1      	bcc.n	80172a4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017340:	2300      	movs	r3, #0
}
 8017342:	4618      	mov	r0, r3
 8017344:	3710      	adds	r7, #16
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}

0801734a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801734a:	b480      	push	{r7}
 801734c:	b083      	sub	sp, #12
 801734e:	af00      	add	r7, sp, #0
 8017350:	4603      	mov	r3, r0
 8017352:	71fb      	strb	r3, [r7, #7]
 8017354:	460b      	mov	r3, r1
 8017356:	71bb      	strb	r3, [r7, #6]
 8017358:	4613      	mov	r3, r2
 801735a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801735c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017360:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017364:	429a      	cmp	r2, r3
 8017366:	db07      	blt.n	8017378 <RegionCommonValueInRange+0x2e>
 8017368:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801736c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017370:	429a      	cmp	r2, r3
 8017372:	dc01      	bgt.n	8017378 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017374:	2301      	movs	r3, #1
 8017376:	e000      	b.n	801737a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017378:	2300      	movs	r3, #0
}
 801737a:	4618      	mov	r0, r3
 801737c:	370c      	adds	r7, #12
 801737e:	46bd      	mov	sp, r7
 8017380:	bc80      	pop	{r7}
 8017382:	4770      	bx	lr

08017384 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017384:	b480      	push	{r7}
 8017386:	b085      	sub	sp, #20
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	460b      	mov	r3, r1
 801738e:	70fb      	strb	r3, [r7, #3]
 8017390:	4613      	mov	r3, r2
 8017392:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017394:	78fb      	ldrb	r3, [r7, #3]
 8017396:	091b      	lsrs	r3, r3, #4
 8017398:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801739a:	78bb      	ldrb	r3, [r7, #2]
 801739c:	091b      	lsrs	r3, r3, #4
 801739e:	b2db      	uxtb	r3, r3
 80173a0:	7bfa      	ldrb	r2, [r7, #15]
 80173a2:	429a      	cmp	r2, r3
 80173a4:	d803      	bhi.n	80173ae <RegionCommonChanDisable+0x2a>
 80173a6:	78fa      	ldrb	r2, [r7, #3]
 80173a8:	78bb      	ldrb	r3, [r7, #2]
 80173aa:	429a      	cmp	r2, r3
 80173ac:	d301      	bcc.n	80173b2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80173ae:	2300      	movs	r3, #0
 80173b0:	e017      	b.n	80173e2 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80173b2:	7bfb      	ldrb	r3, [r7, #15]
 80173b4:	005b      	lsls	r3, r3, #1
 80173b6:	687a      	ldr	r2, [r7, #4]
 80173b8:	4413      	add	r3, r2
 80173ba:	881b      	ldrh	r3, [r3, #0]
 80173bc:	b21a      	sxth	r2, r3
 80173be:	78fb      	ldrb	r3, [r7, #3]
 80173c0:	f003 030f 	and.w	r3, r3, #15
 80173c4:	2101      	movs	r1, #1
 80173c6:	fa01 f303 	lsl.w	r3, r1, r3
 80173ca:	b21b      	sxth	r3, r3
 80173cc:	43db      	mvns	r3, r3
 80173ce:	b21b      	sxth	r3, r3
 80173d0:	4013      	ands	r3, r2
 80173d2:	b219      	sxth	r1, r3
 80173d4:	7bfb      	ldrb	r3, [r7, #15]
 80173d6:	005b      	lsls	r3, r3, #1
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	4413      	add	r3, r2
 80173dc:	b28a      	uxth	r2, r1
 80173de:	801a      	strh	r2, [r3, #0]

    return true;
 80173e0:	2301      	movs	r3, #1
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	3714      	adds	r7, #20
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bc80      	pop	{r7}
 80173ea:	4770      	bx	lr

080173ec <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b084      	sub	sp, #16
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	460b      	mov	r3, r1
 80173f6:	70fb      	strb	r3, [r7, #3]
 80173f8:	4613      	mov	r3, r2
 80173fa:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80173fc:	2300      	movs	r3, #0
 80173fe:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d101      	bne.n	801740a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017406:	2300      	movs	r3, #0
 8017408:	e018      	b.n	801743c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801740a:	78fb      	ldrb	r3, [r7, #3]
 801740c:	73bb      	strb	r3, [r7, #14]
 801740e:	e010      	b.n	8017432 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017410:	7bbb      	ldrb	r3, [r7, #14]
 8017412:	005b      	lsls	r3, r3, #1
 8017414:	687a      	ldr	r2, [r7, #4]
 8017416:	4413      	add	r3, r2
 8017418:	881b      	ldrh	r3, [r3, #0]
 801741a:	2110      	movs	r1, #16
 801741c:	4618      	mov	r0, r3
 801741e:	f7ff fef9 	bl	8017214 <CountChannels>
 8017422:	4603      	mov	r3, r0
 8017424:	461a      	mov	r2, r3
 8017426:	7bfb      	ldrb	r3, [r7, #15]
 8017428:	4413      	add	r3, r2
 801742a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801742c:	7bbb      	ldrb	r3, [r7, #14]
 801742e:	3301      	adds	r3, #1
 8017430:	73bb      	strb	r3, [r7, #14]
 8017432:	7bba      	ldrb	r2, [r7, #14]
 8017434:	78bb      	ldrb	r3, [r7, #2]
 8017436:	429a      	cmp	r2, r3
 8017438:	d3ea      	bcc.n	8017410 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801743a:	7bfb      	ldrb	r3, [r7, #15]
}
 801743c:	4618      	mov	r0, r3
 801743e:	3710      	adds	r7, #16
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017444:	b480      	push	{r7}
 8017446:	b087      	sub	sp, #28
 8017448:	af00      	add	r7, sp, #0
 801744a:	60f8      	str	r0, [r7, #12]
 801744c:	60b9      	str	r1, [r7, #8]
 801744e:	4613      	mov	r3, r2
 8017450:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d016      	beq.n	8017486 <RegionCommonChanMaskCopy+0x42>
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d013      	beq.n	8017486 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801745e:	2300      	movs	r3, #0
 8017460:	75fb      	strb	r3, [r7, #23]
 8017462:	e00c      	b.n	801747e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017464:	7dfb      	ldrb	r3, [r7, #23]
 8017466:	005b      	lsls	r3, r3, #1
 8017468:	68ba      	ldr	r2, [r7, #8]
 801746a:	441a      	add	r2, r3
 801746c:	7dfb      	ldrb	r3, [r7, #23]
 801746e:	005b      	lsls	r3, r3, #1
 8017470:	68f9      	ldr	r1, [r7, #12]
 8017472:	440b      	add	r3, r1
 8017474:	8812      	ldrh	r2, [r2, #0]
 8017476:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017478:	7dfb      	ldrb	r3, [r7, #23]
 801747a:	3301      	adds	r3, #1
 801747c:	75fb      	strb	r3, [r7, #23]
 801747e:	7dfa      	ldrb	r2, [r7, #23]
 8017480:	79fb      	ldrb	r3, [r7, #7]
 8017482:	429a      	cmp	r2, r3
 8017484:	d3ee      	bcc.n	8017464 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017486:	bf00      	nop
 8017488:	371c      	adds	r7, #28
 801748a:	46bd      	mov	sp, r7
 801748c:	bc80      	pop	{r7}
 801748e:	4770      	bx	lr

08017490 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017490:	b082      	sub	sp, #8
 8017492:	b580      	push	{r7, lr}
 8017494:	b086      	sub	sp, #24
 8017496:	af00      	add	r7, sp, #0
 8017498:	60f8      	str	r0, [r7, #12]
 801749a:	60b9      	str	r1, [r7, #8]
 801749c:	627b      	str	r3, [r7, #36]	@ 0x24
 801749e:	4613      	mov	r3, r2
 80174a0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80174a2:	79f9      	ldrb	r1, [r7, #7]
 80174a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80174a8:	cb0c      	ldmia	r3, {r2, r3}
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f7ff fdf0 	bl	8017090 <GetDutyCycle>
 80174b0:	4603      	mov	r3, r0
 80174b2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	68da      	ldr	r2, [r3, #12]
 80174b8:	8afb      	ldrh	r3, [r7, #22]
 80174ba:	68b9      	ldr	r1, [r7, #8]
 80174bc:	fb01 f303 	mul.w	r3, r1, r3
 80174c0:	429a      	cmp	r2, r3
 80174c2:	d909      	bls.n	80174d8 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	68da      	ldr	r2, [r3, #12]
 80174c8:	8afb      	ldrh	r3, [r7, #22]
 80174ca:	68b9      	ldr	r1, [r7, #8]
 80174cc:	fb01 f303 	mul.w	r3, r1, r3
 80174d0:	1ad2      	subs	r2, r2, r3
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80174d6:	e002      	b.n	80174de <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	2200      	movs	r2, #0
 80174dc:	60da      	str	r2, [r3, #12]
}
 80174de:	bf00      	nop
 80174e0:	3718      	adds	r7, #24
 80174e2:	46bd      	mov	sp, r7
 80174e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80174e8:	b002      	add	sp, #8
 80174ea:	4770      	bx	lr

080174ec <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80174ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174ee:	b08f      	sub	sp, #60	@ 0x3c
 80174f0:	af04      	add	r7, sp, #16
 80174f2:	6039      	str	r1, [r7, #0]
 80174f4:	4611      	mov	r1, r2
 80174f6:	461a      	mov	r2, r3
 80174f8:	4603      	mov	r3, r0
 80174fa:	71fb      	strb	r3, [r7, #7]
 80174fc:	460b      	mov	r3, r1
 80174fe:	71bb      	strb	r3, [r7, #6]
 8017500:	4613      	mov	r3, r2
 8017502:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017504:	f04f 33ff 	mov.w	r3, #4294967295
 8017508:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801750a:	f006 f8cf 	bl	801d6ac <UTIL_TIMER_GetCurrentTime>
 801750e:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 8017510:	2300      	movs	r3, #0
 8017512:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 8017514:	2301      	movs	r3, #1
 8017516:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 8017518:	2300      	movs	r3, #0
 801751a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801751e:	2300      	movs	r3, #0
 8017520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017524:	e09c      	b.n	8017660 <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 8017526:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801752a:	4613      	mov	r3, r2
 801752c:	005b      	lsls	r3, r3, #1
 801752e:	4413      	add	r3, r2
 8017530:	00db      	lsls	r3, r3, #3
 8017532:	461a      	mov	r2, r3
 8017534:	683b      	ldr	r3, [r7, #0]
 8017536:	4413      	add	r3, r2
 8017538:	685b      	ldr	r3, [r3, #4]
 801753a:	4618      	mov	r0, r3
 801753c:	f006 f8c8 	bl	801d6d0 <UTIL_TIMER_GetElapsedTime>
 8017540:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017542:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017546:	4613      	mov	r3, r2
 8017548:	005b      	lsls	r3, r3, #1
 801754a:	4413      	add	r3, r2
 801754c:	00db      	lsls	r3, r3, #3
 801754e:	461a      	mov	r2, r3
 8017550:	683b      	ldr	r3, [r7, #0]
 8017552:	189c      	adds	r4, r3, r2
 8017554:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8017558:	797a      	ldrb	r2, [r7, #5]
 801755a:	79fd      	ldrb	r5, [r7, #7]
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	9303      	str	r3, [sp, #12]
 8017560:	69bb      	ldr	r3, [r7, #24]
 8017562:	9302      	str	r3, [sp, #8]
 8017564:	46ec      	mov	ip, sp
 8017566:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801756a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801756e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017572:	4633      	mov	r3, r6
 8017574:	4629      	mov	r1, r5
 8017576:	4620      	mov	r0, r4
 8017578:	f7ff fdf6 	bl	8017168 <UpdateTimeCredits>
 801757c:	4603      	mov	r3, r0
 801757e:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017580:	8a7a      	ldrh	r2, [r7, #18]
 8017582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017584:	fb02 f303 	mul.w	r3, r2, r3
 8017588:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801758a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801758e:	4613      	mov	r3, r2
 8017590:	005b      	lsls	r3, r3, #1
 8017592:	4413      	add	r3, r2
 8017594:	00db      	lsls	r3, r3, #3
 8017596:	461a      	mov	r2, r3
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	4413      	add	r3, r2
 801759c:	68db      	ldr	r3, [r3, #12]
 801759e:	697a      	ldr	r2, [r7, #20]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d308      	bcc.n	80175b6 <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80175a4:	797b      	ldrb	r3, [r7, #5]
 80175a6:	f083 0301 	eor.w	r3, r3, #1
 80175aa:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d013      	beq.n	80175d8 <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80175b0:	79fb      	ldrb	r3, [r7, #7]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d010      	beq.n	80175d8 <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 80175b6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80175ba:	4613      	mov	r3, r2
 80175bc:	005b      	lsls	r3, r3, #1
 80175be:	4413      	add	r3, r2
 80175c0:	00db      	lsls	r3, r3, #3
 80175c2:	461a      	mov	r2, r3
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	4413      	add	r3, r2
 80175c8:	2201      	movs	r2, #1
 80175ca:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80175cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80175d0:	3301      	adds	r3, #1
 80175d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80175d6:	e03e      	b.n	8017656 <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80175d8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80175dc:	4613      	mov	r3, r2
 80175de:	005b      	lsls	r3, r3, #1
 80175e0:	4413      	add	r3, r2
 80175e2:	00db      	lsls	r3, r3, #3
 80175e4:	461a      	mov	r2, r3
 80175e6:	683b      	ldr	r3, [r7, #0]
 80175e8:	4413      	add	r3, r2
 80175ea:	2200      	movs	r2, #0
 80175ec:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80175ee:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80175f2:	4613      	mov	r3, r2
 80175f4:	005b      	lsls	r3, r3, #1
 80175f6:	4413      	add	r3, r2
 80175f8:	00db      	lsls	r3, r3, #3
 80175fa:	461a      	mov	r2, r3
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	4413      	add	r3, r2
 8017600:	691b      	ldr	r3, [r3, #16]
 8017602:	697a      	ldr	r2, [r7, #20]
 8017604:	429a      	cmp	r2, r3
 8017606:	d226      	bcs.n	8017656 <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 8017608:	2300      	movs	r3, #0
 801760a:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 801760c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017610:	4613      	mov	r3, r2
 8017612:	005b      	lsls	r3, r3, #1
 8017614:	4413      	add	r3, r2
 8017616:	00db      	lsls	r3, r3, #3
 8017618:	461a      	mov	r2, r3
 801761a:	683b      	ldr	r3, [r7, #0]
 801761c:	4413      	add	r3, r2
 801761e:	689b      	ldr	r3, [r3, #8]
 8017620:	68fa      	ldr	r2, [r7, #12]
 8017622:	429a      	cmp	r2, r3
 8017624:	d80c      	bhi.n	8017640 <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 8017626:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801762a:	4613      	mov	r3, r2
 801762c:	005b      	lsls	r3, r3, #1
 801762e:	4413      	add	r3, r2
 8017630:	00db      	lsls	r3, r3, #3
 8017632:	461a      	mov	r2, r3
 8017634:	683b      	ldr	r3, [r7, #0]
 8017636:	4413      	add	r3, r2
 8017638:	689a      	ldr	r2, [r3, #8]
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	1ad3      	subs	r3, r2, r3
 801763e:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 8017640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017642:	69fb      	ldr	r3, [r7, #28]
 8017644:	4293      	cmp	r3, r2
 8017646:	bf28      	it	cs
 8017648:	4613      	movcs	r3, r2
 801764a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801764c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017650:	3301      	adds	r3, #1
 8017652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 8017656:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801765a:	3301      	adds	r3, #1
 801765c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017660:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017664:	79bb      	ldrb	r3, [r7, #6]
 8017666:	429a      	cmp	r2, r3
 8017668:	f4ff af5d 	bcc.w	8017526 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 801766c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017670:	2b00      	cmp	r3, #0
 8017672:	d102      	bne.n	801767a <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017674:	f04f 33ff 	mov.w	r3, #4294967295
 8017678:	e000      	b.n	801767c <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 801767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801767c:	4618      	mov	r0, r3
 801767e:	372c      	adds	r7, #44	@ 0x2c
 8017680:	46bd      	mov	sp, r7
 8017682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017684 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017684:	b480      	push	{r7}
 8017686:	b085      	sub	sp, #20
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
 801768c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801768e:	2300      	movs	r3, #0
 8017690:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	2b03      	cmp	r3, #3
 8017698:	d13f      	bne.n	801771a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	3301      	adds	r3, #1
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	b25a      	sxtb	r2, r3
 80176a2:	683b      	ldr	r3, [r7, #0]
 80176a4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80176ac:	f003 030f 	and.w	r3, r3, #15
 80176b0:	b25a      	sxtb	r2, r3
 80176b2:	683b      	ldr	r3, [r7, #0]
 80176b4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80176bc:	b2db      	uxtb	r3, r3
 80176be:	091b      	lsrs	r3, r3, #4
 80176c0:	b2db      	uxtb	r3, r3
 80176c2:	b25a      	sxtb	r2, r3
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	3302      	adds	r3, #2
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	461a      	mov	r2, r3
 80176d0:	683b      	ldr	r3, [r7, #0]
 80176d2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	889b      	ldrh	r3, [r3, #4]
 80176d8:	b21a      	sxth	r2, r3
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	3303      	adds	r3, #3
 80176de:	781b      	ldrb	r3, [r3, #0]
 80176e0:	021b      	lsls	r3, r3, #8
 80176e2:	b21b      	sxth	r3, r3
 80176e4:	4313      	orrs	r3, r2
 80176e6:	b21b      	sxth	r3, r3
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	791a      	ldrb	r2, [r3, #4]
 80176f2:	683b      	ldr	r3, [r7, #0]
 80176f4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	091b      	lsrs	r3, r3, #4
 80176fc:	b2db      	uxtb	r3, r3
 80176fe:	f003 0307 	and.w	r3, r3, #7
 8017702:	b2da      	uxtb	r2, r3
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017708:	683b      	ldr	r3, [r7, #0]
 801770a:	781b      	ldrb	r3, [r3, #0]
 801770c:	f003 030f 	and.w	r3, r3, #15
 8017710:	b2da      	uxtb	r2, r3
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017716:	2305      	movs	r3, #5
 8017718:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801771a:	7bfb      	ldrb	r3, [r7, #15]
}
 801771c:	4618      	mov	r0, r3
 801771e:	3714      	adds	r7, #20
 8017720:	46bd      	mov	sp, r7
 8017722:	bc80      	pop	{r7}
 8017724:	4770      	bx	lr

08017726 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017726:	b5b0      	push	{r4, r5, r7, lr}
 8017728:	b088      	sub	sp, #32
 801772a:	af02      	add	r7, sp, #8
 801772c:	60f8      	str	r0, [r7, #12]
 801772e:	60b9      	str	r1, [r7, #8]
 8017730:	607a      	str	r2, [r7, #4]
 8017732:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	791b      	ldrb	r3, [r3, #4]
 8017738:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	799b      	ldrb	r3, [r3, #6]
 801773e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	79db      	ldrb	r3, [r3, #7]
 8017744:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	7a1b      	ldrb	r3, [r3, #8]
 801774a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	795b      	ldrb	r3, [r3, #5]
 8017750:	f083 0301 	eor.w	r3, r3, #1
 8017754:	b2db      	uxtb	r3, r3
 8017756:	2b00      	cmp	r3, #0
 8017758:	d008      	beq.n	801776c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	7adb      	ldrb	r3, [r3, #11]
 801775e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	7a5b      	ldrb	r3, [r3, #9]
 8017764:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	7a9b      	ldrb	r3, [r3, #10]
 801776a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801776c:	7dfb      	ldrb	r3, [r7, #23]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d04a      	beq.n	8017808 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017772:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017776:	2b0f      	cmp	r3, #15
 8017778:	d103      	bne.n	8017782 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	7a5b      	ldrb	r3, [r3, #9]
 801777e:	75bb      	strb	r3, [r7, #22]
 8017780:	e01d      	b.n	80177be <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	7b18      	ldrb	r0, [r3, #12]
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	6919      	ldr	r1, [r3, #16]
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017796:	68fa      	ldr	r2, [r7, #12]
 8017798:	6992      	ldr	r2, [r2, #24]
 801779a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801779e:	9201      	str	r2, [sp, #4]
 80177a0:	9300      	str	r3, [sp, #0]
 80177a2:	462b      	mov	r3, r5
 80177a4:	4622      	mov	r2, r4
 80177a6:	f7ff fd5e 	bl	8017266 <RegionCommonChanVerifyDr>
 80177aa:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80177ac:	f083 0301 	eor.w	r3, r3, #1
 80177b0:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d003      	beq.n	80177be <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80177b6:	7dfb      	ldrb	r3, [r7, #23]
 80177b8:	f023 0302 	bic.w	r3, r3, #2
 80177bc:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80177be:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80177c2:	2b0f      	cmp	r3, #15
 80177c4:	d103      	bne.n	80177ce <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	7a9b      	ldrb	r3, [r3, #10]
 80177ca:	757b      	strb	r3, [r7, #21]
 80177cc:	e01c      	b.n	8017808 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80177da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80177de:	4618      	mov	r0, r3
 80177e0:	f7ff fdb3 	bl	801734a <RegionCommonValueInRange>
 80177e4:	4603      	mov	r3, r0
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d10e      	bne.n	8017808 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80177f0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80177f4:	429a      	cmp	r2, r3
 80177f6:	da03      	bge.n	8017800 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	7f5b      	ldrb	r3, [r3, #29]
 80177fc:	757b      	strb	r3, [r7, #21]
 80177fe:	e003      	b.n	8017808 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017800:	7dfb      	ldrb	r3, [r7, #23]
 8017802:	f023 0304 	bic.w	r3, r3, #4
 8017806:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017808:	7dfb      	ldrb	r3, [r7, #23]
 801780a:	2b07      	cmp	r3, #7
 801780c:	d105      	bne.n	801781a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801780e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d101      	bne.n	801781a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017816:	2301      	movs	r3, #1
 8017818:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801781a:	68bb      	ldr	r3, [r7, #8]
 801781c:	7dba      	ldrb	r2, [r7, #22]
 801781e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	7d7a      	ldrb	r2, [r7, #21]
 8017824:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017826:	7d3a      	ldrb	r2, [r7, #20]
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	701a      	strb	r2, [r3, #0]

    return status;
 801782c:	7dfb      	ldrb	r3, [r7, #23]
}
 801782e:	4618      	mov	r0, r3
 8017830:	3718      	adds	r7, #24
 8017832:	46bd      	mov	sp, r7
 8017834:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017838 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017838:	b480      	push	{r7}
 801783a:	b083      	sub	sp, #12
 801783c:	af00      	add	r7, sp, #0
 801783e:	4603      	mov	r3, r0
 8017840:	6039      	str	r1, [r7, #0]
 8017842:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017844:	79fb      	ldrb	r3, [r7, #7]
 8017846:	4a06      	ldr	r2, [pc, #24]	@ (8017860 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017848:	fa02 f303 	lsl.w	r3, r2, r3
 801784c:	461a      	mov	r2, r3
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017854:	4618      	mov	r0, r3
 8017856:	370c      	adds	r7, #12
 8017858:	46bd      	mov	sp, r7
 801785a:	bc80      	pop	{r7}
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop
 8017860:	000f4240 	.word	0x000f4240

08017864 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017864:	b480      	push	{r7}
 8017866:	b083      	sub	sp, #12
 8017868:	af00      	add	r7, sp, #0
 801786a:	4603      	mov	r3, r0
 801786c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801786e:	79fb      	ldrb	r3, [r7, #7]
 8017870:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017874:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017878:	4618      	mov	r0, r3
 801787a:	370c      	adds	r7, #12
 801787c:	46bd      	mov	sp, r7
 801787e:	bc80      	pop	{r7}
 8017880:	4770      	bx	lr
	...

08017884 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017884:	b480      	push	{r7}
 8017886:	b085      	sub	sp, #20
 8017888:	af00      	add	r7, sp, #0
 801788a:	60f8      	str	r0, [r7, #12]
 801788c:	607a      	str	r2, [r7, #4]
 801788e:	603b      	str	r3, [r7, #0]
 8017890:	460b      	mov	r3, r1
 8017892:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017894:	7afa      	ldrb	r2, [r7, #11]
 8017896:	7afb      	ldrb	r3, [r7, #11]
 8017898:	3b04      	subs	r3, #4
 801789a:	4619      	mov	r1, r3
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	fb03 f101 	mul.w	r1, r3, r1
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80178a8:	fb00 f303 	mul.w	r3, r0, r3
 80178ac:	440b      	add	r3, r1
 80178ae:	005b      	lsls	r3, r3, #1
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d013      	beq.n	80178dc <RegionCommonComputeRxWindowParameters+0x58>
 80178b4:	7afb      	ldrb	r3, [r7, #11]
 80178b6:	3b04      	subs	r3, #4
 80178b8:	4619      	mov	r1, r3
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	fb03 f101 	mul.w	r1, r3, r1
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80178c6:	fb00 f303 	mul.w	r3, r0, r3
 80178ca:	440b      	add	r3, r1
 80178cc:	0059      	lsls	r1, r3, #1
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	440b      	add	r3, r1
 80178d2:	1e59      	subs	r1, r3, #1
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80178da:	e00f      	b.n	80178fc <RegionCommonComputeRxWindowParameters+0x78>
 80178dc:	7afb      	ldrb	r3, [r7, #11]
 80178de:	3b04      	subs	r3, #4
 80178e0:	4619      	mov	r1, r3
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	fb03 f101 	mul.w	r1, r3, r1
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80178ee:	fb00 f303 	mul.w	r3, r0, r3
 80178f2:	440b      	add	r3, r1
 80178f4:	0059      	lsls	r1, r3, #1
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80178fc:	429a      	cmp	r2, r3
 80178fe:	bf38      	it	cc
 8017900:	461a      	movcc	r2, r3
 8017902:	69bb      	ldr	r3, [r7, #24]
 8017904:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	009b      	lsls	r3, r3, #2
 801790a:	4619      	mov	r1, r3
 801790c:	69bb      	ldr	r3, [r7, #24]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	68fa      	ldr	r2, [r7, #12]
 8017912:	fb02 f303 	mul.w	r3, r2, r3
 8017916:	2b00      	cmp	r3, #0
 8017918:	d007      	beq.n	801792a <RegionCommonComputeRxWindowParameters+0xa6>
 801791a:	69bb      	ldr	r3, [r7, #24]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	68fa      	ldr	r2, [r7, #12]
 8017920:	fb02 f303 	mul.w	r3, r2, r3
 8017924:	3301      	adds	r3, #1
 8017926:	085b      	lsrs	r3, r3, #1
 8017928:	e005      	b.n	8017936 <RegionCommonComputeRxWindowParameters+0xb2>
 801792a:	69bb      	ldr	r3, [r7, #24]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	68fa      	ldr	r2, [r7, #12]
 8017930:	fb02 f303 	mul.w	r3, r2, r3
 8017934:	085b      	lsrs	r3, r3, #1
 8017936:	1acb      	subs	r3, r1, r3
 8017938:	683a      	ldr	r2, [r7, #0]
 801793a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801793e:	fb01 f202 	mul.w	r2, r1, r2
 8017942:	1a9b      	subs	r3, r3, r2
 8017944:	2b00      	cmp	r3, #0
 8017946:	dd27      	ble.n	8017998 <RegionCommonComputeRxWindowParameters+0x114>
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	009b      	lsls	r3, r3, #2
 801794c:	4619      	mov	r1, r3
 801794e:	69bb      	ldr	r3, [r7, #24]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	68fa      	ldr	r2, [r7, #12]
 8017954:	fb02 f303 	mul.w	r3, r2, r3
 8017958:	2b00      	cmp	r3, #0
 801795a:	d007      	beq.n	801796c <RegionCommonComputeRxWindowParameters+0xe8>
 801795c:	69bb      	ldr	r3, [r7, #24]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	68fa      	ldr	r2, [r7, #12]
 8017962:	fb02 f303 	mul.w	r3, r2, r3
 8017966:	3301      	adds	r3, #1
 8017968:	085b      	lsrs	r3, r3, #1
 801796a:	e005      	b.n	8017978 <RegionCommonComputeRxWindowParameters+0xf4>
 801796c:	69bb      	ldr	r3, [r7, #24]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	68fa      	ldr	r2, [r7, #12]
 8017972:	fb02 f303 	mul.w	r3, r2, r3
 8017976:	085b      	lsrs	r3, r3, #1
 8017978:	1acb      	subs	r3, r1, r3
 801797a:	683a      	ldr	r2, [r7, #0]
 801797c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017980:	fb01 f202 	mul.w	r2, r1, r2
 8017984:	1a9b      	subs	r3, r3, r2
 8017986:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801798a:	4a19      	ldr	r2, [pc, #100]	@ (80179f0 <RegionCommonComputeRxWindowParameters+0x16c>)
 801798c:	fb82 1203 	smull	r1, r2, r2, r3
 8017990:	1192      	asrs	r2, r2, #6
 8017992:	17db      	asrs	r3, r3, #31
 8017994:	1ad3      	subs	r3, r2, r3
 8017996:	e024      	b.n	80179e2 <RegionCommonComputeRxWindowParameters+0x15e>
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	009b      	lsls	r3, r3, #2
 801799c:	4619      	mov	r1, r3
 801799e:	69bb      	ldr	r3, [r7, #24]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	68fa      	ldr	r2, [r7, #12]
 80179a4:	fb02 f303 	mul.w	r3, r2, r3
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d007      	beq.n	80179bc <RegionCommonComputeRxWindowParameters+0x138>
 80179ac:	69bb      	ldr	r3, [r7, #24]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	68fa      	ldr	r2, [r7, #12]
 80179b2:	fb02 f303 	mul.w	r3, r2, r3
 80179b6:	3301      	adds	r3, #1
 80179b8:	085b      	lsrs	r3, r3, #1
 80179ba:	e005      	b.n	80179c8 <RegionCommonComputeRxWindowParameters+0x144>
 80179bc:	69bb      	ldr	r3, [r7, #24]
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	68fa      	ldr	r2, [r7, #12]
 80179c2:	fb02 f303 	mul.w	r3, r2, r3
 80179c6:	085b      	lsrs	r3, r3, #1
 80179c8:	1acb      	subs	r3, r1, r3
 80179ca:	683a      	ldr	r2, [r7, #0]
 80179cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80179d0:	fb01 f202 	mul.w	r2, r1, r2
 80179d4:	1a9b      	subs	r3, r3, r2
 80179d6:	4a06      	ldr	r2, [pc, #24]	@ (80179f0 <RegionCommonComputeRxWindowParameters+0x16c>)
 80179d8:	fb82 1203 	smull	r1, r2, r2, r3
 80179dc:	1192      	asrs	r2, r2, #6
 80179de:	17db      	asrs	r3, r3, #31
 80179e0:	1ad3      	subs	r3, r2, r3
 80179e2:	69fa      	ldr	r2, [r7, #28]
 80179e4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80179e6:	bf00      	nop
 80179e8:	3714      	adds	r7, #20
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bc80      	pop	{r7}
 80179ee:	4770      	bx	lr
 80179f0:	10624dd3 	.word	0x10624dd3

080179f4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b086      	sub	sp, #24
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	4603      	mov	r3, r0
 80179fc:	60b9      	str	r1, [r7, #8]
 80179fe:	607a      	str	r2, [r7, #4]
 8017a00:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017a02:	2300      	movs	r3, #0
 8017a04:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a0a:	005b      	lsls	r3, r3, #1
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7e9 f955 	bl	8000cbc <__aeabi_ui2f>
 8017a12:	4603      	mov	r3, r0
 8017a14:	4619      	mov	r1, r3
 8017a16:	68b8      	ldr	r0, [r7, #8]
 8017a18:	f7e9 f89e 	bl	8000b58 <__aeabi_fsub>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	6879      	ldr	r1, [r7, #4]
 8017a20:	4618      	mov	r0, r3
 8017a22:	f7e9 f899 	bl	8000b58 <__aeabi_fsub>
 8017a26:	4603      	mov	r3, r0
 8017a28:	4618      	mov	r0, r3
 8017a2a:	f7e8 fd11 	bl	8000450 <__aeabi_f2d>
 8017a2e:	4602      	mov	r2, r0
 8017a30:	460b      	mov	r3, r1
 8017a32:	4610      	mov	r0, r2
 8017a34:	4619      	mov	r1, r3
 8017a36:	f006 fa7b 	bl	801df30 <floor>
 8017a3a:	4602      	mov	r2, r0
 8017a3c:	460b      	mov	r3, r1
 8017a3e:	4610      	mov	r0, r2
 8017a40:	4619      	mov	r1, r3
 8017a42:	f7e9 f80d 	bl	8000a60 <__aeabi_d2iz>
 8017a46:	4603      	mov	r3, r0
 8017a48:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8017a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017a4e:	4618      	mov	r0, r3
 8017a50:	3718      	adds	r7, #24
 8017a52:	46bd      	mov	sp, r7
 8017a54:	bd80      	pop	{r7, pc}

08017a56 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017a56:	b590      	push	{r4, r7, lr}
 8017a58:	b087      	sub	sp, #28
 8017a5a:	af00      	add	r7, sp, #0
 8017a5c:	60f8      	str	r0, [r7, #12]
 8017a5e:	60b9      	str	r1, [r7, #8]
 8017a60:	607a      	str	r2, [r7, #4]
 8017a62:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017a64:	2300      	movs	r3, #0
 8017a66:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	757b      	strb	r3, [r7, #21]
 8017a70:	2300      	movs	r3, #0
 8017a72:	753b      	strb	r3, [r7, #20]
 8017a74:	e09c      	b.n	8017bb0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017a76:	2300      	movs	r3, #0
 8017a78:	74fb      	strb	r3, [r7, #19]
 8017a7a:	e08f      	b.n	8017b9c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	685a      	ldr	r2, [r3, #4]
 8017a80:	7d3b      	ldrb	r3, [r7, #20]
 8017a82:	005b      	lsls	r3, r3, #1
 8017a84:	4413      	add	r3, r2
 8017a86:	881b      	ldrh	r3, [r3, #0]
 8017a88:	461a      	mov	r2, r3
 8017a8a:	7cfb      	ldrb	r3, [r7, #19]
 8017a8c:	fa42 f303 	asr.w	r3, r2, r3
 8017a90:	f003 0301 	and.w	r3, r3, #1
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d07e      	beq.n	8017b96 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	689a      	ldr	r2, [r3, #8]
 8017a9c:	7d79      	ldrb	r1, [r7, #21]
 8017a9e:	7cfb      	ldrb	r3, [r7, #19]
 8017aa0:	440b      	add	r3, r1
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	005b      	lsls	r3, r3, #1
 8017aa8:	440b      	add	r3, r1
 8017aaa:	009b      	lsls	r3, r3, #2
 8017aac:	4413      	add	r3, r2
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d06b      	beq.n	8017b8c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	781b      	ldrb	r3, [r3, #0]
 8017ab8:	f083 0301 	eor.w	r3, r3, #1
 8017abc:	b2db      	uxtb	r3, r3
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d011      	beq.n	8017ae6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d00d      	beq.n	8017ae6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	695a      	ldr	r2, [r3, #20]
 8017ace:	7d3b      	ldrb	r3, [r7, #20]
 8017ad0:	005b      	lsls	r3, r3, #1
 8017ad2:	4413      	add	r3, r2
 8017ad4:	881b      	ldrh	r3, [r3, #0]
 8017ad6:	461a      	mov	r2, r3
 8017ad8:	7cfb      	ldrb	r3, [r7, #19]
 8017ada:	fa42 f303 	asr.w	r3, r2, r3
 8017ade:	f003 0301 	and.w	r3, r3, #1
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d054      	beq.n	8017b90 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	785b      	ldrb	r3, [r3, #1]
 8017aea:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	689a      	ldr	r2, [r3, #8]
 8017af0:	7d79      	ldrb	r1, [r7, #21]
 8017af2:	7cfb      	ldrb	r3, [r7, #19]
 8017af4:	440b      	add	r3, r1
 8017af6:	4619      	mov	r1, r3
 8017af8:	460b      	mov	r3, r1
 8017afa:	005b      	lsls	r3, r3, #1
 8017afc:	440b      	add	r3, r1
 8017afe:	009b      	lsls	r3, r3, #2
 8017b00:	4413      	add	r3, r2
 8017b02:	7a1b      	ldrb	r3, [r3, #8]
 8017b04:	f343 0303 	sbfx	r3, r3, #0, #4
 8017b08:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017b0a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	689a      	ldr	r2, [r3, #8]
 8017b10:	7d79      	ldrb	r1, [r7, #21]
 8017b12:	7cfb      	ldrb	r3, [r7, #19]
 8017b14:	440b      	add	r3, r1
 8017b16:	4619      	mov	r1, r3
 8017b18:	460b      	mov	r3, r1
 8017b1a:	005b      	lsls	r3, r3, #1
 8017b1c:	440b      	add	r3, r1
 8017b1e:	009b      	lsls	r3, r3, #2
 8017b20:	4413      	add	r3, r2
 8017b22:	7a1b      	ldrb	r3, [r3, #8]
 8017b24:	f343 1303 	sbfx	r3, r3, #4, #4
 8017b28:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017b2a:	461a      	mov	r2, r3
 8017b2c:	4621      	mov	r1, r4
 8017b2e:	f7ff fc0c 	bl	801734a <RegionCommonValueInRange>
 8017b32:	4603      	mov	r3, r0
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d02d      	beq.n	8017b94 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	68da      	ldr	r2, [r3, #12]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	6899      	ldr	r1, [r3, #8]
 8017b40:	7d78      	ldrb	r0, [r7, #21]
 8017b42:	7cfb      	ldrb	r3, [r7, #19]
 8017b44:	4403      	add	r3, r0
 8017b46:	4618      	mov	r0, r3
 8017b48:	4603      	mov	r3, r0
 8017b4a:	005b      	lsls	r3, r3, #1
 8017b4c:	4403      	add	r3, r0
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	440b      	add	r3, r1
 8017b52:	7a5b      	ldrb	r3, [r3, #9]
 8017b54:	4619      	mov	r1, r3
 8017b56:	460b      	mov	r3, r1
 8017b58:	005b      	lsls	r3, r3, #1
 8017b5a:	440b      	add	r3, r1
 8017b5c:	00db      	lsls	r3, r3, #3
 8017b5e:	4413      	add	r3, r2
 8017b60:	7d1b      	ldrb	r3, [r3, #20]
 8017b62:	f083 0301 	eor.w	r3, r3, #1
 8017b66:	b2db      	uxtb	r3, r3
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d003      	beq.n	8017b74 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017b6c:	7dbb      	ldrb	r3, [r7, #22]
 8017b6e:	3301      	adds	r3, #1
 8017b70:	75bb      	strb	r3, [r7, #22]
                    continue;
 8017b72:	e010      	b.n	8017b96 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017b74:	7dfb      	ldrb	r3, [r7, #23]
 8017b76:	1c5a      	adds	r2, r3, #1
 8017b78:	75fa      	strb	r2, [r7, #23]
 8017b7a:	461a      	mov	r2, r3
 8017b7c:	68bb      	ldr	r3, [r7, #8]
 8017b7e:	4413      	add	r3, r2
 8017b80:	7d79      	ldrb	r1, [r7, #21]
 8017b82:	7cfa      	ldrb	r2, [r7, #19]
 8017b84:	440a      	add	r2, r1
 8017b86:	b2d2      	uxtb	r2, r2
 8017b88:	701a      	strb	r2, [r3, #0]
 8017b8a:	e004      	b.n	8017b96 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017b8c:	bf00      	nop
 8017b8e:	e002      	b.n	8017b96 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017b90:	bf00      	nop
 8017b92:	e000      	b.n	8017b96 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017b94:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8017b96:	7cfb      	ldrb	r3, [r7, #19]
 8017b98:	3301      	adds	r3, #1
 8017b9a:	74fb      	strb	r3, [r7, #19]
 8017b9c:	7cfb      	ldrb	r3, [r7, #19]
 8017b9e:	2b0f      	cmp	r3, #15
 8017ba0:	f67f af6c 	bls.w	8017a7c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017ba4:	7d7b      	ldrb	r3, [r7, #21]
 8017ba6:	3310      	adds	r3, #16
 8017ba8:	757b      	strb	r3, [r7, #21]
 8017baa:	7d3b      	ldrb	r3, [r7, #20]
 8017bac:	3301      	adds	r3, #1
 8017bae:	753b      	strb	r3, [r7, #20]
 8017bb0:	7d7b      	ldrb	r3, [r7, #21]
 8017bb2:	b29a      	uxth	r2, r3
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	8a1b      	ldrh	r3, [r3, #16]
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	f4ff af5c 	bcc.w	8017a76 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	7dfa      	ldrb	r2, [r7, #23]
 8017bc2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	7dba      	ldrb	r2, [r7, #22]
 8017bc8:	701a      	strb	r2, [r3, #0]
}
 8017bca:	bf00      	nop
 8017bcc:	371c      	adds	r7, #28
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd90      	pop	{r4, r7, pc}

08017bd2 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bd4:	b08b      	sub	sp, #44	@ 0x2c
 8017bd6:	af04      	add	r7, sp, #16
 8017bd8:	60f8      	str	r0, [r7, #12]
 8017bda:	60b9      	str	r1, [r7, #8]
 8017bdc:	607a      	str	r2, [r7, #4]
 8017bde:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	685b      	ldr	r3, [r3, #4]
 8017be4:	4618      	mov	r0, r3
 8017be6:	f005 fd73 	bl	801d6d0 <UTIL_TIMER_GetElapsedTime>
 8017bea:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	681a      	ldr	r2, [r3, #0]
 8017bf0:	697b      	ldr	r3, [r7, #20]
 8017bf2:	1ad2      	subs	r2, r2, r3
 8017bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bf6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bfa:	2201      	movs	r2, #1
 8017bfc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	2200      	movs	r2, #0
 8017c02:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	685b      	ldr	r3, [r3, #4]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d004      	beq.n	8017c16 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017c10:	697a      	ldr	r2, [r7, #20]
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d32b      	bcc.n	8017c6e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	2200      	movs	r2, #0
 8017c1a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	69db      	ldr	r3, [r3, #28]
 8017c20:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017c26:	68dd      	ldr	r5, [r3, #12]
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	7a5e      	ldrb	r6, [r3, #9]
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	7d1b      	ldrb	r3, [r3, #20]
 8017c36:	68fa      	ldr	r2, [r7, #12]
 8017c38:	6992      	ldr	r2, [r2, #24]
 8017c3a:	9203      	str	r2, [sp, #12]
 8017c3c:	68fa      	ldr	r2, [r7, #12]
 8017c3e:	f10d 0e04 	add.w	lr, sp, #4
 8017c42:	320c      	adds	r2, #12
 8017c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017c48:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	4663      	mov	r3, ip
 8017c50:	4632      	mov	r2, r6
 8017c52:	4629      	mov	r1, r5
 8017c54:	4620      	mov	r0, r4
 8017c56:	f7ff fc49 	bl	80174ec <RegionCommonUpdateBandTimeOff>
 8017c5a:	4602      	mov	r2, r0
 8017c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c5e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	69d8      	ldr	r0, [r3, #28]
 8017c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c66:	683a      	ldr	r2, [r7, #0]
 8017c68:	6879      	ldr	r1, [r7, #4]
 8017c6a:	f7ff fef4 	bl	8017a56 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d004      	beq.n	8017c80 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8017c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c78:	2200      	movs	r2, #0
 8017c7a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	e006      	b.n	8017c8e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c82:	781b      	ldrb	r3, [r3, #0]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d001      	beq.n	8017c8c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017c88:	230b      	movs	r3, #11
 8017c8a:	e000      	b.n	8017c8e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017c8c:	230c      	movs	r3, #12
    }
}
 8017c8e:	4618      	mov	r0, r3
 8017c90:	371c      	adds	r7, #28
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c96 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8017c96:	b5b0      	push	{r4, r5, r7, lr}
 8017c98:	b086      	sub	sp, #24
 8017c9a:	af02      	add	r7, sp, #8
 8017c9c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	781b      	ldrb	r3, [r3, #0]
 8017ca2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f993 2000 	ldrsb.w	r2, [r3]
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	d103      	bne.n	8017cbc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017cba:	e026      	b.n	8017d0a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017cbc:	7bfb      	ldrb	r3, [r7, #15]
 8017cbe:	3b01      	subs	r3, #1
 8017cc0:	b2db      	uxtb	r3, r3
 8017cc2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017cca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d019      	beq.n	8017d06 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	78d8      	ldrb	r0, [r3, #3]
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	6859      	ldr	r1, [r3, #4]
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ce6:	687a      	ldr	r2, [r7, #4]
 8017ce8:	6892      	ldr	r2, [r2, #8]
 8017cea:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8017cee:	9201      	str	r2, [sp, #4]
 8017cf0:	9300      	str	r3, [sp, #0]
 8017cf2:	462b      	mov	r3, r5
 8017cf4:	4622      	mov	r2, r4
 8017cf6:	f7ff fab6 	bl	8017266 <RegionCommonChanVerifyDr>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	f083 0301 	eor.w	r3, r3, #1
 8017d00:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d1da      	bne.n	8017cbc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3710      	adds	r7, #16
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bdb0      	pop	{r4, r5, r7, pc}

08017d12 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017d12:	b480      	push	{r7}
 8017d14:	b083      	sub	sp, #12
 8017d16:	af00      	add	r7, sp, #0
 8017d18:	4603      	mov	r3, r0
 8017d1a:	460a      	mov	r2, r1
 8017d1c:	71fb      	strb	r3, [r7, #7]
 8017d1e:	4613      	mov	r3, r2
 8017d20:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017d22:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d2a:	4293      	cmp	r3, r2
 8017d2c:	bfb8      	it	lt
 8017d2e:	4613      	movlt	r3, r2
 8017d30:	b25b      	sxtb	r3, r3
}
 8017d32:	4618      	mov	r0, r3
 8017d34:	370c      	adds	r7, #12
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bc80      	pop	{r7}
 8017d3a:	4770      	bx	lr

08017d3c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017d3c:	b480      	push	{r7}
 8017d3e:	b083      	sub	sp, #12
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
 8017d44:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	009b      	lsls	r3, r3, #2
 8017d4a:	683a      	ldr	r2, [r7, #0]
 8017d4c:	4413      	add	r3, r2
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	4a07      	ldr	r2, [pc, #28]	@ (8017d70 <RegionCommonGetBandwidth+0x34>)
 8017d52:	4293      	cmp	r3, r2
 8017d54:	d004      	beq.n	8017d60 <RegionCommonGetBandwidth+0x24>
 8017d56:	4a07      	ldr	r2, [pc, #28]	@ (8017d74 <RegionCommonGetBandwidth+0x38>)
 8017d58:	4293      	cmp	r3, r2
 8017d5a:	d003      	beq.n	8017d64 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	e002      	b.n	8017d66 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017d60:	2301      	movs	r3, #1
 8017d62:	e000      	b.n	8017d66 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017d64:	2302      	movs	r3, #2
    }
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	370c      	adds	r7, #12
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bc80      	pop	{r7}
 8017d6e:	4770      	bx	lr
 8017d70:	0003d090 	.word	0x0003d090
 8017d74:	0007a120 	.word	0x0007a120

08017d78 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b086      	sub	sp, #24
 8017d7c:	af04      	add	r7, sp, #16
 8017d7e:	4603      	mov	r3, r0
 8017d80:	6039      	str	r1, [r7, #0]
 8017d82:	71fb      	strb	r3, [r7, #7]
 8017d84:	4613      	mov	r3, r2
 8017d86:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8017d88:	79fb      	ldrb	r3, [r7, #7]
 8017d8a:	2b05      	cmp	r3, #5
 8017d8c:	d810      	bhi.n	8017db0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8017d8e:	79fb      	ldrb	r3, [r7, #7]
 8017d90:	4a0f      	ldr	r2, [pc, #60]	@ (8017dd0 <RegionCommonRxConfigPrint+0x58>)
 8017d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d96:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017d9a:	9202      	str	r2, [sp, #8]
 8017d9c:	683a      	ldr	r2, [r7, #0]
 8017d9e:	9201      	str	r2, [sp, #4]
 8017da0:	9300      	str	r3, [sp, #0]
 8017da2:	4b0c      	ldr	r3, [pc, #48]	@ (8017dd4 <RegionCommonRxConfigPrint+0x5c>)
 8017da4:	2201      	movs	r2, #1
 8017da6:	2100      	movs	r1, #0
 8017da8:	2002      	movs	r0, #2
 8017daa:	f005 fd6f 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017dae:	e00a      	b.n	8017dc6 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017db0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017db4:	9301      	str	r3, [sp, #4]
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	9300      	str	r3, [sp, #0]
 8017dba:	4b07      	ldr	r3, [pc, #28]	@ (8017dd8 <RegionCommonRxConfigPrint+0x60>)
 8017dbc:	2201      	movs	r2, #1
 8017dbe:	2100      	movs	r1, #0
 8017dc0:	2002      	movs	r0, #2
 8017dc2:	f005 fd63 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 8017dc6:	bf00      	nop
 8017dc8:	3708      	adds	r7, #8
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}
 8017dce:	bf00      	nop
 8017dd0:	20000118 	.word	0x20000118
 8017dd4:	0801f8c0 	.word	0x0801f8c0
 8017dd8:	0801f8e0 	.word	0x0801f8e0

08017ddc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b084      	sub	sp, #16
 8017de0:	af02      	add	r7, sp, #8
 8017de2:	6078      	str	r0, [r7, #4]
 8017de4:	460b      	mov	r3, r1
 8017de6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017dec:	9301      	str	r3, [sp, #4]
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	9300      	str	r3, [sp, #0]
 8017df2:	4b05      	ldr	r3, [pc, #20]	@ (8017e08 <RegionCommonTxConfigPrint+0x2c>)
 8017df4:	2201      	movs	r2, #1
 8017df6:	2100      	movs	r1, #0
 8017df8:	2002      	movs	r0, #2
 8017dfa:	f005 fd47 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
}
 8017dfe:	bf00      	nop
 8017e00:	3708      	adds	r7, #8
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}
 8017e06:	bf00      	nop
 8017e08:	0801f8fc 	.word	0x0801f8fc

08017e0c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017e16:	4b2d      	ldr	r3, [pc, #180]	@ (8017ecc <VerifyRfFreq+0xc0>)
 8017e18:	6a1b      	ldr	r3, [r3, #32]
 8017e1a:	6878      	ldr	r0, [r7, #4]
 8017e1c:	4798      	blx	r3
 8017e1e:	4603      	mov	r3, r0
 8017e20:	f083 0301 	eor.w	r3, r3, #1
 8017e24:	b2db      	uxtb	r3, r3
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d001      	beq.n	8017e2e <VerifyRfFreq+0x22>
    {
        return false;
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	e04a      	b.n	8017ec4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	4a27      	ldr	r2, [pc, #156]	@ (8017ed0 <VerifyRfFreq+0xc4>)
 8017e32:	4293      	cmp	r3, r2
 8017e34:	d307      	bcc.n	8017e46 <VerifyRfFreq+0x3a>
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	4a26      	ldr	r2, [pc, #152]	@ (8017ed4 <VerifyRfFreq+0xc8>)
 8017e3a:	4293      	cmp	r3, r2
 8017e3c:	d803      	bhi.n	8017e46 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	2202      	movs	r2, #2
 8017e42:	701a      	strb	r2, [r3, #0]
 8017e44:	e03d      	b.n	8017ec2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	4a22      	ldr	r2, [pc, #136]	@ (8017ed4 <VerifyRfFreq+0xc8>)
 8017e4a:	4293      	cmp	r3, r2
 8017e4c:	d907      	bls.n	8017e5e <VerifyRfFreq+0x52>
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	4a21      	ldr	r2, [pc, #132]	@ (8017ed8 <VerifyRfFreq+0xcc>)
 8017e52:	4293      	cmp	r3, r2
 8017e54:	d803      	bhi.n	8017e5e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8017e56:	683b      	ldr	r3, [r7, #0]
 8017e58:	2200      	movs	r2, #0
 8017e5a:	701a      	strb	r2, [r3, #0]
 8017e5c:	e031      	b.n	8017ec2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	4a1d      	ldr	r2, [pc, #116]	@ (8017ed8 <VerifyRfFreq+0xcc>)
 8017e62:	4293      	cmp	r3, r2
 8017e64:	d907      	bls.n	8017e76 <VerifyRfFreq+0x6a>
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	4a1c      	ldr	r2, [pc, #112]	@ (8017edc <VerifyRfFreq+0xd0>)
 8017e6a:	4293      	cmp	r3, r2
 8017e6c:	d803      	bhi.n	8017e76 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	2201      	movs	r2, #1
 8017e72:	701a      	strb	r2, [r3, #0]
 8017e74:	e025      	b.n	8017ec2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	4a19      	ldr	r2, [pc, #100]	@ (8017ee0 <VerifyRfFreq+0xd4>)
 8017e7a:	4293      	cmp	r3, r2
 8017e7c:	d907      	bls.n	8017e8e <VerifyRfFreq+0x82>
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	4a18      	ldr	r2, [pc, #96]	@ (8017ee4 <VerifyRfFreq+0xd8>)
 8017e82:	4293      	cmp	r3, r2
 8017e84:	d803      	bhi.n	8017e8e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8017e86:	683b      	ldr	r3, [r7, #0]
 8017e88:	2205      	movs	r2, #5
 8017e8a:	701a      	strb	r2, [r3, #0]
 8017e8c:	e019      	b.n	8017ec2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	4a15      	ldr	r2, [pc, #84]	@ (8017ee8 <VerifyRfFreq+0xdc>)
 8017e92:	4293      	cmp	r3, r2
 8017e94:	d907      	bls.n	8017ea6 <VerifyRfFreq+0x9a>
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	4a14      	ldr	r2, [pc, #80]	@ (8017eec <VerifyRfFreq+0xe0>)
 8017e9a:	4293      	cmp	r3, r2
 8017e9c:	d803      	bhi.n	8017ea6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8017e9e:	683b      	ldr	r3, [r7, #0]
 8017ea0:	2203      	movs	r2, #3
 8017ea2:	701a      	strb	r2, [r3, #0]
 8017ea4:	e00d      	b.n	8017ec2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	4a11      	ldr	r2, [pc, #68]	@ (8017ef0 <VerifyRfFreq+0xe4>)
 8017eaa:	4293      	cmp	r3, r2
 8017eac:	d307      	bcc.n	8017ebe <VerifyRfFreq+0xb2>
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	4a10      	ldr	r2, [pc, #64]	@ (8017ef4 <VerifyRfFreq+0xe8>)
 8017eb2:	4293      	cmp	r3, r2
 8017eb4:	d803      	bhi.n	8017ebe <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	2204      	movs	r2, #4
 8017eba:	701a      	strb	r2, [r3, #0]
 8017ebc:	e001      	b.n	8017ec2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	e000      	b.n	8017ec4 <VerifyRfFreq+0xb8>
    }
    return true;
 8017ec2:	2301      	movs	r3, #1
}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	3708      	adds	r7, #8
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}
 8017ecc:	0801ff20 	.word	0x0801ff20
 8017ed0:	337055c0 	.word	0x337055c0
 8017ed4:	338eda3f 	.word	0x338eda3f
 8017ed8:	33bca100 	.word	0x33bca100
 8017edc:	33c5c8c0 	.word	0x33c5c8c0
 8017ee0:	33c74f5f 	.word	0x33c74f5f
 8017ee4:	33cef080 	.word	0x33cef080
 8017ee8:	33d1fdbf 	.word	0x33d1fdbf
 8017eec:	33d5ce50 	.word	0x33d5ce50
 8017ef0:	33d691a0 	.word	0x33d691a0
 8017ef4:	33db2580 	.word	0x33db2580

08017ef8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017ef8:	b590      	push	{r4, r7, lr}
 8017efa:	b08b      	sub	sp, #44	@ 0x2c
 8017efc:	af04      	add	r7, sp, #16
 8017efe:	4603      	mov	r3, r0
 8017f00:	460a      	mov	r2, r1
 8017f02:	71fb      	strb	r3, [r7, #7]
 8017f04:	4613      	mov	r3, r2
 8017f06:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8017f8c <GetTimeOnAir+0x94>)
 8017f0e:	5cd3      	ldrb	r3, [r2, r3]
 8017f10:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8017f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f16:	491e      	ldr	r1, [pc, #120]	@ (8017f90 <GetTimeOnAir+0x98>)
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7ff ff0f 	bl	8017d3c <RegionCommonGetBandwidth>
 8017f1e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017f20:	2300      	movs	r3, #0
 8017f22:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f28:	2b07      	cmp	r3, #7
 8017f2a:	d118      	bne.n	8017f5e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017f2c:	4b19      	ldr	r3, [pc, #100]	@ (8017f94 <GetTimeOnAir+0x9c>)
 8017f2e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017f30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017f34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017f38:	fb02 f303 	mul.w	r3, r2, r3
 8017f3c:	4619      	mov	r1, r3
 8017f3e:	88bb      	ldrh	r3, [r7, #4]
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	2201      	movs	r2, #1
 8017f44:	9203      	str	r2, [sp, #12]
 8017f46:	9302      	str	r3, [sp, #8]
 8017f48:	2300      	movs	r3, #0
 8017f4a:	9301      	str	r3, [sp, #4]
 8017f4c:	2305      	movs	r3, #5
 8017f4e:	9300      	str	r3, [sp, #0]
 8017f50:	2300      	movs	r3, #0
 8017f52:	460a      	mov	r2, r1
 8017f54:	68f9      	ldr	r1, [r7, #12]
 8017f56:	2000      	movs	r0, #0
 8017f58:	47a0      	blx	r4
 8017f5a:	6178      	str	r0, [r7, #20]
 8017f5c:	e011      	b.n	8017f82 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8017f94 <GetTimeOnAir+0x9c>)
 8017f60:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017f62:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017f66:	88bb      	ldrh	r3, [r7, #4]
 8017f68:	b2db      	uxtb	r3, r3
 8017f6a:	2101      	movs	r1, #1
 8017f6c:	9103      	str	r1, [sp, #12]
 8017f6e:	9302      	str	r3, [sp, #8]
 8017f70:	2300      	movs	r3, #0
 8017f72:	9301      	str	r3, [sp, #4]
 8017f74:	2308      	movs	r3, #8
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	2301      	movs	r3, #1
 8017f7a:	68f9      	ldr	r1, [r7, #12]
 8017f7c:	2001      	movs	r0, #1
 8017f7e:	47a0      	blx	r4
 8017f80:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8017f82:	697b      	ldr	r3, [r7, #20]
}
 8017f84:	4618      	mov	r0, r3
 8017f86:	371c      	adds	r7, #28
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd90      	pop	{r4, r7, pc}
 8017f8c:	0801fee8 	.word	0x0801fee8
 8017f90:	0801fef0 	.word	0x0801fef0
 8017f94:	0801ff20 	.word	0x0801ff20

08017f98 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b088      	sub	sp, #32
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	781b      	ldrb	r3, [r3, #0]
 8017fa8:	3b01      	subs	r3, #1
 8017faa:	2b37      	cmp	r3, #55	@ 0x37
 8017fac:	f200 8122 	bhi.w	80181f4 <RegionEU868GetPhyParam+0x25c>
 8017fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8017fb8 <RegionEU868GetPhyParam+0x20>)
 8017fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fb6:	bf00      	nop
 8017fb8:	08018099 	.word	0x08018099
 8017fbc:	0801809f 	.word	0x0801809f
 8017fc0:	080181f5 	.word	0x080181f5
 8017fc4:	080181f5 	.word	0x080181f5
 8017fc8:	080181f5 	.word	0x080181f5
 8017fcc:	080180a5 	.word	0x080180a5
 8017fd0:	080181f5 	.word	0x080181f5
 8017fd4:	080180df 	.word	0x080180df
 8017fd8:	080181f5 	.word	0x080181f5
 8017fdc:	080180e5 	.word	0x080180e5
 8017fe0:	080180eb 	.word	0x080180eb
 8017fe4:	080180f1 	.word	0x080180f1
 8017fe8:	080180f7 	.word	0x080180f7
 8017fec:	08018107 	.word	0x08018107
 8017ff0:	08018117 	.word	0x08018117
 8017ff4:	0801811d 	.word	0x0801811d
 8017ff8:	08018125 	.word	0x08018125
 8017ffc:	0801812d 	.word	0x0801812d
 8018000:	08018135 	.word	0x08018135
 8018004:	0801813d 	.word	0x0801813d
 8018008:	08018145 	.word	0x08018145
 801800c:	08018159 	.word	0x08018159
 8018010:	0801815f 	.word	0x0801815f
 8018014:	08018165 	.word	0x08018165
 8018018:	0801816b 	.word	0x0801816b
 801801c:	08018177 	.word	0x08018177
 8018020:	08018183 	.word	0x08018183
 8018024:	08018189 	.word	0x08018189
 8018028:	08018191 	.word	0x08018191
 801802c:	08018197 	.word	0x08018197
 8018030:	0801819d 	.word	0x0801819d
 8018034:	080181a5 	.word	0x080181a5
 8018038:	080180ab 	.word	0x080180ab
 801803c:	080181f5 	.word	0x080181f5
 8018040:	080181f5 	.word	0x080181f5
 8018044:	080181f5 	.word	0x080181f5
 8018048:	080181f5 	.word	0x080181f5
 801804c:	080181f5 	.word	0x080181f5
 8018050:	080181f5 	.word	0x080181f5
 8018054:	080181f5 	.word	0x080181f5
 8018058:	080181f5 	.word	0x080181f5
 801805c:	080181f5 	.word	0x080181f5
 8018060:	080181f5 	.word	0x080181f5
 8018064:	080181f5 	.word	0x080181f5
 8018068:	080181f5 	.word	0x080181f5
 801806c:	080181f5 	.word	0x080181f5
 8018070:	080181ab 	.word	0x080181ab
 8018074:	080181b1 	.word	0x080181b1
 8018078:	080181bf 	.word	0x080181bf
 801807c:	080181f5 	.word	0x080181f5
 8018080:	080181f5 	.word	0x080181f5
 8018084:	080181c5 	.word	0x080181c5
 8018088:	080181cb 	.word	0x080181cb
 801808c:	080181f5 	.word	0x080181f5
 8018090:	080181d1 	.word	0x080181d1
 8018094:	080181e1 	.word	0x080181e1
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018098:	2300      	movs	r3, #0
 801809a:	61bb      	str	r3, [r7, #24]
            break;
 801809c:	e0ab      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801809e:	2300      	movs	r3, #0
 80180a0:	61bb      	str	r3, [r7, #24]
            break;
 80180a2:	e0a8      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80180a4:	2300      	movs	r3, #0
 80180a6:	61bb      	str	r3, [r7, #24]
            break;
 80180a8:	e0a5      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80180b0:	733b      	strb	r3, [r7, #12]
 80180b2:	2307      	movs	r3, #7
 80180b4:	737b      	strb	r3, [r7, #13]
 80180b6:	2300      	movs	r3, #0
 80180b8:	73bb      	strb	r3, [r7, #14]
 80180ba:	2310      	movs	r3, #16
 80180bc:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80180be:	4b51      	ldr	r3, [pc, #324]	@ (8018204 <RegionEU868GetPhyParam+0x26c>)
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80180c6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80180c8:	4b4e      	ldr	r3, [pc, #312]	@ (8018204 <RegionEU868GetPhyParam+0x26c>)
 80180ca:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80180cc:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80180ce:	f107 030c 	add.w	r3, r7, #12
 80180d2:	4618      	mov	r0, r3
 80180d4:	f7ff fddf 	bl	8017c96 <RegionCommonGetNextLowerTxDr>
 80180d8:	4603      	mov	r3, r0
 80180da:	61bb      	str	r3, [r7, #24]
            break;
 80180dc:	e08b      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80180de:	2300      	movs	r3, #0
 80180e0:	61bb      	str	r3, [r7, #24]
            break;
 80180e2:	e088      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80180e4:	2300      	movs	r3, #0
 80180e6:	61bb      	str	r3, [r7, #24]
            break;
 80180e8:	e085      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80180ea:	2340      	movs	r3, #64	@ 0x40
 80180ec:	61bb      	str	r3, [r7, #24]
            break;
 80180ee:	e082      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80180f0:	2320      	movs	r3, #32
 80180f2:	61bb      	str	r3, [r7, #24]
            break;
 80180f4:	e07f      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80180fc:	461a      	mov	r2, r3
 80180fe:	4b42      	ldr	r3, [pc, #264]	@ (8018208 <RegionEU868GetPhyParam+0x270>)
 8018100:	5c9b      	ldrb	r3, [r3, r2]
 8018102:	61bb      	str	r3, [r7, #24]
            break;
 8018104:	e077      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801810c:	461a      	mov	r2, r3
 801810e:	4b3f      	ldr	r3, [pc, #252]	@ (801820c <RegionEU868GetPhyParam+0x274>)
 8018110:	5c9b      	ldrb	r3, [r3, r2]
 8018112:	61bb      	str	r3, [r7, #24]
            break;
 8018114:	e06f      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018116:	2301      	movs	r3, #1
 8018118:	61bb      	str	r3, [r7, #24]
            break;
 801811a:	e06c      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801811c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018120:	61bb      	str	r3, [r7, #24]
            break;
 8018122:	e068      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018124:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018128:	61bb      	str	r3, [r7, #24]
            break;
 801812a:	e064      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801812c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8018130:	61bb      	str	r3, [r7, #24]
            break;
 8018132:	e060      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018134:	f241 3388 	movw	r3, #5000	@ 0x1388
 8018138:	61bb      	str	r3, [r7, #24]
            break;
 801813a:	e05c      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801813c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8018140:	61bb      	str	r3, [r7, #24]
            break;
 8018142:	e058      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8018144:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8018148:	4831      	ldr	r0, [pc, #196]	@ (8018210 <RegionEU868GetPhyParam+0x278>)
 801814a:	f001 f831 	bl	80191b0 <randr>
 801814e:	4603      	mov	r3, r0
 8018150:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8018154:	61bb      	str	r3, [r7, #24]
            break;
 8018156:	e04e      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018158:	2300      	movs	r3, #0
 801815a:	61bb      	str	r3, [r7, #24]
            break;
 801815c:	e04b      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801815e:	4b2d      	ldr	r3, [pc, #180]	@ (8018214 <RegionEU868GetPhyParam+0x27c>)
 8018160:	61bb      	str	r3, [r7, #24]
            break;
 8018162:	e048      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018164:	2300      	movs	r3, #0
 8018166:	61bb      	str	r3, [r7, #24]
            break;
 8018168:	e045      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801816a:	4b26      	ldr	r3, [pc, #152]	@ (8018204 <RegionEU868GetPhyParam+0x26c>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018172:	61bb      	str	r3, [r7, #24]
            break;
 8018174:	e03f      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018176:	4b23      	ldr	r3, [pc, #140]	@ (8018204 <RegionEU868GetPhyParam+0x26c>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801817e:	61bb      	str	r3, [r7, #24]
            break;
 8018180:	e039      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018182:	2310      	movs	r3, #16
 8018184:	61bb      	str	r3, [r7, #24]
            break;
 8018186:	e036      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018188:	4b1e      	ldr	r3, [pc, #120]	@ (8018204 <RegionEU868GetPhyParam+0x26c>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	61bb      	str	r3, [r7, #24]
            break;
 801818e:	e032      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018190:	2300      	movs	r3, #0
 8018192:	61bb      	str	r3, [r7, #24]
            break;
 8018194:	e02f      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018196:	2300      	movs	r3, #0
 8018198:	61bb      	str	r3, [r7, #24]
            break;
 801819a:	e02c      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801819c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80181a0:	61bb      	str	r3, [r7, #24]
            break;
 80181a2:	e028      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80181a4:	4b1c      	ldr	r3, [pc, #112]	@ (8018218 <RegionEU868GetPhyParam+0x280>)
 80181a6:	61bb      	str	r3, [r7, #24]
            break;
 80181a8:	e025      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80181aa:	4b1a      	ldr	r3, [pc, #104]	@ (8018214 <RegionEU868GetPhyParam+0x27c>)
 80181ac:	61bb      	str	r3, [r7, #24]
            break;
 80181ae:	e022      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80181b0:	2311      	movs	r3, #17
 80181b2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80181b4:	2301      	movs	r3, #1
 80181b6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80181b8:	2300      	movs	r3, #0
 80181ba:	76bb      	strb	r3, [r7, #26]
            break;
 80181bc:	e01b      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80181be:	2303      	movs	r3, #3
 80181c0:	61bb      	str	r3, [r7, #24]
            break;
 80181c2:	e018      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80181c4:	4b13      	ldr	r3, [pc, #76]	@ (8018214 <RegionEU868GetPhyParam+0x27c>)
 80181c6:	61bb      	str	r3, [r7, #24]
            break;
 80181c8:	e015      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80181ca:	2303      	movs	r3, #3
 80181cc:	61bb      	str	r3, [r7, #24]
            break;
 80181ce:	e012      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80181d6:	461a      	mov	r2, r3
 80181d8:	4b10      	ldr	r3, [pc, #64]	@ (801821c <RegionEU868GetPhyParam+0x284>)
 80181da:	5c9b      	ldrb	r3, [r3, r2]
 80181dc:	61bb      	str	r3, [r7, #24]
            break;
 80181de:	e00a      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80181e6:	490e      	ldr	r1, [pc, #56]	@ (8018220 <RegionEU868GetPhyParam+0x288>)
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7ff fda7 	bl	8017d3c <RegionCommonGetBandwidth>
 80181ee:	4603      	mov	r3, r0
 80181f0:	61bb      	str	r3, [r7, #24]
            break;
 80181f2:	e000      	b.n	80181f6 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 80181f4:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80181f6:	69bb      	ldr	r3, [r7, #24]
 80181f8:	61fb      	str	r3, [r7, #28]
 80181fa:	69fb      	ldr	r3, [r7, #28]
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	3720      	adds	r7, #32
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}
 8018204:	20001af0 	.word	0x20001af0
 8018208:	0801ff10 	.word	0x0801ff10
 801820c:	0801ff18 	.word	0x0801ff18
 8018210:	fffffc18 	.word	0xfffffc18
 8018214:	33d3e608 	.word	0x33d3e608
 8018218:	4009999a 	.word	0x4009999a
 801821c:	0801fee8 	.word	0x0801fee8
 8018220:	0801fef0 	.word	0x0801fef0

08018224 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018224:	b590      	push	{r4, r7, lr}
 8018226:	b085      	sub	sp, #20
 8018228:	af02      	add	r7, sp, #8
 801822a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801822c:	4b11      	ldr	r3, [pc, #68]	@ (8018274 <RegionEU868SetBandTxDone+0x50>)
 801822e:	681a      	ldr	r2, [r3, #0]
 8018230:	4b11      	ldr	r3, [pc, #68]	@ (8018278 <RegionEU868SetBandTxDone+0x54>)
 8018232:	6819      	ldr	r1, [r3, #0]
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	4618      	mov	r0, r3
 801823a:	4603      	mov	r3, r0
 801823c:	005b      	lsls	r3, r3, #1
 801823e:	4403      	add	r3, r0
 8018240:	009b      	lsls	r3, r3, #2
 8018242:	440b      	add	r3, r1
 8018244:	3309      	adds	r3, #9
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	4619      	mov	r1, r3
 801824a:	460b      	mov	r3, r1
 801824c:	005b      	lsls	r3, r3, #1
 801824e:	440b      	add	r3, r1
 8018250:	00db      	lsls	r3, r3, #3
 8018252:	18d0      	adds	r0, r2, r3
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	6899      	ldr	r1, [r3, #8]
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	785c      	ldrb	r4, [r3, #1]
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	691a      	ldr	r2, [r3, #16]
 8018260:	9200      	str	r2, [sp, #0]
 8018262:	68db      	ldr	r3, [r3, #12]
 8018264:	4622      	mov	r2, r4
 8018266:	f7ff f913 	bl	8017490 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801826a:	bf00      	nop
 801826c:	370c      	adds	r7, #12
 801826e:	46bd      	mov	sp, r7
 8018270:	bd90      	pop	{r4, r7, pc}
 8018272:	bf00      	nop
 8018274:	20001af4 	.word	0x20001af4
 8018278:	20001af0 	.word	0x20001af0

0801827c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b0b0      	sub	sp, #192	@ 0xc0
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018284:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018288:	2290      	movs	r2, #144	@ 0x90
 801828a:	2100      	movs	r1, #0
 801828c:	4618      	mov	r0, r3
 801828e:	f005 fd75 	bl	801dd7c <memset>
 8018292:	2364      	movs	r3, #100	@ 0x64
 8018294:	863b      	strh	r3, [r7, #48]	@ 0x30
 8018296:	2364      	movs	r3, #100	@ 0x64
 8018298:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801829c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80182a0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80182a4:	230a      	movs	r3, #10
 80182a6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80182aa:	2364      	movs	r3, #100	@ 0x64
 80182ac:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80182b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80182b4:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	7b1b      	ldrb	r3, [r3, #12]
 80182bc:	2b02      	cmp	r3, #2
 80182be:	d05d      	beq.n	801837c <RegionEU868InitDefaults+0x100>
 80182c0:	2b02      	cmp	r3, #2
 80182c2:	dc6a      	bgt.n	801839a <RegionEU868InitDefaults+0x11e>
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d002      	beq.n	80182ce <RegionEU868InitDefaults+0x52>
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	d03e      	beq.n	801834a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80182cc:	e065      	b.n	801839a <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d062      	beq.n	801839c <RegionEU868InitDefaults+0x120>
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	685b      	ldr	r3, [r3, #4]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d05e      	beq.n	801839c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	685b      	ldr	r3, [r3, #4]
 80182e2:	4a30      	ldr	r2, [pc, #192]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 80182e4:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	689b      	ldr	r3, [r3, #8]
 80182ea:	4a2f      	ldr	r2, [pc, #188]	@ (80183a8 <RegionEU868InitDefaults+0x12c>)
 80182ec:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80182ee:	4b2e      	ldr	r3, [pc, #184]	@ (80183a8 <RegionEU868InitDefaults+0x12c>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80182f6:	2290      	movs	r2, #144	@ 0x90
 80182f8:	4618      	mov	r0, r3
 80182fa:	f000 ff70 	bl	80191de <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80182fe:	4b29      	ldr	r3, [pc, #164]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	4a2a      	ldr	r2, [pc, #168]	@ (80183ac <RegionEU868InitDefaults+0x130>)
 8018304:	ca07      	ldmia	r2, {r0, r1, r2}
 8018306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801830a:	4b26      	ldr	r3, [pc, #152]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	4a28      	ldr	r2, [pc, #160]	@ (80183b0 <RegionEU868InitDefaults+0x134>)
 8018310:	330c      	adds	r3, #12
 8018312:	ca07      	ldmia	r2, {r0, r1, r2}
 8018314:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018318:	4b22      	ldr	r3, [pc, #136]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	4a25      	ldr	r2, [pc, #148]	@ (80183b4 <RegionEU868InitDefaults+0x138>)
 801831e:	3318      	adds	r3, #24
 8018320:	ca07      	ldmia	r2, {r0, r1, r2}
 8018322:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018326:	4b1f      	ldr	r3, [pc, #124]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2207      	movs	r2, #7
 801832c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018330:	4b1c      	ldr	r3, [pc, #112]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8018338:	4b1a      	ldr	r3, [pc, #104]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8018340:	2201      	movs	r2, #1
 8018342:	4619      	mov	r1, r3
 8018344:	f7ff f87e 	bl	8017444 <RegionCommonChanMaskCopy>
 8018348:	e028      	b.n	801839c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801834a:	4b16      	ldr	r3, [pc, #88]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	2200      	movs	r2, #0
 8018350:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018352:	4b14      	ldr	r3, [pc, #80]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	2200      	movs	r2, #0
 8018358:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801835a:	4b12      	ldr	r3, [pc, #72]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	2200      	movs	r2, #0
 8018360:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018362:	4b10      	ldr	r3, [pc, #64]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801836a:	4b0e      	ldr	r3, [pc, #56]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8018372:	2201      	movs	r2, #1
 8018374:	4619      	mov	r1, r3
 8018376:	f7ff f865 	bl	8017444 <RegionCommonChanMaskCopy>
            break;
 801837a:	e00f      	b.n	801839c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801837c:	4b09      	ldr	r3, [pc, #36]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8018384:	4b07      	ldr	r3, [pc, #28]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 801838c:	4b05      	ldr	r3, [pc, #20]	@ (80183a4 <RegionEU868InitDefaults+0x128>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	430a      	orrs	r2, r1
 8018392:	b292      	uxth	r2, r2
 8018394:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8018398:	e000      	b.n	801839c <RegionEU868InitDefaults+0x120>
            break;
 801839a:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801839c:	37c0      	adds	r7, #192	@ 0xc0
 801839e:	46bd      	mov	sp, r7
 80183a0:	bd80      	pop	{r7, pc}
 80183a2:	bf00      	nop
 80183a4:	20001af0 	.word	0x20001af0
 80183a8:	20001af4 	.word	0x20001af4
 80183ac:	0801f918 	.word	0x0801f918
 80183b0:	0801f924 	.word	0x0801f924
 80183b4:	0801f930 	.word	0x0801f930

080183b8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b084      	sub	sp, #16
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	460b      	mov	r3, r1
 80183c2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80183c4:	78fb      	ldrb	r3, [r7, #3]
 80183c6:	2b0f      	cmp	r3, #15
 80183c8:	d86c      	bhi.n	80184a4 <RegionEU868Verify+0xec>
 80183ca:	a201      	add	r2, pc, #4	@ (adr r2, 80183d0 <RegionEU868Verify+0x18>)
 80183cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183d0:	08018411 	.word	0x08018411
 80183d4:	080184a5 	.word	0x080184a5
 80183d8:	080184a5 	.word	0x080184a5
 80183dc:	080184a5 	.word	0x080184a5
 80183e0:	080184a5 	.word	0x080184a5
 80183e4:	08018429 	.word	0x08018429
 80183e8:	08018447 	.word	0x08018447
 80183ec:	08018465 	.word	0x08018465
 80183f0:	080184a5 	.word	0x080184a5
 80183f4:	08018483 	.word	0x08018483
 80183f8:	08018483 	.word	0x08018483
 80183fc:	080184a5 	.word	0x080184a5
 8018400:	080184a5 	.word	0x080184a5
 8018404:	080184a5 	.word	0x080184a5
 8018408:	080184a5 	.word	0x080184a5
 801840c:	080184a1 	.word	0x080184a1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018410:	2300      	movs	r3, #0
 8018412:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	f107 020f 	add.w	r2, r7, #15
 801841c:	4611      	mov	r1, r2
 801841e:	4618      	mov	r0, r3
 8018420:	f7ff fcf4 	bl	8017e0c <VerifyRfFreq>
 8018424:	4603      	mov	r3, r0
 8018426:	e03e      	b.n	80184a6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	f993 3000 	ldrsb.w	r3, [r3]
 801842e:	2207      	movs	r2, #7
 8018430:	2100      	movs	r1, #0
 8018432:	4618      	mov	r0, r3
 8018434:	f7fe ff89 	bl	801734a <RegionCommonValueInRange>
 8018438:	4603      	mov	r3, r0
 801843a:	2b00      	cmp	r3, #0
 801843c:	bf14      	ite	ne
 801843e:	2301      	movne	r3, #1
 8018440:	2300      	moveq	r3, #0
 8018442:	b2db      	uxtb	r3, r3
 8018444:	e02f      	b.n	80184a6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	f993 3000 	ldrsb.w	r3, [r3]
 801844c:	2205      	movs	r2, #5
 801844e:	2100      	movs	r1, #0
 8018450:	4618      	mov	r0, r3
 8018452:	f7fe ff7a 	bl	801734a <RegionCommonValueInRange>
 8018456:	4603      	mov	r3, r0
 8018458:	2b00      	cmp	r3, #0
 801845a:	bf14      	ite	ne
 801845c:	2301      	movne	r3, #1
 801845e:	2300      	moveq	r3, #0
 8018460:	b2db      	uxtb	r3, r3
 8018462:	e020      	b.n	80184a6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	f993 3000 	ldrsb.w	r3, [r3]
 801846a:	2207      	movs	r2, #7
 801846c:	2100      	movs	r1, #0
 801846e:	4618      	mov	r0, r3
 8018470:	f7fe ff6b 	bl	801734a <RegionCommonValueInRange>
 8018474:	4603      	mov	r3, r0
 8018476:	2b00      	cmp	r3, #0
 8018478:	bf14      	ite	ne
 801847a:	2301      	movne	r3, #1
 801847c:	2300      	moveq	r3, #0
 801847e:	b2db      	uxtb	r3, r3
 8018480:	e011      	b.n	80184a6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f993 3000 	ldrsb.w	r3, [r3]
 8018488:	2207      	movs	r2, #7
 801848a:	2100      	movs	r1, #0
 801848c:	4618      	mov	r0, r3
 801848e:	f7fe ff5c 	bl	801734a <RegionCommonValueInRange>
 8018492:	4603      	mov	r3, r0
 8018494:	2b00      	cmp	r3, #0
 8018496:	bf14      	ite	ne
 8018498:	2301      	movne	r3, #1
 801849a:	2300      	moveq	r3, #0
 801849c:	b2db      	uxtb	r3, r3
 801849e:	e002      	b.n	80184a6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80184a0:	2301      	movs	r3, #1
 80184a2:	e000      	b.n	80184a6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80184a4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3710      	adds	r7, #16
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
 80184ae:	bf00      	nop

080184b0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b08a      	sub	sp, #40	@ 0x28
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80184b8:	2350      	movs	r3, #80	@ 0x50
 80184ba:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	7a1b      	ldrb	r3, [r3, #8]
 80184c2:	2b10      	cmp	r3, #16
 80184c4:	d162      	bne.n	801858c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	330f      	adds	r3, #15
 80184cc:	781b      	ldrb	r3, [r3, #0]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d15e      	bne.n	8018590 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80184d2:	2300      	movs	r3, #0
 80184d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80184d8:	2303      	movs	r3, #3
 80184da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80184de:	e050      	b.n	8018582 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80184e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80184e4:	2b07      	cmp	r3, #7
 80184e6:	d824      	bhi.n	8018532 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	685a      	ldr	r2, [r3, #4]
 80184ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80184f0:	4413      	add	r3, r2
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80184f6:	69ba      	ldr	r2, [r7, #24]
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	6859      	ldr	r1, [r3, #4]
 80184fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018500:	3301      	adds	r3, #1
 8018502:	440b      	add	r3, r1
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	021b      	lsls	r3, r3, #8
 8018508:	4313      	orrs	r3, r2
 801850a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801850c:	69ba      	ldr	r2, [r7, #24]
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	6859      	ldr	r1, [r3, #4]
 8018512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018516:	3302      	adds	r3, #2
 8018518:	440b      	add	r3, r1
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	041b      	lsls	r3, r3, #16
 801851e:	4313      	orrs	r3, r2
 8018520:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8018522:	69bb      	ldr	r3, [r7, #24]
 8018524:	2264      	movs	r2, #100	@ 0x64
 8018526:	fb02 f303 	mul.w	r3, r2, r3
 801852a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801852c:	2300      	movs	r3, #0
 801852e:	61fb      	str	r3, [r7, #28]
 8018530:	e006      	b.n	8018540 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8018536:	2300      	movs	r3, #0
 8018538:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801853c:	2300      	movs	r3, #0
 801853e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8018540:	69bb      	ldr	r3, [r7, #24]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d00b      	beq.n	801855e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8018546:	f107 0318 	add.w	r3, r7, #24
 801854a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801854c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018550:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018552:	f107 0310 	add.w	r3, r7, #16
 8018556:	4618      	mov	r0, r3
 8018558:	f000 fd14 	bl	8018f84 <RegionEU868ChannelAdd>
 801855c:	e007      	b.n	801856e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801855e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018562:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8018564:	f107 030c 	add.w	r3, r7, #12
 8018568:	4618      	mov	r0, r3
 801856a:	f000 fdad 	bl	80190c8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801856e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018572:	3303      	adds	r3, #3
 8018574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018578:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801857c:	3301      	adds	r3, #1
 801857e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8018582:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018586:	2b0f      	cmp	r3, #15
 8018588:	d9aa      	bls.n	80184e0 <RegionEU868ApplyCFList+0x30>
 801858a:	e002      	b.n	8018592 <RegionEU868ApplyCFList+0xe2>
        return;
 801858c:	bf00      	nop
 801858e:	e000      	b.n	8018592 <RegionEU868ApplyCFList+0xe2>
        return;
 8018590:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018592:	3728      	adds	r7, #40	@ 0x28
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}

08018598 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b082      	sub	sp, #8
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	791b      	ldrb	r3, [r3, #4]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d002      	beq.n	80185ae <RegionEU868ChanMaskSet+0x16>
 80185a8:	2b01      	cmp	r3, #1
 80185aa:	d00b      	beq.n	80185c4 <RegionEU868ChanMaskSet+0x2c>
 80185ac:	e015      	b.n	80185da <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80185ae:	4b0e      	ldr	r3, [pc, #56]	@ (80185e8 <RegionEU868ChanMaskSet+0x50>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	2201      	movs	r2, #1
 80185bc:	4619      	mov	r1, r3
 80185be:	f7fe ff41 	bl	8017444 <RegionCommonChanMaskCopy>
            break;
 80185c2:	e00c      	b.n	80185de <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80185c4:	4b08      	ldr	r3, [pc, #32]	@ (80185e8 <RegionEU868ChanMaskSet+0x50>)
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2201      	movs	r2, #1
 80185d2:	4619      	mov	r1, r3
 80185d4:	f7fe ff36 	bl	8017444 <RegionCommonChanMaskCopy>
            break;
 80185d8:	e001      	b.n	80185de <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80185da:	2300      	movs	r3, #0
 80185dc:	e000      	b.n	80185e0 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80185de:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80185e0:	4618      	mov	r0, r3
 80185e2:	3708      	adds	r7, #8
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}
 80185e8:	20001af0 	.word	0x20001af0

080185ec <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b088      	sub	sp, #32
 80185f0:	af02      	add	r7, sp, #8
 80185f2:	60ba      	str	r2, [r7, #8]
 80185f4:	607b      	str	r3, [r7, #4]
 80185f6:	4603      	mov	r3, r0
 80185f8:	73fb      	strb	r3, [r7, #15]
 80185fa:	460b      	mov	r3, r1
 80185fc:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80185fe:	2300      	movs	r3, #0
 8018600:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8018602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018606:	2b07      	cmp	r3, #7
 8018608:	bfa8      	it	ge
 801860a:	2307      	movge	r3, #7
 801860c:	b25a      	sxtb	r2, r3
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018618:	491e      	ldr	r1, [pc, #120]	@ (8018694 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801861a:	4618      	mov	r0, r3
 801861c:	f7ff fb8e 	bl	8017d3c <RegionCommonGetBandwidth>
 8018620:	4603      	mov	r3, r0
 8018622:	b2da      	uxtb	r2, r3
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801862e:	2b07      	cmp	r3, #7
 8018630:	d10a      	bne.n	8018648 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018638:	461a      	mov	r2, r3
 801863a:	4b17      	ldr	r3, [pc, #92]	@ (8018698 <RegionEU868ComputeRxWindowParameters+0xac>)
 801863c:	5c9b      	ldrb	r3, [r3, r2]
 801863e:	4618      	mov	r0, r3
 8018640:	f7ff f910 	bl	8017864 <RegionCommonComputeSymbolTimeFsk>
 8018644:	6178      	str	r0, [r7, #20]
 8018646:	e011      	b.n	801866c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801864e:	461a      	mov	r2, r3
 8018650:	4b11      	ldr	r3, [pc, #68]	@ (8018698 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018652:	5c9a      	ldrb	r2, [r3, r2]
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801865a:	4619      	mov	r1, r3
 801865c:	4b0d      	ldr	r3, [pc, #52]	@ (8018694 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801865e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018662:	4619      	mov	r1, r3
 8018664:	4610      	mov	r0, r2
 8018666:	f7ff f8e7 	bl	8017838 <RegionCommonComputeSymbolTimeLoRa>
 801866a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801866c:	4b0b      	ldr	r3, [pc, #44]	@ (801869c <RegionEU868ComputeRxWindowParameters+0xb0>)
 801866e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018670:	4798      	blx	r3
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	3308      	adds	r3, #8
 8018676:	687a      	ldr	r2, [r7, #4]
 8018678:	320c      	adds	r2, #12
 801867a:	7bb9      	ldrb	r1, [r7, #14]
 801867c:	9201      	str	r2, [sp, #4]
 801867e:	9300      	str	r3, [sp, #0]
 8018680:	4603      	mov	r3, r0
 8018682:	68ba      	ldr	r2, [r7, #8]
 8018684:	6978      	ldr	r0, [r7, #20]
 8018686:	f7ff f8fd 	bl	8017884 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801868a:	bf00      	nop
 801868c:	3718      	adds	r7, #24
 801868e:	46bd      	mov	sp, r7
 8018690:	bd80      	pop	{r7, pc}
 8018692:	bf00      	nop
 8018694:	0801fef0 	.word	0x0801fef0
 8018698:	0801fee8 	.word	0x0801fee8
 801869c:	0801ff20 	.word	0x0801ff20

080186a0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80186a0:	b5b0      	push	{r4, r5, r7, lr}
 80186a2:	b090      	sub	sp, #64	@ 0x40
 80186a4:	af0a      	add	r7, sp, #40	@ 0x28
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	785b      	ldrb	r3, [r3, #1]
 80186ae:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80186b0:	2300      	movs	r3, #0
 80186b2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80186b4:	2300      	movs	r3, #0
 80186b6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	685b      	ldr	r3, [r3, #4]
 80186bc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80186be:	4b5a      	ldr	r3, [pc, #360]	@ (8018828 <RegionEU868RxConfig+0x188>)
 80186c0:	685b      	ldr	r3, [r3, #4]
 80186c2:	4798      	blx	r3
 80186c4:	4603      	mov	r3, r0
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d001      	beq.n	80186ce <RegionEU868RxConfig+0x2e>
    {
        return false;
 80186ca:	2300      	movs	r3, #0
 80186cc:	e0a8      	b.n	8018820 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	7cdb      	ldrb	r3, [r3, #19]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d126      	bne.n	8018724 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80186d6:	4b55      	ldr	r3, [pc, #340]	@ (801882c <RegionEU868RxConfig+0x18c>)
 80186d8:	681a      	ldr	r2, [r3, #0]
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	4619      	mov	r1, r3
 80186e0:	460b      	mov	r3, r1
 80186e2:	005b      	lsls	r3, r3, #1
 80186e4:	440b      	add	r3, r1
 80186e6:	009b      	lsls	r3, r3, #2
 80186e8:	4413      	add	r3, r2
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80186ee:	4b4f      	ldr	r3, [pc, #316]	@ (801882c <RegionEU868RxConfig+0x18c>)
 80186f0:	681a      	ldr	r2, [r3, #0]
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	4619      	mov	r1, r3
 80186f8:	460b      	mov	r3, r1
 80186fa:	005b      	lsls	r3, r3, #1
 80186fc:	440b      	add	r3, r1
 80186fe:	009b      	lsls	r3, r3, #2
 8018700:	4413      	add	r3, r2
 8018702:	3304      	adds	r3, #4
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d00c      	beq.n	8018724 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801870a:	4b48      	ldr	r3, [pc, #288]	@ (801882c <RegionEU868RxConfig+0x18c>)
 801870c:	681a      	ldr	r2, [r3, #0]
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	4619      	mov	r1, r3
 8018714:	460b      	mov	r3, r1
 8018716:	005b      	lsls	r3, r3, #1
 8018718:	440b      	add	r3, r1
 801871a:	009b      	lsls	r3, r3, #2
 801871c:	4413      	add	r3, r2
 801871e:	3304      	adds	r3, #4
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018728:	4a41      	ldr	r2, [pc, #260]	@ (8018830 <RegionEU868RxConfig+0x190>)
 801872a:	5cd3      	ldrb	r3, [r2, r3]
 801872c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801872e:	4b3e      	ldr	r3, [pc, #248]	@ (8018828 <RegionEU868RxConfig+0x188>)
 8018730:	68db      	ldr	r3, [r3, #12]
 8018732:	6938      	ldr	r0, [r7, #16]
 8018734:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801873a:	2b07      	cmp	r3, #7
 801873c:	d128      	bne.n	8018790 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801873e:	2300      	movs	r3, #0
 8018740:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018742:	4b39      	ldr	r3, [pc, #228]	@ (8018828 <RegionEU868RxConfig+0x188>)
 8018744:	699c      	ldr	r4, [r3, #24]
 8018746:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801874a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801874e:	fb02 f303 	mul.w	r3, r2, r3
 8018752:	4619      	mov	r1, r3
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	689b      	ldr	r3, [r3, #8]
 8018758:	b29b      	uxth	r3, r3
 801875a:	687a      	ldr	r2, [r7, #4]
 801875c:	7c92      	ldrb	r2, [r2, #18]
 801875e:	7df8      	ldrb	r0, [r7, #23]
 8018760:	9209      	str	r2, [sp, #36]	@ 0x24
 8018762:	2200      	movs	r2, #0
 8018764:	9208      	str	r2, [sp, #32]
 8018766:	2200      	movs	r2, #0
 8018768:	9207      	str	r2, [sp, #28]
 801876a:	2200      	movs	r2, #0
 801876c:	9206      	str	r2, [sp, #24]
 801876e:	2201      	movs	r2, #1
 8018770:	9205      	str	r2, [sp, #20]
 8018772:	2200      	movs	r2, #0
 8018774:	9204      	str	r2, [sp, #16]
 8018776:	2200      	movs	r2, #0
 8018778:	9203      	str	r2, [sp, #12]
 801877a:	9302      	str	r3, [sp, #8]
 801877c:	2305      	movs	r3, #5
 801877e:	9301      	str	r3, [sp, #4]
 8018780:	4b2c      	ldr	r3, [pc, #176]	@ (8018834 <RegionEU868RxConfig+0x194>)
 8018782:	9300      	str	r3, [sp, #0]
 8018784:	2300      	movs	r3, #0
 8018786:	460a      	mov	r2, r1
 8018788:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801878c:	47a0      	blx	r4
 801878e:	e024      	b.n	80187da <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8018790:	2301      	movs	r3, #1
 8018792:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018794:	4b24      	ldr	r3, [pc, #144]	@ (8018828 <RegionEU868RxConfig+0x188>)
 8018796:	699c      	ldr	r4, [r3, #24]
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	789b      	ldrb	r3, [r3, #2]
 801879c:	461d      	mov	r5, r3
 801879e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	689b      	ldr	r3, [r3, #8]
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	687a      	ldr	r2, [r7, #4]
 80187aa:	7c92      	ldrb	r2, [r2, #18]
 80187ac:	7df8      	ldrb	r0, [r7, #23]
 80187ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80187b0:	2201      	movs	r2, #1
 80187b2:	9208      	str	r2, [sp, #32]
 80187b4:	2200      	movs	r2, #0
 80187b6:	9207      	str	r2, [sp, #28]
 80187b8:	2200      	movs	r2, #0
 80187ba:	9206      	str	r2, [sp, #24]
 80187bc:	2200      	movs	r2, #0
 80187be:	9205      	str	r2, [sp, #20]
 80187c0:	2200      	movs	r2, #0
 80187c2:	9204      	str	r2, [sp, #16]
 80187c4:	2200      	movs	r2, #0
 80187c6:	9203      	str	r2, [sp, #12]
 80187c8:	9302      	str	r3, [sp, #8]
 80187ca:	2308      	movs	r3, #8
 80187cc:	9301      	str	r3, [sp, #4]
 80187ce:	2300      	movs	r3, #0
 80187d0:	9300      	str	r3, [sp, #0]
 80187d2:	2301      	movs	r3, #1
 80187d4:	460a      	mov	r2, r1
 80187d6:	4629      	mov	r1, r5
 80187d8:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	7c5b      	ldrb	r3, [r3, #17]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d005      	beq.n	80187ee <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80187e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187e6:	4a14      	ldr	r2, [pc, #80]	@ (8018838 <RegionEU868RxConfig+0x198>)
 80187e8:	5cd3      	ldrb	r3, [r2, r3]
 80187ea:	75bb      	strb	r3, [r7, #22]
 80187ec:	e004      	b.n	80187f8 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80187ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187f2:	4a12      	ldr	r2, [pc, #72]	@ (801883c <RegionEU868RxConfig+0x19c>)
 80187f4:	5cd3      	ldrb	r3, [r2, r3]
 80187f6:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80187f8:	4b0b      	ldr	r3, [pc, #44]	@ (8018828 <RegionEU868RxConfig+0x188>)
 80187fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187fc:	7dba      	ldrb	r2, [r7, #22]
 80187fe:	320d      	adds	r2, #13
 8018800:	b2d1      	uxtb	r1, r2
 8018802:	7dfa      	ldrb	r2, [r7, #23]
 8018804:	4610      	mov	r0, r2
 8018806:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	7cdb      	ldrb	r3, [r3, #19]
 801880c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018810:	6939      	ldr	r1, [r7, #16]
 8018812:	4618      	mov	r0, r3
 8018814:	f7ff fab0 	bl	8017d78 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018818:	683b      	ldr	r3, [r7, #0]
 801881a:	7bfa      	ldrb	r2, [r7, #15]
 801881c:	701a      	strb	r2, [r3, #0]
    return true;
 801881e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018820:	4618      	mov	r0, r3
 8018822:	3718      	adds	r7, #24
 8018824:	46bd      	mov	sp, r7
 8018826:	bdb0      	pop	{r4, r5, r7, pc}
 8018828:	0801ff20 	.word	0x0801ff20
 801882c:	20001af0 	.word	0x20001af0
 8018830:	0801fee8 	.word	0x0801fee8
 8018834:	00014585 	.word	0x00014585
 8018838:	0801ff18 	.word	0x0801ff18
 801883c:	0801ff10 	.word	0x0801ff10

08018840 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018840:	b590      	push	{r4, r7, lr}
 8018842:	b093      	sub	sp, #76	@ 0x4c
 8018844:	af0a      	add	r7, sp, #40	@ 0x28
 8018846:	60f8      	str	r0, [r7, #12]
 8018848:	60b9      	str	r1, [r7, #8]
 801884a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018852:	461a      	mov	r2, r3
 8018854:	4b5d      	ldr	r3, [pc, #372]	@ (80189cc <RegionEU868TxConfig+0x18c>)
 8018856:	5c9b      	ldrb	r3, [r3, r2]
 8018858:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018860:	4b5b      	ldr	r3, [pc, #364]	@ (80189d0 <RegionEU868TxConfig+0x190>)
 8018862:	681a      	ldr	r2, [r3, #0]
 8018864:	4b5b      	ldr	r3, [pc, #364]	@ (80189d4 <RegionEU868TxConfig+0x194>)
 8018866:	6819      	ldr	r1, [r3, #0]
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	781b      	ldrb	r3, [r3, #0]
 801886c:	461c      	mov	r4, r3
 801886e:	4623      	mov	r3, r4
 8018870:	005b      	lsls	r3, r3, #1
 8018872:	4423      	add	r3, r4
 8018874:	009b      	lsls	r3, r3, #2
 8018876:	440b      	add	r3, r1
 8018878:	3309      	adds	r3, #9
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	4619      	mov	r1, r3
 801887e:	460b      	mov	r3, r1
 8018880:	005b      	lsls	r3, r3, #1
 8018882:	440b      	add	r3, r1
 8018884:	00db      	lsls	r3, r3, #3
 8018886:	4413      	add	r3, r2
 8018888:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801888c:	4619      	mov	r1, r3
 801888e:	f7ff fa40 	bl	8017d12 <RegionCommonLimitTxPower>
 8018892:	4603      	mov	r3, r0
 8018894:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801889c:	494e      	ldr	r1, [pc, #312]	@ (80189d8 <RegionEU868TxConfig+0x198>)
 801889e:	4618      	mov	r0, r3
 80188a0:	f7ff fa4c 	bl	8017d3c <RegionCommonGetBandwidth>
 80188a4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80188a6:	2300      	movs	r3, #0
 80188a8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	6859      	ldr	r1, [r3, #4]
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	689a      	ldr	r2, [r3, #8]
 80188b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80188b6:	4618      	mov	r0, r3
 80188b8:	f7ff f89c 	bl	80179f4 <RegionCommonComputeTxPower>
 80188bc:	4603      	mov	r3, r0
 80188be:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80188c0:	4b46      	ldr	r3, [pc, #280]	@ (80189dc <RegionEU868TxConfig+0x19c>)
 80188c2:	68da      	ldr	r2, [r3, #12]
 80188c4:	4b43      	ldr	r3, [pc, #268]	@ (80189d4 <RegionEU868TxConfig+0x194>)
 80188c6:	6819      	ldr	r1, [r3, #0]
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	4618      	mov	r0, r3
 80188ce:	4603      	mov	r3, r0
 80188d0:	005b      	lsls	r3, r3, #1
 80188d2:	4403      	add	r3, r0
 80188d4:	009b      	lsls	r3, r3, #2
 80188d6:	440b      	add	r3, r1
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	4618      	mov	r0, r3
 80188dc:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80188e4:	2b07      	cmp	r3, #7
 80188e6:	d124      	bne.n	8018932 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80188e8:	2300      	movs	r3, #0
 80188ea:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80188ec:	4b3b      	ldr	r3, [pc, #236]	@ (80189dc <RegionEU868TxConfig+0x19c>)
 80188ee:	69dc      	ldr	r4, [r3, #28]
 80188f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80188f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80188f8:	fb02 f303 	mul.w	r3, r2, r3
 80188fc:	461a      	mov	r2, r3
 80188fe:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018902:	7ff8      	ldrb	r0, [r7, #31]
 8018904:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8018908:	9308      	str	r3, [sp, #32]
 801890a:	2300      	movs	r3, #0
 801890c:	9307      	str	r3, [sp, #28]
 801890e:	2300      	movs	r3, #0
 8018910:	9306      	str	r3, [sp, #24]
 8018912:	2300      	movs	r3, #0
 8018914:	9305      	str	r3, [sp, #20]
 8018916:	2301      	movs	r3, #1
 8018918:	9304      	str	r3, [sp, #16]
 801891a:	2300      	movs	r3, #0
 801891c:	9303      	str	r3, [sp, #12]
 801891e:	2305      	movs	r3, #5
 8018920:	9302      	str	r3, [sp, #8]
 8018922:	2300      	movs	r3, #0
 8018924:	9301      	str	r3, [sp, #4]
 8018926:	9200      	str	r2, [sp, #0]
 8018928:	69bb      	ldr	r3, [r7, #24]
 801892a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801892e:	47a0      	blx	r4
 8018930:	e01d      	b.n	801896e <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8018932:	2301      	movs	r3, #1
 8018934:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018936:	4b29      	ldr	r3, [pc, #164]	@ (80189dc <RegionEU868TxConfig+0x19c>)
 8018938:	69dc      	ldr	r4, [r3, #28]
 801893a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801893e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018942:	7ff8      	ldrb	r0, [r7, #31]
 8018944:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8018948:	9208      	str	r2, [sp, #32]
 801894a:	2200      	movs	r2, #0
 801894c:	9207      	str	r2, [sp, #28]
 801894e:	2200      	movs	r2, #0
 8018950:	9206      	str	r2, [sp, #24]
 8018952:	2200      	movs	r2, #0
 8018954:	9205      	str	r2, [sp, #20]
 8018956:	2201      	movs	r2, #1
 8018958:	9204      	str	r2, [sp, #16]
 801895a:	2200      	movs	r2, #0
 801895c:	9203      	str	r2, [sp, #12]
 801895e:	2208      	movs	r2, #8
 8018960:	9202      	str	r2, [sp, #8]
 8018962:	2201      	movs	r2, #1
 8018964:	9201      	str	r2, [sp, #4]
 8018966:	9300      	str	r3, [sp, #0]
 8018968:	69bb      	ldr	r3, [r7, #24]
 801896a:	2200      	movs	r2, #0
 801896c:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801896e:	4b19      	ldr	r3, [pc, #100]	@ (80189d4 <RegionEU868TxConfig+0x194>)
 8018970:	681a      	ldr	r2, [r3, #0]
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	781b      	ldrb	r3, [r3, #0]
 8018976:	4619      	mov	r1, r3
 8018978:	460b      	mov	r3, r1
 801897a:	005b      	lsls	r3, r3, #1
 801897c:	440b      	add	r3, r1
 801897e:	009b      	lsls	r3, r3, #2
 8018980:	4413      	add	r3, r2
 8018982:	681a      	ldr	r2, [r3, #0]
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801898a:	4619      	mov	r1, r3
 801898c:	4610      	mov	r0, r2
 801898e:	f7ff fa25 	bl	8017ddc <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	899b      	ldrh	r3, [r3, #12]
 801899c:	4619      	mov	r1, r3
 801899e:	4610      	mov	r0, r2
 80189a0:	f7ff faaa 	bl	8017ef8 <GetTimeOnAir>
 80189a4:	4602      	mov	r2, r0
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80189aa:	4b0c      	ldr	r3, [pc, #48]	@ (80189dc <RegionEU868TxConfig+0x19c>)
 80189ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80189ae:	68fa      	ldr	r2, [r7, #12]
 80189b0:	8992      	ldrh	r2, [r2, #12]
 80189b2:	b2d1      	uxtb	r1, r2
 80189b4:	7ffa      	ldrb	r2, [r7, #31]
 80189b6:	4610      	mov	r0, r2
 80189b8:	4798      	blx	r3

    *txPower = txPowerLimited;
 80189ba:	68bb      	ldr	r3, [r7, #8]
 80189bc:	7f7a      	ldrb	r2, [r7, #29]
 80189be:	701a      	strb	r2, [r3, #0]
    return true;
 80189c0:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	3724      	adds	r7, #36	@ 0x24
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd90      	pop	{r4, r7, pc}
 80189ca:	bf00      	nop
 80189cc:	0801fee8 	.word	0x0801fee8
 80189d0:	20001af4 	.word	0x20001af4
 80189d4:	20001af0 	.word	0x20001af0
 80189d8:	0801fef0 	.word	0x0801fef0
 80189dc:	0801ff20 	.word	0x0801ff20

080189e0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80189e0:	b590      	push	{r4, r7, lr}
 80189e2:	b093      	sub	sp, #76	@ 0x4c
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	60f8      	str	r0, [r7, #12]
 80189e8:	60b9      	str	r1, [r7, #8]
 80189ea:	607a      	str	r2, [r7, #4]
 80189ec:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80189ee:	2307      	movs	r3, #7
 80189f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80189f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80189f8:	2200      	movs	r2, #0
 80189fa:	601a      	str	r2, [r3, #0]
 80189fc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80189fe:	2300      	movs	r3, #0
 8018a00:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8018a04:	2300      	movs	r3, #0
 8018a06:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018a0e:	e085      	b.n	8018b1c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	685a      	ldr	r2, [r3, #4]
 8018a14:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8018a18:	4413      	add	r3, r2
 8018a1a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8018a1e:	4611      	mov	r1, r2
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7fe fe2f 	bl	8017684 <RegionCommonParseLinkAdrReq>
 8018a26:	4603      	mov	r3, r0
 8018a28:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8018a2c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d07b      	beq.n	8018b2c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018a34:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018a38:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018a3c:	4413      	add	r3, r2
 8018a3e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018a42:	2307      	movs	r3, #7
 8018a44:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018a48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018a4c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d109      	bne.n	8018a6a <RegionEU868LinkAdrReq+0x8a>
 8018a56:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d106      	bne.n	8018a6a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8018a5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018a60:	f023 0301 	bic.w	r3, r3, #1
 8018a64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018a68:	e058      	b.n	8018b1c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d003      	beq.n	8018a7a <RegionEU868LinkAdrReq+0x9a>
 8018a72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018a76:	2b05      	cmp	r3, #5
 8018a78:	d903      	bls.n	8018a82 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018a7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018a7e:	2b06      	cmp	r3, #6
 8018a80:	d906      	bls.n	8018a90 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018a82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018a86:	f023 0301 	bic.w	r3, r3, #1
 8018a8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018a8e:	e045      	b.n	8018b1c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018a90:	2300      	movs	r3, #0
 8018a92:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8018a96:	e03d      	b.n	8018b14 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018a98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018a9c:	2b06      	cmp	r3, #6
 8018a9e:	d118      	bne.n	8018ad2 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8018aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8018c20 <RegionEU868LinkAdrReq+0x240>)
 8018aa2:	6819      	ldr	r1, [r3, #0]
 8018aa4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8018aa8:	4613      	mov	r3, r2
 8018aaa:	005b      	lsls	r3, r3, #1
 8018aac:	4413      	add	r3, r2
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	440b      	add	r3, r1
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d028      	beq.n	8018b0a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8018ab8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018abc:	2201      	movs	r2, #1
 8018abe:	fa02 f303 	lsl.w	r3, r2, r3
 8018ac2:	b21a      	sxth	r2, r3
 8018ac4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018ac6:	b21b      	sxth	r3, r3
 8018ac8:	4313      	orrs	r3, r2
 8018aca:	b21b      	sxth	r3, r3
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8018ad0:	e01b      	b.n	8018b0a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018ad2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018ad4:	461a      	mov	r2, r3
 8018ad6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018ada:	fa42 f303 	asr.w	r3, r2, r3
 8018ade:	f003 0301 	and.w	r3, r3, #1
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d011      	beq.n	8018b0a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8018ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8018c20 <RegionEU868LinkAdrReq+0x240>)
 8018ae8:	6819      	ldr	r1, [r3, #0]
 8018aea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8018aee:	4613      	mov	r3, r2
 8018af0:	005b      	lsls	r3, r3, #1
 8018af2:	4413      	add	r3, r2
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	440b      	add	r3, r1
 8018af8:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d105      	bne.n	8018b0a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8018afe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018b02:	f023 0301 	bic.w	r3, r3, #1
 8018b06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018b0a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018b0e:	3301      	adds	r3, #1
 8018b10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8018b14:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018b18:	2b0f      	cmp	r3, #15
 8018b1a:	d9bd      	bls.n	8018a98 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	7a1b      	ldrb	r3, [r3, #8]
 8018b20:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018b24:	429a      	cmp	r2, r3
 8018b26:	f4ff af73 	bcc.w	8018a10 <RegionEU868LinkAdrReq+0x30>
 8018b2a:	e000      	b.n	8018b2e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8018b2c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018b2e:	2302      	movs	r3, #2
 8018b30:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	7a5b      	ldrb	r3, [r3, #9]
 8018b38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018b3c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7ff fa29 	bl	8017f98 <RegionEU868GetPhyParam>
 8018b46:	4603      	mov	r3, r0
 8018b48:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8018b4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018b4e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	7a9b      	ldrb	r3, [r3, #10]
 8018b54:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018b56:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8018b5a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018b5c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8018b60:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018b62:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018b66:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018b6e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018b76:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	7b5b      	ldrb	r3, [r3, #13]
 8018b7c:	b25b      	sxtb	r3, r3
 8018b7e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018b80:	2310      	movs	r3, #16
 8018b82:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018b84:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8018b88:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b8c:	b25b      	sxtb	r3, r3
 8018b8e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018b92:	2307      	movs	r3, #7
 8018b94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018b98:	4b21      	ldr	r3, [pc, #132]	@ (8018c20 <RegionEU868LinkAdrReq+0x240>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018b9e:	2307      	movs	r3, #7
 8018ba0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018bb0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8018bb4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018bb8:	1c9a      	adds	r2, r3, #2
 8018bba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018bbe:	1c59      	adds	r1, r3, #1
 8018bc0:	f107 0010 	add.w	r0, r7, #16
 8018bc4:	4623      	mov	r3, r4
 8018bc6:	f7fe fdae 	bl	8017726 <RegionCommonLinkAdrReqVerifyParams>
 8018bca:	4603      	mov	r3, r0
 8018bcc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018bd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018bd4:	2b07      	cmp	r3, #7
 8018bd6:	d10d      	bne.n	8018bf4 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8018bd8:	4b11      	ldr	r3, [pc, #68]	@ (8018c20 <RegionEU868LinkAdrReq+0x240>)
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018be0:	220c      	movs	r2, #12
 8018be2:	2100      	movs	r1, #0
 8018be4:	4618      	mov	r0, r3
 8018be6:	f000 fb35 	bl	8019254 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8018bea:	4b0d      	ldr	r3, [pc, #52]	@ (8018c20 <RegionEU868LinkAdrReq+0x240>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018bf0:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018bf4:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8018bf8:	68bb      	ldr	r3, [r7, #8]
 8018bfa:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018bfc:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018c04:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018c0e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018c12:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8018c14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8018c18:	4618      	mov	r0, r3
 8018c1a:	374c      	adds	r7, #76	@ 0x4c
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd90      	pop	{r4, r7, pc}
 8018c20:	20001af0 	.word	0x20001af0

08018c24 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b084      	sub	sp, #16
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018c2c:	2307      	movs	r3, #7
 8018c2e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018c30:	2300      	movs	r3, #0
 8018c32:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	685b      	ldr	r3, [r3, #4]
 8018c38:	f107 020e 	add.w	r2, r7, #14
 8018c3c:	4611      	mov	r1, r2
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f7ff f8e4 	bl	8017e0c <VerifyRfFreq>
 8018c44:	4603      	mov	r3, r0
 8018c46:	f083 0301 	eor.w	r3, r3, #1
 8018c4a:	b2db      	uxtb	r3, r3
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d003      	beq.n	8018c58 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8018c50:	7bfb      	ldrb	r3, [r7, #15]
 8018c52:	f023 0301 	bic.w	r3, r3, #1
 8018c56:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8018c5e:	2207      	movs	r2, #7
 8018c60:	2100      	movs	r1, #0
 8018c62:	4618      	mov	r0, r3
 8018c64:	f7fe fb71 	bl	801734a <RegionCommonValueInRange>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d103      	bne.n	8018c76 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8018c6e:	7bfb      	ldrb	r3, [r7, #15]
 8018c70:	f023 0302 	bic.w	r3, r3, #2
 8018c74:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c7c:	2205      	movs	r2, #5
 8018c7e:	2100      	movs	r1, #0
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7fe fb62 	bl	801734a <RegionCommonValueInRange>
 8018c86:	4603      	mov	r3, r0
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d103      	bne.n	8018c94 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018c8c:	7bfb      	ldrb	r3, [r7, #15]
 8018c8e:	f023 0304 	bic.w	r3, r3, #4
 8018c92:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8018c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c96:	4618      	mov	r0, r3
 8018c98:	3710      	adds	r7, #16
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	bd80      	pop	{r7, pc}
	...

08018ca0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b086      	sub	sp, #24
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018ca8:	2303      	movs	r3, #3
 8018caa:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d114      	bne.n	8018ce0 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018cbc:	b2db      	uxtb	r3, r3
 8018cbe:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018cc0:	f107 0308 	add.w	r3, r7, #8
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f000 f9ff 	bl	80190c8 <RegionEU868ChannelsRemove>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	f083 0301 	eor.w	r3, r3, #1
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d03b      	beq.n	8018d4e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8018cd6:	7dfb      	ldrb	r3, [r7, #23]
 8018cd8:	f023 0303 	bic.w	r3, r3, #3
 8018cdc:	75fb      	strb	r3, [r7, #23]
 8018cde:	e036      	b.n	8018d4e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018cec:	b2db      	uxtb	r3, r3
 8018cee:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018cf0:	f107 030c 	add.w	r3, r7, #12
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f000 f945 	bl	8018f84 <RegionEU868ChannelAdd>
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	2b06      	cmp	r3, #6
 8018cfe:	d820      	bhi.n	8018d42 <RegionEU868NewChannelReq+0xa2>
 8018d00:	a201      	add	r2, pc, #4	@ (adr r2, 8018d08 <RegionEU868NewChannelReq+0x68>)
 8018d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d06:	bf00      	nop
 8018d08:	08018d4d 	.word	0x08018d4d
 8018d0c:	08018d43 	.word	0x08018d43
 8018d10:	08018d43 	.word	0x08018d43
 8018d14:	08018d43 	.word	0x08018d43
 8018d18:	08018d25 	.word	0x08018d25
 8018d1c:	08018d2f 	.word	0x08018d2f
 8018d20:	08018d39 	.word	0x08018d39
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018d24:	7dfb      	ldrb	r3, [r7, #23]
 8018d26:	f023 0301 	bic.w	r3, r3, #1
 8018d2a:	75fb      	strb	r3, [r7, #23]
                break;
 8018d2c:	e00f      	b.n	8018d4e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018d2e:	7dfb      	ldrb	r3, [r7, #23]
 8018d30:	f023 0302 	bic.w	r3, r3, #2
 8018d34:	75fb      	strb	r3, [r7, #23]
                break;
 8018d36:	e00a      	b.n	8018d4e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018d38:	7dfb      	ldrb	r3, [r7, #23]
 8018d3a:	f023 0303 	bic.w	r3, r3, #3
 8018d3e:	75fb      	strb	r3, [r7, #23]
                break;
 8018d40:	e005      	b.n	8018d4e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8018d42:	7dfb      	ldrb	r3, [r7, #23]
 8018d44:	f023 0303 	bic.w	r3, r3, #3
 8018d48:	75fb      	strb	r3, [r7, #23]
                break;
 8018d4a:	e000      	b.n	8018d4e <RegionEU868NewChannelReq+0xae>
                break;
 8018d4c:	bf00      	nop
            }
        }
    }

    return status;
 8018d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018d52:	4618      	mov	r0, r3
 8018d54:	3718      	adds	r7, #24
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}
 8018d5a:	bf00      	nop

08018d5c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018d5c:	b480      	push	{r7}
 8018d5e:	b083      	sub	sp, #12
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018d68:	4618      	mov	r0, r3
 8018d6a:	370c      	adds	r7, #12
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	bc80      	pop	{r7}
 8018d70:	4770      	bx	lr
	...

08018d74 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b084      	sub	sp, #16
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018d7c:	2303      	movs	r3, #3
 8018d7e:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018d80:	2300      	movs	r3, #0
 8018d82:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	781b      	ldrb	r3, [r3, #0]
 8018d88:	2b0f      	cmp	r3, #15
 8018d8a:	d901      	bls.n	8018d90 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	e035      	b.n	8018dfc <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	685b      	ldr	r3, [r3, #4]
 8018d94:	f107 020e 	add.w	r2, r7, #14
 8018d98:	4611      	mov	r1, r2
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7ff f836 	bl	8017e0c <VerifyRfFreq>
 8018da0:	4603      	mov	r3, r0
 8018da2:	f083 0301 	eor.w	r3, r3, #1
 8018da6:	b2db      	uxtb	r3, r3
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d003      	beq.n	8018db4 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018dac:	7bfb      	ldrb	r3, [r7, #15]
 8018dae:	f023 0301 	bic.w	r3, r3, #1
 8018db2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018db4:	4b13      	ldr	r3, [pc, #76]	@ (8018e04 <RegionEU868DlChannelReq+0x90>)
 8018db6:	681a      	ldr	r2, [r3, #0]
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	460b      	mov	r3, r1
 8018dc0:	005b      	lsls	r3, r3, #1
 8018dc2:	440b      	add	r3, r1
 8018dc4:	009b      	lsls	r3, r3, #2
 8018dc6:	4413      	add	r3, r2
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d103      	bne.n	8018dd6 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8018dce:	7bfb      	ldrb	r3, [r7, #15]
 8018dd0:	f023 0302 	bic.w	r3, r3, #2
 8018dd4:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018dd6:	7bfb      	ldrb	r3, [r7, #15]
 8018dd8:	2b03      	cmp	r3, #3
 8018dda:	d10d      	bne.n	8018df8 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018ddc:	4b09      	ldr	r3, [pc, #36]	@ (8018e04 <RegionEU868DlChannelReq+0x90>)
 8018dde:	6819      	ldr	r1, [r3, #0]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	781b      	ldrb	r3, [r3, #0]
 8018de4:	4618      	mov	r0, r3
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	685a      	ldr	r2, [r3, #4]
 8018dea:	4603      	mov	r3, r0
 8018dec:	005b      	lsls	r3, r3, #1
 8018dee:	4403      	add	r3, r0
 8018df0:	009b      	lsls	r3, r3, #2
 8018df2:	440b      	add	r3, r1
 8018df4:	3304      	adds	r3, #4
 8018df6:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3710      	adds	r7, #16
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd80      	pop	{r7, pc}
 8018e04:	20001af0 	.word	0x20001af0

08018e08 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018e08:	b480      	push	{r7}
 8018e0a:	b083      	sub	sp, #12
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	4603      	mov	r3, r0
 8018e10:	460a      	mov	r2, r1
 8018e12:	71fb      	strb	r3, [r7, #7]
 8018e14:	4613      	mov	r3, r2
 8018e16:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	370c      	adds	r7, #12
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bc80      	pop	{r7}
 8018e24:	4770      	bx	lr
	...

08018e28 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b09a      	sub	sp, #104	@ 0x68
 8018e2c:	af02      	add	r7, sp, #8
 8018e2e:	60f8      	str	r0, [r7, #12]
 8018e30:	60b9      	str	r1, [r7, #8]
 8018e32:	607a      	str	r2, [r7, #4]
 8018e34:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8018e36:	2300      	movs	r3, #0
 8018e38:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018e42:	2300      	movs	r3, #0
 8018e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018e46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	601a      	str	r2, [r3, #0]
 8018e4e:	605a      	str	r2, [r3, #4]
 8018e50:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018e52:	230c      	movs	r3, #12
 8018e54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8018e58:	2307      	movs	r3, #7
 8018e5a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8018e5c:	4b47      	ldr	r3, [pc, #284]	@ (8018f7c <RegionEU868NextChannel+0x154>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018e64:	2201      	movs	r2, #1
 8018e66:	2100      	movs	r1, #0
 8018e68:	4618      	mov	r0, r3
 8018e6a:	f7fe fabf 	bl	80173ec <RegionCommonCountChannels>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d10a      	bne.n	8018e8a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018e74:	4b41      	ldr	r3, [pc, #260]	@ (8018f7c <RegionEU868NextChannel+0x154>)
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8018e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8018f7c <RegionEU868NextChannel+0x154>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	f042 0207 	orr.w	r2, r2, #7
 8018e84:	b292      	uxth	r2, r2
 8018e86:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	7a5b      	ldrb	r3, [r3, #9]
 8018e8e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018e96:	b2db      	uxtb	r3, r3
 8018e98:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018e9a:	4b38      	ldr	r3, [pc, #224]	@ (8018f7c <RegionEU868NextChannel+0x154>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018ea2:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018ea4:	4b35      	ldr	r3, [pc, #212]	@ (8018f7c <RegionEU868NextChannel+0x154>)
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 8018eaa:	4b35      	ldr	r3, [pc, #212]	@ (8018f80 <RegionEU868NextChannel+0x158>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018eb0:	2310      	movs	r3, #16
 8018eb2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8018eb4:	f107 0312 	add.w	r3, r7, #18
 8018eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	685b      	ldr	r3, [r3, #4]
 8018ec4:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	7a9b      	ldrb	r3, [r3, #10]
 8018eca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018ece:	2306      	movs	r3, #6
 8018ed0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018ed4:	68fa      	ldr	r2, [r7, #12]
 8018ed6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8018eda:	320c      	adds	r2, #12
 8018edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ee0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	7d1b      	ldrb	r3, [r3, #20]
 8018ee8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	8adb      	ldrh	r3, [r3, #22]
 8018ef6:	4619      	mov	r1, r3
 8018ef8:	4610      	mov	r0, r2
 8018efa:	f7fe fffd 	bl	8017ef8 <GetTimeOnAir>
 8018efe:	4603      	mov	r3, r0
 8018f00:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018f02:	f107 0314 	add.w	r3, r7, #20
 8018f06:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018f08:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8018f0c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8018f10:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	9301      	str	r3, [sp, #4]
 8018f18:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8018f1c:	9300      	str	r3, [sp, #0]
 8018f1e:	460b      	mov	r3, r1
 8018f20:	6839      	ldr	r1, [r7, #0]
 8018f22:	f7fe fe56 	bl	8017bd2 <RegionCommonIdentifyChannels>
 8018f26:	4603      	mov	r3, r0
 8018f28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018f2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d10e      	bne.n	8018f52 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018f34:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8018f38:	3b01      	subs	r3, #1
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	2000      	movs	r0, #0
 8018f3e:	f000 f937 	bl	80191b0 <randr>
 8018f42:	4603      	mov	r3, r0
 8018f44:	3360      	adds	r3, #96	@ 0x60
 8018f46:	443b      	add	r3, r7
 8018f48:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8018f4c:	68bb      	ldr	r3, [r7, #8]
 8018f4e:	701a      	strb	r2, [r3, #0]
 8018f50:	e00e      	b.n	8018f70 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018f56:	2b0c      	cmp	r3, #12
 8018f58:	d10a      	bne.n	8018f70 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018f5a:	4b08      	ldr	r3, [pc, #32]	@ (8018f7c <RegionEU868NextChannel+0x154>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8018f62:	4b06      	ldr	r3, [pc, #24]	@ (8018f7c <RegionEU868NextChannel+0x154>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	f042 0207 	orr.w	r2, r2, #7
 8018f6a:	b292      	uxth	r2, r2
 8018f6c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8018f70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	3760      	adds	r7, #96	@ 0x60
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}
 8018f7c:	20001af0 	.word	0x20001af0
 8018f80:	20001af4 	.word	0x20001af4

08018f84 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018f84:	b580      	push	{r7, lr}
 8018f86:	b084      	sub	sp, #16
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8018f90:	2300      	movs	r3, #0
 8018f92:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8018f94:	2300      	movs	r3, #0
 8018f96:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	791b      	ldrb	r3, [r3, #4]
 8018f9c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018f9e:	7b7b      	ldrb	r3, [r7, #13]
 8018fa0:	2b02      	cmp	r3, #2
 8018fa2:	d801      	bhi.n	8018fa8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018fa4:	2306      	movs	r3, #6
 8018fa6:	e089      	b.n	80190bc <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018fa8:	7b7b      	ldrb	r3, [r7, #13]
 8018faa:	2b0f      	cmp	r3, #15
 8018fac:	d901      	bls.n	8018fb2 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018fae:	2303      	movs	r3, #3
 8018fb0:	e084      	b.n	80190bc <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	7a1b      	ldrb	r3, [r3, #8]
 8018fb8:	f343 0303 	sbfx	r3, r3, #0, #4
 8018fbc:	b25b      	sxtb	r3, r3
 8018fbe:	2207      	movs	r2, #7
 8018fc0:	2100      	movs	r1, #0
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7fe f9c1 	bl	801734a <RegionCommonValueInRange>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d101      	bne.n	8018fd2 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8018fce:	2301      	movs	r3, #1
 8018fd0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	7a1b      	ldrb	r3, [r3, #8]
 8018fd8:	f343 1303 	sbfx	r3, r3, #4, #4
 8018fdc:	b25b      	sxtb	r3, r3
 8018fde:	2207      	movs	r2, #7
 8018fe0:	2100      	movs	r1, #0
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f7fe f9b1 	bl	801734a <RegionCommonValueInRange>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d101      	bne.n	8018ff2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8018fee:	2301      	movs	r3, #1
 8018ff0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	7a1b      	ldrb	r3, [r3, #8]
 8018ff8:	f343 0303 	sbfx	r3, r3, #0, #4
 8018ffc:	b25a      	sxtb	r2, r3
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	7a1b      	ldrb	r3, [r3, #8]
 8019004:	f343 1303 	sbfx	r3, r3, #4, #4
 8019008:	b25b      	sxtb	r3, r3
 801900a:	429a      	cmp	r2, r3
 801900c:	dd01      	ble.n	8019012 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801900e:	2301      	movs	r3, #1
 8019010:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019012:	7bbb      	ldrb	r3, [r7, #14]
 8019014:	f083 0301 	eor.w	r3, r3, #1
 8019018:	b2db      	uxtb	r3, r3
 801901a:	2b00      	cmp	r3, #0
 801901c:	d010      	beq.n	8019040 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	f107 020c 	add.w	r2, r7, #12
 8019028:	4611      	mov	r1, r2
 801902a:	4618      	mov	r0, r3
 801902c:	f7fe feee 	bl	8017e0c <VerifyRfFreq>
 8019030:	4603      	mov	r3, r0
 8019032:	f083 0301 	eor.w	r3, r3, #1
 8019036:	b2db      	uxtb	r3, r3
 8019038:	2b00      	cmp	r3, #0
 801903a:	d001      	beq.n	8019040 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801903c:	2301      	movs	r3, #1
 801903e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019040:	7bfb      	ldrb	r3, [r7, #15]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d004      	beq.n	8019050 <RegionEU868ChannelAdd+0xcc>
 8019046:	7bbb      	ldrb	r3, [r7, #14]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d001      	beq.n	8019050 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801904c:	2306      	movs	r3, #6
 801904e:	e035      	b.n	80190bc <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019050:	7bfb      	ldrb	r3, [r7, #15]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d001      	beq.n	801905a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019056:	2305      	movs	r3, #5
 8019058:	e030      	b.n	80190bc <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801905a:	7bbb      	ldrb	r3, [r7, #14]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d001      	beq.n	8019064 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019060:	2304      	movs	r3, #4
 8019062:	e02b      	b.n	80190bc <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019064:	4b17      	ldr	r3, [pc, #92]	@ (80190c4 <RegionEU868ChannelAdd+0x140>)
 8019066:	6819      	ldr	r1, [r3, #0]
 8019068:	7b7a      	ldrb	r2, [r7, #13]
 801906a:	4613      	mov	r3, r2
 801906c:	005b      	lsls	r3, r3, #1
 801906e:	4413      	add	r3, r2
 8019070:	009b      	lsls	r3, r3, #2
 8019072:	18c8      	adds	r0, r1, r3
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	220c      	movs	r2, #12
 801907a:	4619      	mov	r1, r3
 801907c:	f000 f8af 	bl	80191de <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019080:	4b10      	ldr	r3, [pc, #64]	@ (80190c4 <RegionEU868ChannelAdd+0x140>)
 8019082:	6819      	ldr	r1, [r3, #0]
 8019084:	7b7a      	ldrb	r2, [r7, #13]
 8019086:	7b38      	ldrb	r0, [r7, #12]
 8019088:	4613      	mov	r3, r2
 801908a:	005b      	lsls	r3, r3, #1
 801908c:	4413      	add	r3, r2
 801908e:	009b      	lsls	r3, r3, #2
 8019090:	440b      	add	r3, r1
 8019092:	3309      	adds	r3, #9
 8019094:	4602      	mov	r2, r0
 8019096:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019098:	4b0a      	ldr	r3, [pc, #40]	@ (80190c4 <RegionEU868ChannelAdd+0x140>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80190a0:	b21a      	sxth	r2, r3
 80190a2:	7b7b      	ldrb	r3, [r7, #13]
 80190a4:	2101      	movs	r1, #1
 80190a6:	fa01 f303 	lsl.w	r3, r1, r3
 80190aa:	b21b      	sxth	r3, r3
 80190ac:	4313      	orrs	r3, r2
 80190ae:	b21a      	sxth	r2, r3
 80190b0:	4b04      	ldr	r3, [pc, #16]	@ (80190c4 <RegionEU868ChannelAdd+0x140>)
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	b292      	uxth	r2, r2
 80190b6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80190ba:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80190bc:	4618      	mov	r0, r3
 80190be:	3710      	adds	r7, #16
 80190c0:	46bd      	mov	sp, r7
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	20001af0 	.word	0x20001af0

080190c8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b086      	sub	sp, #24
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	781b      	ldrb	r3, [r3, #0]
 80190d4:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80190d6:	7dfb      	ldrb	r3, [r7, #23]
 80190d8:	2b02      	cmp	r3, #2
 80190da:	d801      	bhi.n	80190e0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80190dc:	2300      	movs	r3, #0
 80190de:	e016      	b.n	801910e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80190e0:	4b0d      	ldr	r3, [pc, #52]	@ (8019118 <RegionEU868ChannelsRemove+0x50>)
 80190e2:	6819      	ldr	r1, [r3, #0]
 80190e4:	7dfa      	ldrb	r2, [r7, #23]
 80190e6:	4613      	mov	r3, r2
 80190e8:	005b      	lsls	r3, r3, #1
 80190ea:	4413      	add	r3, r2
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	440b      	add	r3, r1
 80190f0:	461a      	mov	r2, r3
 80190f2:	2300      	movs	r3, #0
 80190f4:	6013      	str	r3, [r2, #0]
 80190f6:	6053      	str	r3, [r2, #4]
 80190f8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80190fa:	4b07      	ldr	r3, [pc, #28]	@ (8019118 <RegionEU868ChannelsRemove+0x50>)
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8019102:	7df9      	ldrb	r1, [r7, #23]
 8019104:	2210      	movs	r2, #16
 8019106:	4618      	mov	r0, r3
 8019108:	f7fe f93c 	bl	8017384 <RegionCommonChanDisable>
 801910c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801910e:	4618      	mov	r0, r3
 8019110:	3718      	adds	r7, #24
 8019112:	46bd      	mov	sp, r7
 8019114:	bd80      	pop	{r7, pc}
 8019116:	bf00      	nop
 8019118:	20001af0 	.word	0x20001af0

0801911c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801911c:	b480      	push	{r7}
 801911e:	b085      	sub	sp, #20
 8019120:	af00      	add	r7, sp, #0
 8019122:	4603      	mov	r3, r0
 8019124:	71fb      	strb	r3, [r7, #7]
 8019126:	460b      	mov	r3, r1
 8019128:	71bb      	strb	r3, [r7, #6]
 801912a:	4613      	mov	r3, r2
 801912c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801912e:	79ba      	ldrb	r2, [r7, #6]
 8019130:	797b      	ldrb	r3, [r7, #5]
 8019132:	1ad3      	subs	r3, r2, r3
 8019134:	b2db      	uxtb	r3, r3
 8019136:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801913c:	2b00      	cmp	r3, #0
 801913e:	da01      	bge.n	8019144 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019140:	2300      	movs	r3, #0
 8019142:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019144:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019146:	4618      	mov	r0, r3
 8019148:	3714      	adds	r7, #20
 801914a:	46bd      	mov	sp, r7
 801914c:	bc80      	pop	{r7}
 801914e:	4770      	bx	lr

08019150 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019150:	b480      	push	{r7}
 8019152:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019154:	4b0d      	ldr	r3, [pc, #52]	@ (801918c <rand1+0x3c>)
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	4a0d      	ldr	r2, [pc, #52]	@ (8019190 <rand1+0x40>)
 801915a:	fb02 f303 	mul.w	r3, r2, r3
 801915e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8019162:	3339      	adds	r3, #57	@ 0x39
 8019164:	4a09      	ldr	r2, [pc, #36]	@ (801918c <rand1+0x3c>)
 8019166:	6013      	str	r3, [r2, #0]
 8019168:	4b08      	ldr	r3, [pc, #32]	@ (801918c <rand1+0x3c>)
 801916a:	681a      	ldr	r2, [r3, #0]
 801916c:	2303      	movs	r3, #3
 801916e:	fba3 1302 	umull	r1, r3, r3, r2
 8019172:	1ad1      	subs	r1, r2, r3
 8019174:	0849      	lsrs	r1, r1, #1
 8019176:	440b      	add	r3, r1
 8019178:	0f99      	lsrs	r1, r3, #30
 801917a:	460b      	mov	r3, r1
 801917c:	07db      	lsls	r3, r3, #31
 801917e:	1a5b      	subs	r3, r3, r1
 8019180:	1ad1      	subs	r1, r2, r3
 8019182:	460b      	mov	r3, r1
}
 8019184:	4618      	mov	r0, r3
 8019186:	46bd      	mov	sp, r7
 8019188:	bc80      	pop	{r7}
 801918a:	4770      	bx	lr
 801918c:	20000130 	.word	0x20000130
 8019190:	41c64e6d 	.word	0x41c64e6d

08019194 <srand1>:

void srand1( uint32_t seed )
{
 8019194:	b480      	push	{r7}
 8019196:	b083      	sub	sp, #12
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
    next = seed;
 801919c:	4a03      	ldr	r2, [pc, #12]	@ (80191ac <srand1+0x18>)
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	6013      	str	r3, [r2, #0]
}
 80191a2:	bf00      	nop
 80191a4:	370c      	adds	r7, #12
 80191a6:	46bd      	mov	sp, r7
 80191a8:	bc80      	pop	{r7}
 80191aa:	4770      	bx	lr
 80191ac:	20000130 	.word	0x20000130

080191b0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b082      	sub	sp, #8
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
 80191b8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80191ba:	f7ff ffc9 	bl	8019150 <rand1>
 80191be:	4602      	mov	r2, r0
 80191c0:	6839      	ldr	r1, [r7, #0]
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	1acb      	subs	r3, r1, r3
 80191c6:	3301      	adds	r3, #1
 80191c8:	fb92 f1f3 	sdiv	r1, r2, r3
 80191cc:	fb01 f303 	mul.w	r3, r1, r3
 80191d0:	1ad2      	subs	r2, r2, r3
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	4413      	add	r3, r2
}
 80191d6:	4618      	mov	r0, r3
 80191d8:	3708      	adds	r7, #8
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}

080191de <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80191de:	b480      	push	{r7}
 80191e0:	b085      	sub	sp, #20
 80191e2:	af00      	add	r7, sp, #0
 80191e4:	60f8      	str	r0, [r7, #12]
 80191e6:	60b9      	str	r1, [r7, #8]
 80191e8:	4613      	mov	r3, r2
 80191ea:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80191ec:	e007      	b.n	80191fe <memcpy1+0x20>
    {
        *dst++ = *src++;
 80191ee:	68ba      	ldr	r2, [r7, #8]
 80191f0:	1c53      	adds	r3, r2, #1
 80191f2:	60bb      	str	r3, [r7, #8]
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	1c59      	adds	r1, r3, #1
 80191f8:	60f9      	str	r1, [r7, #12]
 80191fa:	7812      	ldrb	r2, [r2, #0]
 80191fc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80191fe:	88fb      	ldrh	r3, [r7, #6]
 8019200:	1e5a      	subs	r2, r3, #1
 8019202:	80fa      	strh	r2, [r7, #6]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d1f2      	bne.n	80191ee <memcpy1+0x10>
    }
}
 8019208:	bf00      	nop
 801920a:	bf00      	nop
 801920c:	3714      	adds	r7, #20
 801920e:	46bd      	mov	sp, r7
 8019210:	bc80      	pop	{r7}
 8019212:	4770      	bx	lr

08019214 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019214:	b480      	push	{r7}
 8019216:	b085      	sub	sp, #20
 8019218:	af00      	add	r7, sp, #0
 801921a:	60f8      	str	r0, [r7, #12]
 801921c:	60b9      	str	r1, [r7, #8]
 801921e:	4613      	mov	r3, r2
 8019220:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8019222:	88fb      	ldrh	r3, [r7, #6]
 8019224:	3b01      	subs	r3, #1
 8019226:	68fa      	ldr	r2, [r7, #12]
 8019228:	4413      	add	r3, r2
 801922a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801922c:	e007      	b.n	801923e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801922e:	68ba      	ldr	r2, [r7, #8]
 8019230:	1c53      	adds	r3, r2, #1
 8019232:	60bb      	str	r3, [r7, #8]
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	1e59      	subs	r1, r3, #1
 8019238:	60f9      	str	r1, [r7, #12]
 801923a:	7812      	ldrb	r2, [r2, #0]
 801923c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801923e:	88fb      	ldrh	r3, [r7, #6]
 8019240:	1e5a      	subs	r2, r3, #1
 8019242:	80fa      	strh	r2, [r7, #6]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d1f2      	bne.n	801922e <memcpyr+0x1a>
    }
}
 8019248:	bf00      	nop
 801924a:	bf00      	nop
 801924c:	3714      	adds	r7, #20
 801924e:	46bd      	mov	sp, r7
 8019250:	bc80      	pop	{r7}
 8019252:	4770      	bx	lr

08019254 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019254:	b480      	push	{r7}
 8019256:	b083      	sub	sp, #12
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]
 801925c:	460b      	mov	r3, r1
 801925e:	70fb      	strb	r3, [r7, #3]
 8019260:	4613      	mov	r3, r2
 8019262:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019264:	e004      	b.n	8019270 <memset1+0x1c>
    {
        *dst++ = value;
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	1c5a      	adds	r2, r3, #1
 801926a:	607a      	str	r2, [r7, #4]
 801926c:	78fa      	ldrb	r2, [r7, #3]
 801926e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019270:	883b      	ldrh	r3, [r7, #0]
 8019272:	1e5a      	subs	r2, r3, #1
 8019274:	803a      	strh	r2, [r7, #0]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d1f5      	bne.n	8019266 <memset1+0x12>
    }
}
 801927a:	bf00      	nop
 801927c:	bf00      	nop
 801927e:	370c      	adds	r7, #12
 8019280:	46bd      	mov	sp, r7
 8019282:	bc80      	pop	{r7}
 8019284:	4770      	bx	lr
	...

08019288 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019288:	b480      	push	{r7}
 801928a:	b085      	sub	sp, #20
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
 8019290:	460b      	mov	r3, r1
 8019292:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019294:	f04f 33ff 	mov.w	r3, #4294967295
 8019298:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d101      	bne.n	80192a4 <Crc32+0x1c>
    {
        return 0;
 80192a0:	2300      	movs	r3, #0
 80192a2:	e026      	b.n	80192f2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80192a4:	2300      	movs	r3, #0
 80192a6:	817b      	strh	r3, [r7, #10]
 80192a8:	e01d      	b.n	80192e6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80192aa:	897b      	ldrh	r3, [r7, #10]
 80192ac:	687a      	ldr	r2, [r7, #4]
 80192ae:	4413      	add	r3, r2
 80192b0:	781b      	ldrb	r3, [r3, #0]
 80192b2:	461a      	mov	r2, r3
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	4053      	eors	r3, r2
 80192b8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80192ba:	2300      	movs	r3, #0
 80192bc:	813b      	strh	r3, [r7, #8]
 80192be:	e00c      	b.n	80192da <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	085a      	lsrs	r2, r3, #1
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	f003 0301 	and.w	r3, r3, #1
 80192ca:	425b      	negs	r3, r3
 80192cc:	490b      	ldr	r1, [pc, #44]	@ (80192fc <Crc32+0x74>)
 80192ce:	400b      	ands	r3, r1
 80192d0:	4053      	eors	r3, r2
 80192d2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80192d4:	893b      	ldrh	r3, [r7, #8]
 80192d6:	3301      	adds	r3, #1
 80192d8:	813b      	strh	r3, [r7, #8]
 80192da:	893b      	ldrh	r3, [r7, #8]
 80192dc:	2b07      	cmp	r3, #7
 80192de:	d9ef      	bls.n	80192c0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80192e0:	897b      	ldrh	r3, [r7, #10]
 80192e2:	3301      	adds	r3, #1
 80192e4:	817b      	strh	r3, [r7, #10]
 80192e6:	897a      	ldrh	r2, [r7, #10]
 80192e8:	887b      	ldrh	r3, [r7, #2]
 80192ea:	429a      	cmp	r2, r3
 80192ec:	d3dd      	bcc.n	80192aa <Crc32+0x22>
        }
    }

    return ~crc;
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	43db      	mvns	r3, r3
}
 80192f2:	4618      	mov	r0, r3
 80192f4:	3714      	adds	r7, #20
 80192f6:	46bd      	mov	sp, r7
 80192f8:	bc80      	pop	{r7}
 80192fa:	4770      	bx	lr
 80192fc:	edb88320 	.word	0xedb88320

08019300 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019300:	b580      	push	{r7, lr}
 8019302:	b084      	sub	sp, #16
 8019304:	af02      	add	r7, sp, #8
 8019306:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019308:	4a24      	ldr	r2, [pc, #144]	@ (801939c <RadioInit+0x9c>)
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801930e:	4b24      	ldr	r3, [pc, #144]	@ (80193a0 <RadioInit+0xa0>)
 8019310:	2200      	movs	r2, #0
 8019312:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019314:	4b22      	ldr	r3, [pc, #136]	@ (80193a0 <RadioInit+0xa0>)
 8019316:	2200      	movs	r2, #0
 8019318:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801931a:	4b21      	ldr	r3, [pc, #132]	@ (80193a0 <RadioInit+0xa0>)
 801931c:	2200      	movs	r2, #0
 801931e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019320:	4b1f      	ldr	r3, [pc, #124]	@ (80193a0 <RadioInit+0xa0>)
 8019322:	2200      	movs	r2, #0
 8019324:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019326:	481f      	ldr	r0, [pc, #124]	@ (80193a4 <RadioInit+0xa4>)
 8019328:	f001 ffc2 	bl	801b2b0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801932c:	4b1c      	ldr	r3, [pc, #112]	@ (80193a0 <RadioInit+0xa0>)
 801932e:	2200      	movs	r2, #0
 8019330:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8019332:	4b1b      	ldr	r3, [pc, #108]	@ (80193a0 <RadioInit+0xa0>)
 8019334:	2200      	movs	r2, #0
 8019336:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019338:	f002 fa56 	bl	801b7e8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801933c:	2100      	movs	r1, #0
 801933e:	2000      	movs	r0, #0
 8019340:	f002 fe22 	bl	801bf88 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019344:	2204      	movs	r2, #4
 8019346:	2100      	movs	r1, #0
 8019348:	2001      	movs	r0, #1
 801934a:	f002 fbdf 	bl	801bb0c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801934e:	2300      	movs	r3, #0
 8019350:	2200      	movs	r2, #0
 8019352:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019356:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801935a:	f002 fb0f 	bl	801b97c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801935e:	f000 fe99 	bl	801a094 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019362:	2300      	movs	r3, #0
 8019364:	9300      	str	r3, [sp, #0]
 8019366:	4b10      	ldr	r3, [pc, #64]	@ (80193a8 <RadioInit+0xa8>)
 8019368:	2200      	movs	r2, #0
 801936a:	f04f 31ff 	mov.w	r1, #4294967295
 801936e:	480f      	ldr	r0, [pc, #60]	@ (80193ac <RadioInit+0xac>)
 8019370:	f003 ffde 	bl	801d330 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019374:	2300      	movs	r3, #0
 8019376:	9300      	str	r3, [sp, #0]
 8019378:	4b0d      	ldr	r3, [pc, #52]	@ (80193b0 <RadioInit+0xb0>)
 801937a:	2200      	movs	r2, #0
 801937c:	f04f 31ff 	mov.w	r1, #4294967295
 8019380:	480c      	ldr	r0, [pc, #48]	@ (80193b4 <RadioInit+0xb4>)
 8019382:	f003 ffd5 	bl	801d330 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019386:	4809      	ldr	r0, [pc, #36]	@ (80193ac <RadioInit+0xac>)
 8019388:	f004 f876 	bl	801d478 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801938c:	4809      	ldr	r0, [pc, #36]	@ (80193b4 <RadioInit+0xb4>)
 801938e:	f004 f873 	bl	801d478 <UTIL_TIMER_Stop>
}
 8019392:	bf00      	nop
 8019394:	3708      	adds	r7, #8
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	20001bf8 	.word	0x20001bf8
 80193a0:	20001bfc 	.word	0x20001bfc
 80193a4:	0801a489 	.word	0x0801a489
 80193a8:	0801a411 	.word	0x0801a411
 80193ac:	20001c58 	.word	0x20001c58
 80193b0:	0801a425 	.word	0x0801a425
 80193b4:	20001c70 	.word	0x20001c70

080193b8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80193bc:	f001 ffc0 	bl	801b340 <SUBGRF_GetOperatingMode>
 80193c0:	4603      	mov	r3, r0
 80193c2:	2b07      	cmp	r3, #7
 80193c4:	d00a      	beq.n	80193dc <RadioGetStatus+0x24>
 80193c6:	2b07      	cmp	r3, #7
 80193c8:	dc0a      	bgt.n	80193e0 <RadioGetStatus+0x28>
 80193ca:	2b04      	cmp	r3, #4
 80193cc:	d002      	beq.n	80193d4 <RadioGetStatus+0x1c>
 80193ce:	2b05      	cmp	r3, #5
 80193d0:	d002      	beq.n	80193d8 <RadioGetStatus+0x20>
 80193d2:	e005      	b.n	80193e0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80193d4:	2302      	movs	r3, #2
 80193d6:	e004      	b.n	80193e2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80193d8:	2301      	movs	r3, #1
 80193da:	e002      	b.n	80193e2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80193dc:	2303      	movs	r3, #3
 80193de:	e000      	b.n	80193e2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80193e0:	2300      	movs	r3, #0
    }
}
 80193e2:	4618      	mov	r0, r3
 80193e4:	bd80      	pop	{r7, pc}
	...

080193e8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	4603      	mov	r3, r0
 80193f0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80193f2:	4a2a      	ldr	r2, [pc, #168]	@ (801949c <RadioSetModem+0xb4>)
 80193f4:	79fb      	ldrb	r3, [r7, #7]
 80193f6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80193f8:	79fb      	ldrb	r3, [r7, #7]
 80193fa:	4618      	mov	r0, r3
 80193fc:	f003 f9b1 	bl	801c762 <RFW_SetRadioModem>
    switch( modem )
 8019400:	79fb      	ldrb	r3, [r7, #7]
 8019402:	2b05      	cmp	r3, #5
 8019404:	d80e      	bhi.n	8019424 <RadioSetModem+0x3c>
 8019406:	a201      	add	r2, pc, #4	@ (adr r2, 801940c <RadioSetModem+0x24>)
 8019408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801940c:	08019433 	.word	0x08019433
 8019410:	08019441 	.word	0x08019441
 8019414:	08019425 	.word	0x08019425
 8019418:	08019467 	.word	0x08019467
 801941c:	08019475 	.word	0x08019475
 8019420:	08019483 	.word	0x08019483
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019424:	2003      	movs	r0, #3
 8019426:	f002 fb4b 	bl	801bac0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801942a:	4b1c      	ldr	r3, [pc, #112]	@ (801949c <RadioSetModem+0xb4>)
 801942c:	2200      	movs	r2, #0
 801942e:	735a      	strb	r2, [r3, #13]
        break;
 8019430:	e02f      	b.n	8019492 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019432:	2000      	movs	r0, #0
 8019434:	f002 fb44 	bl	801bac0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019438:	4b18      	ldr	r3, [pc, #96]	@ (801949c <RadioSetModem+0xb4>)
 801943a:	2200      	movs	r2, #0
 801943c:	735a      	strb	r2, [r3, #13]
        break;
 801943e:	e028      	b.n	8019492 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019440:	2001      	movs	r0, #1
 8019442:	f002 fb3d 	bl	801bac0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019446:	4b15      	ldr	r3, [pc, #84]	@ (801949c <RadioSetModem+0xb4>)
 8019448:	7b5a      	ldrb	r2, [r3, #13]
 801944a:	4b14      	ldr	r3, [pc, #80]	@ (801949c <RadioSetModem+0xb4>)
 801944c:	7b1b      	ldrb	r3, [r3, #12]
 801944e:	429a      	cmp	r2, r3
 8019450:	d01e      	beq.n	8019490 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019452:	4b12      	ldr	r3, [pc, #72]	@ (801949c <RadioSetModem+0xb4>)
 8019454:	7b1a      	ldrb	r2, [r3, #12]
 8019456:	4b11      	ldr	r3, [pc, #68]	@ (801949c <RadioSetModem+0xb4>)
 8019458:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801945a:	4b10      	ldr	r3, [pc, #64]	@ (801949c <RadioSetModem+0xb4>)
 801945c:	7b5b      	ldrb	r3, [r3, #13]
 801945e:	4618      	mov	r0, r3
 8019460:	f000 ffa0 	bl	801a3a4 <RadioSetPublicNetwork>
        }
        break;
 8019464:	e014      	b.n	8019490 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019466:	2002      	movs	r0, #2
 8019468:	f002 fb2a 	bl	801bac0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801946c:	4b0b      	ldr	r3, [pc, #44]	@ (801949c <RadioSetModem+0xb4>)
 801946e:	2200      	movs	r2, #0
 8019470:	735a      	strb	r2, [r3, #13]
        break;
 8019472:	e00e      	b.n	8019492 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019474:	2002      	movs	r0, #2
 8019476:	f002 fb23 	bl	801bac0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801947a:	4b08      	ldr	r3, [pc, #32]	@ (801949c <RadioSetModem+0xb4>)
 801947c:	2200      	movs	r2, #0
 801947e:	735a      	strb	r2, [r3, #13]
        break;
 8019480:	e007      	b.n	8019492 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019482:	2000      	movs	r0, #0
 8019484:	f002 fb1c 	bl	801bac0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019488:	4b04      	ldr	r3, [pc, #16]	@ (801949c <RadioSetModem+0xb4>)
 801948a:	2200      	movs	r2, #0
 801948c:	735a      	strb	r2, [r3, #13]
        break;
 801948e:	e000      	b.n	8019492 <RadioSetModem+0xaa>
        break;
 8019490:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8019492:	bf00      	nop
 8019494:	3708      	adds	r7, #8
 8019496:	46bd      	mov	sp, r7
 8019498:	bd80      	pop	{r7, pc}
 801949a:	bf00      	nop
 801949c:	20001bfc 	.word	0x20001bfc

080194a0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80194a0:	b580      	push	{r7, lr}
 80194a2:	b082      	sub	sp, #8
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80194a8:	6878      	ldr	r0, [r7, #4]
 80194aa:	f002 fac3 	bl	801ba34 <SUBGRF_SetRfFrequency>
}
 80194ae:	bf00      	nop
 80194b0:	3708      	adds	r7, #8
 80194b2:	46bd      	mov	sp, r7
 80194b4:	bd80      	pop	{r7, pc}

080194b6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80194b6:	b580      	push	{r7, lr}
 80194b8:	b090      	sub	sp, #64	@ 0x40
 80194ba:	af0a      	add	r7, sp, #40	@ 0x28
 80194bc:	60f8      	str	r0, [r7, #12]
 80194be:	60b9      	str	r1, [r7, #8]
 80194c0:	603b      	str	r3, [r7, #0]
 80194c2:	4613      	mov	r3, r2
 80194c4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80194c6:	2301      	movs	r3, #1
 80194c8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80194ca:	2300      	movs	r3, #0
 80194cc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80194ce:	2300      	movs	r3, #0
 80194d0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80194d2:	f000 fdf2 	bl	801a0ba <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80194d6:	2000      	movs	r0, #0
 80194d8:	f7ff ff86 	bl	80193e8 <RadioSetModem>

    RadioSetChannel( freq );
 80194dc:	68f8      	ldr	r0, [r7, #12]
 80194de:	f7ff ffdf 	bl	80194a0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80194e2:	2301      	movs	r3, #1
 80194e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80194e6:	2300      	movs	r3, #0
 80194e8:	9308      	str	r3, [sp, #32]
 80194ea:	2300      	movs	r3, #0
 80194ec:	9307      	str	r3, [sp, #28]
 80194ee:	2300      	movs	r3, #0
 80194f0:	9306      	str	r3, [sp, #24]
 80194f2:	2300      	movs	r3, #0
 80194f4:	9305      	str	r3, [sp, #20]
 80194f6:	2300      	movs	r3, #0
 80194f8:	9304      	str	r3, [sp, #16]
 80194fa:	2300      	movs	r3, #0
 80194fc:	9303      	str	r3, [sp, #12]
 80194fe:	2300      	movs	r3, #0
 8019500:	9302      	str	r3, [sp, #8]
 8019502:	2303      	movs	r3, #3
 8019504:	9301      	str	r3, [sp, #4]
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	9300      	str	r3, [sp, #0]
 801950a:	2300      	movs	r3, #0
 801950c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8019510:	68b9      	ldr	r1, [r7, #8]
 8019512:	2000      	movs	r0, #0
 8019514:	f000 f83c 	bl	8019590 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019518:	2000      	movs	r0, #0
 801951a:	f000 fdd5 	bl	801a0c8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801951e:	f000 ff6f 	bl	801a400 <RadioGetWakeupTime>
 8019522:	4603      	mov	r3, r0
 8019524:	4618      	mov	r0, r3
 8019526:	f7e9 fe97 	bl	8003258 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801952a:	f004 f8bf 	bl	801d6ac <UTIL_TIMER_GetCurrentTime>
 801952e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019530:	e00d      	b.n	801954e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8019532:	2000      	movs	r0, #0
 8019534:	f000 feb6 	bl	801a2a4 <RadioRssi>
 8019538:	4603      	mov	r3, r0
 801953a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801953c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019544:	429a      	cmp	r2, r3
 8019546:	dd02      	ble.n	801954e <RadioIsChannelFree+0x98>
        {
            status = false;
 8019548:	2300      	movs	r3, #0
 801954a:	75fb      	strb	r3, [r7, #23]
            break;
 801954c:	e006      	b.n	801955c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801954e:	6938      	ldr	r0, [r7, #16]
 8019550:	f004 f8be 	bl	801d6d0 <UTIL_TIMER_GetElapsedTime>
 8019554:	4602      	mov	r2, r0
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	4293      	cmp	r3, r2
 801955a:	d8ea      	bhi.n	8019532 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801955c:	f000 fdad 	bl	801a0ba <RadioStandby>

    return status;
 8019560:	7dfb      	ldrb	r3, [r7, #23]
}
 8019562:	4618      	mov	r0, r3
 8019564:	3718      	adds	r7, #24
 8019566:	46bd      	mov	sp, r7
 8019568:	bd80      	pop	{r7, pc}

0801956a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801956a:	b580      	push	{r7, lr}
 801956c:	b082      	sub	sp, #8
 801956e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019570:	2300      	movs	r3, #0
 8019572:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019574:	2300      	movs	r3, #0
 8019576:	2200      	movs	r2, #0
 8019578:	2100      	movs	r1, #0
 801957a:	2000      	movs	r0, #0
 801957c:	f002 f9fe 	bl	801b97c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019580:	f001 ffaf 	bl	801b4e2 <SUBGRF_GetRandom>
 8019584:	6078      	str	r0, [r7, #4]

    return rnd;
 8019586:	687b      	ldr	r3, [r7, #4]
}
 8019588:	4618      	mov	r0, r3
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}

08019590 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b08a      	sub	sp, #40	@ 0x28
 8019594:	af00      	add	r7, sp, #0
 8019596:	60b9      	str	r1, [r7, #8]
 8019598:	607a      	str	r2, [r7, #4]
 801959a:	461a      	mov	r2, r3
 801959c:	4603      	mov	r3, r0
 801959e:	73fb      	strb	r3, [r7, #15]
 80195a0:	4613      	mov	r3, r2
 80195a2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80195a4:	4ab9      	ldr	r2, [pc, #740]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80195a6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80195aa:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80195ac:	f003 f897 	bl	801c6de <RFW_DeInit>
    if( rxContinuous == true )
 80195b0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d001      	beq.n	80195bc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80195b8:	2300      	movs	r3, #0
 80195ba:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80195bc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d004      	beq.n	80195ce <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80195c4:	4ab2      	ldr	r2, [pc, #712]	@ (8019890 <RadioSetRxConfig+0x300>)
 80195c6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80195ca:	7013      	strb	r3, [r2, #0]
 80195cc:	e002      	b.n	80195d4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80195ce:	4bb0      	ldr	r3, [pc, #704]	@ (8019890 <RadioSetRxConfig+0x300>)
 80195d0:	22ff      	movs	r2, #255	@ 0xff
 80195d2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80195d4:	7bfb      	ldrb	r3, [r7, #15]
 80195d6:	2b05      	cmp	r3, #5
 80195d8:	d009      	beq.n	80195ee <RadioSetRxConfig+0x5e>
 80195da:	2b05      	cmp	r3, #5
 80195dc:	f300 81d7 	bgt.w	801998e <RadioSetRxConfig+0x3fe>
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	f000 80bf 	beq.w	8019764 <RadioSetRxConfig+0x1d4>
 80195e6:	2b01      	cmp	r3, #1
 80195e8:	f000 8124 	beq.w	8019834 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80195ec:	e1cf      	b.n	801998e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80195ee:	2001      	movs	r0, #1
 80195f0:	f002 f8bc 	bl	801b76c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80195f4:	4ba5      	ldr	r3, [pc, #660]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80195f6:	2200      	movs	r2, #0
 80195f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80195fc:	4aa3      	ldr	r2, [pc, #652]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8019602:	4ba2      	ldr	r3, [pc, #648]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019604:	2209      	movs	r2, #9
 8019606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801960a:	4ba0      	ldr	r3, [pc, #640]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801960c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8019610:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019612:	68b8      	ldr	r0, [r7, #8]
 8019614:	f002 ff96 	bl	801c544 <SUBGRF_GetFskBandwidthRegValue>
 8019618:	4603      	mov	r3, r0
 801961a:	461a      	mov	r2, r3
 801961c:	4b9b      	ldr	r3, [pc, #620]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801961e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019622:	4b9a      	ldr	r3, [pc, #616]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019624:	2200      	movs	r2, #0
 8019626:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019628:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801962a:	00db      	lsls	r3, r3, #3
 801962c:	b29a      	uxth	r2, r3
 801962e:	4b97      	ldr	r3, [pc, #604]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019630:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8019632:	4b96      	ldr	r3, [pc, #600]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019634:	2200      	movs	r2, #0
 8019636:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019638:	4b94      	ldr	r3, [pc, #592]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801963a:	2210      	movs	r2, #16
 801963c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801963e:	4b93      	ldr	r3, [pc, #588]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019640:	2200      	movs	r2, #0
 8019642:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019644:	4b91      	ldr	r3, [pc, #580]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019646:	2200      	movs	r2, #0
 8019648:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801964a:	4b91      	ldr	r3, [pc, #580]	@ (8019890 <RadioSetRxConfig+0x300>)
 801964c:	781a      	ldrb	r2, [r3, #0]
 801964e:	4b8f      	ldr	r3, [pc, #572]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019650:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019652:	4b8e      	ldr	r3, [pc, #568]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019654:	2201      	movs	r2, #1
 8019656:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019658:	4b8c      	ldr	r3, [pc, #560]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801965a:	2200      	movs	r2, #0
 801965c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801965e:	2005      	movs	r0, #5
 8019660:	f7ff fec2 	bl	80193e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019664:	488b      	ldr	r0, [pc, #556]	@ (8019894 <RadioSetRxConfig+0x304>)
 8019666:	f002 fb1f 	bl	801bca8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801966a:	488b      	ldr	r0, [pc, #556]	@ (8019898 <RadioSetRxConfig+0x308>)
 801966c:	f002 fbee 	bl	801be4c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019670:	4a8a      	ldr	r2, [pc, #552]	@ (801989c <RadioSetRxConfig+0x30c>)
 8019672:	f107 031c 	add.w	r3, r7, #28
 8019676:	e892 0003 	ldmia.w	r2, {r0, r1}
 801967a:	e883 0003 	stmia.w	r3, {r0, r1}
 801967e:	f107 031c 	add.w	r3, r7, #28
 8019682:	4618      	mov	r0, r3
 8019684:	f001 feab 	bl	801b3de <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019688:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801968c:	f001 fef6 	bl	801b47c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019690:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8019694:	f000 fe24 	bl	801a2e0 <RadioRead>
 8019698:	4603      	mov	r3, r0
 801969a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 801969e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80196a2:	f023 0310 	bic.w	r3, r3, #16
 80196a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80196aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80196ae:	4619      	mov	r1, r3
 80196b0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80196b4:	f000 fe02 	bl	801a2bc <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80196b8:	2104      	movs	r1, #4
 80196ba:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80196be:	f000 fdfd 	bl	801a2bc <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80196c2:	f640 009b 	movw	r0, #2203	@ 0x89b
 80196c6:	f000 fe0b 	bl	801a2e0 <RadioRead>
 80196ca:	4603      	mov	r3, r0
 80196cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80196d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80196d4:	f023 031c 	bic.w	r3, r3, #28
 80196d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80196dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80196e0:	f043 0308 	orr.w	r3, r3, #8
 80196e4:	b2db      	uxtb	r3, r3
 80196e6:	4619      	mov	r1, r3
 80196e8:	f640 009b 	movw	r0, #2203	@ 0x89b
 80196ec:	f000 fde6 	bl	801a2bc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80196f0:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80196f4:	f000 fdf4 	bl	801a2e0 <RadioRead>
 80196f8:	4603      	mov	r3, r0
 80196fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80196fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019702:	f023 0318 	bic.w	r3, r3, #24
 8019706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801970a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801970e:	f043 0318 	orr.w	r3, r3, #24
 8019712:	b2db      	uxtb	r3, r3
 8019714:	4619      	mov	r1, r3
 8019716:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801971a:	f000 fdcf 	bl	801a2bc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801971e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019722:	f000 fddd 	bl	801a2e0 <RadioRead>
 8019726:	4603      	mov	r3, r0
 8019728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801972c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8019734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801973c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8019740:	b2db      	uxtb	r3, r3
 8019742:	4619      	mov	r1, r3
 8019744:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019748:	f000 fdb8 	bl	801a2bc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801974c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801974e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019752:	fb02 f303 	mul.w	r3, r2, r3
 8019756:	461a      	mov	r2, r3
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	fbb2 f3f3 	udiv	r3, r2, r3
 801975e:	4a4b      	ldr	r2, [pc, #300]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019760:	6093      	str	r3, [r2, #8]
            break;
 8019762:	e115      	b.n	8019990 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019764:	2000      	movs	r0, #0
 8019766:	f002 f801 	bl	801b76c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801976a:	4b48      	ldr	r3, [pc, #288]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801976c:	2200      	movs	r2, #0
 801976e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019772:	4a46      	ldr	r2, [pc, #280]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019778:	4b44      	ldr	r3, [pc, #272]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801977a:	220b      	movs	r2, #11
 801977c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019780:	68b8      	ldr	r0, [r7, #8]
 8019782:	f002 fedf 	bl	801c544 <SUBGRF_GetFskBandwidthRegValue>
 8019786:	4603      	mov	r3, r0
 8019788:	461a      	mov	r2, r3
 801978a:	4b40      	ldr	r3, [pc, #256]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801978c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019790:	4b3e      	ldr	r3, [pc, #248]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019792:	2200      	movs	r2, #0
 8019794:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019796:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019798:	00db      	lsls	r3, r3, #3
 801979a:	b29a      	uxth	r2, r3
 801979c:	4b3b      	ldr	r3, [pc, #236]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801979e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80197a0:	4b3a      	ldr	r3, [pc, #232]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80197a2:	2204      	movs	r2, #4
 80197a4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80197a6:	4b39      	ldr	r3, [pc, #228]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80197a8:	2218      	movs	r2, #24
 80197aa:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80197ac:	4b37      	ldr	r3, [pc, #220]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80197ae:	2200      	movs	r2, #0
 80197b0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80197b2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80197b6:	f083 0301 	eor.w	r3, r3, #1
 80197ba:	b2db      	uxtb	r3, r3
 80197bc:	461a      	mov	r2, r3
 80197be:	4b33      	ldr	r3, [pc, #204]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80197c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80197c2:	4b33      	ldr	r3, [pc, #204]	@ (8019890 <RadioSetRxConfig+0x300>)
 80197c4:	781a      	ldrb	r2, [r3, #0]
 80197c6:	4b31      	ldr	r3, [pc, #196]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80197c8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80197ca:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d003      	beq.n	80197da <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80197d2:	4b2e      	ldr	r3, [pc, #184]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80197d4:	22f2      	movs	r2, #242	@ 0xf2
 80197d6:	75da      	strb	r2, [r3, #23]
 80197d8:	e002      	b.n	80197e0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80197da:	4b2c      	ldr	r3, [pc, #176]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80197dc:	2201      	movs	r2, #1
 80197de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80197e0:	4b2a      	ldr	r3, [pc, #168]	@ (801988c <RadioSetRxConfig+0x2fc>)
 80197e2:	2201      	movs	r2, #1
 80197e4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80197e6:	f000 fc68 	bl	801a0ba <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80197ea:	2000      	movs	r0, #0
 80197ec:	f7ff fdfc 	bl	80193e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197f0:	4828      	ldr	r0, [pc, #160]	@ (8019894 <RadioSetRxConfig+0x304>)
 80197f2:	f002 fa59 	bl	801bca8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197f6:	4828      	ldr	r0, [pc, #160]	@ (8019898 <RadioSetRxConfig+0x308>)
 80197f8:	f002 fb28 	bl	801be4c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80197fc:	4a28      	ldr	r2, [pc, #160]	@ (80198a0 <RadioSetRxConfig+0x310>)
 80197fe:	f107 0314 	add.w	r3, r7, #20
 8019802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019806:	e883 0003 	stmia.w	r3, {r0, r1}
 801980a:	f107 0314 	add.w	r3, r7, #20
 801980e:	4618      	mov	r0, r3
 8019810:	f001 fde5 	bl	801b3de <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019814:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8019818:	f001 fe30 	bl	801b47c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801981c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801981e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019822:	fb02 f303 	mul.w	r3, r2, r3
 8019826:	461a      	mov	r2, r3
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	fbb2 f3f3 	udiv	r3, r2, r3
 801982e:	4a17      	ldr	r2, [pc, #92]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019830:	6093      	str	r3, [r2, #8]
            break;
 8019832:	e0ad      	b.n	8019990 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019834:	2000      	movs	r0, #0
 8019836:	f001 ff99 	bl	801b76c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801983a:	4b14      	ldr	r3, [pc, #80]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801983c:	2201      	movs	r2, #1
 801983e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	b2da      	uxtb	r2, r3
 8019846:	4b11      	ldr	r3, [pc, #68]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801984c:	4a15      	ldr	r2, [pc, #84]	@ (80198a4 <RadioSetRxConfig+0x314>)
 801984e:	68bb      	ldr	r3, [r7, #8]
 8019850:	4413      	add	r3, r2
 8019852:	781a      	ldrb	r2, [r3, #0]
 8019854:	4b0d      	ldr	r3, [pc, #52]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801985a:	4a0c      	ldr	r2, [pc, #48]	@ (801988c <RadioSetRxConfig+0x2fc>)
 801985c:	7bbb      	ldrb	r3, [r7, #14]
 801985e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d105      	bne.n	8019874 <RadioSetRxConfig+0x2e4>
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	2b0b      	cmp	r3, #11
 801986c:	d008      	beq.n	8019880 <RadioSetRxConfig+0x2f0>
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	2b0c      	cmp	r3, #12
 8019872:	d005      	beq.n	8019880 <RadioSetRxConfig+0x2f0>
 8019874:	68bb      	ldr	r3, [r7, #8]
 8019876:	2b01      	cmp	r3, #1
 8019878:	d116      	bne.n	80198a8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	2b0c      	cmp	r3, #12
 801987e:	d113      	bne.n	80198a8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019880:	4b02      	ldr	r3, [pc, #8]	@ (801988c <RadioSetRxConfig+0x2fc>)
 8019882:	2201      	movs	r2, #1
 8019884:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8019888:	e012      	b.n	80198b0 <RadioSetRxConfig+0x320>
 801988a:	bf00      	nop
 801988c:	20001bfc 	.word	0x20001bfc
 8019890:	20000134 	.word	0x20000134
 8019894:	20001c34 	.word	0x20001c34
 8019898:	20001c0a 	.word	0x20001c0a
 801989c:	0801f93c 	.word	0x0801f93c
 80198a0:	0801f944 	.word	0x0801f944
 80198a4:	0801ffac 	.word	0x0801ffac
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80198a8:	4b3b      	ldr	r3, [pc, #236]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198aa:	2200      	movs	r2, #0
 80198ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80198b0:	4b39      	ldr	r3, [pc, #228]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198b2:	2201      	movs	r2, #1
 80198b4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80198b6:	4b38      	ldr	r3, [pc, #224]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80198bc:	2b05      	cmp	r3, #5
 80198be:	d004      	beq.n	80198ca <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80198c0:	4b35      	ldr	r3, [pc, #212]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80198c6:	2b06      	cmp	r3, #6
 80198c8:	d10a      	bne.n	80198e0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80198ca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80198cc:	2b0b      	cmp	r3, #11
 80198ce:	d803      	bhi.n	80198d8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80198d0:	4b31      	ldr	r3, [pc, #196]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198d2:	220c      	movs	r2, #12
 80198d4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80198d6:	e006      	b.n	80198e6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80198d8:	4a2f      	ldr	r2, [pc, #188]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198da:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80198dc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80198de:	e002      	b.n	80198e6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80198e0:	4a2d      	ldr	r2, [pc, #180]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80198e4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80198e6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80198ea:	4b2b      	ldr	r3, [pc, #172]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198ec:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80198ee:	4b2b      	ldr	r3, [pc, #172]	@ (801999c <RadioSetRxConfig+0x40c>)
 80198f0:	781a      	ldrb	r2, [r3, #0]
 80198f2:	4b29      	ldr	r3, [pc, #164]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198f4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80198f6:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80198fa:	4b27      	ldr	r3, [pc, #156]	@ (8019998 <RadioSetRxConfig+0x408>)
 80198fc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019900:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8019904:	4b24      	ldr	r3, [pc, #144]	@ (8019998 <RadioSetRxConfig+0x408>)
 8019906:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801990a:	f000 fbd6 	bl	801a0ba <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801990e:	2001      	movs	r0, #1
 8019910:	f7ff fd6a 	bl	80193e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019914:	4822      	ldr	r0, [pc, #136]	@ (80199a0 <RadioSetRxConfig+0x410>)
 8019916:	f002 f9c7 	bl	801bca8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801991a:	4822      	ldr	r0, [pc, #136]	@ (80199a4 <RadioSetRxConfig+0x414>)
 801991c:	f002 fa96 	bl	801be4c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019920:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019922:	b2db      	uxtb	r3, r3
 8019924:	4618      	mov	r0, r3
 8019926:	f001 ff30 	bl	801b78a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801992a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801992e:	f002 fbf7 	bl	801c120 <SUBGRF_ReadRegister>
 8019932:	4603      	mov	r3, r0
 8019934:	f003 0301 	and.w	r3, r3, #1
 8019938:	b2db      	uxtb	r3, r3
 801993a:	4619      	mov	r1, r3
 801993c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8019940:	f002 fbcc 	bl	801c0dc <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019944:	4b14      	ldr	r3, [pc, #80]	@ (8019998 <RadioSetRxConfig+0x408>)
 8019946:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801994a:	2b01      	cmp	r3, #1
 801994c:	d10d      	bne.n	801996a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801994e:	f240 7036 	movw	r0, #1846	@ 0x736
 8019952:	f002 fbe5 	bl	801c120 <SUBGRF_ReadRegister>
 8019956:	4603      	mov	r3, r0
 8019958:	f023 0304 	bic.w	r3, r3, #4
 801995c:	b2db      	uxtb	r3, r3
 801995e:	4619      	mov	r1, r3
 8019960:	f240 7036 	movw	r0, #1846	@ 0x736
 8019964:	f002 fbba 	bl	801c0dc <SUBGRF_WriteRegister>
 8019968:	e00c      	b.n	8019984 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801996a:	f240 7036 	movw	r0, #1846	@ 0x736
 801996e:	f002 fbd7 	bl	801c120 <SUBGRF_ReadRegister>
 8019972:	4603      	mov	r3, r0
 8019974:	f043 0304 	orr.w	r3, r3, #4
 8019978:	b2db      	uxtb	r3, r3
 801997a:	4619      	mov	r1, r3
 801997c:	f240 7036 	movw	r0, #1846	@ 0x736
 8019980:	f002 fbac 	bl	801c0dc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8019984:	4b04      	ldr	r3, [pc, #16]	@ (8019998 <RadioSetRxConfig+0x408>)
 8019986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801998a:	609a      	str	r2, [r3, #8]
            break;
 801998c:	e000      	b.n	8019990 <RadioSetRxConfig+0x400>
            break;
 801998e:	bf00      	nop
    }
}
 8019990:	bf00      	nop
 8019992:	3728      	adds	r7, #40	@ 0x28
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}
 8019998:	20001bfc 	.word	0x20001bfc
 801999c:	20000134 	.word	0x20000134
 80199a0:	20001c34 	.word	0x20001c34
 80199a4:	20001c0a 	.word	0x20001c0a

080199a8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b086      	sub	sp, #24
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	60ba      	str	r2, [r7, #8]
 80199b0:	607b      	str	r3, [r7, #4]
 80199b2:	4603      	mov	r3, r0
 80199b4:	73fb      	strb	r3, [r7, #15]
 80199b6:	460b      	mov	r3, r1
 80199b8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80199ba:	f002 fe90 	bl	801c6de <RFW_DeInit>
    switch( modem )
 80199be:	7bfb      	ldrb	r3, [r7, #15]
 80199c0:	2b04      	cmp	r3, #4
 80199c2:	f000 80c7 	beq.w	8019b54 <RadioSetTxConfig+0x1ac>
 80199c6:	2b04      	cmp	r3, #4
 80199c8:	f300 80d6 	bgt.w	8019b78 <RadioSetTxConfig+0x1d0>
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d002      	beq.n	80199d6 <RadioSetTxConfig+0x2e>
 80199d0:	2b01      	cmp	r3, #1
 80199d2:	d059      	beq.n	8019a88 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80199d4:	e0d0      	b.n	8019b78 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80199d6:	4b77      	ldr	r3, [pc, #476]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 80199d8:	2200      	movs	r2, #0
 80199da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80199de:	4a75      	ldr	r2, [pc, #468]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 80199e0:	6a3b      	ldr	r3, [r7, #32]
 80199e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80199e4:	4b73      	ldr	r3, [pc, #460]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 80199e6:	220b      	movs	r2, #11
 80199e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80199ec:	6878      	ldr	r0, [r7, #4]
 80199ee:	f002 fda9 	bl	801c544 <SUBGRF_GetFskBandwidthRegValue>
 80199f2:	4603      	mov	r3, r0
 80199f4:	461a      	mov	r2, r3
 80199f6:	4b6f      	ldr	r3, [pc, #444]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 80199f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80199fc:	4a6d      	ldr	r2, [pc, #436]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 80199fe:	68bb      	ldr	r3, [r7, #8]
 8019a00:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019a02:	4b6c      	ldr	r3, [pc, #432]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a04:	2200      	movs	r2, #0
 8019a06:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019a08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019a0a:	00db      	lsls	r3, r3, #3
 8019a0c:	b29a      	uxth	r2, r3
 8019a0e:	4b69      	ldr	r3, [pc, #420]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a10:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019a12:	4b68      	ldr	r3, [pc, #416]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a14:	2204      	movs	r2, #4
 8019a16:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019a18:	4b66      	ldr	r3, [pc, #408]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a1a:	2218      	movs	r2, #24
 8019a1c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019a1e:	4b65      	ldr	r3, [pc, #404]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a20:	2200      	movs	r2, #0
 8019a22:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019a24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019a28:	f083 0301 	eor.w	r3, r3, #1
 8019a2c:	b2db      	uxtb	r3, r3
 8019a2e:	461a      	mov	r2, r3
 8019a30:	4b60      	ldr	r3, [pc, #384]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a32:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019a34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d003      	beq.n	8019a44 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a3e:	22f2      	movs	r2, #242	@ 0xf2
 8019a40:	75da      	strb	r2, [r3, #23]
 8019a42:	e002      	b.n	8019a4a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019a44:	4b5b      	ldr	r3, [pc, #364]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a46:	2201      	movs	r2, #1
 8019a48:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a4c:	2201      	movs	r2, #1
 8019a4e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019a50:	f000 fb33 	bl	801a0ba <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8019a54:	2000      	movs	r0, #0
 8019a56:	f7ff fcc7 	bl	80193e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019a5a:	4857      	ldr	r0, [pc, #348]	@ (8019bb8 <RadioSetTxConfig+0x210>)
 8019a5c:	f002 f924 	bl	801bca8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019a60:	4856      	ldr	r0, [pc, #344]	@ (8019bbc <RadioSetTxConfig+0x214>)
 8019a62:	f002 f9f3 	bl	801be4c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019a66:	4a56      	ldr	r2, [pc, #344]	@ (8019bc0 <RadioSetTxConfig+0x218>)
 8019a68:	f107 0310 	add.w	r3, r7, #16
 8019a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019a70:	e883 0003 	stmia.w	r3, {r0, r1}
 8019a74:	f107 0310 	add.w	r3, r7, #16
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f001 fcb0 	bl	801b3de <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019a7e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8019a82:	f001 fcfb 	bl	801b47c <SUBGRF_SetWhiteningSeed>
            break;
 8019a86:	e078      	b.n	8019b7a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019a88:	4b4a      	ldr	r3, [pc, #296]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a8a:	2201      	movs	r2, #1
 8019a8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8019a90:	6a3b      	ldr	r3, [r7, #32]
 8019a92:	b2da      	uxtb	r2, r3
 8019a94:	4b47      	ldr	r3, [pc, #284]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8019a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8019bc4 <RadioSetTxConfig+0x21c>)
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	4413      	add	r3, r2
 8019aa0:	781a      	ldrb	r2, [r3, #0]
 8019aa2:	4b44      	ldr	r3, [pc, #272]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019aa8:	4a42      	ldr	r2, [pc, #264]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019aaa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019aae:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d105      	bne.n	8019ac4 <RadioSetTxConfig+0x11c>
 8019ab8:	6a3b      	ldr	r3, [r7, #32]
 8019aba:	2b0b      	cmp	r3, #11
 8019abc:	d008      	beq.n	8019ad0 <RadioSetTxConfig+0x128>
 8019abe:	6a3b      	ldr	r3, [r7, #32]
 8019ac0:	2b0c      	cmp	r3, #12
 8019ac2:	d005      	beq.n	8019ad0 <RadioSetTxConfig+0x128>
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	2b01      	cmp	r3, #1
 8019ac8:	d107      	bne.n	8019ada <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019aca:	6a3b      	ldr	r3, [r7, #32]
 8019acc:	2b0c      	cmp	r3, #12
 8019ace:	d104      	bne.n	8019ada <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019ad0:	4b38      	ldr	r3, [pc, #224]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019ad2:	2201      	movs	r2, #1
 8019ad4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8019ad8:	e003      	b.n	8019ae2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019ada:	4b36      	ldr	r3, [pc, #216]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019adc:	2200      	movs	r2, #0
 8019ade:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019ae2:	4b34      	ldr	r3, [pc, #208]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019ae4:	2201      	movs	r2, #1
 8019ae6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019ae8:	4b32      	ldr	r3, [pc, #200]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019aea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8019aee:	2b05      	cmp	r3, #5
 8019af0:	d004      	beq.n	8019afc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019af2:	4b30      	ldr	r3, [pc, #192]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019af4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019af8:	2b06      	cmp	r3, #6
 8019afa:	d10a      	bne.n	8019b12 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8019afc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019afe:	2b0b      	cmp	r3, #11
 8019b00:	d803      	bhi.n	8019b0a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019b02:	4b2c      	ldr	r3, [pc, #176]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b04:	220c      	movs	r2, #12
 8019b06:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019b08:	e006      	b.n	8019b18 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019b0e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019b10:	e002      	b.n	8019b18 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019b12:	4a28      	ldr	r2, [pc, #160]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019b16:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019b18:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019b1c:	4b25      	ldr	r3, [pc, #148]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b1e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019b20:	4b29      	ldr	r3, [pc, #164]	@ (8019bc8 <RadioSetTxConfig+0x220>)
 8019b22:	781a      	ldrb	r2, [r3, #0]
 8019b24:	4b23      	ldr	r3, [pc, #140]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b26:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019b28:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8019b2c:	4b21      	ldr	r3, [pc, #132]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b2e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019b32:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8019b36:	4b1f      	ldr	r3, [pc, #124]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8019b3c:	f000 fabd 	bl	801a0ba <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019b40:	2001      	movs	r0, #1
 8019b42:	f7ff fc51 	bl	80193e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019b46:	481c      	ldr	r0, [pc, #112]	@ (8019bb8 <RadioSetTxConfig+0x210>)
 8019b48:	f002 f8ae 	bl	801bca8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019b4c:	481b      	ldr	r0, [pc, #108]	@ (8019bbc <RadioSetTxConfig+0x214>)
 8019b4e:	f002 f97d 	bl	801be4c <SUBGRF_SetPacketParams>
            break;
 8019b52:	e012      	b.n	8019b7a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8019b54:	2004      	movs	r0, #4
 8019b56:	f7ff fc47 	bl	80193e8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019b5a:	4b16      	ldr	r3, [pc, #88]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b5c:	2202      	movs	r2, #2
 8019b5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8019b62:	4a14      	ldr	r2, [pc, #80]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b64:	6a3b      	ldr	r3, [r7, #32]
 8019b66:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019b68:	4b12      	ldr	r3, [pc, #72]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b6a:	2216      	movs	r2, #22
 8019b6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019b70:	4811      	ldr	r0, [pc, #68]	@ (8019bb8 <RadioSetTxConfig+0x210>)
 8019b72:	f002 f899 	bl	801bca8 <SUBGRF_SetModulationParams>
            break;
 8019b76:	e000      	b.n	8019b7a <RadioSetTxConfig+0x1d2>
            break;
 8019b78:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f002 fbe2 	bl	801c348 <SUBGRF_SetRfTxPower>
 8019b84:	4603      	mov	r3, r0
 8019b86:	461a      	mov	r2, r3
 8019b88:	4b0a      	ldr	r3, [pc, #40]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b8a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019b8e:	210e      	movs	r1, #14
 8019b90:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019b94:	f002 faa2 	bl	801c0dc <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019b98:	4b06      	ldr	r3, [pc, #24]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019b9a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f002 fdb1 	bl	801c706 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019ba4:	4a03      	ldr	r2, [pc, #12]	@ (8019bb4 <RadioSetTxConfig+0x20c>)
 8019ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ba8:	6053      	str	r3, [r2, #4]
}
 8019baa:	bf00      	nop
 8019bac:	3718      	adds	r7, #24
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}
 8019bb2:	bf00      	nop
 8019bb4:	20001bfc 	.word	0x20001bfc
 8019bb8:	20001c34 	.word	0x20001c34
 8019bbc:	20001c0a 	.word	0x20001c0a
 8019bc0:	0801f944 	.word	0x0801f944
 8019bc4:	0801ffac 	.word	0x0801ffac
 8019bc8:	20000134 	.word	0x20000134

08019bcc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019bcc:	b480      	push	{r7}
 8019bce:	b083      	sub	sp, #12
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	6078      	str	r0, [r7, #4]
    return true;
 8019bd4:	2301      	movs	r3, #1
}
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	370c      	adds	r7, #12
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	bc80      	pop	{r7}
 8019bde:	4770      	bx	lr

08019be0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019be0:	b480      	push	{r7}
 8019be2:	b085      	sub	sp, #20
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	4603      	mov	r3, r0
 8019be8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019bea:	2300      	movs	r3, #0
 8019bec:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8019bee:	79fb      	ldrb	r3, [r7, #7]
 8019bf0:	2b0a      	cmp	r3, #10
 8019bf2:	d83e      	bhi.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
 8019bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8019bfc <RadioGetLoRaBandwidthInHz+0x1c>)
 8019bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bfa:	bf00      	nop
 8019bfc:	08019c29 	.word	0x08019c29
 8019c00:	08019c39 	.word	0x08019c39
 8019c04:	08019c49 	.word	0x08019c49
 8019c08:	08019c59 	.word	0x08019c59
 8019c0c:	08019c61 	.word	0x08019c61
 8019c10:	08019c67 	.word	0x08019c67
 8019c14:	08019c6d 	.word	0x08019c6d
 8019c18:	08019c73 	.word	0x08019c73
 8019c1c:	08019c31 	.word	0x08019c31
 8019c20:	08019c41 	.word	0x08019c41
 8019c24:	08019c51 	.word	0x08019c51
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019c28:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8019c2c:	60fb      	str	r3, [r7, #12]
        break;
 8019c2e:	e020      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019c30:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8019c34:	60fb      	str	r3, [r7, #12]
        break;
 8019c36:	e01c      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019c38:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8019c3c:	60fb      	str	r3, [r7, #12]
        break;
 8019c3e:	e018      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019c40:	f245 1361 	movw	r3, #20833	@ 0x5161
 8019c44:	60fb      	str	r3, [r7, #12]
        break;
 8019c46:	e014      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019c48:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8019c4c:	60fb      	str	r3, [r7, #12]
        break;
 8019c4e:	e010      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019c50:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8019c54:	60fb      	str	r3, [r7, #12]
        break;
 8019c56:	e00c      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019c58:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8019c5c:	60fb      	str	r3, [r7, #12]
        break;
 8019c5e:	e008      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019c60:	4b07      	ldr	r3, [pc, #28]	@ (8019c80 <RadioGetLoRaBandwidthInHz+0xa0>)
 8019c62:	60fb      	str	r3, [r7, #12]
        break;
 8019c64:	e005      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8019c66:	4b07      	ldr	r3, [pc, #28]	@ (8019c84 <RadioGetLoRaBandwidthInHz+0xa4>)
 8019c68:	60fb      	str	r3, [r7, #12]
        break;
 8019c6a:	e002      	b.n	8019c72 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019c6c:	4b06      	ldr	r3, [pc, #24]	@ (8019c88 <RadioGetLoRaBandwidthInHz+0xa8>)
 8019c6e:	60fb      	str	r3, [r7, #12]
        break;
 8019c70:	bf00      	nop
    }

    return bandwidthInHz;
 8019c72:	68fb      	ldr	r3, [r7, #12]
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	3714      	adds	r7, #20
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bc80      	pop	{r7}
 8019c7c:	4770      	bx	lr
 8019c7e:	bf00      	nop
 8019c80:	0001e848 	.word	0x0001e848
 8019c84:	0003d090 	.word	0x0003d090
 8019c88:	0007a120 	.word	0x0007a120

08019c8c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019c8c:	b480      	push	{r7}
 8019c8e:	b083      	sub	sp, #12
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
 8019c94:	4608      	mov	r0, r1
 8019c96:	4611      	mov	r1, r2
 8019c98:	461a      	mov	r2, r3
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	70fb      	strb	r3, [r7, #3]
 8019c9e:	460b      	mov	r3, r1
 8019ca0:	803b      	strh	r3, [r7, #0]
 8019ca2:	4613      	mov	r3, r2
 8019ca4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8019ca6:	883b      	ldrh	r3, [r7, #0]
 8019ca8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019caa:	78ba      	ldrb	r2, [r7, #2]
 8019cac:	f082 0201 	eor.w	r2, r2, #1
 8019cb0:	b2d2      	uxtb	r2, r2
 8019cb2:	2a00      	cmp	r2, #0
 8019cb4:	d001      	beq.n	8019cba <RadioGetGfskTimeOnAirNumerator+0x2e>
 8019cb6:	2208      	movs	r2, #8
 8019cb8:	e000      	b.n	8019cbc <RadioGetGfskTimeOnAirNumerator+0x30>
 8019cba:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019cbc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019cbe:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019cc2:	7c3b      	ldrb	r3, [r7, #16]
 8019cc4:	7d39      	ldrb	r1, [r7, #20]
 8019cc6:	2900      	cmp	r1, #0
 8019cc8:	d001      	beq.n	8019cce <RadioGetGfskTimeOnAirNumerator+0x42>
 8019cca:	2102      	movs	r1, #2
 8019ccc:	e000      	b.n	8019cd0 <RadioGetGfskTimeOnAirNumerator+0x44>
 8019cce:	2100      	movs	r1, #0
 8019cd0:	440b      	add	r3, r1
 8019cd2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019cd4:	4413      	add	r3, r2
}
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	370c      	adds	r7, #12
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bc80      	pop	{r7}
 8019cde:	4770      	bx	lr

08019ce0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019ce0:	b480      	push	{r7}
 8019ce2:	b08b      	sub	sp, #44	@ 0x2c
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	60b9      	str	r1, [r7, #8]
 8019cea:	4611      	mov	r1, r2
 8019cec:	461a      	mov	r2, r3
 8019cee:	460b      	mov	r3, r1
 8019cf0:	71fb      	strb	r3, [r7, #7]
 8019cf2:	4613      	mov	r3, r2
 8019cf4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019cf6:	79fb      	ldrb	r3, [r7, #7]
 8019cf8:	3304      	adds	r3, #4
 8019cfa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019d02:	68bb      	ldr	r3, [r7, #8]
 8019d04:	2b05      	cmp	r3, #5
 8019d06:	d002      	beq.n	8019d0e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019d08:	68bb      	ldr	r3, [r7, #8]
 8019d0a:	2b06      	cmp	r3, #6
 8019d0c:	d104      	bne.n	8019d18 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019d0e:	88bb      	ldrh	r3, [r7, #4]
 8019d10:	2b0b      	cmp	r3, #11
 8019d12:	d801      	bhi.n	8019d18 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019d14:	230c      	movs	r3, #12
 8019d16:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d105      	bne.n	8019d2a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019d1e:	68bb      	ldr	r3, [r7, #8]
 8019d20:	2b0b      	cmp	r3, #11
 8019d22:	d008      	beq.n	8019d36 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019d24:	68bb      	ldr	r3, [r7, #8]
 8019d26:	2b0c      	cmp	r3, #12
 8019d28:	d005      	beq.n	8019d36 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	2b01      	cmp	r3, #1
 8019d2e:	d105      	bne.n	8019d3c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019d30:	68bb      	ldr	r3, [r7, #8]
 8019d32:	2b0c      	cmp	r3, #12
 8019d34:	d102      	bne.n	8019d3c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019d36:	2301      	movs	r3, #1
 8019d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019d3c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8019d40:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019d42:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019d46:	2a00      	cmp	r2, #0
 8019d48:	d001      	beq.n	8019d4e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019d4a:	2210      	movs	r2, #16
 8019d4c:	e000      	b.n	8019d50 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019d4e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019d50:	4413      	add	r3, r2
 8019d52:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019d54:	68bb      	ldr	r3, [r7, #8]
 8019d56:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019d58:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019d5a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8019d5e:	2a00      	cmp	r2, #0
 8019d60:	d001      	beq.n	8019d66 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019d62:	2200      	movs	r2, #0
 8019d64:	e000      	b.n	8019d68 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019d66:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019d68:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019d6a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019d6c:	68bb      	ldr	r3, [r7, #8]
 8019d6e:	2b06      	cmp	r3, #6
 8019d70:	d803      	bhi.n	8019d7a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019d72:	68bb      	ldr	r3, [r7, #8]
 8019d74:	009b      	lsls	r3, r3, #2
 8019d76:	623b      	str	r3, [r7, #32]
 8019d78:	e00e      	b.n	8019d98 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019d7a:	69fb      	ldr	r3, [r7, #28]
 8019d7c:	3308      	adds	r3, #8
 8019d7e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d004      	beq.n	8019d92 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019d88:	68bb      	ldr	r3, [r7, #8]
 8019d8a:	3b02      	subs	r3, #2
 8019d8c:	009b      	lsls	r3, r3, #2
 8019d8e:	623b      	str	r3, [r7, #32]
 8019d90:	e002      	b.n	8019d98 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019d92:	68bb      	ldr	r3, [r7, #8]
 8019d94:	009b      	lsls	r3, r3, #2
 8019d96:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019d98:	69fb      	ldr	r3, [r7, #28]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	da01      	bge.n	8019da2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019d9e:	2300      	movs	r3, #0
 8019da0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019da2:	69fa      	ldr	r2, [r7, #28]
 8019da4:	6a3b      	ldr	r3, [r7, #32]
 8019da6:	4413      	add	r3, r2
 8019da8:	1e5a      	subs	r2, r3, #1
 8019daa:	6a3b      	ldr	r3, [r7, #32]
 8019dac:	fb92 f3f3 	sdiv	r3, r2, r3
 8019db0:	697a      	ldr	r2, [r7, #20]
 8019db2:	fb03 f202 	mul.w	r2, r3, r2
 8019db6:	88bb      	ldrh	r3, [r7, #4]
 8019db8:	4413      	add	r3, r2
    int32_t intermediate =
 8019dba:	330c      	adds	r3, #12
 8019dbc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019dbe:	68bb      	ldr	r3, [r7, #8]
 8019dc0:	2b06      	cmp	r3, #6
 8019dc2:	d802      	bhi.n	8019dca <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019dc4:	69bb      	ldr	r3, [r7, #24]
 8019dc6:	3302      	adds	r3, #2
 8019dc8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019dca:	69bb      	ldr	r3, [r7, #24]
 8019dcc:	009b      	lsls	r3, r3, #2
 8019dce:	1c5a      	adds	r2, r3, #1
 8019dd0:	68bb      	ldr	r3, [r7, #8]
 8019dd2:	3b02      	subs	r3, #2
 8019dd4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019dd8:	4618      	mov	r0, r3
 8019dda:	372c      	adds	r7, #44	@ 0x2c
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bc80      	pop	{r7}
 8019de0:	4770      	bx	lr
	...

08019de4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b08a      	sub	sp, #40	@ 0x28
 8019de8:	af04      	add	r7, sp, #16
 8019dea:	60b9      	str	r1, [r7, #8]
 8019dec:	607a      	str	r2, [r7, #4]
 8019dee:	461a      	mov	r2, r3
 8019df0:	4603      	mov	r3, r0
 8019df2:	73fb      	strb	r3, [r7, #15]
 8019df4:	4613      	mov	r3, r2
 8019df6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019df8:	2300      	movs	r3, #0
 8019dfa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019dfc:	2301      	movs	r3, #1
 8019dfe:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019e00:	7bfb      	ldrb	r3, [r7, #15]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d002      	beq.n	8019e0c <RadioTimeOnAir+0x28>
 8019e06:	2b01      	cmp	r3, #1
 8019e08:	d017      	beq.n	8019e3a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019e0a:	e035      	b.n	8019e78 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019e0c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8019e10:	8c3a      	ldrh	r2, [r7, #32]
 8019e12:	7bb9      	ldrb	r1, [r7, #14]
 8019e14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019e18:	9301      	str	r3, [sp, #4]
 8019e1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019e1e:	9300      	str	r3, [sp, #0]
 8019e20:	4603      	mov	r3, r0
 8019e22:	6878      	ldr	r0, [r7, #4]
 8019e24:	f7ff ff32 	bl	8019c8c <RadioGetGfskTimeOnAirNumerator>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019e2e:	fb02 f303 	mul.w	r3, r2, r3
 8019e32:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	613b      	str	r3, [r7, #16]
        break;
 8019e38:	e01e      	b.n	8019e78 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019e3a:	8c39      	ldrh	r1, [r7, #32]
 8019e3c:	7bba      	ldrb	r2, [r7, #14]
 8019e3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019e42:	9302      	str	r3, [sp, #8]
 8019e44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019e48:	9301      	str	r3, [sp, #4]
 8019e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019e4e:	9300      	str	r3, [sp, #0]
 8019e50:	460b      	mov	r3, r1
 8019e52:	6879      	ldr	r1, [r7, #4]
 8019e54:	68b8      	ldr	r0, [r7, #8]
 8019e56:	f7ff ff43 	bl	8019ce0 <RadioGetLoRaTimeOnAirNumerator>
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019e60:	fb02 f303 	mul.w	r3, r2, r3
 8019e64:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019e66:	4a0a      	ldr	r2, [pc, #40]	@ (8019e90 <RadioTimeOnAir+0xac>)
 8019e68:	68bb      	ldr	r3, [r7, #8]
 8019e6a:	4413      	add	r3, r2
 8019e6c:	781b      	ldrb	r3, [r3, #0]
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f7ff feb6 	bl	8019be0 <RadioGetLoRaBandwidthInHz>
 8019e74:	6138      	str	r0, [r7, #16]
        break;
 8019e76:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019e78:	697a      	ldr	r2, [r7, #20]
 8019e7a:	693b      	ldr	r3, [r7, #16]
 8019e7c:	4413      	add	r3, r2
 8019e7e:	1e5a      	subs	r2, r3, #1
 8019e80:	693b      	ldr	r3, [r7, #16]
 8019e82:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019e86:	4618      	mov	r0, r3
 8019e88:	3718      	adds	r7, #24
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bd80      	pop	{r7, pc}
 8019e8e:	bf00      	nop
 8019e90:	0801ffac 	.word	0x0801ffac

08019e94 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b084      	sub	sp, #16
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
 8019e9c:	460b      	mov	r3, r1
 8019e9e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	f240 2101 	movw	r1, #513	@ 0x201
 8019ea8:	f240 2001 	movw	r0, #513	@ 0x201
 8019eac:	f001 fd66 	bl	801b97c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019eb0:	4b73      	ldr	r3, [pc, #460]	@ (801a080 <RadioSend+0x1ec>)
 8019eb2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019eb6:	2101      	movs	r1, #1
 8019eb8:	4618      	mov	r0, r3
 8019eba:	f002 fa1d 	bl	801c2f8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8019ebe:	4b70      	ldr	r3, [pc, #448]	@ (801a080 <RadioSend+0x1ec>)
 8019ec0:	781b      	ldrb	r3, [r3, #0]
 8019ec2:	2b01      	cmp	r3, #1
 8019ec4:	d112      	bne.n	8019eec <RadioSend+0x58>
 8019ec6:	4b6e      	ldr	r3, [pc, #440]	@ (801a080 <RadioSend+0x1ec>)
 8019ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019ecc:	2b06      	cmp	r3, #6
 8019ece:	d10d      	bne.n	8019eec <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019ed0:	f640 0089 	movw	r0, #2185	@ 0x889
 8019ed4:	f002 f924 	bl	801c120 <SUBGRF_ReadRegister>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	f023 0304 	bic.w	r3, r3, #4
 8019ede:	b2db      	uxtb	r3, r3
 8019ee0:	4619      	mov	r1, r3
 8019ee2:	f640 0089 	movw	r0, #2185	@ 0x889
 8019ee6:	f002 f8f9 	bl	801c0dc <SUBGRF_WriteRegister>
 8019eea:	e00c      	b.n	8019f06 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019eec:	f640 0089 	movw	r0, #2185	@ 0x889
 8019ef0:	f002 f916 	bl	801c120 <SUBGRF_ReadRegister>
 8019ef4:	4603      	mov	r3, r0
 8019ef6:	f043 0304 	orr.w	r3, r3, #4
 8019efa:	b2db      	uxtb	r3, r3
 8019efc:	4619      	mov	r1, r3
 8019efe:	f640 0089 	movw	r0, #2185	@ 0x889
 8019f02:	f002 f8eb 	bl	801c0dc <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019f06:	4b5e      	ldr	r3, [pc, #376]	@ (801a080 <RadioSend+0x1ec>)
 8019f08:	781b      	ldrb	r3, [r3, #0]
 8019f0a:	2b04      	cmp	r3, #4
 8019f0c:	f200 80a8 	bhi.w	801a060 <RadioSend+0x1cc>
 8019f10:	a201      	add	r2, pc, #4	@ (adr r2, 8019f18 <RadioSend+0x84>)
 8019f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f16:	bf00      	nop
 8019f18:	08019f47 	.word	0x08019f47
 8019f1c:	08019f2d 	.word	0x08019f2d
 8019f20:	08019f47 	.word	0x08019f47
 8019f24:	08019fa9 	.word	0x08019fa9
 8019f28:	08019fc9 	.word	0x08019fc9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019f2c:	4a54      	ldr	r2, [pc, #336]	@ (801a080 <RadioSend+0x1ec>)
 8019f2e:	78fb      	ldrb	r3, [r7, #3]
 8019f30:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f32:	4854      	ldr	r0, [pc, #336]	@ (801a084 <RadioSend+0x1f0>)
 8019f34:	f001 ff8a 	bl	801be4c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019f38:	78fb      	ldrb	r3, [r7, #3]
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	4619      	mov	r1, r3
 8019f3e:	6878      	ldr	r0, [r7, #4]
 8019f40:	f001 fa3a 	bl	801b3b8 <SUBGRF_SendPayload>
            break;
 8019f44:	e08d      	b.n	801a062 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019f46:	f002 fbd0 	bl	801c6ea <RFW_Is_Init>
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	2b01      	cmp	r3, #1
 8019f4e:	d11e      	bne.n	8019f8e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019f50:	f107 020d 	add.w	r2, r7, #13
 8019f54:	78fb      	ldrb	r3, [r7, #3]
 8019f56:	4619      	mov	r1, r3
 8019f58:	6878      	ldr	r0, [r7, #4]
 8019f5a:	f002 fbde 	bl	801c71a <RFW_TransmitInit>
 8019f5e:	4603      	mov	r3, r0
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d10c      	bne.n	8019f7e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019f64:	7b7a      	ldrb	r2, [r7, #13]
 8019f66:	4b46      	ldr	r3, [pc, #280]	@ (801a080 <RadioSend+0x1ec>)
 8019f68:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f6a:	4846      	ldr	r0, [pc, #280]	@ (801a084 <RadioSend+0x1f0>)
 8019f6c:	f001 ff6e 	bl	801be4c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8019f70:	7b7b      	ldrb	r3, [r7, #13]
 8019f72:	2200      	movs	r2, #0
 8019f74:	4619      	mov	r1, r3
 8019f76:	6878      	ldr	r0, [r7, #4]
 8019f78:	f001 fa1e 	bl	801b3b8 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019f7c:	e071      	b.n	801a062 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8019f7e:	4b42      	ldr	r3, [pc, #264]	@ (801a088 <RadioSend+0x1f4>)
 8019f80:	2201      	movs	r2, #1
 8019f82:	2100      	movs	r1, #0
 8019f84:	2002      	movs	r0, #2
 8019f86:	f003 fc81 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8019f8a:	2303      	movs	r3, #3
 8019f8c:	e073      	b.n	801a076 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019f8e:	4a3c      	ldr	r2, [pc, #240]	@ (801a080 <RadioSend+0x1ec>)
 8019f90:	78fb      	ldrb	r3, [r7, #3]
 8019f92:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f94:	483b      	ldr	r0, [pc, #236]	@ (801a084 <RadioSend+0x1f0>)
 8019f96:	f001 ff59 	bl	801be4c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8019f9a:	78fb      	ldrb	r3, [r7, #3]
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	4619      	mov	r1, r3
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	f001 fa09 	bl	801b3b8 <SUBGRF_SendPayload>
            break;
 8019fa6:	e05c      	b.n	801a062 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019fa8:	4b35      	ldr	r3, [pc, #212]	@ (801a080 <RadioSend+0x1ec>)
 8019faa:	2202      	movs	r2, #2
 8019fac:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019fae:	4a34      	ldr	r2, [pc, #208]	@ (801a080 <RadioSend+0x1ec>)
 8019fb0:	78fb      	ldrb	r3, [r7, #3]
 8019fb2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fb4:	4833      	ldr	r0, [pc, #204]	@ (801a084 <RadioSend+0x1f0>)
 8019fb6:	f001 ff49 	bl	801be4c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019fba:	78fb      	ldrb	r3, [r7, #3]
 8019fbc:	2200      	movs	r2, #0
 8019fbe:	4619      	mov	r1, r3
 8019fc0:	6878      	ldr	r0, [r7, #4]
 8019fc2:	f001 f9f9 	bl	801b3b8 <SUBGRF_SendPayload>
            break;
 8019fc6:	e04c      	b.n	801a062 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019fc8:	78fb      	ldrb	r3, [r7, #3]
 8019fca:	461a      	mov	r2, r3
 8019fcc:	6879      	ldr	r1, [r7, #4]
 8019fce:	482f      	ldr	r0, [pc, #188]	@ (801a08c <RadioSend+0x1f8>)
 8019fd0:	f000 fcca 	bl	801a968 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019fd4:	4b2a      	ldr	r3, [pc, #168]	@ (801a080 <RadioSend+0x1ec>)
 8019fd6:	2202      	movs	r2, #2
 8019fd8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019fda:	78fb      	ldrb	r3, [r7, #3]
 8019fdc:	3301      	adds	r3, #1
 8019fde:	b2da      	uxtb	r2, r3
 8019fe0:	4b27      	ldr	r3, [pc, #156]	@ (801a080 <RadioSend+0x1ec>)
 8019fe2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fe4:	4827      	ldr	r0, [pc, #156]	@ (801a084 <RadioSend+0x1f0>)
 8019fe6:	f001 ff31 	bl	801be4c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019fea:	2100      	movs	r1, #0
 8019fec:	20f1      	movs	r0, #241	@ 0xf1
 8019fee:	f000 f965 	bl	801a2bc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019ff2:	2100      	movs	r1, #0
 8019ff4:	20f0      	movs	r0, #240	@ 0xf0
 8019ff6:	f000 f961 	bl	801a2bc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019ffa:	4b21      	ldr	r3, [pc, #132]	@ (801a080 <RadioSend+0x1ec>)
 8019ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019ffe:	2b64      	cmp	r3, #100	@ 0x64
 801a000:	d108      	bne.n	801a014 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801a002:	2170      	movs	r1, #112	@ 0x70
 801a004:	20f3      	movs	r0, #243	@ 0xf3
 801a006:	f000 f959 	bl	801a2bc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801a00a:	211d      	movs	r1, #29
 801a00c:	20f2      	movs	r0, #242	@ 0xf2
 801a00e:	f000 f955 	bl	801a2bc <RadioWrite>
 801a012:	e007      	b.n	801a024 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801a014:	21e1      	movs	r1, #225	@ 0xe1
 801a016:	20f3      	movs	r0, #243	@ 0xf3
 801a018:	f000 f950 	bl	801a2bc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801a01c:	2104      	movs	r1, #4
 801a01e:	20f2      	movs	r0, #242	@ 0xf2
 801a020:	f000 f94c 	bl	801a2bc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801a024:	78fb      	ldrb	r3, [r7, #3]
 801a026:	b29b      	uxth	r3, r3
 801a028:	00db      	lsls	r3, r3, #3
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	3302      	adds	r3, #2
 801a02e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801a030:	89fb      	ldrh	r3, [r7, #14]
 801a032:	0a1b      	lsrs	r3, r3, #8
 801a034:	b29b      	uxth	r3, r3
 801a036:	b2db      	uxtb	r3, r3
 801a038:	4619      	mov	r1, r3
 801a03a:	20f4      	movs	r0, #244	@ 0xf4
 801a03c:	f000 f93e 	bl	801a2bc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801a040:	89fb      	ldrh	r3, [r7, #14]
 801a042:	b2db      	uxtb	r3, r3
 801a044:	4619      	mov	r1, r3
 801a046:	20f5      	movs	r0, #245	@ 0xf5
 801a048:	f000 f938 	bl	801a2bc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801a04c:	78fb      	ldrb	r3, [r7, #3]
 801a04e:	3301      	adds	r3, #1
 801a050:	b2db      	uxtb	r3, r3
 801a052:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 801a056:	4619      	mov	r1, r3
 801a058:	480c      	ldr	r0, [pc, #48]	@ (801a08c <RadioSend+0x1f8>)
 801a05a:	f001 f9ad 	bl	801b3b8 <SUBGRF_SendPayload>
            break;
 801a05e:	e000      	b.n	801a062 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a060:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801a062:	4b07      	ldr	r3, [pc, #28]	@ (801a080 <RadioSend+0x1ec>)
 801a064:	685b      	ldr	r3, [r3, #4]
 801a066:	4619      	mov	r1, r3
 801a068:	4809      	ldr	r0, [pc, #36]	@ (801a090 <RadioSend+0x1fc>)
 801a06a:	f003 fa75 	bl	801d558 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801a06e:	4808      	ldr	r0, [pc, #32]	@ (801a090 <RadioSend+0x1fc>)
 801a070:	f003 f994 	bl	801d39c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801a074:	2300      	movs	r3, #0
}
 801a076:	4618      	mov	r0, r3
 801a078:	3710      	adds	r7, #16
 801a07a:	46bd      	mov	sp, r7
 801a07c:	bd80      	pop	{r7, pc}
 801a07e:	bf00      	nop
 801a080:	20001bfc 	.word	0x20001bfc
 801a084:	20001c0a 	.word	0x20001c0a
 801a088:	0801f94c 	.word	0x0801f94c
 801a08c:	20001af8 	.word	0x20001af8
 801a090:	20001c58 	.word	0x20001c58

0801a094 <RadioSleep>:

static void RadioSleep( void )
{
 801a094:	b580      	push	{r7, lr}
 801a096:	b082      	sub	sp, #8
 801a098:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801a09a:	2300      	movs	r3, #0
 801a09c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801a09e:	793b      	ldrb	r3, [r7, #4]
 801a0a0:	f043 0304 	orr.w	r3, r3, #4
 801a0a4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801a0a6:	7938      	ldrb	r0, [r7, #4]
 801a0a8:	f001 fa62 	bl	801b570 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801a0ac:	2002      	movs	r0, #2
 801a0ae:	f7e9 f8d3 	bl	8003258 <HAL_Delay>
}
 801a0b2:	bf00      	nop
 801a0b4:	3708      	adds	r7, #8
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	bd80      	pop	{r7, pc}

0801a0ba <RadioStandby>:

static void RadioStandby( void )
{
 801a0ba:	b580      	push	{r7, lr}
 801a0bc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801a0be:	2000      	movs	r0, #0
 801a0c0:	f001 fa88 	bl	801b5d4 <SUBGRF_SetStandby>
}
 801a0c4:	bf00      	nop
 801a0c6:	bd80      	pop	{r7, pc}

0801a0c8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b082      	sub	sp, #8
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801a0d0:	f002 fb0b 	bl	801c6ea <RFW_Is_Init>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	2b01      	cmp	r3, #1
 801a0d8:	d102      	bne.n	801a0e0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801a0da:	f002 fb2e 	bl	801c73a <RFW_ReceiveInit>
 801a0de:	e007      	b.n	801a0f0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	2200      	movs	r2, #0
 801a0e4:	f240 2162 	movw	r1, #610	@ 0x262
 801a0e8:	f240 2062 	movw	r0, #610	@ 0x262
 801a0ec:	f001 fc46 	bl	801b97c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d006      	beq.n	801a104 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a0f6:	6879      	ldr	r1, [r7, #4]
 801a0f8:	4811      	ldr	r0, [pc, #68]	@ (801a140 <RadioRx+0x78>)
 801a0fa:	f003 fa2d 	bl	801d558 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a0fe:	4810      	ldr	r0, [pc, #64]	@ (801a140 <RadioRx+0x78>)
 801a100:	f003 f94c 	bl	801d39c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a104:	4b0f      	ldr	r3, [pc, #60]	@ (801a144 <RadioRx+0x7c>)
 801a106:	2200      	movs	r2, #0
 801a108:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a10a:	4b0e      	ldr	r3, [pc, #56]	@ (801a144 <RadioRx+0x7c>)
 801a10c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a110:	2100      	movs	r1, #0
 801a112:	4618      	mov	r0, r3
 801a114:	f002 f8f0 	bl	801c2f8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a118:	4b0a      	ldr	r3, [pc, #40]	@ (801a144 <RadioRx+0x7c>)
 801a11a:	785b      	ldrb	r3, [r3, #1]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d004      	beq.n	801a12a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a120:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801a124:	f001 fa92 	bl	801b64c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801a128:	e005      	b.n	801a136 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801a12a:	4b06      	ldr	r3, [pc, #24]	@ (801a144 <RadioRx+0x7c>)
 801a12c:	689b      	ldr	r3, [r3, #8]
 801a12e:	019b      	lsls	r3, r3, #6
 801a130:	4618      	mov	r0, r3
 801a132:	f001 fa8b 	bl	801b64c <SUBGRF_SetRx>
}
 801a136:	bf00      	nop
 801a138:	3708      	adds	r7, #8
 801a13a:	46bd      	mov	sp, r7
 801a13c:	bd80      	pop	{r7, pc}
 801a13e:	bf00      	nop
 801a140:	20001c70 	.word	0x20001c70
 801a144:	20001bfc 	.word	0x20001bfc

0801a148 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801a148:	b580      	push	{r7, lr}
 801a14a:	b082      	sub	sp, #8
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801a150:	f002 facb 	bl	801c6ea <RFW_Is_Init>
 801a154:	4603      	mov	r3, r0
 801a156:	2b01      	cmp	r3, #1
 801a158:	d102      	bne.n	801a160 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801a15a:	f002 faee 	bl	801c73a <RFW_ReceiveInit>
 801a15e:	e007      	b.n	801a170 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a160:	2300      	movs	r3, #0
 801a162:	2200      	movs	r2, #0
 801a164:	f240 2162 	movw	r1, #610	@ 0x262
 801a168:	f240 2062 	movw	r0, #610	@ 0x262
 801a16c:	f001 fc06 	bl	801b97c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d006      	beq.n	801a184 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a176:	6879      	ldr	r1, [r7, #4]
 801a178:	4811      	ldr	r0, [pc, #68]	@ (801a1c0 <RadioRxBoosted+0x78>)
 801a17a:	f003 f9ed 	bl	801d558 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a17e:	4810      	ldr	r0, [pc, #64]	@ (801a1c0 <RadioRxBoosted+0x78>)
 801a180:	f003 f90c 	bl	801d39c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a184:	4b0f      	ldr	r3, [pc, #60]	@ (801a1c4 <RadioRxBoosted+0x7c>)
 801a186:	2200      	movs	r2, #0
 801a188:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a18a:	4b0e      	ldr	r3, [pc, #56]	@ (801a1c4 <RadioRxBoosted+0x7c>)
 801a18c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a190:	2100      	movs	r1, #0
 801a192:	4618      	mov	r0, r3
 801a194:	f002 f8b0 	bl	801c2f8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a198:	4b0a      	ldr	r3, [pc, #40]	@ (801a1c4 <RadioRxBoosted+0x7c>)
 801a19a:	785b      	ldrb	r3, [r3, #1]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d004      	beq.n	801a1aa <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801a1a0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801a1a4:	f001 fa72 	bl	801b68c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801a1a8:	e005      	b.n	801a1b6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801a1aa:	4b06      	ldr	r3, [pc, #24]	@ (801a1c4 <RadioRxBoosted+0x7c>)
 801a1ac:	689b      	ldr	r3, [r3, #8]
 801a1ae:	019b      	lsls	r3, r3, #6
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f001 fa6b 	bl	801b68c <SUBGRF_SetRxBoosted>
}
 801a1b6:	bf00      	nop
 801a1b8:	3708      	adds	r7, #8
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	bd80      	pop	{r7, pc}
 801a1be:	bf00      	nop
 801a1c0:	20001c70 	.word	0x20001c70
 801a1c4:	20001bfc 	.word	0x20001bfc

0801a1c8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a1c8:	b580      	push	{r7, lr}
 801a1ca:	b082      	sub	sp, #8
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	6078      	str	r0, [r7, #4]
 801a1d0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	005a      	lsls	r2, r3, #1
 801a1d6:	683b      	ldr	r3, [r7, #0]
 801a1d8:	4413      	add	r3, r2
 801a1da:	4a0c      	ldr	r2, [pc, #48]	@ (801a20c <RadioSetRxDutyCycle+0x44>)
 801a1dc:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a1de:	2300      	movs	r3, #0
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a1e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a1ea:	f001 fbc7 	bl	801b97c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a1ee:	4b07      	ldr	r3, [pc, #28]	@ (801a20c <RadioSetRxDutyCycle+0x44>)
 801a1f0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f002 f87e 	bl	801c2f8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801a1fc:	6839      	ldr	r1, [r7, #0]
 801a1fe:	6878      	ldr	r0, [r7, #4]
 801a200:	f001 fa68 	bl	801b6d4 <SUBGRF_SetRxDutyCycle>
}
 801a204:	bf00      	nop
 801a206:	3708      	adds	r7, #8
 801a208:	46bd      	mov	sp, r7
 801a20a:	bd80      	pop	{r7, pc}
 801a20c:	20001bfc 	.word	0x20001bfc

0801a210 <RadioStartCad>:

static void RadioStartCad( void )
{
 801a210:	b580      	push	{r7, lr}
 801a212:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a214:	4b09      	ldr	r3, [pc, #36]	@ (801a23c <RadioStartCad+0x2c>)
 801a216:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a21a:	2100      	movs	r1, #0
 801a21c:	4618      	mov	r0, r3
 801a21e:	f002 f86b 	bl	801c2f8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a222:	2300      	movs	r3, #0
 801a224:	2200      	movs	r2, #0
 801a226:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 801a22a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801a22e:	f001 fba5 	bl	801b97c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a232:	f001 fa7b 	bl	801b72c <SUBGRF_SetCad>
}
 801a236:	bf00      	nop
 801a238:	bd80      	pop	{r7, pc}
 801a23a:	bf00      	nop
 801a23c:	20001bfc 	.word	0x20001bfc

0801a240 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b084      	sub	sp, #16
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
 801a248:	460b      	mov	r3, r1
 801a24a:	70fb      	strb	r3, [r7, #3]
 801a24c:	4613      	mov	r3, r2
 801a24e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801a250:	883b      	ldrh	r3, [r7, #0]
 801a252:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a256:	fb02 f303 	mul.w	r3, r2, r3
 801a25a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801a25c:	6878      	ldr	r0, [r7, #4]
 801a25e:	f001 fbe9 	bl	801ba34 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801a262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a266:	4618      	mov	r0, r3
 801a268:	f002 f86e 	bl	801c348 <SUBGRF_SetRfTxPower>
 801a26c:	4603      	mov	r3, r0
 801a26e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a270:	210e      	movs	r1, #14
 801a272:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a276:	f001 ff31 	bl	801c0dc <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801a27a:	7afb      	ldrb	r3, [r7, #11]
 801a27c:	2101      	movs	r1, #1
 801a27e:	4618      	mov	r0, r3
 801a280:	f002 f83a 	bl	801c2f8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801a284:	f001 fa60 	bl	801b748 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a288:	68f9      	ldr	r1, [r7, #12]
 801a28a:	4805      	ldr	r0, [pc, #20]	@ (801a2a0 <RadioSetTxContinuousWave+0x60>)
 801a28c:	f003 f964 	bl	801d558 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a290:	4803      	ldr	r0, [pc, #12]	@ (801a2a0 <RadioSetTxContinuousWave+0x60>)
 801a292:	f003 f883 	bl	801d39c <UTIL_TIMER_Start>
}
 801a296:	bf00      	nop
 801a298:	3710      	adds	r7, #16
 801a29a:	46bd      	mov	sp, r7
 801a29c:	bd80      	pop	{r7, pc}
 801a29e:	bf00      	nop
 801a2a0:	20001c58 	.word	0x20001c58

0801a2a4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b082      	sub	sp, #8
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a2ae:	f001 fe82 	bl	801bfb6 <SUBGRF_GetRssiInst>
 801a2b2:	4603      	mov	r3, r0
}
 801a2b4:	4618      	mov	r0, r3
 801a2b6:	3708      	adds	r7, #8
 801a2b8:	46bd      	mov	sp, r7
 801a2ba:	bd80      	pop	{r7, pc}

0801a2bc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b082      	sub	sp, #8
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	460a      	mov	r2, r1
 801a2c6:	80fb      	strh	r3, [r7, #6]
 801a2c8:	4613      	mov	r3, r2
 801a2ca:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801a2cc:	797a      	ldrb	r2, [r7, #5]
 801a2ce:	88fb      	ldrh	r3, [r7, #6]
 801a2d0:	4611      	mov	r1, r2
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f001 ff02 	bl	801c0dc <SUBGRF_WriteRegister>
}
 801a2d8:	bf00      	nop
 801a2da:	3708      	adds	r7, #8
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd80      	pop	{r7, pc}

0801a2e0 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b082      	sub	sp, #8
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	4603      	mov	r3, r0
 801a2e8:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801a2ea:	88fb      	ldrh	r3, [r7, #6]
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f001 ff17 	bl	801c120 <SUBGRF_ReadRegister>
 801a2f2:	4603      	mov	r3, r0
}
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	3708      	adds	r7, #8
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}

0801a2fc <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b082      	sub	sp, #8
 801a300:	af00      	add	r7, sp, #0
 801a302:	4603      	mov	r3, r0
 801a304:	6039      	str	r1, [r7, #0]
 801a306:	80fb      	strh	r3, [r7, #6]
 801a308:	4613      	mov	r3, r2
 801a30a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a30c:	797b      	ldrb	r3, [r7, #5]
 801a30e:	b29a      	uxth	r2, r3
 801a310:	88fb      	ldrh	r3, [r7, #6]
 801a312:	6839      	ldr	r1, [r7, #0]
 801a314:	4618      	mov	r0, r3
 801a316:	f001 ff23 	bl	801c160 <SUBGRF_WriteRegisters>
}
 801a31a:	bf00      	nop
 801a31c:	3708      	adds	r7, #8
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}

0801a322 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a322:	b580      	push	{r7, lr}
 801a324:	b082      	sub	sp, #8
 801a326:	af00      	add	r7, sp, #0
 801a328:	4603      	mov	r3, r0
 801a32a:	6039      	str	r1, [r7, #0]
 801a32c:	80fb      	strh	r3, [r7, #6]
 801a32e:	4613      	mov	r3, r2
 801a330:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a332:	797b      	ldrb	r3, [r7, #5]
 801a334:	b29a      	uxth	r2, r3
 801a336:	88fb      	ldrh	r3, [r7, #6]
 801a338:	6839      	ldr	r1, [r7, #0]
 801a33a:	4618      	mov	r0, r3
 801a33c:	f001 ff32 	bl	801c1a4 <SUBGRF_ReadRegisters>
}
 801a340:	bf00      	nop
 801a342:	3708      	adds	r7, #8
 801a344:	46bd      	mov	sp, r7
 801a346:	bd80      	pop	{r7, pc}

0801a348 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a348:	b580      	push	{r7, lr}
 801a34a:	b082      	sub	sp, #8
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	4603      	mov	r3, r0
 801a350:	460a      	mov	r2, r1
 801a352:	71fb      	strb	r3, [r7, #7]
 801a354:	4613      	mov	r3, r2
 801a356:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a358:	79fb      	ldrb	r3, [r7, #7]
 801a35a:	2b01      	cmp	r3, #1
 801a35c:	d10a      	bne.n	801a374 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a35e:	4a0e      	ldr	r2, [pc, #56]	@ (801a398 <RadioSetMaxPayloadLength+0x50>)
 801a360:	79bb      	ldrb	r3, [r7, #6]
 801a362:	7013      	strb	r3, [r2, #0]
 801a364:	4b0c      	ldr	r3, [pc, #48]	@ (801a398 <RadioSetMaxPayloadLength+0x50>)
 801a366:	781a      	ldrb	r2, [r3, #0]
 801a368:	4b0c      	ldr	r3, [pc, #48]	@ (801a39c <RadioSetMaxPayloadLength+0x54>)
 801a36a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a36c:	480c      	ldr	r0, [pc, #48]	@ (801a3a0 <RadioSetMaxPayloadLength+0x58>)
 801a36e:	f001 fd6d 	bl	801be4c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a372:	e00d      	b.n	801a390 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a374:	4b09      	ldr	r3, [pc, #36]	@ (801a39c <RadioSetMaxPayloadLength+0x54>)
 801a376:	7d5b      	ldrb	r3, [r3, #21]
 801a378:	2b01      	cmp	r3, #1
 801a37a:	d109      	bne.n	801a390 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a37c:	4a06      	ldr	r2, [pc, #24]	@ (801a398 <RadioSetMaxPayloadLength+0x50>)
 801a37e:	79bb      	ldrb	r3, [r7, #6]
 801a380:	7013      	strb	r3, [r2, #0]
 801a382:	4b05      	ldr	r3, [pc, #20]	@ (801a398 <RadioSetMaxPayloadLength+0x50>)
 801a384:	781a      	ldrb	r2, [r3, #0]
 801a386:	4b05      	ldr	r3, [pc, #20]	@ (801a39c <RadioSetMaxPayloadLength+0x54>)
 801a388:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a38a:	4805      	ldr	r0, [pc, #20]	@ (801a3a0 <RadioSetMaxPayloadLength+0x58>)
 801a38c:	f001 fd5e 	bl	801be4c <SUBGRF_SetPacketParams>
}
 801a390:	bf00      	nop
 801a392:	3708      	adds	r7, #8
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}
 801a398:	20000134 	.word	0x20000134
 801a39c:	20001bfc 	.word	0x20001bfc
 801a3a0:	20001c0a 	.word	0x20001c0a

0801a3a4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b082      	sub	sp, #8
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	4603      	mov	r3, r0
 801a3ac:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a3ae:	4a13      	ldr	r2, [pc, #76]	@ (801a3fc <RadioSetPublicNetwork+0x58>)
 801a3b0:	79fb      	ldrb	r3, [r7, #7]
 801a3b2:	7313      	strb	r3, [r2, #12]
 801a3b4:	4b11      	ldr	r3, [pc, #68]	@ (801a3fc <RadioSetPublicNetwork+0x58>)
 801a3b6:	7b1a      	ldrb	r2, [r3, #12]
 801a3b8:	4b10      	ldr	r3, [pc, #64]	@ (801a3fc <RadioSetPublicNetwork+0x58>)
 801a3ba:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a3bc:	2001      	movs	r0, #1
 801a3be:	f7ff f813 	bl	80193e8 <RadioSetModem>
    if( enable == true )
 801a3c2:	79fb      	ldrb	r3, [r7, #7]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d00a      	beq.n	801a3de <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a3c8:	2134      	movs	r1, #52	@ 0x34
 801a3ca:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801a3ce:	f001 fe85 	bl	801c0dc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a3d2:	2144      	movs	r1, #68	@ 0x44
 801a3d4:	f240 7041 	movw	r0, #1857	@ 0x741
 801a3d8:	f001 fe80 	bl	801c0dc <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a3dc:	e009      	b.n	801a3f2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a3de:	2114      	movs	r1, #20
 801a3e0:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801a3e4:	f001 fe7a 	bl	801c0dc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a3e8:	2124      	movs	r1, #36	@ 0x24
 801a3ea:	f240 7041 	movw	r0, #1857	@ 0x741
 801a3ee:	f001 fe75 	bl	801c0dc <SUBGRF_WriteRegister>
}
 801a3f2:	bf00      	nop
 801a3f4:	3708      	adds	r7, #8
 801a3f6:	46bd      	mov	sp, r7
 801a3f8:	bd80      	pop	{r7, pc}
 801a3fa:	bf00      	nop
 801a3fc:	20001bfc 	.word	0x20001bfc

0801a400 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a400:	b580      	push	{r7, lr}
 801a402:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a404:	f001 ffd4 	bl	801c3b0 <SUBGRF_GetRadioWakeUpTime>
 801a408:	4603      	mov	r3, r0
 801a40a:	3303      	adds	r3, #3
}
 801a40c:	4618      	mov	r0, r3
 801a40e:	bd80      	pop	{r7, pc}

0801a410 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b082      	sub	sp, #8
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a418:	f000 f80e 	bl	801a438 <RadioOnTxTimeoutProcess>
}
 801a41c:	bf00      	nop
 801a41e:	3708      	adds	r7, #8
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}

0801a424 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b082      	sub	sp, #8
 801a428:	af00      	add	r7, sp, #0
 801a42a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a42c:	f000 f818 	bl	801a460 <RadioOnRxTimeoutProcess>
}
 801a430:	bf00      	nop
 801a432:	3708      	adds	r7, #8
 801a434:	46bd      	mov	sp, r7
 801a436:	bd80      	pop	{r7, pc}

0801a438 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a43c:	4b07      	ldr	r3, [pc, #28]	@ (801a45c <RadioOnTxTimeoutProcess+0x24>)
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d008      	beq.n	801a456 <RadioOnTxTimeoutProcess+0x1e>
 801a444:	4b05      	ldr	r3, [pc, #20]	@ (801a45c <RadioOnTxTimeoutProcess+0x24>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	685b      	ldr	r3, [r3, #4]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d003      	beq.n	801a456 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a44e:	4b03      	ldr	r3, [pc, #12]	@ (801a45c <RadioOnTxTimeoutProcess+0x24>)
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	685b      	ldr	r3, [r3, #4]
 801a454:	4798      	blx	r3
    }
}
 801a456:	bf00      	nop
 801a458:	bd80      	pop	{r7, pc}
 801a45a:	bf00      	nop
 801a45c:	20001bf8 	.word	0x20001bf8

0801a460 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a460:	b580      	push	{r7, lr}
 801a462:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a464:	4b07      	ldr	r3, [pc, #28]	@ (801a484 <RadioOnRxTimeoutProcess+0x24>)
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d008      	beq.n	801a47e <RadioOnRxTimeoutProcess+0x1e>
 801a46c:	4b05      	ldr	r3, [pc, #20]	@ (801a484 <RadioOnRxTimeoutProcess+0x24>)
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	68db      	ldr	r3, [r3, #12]
 801a472:	2b00      	cmp	r3, #0
 801a474:	d003      	beq.n	801a47e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a476:	4b03      	ldr	r3, [pc, #12]	@ (801a484 <RadioOnRxTimeoutProcess+0x24>)
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	68db      	ldr	r3, [r3, #12]
 801a47c:	4798      	blx	r3
    }
}
 801a47e:	bf00      	nop
 801a480:	bd80      	pop	{r7, pc}
 801a482:	bf00      	nop
 801a484:	20001bf8 	.word	0x20001bf8

0801a488 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b082      	sub	sp, #8
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	4603      	mov	r3, r0
 801a490:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a492:	4a05      	ldr	r2, [pc, #20]	@ (801a4a8 <RadioOnDioIrq+0x20>)
 801a494:	88fb      	ldrh	r3, [r7, #6]
 801a496:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 801a49a:	f000 f807 	bl	801a4ac <RadioIrqProcess>
}
 801a49e:	bf00      	nop
 801a4a0:	3708      	adds	r7, #8
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	bd80      	pop	{r7, pc}
 801a4a6:	bf00      	nop
 801a4a8:	20001bfc 	.word	0x20001bfc

0801a4ac <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a4ac:	b5b0      	push	{r4, r5, r7, lr}
 801a4ae:	b082      	sub	sp, #8
 801a4b0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801a4ba:	4ba8      	ldr	r3, [pc, #672]	@ (801a75c <RadioIrqProcess+0x2b0>)
 801a4bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 801a4c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a4c4:	f000 810d 	beq.w	801a6e2 <RadioIrqProcess+0x236>
 801a4c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a4cc:	f300 81e8 	bgt.w	801a8a0 <RadioIrqProcess+0x3f4>
 801a4d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a4d4:	f000 80f1 	beq.w	801a6ba <RadioIrqProcess+0x20e>
 801a4d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a4dc:	f300 81e0 	bgt.w	801a8a0 <RadioIrqProcess+0x3f4>
 801a4e0:	2b80      	cmp	r3, #128	@ 0x80
 801a4e2:	f000 80d6 	beq.w	801a692 <RadioIrqProcess+0x1e6>
 801a4e6:	2b80      	cmp	r3, #128	@ 0x80
 801a4e8:	f300 81da 	bgt.w	801a8a0 <RadioIrqProcess+0x3f4>
 801a4ec:	2b20      	cmp	r3, #32
 801a4ee:	dc49      	bgt.n	801a584 <RadioIrqProcess+0xd8>
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	f340 81d5 	ble.w	801a8a0 <RadioIrqProcess+0x3f4>
 801a4f6:	3b01      	subs	r3, #1
 801a4f8:	2b1f      	cmp	r3, #31
 801a4fa:	f200 81d1 	bhi.w	801a8a0 <RadioIrqProcess+0x3f4>
 801a4fe:	a201      	add	r2, pc, #4	@ (adr r2, 801a504 <RadioIrqProcess+0x58>)
 801a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a504:	0801a58d 	.word	0x0801a58d
 801a508:	0801a5c7 	.word	0x0801a5c7
 801a50c:	0801a8a1 	.word	0x0801a8a1
 801a510:	0801a77d 	.word	0x0801a77d
 801a514:	0801a8a1 	.word	0x0801a8a1
 801a518:	0801a8a1 	.word	0x0801a8a1
 801a51c:	0801a8a1 	.word	0x0801a8a1
 801a520:	0801a7f9 	.word	0x0801a7f9
 801a524:	0801a8a1 	.word	0x0801a8a1
 801a528:	0801a8a1 	.word	0x0801a8a1
 801a52c:	0801a8a1 	.word	0x0801a8a1
 801a530:	0801a8a1 	.word	0x0801a8a1
 801a534:	0801a8a1 	.word	0x0801a8a1
 801a538:	0801a8a1 	.word	0x0801a8a1
 801a53c:	0801a8a1 	.word	0x0801a8a1
 801a540:	0801a815 	.word	0x0801a815
 801a544:	0801a8a1 	.word	0x0801a8a1
 801a548:	0801a8a1 	.word	0x0801a8a1
 801a54c:	0801a8a1 	.word	0x0801a8a1
 801a550:	0801a8a1 	.word	0x0801a8a1
 801a554:	0801a8a1 	.word	0x0801a8a1
 801a558:	0801a8a1 	.word	0x0801a8a1
 801a55c:	0801a8a1 	.word	0x0801a8a1
 801a560:	0801a8a1 	.word	0x0801a8a1
 801a564:	0801a8a1 	.word	0x0801a8a1
 801a568:	0801a8a1 	.word	0x0801a8a1
 801a56c:	0801a8a1 	.word	0x0801a8a1
 801a570:	0801a8a1 	.word	0x0801a8a1
 801a574:	0801a8a1 	.word	0x0801a8a1
 801a578:	0801a8a1 	.word	0x0801a8a1
 801a57c:	0801a8a1 	.word	0x0801a8a1
 801a580:	0801a823 	.word	0x0801a823
 801a584:	2b40      	cmp	r3, #64	@ 0x40
 801a586:	f000 816d 	beq.w	801a864 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801a58a:	e189      	b.n	801a8a0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a58c:	4874      	ldr	r0, [pc, #464]	@ (801a760 <RadioIrqProcess+0x2b4>)
 801a58e:	f002 ff73 	bl	801d478 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a592:	2000      	movs	r0, #0
 801a594:	f001 f81e 	bl	801b5d4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a598:	f002 f8ae 	bl	801c6f8 <RFW_Is_LongPacketModeEnabled>
 801a59c:	4603      	mov	r3, r0
 801a59e:	2b01      	cmp	r3, #1
 801a5a0:	d101      	bne.n	801a5a6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a5a2:	f002 f8d2 	bl	801c74a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a5a6:	4b6f      	ldr	r3, [pc, #444]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	f000 817a 	beq.w	801a8a4 <RadioIrqProcess+0x3f8>
 801a5b0:	4b6c      	ldr	r3, [pc, #432]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	f000 8174 	beq.w	801a8a4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a5bc:	4b69      	ldr	r3, [pc, #420]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	4798      	blx	r3
        break;
 801a5c4:	e16e      	b.n	801a8a4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a5c6:	4868      	ldr	r0, [pc, #416]	@ (801a768 <RadioIrqProcess+0x2bc>)
 801a5c8:	f002 ff56 	bl	801d478 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a5cc:	4b63      	ldr	r3, [pc, #396]	@ (801a75c <RadioIrqProcess+0x2b0>)
 801a5ce:	785b      	ldrb	r3, [r3, #1]
 801a5d0:	f083 0301 	eor.w	r3, r3, #1
 801a5d4:	b2db      	uxtb	r3, r3
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d014      	beq.n	801a604 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a5da:	2000      	movs	r0, #0
 801a5dc:	f000 fffa 	bl	801b5d4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a5e0:	2100      	movs	r1, #0
 801a5e2:	f640 1002 	movw	r0, #2306	@ 0x902
 801a5e6:	f001 fd79 	bl	801c0dc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a5ea:	f640 1044 	movw	r0, #2372	@ 0x944
 801a5ee:	f001 fd97 	bl	801c120 <SUBGRF_ReadRegister>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	f043 0302 	orr.w	r3, r3, #2
 801a5f8:	b2db      	uxtb	r3, r3
 801a5fa:	4619      	mov	r1, r3
 801a5fc:	f640 1044 	movw	r0, #2372	@ 0x944
 801a600:	f001 fd6c 	bl	801c0dc <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a604:	1dfb      	adds	r3, r7, #7
 801a606:	22ff      	movs	r2, #255	@ 0xff
 801a608:	4619      	mov	r1, r3
 801a60a:	4858      	ldr	r0, [pc, #352]	@ (801a76c <RadioIrqProcess+0x2c0>)
 801a60c:	f000 feb2 	bl	801b374 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a610:	4857      	ldr	r0, [pc, #348]	@ (801a770 <RadioIrqProcess+0x2c4>)
 801a612:	f001 fd11 	bl	801c038 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a616:	4b53      	ldr	r3, [pc, #332]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	f000 8144 	beq.w	801a8a8 <RadioIrqProcess+0x3fc>
 801a620:	4b50      	ldr	r3, [pc, #320]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	689b      	ldr	r3, [r3, #8]
 801a626:	2b00      	cmp	r3, #0
 801a628:	f000 813e 	beq.w	801a8a8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801a62c:	4b4b      	ldr	r3, [pc, #300]	@ (801a75c <RadioIrqProcess+0x2b0>)
 801a62e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a632:	2b01      	cmp	r3, #1
 801a634:	d10e      	bne.n	801a654 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801a636:	4b4b      	ldr	r3, [pc, #300]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	689c      	ldr	r4, [r3, #8]
 801a63c:	79fb      	ldrb	r3, [r7, #7]
 801a63e:	4619      	mov	r1, r3
 801a640:	4b46      	ldr	r3, [pc, #280]	@ (801a75c <RadioIrqProcess+0x2b0>)
 801a642:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 801a646:	461a      	mov	r2, r3
 801a648:	4b44      	ldr	r3, [pc, #272]	@ (801a75c <RadioIrqProcess+0x2b0>)
 801a64a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801a64e:	4847      	ldr	r0, [pc, #284]	@ (801a76c <RadioIrqProcess+0x2c0>)
 801a650:	47a0      	blx	r4
                break;
 801a652:	e01d      	b.n	801a690 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a654:	4b41      	ldr	r3, [pc, #260]	@ (801a75c <RadioIrqProcess+0x2b0>)
 801a656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a658:	463a      	mov	r2, r7
 801a65a:	4611      	mov	r1, r2
 801a65c:	4618      	mov	r0, r3
 801a65e:	f001 ff99 	bl	801c594 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801a662:	4b40      	ldr	r3, [pc, #256]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	689c      	ldr	r4, [r3, #8]
 801a668:	79fb      	ldrb	r3, [r7, #7]
 801a66a:	4619      	mov	r1, r3
 801a66c:	4b3b      	ldr	r3, [pc, #236]	@ (801a75c <RadioIrqProcess+0x2b0>)
 801a66e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 801a672:	4618      	mov	r0, r3
 801a674:	683b      	ldr	r3, [r7, #0]
 801a676:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801a67a:	4a3e      	ldr	r2, [pc, #248]	@ (801a774 <RadioIrqProcess+0x2c8>)
 801a67c:	fb82 5203 	smull	r5, r2, r2, r3
 801a680:	1192      	asrs	r2, r2, #6
 801a682:	17db      	asrs	r3, r3, #31
 801a684:	1ad3      	subs	r3, r2, r3
 801a686:	b25b      	sxtb	r3, r3
 801a688:	4602      	mov	r2, r0
 801a68a:	4838      	ldr	r0, [pc, #224]	@ (801a76c <RadioIrqProcess+0x2c0>)
 801a68c:	47a0      	blx	r4
                break;
 801a68e:	bf00      	nop
        break;
 801a690:	e10a      	b.n	801a8a8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a692:	2000      	movs	r0, #0
 801a694:	f000 ff9e 	bl	801b5d4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a698:	4b32      	ldr	r3, [pc, #200]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	f000 8105 	beq.w	801a8ac <RadioIrqProcess+0x400>
 801a6a2:	4b30      	ldr	r3, [pc, #192]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	699b      	ldr	r3, [r3, #24]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	f000 80ff 	beq.w	801a8ac <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801a6ae:	4b2d      	ldr	r3, [pc, #180]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	699b      	ldr	r3, [r3, #24]
 801a6b4:	2000      	movs	r0, #0
 801a6b6:	4798      	blx	r3
        break;
 801a6b8:	e0f8      	b.n	801a8ac <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801a6ba:	2000      	movs	r0, #0
 801a6bc:	f000 ff8a 	bl	801b5d4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a6c0:	4b28      	ldr	r3, [pc, #160]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	f000 80f3 	beq.w	801a8b0 <RadioIrqProcess+0x404>
 801a6ca:	4b26      	ldr	r3, [pc, #152]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	699b      	ldr	r3, [r3, #24]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	f000 80ed 	beq.w	801a8b0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a6d6:	4b23      	ldr	r3, [pc, #140]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	699b      	ldr	r3, [r3, #24]
 801a6dc:	2001      	movs	r0, #1
 801a6de:	4798      	blx	r3
        break;
 801a6e0:	e0e6      	b.n	801a8b0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a6e2:	4b25      	ldr	r3, [pc, #148]	@ (801a778 <RadioIrqProcess+0x2cc>)
 801a6e4:	2201      	movs	r2, #1
 801a6e6:	2100      	movs	r1, #0
 801a6e8:	2002      	movs	r0, #2
 801a6ea:	f003 f8cf 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a6ee:	f000 fe27 	bl	801b340 <SUBGRF_GetOperatingMode>
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	2b04      	cmp	r3, #4
 801a6f6:	d115      	bne.n	801a724 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a6f8:	4819      	ldr	r0, [pc, #100]	@ (801a760 <RadioIrqProcess+0x2b4>)
 801a6fa:	f002 febd 	bl	801d478 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a6fe:	2000      	movs	r0, #0
 801a700:	f000 ff68 	bl	801b5d4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a704:	4b17      	ldr	r3, [pc, #92]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	f000 80d3 	beq.w	801a8b4 <RadioIrqProcess+0x408>
 801a70e:	4b15      	ldr	r3, [pc, #84]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	685b      	ldr	r3, [r3, #4]
 801a714:	2b00      	cmp	r3, #0
 801a716:	f000 80cd 	beq.w	801a8b4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a71a:	4b12      	ldr	r3, [pc, #72]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	4798      	blx	r3
        break;
 801a722:	e0c7      	b.n	801a8b4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a724:	f000 fe0c 	bl	801b340 <SUBGRF_GetOperatingMode>
 801a728:	4603      	mov	r3, r0
 801a72a:	2b05      	cmp	r3, #5
 801a72c:	f040 80c2 	bne.w	801a8b4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a730:	480d      	ldr	r0, [pc, #52]	@ (801a768 <RadioIrqProcess+0x2bc>)
 801a732:	f002 fea1 	bl	801d478 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a736:	2000      	movs	r0, #0
 801a738:	f000 ff4c 	bl	801b5d4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a73c:	4b09      	ldr	r3, [pc, #36]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	2b00      	cmp	r3, #0
 801a742:	f000 80b7 	beq.w	801a8b4 <RadioIrqProcess+0x408>
 801a746:	4b07      	ldr	r3, [pc, #28]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	68db      	ldr	r3, [r3, #12]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	f000 80b1 	beq.w	801a8b4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a752:	4b04      	ldr	r3, [pc, #16]	@ (801a764 <RadioIrqProcess+0x2b8>)
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	68db      	ldr	r3, [r3, #12]
 801a758:	4798      	blx	r3
        break;
 801a75a:	e0ab      	b.n	801a8b4 <RadioIrqProcess+0x408>
 801a75c:	20001bfc 	.word	0x20001bfc
 801a760:	20001c58 	.word	0x20001c58
 801a764:	20001bf8 	.word	0x20001bf8
 801a768:	20001c70 	.word	0x20001c70
 801a76c:	20001af8 	.word	0x20001af8
 801a770:	20001c20 	.word	0x20001c20
 801a774:	10624dd3 	.word	0x10624dd3
 801a778:	0801f964 	.word	0x0801f964
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a77c:	4b54      	ldr	r3, [pc, #336]	@ (801a8d0 <RadioIrqProcess+0x424>)
 801a77e:	2201      	movs	r2, #1
 801a780:	2100      	movs	r1, #0
 801a782:	2002      	movs	r0, #2
 801a784:	f003 f882 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a788:	4b52      	ldr	r3, [pc, #328]	@ (801a8d4 <RadioIrqProcess+0x428>)
 801a78a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	f000 8093 	beq.w	801a8b8 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a792:	4a51      	ldr	r2, [pc, #324]	@ (801a8d8 <RadioIrqProcess+0x42c>)
 801a794:	4b4f      	ldr	r3, [pc, #316]	@ (801a8d4 <RadioIrqProcess+0x428>)
 801a796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a798:	0c1b      	lsrs	r3, r3, #16
 801a79a:	b2db      	uxtb	r3, r3
 801a79c:	4619      	mov	r1, r3
 801a79e:	f640 1003 	movw	r0, #2307	@ 0x903
 801a7a2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a7a4:	4a4c      	ldr	r2, [pc, #304]	@ (801a8d8 <RadioIrqProcess+0x42c>)
 801a7a6:	4b4b      	ldr	r3, [pc, #300]	@ (801a8d4 <RadioIrqProcess+0x428>)
 801a7a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7aa:	0a1b      	lsrs	r3, r3, #8
 801a7ac:	b2db      	uxtb	r3, r3
 801a7ae:	4619      	mov	r1, r3
 801a7b0:	f640 1004 	movw	r0, #2308	@ 0x904
 801a7b4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a7b6:	4a48      	ldr	r2, [pc, #288]	@ (801a8d8 <RadioIrqProcess+0x42c>)
 801a7b8:	4b46      	ldr	r3, [pc, #280]	@ (801a8d4 <RadioIrqProcess+0x428>)
 801a7ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7bc:	b2db      	uxtb	r3, r3
 801a7be:	4619      	mov	r1, r3
 801a7c0:	f640 1005 	movw	r0, #2309	@ 0x905
 801a7c4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a7c6:	4c44      	ldr	r4, [pc, #272]	@ (801a8d8 <RadioIrqProcess+0x42c>)
 801a7c8:	4b44      	ldr	r3, [pc, #272]	@ (801a8dc <RadioIrqProcess+0x430>)
 801a7ca:	f640 1002 	movw	r0, #2306	@ 0x902
 801a7ce:	4798      	blx	r3
 801a7d0:	4603      	mov	r3, r0
 801a7d2:	f043 0301 	orr.w	r3, r3, #1
 801a7d6:	b2db      	uxtb	r3, r3
 801a7d8:	4619      	mov	r1, r3
 801a7da:	f640 1002 	movw	r0, #2306	@ 0x902
 801a7de:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a7e0:	4b3c      	ldr	r3, [pc, #240]	@ (801a8d4 <RadioIrqProcess+0x428>)
 801a7e2:	2200      	movs	r2, #0
 801a7e4:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a7e6:	2300      	movs	r3, #0
 801a7e8:	2200      	movs	r2, #0
 801a7ea:	f240 2162 	movw	r1, #610	@ 0x262
 801a7ee:	f240 2062 	movw	r0, #610	@ 0x262
 801a7f2:	f001 f8c3 	bl	801b97c <SUBGRF_SetDioIrqParams>
        break;
 801a7f6:	e05f      	b.n	801a8b8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a7f8:	4b39      	ldr	r3, [pc, #228]	@ (801a8e0 <RadioIrqProcess+0x434>)
 801a7fa:	2201      	movs	r2, #1
 801a7fc:	2100      	movs	r1, #0
 801a7fe:	2002      	movs	r0, #2
 801a800:	f003 f844 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a804:	f001 ff71 	bl	801c6ea <RFW_Is_Init>
 801a808:	4603      	mov	r3, r0
 801a80a:	2b01      	cmp	r3, #1
 801a80c:	d156      	bne.n	801a8bc <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a80e:	f001 ffa2 	bl	801c756 <RFW_ReceivePayload>
        break;
 801a812:	e053      	b.n	801a8bc <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a814:	4b33      	ldr	r3, [pc, #204]	@ (801a8e4 <RadioIrqProcess+0x438>)
 801a816:	2201      	movs	r2, #1
 801a818:	2100      	movs	r1, #0
 801a81a:	2002      	movs	r0, #2
 801a81c:	f003 f836 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a820:	e051      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a822:	4831      	ldr	r0, [pc, #196]	@ (801a8e8 <RadioIrqProcess+0x43c>)
 801a824:	f002 fe28 	bl	801d478 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a828:	4b2a      	ldr	r3, [pc, #168]	@ (801a8d4 <RadioIrqProcess+0x428>)
 801a82a:	785b      	ldrb	r3, [r3, #1]
 801a82c:	f083 0301 	eor.w	r3, r3, #1
 801a830:	b2db      	uxtb	r3, r3
 801a832:	2b00      	cmp	r3, #0
 801a834:	d002      	beq.n	801a83c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a836:	2000      	movs	r0, #0
 801a838:	f000 fecc 	bl	801b5d4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a83c:	4b2b      	ldr	r3, [pc, #172]	@ (801a8ec <RadioIrqProcess+0x440>)
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d03d      	beq.n	801a8c0 <RadioIrqProcess+0x414>
 801a844:	4b29      	ldr	r3, [pc, #164]	@ (801a8ec <RadioIrqProcess+0x440>)
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	68db      	ldr	r3, [r3, #12]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d038      	beq.n	801a8c0 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a84e:	4b27      	ldr	r3, [pc, #156]	@ (801a8ec <RadioIrqProcess+0x440>)
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a856:	4b26      	ldr	r3, [pc, #152]	@ (801a8f0 <RadioIrqProcess+0x444>)
 801a858:	2201      	movs	r2, #1
 801a85a:	2100      	movs	r1, #0
 801a85c:	2002      	movs	r0, #2
 801a85e:	f003 f815 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a862:	e02d      	b.n	801a8c0 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a864:	4b23      	ldr	r3, [pc, #140]	@ (801a8f4 <RadioIrqProcess+0x448>)
 801a866:	2201      	movs	r2, #1
 801a868:	2100      	movs	r1, #0
 801a86a:	2002      	movs	r0, #2
 801a86c:	f003 f80e 	bl	801d88c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a870:	4b18      	ldr	r3, [pc, #96]	@ (801a8d4 <RadioIrqProcess+0x428>)
 801a872:	785b      	ldrb	r3, [r3, #1]
 801a874:	f083 0301 	eor.w	r3, r3, #1
 801a878:	b2db      	uxtb	r3, r3
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d002      	beq.n	801a884 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a87e:	2000      	movs	r0, #0
 801a880:	f000 fea8 	bl	801b5d4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a884:	4b19      	ldr	r3, [pc, #100]	@ (801a8ec <RadioIrqProcess+0x440>)
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d01b      	beq.n	801a8c4 <RadioIrqProcess+0x418>
 801a88c:	4b17      	ldr	r3, [pc, #92]	@ (801a8ec <RadioIrqProcess+0x440>)
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	691b      	ldr	r3, [r3, #16]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d016      	beq.n	801a8c4 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a896:	4b15      	ldr	r3, [pc, #84]	@ (801a8ec <RadioIrqProcess+0x440>)
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	691b      	ldr	r3, [r3, #16]
 801a89c:	4798      	blx	r3
        break;
 801a89e:	e011      	b.n	801a8c4 <RadioIrqProcess+0x418>
        break;
 801a8a0:	bf00      	nop
 801a8a2:	e010      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8a4:	bf00      	nop
 801a8a6:	e00e      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8a8:	bf00      	nop
 801a8aa:	e00c      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8ac:	bf00      	nop
 801a8ae:	e00a      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8b0:	bf00      	nop
 801a8b2:	e008      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8b4:	bf00      	nop
 801a8b6:	e006      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8b8:	bf00      	nop
 801a8ba:	e004      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8bc:	bf00      	nop
 801a8be:	e002      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8c0:	bf00      	nop
 801a8c2:	e000      	b.n	801a8c6 <RadioIrqProcess+0x41a>
        break;
 801a8c4:	bf00      	nop
    }
}
 801a8c6:	bf00      	nop
 801a8c8:	3708      	adds	r7, #8
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bdb0      	pop	{r4, r5, r7, pc}
 801a8ce:	bf00      	nop
 801a8d0:	0801f978 	.word	0x0801f978
 801a8d4:	20001bfc 	.word	0x20001bfc
 801a8d8:	0801a2bd 	.word	0x0801a2bd
 801a8dc:	0801a2e1 	.word	0x0801a2e1
 801a8e0:	0801f984 	.word	0x0801f984
 801a8e4:	0801f990 	.word	0x0801f990
 801a8e8:	20001c70 	.word	0x20001c70
 801a8ec:	20001bf8 	.word	0x20001bf8
 801a8f0:	0801f99c 	.word	0x0801f99c
 801a8f4:	0801f9a8 	.word	0x0801f9a8

0801a8f8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a8fc:	4b09      	ldr	r3, [pc, #36]	@ (801a924 <RadioTxPrbs+0x2c>)
 801a8fe:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a902:	2101      	movs	r1, #1
 801a904:	4618      	mov	r0, r3
 801a906:	f001 fcf7 	bl	801c2f8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a90a:	4b07      	ldr	r3, [pc, #28]	@ (801a928 <RadioTxPrbs+0x30>)
 801a90c:	212d      	movs	r1, #45	@ 0x2d
 801a90e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a912:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a914:	f000 ff21 	bl	801b75a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a918:	4804      	ldr	r0, [pc, #16]	@ (801a92c <RadioTxPrbs+0x34>)
 801a91a:	f000 fe77 	bl	801b60c <SUBGRF_SetTx>
}
 801a91e:	bf00      	nop
 801a920:	bd80      	pop	{r7, pc}
 801a922:	bf00      	nop
 801a924:	20001bfc 	.word	0x20001bfc
 801a928:	0801a2bd 	.word	0x0801a2bd
 801a92c:	000fffff 	.word	0x000fffff

0801a930 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b084      	sub	sp, #16
 801a934:	af00      	add	r7, sp, #0
 801a936:	4603      	mov	r3, r0
 801a938:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a93a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a93e:	4618      	mov	r0, r3
 801a940:	f001 fd02 	bl	801c348 <SUBGRF_SetRfTxPower>
 801a944:	4603      	mov	r3, r0
 801a946:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a948:	210e      	movs	r1, #14
 801a94a:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a94e:	f001 fbc5 	bl	801c0dc <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a952:	7bfb      	ldrb	r3, [r7, #15]
 801a954:	2101      	movs	r1, #1
 801a956:	4618      	mov	r0, r3
 801a958:	f001 fcce 	bl	801c2f8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a95c:	f000 fef4 	bl	801b748 <SUBGRF_SetTxContinuousWave>
}
 801a960:	bf00      	nop
 801a962:	3710      	adds	r7, #16
 801a964:	46bd      	mov	sp, r7
 801a966:	bd80      	pop	{r7, pc}

0801a968 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a968:	b480      	push	{r7}
 801a96a:	b089      	sub	sp, #36	@ 0x24
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	60f8      	str	r0, [r7, #12]
 801a970:	60b9      	str	r1, [r7, #8]
 801a972:	4613      	mov	r3, r2
 801a974:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a976:	2300      	movs	r3, #0
 801a978:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a97a:	2300      	movs	r3, #0
 801a97c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a97e:	2300      	movs	r3, #0
 801a980:	61bb      	str	r3, [r7, #24]
 801a982:	e011      	b.n	801a9a8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a984:	69bb      	ldr	r3, [r7, #24]
 801a986:	68ba      	ldr	r2, [r7, #8]
 801a988:	4413      	add	r3, r2
 801a98a:	781a      	ldrb	r2, [r3, #0]
 801a98c:	69bb      	ldr	r3, [r7, #24]
 801a98e:	68b9      	ldr	r1, [r7, #8]
 801a990:	440b      	add	r3, r1
 801a992:	43d2      	mvns	r2, r2
 801a994:	b2d2      	uxtb	r2, r2
 801a996:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a998:	69bb      	ldr	r3, [r7, #24]
 801a99a:	68fa      	ldr	r2, [r7, #12]
 801a99c:	4413      	add	r3, r2
 801a99e:	2200      	movs	r2, #0
 801a9a0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a9a2:	69bb      	ldr	r3, [r7, #24]
 801a9a4:	3301      	adds	r3, #1
 801a9a6:	61bb      	str	r3, [r7, #24]
 801a9a8:	79fb      	ldrb	r3, [r7, #7]
 801a9aa:	69ba      	ldr	r2, [r7, #24]
 801a9ac:	429a      	cmp	r2, r3
 801a9ae:	dbe9      	blt.n	801a984 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	61bb      	str	r3, [r7, #24]
 801a9b4:	e049      	b.n	801aa4a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a9b6:	69bb      	ldr	r3, [r7, #24]
 801a9b8:	425a      	negs	r2, r3
 801a9ba:	f003 0307 	and.w	r3, r3, #7
 801a9be:	f002 0207 	and.w	r2, r2, #7
 801a9c2:	bf58      	it	pl
 801a9c4:	4253      	negpl	r3, r2
 801a9c6:	b2db      	uxtb	r3, r3
 801a9c8:	f1c3 0307 	rsb	r3, r3, #7
 801a9cc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a9ce:	69bb      	ldr	r3, [r7, #24]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	da00      	bge.n	801a9d6 <payload_integration+0x6e>
 801a9d4:	3307      	adds	r3, #7
 801a9d6:	10db      	asrs	r3, r3, #3
 801a9d8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a9da:	69bb      	ldr	r3, [r7, #24]
 801a9dc:	3301      	adds	r3, #1
 801a9de:	425a      	negs	r2, r3
 801a9e0:	f003 0307 	and.w	r3, r3, #7
 801a9e4:	f002 0207 	and.w	r2, r2, #7
 801a9e8:	bf58      	it	pl
 801a9ea:	4253      	negpl	r3, r2
 801a9ec:	b2db      	uxtb	r3, r3
 801a9ee:	f1c3 0307 	rsb	r3, r3, #7
 801a9f2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a9f4:	69bb      	ldr	r3, [r7, #24]
 801a9f6:	3301      	adds	r3, #1
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	da00      	bge.n	801a9fe <payload_integration+0x96>
 801a9fc:	3307      	adds	r3, #7
 801a9fe:	10db      	asrs	r3, r3, #3
 801aa00:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801aa02:	7dbb      	ldrb	r3, [r7, #22]
 801aa04:	68ba      	ldr	r2, [r7, #8]
 801aa06:	4413      	add	r3, r2
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	461a      	mov	r2, r3
 801aa0c:	7dfb      	ldrb	r3, [r7, #23]
 801aa0e:	fa42 f303 	asr.w	r3, r2, r3
 801aa12:	b2db      	uxtb	r3, r3
 801aa14:	f003 0301 	and.w	r3, r3, #1
 801aa18:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801aa1a:	7ffa      	ldrb	r2, [r7, #31]
 801aa1c:	7cfb      	ldrb	r3, [r7, #19]
 801aa1e:	4053      	eors	r3, r2
 801aa20:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801aa22:	7d3b      	ldrb	r3, [r7, #20]
 801aa24:	68fa      	ldr	r2, [r7, #12]
 801aa26:	4413      	add	r3, r2
 801aa28:	781b      	ldrb	r3, [r3, #0]
 801aa2a:	b25a      	sxtb	r2, r3
 801aa2c:	7ff9      	ldrb	r1, [r7, #31]
 801aa2e:	7d7b      	ldrb	r3, [r7, #21]
 801aa30:	fa01 f303 	lsl.w	r3, r1, r3
 801aa34:	b25b      	sxtb	r3, r3
 801aa36:	4313      	orrs	r3, r2
 801aa38:	b259      	sxtb	r1, r3
 801aa3a:	7d3b      	ldrb	r3, [r7, #20]
 801aa3c:	68fa      	ldr	r2, [r7, #12]
 801aa3e:	4413      	add	r3, r2
 801aa40:	b2ca      	uxtb	r2, r1
 801aa42:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801aa44:	69bb      	ldr	r3, [r7, #24]
 801aa46:	3301      	adds	r3, #1
 801aa48:	61bb      	str	r3, [r7, #24]
 801aa4a:	79fb      	ldrb	r3, [r7, #7]
 801aa4c:	00db      	lsls	r3, r3, #3
 801aa4e:	69ba      	ldr	r2, [r7, #24]
 801aa50:	429a      	cmp	r2, r3
 801aa52:	dbb0      	blt.n	801a9b6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801aa54:	7ffb      	ldrb	r3, [r7, #31]
 801aa56:	01db      	lsls	r3, r3, #7
 801aa58:	b25a      	sxtb	r2, r3
 801aa5a:	7ffb      	ldrb	r3, [r7, #31]
 801aa5c:	019b      	lsls	r3, r3, #6
 801aa5e:	b25b      	sxtb	r3, r3
 801aa60:	4313      	orrs	r3, r2
 801aa62:	b25b      	sxtb	r3, r3
 801aa64:	7ffa      	ldrb	r2, [r7, #31]
 801aa66:	2a00      	cmp	r2, #0
 801aa68:	d101      	bne.n	801aa6e <payload_integration+0x106>
 801aa6a:	2220      	movs	r2, #32
 801aa6c:	e000      	b.n	801aa70 <payload_integration+0x108>
 801aa6e:	2200      	movs	r2, #0
 801aa70:	4313      	orrs	r3, r2
 801aa72:	b259      	sxtb	r1, r3
 801aa74:	79fb      	ldrb	r3, [r7, #7]
 801aa76:	68fa      	ldr	r2, [r7, #12]
 801aa78:	4413      	add	r3, r2
 801aa7a:	b2ca      	uxtb	r2, r1
 801aa7c:	701a      	strb	r2, [r3, #0]
}
 801aa7e:	bf00      	nop
 801aa80:	3724      	adds	r7, #36	@ 0x24
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bc80      	pop	{r7}
 801aa86:	4770      	bx	lr

0801aa88 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801aa88:	b580      	push	{r7, lr}
 801aa8a:	b08c      	sub	sp, #48	@ 0x30
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	60b9      	str	r1, [r7, #8]
 801aa90:	607a      	str	r2, [r7, #4]
 801aa92:	603b      	str	r3, [r7, #0]
 801aa94:	4603      	mov	r3, r0
 801aa96:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801aa98:	2300      	movs	r3, #0
 801aa9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	623b      	str	r3, [r7, #32]
 801aaa0:	2300      	movs	r3, #0
 801aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801aaa4:	f001 fe1b 	bl	801c6de <RFW_DeInit>

    if( rxContinuous != 0 )
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d001      	beq.n	801aab2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801aaae:	2300      	movs	r3, #0
 801aab0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	bf14      	ite	ne
 801aab8:	2301      	movne	r3, #1
 801aaba:	2300      	moveq	r3, #0
 801aabc:	b2da      	uxtb	r2, r3
 801aabe:	4ba4      	ldr	r3, [pc, #656]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801aac0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801aac2:	7bfb      	ldrb	r3, [r7, #15]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d003      	beq.n	801aad0 <RadioSetRxGenericConfig+0x48>
 801aac8:	2b01      	cmp	r3, #1
 801aaca:	f000 80dc 	beq.w	801ac86 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801aace:	e196      	b.n	801adfe <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801aad0:	68bb      	ldr	r3, [r7, #8]
 801aad2:	689b      	ldr	r3, [r3, #8]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d003      	beq.n	801aae0 <RadioSetRxGenericConfig+0x58>
 801aad8:	68bb      	ldr	r3, [r7, #8]
 801aada:	68db      	ldr	r3, [r3, #12]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d102      	bne.n	801aae6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801aae0:	f04f 33ff 	mov.w	r3, #4294967295
 801aae4:	e18c      	b.n	801ae00 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	7f9b      	ldrb	r3, [r3, #30]
 801aaea:	2b08      	cmp	r3, #8
 801aaec:	d902      	bls.n	801aaf4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801aaee:	f04f 33ff 	mov.w	r3, #4294967295
 801aaf2:	e185      	b.n	801ae00 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801aaf4:	68bb      	ldr	r3, [r7, #8]
 801aaf6:	6919      	ldr	r1, [r3, #16]
 801aaf8:	68bb      	ldr	r3, [r7, #8]
 801aafa:	7f9b      	ldrb	r3, [r3, #30]
 801aafc:	461a      	mov	r2, r3
 801aafe:	f107 0320 	add.w	r3, r7, #32
 801ab02:	4618      	mov	r0, r3
 801ab04:	f001 fede 	bl	801c8c4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801ab08:	68bb      	ldr	r3, [r7, #8]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	bf14      	ite	ne
 801ab10:	2301      	movne	r3, #1
 801ab12:	2300      	moveq	r3, #0
 801ab14:	b2db      	uxtb	r3, r3
 801ab16:	4618      	mov	r0, r3
 801ab18:	f000 fe28 	bl	801b76c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ab1c:	4b8c      	ldr	r3, [pc, #560]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab1e:	2200      	movs	r2, #0
 801ab20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801ab24:	68bb      	ldr	r3, [r7, #8]
 801ab26:	689b      	ldr	r3, [r3, #8]
 801ab28:	4a89      	ldr	r2, [pc, #548]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ab2c:	68bb      	ldr	r3, [r7, #8]
 801ab2e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801ab32:	4b87      	ldr	r3, [pc, #540]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801ab38:	68bb      	ldr	r3, [r7, #8]
 801ab3a:	685b      	ldr	r3, [r3, #4]
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	f001 fd01 	bl	801c544 <SUBGRF_GetFskBandwidthRegValue>
 801ab42:	4603      	mov	r3, r0
 801ab44:	461a      	mov	r2, r3
 801ab46:	4b82      	ldr	r3, [pc, #520]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ab4c:	4b80      	ldr	r3, [pc, #512]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab4e:	2200      	movs	r2, #0
 801ab50:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	68db      	ldr	r3, [r3, #12]
 801ab56:	b29b      	uxth	r3, r3
 801ab58:	00db      	lsls	r3, r3, #3
 801ab5a:	b29a      	uxth	r2, r3
 801ab5c:	4b7c      	ldr	r3, [pc, #496]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab5e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	7fda      	ldrb	r2, [r3, #31]
 801ab64:	4b7a      	ldr	r3, [pc, #488]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab66:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	7f9b      	ldrb	r3, [r3, #30]
 801ab6c:	00db      	lsls	r3, r3, #3
 801ab6e:	b2da      	uxtb	r2, r3
 801ab70:	4b77      	ldr	r3, [pc, #476]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab72:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801ab74:	68bb      	ldr	r3, [r7, #8]
 801ab76:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801ab7a:	4b75      	ldr	r3, [pc, #468]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab7c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801ab7e:	68bb      	ldr	r3, [r7, #8]
 801ab80:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d105      	bne.n	801ab94 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801ab88:	68bb      	ldr	r3, [r7, #8]
 801ab8a:	695b      	ldr	r3, [r3, #20]
 801ab8c:	b2da      	uxtb	r2, r3
 801ab8e:	4b70      	ldr	r3, [pc, #448]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ab90:	759a      	strb	r2, [r3, #22]
 801ab92:	e00b      	b.n	801abac <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801ab94:	68bb      	ldr	r3, [r7, #8]
 801ab96:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801ab9a:	2b02      	cmp	r3, #2
 801ab9c:	d103      	bne.n	801aba6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ab9e:	4b6c      	ldr	r3, [pc, #432]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801aba0:	22ff      	movs	r2, #255	@ 0xff
 801aba2:	759a      	strb	r2, [r3, #22]
 801aba4:	e002      	b.n	801abac <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801aba6:	4b6a      	ldr	r3, [pc, #424]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801aba8:	22ff      	movs	r2, #255	@ 0xff
 801abaa:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801abac:	68bb      	ldr	r3, [r7, #8]
 801abae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801abb2:	2b02      	cmp	r3, #2
 801abb4:	d004      	beq.n	801abc0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801abb6:	68bb      	ldr	r3, [r7, #8]
 801abb8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801abbc:	2b02      	cmp	r3, #2
 801abbe:	d12d      	bne.n	801ac1c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801abc0:	68bb      	ldr	r3, [r7, #8]
 801abc2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801abc6:	2bf1      	cmp	r3, #241	@ 0xf1
 801abc8:	d00c      	beq.n	801abe4 <RadioSetRxGenericConfig+0x15c>
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801abd0:	2bf2      	cmp	r3, #242	@ 0xf2
 801abd2:	d007      	beq.n	801abe4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801abda:	2b01      	cmp	r3, #1
 801abdc:	d002      	beq.n	801abe4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801abde:	f04f 33ff 	mov.w	r3, #4294967295
 801abe2:	e10d      	b.n	801ae00 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 801abe4:	2300      	movs	r3, #0
 801abe6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801abec:	4b59      	ldr	r3, [pc, #356]	@ (801ad54 <RadioSetRxGenericConfig+0x2cc>)
 801abee:	6819      	ldr	r1, [r3, #0]
 801abf0:	f107 0314 	add.w	r3, r7, #20
 801abf4:	4a58      	ldr	r2, [pc, #352]	@ (801ad58 <RadioSetRxGenericConfig+0x2d0>)
 801abf6:	4618      	mov	r0, r3
 801abf8:	f001 fd64 	bl	801c6c4 <RFW_Init>
 801abfc:	4603      	mov	r3, r0
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d002      	beq.n	801ac08 <RadioSetRxGenericConfig+0x180>
                return -1;
 801ac02:	f04f 33ff 	mov.w	r3, #4294967295
 801ac06:	e0fb      	b.n	801ae00 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ac08:	4b51      	ldr	r3, [pc, #324]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ac0a:	2200      	movs	r2, #0
 801ac0c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ac0e:	4b50      	ldr	r3, [pc, #320]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ac10:	2201      	movs	r2, #1
 801ac12:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ac14:	4b4e      	ldr	r3, [pc, #312]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ac16:	2200      	movs	r2, #0
 801ac18:	755a      	strb	r2, [r3, #21]
        {
 801ac1a:	e00e      	b.n	801ac3a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801ac22:	4b4b      	ldr	r3, [pc, #300]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ac24:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ac26:	68bb      	ldr	r3, [r7, #8]
 801ac28:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801ac2c:	4b48      	ldr	r3, [pc, #288]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ac2e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801ac30:	68bb      	ldr	r3, [r7, #8]
 801ac32:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801ac36:	4b46      	ldr	r3, [pc, #280]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ac38:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801ac3a:	f7ff fa3e 	bl	801a0ba <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ac3e:	2000      	movs	r0, #0
 801ac40:	f7fe fbd2 	bl	80193e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ac44:	4845      	ldr	r0, [pc, #276]	@ (801ad5c <RadioSetRxGenericConfig+0x2d4>)
 801ac46:	f001 f82f 	bl	801bca8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac4a:	4845      	ldr	r0, [pc, #276]	@ (801ad60 <RadioSetRxGenericConfig+0x2d8>)
 801ac4c:	f001 f8fe 	bl	801be4c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ac50:	f107 0320 	add.w	r3, r7, #32
 801ac54:	4618      	mov	r0, r3
 801ac56:	f000 fbc2 	bl	801b3de <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801ac5a:	68bb      	ldr	r3, [r7, #8]
 801ac5c:	8b9b      	ldrh	r3, [r3, #28]
 801ac5e:	4618      	mov	r0, r3
 801ac60:	f000 fc0c 	bl	801b47c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801ac64:	68bb      	ldr	r3, [r7, #8]
 801ac66:	8b1b      	ldrh	r3, [r3, #24]
 801ac68:	4618      	mov	r0, r3
 801ac6a:	f000 fbe7 	bl	801b43c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801ac6e:	683b      	ldr	r3, [r7, #0]
 801ac70:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801ac74:	fb03 f202 	mul.w	r2, r3, r2
 801ac78:	68bb      	ldr	r3, [r7, #8]
 801ac7a:	689b      	ldr	r3, [r3, #8]
 801ac7c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ac80:	4a33      	ldr	r2, [pc, #204]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ac82:	6093      	str	r3, [r2, #8]
        break;
 801ac84:	e0bb      	b.n	801adfe <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 801ac86:	68bb      	ldr	r3, [r7, #8]
 801ac88:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d102      	bne.n	801ac94 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801ac8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac92:	e0b5      	b.n	801ae00 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801ac94:	68bb      	ldr	r3, [r7, #8]
 801ac96:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801ac9a:	2b01      	cmp	r3, #1
 801ac9c:	d105      	bne.n	801acaa <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 801ac9e:	68bb      	ldr	r3, [r7, #8]
 801aca0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801aca4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801aca8:	e002      	b.n	801acb0 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 801acaa:	23ff      	movs	r3, #255	@ 0xff
 801acac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	bf14      	ite	ne
 801acb8:	2301      	movne	r3, #1
 801acba:	2300      	moveq	r3, #0
 801acbc:	b2db      	uxtb	r3, r3
 801acbe:	4618      	mov	r0, r3
 801acc0:	f000 fd54 	bl	801b76c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801acc4:	683b      	ldr	r3, [r7, #0]
 801acc6:	b2db      	uxtb	r3, r3
 801acc8:	4618      	mov	r0, r3
 801acca:	f000 fd5e 	bl	801b78a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801acce:	4b20      	ldr	r3, [pc, #128]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801acd0:	2201      	movs	r2, #1
 801acd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801acd6:	68bb      	ldr	r3, [r7, #8]
 801acd8:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801acdc:	4b1c      	ldr	r3, [pc, #112]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801acde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801ace2:	68bb      	ldr	r3, [r7, #8]
 801ace4:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801ace8:	4b19      	ldr	r3, [pc, #100]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801acea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801acee:	68bb      	ldr	r3, [r7, #8]
 801acf0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801acf4:	4b16      	ldr	r3, [pc, #88]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801acf6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801acfa:	68bb      	ldr	r3, [r7, #8]
 801acfc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ad00:	2b02      	cmp	r3, #2
 801ad02:	d010      	beq.n	801ad26 <RadioSetRxGenericConfig+0x29e>
 801ad04:	2b02      	cmp	r3, #2
 801ad06:	dc2d      	bgt.n	801ad64 <RadioSetRxGenericConfig+0x2dc>
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d002      	beq.n	801ad12 <RadioSetRxGenericConfig+0x28a>
 801ad0c:	2b01      	cmp	r3, #1
 801ad0e:	d005      	beq.n	801ad1c <RadioSetRxGenericConfig+0x294>
            break;
 801ad10:	e028      	b.n	801ad64 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ad12:	4b0f      	ldr	r3, [pc, #60]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ad14:	2200      	movs	r2, #0
 801ad16:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801ad1a:	e024      	b.n	801ad66 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ad1c:	4b0c      	ldr	r3, [pc, #48]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ad1e:	2201      	movs	r2, #1
 801ad20:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801ad24:	e01f      	b.n	801ad66 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ad26:	68bb      	ldr	r3, [r7, #8]
 801ad28:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ad2c:	2b0b      	cmp	r3, #11
 801ad2e:	d004      	beq.n	801ad3a <RadioSetRxGenericConfig+0x2b2>
 801ad30:	68bb      	ldr	r3, [r7, #8]
 801ad32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ad36:	2b0c      	cmp	r3, #12
 801ad38:	d104      	bne.n	801ad44 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ad3a:	4b05      	ldr	r3, [pc, #20]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ad3c:	2201      	movs	r2, #1
 801ad3e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801ad42:	e010      	b.n	801ad66 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ad44:	4b02      	ldr	r3, [pc, #8]	@ (801ad50 <RadioSetRxGenericConfig+0x2c8>)
 801ad46:	2200      	movs	r2, #0
 801ad48:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801ad4c:	e00b      	b.n	801ad66 <RadioSetRxGenericConfig+0x2de>
 801ad4e:	bf00      	nop
 801ad50:	20001bfc 	.word	0x20001bfc
 801ad54:	20001bf8 	.word	0x20001bf8
 801ad58:	20001c70 	.word	0x20001c70
 801ad5c:	20001c34 	.word	0x20001c34
 801ad60:	20001c0a 	.word	0x20001c0a
            break;
 801ad64:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ad66:	4b28      	ldr	r3, [pc, #160]	@ (801ae08 <RadioSetRxGenericConfig+0x380>)
 801ad68:	2201      	movs	r2, #1
 801ad6a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ad6c:	68bb      	ldr	r3, [r7, #8]
 801ad6e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801ad70:	4b25      	ldr	r3, [pc, #148]	@ (801ae08 <RadioSetRxGenericConfig+0x380>)
 801ad72:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ad74:	68bb      	ldr	r3, [r7, #8]
 801ad76:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801ad7a:	4b23      	ldr	r3, [pc, #140]	@ (801ae08 <RadioSetRxGenericConfig+0x380>)
 801ad7c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801ad7e:	4a22      	ldr	r2, [pc, #136]	@ (801ae08 <RadioSetRxGenericConfig+0x380>)
 801ad80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801ad84:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ad86:	68bb      	ldr	r3, [r7, #8]
 801ad88:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801ad8c:	4b1e      	ldr	r3, [pc, #120]	@ (801ae08 <RadioSetRxGenericConfig+0x380>)
 801ad8e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ad92:	68bb      	ldr	r3, [r7, #8]
 801ad94:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 801ad98:	4b1b      	ldr	r3, [pc, #108]	@ (801ae08 <RadioSetRxGenericConfig+0x380>)
 801ad9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801ad9e:	f7ff f98c 	bl	801a0ba <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ada2:	2001      	movs	r0, #1
 801ada4:	f7fe fb20 	bl	80193e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ada8:	4818      	ldr	r0, [pc, #96]	@ (801ae0c <RadioSetRxGenericConfig+0x384>)
 801adaa:	f000 ff7d 	bl	801bca8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801adae:	4818      	ldr	r0, [pc, #96]	@ (801ae10 <RadioSetRxGenericConfig+0x388>)
 801adb0:	f001 f84c 	bl	801be4c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801adb4:	4b14      	ldr	r3, [pc, #80]	@ (801ae08 <RadioSetRxGenericConfig+0x380>)
 801adb6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801adba:	2b01      	cmp	r3, #1
 801adbc:	d10d      	bne.n	801adda <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801adbe:	f240 7036 	movw	r0, #1846	@ 0x736
 801adc2:	f001 f9ad 	bl	801c120 <SUBGRF_ReadRegister>
 801adc6:	4603      	mov	r3, r0
 801adc8:	f023 0304 	bic.w	r3, r3, #4
 801adcc:	b2db      	uxtb	r3, r3
 801adce:	4619      	mov	r1, r3
 801add0:	f240 7036 	movw	r0, #1846	@ 0x736
 801add4:	f001 f982 	bl	801c0dc <SUBGRF_WriteRegister>
 801add8:	e00c      	b.n	801adf4 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801adda:	f240 7036 	movw	r0, #1846	@ 0x736
 801adde:	f001 f99f 	bl	801c120 <SUBGRF_ReadRegister>
 801ade2:	4603      	mov	r3, r0
 801ade4:	f043 0304 	orr.w	r3, r3, #4
 801ade8:	b2db      	uxtb	r3, r3
 801adea:	4619      	mov	r1, r3
 801adec:	f240 7036 	movw	r0, #1846	@ 0x736
 801adf0:	f001 f974 	bl	801c0dc <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801adf4:	4b04      	ldr	r3, [pc, #16]	@ (801ae08 <RadioSetRxGenericConfig+0x380>)
 801adf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801adfa:	609a      	str	r2, [r3, #8]
        break;
 801adfc:	bf00      	nop
    }
    return status;
 801adfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ae00:	4618      	mov	r0, r3
 801ae02:	3730      	adds	r7, #48	@ 0x30
 801ae04:	46bd      	mov	sp, r7
 801ae06:	bd80      	pop	{r7, pc}
 801ae08:	20001bfc 	.word	0x20001bfc
 801ae0c:	20001c34 	.word	0x20001c34
 801ae10:	20001c0a 	.word	0x20001c0a

0801ae14 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801ae14:	b580      	push	{r7, lr}
 801ae16:	b08e      	sub	sp, #56	@ 0x38
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	60b9      	str	r1, [r7, #8]
 801ae1c:	607b      	str	r3, [r7, #4]
 801ae1e:	4603      	mov	r3, r0
 801ae20:	73fb      	strb	r3, [r7, #15]
 801ae22:	4613      	mov	r3, r2
 801ae24:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ae26:	2300      	movs	r3, #0
 801ae28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ae2e:	f001 fc56 	bl	801c6de <RFW_DeInit>
    switch( modem )
 801ae32:	7bfb      	ldrb	r3, [r7, #15]
 801ae34:	2b03      	cmp	r3, #3
 801ae36:	f200 8204 	bhi.w	801b242 <RadioSetTxGenericConfig+0x42e>
 801ae3a:	a201      	add	r2, pc, #4	@ (adr r2, 801ae40 <RadioSetTxGenericConfig+0x2c>)
 801ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae40:	0801afc5 	.word	0x0801afc5
 801ae44:	0801b10d 	.word	0x0801b10d
 801ae48:	0801b205 	.word	0x0801b205
 801ae4c:	0801ae51 	.word	0x0801ae51
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	7c9b      	ldrb	r3, [r3, #18]
 801ae54:	2b08      	cmp	r3, #8
 801ae56:	d902      	bls.n	801ae5e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ae58:	f04f 33ff 	mov.w	r3, #4294967295
 801ae5c:	e206      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ae5e:	68bb      	ldr	r3, [r7, #8]
 801ae60:	6899      	ldr	r1, [r3, #8]
 801ae62:	68bb      	ldr	r3, [r7, #8]
 801ae64:	7c9b      	ldrb	r3, [r3, #18]
 801ae66:	461a      	mov	r2, r3
 801ae68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	f001 fd29 	bl	801c8c4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d102      	bne.n	801ae80 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801ae7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ae7e:	e1f5      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801ae80:	68bb      	ldr	r3, [r7, #8]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	f242 7210 	movw	r2, #10000	@ 0x2710
 801ae88:	4293      	cmp	r3, r2
 801ae8a:	d813      	bhi.n	801aeb4 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801ae8c:	2302      	movs	r3, #2
 801ae8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801ae92:	4b99      	ldr	r3, [pc, #612]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801ae94:	2203      	movs	r2, #3
 801ae96:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801ae98:	4b97      	ldr	r3, [pc, #604]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801ae9a:	2203      	movs	r2, #3
 801ae9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801aea0:	68bb      	ldr	r3, [r7, #8]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	4a94      	ldr	r2, [pc, #592]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aea6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801aea8:	68bb      	ldr	r3, [r7, #8]
 801aeaa:	7cda      	ldrb	r2, [r3, #19]
 801aeac:	4b92      	ldr	r3, [pc, #584]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aeae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801aeb2:	e017      	b.n	801aee4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801aeba:	4b8f      	ldr	r3, [pc, #572]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aebc:	2200      	movs	r2, #0
 801aebe:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801aec0:	4b8d      	ldr	r3, [pc, #564]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aec2:	2200      	movs	r2, #0
 801aec4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801aec8:	68bb      	ldr	r3, [r7, #8]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	4a8a      	ldr	r2, [pc, #552]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aece:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801aed0:	68bb      	ldr	r3, [r7, #8]
 801aed2:	7cda      	ldrb	r2, [r3, #19]
 801aed4:	4b88      	ldr	r3, [pc, #544]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801aeda:	68bb      	ldr	r3, [r7, #8]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	089b      	lsrs	r3, r3, #2
 801aee0:	4a85      	ldr	r2, [pc, #532]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aee2:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801aee4:	68bb      	ldr	r3, [r7, #8]
 801aee6:	685b      	ldr	r3, [r3, #4]
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	00db      	lsls	r3, r3, #3
 801aeec:	b29a      	uxth	r2, r3
 801aeee:	4b82      	ldr	r3, [pc, #520]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aef0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801aef2:	4b81      	ldr	r3, [pc, #516]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aef4:	2204      	movs	r2, #4
 801aef6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801aef8:	68bb      	ldr	r3, [r7, #8]
 801aefa:	7c9b      	ldrb	r3, [r3, #18]
 801aefc:	00db      	lsls	r3, r3, #3
 801aefe:	b2da      	uxtb	r2, r3
 801af00:	4b7d      	ldr	r3, [pc, #500]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801af02:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801af04:	4b7c      	ldr	r3, [pc, #496]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801af06:	2200      	movs	r2, #0
 801af08:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801af0a:	68bb      	ldr	r3, [r7, #8]
 801af0c:	7d9b      	ldrb	r3, [r3, #22]
 801af0e:	2b02      	cmp	r3, #2
 801af10:	d003      	beq.n	801af1a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	7d1b      	ldrb	r3, [r3, #20]
 801af16:	2b02      	cmp	r3, #2
 801af18:	d12b      	bne.n	801af72 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801af1a:	68bb      	ldr	r3, [r7, #8]
 801af1c:	7d5b      	ldrb	r3, [r3, #21]
 801af1e:	2bf1      	cmp	r3, #241	@ 0xf1
 801af20:	d00a      	beq.n	801af38 <RadioSetTxGenericConfig+0x124>
 801af22:	68bb      	ldr	r3, [r7, #8]
 801af24:	7d5b      	ldrb	r3, [r3, #21]
 801af26:	2bf2      	cmp	r3, #242	@ 0xf2
 801af28:	d006      	beq.n	801af38 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801af2a:	68bb      	ldr	r3, [r7, #8]
 801af2c:	7d5b      	ldrb	r3, [r3, #21]
 801af2e:	2b01      	cmp	r3, #1
 801af30:	d002      	beq.n	801af38 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801af32:	f04f 33ff 	mov.w	r3, #4294967295
 801af36:	e199      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801af38:	68bb      	ldr	r3, [r7, #8]
 801af3a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801af3c:	2301      	movs	r3, #1
 801af3e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801af42:	4b6e      	ldr	r3, [pc, #440]	@ (801b0fc <RadioSetTxGenericConfig+0x2e8>)
 801af44:	6819      	ldr	r1, [r3, #0]
 801af46:	f107 0320 	add.w	r3, r7, #32
 801af4a:	4a6d      	ldr	r2, [pc, #436]	@ (801b100 <RadioSetTxGenericConfig+0x2ec>)
 801af4c:	4618      	mov	r0, r3
 801af4e:	f001 fbb9 	bl	801c6c4 <RFW_Init>
 801af52:	4603      	mov	r3, r0
 801af54:	2b00      	cmp	r3, #0
 801af56:	d002      	beq.n	801af5e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801af58:	f04f 33ff 	mov.w	r3, #4294967295
 801af5c:	e186      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801af5e:	4b66      	ldr	r3, [pc, #408]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801af60:	2200      	movs	r2, #0
 801af62:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801af64:	4b64      	ldr	r3, [pc, #400]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801af66:	2201      	movs	r2, #1
 801af68:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801af6a:	4b63      	ldr	r3, [pc, #396]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801af6c:	2200      	movs	r2, #0
 801af6e:	755a      	strb	r2, [r3, #21]
        {
 801af70:	e00b      	b.n	801af8a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801af72:	68bb      	ldr	r3, [r7, #8]
 801af74:	7d5a      	ldrb	r2, [r3, #21]
 801af76:	4b60      	ldr	r3, [pc, #384]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801af78:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801af7a:	68bb      	ldr	r3, [r7, #8]
 801af7c:	7d9a      	ldrb	r2, [r3, #22]
 801af7e:	4b5e      	ldr	r3, [pc, #376]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801af80:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801af82:	68bb      	ldr	r3, [r7, #8]
 801af84:	7d1a      	ldrb	r2, [r3, #20]
 801af86:	4b5c      	ldr	r3, [pc, #368]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801af88:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801af8a:	f7ff f896 	bl	801a0ba <RadioStandby>
        RadioSetModem( radio_modem );
 801af8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801af92:	4618      	mov	r0, r3
 801af94:	f7fe fa28 	bl	80193e8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801af98:	485a      	ldr	r0, [pc, #360]	@ (801b104 <RadioSetTxGenericConfig+0x2f0>)
 801af9a:	f000 fe85 	bl	801bca8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801af9e:	485a      	ldr	r0, [pc, #360]	@ (801b108 <RadioSetTxGenericConfig+0x2f4>)
 801afa0:	f000 ff54 	bl	801be4c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801afa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801afa8:	4618      	mov	r0, r3
 801afaa:	f000 fa18 	bl	801b3de <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801afae:	68bb      	ldr	r3, [r7, #8]
 801afb0:	8a1b      	ldrh	r3, [r3, #16]
 801afb2:	4618      	mov	r0, r3
 801afb4:	f000 fa62 	bl	801b47c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801afb8:	68bb      	ldr	r3, [r7, #8]
 801afba:	899b      	ldrh	r3, [r3, #12]
 801afbc:	4618      	mov	r0, r3
 801afbe:	f000 fa3d 	bl	801b43c <SUBGRF_SetCrcPolynomial>
        break;
 801afc2:	e13f      	b.n	801b244 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d102      	bne.n	801afd2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801afcc:	f04f 33ff 	mov.w	r3, #4294967295
 801afd0:	e14c      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801afd2:	68bb      	ldr	r3, [r7, #8]
 801afd4:	7c9b      	ldrb	r3, [r3, #18]
 801afd6:	2b08      	cmp	r3, #8
 801afd8:	d902      	bls.n	801afe0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801afda:	f04f 33ff 	mov.w	r3, #4294967295
 801afde:	e145      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801afe0:	68bb      	ldr	r3, [r7, #8]
 801afe2:	6899      	ldr	r1, [r3, #8]
 801afe4:	68bb      	ldr	r3, [r7, #8]
 801afe6:	7c9b      	ldrb	r3, [r3, #18]
 801afe8:	461a      	mov	r2, r3
 801afea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801afee:	4618      	mov	r0, r3
 801aff0:	f001 fc68 	bl	801c8c4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801aff4:	4b40      	ldr	r3, [pc, #256]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801aff6:	2200      	movs	r2, #0
 801aff8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801affc:	68bb      	ldr	r3, [r7, #8]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	4a3d      	ldr	r2, [pc, #244]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b002:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b004:	68bb      	ldr	r3, [r7, #8]
 801b006:	7cda      	ldrb	r2, [r3, #19]
 801b008:	4b3b      	ldr	r3, [pc, #236]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b00a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801b00e:	68bb      	ldr	r3, [r7, #8]
 801b010:	699b      	ldr	r3, [r3, #24]
 801b012:	4a39      	ldr	r2, [pc, #228]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b014:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b016:	4b38      	ldr	r3, [pc, #224]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b018:	2200      	movs	r2, #0
 801b01a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801b01c:	68bb      	ldr	r3, [r7, #8]
 801b01e:	685b      	ldr	r3, [r3, #4]
 801b020:	b29b      	uxth	r3, r3
 801b022:	00db      	lsls	r3, r3, #3
 801b024:	b29a      	uxth	r2, r3
 801b026:	4b34      	ldr	r3, [pc, #208]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b028:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b02a:	4b33      	ldr	r3, [pc, #204]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b02c:	2204      	movs	r2, #4
 801b02e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b030:	68bb      	ldr	r3, [r7, #8]
 801b032:	7c9b      	ldrb	r3, [r3, #18]
 801b034:	00db      	lsls	r3, r3, #3
 801b036:	b2da      	uxtb	r2, r3
 801b038:	4b2f      	ldr	r3, [pc, #188]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b03a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b03c:	4b2e      	ldr	r3, [pc, #184]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b03e:	2200      	movs	r2, #0
 801b040:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b042:	68bb      	ldr	r3, [r7, #8]
 801b044:	7d9b      	ldrb	r3, [r3, #22]
 801b046:	2b02      	cmp	r3, #2
 801b048:	d003      	beq.n	801b052 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b04a:	68bb      	ldr	r3, [r7, #8]
 801b04c:	7d1b      	ldrb	r3, [r3, #20]
 801b04e:	2b02      	cmp	r3, #2
 801b050:	d12a      	bne.n	801b0a8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b052:	68bb      	ldr	r3, [r7, #8]
 801b054:	7d5b      	ldrb	r3, [r3, #21]
 801b056:	2bf1      	cmp	r3, #241	@ 0xf1
 801b058:	d00a      	beq.n	801b070 <RadioSetTxGenericConfig+0x25c>
 801b05a:	68bb      	ldr	r3, [r7, #8]
 801b05c:	7d5b      	ldrb	r3, [r3, #21]
 801b05e:	2bf2      	cmp	r3, #242	@ 0xf2
 801b060:	d006      	beq.n	801b070 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b062:	68bb      	ldr	r3, [r7, #8]
 801b064:	7d5b      	ldrb	r3, [r3, #21]
 801b066:	2b01      	cmp	r3, #1
 801b068:	d002      	beq.n	801b070 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801b06a:	f04f 33ff 	mov.w	r3, #4294967295
 801b06e:	e0fd      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801b070:	2301      	movs	r3, #1
 801b072:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801b074:	68bb      	ldr	r3, [r7, #8]
 801b076:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b078:	4b20      	ldr	r3, [pc, #128]	@ (801b0fc <RadioSetTxGenericConfig+0x2e8>)
 801b07a:	6819      	ldr	r1, [r3, #0]
 801b07c:	f107 0314 	add.w	r3, r7, #20
 801b080:	4a1f      	ldr	r2, [pc, #124]	@ (801b100 <RadioSetTxGenericConfig+0x2ec>)
 801b082:	4618      	mov	r0, r3
 801b084:	f001 fb1e 	bl	801c6c4 <RFW_Init>
 801b088:	4603      	mov	r3, r0
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d002      	beq.n	801b094 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801b08e:	f04f 33ff 	mov.w	r3, #4294967295
 801b092:	e0eb      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b094:	4b18      	ldr	r3, [pc, #96]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b096:	2200      	movs	r2, #0
 801b098:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b09a:	4b17      	ldr	r3, [pc, #92]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b09c:	2201      	movs	r2, #1
 801b09e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b0a0:	4b15      	ldr	r3, [pc, #84]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	755a      	strb	r2, [r3, #21]
        {
 801b0a6:	e00b      	b.n	801b0c0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	7d5a      	ldrb	r2, [r3, #21]
 801b0ac:	4b12      	ldr	r3, [pc, #72]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b0ae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b0b0:	68bb      	ldr	r3, [r7, #8]
 801b0b2:	7d9a      	ldrb	r2, [r3, #22]
 801b0b4:	4b10      	ldr	r3, [pc, #64]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b0b6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801b0b8:	68bb      	ldr	r3, [r7, #8]
 801b0ba:	7d1a      	ldrb	r2, [r3, #20]
 801b0bc:	4b0e      	ldr	r3, [pc, #56]	@ (801b0f8 <RadioSetTxGenericConfig+0x2e4>)
 801b0be:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b0c0:	f7fe fffb 	bl	801a0ba <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b0c4:	2000      	movs	r0, #0
 801b0c6:	f7fe f98f 	bl	80193e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b0ca:	480e      	ldr	r0, [pc, #56]	@ (801b104 <RadioSetTxGenericConfig+0x2f0>)
 801b0cc:	f000 fdec 	bl	801bca8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b0d0:	480d      	ldr	r0, [pc, #52]	@ (801b108 <RadioSetTxGenericConfig+0x2f4>)
 801b0d2:	f000 febb 	bl	801be4c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b0d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801b0da:	4618      	mov	r0, r3
 801b0dc:	f000 f97f 	bl	801b3de <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	8a1b      	ldrh	r3, [r3, #16]
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	f000 f9c9 	bl	801b47c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b0ea:	68bb      	ldr	r3, [r7, #8]
 801b0ec:	899b      	ldrh	r3, [r3, #12]
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	f000 f9a4 	bl	801b43c <SUBGRF_SetCrcPolynomial>
        break;
 801b0f4:	e0a6      	b.n	801b244 <RadioSetTxGenericConfig+0x430>
 801b0f6:	bf00      	nop
 801b0f8:	20001bfc 	.word	0x20001bfc
 801b0fc:	20001bf8 	.word	0x20001bf8
 801b100:	20001c58 	.word	0x20001c58
 801b104:	20001c34 	.word	0x20001c34
 801b108:	20001c0a 	.word	0x20001c0a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b10c:	4b59      	ldr	r3, [pc, #356]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b10e:	2201      	movs	r2, #1
 801b110:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b114:	68bb      	ldr	r3, [r7, #8]
 801b116:	781a      	ldrb	r2, [r3, #0]
 801b118:	4b56      	ldr	r3, [pc, #344]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b11a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b11e:	68bb      	ldr	r3, [r7, #8]
 801b120:	785a      	ldrb	r2, [r3, #1]
 801b122:	4b54      	ldr	r3, [pc, #336]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b128:	68bb      	ldr	r3, [r7, #8]
 801b12a:	789a      	ldrb	r2, [r3, #2]
 801b12c:	4b51      	ldr	r3, [pc, #324]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b12e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801b132:	68bb      	ldr	r3, [r7, #8]
 801b134:	78db      	ldrb	r3, [r3, #3]
 801b136:	2b02      	cmp	r3, #2
 801b138:	d010      	beq.n	801b15c <RadioSetTxGenericConfig+0x348>
 801b13a:	2b02      	cmp	r3, #2
 801b13c:	dc20      	bgt.n	801b180 <RadioSetTxGenericConfig+0x36c>
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d002      	beq.n	801b148 <RadioSetTxGenericConfig+0x334>
 801b142:	2b01      	cmp	r3, #1
 801b144:	d005      	beq.n	801b152 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801b146:	e01b      	b.n	801b180 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b148:	4b4a      	ldr	r3, [pc, #296]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b14a:	2200      	movs	r2, #0
 801b14c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801b150:	e017      	b.n	801b182 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b152:	4b48      	ldr	r3, [pc, #288]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b154:	2201      	movs	r2, #1
 801b156:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801b15a:	e012      	b.n	801b182 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b15c:	68bb      	ldr	r3, [r7, #8]
 801b15e:	781b      	ldrb	r3, [r3, #0]
 801b160:	2b0b      	cmp	r3, #11
 801b162:	d003      	beq.n	801b16c <RadioSetTxGenericConfig+0x358>
 801b164:	68bb      	ldr	r3, [r7, #8]
 801b166:	781b      	ldrb	r3, [r3, #0]
 801b168:	2b0c      	cmp	r3, #12
 801b16a:	d104      	bne.n	801b176 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b16c:	4b41      	ldr	r3, [pc, #260]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b16e:	2201      	movs	r2, #1
 801b170:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801b174:	e005      	b.n	801b182 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b176:	4b3f      	ldr	r3, [pc, #252]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b178:	2200      	movs	r2, #0
 801b17a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801b17e:	e000      	b.n	801b182 <RadioSetTxGenericConfig+0x36e>
            break;
 801b180:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b182:	4b3c      	ldr	r3, [pc, #240]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b184:	2201      	movs	r2, #1
 801b186:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	889a      	ldrh	r2, [r3, #4]
 801b18c:	4b39      	ldr	r3, [pc, #228]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b18e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b190:	68bb      	ldr	r3, [r7, #8]
 801b192:	799a      	ldrb	r2, [r3, #6]
 801b194:	4b37      	ldr	r3, [pc, #220]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b196:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b198:	68bb      	ldr	r3, [r7, #8]
 801b19a:	79da      	ldrb	r2, [r3, #7]
 801b19c:	4b35      	ldr	r3, [pc, #212]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b19e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b1a2:	68bb      	ldr	r3, [r7, #8]
 801b1a4:	7a1a      	ldrb	r2, [r3, #8]
 801b1a6:	4b33      	ldr	r3, [pc, #204]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b1a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801b1ac:	f7fe ff85 	bl	801a0ba <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b1b0:	2001      	movs	r0, #1
 801b1b2:	f7fe f919 	bl	80193e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b1b6:	4830      	ldr	r0, [pc, #192]	@ (801b278 <RadioSetTxGenericConfig+0x464>)
 801b1b8:	f000 fd76 	bl	801bca8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b1bc:	482f      	ldr	r0, [pc, #188]	@ (801b27c <RadioSetTxGenericConfig+0x468>)
 801b1be:	f000 fe45 	bl	801be4c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801b1c2:	4b2c      	ldr	r3, [pc, #176]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b1c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801b1c8:	2b06      	cmp	r3, #6
 801b1ca:	d10d      	bne.n	801b1e8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b1cc:	f640 0089 	movw	r0, #2185	@ 0x889
 801b1d0:	f000 ffa6 	bl	801c120 <SUBGRF_ReadRegister>
 801b1d4:	4603      	mov	r3, r0
 801b1d6:	f023 0304 	bic.w	r3, r3, #4
 801b1da:	b2db      	uxtb	r3, r3
 801b1dc:	4619      	mov	r1, r3
 801b1de:	f640 0089 	movw	r0, #2185	@ 0x889
 801b1e2:	f000 ff7b 	bl	801c0dc <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801b1e6:	e02d      	b.n	801b244 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b1e8:	f640 0089 	movw	r0, #2185	@ 0x889
 801b1ec:	f000 ff98 	bl	801c120 <SUBGRF_ReadRegister>
 801b1f0:	4603      	mov	r3, r0
 801b1f2:	f043 0304 	orr.w	r3, r3, #4
 801b1f6:	b2db      	uxtb	r3, r3
 801b1f8:	4619      	mov	r1, r3
 801b1fa:	f640 0089 	movw	r0, #2185	@ 0x889
 801b1fe:	f000 ff6d 	bl	801c0dc <SUBGRF_WriteRegister>
        break;
 801b202:	e01f      	b.n	801b244 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801b204:	68bb      	ldr	r3, [r7, #8]
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d004      	beq.n	801b216 <RadioSetTxGenericConfig+0x402>
 801b20c:	68bb      	ldr	r3, [r7, #8]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b214:	d902      	bls.n	801b21c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801b216:	f04f 33ff 	mov.w	r3, #4294967295
 801b21a:	e027      	b.n	801b26c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801b21c:	2003      	movs	r0, #3
 801b21e:	f7fe f8e3 	bl	80193e8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b222:	4b14      	ldr	r3, [pc, #80]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b224:	2202      	movs	r2, #2
 801b226:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	4a11      	ldr	r2, [pc, #68]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b230:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b232:	4b10      	ldr	r3, [pc, #64]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b234:	2216      	movs	r2, #22
 801b236:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b23a:	480f      	ldr	r0, [pc, #60]	@ (801b278 <RadioSetTxGenericConfig+0x464>)
 801b23c:	f000 fd34 	bl	801bca8 <SUBGRF_SetModulationParams>
        break;
 801b240:	e000      	b.n	801b244 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801b242:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801b244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b248:	4618      	mov	r0, r3
 801b24a:	f001 f87d 	bl	801c348 <SUBGRF_SetRfTxPower>
 801b24e:	4603      	mov	r3, r0
 801b250:	461a      	mov	r2, r3
 801b252:	4b08      	ldr	r3, [pc, #32]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b254:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801b258:	4b06      	ldr	r3, [pc, #24]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b25a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801b25e:	4618      	mov	r0, r3
 801b260:	f001 fa51 	bl	801c706 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801b264:	4a03      	ldr	r2, [pc, #12]	@ (801b274 <RadioSetTxGenericConfig+0x460>)
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	6053      	str	r3, [r2, #4]
    return 0;
 801b26a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b26c:	4618      	mov	r0, r3
 801b26e:	3738      	adds	r7, #56	@ 0x38
 801b270:	46bd      	mov	sp, r7
 801b272:	bd80      	pop	{r7, pc}
 801b274:	20001bfc 	.word	0x20001bfc
 801b278:	20001c34 	.word	0x20001c34
 801b27c:	20001c0a 	.word	0x20001c0a

0801b280 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801b280:	b480      	push	{r7}
 801b282:	b085      	sub	sp, #20
 801b284:	af00      	add	r7, sp, #0
 801b286:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b288:	2301      	movs	r3, #1
 801b28a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b28e:	4618      	mov	r0, r3
 801b290:	3714      	adds	r7, #20
 801b292:	46bd      	mov	sp, r7
 801b294:	bc80      	pop	{r7}
 801b296:	4770      	bx	lr

0801b298 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801b298:	b480      	push	{r7}
 801b29a:	b083      	sub	sp, #12
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	6078      	str	r0, [r7, #4]
 801b2a0:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b2a2:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	370c      	adds	r7, #12
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	bc80      	pop	{r7}
 801b2ac:	4770      	bx	lr
	...

0801b2b0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b084      	sub	sp, #16
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d002      	beq.n	801b2c4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801b2be:	4a1d      	ldr	r2, [pc, #116]	@ (801b334 <SUBGRF_Init+0x84>)
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801b2c4:	f7e7 fdfa 	bl	8002ebc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b2c8:	2002      	movs	r0, #2
 801b2ca:	f001 f919 	bl	801c500 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801b2ce:	4b1a      	ldr	r3, [pc, #104]	@ (801b338 <SUBGRF_Init+0x88>)
 801b2d0:	2200      	movs	r2, #0
 801b2d2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801b2d4:	2000      	movs	r0, #0
 801b2d6:	f000 f97d 	bl	801b5d4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801b2da:	f7f1 fab5 	bl	800c848 <RBI_IsTCXO>
 801b2de:	4603      	mov	r3, r0
 801b2e0:	2b01      	cmp	r3, #1
 801b2e2:	d10e      	bne.n	801b302 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801b2e4:	2140      	movs	r1, #64	@ 0x40
 801b2e6:	2001      	movs	r0, #1
 801b2e8:	f000 fb82 	bl	801b9f0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801b2ec:	2100      	movs	r1, #0
 801b2ee:	f640 1011 	movw	r0, #2321	@ 0x911
 801b2f2:	f000 fef3 	bl	801c0dc <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801b2f6:	237f      	movs	r3, #127	@ 0x7f
 801b2f8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801b2fa:	7b38      	ldrb	r0, [r7, #12]
 801b2fc:	f000 fa8b 	bl	801b816 <SUBGRF_Calibrate>
 801b300:	e009      	b.n	801b316 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b302:	2120      	movs	r1, #32
 801b304:	f640 1011 	movw	r0, #2321	@ 0x911
 801b308:	f000 fee8 	bl	801c0dc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b30c:	2120      	movs	r1, #32
 801b30e:	f640 1012 	movw	r0, #2322	@ 0x912
 801b312:	f000 fee3 	bl	801c0dc <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b316:	210e      	movs	r1, #14
 801b318:	f640 101f 	movw	r0, #2335	@ 0x91f
 801b31c:	f000 fede 	bl	801c0dc <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801b320:	f7f1 fa76 	bl	800c810 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b324:	4b05      	ldr	r3, [pc, #20]	@ (801b33c <SUBGRF_Init+0x8c>)
 801b326:	2201      	movs	r2, #1
 801b328:	701a      	strb	r2, [r3, #0]
}
 801b32a:	bf00      	nop
 801b32c:	3710      	adds	r7, #16
 801b32e:	46bd      	mov	sp, r7
 801b330:	bd80      	pop	{r7, pc}
 801b332:	bf00      	nop
 801b334:	20001c94 	.word	0x20001c94
 801b338:	20001c90 	.word	0x20001c90
 801b33c:	20001c88 	.word	0x20001c88

0801b340 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b340:	b480      	push	{r7}
 801b342:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b344:	4b02      	ldr	r3, [pc, #8]	@ (801b350 <SUBGRF_GetOperatingMode+0x10>)
 801b346:	781b      	ldrb	r3, [r3, #0]
}
 801b348:	4618      	mov	r0, r3
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bc80      	pop	{r7}
 801b34e:	4770      	bx	lr
 801b350:	20001c88 	.word	0x20001c88

0801b354 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b354:	b580      	push	{r7, lr}
 801b356:	b082      	sub	sp, #8
 801b358:	af00      	add	r7, sp, #0
 801b35a:	6078      	str	r0, [r7, #4]
 801b35c:	460b      	mov	r3, r1
 801b35e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b360:	78fb      	ldrb	r3, [r7, #3]
 801b362:	461a      	mov	r2, r3
 801b364:	6879      	ldr	r1, [r7, #4]
 801b366:	2000      	movs	r0, #0
 801b368:	f000 ff3e 	bl	801c1e8 <SUBGRF_WriteBuffer>
}
 801b36c:	bf00      	nop
 801b36e:	3708      	adds	r7, #8
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}

0801b374 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b086      	sub	sp, #24
 801b378:	af00      	add	r7, sp, #0
 801b37a:	60f8      	str	r0, [r7, #12]
 801b37c:	60b9      	str	r1, [r7, #8]
 801b37e:	4613      	mov	r3, r2
 801b380:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b382:	2300      	movs	r3, #0
 801b384:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b386:	f107 0317 	add.w	r3, r7, #23
 801b38a:	4619      	mov	r1, r3
 801b38c:	68b8      	ldr	r0, [r7, #8]
 801b38e:	f000 fe27 	bl	801bfe0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b392:	68bb      	ldr	r3, [r7, #8]
 801b394:	781b      	ldrb	r3, [r3, #0]
 801b396:	79fa      	ldrb	r2, [r7, #7]
 801b398:	429a      	cmp	r2, r3
 801b39a:	d201      	bcs.n	801b3a0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b39c:	2301      	movs	r3, #1
 801b39e:	e007      	b.n	801b3b0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b3a0:	7df8      	ldrb	r0, [r7, #23]
 801b3a2:	68bb      	ldr	r3, [r7, #8]
 801b3a4:	781b      	ldrb	r3, [r3, #0]
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	68f9      	ldr	r1, [r7, #12]
 801b3aa:	f000 ff3f 	bl	801c22c <SUBGRF_ReadBuffer>

    return 0;
 801b3ae:	2300      	movs	r3, #0
}
 801b3b0:	4618      	mov	r0, r3
 801b3b2:	3718      	adds	r7, #24
 801b3b4:	46bd      	mov	sp, r7
 801b3b6:	bd80      	pop	{r7, pc}

0801b3b8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b084      	sub	sp, #16
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	60f8      	str	r0, [r7, #12]
 801b3c0:	460b      	mov	r3, r1
 801b3c2:	607a      	str	r2, [r7, #4]
 801b3c4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b3c6:	7afb      	ldrb	r3, [r7, #11]
 801b3c8:	4619      	mov	r1, r3
 801b3ca:	68f8      	ldr	r0, [r7, #12]
 801b3cc:	f7ff ffc2 	bl	801b354 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b3d0:	6878      	ldr	r0, [r7, #4]
 801b3d2:	f000 f91b 	bl	801b60c <SUBGRF_SetTx>
}
 801b3d6:	bf00      	nop
 801b3d8:	3710      	adds	r7, #16
 801b3da:	46bd      	mov	sp, r7
 801b3dc:	bd80      	pop	{r7, pc}

0801b3de <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b3de:	b580      	push	{r7, lr}
 801b3e0:	b082      	sub	sp, #8
 801b3e2:	af00      	add	r7, sp, #0
 801b3e4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b3e6:	2208      	movs	r2, #8
 801b3e8:	6879      	ldr	r1, [r7, #4]
 801b3ea:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801b3ee:	f000 feb7 	bl	801c160 <SUBGRF_WriteRegisters>
    return 0;
 801b3f2:	2300      	movs	r3, #0
}
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	3708      	adds	r7, #8
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	bd80      	pop	{r7, pc}

0801b3fc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b3fc:	b580      	push	{r7, lr}
 801b3fe:	b084      	sub	sp, #16
 801b400:	af00      	add	r7, sp, #0
 801b402:	4603      	mov	r3, r0
 801b404:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b406:	88fb      	ldrh	r3, [r7, #6]
 801b408:	0a1b      	lsrs	r3, r3, #8
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	b2db      	uxtb	r3, r3
 801b40e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b410:	88fb      	ldrh	r3, [r7, #6]
 801b412:	b2db      	uxtb	r3, r3
 801b414:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b416:	f000 fb6f 	bl	801baf8 <SUBGRF_GetPacketType>
 801b41a:	4603      	mov	r3, r0
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d108      	bne.n	801b432 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b420:	f107 030c 	add.w	r3, r7, #12
 801b424:	2202      	movs	r2, #2
 801b426:	4619      	mov	r1, r3
 801b428:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801b42c:	f000 fe98 	bl	801c160 <SUBGRF_WriteRegisters>
            break;
 801b430:	e000      	b.n	801b434 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b432:	bf00      	nop
    }
}
 801b434:	bf00      	nop
 801b436:	3710      	adds	r7, #16
 801b438:	46bd      	mov	sp, r7
 801b43a:	bd80      	pop	{r7, pc}

0801b43c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b084      	sub	sp, #16
 801b440:	af00      	add	r7, sp, #0
 801b442:	4603      	mov	r3, r0
 801b444:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801b446:	88fb      	ldrh	r3, [r7, #6]
 801b448:	0a1b      	lsrs	r3, r3, #8
 801b44a:	b29b      	uxth	r3, r3
 801b44c:	b2db      	uxtb	r3, r3
 801b44e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801b450:	88fb      	ldrh	r3, [r7, #6]
 801b452:	b2db      	uxtb	r3, r3
 801b454:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b456:	f000 fb4f 	bl	801baf8 <SUBGRF_GetPacketType>
 801b45a:	4603      	mov	r3, r0
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d108      	bne.n	801b472 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801b460:	f107 030c 	add.w	r3, r7, #12
 801b464:	2202      	movs	r2, #2
 801b466:	4619      	mov	r1, r3
 801b468:	f240 60be 	movw	r0, #1726	@ 0x6be
 801b46c:	f000 fe78 	bl	801c160 <SUBGRF_WriteRegisters>
            break;
 801b470:	e000      	b.n	801b474 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801b472:	bf00      	nop
    }
}
 801b474:	bf00      	nop
 801b476:	3710      	adds	r7, #16
 801b478:	46bd      	mov	sp, r7
 801b47a:	bd80      	pop	{r7, pc}

0801b47c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b084      	sub	sp, #16
 801b480:	af00      	add	r7, sp, #0
 801b482:	4603      	mov	r3, r0
 801b484:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801b486:	2300      	movs	r3, #0
 801b488:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801b48a:	f000 fb35 	bl	801baf8 <SUBGRF_GetPacketType>
 801b48e:	4603      	mov	r3, r0
 801b490:	2b00      	cmp	r3, #0
 801b492:	d121      	bne.n	801b4d8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801b494:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801b498:	f000 fe42 	bl	801c120 <SUBGRF_ReadRegister>
 801b49c:	4603      	mov	r3, r0
 801b49e:	f023 0301 	bic.w	r3, r3, #1
 801b4a2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801b4a4:	88fb      	ldrh	r3, [r7, #6]
 801b4a6:	0a1b      	lsrs	r3, r3, #8
 801b4a8:	b29b      	uxth	r3, r3
 801b4aa:	b25b      	sxtb	r3, r3
 801b4ac:	f003 0301 	and.w	r3, r3, #1
 801b4b0:	b25a      	sxtb	r2, r3
 801b4b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4b6:	4313      	orrs	r3, r2
 801b4b8:	b25b      	sxtb	r3, r3
 801b4ba:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801b4bc:	7bfb      	ldrb	r3, [r7, #15]
 801b4be:	4619      	mov	r1, r3
 801b4c0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801b4c4:	f000 fe0a 	bl	801c0dc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801b4c8:	88fb      	ldrh	r3, [r7, #6]
 801b4ca:	b2db      	uxtb	r3, r3
 801b4cc:	4619      	mov	r1, r3
 801b4ce:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801b4d2:	f000 fe03 	bl	801c0dc <SUBGRF_WriteRegister>
            break;
 801b4d6:	e000      	b.n	801b4da <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801b4d8:	bf00      	nop
    }
}
 801b4da:	bf00      	nop
 801b4dc:	3710      	adds	r7, #16
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bd80      	pop	{r7, pc}

0801b4e2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801b4e2:	b580      	push	{r7, lr}
 801b4e4:	b082      	sub	sp, #8
 801b4e6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801b4f4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801b4f8:	f000 fe12 	bl	801c120 <SUBGRF_ReadRegister>
 801b4fc:	4603      	mov	r3, r0
 801b4fe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b500:	79fb      	ldrb	r3, [r7, #7]
 801b502:	f023 0301 	bic.w	r3, r3, #1
 801b506:	b2db      	uxtb	r3, r3
 801b508:	4619      	mov	r1, r3
 801b50a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801b50e:	f000 fde5 	bl	801c0dc <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b512:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801b516:	f000 fe03 	bl	801c120 <SUBGRF_ReadRegister>
 801b51a:	4603      	mov	r3, r0
 801b51c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b51e:	79bb      	ldrb	r3, [r7, #6]
 801b520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b524:	b2db      	uxtb	r3, r3
 801b526:	4619      	mov	r1, r3
 801b528:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801b52c:	f000 fdd6 	bl	801c0dc <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b530:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801b534:	f000 f88a 	bl	801b64c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b538:	463b      	mov	r3, r7
 801b53a:	2204      	movs	r2, #4
 801b53c:	4619      	mov	r1, r3
 801b53e:	f640 0019 	movw	r0, #2073	@ 0x819
 801b542:	f000 fe2f 	bl	801c1a4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b546:	2000      	movs	r0, #0
 801b548:	f000 f844 	bl	801b5d4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b54c:	79fb      	ldrb	r3, [r7, #7]
 801b54e:	4619      	mov	r1, r3
 801b550:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801b554:	f000 fdc2 	bl	801c0dc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b558:	79bb      	ldrb	r3, [r7, #6]
 801b55a:	4619      	mov	r1, r3
 801b55c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801b560:	f000 fdbc 	bl	801c0dc <SUBGRF_WriteRegister>

    return number;
 801b564:	683b      	ldr	r3, [r7, #0]
}
 801b566:	4618      	mov	r0, r3
 801b568:	3708      	adds	r7, #8
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}
	...

0801b570 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b084      	sub	sp, #16
 801b574:	af00      	add	r7, sp, #0
 801b576:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b578:	2000      	movs	r0, #0
 801b57a:	f7f1 f950 	bl	800c81e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b57e:	2002      	movs	r0, #2
 801b580:	f000 ffbe 	bl	801c500 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b584:	793b      	ldrb	r3, [r7, #4]
 801b586:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b58a:	b2db      	uxtb	r3, r3
 801b58c:	009b      	lsls	r3, r3, #2
 801b58e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b590:	793b      	ldrb	r3, [r7, #4]
 801b592:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b596:	b2db      	uxtb	r3, r3
 801b598:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b59a:	b25b      	sxtb	r3, r3
 801b59c:	4313      	orrs	r3, r2
 801b59e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b5a0:	793b      	ldrb	r3, [r7, #4]
 801b5a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b5a6:	b2db      	uxtb	r3, r3
 801b5a8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b5aa:	4313      	orrs	r3, r2
 801b5ac:	b25b      	sxtb	r3, r3
 801b5ae:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b5b0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b5b2:	f107 030f 	add.w	r3, r7, #15
 801b5b6:	2201      	movs	r2, #1
 801b5b8:	4619      	mov	r1, r3
 801b5ba:	2084      	movs	r0, #132	@ 0x84
 801b5bc:	f000 fe58 	bl	801c270 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b5c0:	4b03      	ldr	r3, [pc, #12]	@ (801b5d0 <SUBGRF_SetSleep+0x60>)
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	701a      	strb	r2, [r3, #0]
}
 801b5c6:	bf00      	nop
 801b5c8:	3710      	adds	r7, #16
 801b5ca:	46bd      	mov	sp, r7
 801b5cc:	bd80      	pop	{r7, pc}
 801b5ce:	bf00      	nop
 801b5d0:	20001c88 	.word	0x20001c88

0801b5d4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b082      	sub	sp, #8
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	4603      	mov	r3, r0
 801b5dc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b5de:	1dfb      	adds	r3, r7, #7
 801b5e0:	2201      	movs	r2, #1
 801b5e2:	4619      	mov	r1, r3
 801b5e4:	2080      	movs	r0, #128	@ 0x80
 801b5e6:	f000 fe43 	bl	801c270 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b5ea:	79fb      	ldrb	r3, [r7, #7]
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d103      	bne.n	801b5f8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b5f0:	4b05      	ldr	r3, [pc, #20]	@ (801b608 <SUBGRF_SetStandby+0x34>)
 801b5f2:	2201      	movs	r2, #1
 801b5f4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b5f6:	e002      	b.n	801b5fe <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b5f8:	4b03      	ldr	r3, [pc, #12]	@ (801b608 <SUBGRF_SetStandby+0x34>)
 801b5fa:	2202      	movs	r2, #2
 801b5fc:	701a      	strb	r2, [r3, #0]
}
 801b5fe:	bf00      	nop
 801b600:	3708      	adds	r7, #8
 801b602:	46bd      	mov	sp, r7
 801b604:	bd80      	pop	{r7, pc}
 801b606:	bf00      	nop
 801b608:	20001c88 	.word	0x20001c88

0801b60c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b084      	sub	sp, #16
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b614:	4b0c      	ldr	r3, [pc, #48]	@ (801b648 <SUBGRF_SetTx+0x3c>)
 801b616:	2204      	movs	r2, #4
 801b618:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	0c1b      	lsrs	r3, r3, #16
 801b61e:	b2db      	uxtb	r3, r3
 801b620:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	0a1b      	lsrs	r3, r3, #8
 801b626:	b2db      	uxtb	r3, r3
 801b628:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	b2db      	uxtb	r3, r3
 801b62e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b630:	f107 030c 	add.w	r3, r7, #12
 801b634:	2203      	movs	r2, #3
 801b636:	4619      	mov	r1, r3
 801b638:	2083      	movs	r0, #131	@ 0x83
 801b63a:	f000 fe19 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b63e:	bf00      	nop
 801b640:	3710      	adds	r7, #16
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}
 801b646:	bf00      	nop
 801b648:	20001c88 	.word	0x20001c88

0801b64c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b64c:	b580      	push	{r7, lr}
 801b64e:	b084      	sub	sp, #16
 801b650:	af00      	add	r7, sp, #0
 801b652:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b654:	4b0c      	ldr	r3, [pc, #48]	@ (801b688 <SUBGRF_SetRx+0x3c>)
 801b656:	2205      	movs	r2, #5
 801b658:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	0c1b      	lsrs	r3, r3, #16
 801b65e:	b2db      	uxtb	r3, r3
 801b660:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	0a1b      	lsrs	r3, r3, #8
 801b666:	b2db      	uxtb	r3, r3
 801b668:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	b2db      	uxtb	r3, r3
 801b66e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b670:	f107 030c 	add.w	r3, r7, #12
 801b674:	2203      	movs	r2, #3
 801b676:	4619      	mov	r1, r3
 801b678:	2082      	movs	r0, #130	@ 0x82
 801b67a:	f000 fdf9 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b67e:	bf00      	nop
 801b680:	3710      	adds	r7, #16
 801b682:	46bd      	mov	sp, r7
 801b684:	bd80      	pop	{r7, pc}
 801b686:	bf00      	nop
 801b688:	20001c88 	.word	0x20001c88

0801b68c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b084      	sub	sp, #16
 801b690:	af00      	add	r7, sp, #0
 801b692:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b694:	4b0e      	ldr	r3, [pc, #56]	@ (801b6d0 <SUBGRF_SetRxBoosted+0x44>)
 801b696:	2205      	movs	r2, #5
 801b698:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b69a:	2197      	movs	r1, #151	@ 0x97
 801b69c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801b6a0:	f000 fd1c 	bl	801c0dc <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	0c1b      	lsrs	r3, r3, #16
 801b6a8:	b2db      	uxtb	r3, r3
 801b6aa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	0a1b      	lsrs	r3, r3, #8
 801b6b0:	b2db      	uxtb	r3, r3
 801b6b2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	b2db      	uxtb	r3, r3
 801b6b8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b6ba:	f107 030c 	add.w	r3, r7, #12
 801b6be:	2203      	movs	r2, #3
 801b6c0:	4619      	mov	r1, r3
 801b6c2:	2082      	movs	r0, #130	@ 0x82
 801b6c4:	f000 fdd4 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b6c8:	bf00      	nop
 801b6ca:	3710      	adds	r7, #16
 801b6cc:	46bd      	mov	sp, r7
 801b6ce:	bd80      	pop	{r7, pc}
 801b6d0:	20001c88 	.word	0x20001c88

0801b6d4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b084      	sub	sp, #16
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
 801b6dc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	0c1b      	lsrs	r3, r3, #16
 801b6e2:	b2db      	uxtb	r3, r3
 801b6e4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	0a1b      	lsrs	r3, r3, #8
 801b6ea:	b2db      	uxtb	r3, r3
 801b6ec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	b2db      	uxtb	r3, r3
 801b6f2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	0c1b      	lsrs	r3, r3, #16
 801b6f8:	b2db      	uxtb	r3, r3
 801b6fa:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b6fc:	683b      	ldr	r3, [r7, #0]
 801b6fe:	0a1b      	lsrs	r3, r3, #8
 801b700:	b2db      	uxtb	r3, r3
 801b702:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b704:	683b      	ldr	r3, [r7, #0]
 801b706:	b2db      	uxtb	r3, r3
 801b708:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b70a:	f107 0308 	add.w	r3, r7, #8
 801b70e:	2206      	movs	r2, #6
 801b710:	4619      	mov	r1, r3
 801b712:	2094      	movs	r0, #148	@ 0x94
 801b714:	f000 fdac 	bl	801c270 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b718:	4b03      	ldr	r3, [pc, #12]	@ (801b728 <SUBGRF_SetRxDutyCycle+0x54>)
 801b71a:	2206      	movs	r2, #6
 801b71c:	701a      	strb	r2, [r3, #0]
}
 801b71e:	bf00      	nop
 801b720:	3710      	adds	r7, #16
 801b722:	46bd      	mov	sp, r7
 801b724:	bd80      	pop	{r7, pc}
 801b726:	bf00      	nop
 801b728:	20001c88 	.word	0x20001c88

0801b72c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b72c:	b580      	push	{r7, lr}
 801b72e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b730:	2200      	movs	r2, #0
 801b732:	2100      	movs	r1, #0
 801b734:	20c5      	movs	r0, #197	@ 0xc5
 801b736:	f000 fd9b 	bl	801c270 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b73a:	4b02      	ldr	r3, [pc, #8]	@ (801b744 <SUBGRF_SetCad+0x18>)
 801b73c:	2207      	movs	r2, #7
 801b73e:	701a      	strb	r2, [r3, #0]
}
 801b740:	bf00      	nop
 801b742:	bd80      	pop	{r7, pc}
 801b744:	20001c88 	.word	0x20001c88

0801b748 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b74c:	2200      	movs	r2, #0
 801b74e:	2100      	movs	r1, #0
 801b750:	20d1      	movs	r0, #209	@ 0xd1
 801b752:	f000 fd8d 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b756:	bf00      	nop
 801b758:	bd80      	pop	{r7, pc}

0801b75a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b75a:	b580      	push	{r7, lr}
 801b75c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b75e:	2200      	movs	r2, #0
 801b760:	2100      	movs	r1, #0
 801b762:	20d2      	movs	r0, #210	@ 0xd2
 801b764:	f000 fd84 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b768:	bf00      	nop
 801b76a:	bd80      	pop	{r7, pc}

0801b76c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b76c:	b580      	push	{r7, lr}
 801b76e:	b082      	sub	sp, #8
 801b770:	af00      	add	r7, sp, #0
 801b772:	4603      	mov	r3, r0
 801b774:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b776:	1dfb      	adds	r3, r7, #7
 801b778:	2201      	movs	r2, #1
 801b77a:	4619      	mov	r1, r3
 801b77c:	209f      	movs	r0, #159	@ 0x9f
 801b77e:	f000 fd77 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b782:	bf00      	nop
 801b784:	3708      	adds	r7, #8
 801b786:	46bd      	mov	sp, r7
 801b788:	bd80      	pop	{r7, pc}

0801b78a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b78a:	b580      	push	{r7, lr}
 801b78c:	b084      	sub	sp, #16
 801b78e:	af00      	add	r7, sp, #0
 801b790:	4603      	mov	r3, r0
 801b792:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b794:	1dfb      	adds	r3, r7, #7
 801b796:	2201      	movs	r2, #1
 801b798:	4619      	mov	r1, r3
 801b79a:	20a0      	movs	r0, #160	@ 0xa0
 801b79c:	f000 fd68 	bl	801c270 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b7a0:	79fb      	ldrb	r3, [r7, #7]
 801b7a2:	2b3f      	cmp	r3, #63	@ 0x3f
 801b7a4:	d91c      	bls.n	801b7e0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b7a6:	79fb      	ldrb	r3, [r7, #7]
 801b7a8:	085b      	lsrs	r3, r3, #1
 801b7aa:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b7ac:	2300      	movs	r3, #0
 801b7ae:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b7b4:	e005      	b.n	801b7c2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b7b6:	7bfb      	ldrb	r3, [r7, #15]
 801b7b8:	089b      	lsrs	r3, r3, #2
 801b7ba:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b7bc:	7bbb      	ldrb	r3, [r7, #14]
 801b7be:	3301      	adds	r3, #1
 801b7c0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b7c2:	7bfb      	ldrb	r3, [r7, #15]
 801b7c4:	2b1f      	cmp	r3, #31
 801b7c6:	d8f6      	bhi.n	801b7b6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b7c8:	7bfb      	ldrb	r3, [r7, #15]
 801b7ca:	00db      	lsls	r3, r3, #3
 801b7cc:	b2da      	uxtb	r2, r3
 801b7ce:	7bbb      	ldrb	r3, [r7, #14]
 801b7d0:	4413      	add	r3, r2
 801b7d2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b7d4:	7b7b      	ldrb	r3, [r7, #13]
 801b7d6:	4619      	mov	r1, r3
 801b7d8:	f240 7006 	movw	r0, #1798	@ 0x706
 801b7dc:	f000 fc7e 	bl	801c0dc <SUBGRF_WriteRegister>
    }
}
 801b7e0:	bf00      	nop
 801b7e2:	3710      	adds	r7, #16
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	bd80      	pop	{r7, pc}

0801b7e8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b082      	sub	sp, #8
 801b7ec:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b7ee:	f7f1 f832 	bl	800c856 <RBI_IsDCDC>
 801b7f2:	4603      	mov	r3, r0
 801b7f4:	2b01      	cmp	r3, #1
 801b7f6:	d102      	bne.n	801b7fe <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b7f8:	2301      	movs	r3, #1
 801b7fa:	71fb      	strb	r3, [r7, #7]
 801b7fc:	e001      	b.n	801b802 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b7fe:	2300      	movs	r3, #0
 801b800:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b802:	1dfb      	adds	r3, r7, #7
 801b804:	2201      	movs	r2, #1
 801b806:	4619      	mov	r1, r3
 801b808:	2096      	movs	r0, #150	@ 0x96
 801b80a:	f000 fd31 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b80e:	bf00      	nop
 801b810:	3708      	adds	r7, #8
 801b812:	46bd      	mov	sp, r7
 801b814:	bd80      	pop	{r7, pc}

0801b816 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b816:	b580      	push	{r7, lr}
 801b818:	b084      	sub	sp, #16
 801b81a:	af00      	add	r7, sp, #0
 801b81c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b81e:	793b      	ldrb	r3, [r7, #4]
 801b820:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b824:	b2db      	uxtb	r3, r3
 801b826:	019b      	lsls	r3, r3, #6
 801b828:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b82a:	793b      	ldrb	r3, [r7, #4]
 801b82c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b830:	b2db      	uxtb	r3, r3
 801b832:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b834:	b25b      	sxtb	r3, r3
 801b836:	4313      	orrs	r3, r2
 801b838:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b83a:	793b      	ldrb	r3, [r7, #4]
 801b83c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b840:	b2db      	uxtb	r3, r3
 801b842:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b844:	b25b      	sxtb	r3, r3
 801b846:	4313      	orrs	r3, r2
 801b848:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b84a:	793b      	ldrb	r3, [r7, #4]
 801b84c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b850:	b2db      	uxtb	r3, r3
 801b852:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b854:	b25b      	sxtb	r3, r3
 801b856:	4313      	orrs	r3, r2
 801b858:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b85a:	793b      	ldrb	r3, [r7, #4]
 801b85c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b860:	b2db      	uxtb	r3, r3
 801b862:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b864:	b25b      	sxtb	r3, r3
 801b866:	4313      	orrs	r3, r2
 801b868:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b86a:	793b      	ldrb	r3, [r7, #4]
 801b86c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b870:	b2db      	uxtb	r3, r3
 801b872:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b874:	b25b      	sxtb	r3, r3
 801b876:	4313      	orrs	r3, r2
 801b878:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b87a:	793b      	ldrb	r3, [r7, #4]
 801b87c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b880:	b2db      	uxtb	r3, r3
 801b882:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b884:	4313      	orrs	r3, r2
 801b886:	b25b      	sxtb	r3, r3
 801b888:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b88a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b88c:	f107 030f 	add.w	r3, r7, #15
 801b890:	2201      	movs	r2, #1
 801b892:	4619      	mov	r1, r3
 801b894:	2089      	movs	r0, #137	@ 0x89
 801b896:	f000 fceb 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b89a:	bf00      	nop
 801b89c:	3710      	adds	r7, #16
 801b89e:	46bd      	mov	sp, r7
 801b8a0:	bd80      	pop	{r7, pc}
	...

0801b8a4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b084      	sub	sp, #16
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	4a1d      	ldr	r2, [pc, #116]	@ (801b924 <SUBGRF_CalibrateImage+0x80>)
 801b8b0:	4293      	cmp	r3, r2
 801b8b2:	d904      	bls.n	801b8be <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b8b4:	23e1      	movs	r3, #225	@ 0xe1
 801b8b6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b8b8:	23e9      	movs	r3, #233	@ 0xe9
 801b8ba:	737b      	strb	r3, [r7, #13]
 801b8bc:	e027      	b.n	801b90e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	4a19      	ldr	r2, [pc, #100]	@ (801b928 <SUBGRF_CalibrateImage+0x84>)
 801b8c2:	4293      	cmp	r3, r2
 801b8c4:	d904      	bls.n	801b8d0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b8c6:	23d7      	movs	r3, #215	@ 0xd7
 801b8c8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b8ca:	23db      	movs	r3, #219	@ 0xdb
 801b8cc:	737b      	strb	r3, [r7, #13]
 801b8ce:	e01e      	b.n	801b90e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	4a16      	ldr	r2, [pc, #88]	@ (801b92c <SUBGRF_CalibrateImage+0x88>)
 801b8d4:	4293      	cmp	r3, r2
 801b8d6:	d904      	bls.n	801b8e2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b8d8:	23c1      	movs	r3, #193	@ 0xc1
 801b8da:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b8dc:	23c5      	movs	r3, #197	@ 0xc5
 801b8de:	737b      	strb	r3, [r7, #13]
 801b8e0:	e015      	b.n	801b90e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	4a12      	ldr	r2, [pc, #72]	@ (801b930 <SUBGRF_CalibrateImage+0x8c>)
 801b8e6:	4293      	cmp	r3, r2
 801b8e8:	d904      	bls.n	801b8f4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b8ea:	2375      	movs	r3, #117	@ 0x75
 801b8ec:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b8ee:	2381      	movs	r3, #129	@ 0x81
 801b8f0:	737b      	strb	r3, [r7, #13]
 801b8f2:	e00c      	b.n	801b90e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	4a0f      	ldr	r2, [pc, #60]	@ (801b934 <SUBGRF_CalibrateImage+0x90>)
 801b8f8:	4293      	cmp	r3, r2
 801b8fa:	d904      	bls.n	801b906 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b8fc:	236b      	movs	r3, #107	@ 0x6b
 801b8fe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b900:	236f      	movs	r3, #111	@ 0x6f
 801b902:	737b      	strb	r3, [r7, #13]
 801b904:	e003      	b.n	801b90e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b906:	2329      	movs	r3, #41	@ 0x29
 801b908:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b90a:	232b      	movs	r3, #43	@ 0x2b
 801b90c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b90e:	f107 030c 	add.w	r3, r7, #12
 801b912:	2202      	movs	r2, #2
 801b914:	4619      	mov	r1, r3
 801b916:	2098      	movs	r0, #152	@ 0x98
 801b918:	f000 fcaa 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b91c:	bf00      	nop
 801b91e:	3710      	adds	r7, #16
 801b920:	46bd      	mov	sp, r7
 801b922:	bd80      	pop	{r7, pc}
 801b924:	35a4e900 	.word	0x35a4e900
 801b928:	32a9f880 	.word	0x32a9f880
 801b92c:	2de54480 	.word	0x2de54480
 801b930:	1b6b0b00 	.word	0x1b6b0b00
 801b934:	1954fc40 	.word	0x1954fc40

0801b938 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b938:	b590      	push	{r4, r7, lr}
 801b93a:	b085      	sub	sp, #20
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	4604      	mov	r4, r0
 801b940:	4608      	mov	r0, r1
 801b942:	4611      	mov	r1, r2
 801b944:	461a      	mov	r2, r3
 801b946:	4623      	mov	r3, r4
 801b948:	71fb      	strb	r3, [r7, #7]
 801b94a:	4603      	mov	r3, r0
 801b94c:	71bb      	strb	r3, [r7, #6]
 801b94e:	460b      	mov	r3, r1
 801b950:	717b      	strb	r3, [r7, #5]
 801b952:	4613      	mov	r3, r2
 801b954:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b956:	79fb      	ldrb	r3, [r7, #7]
 801b958:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b95a:	79bb      	ldrb	r3, [r7, #6]
 801b95c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b95e:	797b      	ldrb	r3, [r7, #5]
 801b960:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b962:	793b      	ldrb	r3, [r7, #4]
 801b964:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b966:	f107 030c 	add.w	r3, r7, #12
 801b96a:	2204      	movs	r2, #4
 801b96c:	4619      	mov	r1, r3
 801b96e:	2095      	movs	r0, #149	@ 0x95
 801b970:	f000 fc7e 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b974:	bf00      	nop
 801b976:	3714      	adds	r7, #20
 801b978:	46bd      	mov	sp, r7
 801b97a:	bd90      	pop	{r4, r7, pc}

0801b97c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b97c:	b590      	push	{r4, r7, lr}
 801b97e:	b085      	sub	sp, #20
 801b980:	af00      	add	r7, sp, #0
 801b982:	4604      	mov	r4, r0
 801b984:	4608      	mov	r0, r1
 801b986:	4611      	mov	r1, r2
 801b988:	461a      	mov	r2, r3
 801b98a:	4623      	mov	r3, r4
 801b98c:	80fb      	strh	r3, [r7, #6]
 801b98e:	4603      	mov	r3, r0
 801b990:	80bb      	strh	r3, [r7, #4]
 801b992:	460b      	mov	r3, r1
 801b994:	807b      	strh	r3, [r7, #2]
 801b996:	4613      	mov	r3, r2
 801b998:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b99a:	88fb      	ldrh	r3, [r7, #6]
 801b99c:	0a1b      	lsrs	r3, r3, #8
 801b99e:	b29b      	uxth	r3, r3
 801b9a0:	b2db      	uxtb	r3, r3
 801b9a2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b9a4:	88fb      	ldrh	r3, [r7, #6]
 801b9a6:	b2db      	uxtb	r3, r3
 801b9a8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b9aa:	88bb      	ldrh	r3, [r7, #4]
 801b9ac:	0a1b      	lsrs	r3, r3, #8
 801b9ae:	b29b      	uxth	r3, r3
 801b9b0:	b2db      	uxtb	r3, r3
 801b9b2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b9b4:	88bb      	ldrh	r3, [r7, #4]
 801b9b6:	b2db      	uxtb	r3, r3
 801b9b8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b9ba:	887b      	ldrh	r3, [r7, #2]
 801b9bc:	0a1b      	lsrs	r3, r3, #8
 801b9be:	b29b      	uxth	r3, r3
 801b9c0:	b2db      	uxtb	r3, r3
 801b9c2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b9c4:	887b      	ldrh	r3, [r7, #2]
 801b9c6:	b2db      	uxtb	r3, r3
 801b9c8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b9ca:	883b      	ldrh	r3, [r7, #0]
 801b9cc:	0a1b      	lsrs	r3, r3, #8
 801b9ce:	b29b      	uxth	r3, r3
 801b9d0:	b2db      	uxtb	r3, r3
 801b9d2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b9d4:	883b      	ldrh	r3, [r7, #0]
 801b9d6:	b2db      	uxtb	r3, r3
 801b9d8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b9da:	f107 0308 	add.w	r3, r7, #8
 801b9de:	2208      	movs	r2, #8
 801b9e0:	4619      	mov	r1, r3
 801b9e2:	2008      	movs	r0, #8
 801b9e4:	f000 fc44 	bl	801c270 <SUBGRF_WriteCommand>
}
 801b9e8:	bf00      	nop
 801b9ea:	3714      	adds	r7, #20
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	bd90      	pop	{r4, r7, pc}

0801b9f0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	b084      	sub	sp, #16
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	6039      	str	r1, [r7, #0]
 801b9fa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b9fc:	79fb      	ldrb	r3, [r7, #7]
 801b9fe:	f003 0307 	and.w	r3, r3, #7
 801ba02:	b2db      	uxtb	r3, r3
 801ba04:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ba06:	683b      	ldr	r3, [r7, #0]
 801ba08:	0c1b      	lsrs	r3, r3, #16
 801ba0a:	b2db      	uxtb	r3, r3
 801ba0c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ba0e:	683b      	ldr	r3, [r7, #0]
 801ba10:	0a1b      	lsrs	r3, r3, #8
 801ba12:	b2db      	uxtb	r3, r3
 801ba14:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801ba16:	683b      	ldr	r3, [r7, #0]
 801ba18:	b2db      	uxtb	r3, r3
 801ba1a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801ba1c:	f107 030c 	add.w	r3, r7, #12
 801ba20:	2204      	movs	r2, #4
 801ba22:	4619      	mov	r1, r3
 801ba24:	2097      	movs	r0, #151	@ 0x97
 801ba26:	f000 fc23 	bl	801c270 <SUBGRF_WriteCommand>
}
 801ba2a:	bf00      	nop
 801ba2c:	3710      	adds	r7, #16
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	bd80      	pop	{r7, pc}
	...

0801ba34 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801ba34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ba38:	b084      	sub	sp, #16
 801ba3a:	af00      	add	r7, sp, #0
 801ba3c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801ba3e:	2300      	movs	r3, #0
 801ba40:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801ba42:	4b1d      	ldr	r3, [pc, #116]	@ (801bab8 <SUBGRF_SetRfFrequency+0x84>)
 801ba44:	781b      	ldrb	r3, [r3, #0]
 801ba46:	f083 0301 	eor.w	r3, r3, #1
 801ba4a:	b2db      	uxtb	r3, r3
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d005      	beq.n	801ba5c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801ba50:	6878      	ldr	r0, [r7, #4]
 801ba52:	f7ff ff27 	bl	801b8a4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801ba56:	4b18      	ldr	r3, [pc, #96]	@ (801bab8 <SUBGRF_SetRfFrequency+0x84>)
 801ba58:	2201      	movs	r2, #1
 801ba5a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	2200      	movs	r2, #0
 801ba60:	461c      	mov	r4, r3
 801ba62:	4615      	mov	r5, r2
 801ba64:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ba68:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ba6c:	4a13      	ldr	r2, [pc, #76]	@ (801babc <SUBGRF_SetRfFrequency+0x88>)
 801ba6e:	f04f 0300 	mov.w	r3, #0
 801ba72:	4640      	mov	r0, r8
 801ba74:	4649      	mov	r1, r9
 801ba76:	f7e5 fb5f 	bl	8001138 <__aeabi_uldivmod>
 801ba7a:	4602      	mov	r2, r0
 801ba7c:	460b      	mov	r3, r1
 801ba7e:	4613      	mov	r3, r2
 801ba80:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	0e1b      	lsrs	r3, r3, #24
 801ba86:	b2db      	uxtb	r3, r3
 801ba88:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	0c1b      	lsrs	r3, r3, #16
 801ba8e:	b2db      	uxtb	r3, r3
 801ba90:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	0a1b      	lsrs	r3, r3, #8
 801ba96:	b2db      	uxtb	r3, r3
 801ba98:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	b2db      	uxtb	r3, r3
 801ba9e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801baa0:	f107 0308 	add.w	r3, r7, #8
 801baa4:	2204      	movs	r2, #4
 801baa6:	4619      	mov	r1, r3
 801baa8:	2086      	movs	r0, #134	@ 0x86
 801baaa:	f000 fbe1 	bl	801c270 <SUBGRF_WriteCommand>
}
 801baae:	bf00      	nop
 801bab0:	3710      	adds	r7, #16
 801bab2:	46bd      	mov	sp, r7
 801bab4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801bab8:	20001c90 	.word	0x20001c90
 801babc:	01e84800 	.word	0x01e84800

0801bac0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b082      	sub	sp, #8
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	4603      	mov	r3, r0
 801bac8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801baca:	79fa      	ldrb	r2, [r7, #7]
 801bacc:	4b09      	ldr	r3, [pc, #36]	@ (801baf4 <SUBGRF_SetPacketType+0x34>)
 801bace:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801bad0:	79fb      	ldrb	r3, [r7, #7]
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d104      	bne.n	801bae0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801bad6:	2100      	movs	r1, #0
 801bad8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801badc:	f000 fafe 	bl	801c0dc <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801bae0:	1dfb      	adds	r3, r7, #7
 801bae2:	2201      	movs	r2, #1
 801bae4:	4619      	mov	r1, r3
 801bae6:	208a      	movs	r0, #138	@ 0x8a
 801bae8:	f000 fbc2 	bl	801c270 <SUBGRF_WriteCommand>
}
 801baec:	bf00      	nop
 801baee:	3708      	adds	r7, #8
 801baf0:	46bd      	mov	sp, r7
 801baf2:	bd80      	pop	{r7, pc}
 801baf4:	20001c89 	.word	0x20001c89

0801baf8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801baf8:	b480      	push	{r7}
 801bafa:	af00      	add	r7, sp, #0
    return PacketType;
 801bafc:	4b02      	ldr	r3, [pc, #8]	@ (801bb08 <SUBGRF_GetPacketType+0x10>)
 801bafe:	781b      	ldrb	r3, [r3, #0]
}
 801bb00:	4618      	mov	r0, r3
 801bb02:	46bd      	mov	sp, r7
 801bb04:	bc80      	pop	{r7}
 801bb06:	4770      	bx	lr
 801bb08:	20001c89 	.word	0x20001c89

0801bb0c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b084      	sub	sp, #16
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	4603      	mov	r3, r0
 801bb14:	71fb      	strb	r3, [r7, #7]
 801bb16:	460b      	mov	r3, r1
 801bb18:	71bb      	strb	r3, [r7, #6]
 801bb1a:	4613      	mov	r3, r2
 801bb1c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801bb1e:	79fb      	ldrb	r3, [r7, #7]
 801bb20:	2b01      	cmp	r3, #1
 801bb22:	d149      	bne.n	801bbb8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801bb24:	2000      	movs	r0, #0
 801bb26:	f7f0 fe9d 	bl	800c864 <RBI_GetRFOMaxPowerConfig>
 801bb2a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801bb2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bb30:	68fa      	ldr	r2, [r7, #12]
 801bb32:	429a      	cmp	r2, r3
 801bb34:	da01      	bge.n	801bb3a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	2b0e      	cmp	r3, #14
 801bb3e:	d10e      	bne.n	801bb5e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801bb40:	2301      	movs	r3, #1
 801bb42:	2201      	movs	r2, #1
 801bb44:	2100      	movs	r1, #0
 801bb46:	2004      	movs	r0, #4
 801bb48:	f7ff fef6 	bl	801b938 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801bb4c:	79ba      	ldrb	r2, [r7, #6]
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	b2db      	uxtb	r3, r3
 801bb52:	1ad3      	subs	r3, r2, r3
 801bb54:	b2db      	uxtb	r3, r3
 801bb56:	330e      	adds	r3, #14
 801bb58:	b2db      	uxtb	r3, r3
 801bb5a:	71bb      	strb	r3, [r7, #6]
 801bb5c:	e01f      	b.n	801bb9e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	2b0a      	cmp	r3, #10
 801bb62:	d10e      	bne.n	801bb82 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801bb64:	2301      	movs	r3, #1
 801bb66:	2201      	movs	r2, #1
 801bb68:	2100      	movs	r1, #0
 801bb6a:	2001      	movs	r0, #1
 801bb6c:	f7ff fee4 	bl	801b938 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801bb70:	79ba      	ldrb	r2, [r7, #6]
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	b2db      	uxtb	r3, r3
 801bb76:	1ad3      	subs	r3, r2, r3
 801bb78:	b2db      	uxtb	r3, r3
 801bb7a:	330d      	adds	r3, #13
 801bb7c:	b2db      	uxtb	r3, r3
 801bb7e:	71bb      	strb	r3, [r7, #6]
 801bb80:	e00d      	b.n	801bb9e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801bb82:	2301      	movs	r3, #1
 801bb84:	2201      	movs	r2, #1
 801bb86:	2100      	movs	r1, #0
 801bb88:	2007      	movs	r0, #7
 801bb8a:	f7ff fed5 	bl	801b938 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801bb8e:	79ba      	ldrb	r2, [r7, #6]
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	b2db      	uxtb	r3, r3
 801bb94:	1ad3      	subs	r3, r2, r3
 801bb96:	b2db      	uxtb	r3, r3
 801bb98:	330e      	adds	r3, #14
 801bb9a:	b2db      	uxtb	r3, r3
 801bb9c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801bb9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bba2:	f113 0f11 	cmn.w	r3, #17
 801bba6:	da01      	bge.n	801bbac <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801bba8:	23ef      	movs	r3, #239	@ 0xef
 801bbaa:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801bbac:	2118      	movs	r1, #24
 801bbae:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801bbb2:	f000 fa93 	bl	801c0dc <SUBGRF_WriteRegister>
 801bbb6:	e067      	b.n	801bc88 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801bbb8:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801bbbc:	f000 fab0 	bl	801c120 <SUBGRF_ReadRegister>
 801bbc0:	4603      	mov	r3, r0
 801bbc2:	f043 031e 	orr.w	r3, r3, #30
 801bbc6:	b2db      	uxtb	r3, r3
 801bbc8:	4619      	mov	r1, r3
 801bbca:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801bbce:	f000 fa85 	bl	801c0dc <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801bbd2:	2001      	movs	r0, #1
 801bbd4:	f7f0 fe46 	bl	800c864 <RBI_GetRFOMaxPowerConfig>
 801bbd8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801bbda:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bbde:	68fa      	ldr	r2, [r7, #12]
 801bbe0:	429a      	cmp	r2, r3
 801bbe2:	da01      	bge.n	801bbe8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	2b14      	cmp	r3, #20
 801bbec:	d10e      	bne.n	801bc0c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801bbee:	2301      	movs	r3, #1
 801bbf0:	2200      	movs	r2, #0
 801bbf2:	2105      	movs	r1, #5
 801bbf4:	2003      	movs	r0, #3
 801bbf6:	f7ff fe9f 	bl	801b938 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801bbfa:	79ba      	ldrb	r2, [r7, #6]
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	b2db      	uxtb	r3, r3
 801bc00:	1ad3      	subs	r3, r2, r3
 801bc02:	b2db      	uxtb	r3, r3
 801bc04:	3316      	adds	r3, #22
 801bc06:	b2db      	uxtb	r3, r3
 801bc08:	71bb      	strb	r3, [r7, #6]
 801bc0a:	e031      	b.n	801bc70 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	2b11      	cmp	r3, #17
 801bc10:	d10e      	bne.n	801bc30 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801bc12:	2301      	movs	r3, #1
 801bc14:	2200      	movs	r2, #0
 801bc16:	2103      	movs	r1, #3
 801bc18:	2002      	movs	r0, #2
 801bc1a:	f7ff fe8d 	bl	801b938 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801bc1e:	79ba      	ldrb	r2, [r7, #6]
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	b2db      	uxtb	r3, r3
 801bc24:	1ad3      	subs	r3, r2, r3
 801bc26:	b2db      	uxtb	r3, r3
 801bc28:	3316      	adds	r3, #22
 801bc2a:	b2db      	uxtb	r3, r3
 801bc2c:	71bb      	strb	r3, [r7, #6]
 801bc2e:	e01f      	b.n	801bc70 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	2b0e      	cmp	r3, #14
 801bc34:	d10e      	bne.n	801bc54 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801bc36:	2301      	movs	r3, #1
 801bc38:	2200      	movs	r2, #0
 801bc3a:	2102      	movs	r1, #2
 801bc3c:	2002      	movs	r0, #2
 801bc3e:	f7ff fe7b 	bl	801b938 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801bc42:	79ba      	ldrb	r2, [r7, #6]
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	b2db      	uxtb	r3, r3
 801bc48:	1ad3      	subs	r3, r2, r3
 801bc4a:	b2db      	uxtb	r3, r3
 801bc4c:	330e      	adds	r3, #14
 801bc4e:	b2db      	uxtb	r3, r3
 801bc50:	71bb      	strb	r3, [r7, #6]
 801bc52:	e00d      	b.n	801bc70 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801bc54:	2301      	movs	r3, #1
 801bc56:	2200      	movs	r2, #0
 801bc58:	2107      	movs	r1, #7
 801bc5a:	2004      	movs	r0, #4
 801bc5c:	f7ff fe6c 	bl	801b938 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801bc60:	79ba      	ldrb	r2, [r7, #6]
 801bc62:	68fb      	ldr	r3, [r7, #12]
 801bc64:	b2db      	uxtb	r3, r3
 801bc66:	1ad3      	subs	r3, r2, r3
 801bc68:	b2db      	uxtb	r3, r3
 801bc6a:	3316      	adds	r3, #22
 801bc6c:	b2db      	uxtb	r3, r3
 801bc6e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801bc70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bc74:	f113 0f09 	cmn.w	r3, #9
 801bc78:	da01      	bge.n	801bc7e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801bc7a:	23f7      	movs	r3, #247	@ 0xf7
 801bc7c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801bc7e:	2138      	movs	r1, #56	@ 0x38
 801bc80:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801bc84:	f000 fa2a 	bl	801c0dc <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801bc88:	79bb      	ldrb	r3, [r7, #6]
 801bc8a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801bc8c:	797b      	ldrb	r3, [r7, #5]
 801bc8e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801bc90:	f107 0308 	add.w	r3, r7, #8
 801bc94:	2202      	movs	r2, #2
 801bc96:	4619      	mov	r1, r3
 801bc98:	208e      	movs	r0, #142	@ 0x8e
 801bc9a:	f000 fae9 	bl	801c270 <SUBGRF_WriteCommand>
}
 801bc9e:	bf00      	nop
 801bca0:	3710      	adds	r7, #16
 801bca2:	46bd      	mov	sp, r7
 801bca4:	bd80      	pop	{r7, pc}
	...

0801bca8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801bca8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801bcac:	b086      	sub	sp, #24
 801bcae:	af00      	add	r7, sp, #0
 801bcb0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801bcb6:	4a61      	ldr	r2, [pc, #388]	@ (801be3c <SUBGRF_SetModulationParams+0x194>)
 801bcb8:	f107 0308 	add.w	r3, r7, #8
 801bcbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bcc0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	781a      	ldrb	r2, [r3, #0]
 801bcc8:	4b5d      	ldr	r3, [pc, #372]	@ (801be40 <SUBGRF_SetModulationParams+0x198>)
 801bcca:	781b      	ldrb	r3, [r3, #0]
 801bccc:	429a      	cmp	r2, r3
 801bcce:	d004      	beq.n	801bcda <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	781b      	ldrb	r3, [r3, #0]
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	f7ff fef3 	bl	801bac0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	781b      	ldrb	r3, [r3, #0]
 801bcde:	2b03      	cmp	r3, #3
 801bce0:	f200 80a5 	bhi.w	801be2e <SUBGRF_SetModulationParams+0x186>
 801bce4:	a201      	add	r2, pc, #4	@ (adr r2, 801bcec <SUBGRF_SetModulationParams+0x44>)
 801bce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcea:	bf00      	nop
 801bcec:	0801bcfd 	.word	0x0801bcfd
 801bcf0:	0801bdbd 	.word	0x0801bdbd
 801bcf4:	0801bd7f 	.word	0x0801bd7f
 801bcf8:	0801bdeb 	.word	0x0801bdeb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801bcfc:	2308      	movs	r3, #8
 801bcfe:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	4a4f      	ldr	r2, [pc, #316]	@ (801be44 <SUBGRF_SetModulationParams+0x19c>)
 801bd06:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd0a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	0c1b      	lsrs	r3, r3, #16
 801bd10:	b2db      	uxtb	r3, r3
 801bd12:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801bd14:	697b      	ldr	r3, [r7, #20]
 801bd16:	0a1b      	lsrs	r3, r3, #8
 801bd18:	b2db      	uxtb	r3, r3
 801bd1a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bd1c:	697b      	ldr	r3, [r7, #20]
 801bd1e:	b2db      	uxtb	r3, r3
 801bd20:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	7b1b      	ldrb	r3, [r3, #12]
 801bd26:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	7b5b      	ldrb	r3, [r3, #13]
 801bd2c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	689b      	ldr	r3, [r3, #8]
 801bd32:	2200      	movs	r2, #0
 801bd34:	461c      	mov	r4, r3
 801bd36:	4615      	mov	r5, r2
 801bd38:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801bd3c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801bd40:	4a41      	ldr	r2, [pc, #260]	@ (801be48 <SUBGRF_SetModulationParams+0x1a0>)
 801bd42:	f04f 0300 	mov.w	r3, #0
 801bd46:	4640      	mov	r0, r8
 801bd48:	4649      	mov	r1, r9
 801bd4a:	f7e5 f9f5 	bl	8001138 <__aeabi_uldivmod>
 801bd4e:	4602      	mov	r2, r0
 801bd50:	460b      	mov	r3, r1
 801bd52:	4613      	mov	r3, r2
 801bd54:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801bd56:	697b      	ldr	r3, [r7, #20]
 801bd58:	0c1b      	lsrs	r3, r3, #16
 801bd5a:	b2db      	uxtb	r3, r3
 801bd5c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801bd5e:	697b      	ldr	r3, [r7, #20]
 801bd60:	0a1b      	lsrs	r3, r3, #8
 801bd62:	b2db      	uxtb	r3, r3
 801bd64:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801bd66:	697b      	ldr	r3, [r7, #20]
 801bd68:	b2db      	uxtb	r3, r3
 801bd6a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bd6c:	7cfb      	ldrb	r3, [r7, #19]
 801bd6e:	b29a      	uxth	r2, r3
 801bd70:	f107 0308 	add.w	r3, r7, #8
 801bd74:	4619      	mov	r1, r3
 801bd76:	208b      	movs	r0, #139	@ 0x8b
 801bd78:	f000 fa7a 	bl	801c270 <SUBGRF_WriteCommand>
        break;
 801bd7c:	e058      	b.n	801be30 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801bd7e:	2304      	movs	r3, #4
 801bd80:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	691b      	ldr	r3, [r3, #16]
 801bd86:	4a2f      	ldr	r2, [pc, #188]	@ (801be44 <SUBGRF_SetModulationParams+0x19c>)
 801bd88:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd8c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bd8e:	697b      	ldr	r3, [r7, #20]
 801bd90:	0c1b      	lsrs	r3, r3, #16
 801bd92:	b2db      	uxtb	r3, r3
 801bd94:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	0a1b      	lsrs	r3, r3, #8
 801bd9a:	b2db      	uxtb	r3, r3
 801bd9c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bd9e:	697b      	ldr	r3, [r7, #20]
 801bda0:	b2db      	uxtb	r3, r3
 801bda2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	7d1b      	ldrb	r3, [r3, #20]
 801bda8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bdaa:	7cfb      	ldrb	r3, [r7, #19]
 801bdac:	b29a      	uxth	r2, r3
 801bdae:	f107 0308 	add.w	r3, r7, #8
 801bdb2:	4619      	mov	r1, r3
 801bdb4:	208b      	movs	r0, #139	@ 0x8b
 801bdb6:	f000 fa5b 	bl	801c270 <SUBGRF_WriteCommand>
        break;
 801bdba:	e039      	b.n	801be30 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801bdbc:	2304      	movs	r3, #4
 801bdbe:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	7e1b      	ldrb	r3, [r3, #24]
 801bdc4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	7e5b      	ldrb	r3, [r3, #25]
 801bdca:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	7e9b      	ldrb	r3, [r3, #26]
 801bdd0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	7edb      	ldrb	r3, [r3, #27]
 801bdd6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bdd8:	7cfb      	ldrb	r3, [r7, #19]
 801bdda:	b29a      	uxth	r2, r3
 801bddc:	f107 0308 	add.w	r3, r7, #8
 801bde0:	4619      	mov	r1, r3
 801bde2:	208b      	movs	r0, #139	@ 0x8b
 801bde4:	f000 fa44 	bl	801c270 <SUBGRF_WriteCommand>

        break;
 801bde8:	e022      	b.n	801be30 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801bdea:	2305      	movs	r3, #5
 801bdec:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	685b      	ldr	r3, [r3, #4]
 801bdf2:	4a14      	ldr	r2, [pc, #80]	@ (801be44 <SUBGRF_SetModulationParams+0x19c>)
 801bdf4:	fbb2 f3f3 	udiv	r3, r2, r3
 801bdf8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bdfa:	697b      	ldr	r3, [r7, #20]
 801bdfc:	0c1b      	lsrs	r3, r3, #16
 801bdfe:	b2db      	uxtb	r3, r3
 801be00:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801be02:	697b      	ldr	r3, [r7, #20]
 801be04:	0a1b      	lsrs	r3, r3, #8
 801be06:	b2db      	uxtb	r3, r3
 801be08:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	b2db      	uxtb	r3, r3
 801be0e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	7b1b      	ldrb	r3, [r3, #12]
 801be14:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	7b5b      	ldrb	r3, [r3, #13]
 801be1a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801be1c:	7cfb      	ldrb	r3, [r7, #19]
 801be1e:	b29a      	uxth	r2, r3
 801be20:	f107 0308 	add.w	r3, r7, #8
 801be24:	4619      	mov	r1, r3
 801be26:	208b      	movs	r0, #139	@ 0x8b
 801be28:	f000 fa22 	bl	801c270 <SUBGRF_WriteCommand>
        break;
 801be2c:	e000      	b.n	801be30 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801be2e:	bf00      	nop
    }
}
 801be30:	bf00      	nop
 801be32:	3718      	adds	r7, #24
 801be34:	46bd      	mov	sp, r7
 801be36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801be3a:	bf00      	nop
 801be3c:	0801f9b8 	.word	0x0801f9b8
 801be40:	20001c89 	.word	0x20001c89
 801be44:	3d090000 	.word	0x3d090000
 801be48:	01e84800 	.word	0x01e84800

0801be4c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b086      	sub	sp, #24
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801be54:	2300      	movs	r3, #0
 801be56:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801be58:	4a48      	ldr	r2, [pc, #288]	@ (801bf7c <SUBGRF_SetPacketParams+0x130>)
 801be5a:	f107 030c 	add.w	r3, r7, #12
 801be5e:	ca07      	ldmia	r2, {r0, r1, r2}
 801be60:	c303      	stmia	r3!, {r0, r1}
 801be62:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	781a      	ldrb	r2, [r3, #0]
 801be68:	4b45      	ldr	r3, [pc, #276]	@ (801bf80 <SUBGRF_SetPacketParams+0x134>)
 801be6a:	781b      	ldrb	r3, [r3, #0]
 801be6c:	429a      	cmp	r2, r3
 801be6e:	d004      	beq.n	801be7a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	781b      	ldrb	r3, [r3, #0]
 801be74:	4618      	mov	r0, r3
 801be76:	f7ff fe23 	bl	801bac0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	781b      	ldrb	r3, [r3, #0]
 801be7e:	2b03      	cmp	r3, #3
 801be80:	d878      	bhi.n	801bf74 <SUBGRF_SetPacketParams+0x128>
 801be82:	a201      	add	r2, pc, #4	@ (adr r2, 801be88 <SUBGRF_SetPacketParams+0x3c>)
 801be84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be88:	0801be99 	.word	0x0801be99
 801be8c:	0801bf29 	.word	0x0801bf29
 801be90:	0801bf1d 	.word	0x0801bf1d
 801be94:	0801be99 	.word	0x0801be99
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	7a5b      	ldrb	r3, [r3, #9]
 801be9c:	2bf1      	cmp	r3, #241	@ 0xf1
 801be9e:	d10a      	bne.n	801beb6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801bea0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801bea4:	f7ff faaa 	bl	801b3fc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801bea8:	f248 0005 	movw	r0, #32773	@ 0x8005
 801beac:	f7ff fac6 	bl	801b43c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801beb0:	2302      	movs	r3, #2
 801beb2:	75bb      	strb	r3, [r7, #22]
 801beb4:	e011      	b.n	801beda <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	7a5b      	ldrb	r3, [r3, #9]
 801beba:	2bf2      	cmp	r3, #242	@ 0xf2
 801bebc:	d10a      	bne.n	801bed4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801bebe:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801bec2:	f7ff fa9b 	bl	801b3fc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801bec6:	f241 0021 	movw	r0, #4129	@ 0x1021
 801beca:	f7ff fab7 	bl	801b43c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801bece:	2306      	movs	r3, #6
 801bed0:	75bb      	strb	r3, [r7, #22]
 801bed2:	e002      	b.n	801beda <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	7a5b      	ldrb	r3, [r3, #9]
 801bed8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801beda:	2309      	movs	r3, #9
 801bedc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	885b      	ldrh	r3, [r3, #2]
 801bee2:	0a1b      	lsrs	r3, r3, #8
 801bee4:	b29b      	uxth	r3, r3
 801bee6:	b2db      	uxtb	r3, r3
 801bee8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	885b      	ldrh	r3, [r3, #2]
 801beee:	b2db      	uxtb	r3, r3
 801bef0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	791b      	ldrb	r3, [r3, #4]
 801bef6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	795b      	ldrb	r3, [r3, #5]
 801befc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	799b      	ldrb	r3, [r3, #6]
 801bf02:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	79db      	ldrb	r3, [r3, #7]
 801bf08:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	7a1b      	ldrb	r3, [r3, #8]
 801bf0e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801bf10:	7dbb      	ldrb	r3, [r7, #22]
 801bf12:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	7a9b      	ldrb	r3, [r3, #10]
 801bf18:	753b      	strb	r3, [r7, #20]
        break;
 801bf1a:	e022      	b.n	801bf62 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	7b1b      	ldrb	r3, [r3, #12]
 801bf24:	733b      	strb	r3, [r7, #12]
        break;
 801bf26:	e01c      	b.n	801bf62 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801bf28:	2306      	movs	r3, #6
 801bf2a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	89db      	ldrh	r3, [r3, #14]
 801bf30:	0a1b      	lsrs	r3, r3, #8
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	b2db      	uxtb	r3, r3
 801bf36:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	89db      	ldrh	r3, [r3, #14]
 801bf3c:	b2db      	uxtb	r3, r3
 801bf3e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	7c1a      	ldrb	r2, [r3, #16]
 801bf44:	4b0f      	ldr	r3, [pc, #60]	@ (801bf84 <SUBGRF_SetPacketParams+0x138>)
 801bf46:	4611      	mov	r1, r2
 801bf48:	7019      	strb	r1, [r3, #0]
 801bf4a:	4613      	mov	r3, r2
 801bf4c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	7c5b      	ldrb	r3, [r3, #17]
 801bf52:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	7c9b      	ldrb	r3, [r3, #18]
 801bf58:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	7cdb      	ldrb	r3, [r3, #19]
 801bf5e:	747b      	strb	r3, [r7, #17]
        break;
 801bf60:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801bf62:	7dfb      	ldrb	r3, [r7, #23]
 801bf64:	b29a      	uxth	r2, r3
 801bf66:	f107 030c 	add.w	r3, r7, #12
 801bf6a:	4619      	mov	r1, r3
 801bf6c:	208c      	movs	r0, #140	@ 0x8c
 801bf6e:	f000 f97f 	bl	801c270 <SUBGRF_WriteCommand>
 801bf72:	e000      	b.n	801bf76 <SUBGRF_SetPacketParams+0x12a>
        return;
 801bf74:	bf00      	nop
}
 801bf76:	3718      	adds	r7, #24
 801bf78:	46bd      	mov	sp, r7
 801bf7a:	bd80      	pop	{r7, pc}
 801bf7c:	0801f9c0 	.word	0x0801f9c0
 801bf80:	20001c89 	.word	0x20001c89
 801bf84:	20001c8a 	.word	0x20001c8a

0801bf88 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801bf88:	b580      	push	{r7, lr}
 801bf8a:	b084      	sub	sp, #16
 801bf8c:	af00      	add	r7, sp, #0
 801bf8e:	4603      	mov	r3, r0
 801bf90:	460a      	mov	r2, r1
 801bf92:	71fb      	strb	r3, [r7, #7]
 801bf94:	4613      	mov	r3, r2
 801bf96:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801bf98:	79fb      	ldrb	r3, [r7, #7]
 801bf9a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801bf9c:	79bb      	ldrb	r3, [r7, #6]
 801bf9e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801bfa0:	f107 030c 	add.w	r3, r7, #12
 801bfa4:	2202      	movs	r2, #2
 801bfa6:	4619      	mov	r1, r3
 801bfa8:	208f      	movs	r0, #143	@ 0x8f
 801bfaa:	f000 f961 	bl	801c270 <SUBGRF_WriteCommand>
}
 801bfae:	bf00      	nop
 801bfb0:	3710      	adds	r7, #16
 801bfb2:	46bd      	mov	sp, r7
 801bfb4:	bd80      	pop	{r7, pc}

0801bfb6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801bfb6:	b580      	push	{r7, lr}
 801bfb8:	b082      	sub	sp, #8
 801bfba:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bfbc:	2300      	movs	r3, #0
 801bfbe:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bfc0:	1d3b      	adds	r3, r7, #4
 801bfc2:	2201      	movs	r2, #1
 801bfc4:	4619      	mov	r1, r3
 801bfc6:	2015      	movs	r0, #21
 801bfc8:	f000 f974 	bl	801c2b4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bfcc:	793b      	ldrb	r3, [r7, #4]
 801bfce:	425b      	negs	r3, r3
 801bfd0:	105b      	asrs	r3, r3, #1
 801bfd2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801bfd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bfd8:	4618      	mov	r0, r3
 801bfda:	3708      	adds	r7, #8
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}

0801bfe0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b084      	sub	sp, #16
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	6078      	str	r0, [r7, #4]
 801bfe8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801bfea:	f107 030c 	add.w	r3, r7, #12
 801bfee:	2202      	movs	r2, #2
 801bff0:	4619      	mov	r1, r3
 801bff2:	2013      	movs	r0, #19
 801bff4:	f000 f95e 	bl	801c2b4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801bff8:	f7ff fd7e 	bl	801baf8 <SUBGRF_GetPacketType>
 801bffc:	4603      	mov	r3, r0
 801bffe:	2b01      	cmp	r3, #1
 801c000:	d10d      	bne.n	801c01e <SUBGRF_GetRxBufferStatus+0x3e>
 801c002:	4b0c      	ldr	r3, [pc, #48]	@ (801c034 <SUBGRF_GetRxBufferStatus+0x54>)
 801c004:	781b      	ldrb	r3, [r3, #0]
 801c006:	b2db      	uxtb	r3, r3
 801c008:	2b01      	cmp	r3, #1
 801c00a:	d108      	bne.n	801c01e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801c00c:	f240 7002 	movw	r0, #1794	@ 0x702
 801c010:	f000 f886 	bl	801c120 <SUBGRF_ReadRegister>
 801c014:	4603      	mov	r3, r0
 801c016:	461a      	mov	r2, r3
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	701a      	strb	r2, [r3, #0]
 801c01c:	e002      	b.n	801c024 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801c01e:	7b3a      	ldrb	r2, [r7, #12]
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801c024:	7b7a      	ldrb	r2, [r7, #13]
 801c026:	683b      	ldr	r3, [r7, #0]
 801c028:	701a      	strb	r2, [r3, #0]
}
 801c02a:	bf00      	nop
 801c02c:	3710      	adds	r7, #16
 801c02e:	46bd      	mov	sp, r7
 801c030:	bd80      	pop	{r7, pc}
 801c032:	bf00      	nop
 801c034:	20001c8a 	.word	0x20001c8a

0801c038 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b084      	sub	sp, #16
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801c040:	f107 030c 	add.w	r3, r7, #12
 801c044:	2203      	movs	r2, #3
 801c046:	4619      	mov	r1, r3
 801c048:	2014      	movs	r0, #20
 801c04a:	f000 f933 	bl	801c2b4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801c04e:	f7ff fd53 	bl	801baf8 <SUBGRF_GetPacketType>
 801c052:	4603      	mov	r3, r0
 801c054:	461a      	mov	r2, r3
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d002      	beq.n	801c068 <SUBGRF_GetPacketStatus+0x30>
 801c062:	2b01      	cmp	r3, #1
 801c064:	d013      	beq.n	801c08e <SUBGRF_GetPacketStatus+0x56>
 801c066:	e02a      	b.n	801c0be <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801c068:	7b3a      	ldrb	r2, [r7, #12]
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801c06e:	7b7b      	ldrb	r3, [r7, #13]
 801c070:	425b      	negs	r3, r3
 801c072:	105b      	asrs	r3, r3, #1
 801c074:	b25a      	sxtb	r2, r3
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801c07a:	7bbb      	ldrb	r3, [r7, #14]
 801c07c:	425b      	negs	r3, r3
 801c07e:	105b      	asrs	r3, r3, #1
 801c080:	b25a      	sxtb	r2, r3
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	2200      	movs	r2, #0
 801c08a:	609a      	str	r2, [r3, #8]
            break;
 801c08c:	e020      	b.n	801c0d0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801c08e:	7b3b      	ldrb	r3, [r7, #12]
 801c090:	425b      	negs	r3, r3
 801c092:	105b      	asrs	r3, r3, #1
 801c094:	b25a      	sxtb	r2, r3
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801c09a:	7b7b      	ldrb	r3, [r7, #13]
 801c09c:	b25b      	sxtb	r3, r3
 801c09e:	3302      	adds	r3, #2
 801c0a0:	109b      	asrs	r3, r3, #2
 801c0a2:	b25a      	sxtb	r2, r3
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801c0a8:	7bbb      	ldrb	r3, [r7, #14]
 801c0aa:	425b      	negs	r3, r3
 801c0ac:	105b      	asrs	r3, r3, #1
 801c0ae:	b25a      	sxtb	r2, r3
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801c0b4:	4b08      	ldr	r3, [pc, #32]	@ (801c0d8 <SUBGRF_GetPacketStatus+0xa0>)
 801c0b6:	681a      	ldr	r2, [r3, #0]
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	611a      	str	r2, [r3, #16]
            break;
 801c0bc:	e008      	b.n	801c0d0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801c0be:	2214      	movs	r2, #20
 801c0c0:	2100      	movs	r1, #0
 801c0c2:	6878      	ldr	r0, [r7, #4]
 801c0c4:	f000 fc1d 	bl	801c902 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	220f      	movs	r2, #15
 801c0cc:	701a      	strb	r2, [r3, #0]
            break;
 801c0ce:	bf00      	nop
    }
}
 801c0d0:	bf00      	nop
 801c0d2:	3710      	adds	r7, #16
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bd80      	pop	{r7, pc}
 801c0d8:	20001c8c 	.word	0x20001c8c

0801c0dc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b086      	sub	sp, #24
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	460a      	mov	r2, r1
 801c0e6:	80fb      	strh	r3, [r7, #6]
 801c0e8:	4613      	mov	r3, r2
 801c0ea:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0ec:	f3ef 8310 	mrs	r3, PRIMASK
 801c0f0:	60fb      	str	r3, [r7, #12]
  return(result);
 801c0f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c0f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0f6:	b672      	cpsid	i
}
 801c0f8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801c0fa:	1d7a      	adds	r2, r7, #5
 801c0fc:	88f9      	ldrh	r1, [r7, #6]
 801c0fe:	2301      	movs	r3, #1
 801c100:	4806      	ldr	r0, [pc, #24]	@ (801c11c <SUBGRF_WriteRegister+0x40>)
 801c102:	f7ec ff5b 	bl	8008fbc <HAL_SUBGHZ_WriteRegisters>
 801c106:	697b      	ldr	r3, [r7, #20]
 801c108:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c10a:	693b      	ldr	r3, [r7, #16]
 801c10c:	f383 8810 	msr	PRIMASK, r3
}
 801c110:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c112:	bf00      	nop
 801c114:	3718      	adds	r7, #24
 801c116:	46bd      	mov	sp, r7
 801c118:	bd80      	pop	{r7, pc}
 801c11a:	bf00      	nop
 801c11c:	200002e0 	.word	0x200002e0

0801c120 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801c120:	b580      	push	{r7, lr}
 801c122:	b086      	sub	sp, #24
 801c124:	af00      	add	r7, sp, #0
 801c126:	4603      	mov	r3, r0
 801c128:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c12a:	f3ef 8310 	mrs	r3, PRIMASK
 801c12e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c130:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801c132:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c134:	b672      	cpsid	i
}
 801c136:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801c138:	f107 020b 	add.w	r2, r7, #11
 801c13c:	88f9      	ldrh	r1, [r7, #6]
 801c13e:	2301      	movs	r3, #1
 801c140:	4806      	ldr	r0, [pc, #24]	@ (801c15c <SUBGRF_ReadRegister+0x3c>)
 801c142:	f7ec ff9a 	bl	800907a <HAL_SUBGHZ_ReadRegisters>
 801c146:	697b      	ldr	r3, [r7, #20]
 801c148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c14a:	693b      	ldr	r3, [r7, #16]
 801c14c:	f383 8810 	msr	PRIMASK, r3
}
 801c150:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 801c152:	7afb      	ldrb	r3, [r7, #11]
}
 801c154:	4618      	mov	r0, r3
 801c156:	3718      	adds	r7, #24
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd80      	pop	{r7, pc}
 801c15c:	200002e0 	.word	0x200002e0

0801c160 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c160:	b580      	push	{r7, lr}
 801c162:	b086      	sub	sp, #24
 801c164:	af00      	add	r7, sp, #0
 801c166:	4603      	mov	r3, r0
 801c168:	6039      	str	r1, [r7, #0]
 801c16a:	80fb      	strh	r3, [r7, #6]
 801c16c:	4613      	mov	r3, r2
 801c16e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c170:	f3ef 8310 	mrs	r3, PRIMASK
 801c174:	60fb      	str	r3, [r7, #12]
  return(result);
 801c176:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c17a:	b672      	cpsid	i
}
 801c17c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801c17e:	88bb      	ldrh	r3, [r7, #4]
 801c180:	88f9      	ldrh	r1, [r7, #6]
 801c182:	683a      	ldr	r2, [r7, #0]
 801c184:	4806      	ldr	r0, [pc, #24]	@ (801c1a0 <SUBGRF_WriteRegisters+0x40>)
 801c186:	f7ec ff19 	bl	8008fbc <HAL_SUBGHZ_WriteRegisters>
 801c18a:	697b      	ldr	r3, [r7, #20]
 801c18c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c18e:	693b      	ldr	r3, [r7, #16]
 801c190:	f383 8810 	msr	PRIMASK, r3
}
 801c194:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c196:	bf00      	nop
 801c198:	3718      	adds	r7, #24
 801c19a:	46bd      	mov	sp, r7
 801c19c:	bd80      	pop	{r7, pc}
 801c19e:	bf00      	nop
 801c1a0:	200002e0 	.word	0x200002e0

0801c1a4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b086      	sub	sp, #24
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	4603      	mov	r3, r0
 801c1ac:	6039      	str	r1, [r7, #0]
 801c1ae:	80fb      	strh	r3, [r7, #6]
 801c1b0:	4613      	mov	r3, r2
 801c1b2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1b4:	f3ef 8310 	mrs	r3, PRIMASK
 801c1b8:	60fb      	str	r3, [r7, #12]
  return(result);
 801c1ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c1bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1be:	b672      	cpsid	i
}
 801c1c0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801c1c2:	88bb      	ldrh	r3, [r7, #4]
 801c1c4:	88f9      	ldrh	r1, [r7, #6]
 801c1c6:	683a      	ldr	r2, [r7, #0]
 801c1c8:	4806      	ldr	r0, [pc, #24]	@ (801c1e4 <SUBGRF_ReadRegisters+0x40>)
 801c1ca:	f7ec ff56 	bl	800907a <HAL_SUBGHZ_ReadRegisters>
 801c1ce:	697b      	ldr	r3, [r7, #20]
 801c1d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1d2:	693b      	ldr	r3, [r7, #16]
 801c1d4:	f383 8810 	msr	PRIMASK, r3
}
 801c1d8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c1da:	bf00      	nop
 801c1dc:	3718      	adds	r7, #24
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bd80      	pop	{r7, pc}
 801c1e2:	bf00      	nop
 801c1e4:	200002e0 	.word	0x200002e0

0801c1e8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c1e8:	b580      	push	{r7, lr}
 801c1ea:	b086      	sub	sp, #24
 801c1ec:	af00      	add	r7, sp, #0
 801c1ee:	4603      	mov	r3, r0
 801c1f0:	6039      	str	r1, [r7, #0]
 801c1f2:	71fb      	strb	r3, [r7, #7]
 801c1f4:	4613      	mov	r3, r2
 801c1f6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1f8:	f3ef 8310 	mrs	r3, PRIMASK
 801c1fc:	60fb      	str	r3, [r7, #12]
  return(result);
 801c1fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c202:	b672      	cpsid	i
}
 801c204:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801c206:	79bb      	ldrb	r3, [r7, #6]
 801c208:	b29b      	uxth	r3, r3
 801c20a:	79f9      	ldrb	r1, [r7, #7]
 801c20c:	683a      	ldr	r2, [r7, #0]
 801c20e:	4806      	ldr	r0, [pc, #24]	@ (801c228 <SUBGRF_WriteBuffer+0x40>)
 801c210:	f7ed f847 	bl	80092a2 <HAL_SUBGHZ_WriteBuffer>
 801c214:	697b      	ldr	r3, [r7, #20]
 801c216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c218:	693b      	ldr	r3, [r7, #16]
 801c21a:	f383 8810 	msr	PRIMASK, r3
}
 801c21e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c220:	bf00      	nop
 801c222:	3718      	adds	r7, #24
 801c224:	46bd      	mov	sp, r7
 801c226:	bd80      	pop	{r7, pc}
 801c228:	200002e0 	.word	0x200002e0

0801c22c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c22c:	b580      	push	{r7, lr}
 801c22e:	b086      	sub	sp, #24
 801c230:	af00      	add	r7, sp, #0
 801c232:	4603      	mov	r3, r0
 801c234:	6039      	str	r1, [r7, #0]
 801c236:	71fb      	strb	r3, [r7, #7]
 801c238:	4613      	mov	r3, r2
 801c23a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c23c:	f3ef 8310 	mrs	r3, PRIMASK
 801c240:	60fb      	str	r3, [r7, #12]
  return(result);
 801c242:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c246:	b672      	cpsid	i
}
 801c248:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801c24a:	79bb      	ldrb	r3, [r7, #6]
 801c24c:	b29b      	uxth	r3, r3
 801c24e:	79f9      	ldrb	r1, [r7, #7]
 801c250:	683a      	ldr	r2, [r7, #0]
 801c252:	4806      	ldr	r0, [pc, #24]	@ (801c26c <SUBGRF_ReadBuffer+0x40>)
 801c254:	f7ed f878 	bl	8009348 <HAL_SUBGHZ_ReadBuffer>
 801c258:	697b      	ldr	r3, [r7, #20]
 801c25a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c25c:	693b      	ldr	r3, [r7, #16]
 801c25e:	f383 8810 	msr	PRIMASK, r3
}
 801c262:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c264:	bf00      	nop
 801c266:	3718      	adds	r7, #24
 801c268:	46bd      	mov	sp, r7
 801c26a:	bd80      	pop	{r7, pc}
 801c26c:	200002e0 	.word	0x200002e0

0801c270 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b086      	sub	sp, #24
 801c274:	af00      	add	r7, sp, #0
 801c276:	4603      	mov	r3, r0
 801c278:	6039      	str	r1, [r7, #0]
 801c27a:	71fb      	strb	r3, [r7, #7]
 801c27c:	4613      	mov	r3, r2
 801c27e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c280:	f3ef 8310 	mrs	r3, PRIMASK
 801c284:	60fb      	str	r3, [r7, #12]
  return(result);
 801c286:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c28a:	b672      	cpsid	i
}
 801c28c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801c28e:	88bb      	ldrh	r3, [r7, #4]
 801c290:	79f9      	ldrb	r1, [r7, #7]
 801c292:	683a      	ldr	r2, [r7, #0]
 801c294:	4806      	ldr	r0, [pc, #24]	@ (801c2b0 <SUBGRF_WriteCommand+0x40>)
 801c296:	f7ec ff51 	bl	800913c <HAL_SUBGHZ_ExecSetCmd>
 801c29a:	697b      	ldr	r3, [r7, #20]
 801c29c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c29e:	693b      	ldr	r3, [r7, #16]
 801c2a0:	f383 8810 	msr	PRIMASK, r3
}
 801c2a4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c2a6:	bf00      	nop
 801c2a8:	3718      	adds	r7, #24
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	bd80      	pop	{r7, pc}
 801c2ae:	bf00      	nop
 801c2b0:	200002e0 	.word	0x200002e0

0801c2b4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c2b4:	b580      	push	{r7, lr}
 801c2b6:	b086      	sub	sp, #24
 801c2b8:	af00      	add	r7, sp, #0
 801c2ba:	4603      	mov	r3, r0
 801c2bc:	6039      	str	r1, [r7, #0]
 801c2be:	71fb      	strb	r3, [r7, #7]
 801c2c0:	4613      	mov	r3, r2
 801c2c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2c4:	f3ef 8310 	mrs	r3, PRIMASK
 801c2c8:	60fb      	str	r3, [r7, #12]
  return(result);
 801c2ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c2cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2ce:	b672      	cpsid	i
}
 801c2d0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801c2d2:	88bb      	ldrh	r3, [r7, #4]
 801c2d4:	79f9      	ldrb	r1, [r7, #7]
 801c2d6:	683a      	ldr	r2, [r7, #0]
 801c2d8:	4806      	ldr	r0, [pc, #24]	@ (801c2f4 <SUBGRF_ReadCommand+0x40>)
 801c2da:	f7ec ff8e 	bl	80091fa <HAL_SUBGHZ_ExecGetCmd>
 801c2de:	697b      	ldr	r3, [r7, #20]
 801c2e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2e2:	693b      	ldr	r3, [r7, #16]
 801c2e4:	f383 8810 	msr	PRIMASK, r3
}
 801c2e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c2ea:	bf00      	nop
 801c2ec:	3718      	adds	r7, #24
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	bd80      	pop	{r7, pc}
 801c2f2:	bf00      	nop
 801c2f4:	200002e0 	.word	0x200002e0

0801c2f8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801c2f8:	b580      	push	{r7, lr}
 801c2fa:	b084      	sub	sp, #16
 801c2fc:	af00      	add	r7, sp, #0
 801c2fe:	4603      	mov	r3, r0
 801c300:	460a      	mov	r2, r1
 801c302:	71fb      	strb	r3, [r7, #7]
 801c304:	4613      	mov	r3, r2
 801c306:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801c308:	2301      	movs	r3, #1
 801c30a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801c30c:	79bb      	ldrb	r3, [r7, #6]
 801c30e:	2b01      	cmp	r3, #1
 801c310:	d10d      	bne.n	801c32e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801c312:	79fb      	ldrb	r3, [r7, #7]
 801c314:	2b01      	cmp	r3, #1
 801c316:	d104      	bne.n	801c322 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801c318:	2302      	movs	r3, #2
 801c31a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c31c:	2004      	movs	r0, #4
 801c31e:	f000 f8ef 	bl	801c500 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c322:	79fb      	ldrb	r3, [r7, #7]
 801c324:	2b02      	cmp	r3, #2
 801c326:	d107      	bne.n	801c338 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c328:	2303      	movs	r3, #3
 801c32a:	73fb      	strb	r3, [r7, #15]
 801c32c:	e004      	b.n	801c338 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c32e:	79bb      	ldrb	r3, [r7, #6]
 801c330:	2b00      	cmp	r3, #0
 801c332:	d101      	bne.n	801c338 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c334:	2301      	movs	r3, #1
 801c336:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c338:	7bfb      	ldrb	r3, [r7, #15]
 801c33a:	4618      	mov	r0, r3
 801c33c:	f7f0 fa6f 	bl	800c81e <RBI_ConfigRFSwitch>
}
 801c340:	bf00      	nop
 801c342:	3710      	adds	r7, #16
 801c344:	46bd      	mov	sp, r7
 801c346:	bd80      	pop	{r7, pc}

0801c348 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c348:	b580      	push	{r7, lr}
 801c34a:	b084      	sub	sp, #16
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	4603      	mov	r3, r0
 801c350:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c352:	2301      	movs	r3, #1
 801c354:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c356:	f7f0 fa70 	bl	800c83a <RBI_GetTxConfig>
 801c35a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c35c:	68bb      	ldr	r3, [r7, #8]
 801c35e:	2b02      	cmp	r3, #2
 801c360:	d016      	beq.n	801c390 <SUBGRF_SetRfTxPower+0x48>
 801c362:	68bb      	ldr	r3, [r7, #8]
 801c364:	2b02      	cmp	r3, #2
 801c366:	dc16      	bgt.n	801c396 <SUBGRF_SetRfTxPower+0x4e>
 801c368:	68bb      	ldr	r3, [r7, #8]
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d003      	beq.n	801c376 <SUBGRF_SetRfTxPower+0x2e>
 801c36e:	68bb      	ldr	r3, [r7, #8]
 801c370:	2b01      	cmp	r3, #1
 801c372:	d00a      	beq.n	801c38a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c374:	e00f      	b.n	801c396 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c37a:	2b0f      	cmp	r3, #15
 801c37c:	dd02      	ble.n	801c384 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c37e:	2302      	movs	r3, #2
 801c380:	73fb      	strb	r3, [r7, #15]
            break;
 801c382:	e009      	b.n	801c398 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c384:	2301      	movs	r3, #1
 801c386:	73fb      	strb	r3, [r7, #15]
            break;
 801c388:	e006      	b.n	801c398 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c38a:	2301      	movs	r3, #1
 801c38c:	73fb      	strb	r3, [r7, #15]
            break;
 801c38e:	e003      	b.n	801c398 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c390:	2302      	movs	r3, #2
 801c392:	73fb      	strb	r3, [r7, #15]
            break;
 801c394:	e000      	b.n	801c398 <SUBGRF_SetRfTxPower+0x50>
            break;
 801c396:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c398:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c39c:	7bfb      	ldrb	r3, [r7, #15]
 801c39e:	2202      	movs	r2, #2
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	f7ff fbb3 	bl	801bb0c <SUBGRF_SetTxParams>

    return paSelect;
 801c3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 801c3a8:	4618      	mov	r0, r3
 801c3aa:	3710      	adds	r7, #16
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	bd80      	pop	{r7, pc}

0801c3b0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c3b0:	b480      	push	{r7}
 801c3b2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c3b4:	2301      	movs	r3, #1
}
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	46bd      	mov	sp, r7
 801c3ba:	bc80      	pop	{r7}
 801c3bc:	4770      	bx	lr
	...

0801c3c0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c3c0:	b580      	push	{r7, lr}
 801c3c2:	b082      	sub	sp, #8
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c3c8:	4b03      	ldr	r3, [pc, #12]	@ (801c3d8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	2001      	movs	r0, #1
 801c3ce:	4798      	blx	r3
}
 801c3d0:	bf00      	nop
 801c3d2:	3708      	adds	r7, #8
 801c3d4:	46bd      	mov	sp, r7
 801c3d6:	bd80      	pop	{r7, pc}
 801c3d8:	20001c94 	.word	0x20001c94

0801c3dc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c3dc:	b580      	push	{r7, lr}
 801c3de:	b082      	sub	sp, #8
 801c3e0:	af00      	add	r7, sp, #0
 801c3e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c3e4:	4b03      	ldr	r3, [pc, #12]	@ (801c3f4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	2002      	movs	r0, #2
 801c3ea:	4798      	blx	r3
}
 801c3ec:	bf00      	nop
 801c3ee:	3708      	adds	r7, #8
 801c3f0:	46bd      	mov	sp, r7
 801c3f2:	bd80      	pop	{r7, pc}
 801c3f4:	20001c94 	.word	0x20001c94

0801c3f8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	b082      	sub	sp, #8
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c400:	4b03      	ldr	r3, [pc, #12]	@ (801c410 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	2040      	movs	r0, #64	@ 0x40
 801c406:	4798      	blx	r3
}
 801c408:	bf00      	nop
 801c40a:	3708      	adds	r7, #8
 801c40c:	46bd      	mov	sp, r7
 801c40e:	bd80      	pop	{r7, pc}
 801c410:	20001c94 	.word	0x20001c94

0801c414 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b082      	sub	sp, #8
 801c418:	af00      	add	r7, sp, #0
 801c41a:	6078      	str	r0, [r7, #4]
 801c41c:	460b      	mov	r3, r1
 801c41e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c420:	78fb      	ldrb	r3, [r7, #3]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d002      	beq.n	801c42c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c426:	2b01      	cmp	r3, #1
 801c428:	d005      	beq.n	801c436 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c42a:	e00a      	b.n	801c442 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c42c:	4b07      	ldr	r3, [pc, #28]	@ (801c44c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	2080      	movs	r0, #128	@ 0x80
 801c432:	4798      	blx	r3
            break;
 801c434:	e005      	b.n	801c442 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c436:	4b05      	ldr	r3, [pc, #20]	@ (801c44c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c43e:	4798      	blx	r3
            break;
 801c440:	bf00      	nop
    }
}
 801c442:	bf00      	nop
 801c444:	3708      	adds	r7, #8
 801c446:	46bd      	mov	sp, r7
 801c448:	bd80      	pop	{r7, pc}
 801c44a:	bf00      	nop
 801c44c:	20001c94 	.word	0x20001c94

0801c450 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c450:	b580      	push	{r7, lr}
 801c452:	b082      	sub	sp, #8
 801c454:	af00      	add	r7, sp, #0
 801c456:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801c458:	4b04      	ldr	r3, [pc, #16]	@ (801c46c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801c460:	4798      	blx	r3
}
 801c462:	bf00      	nop
 801c464:	3708      	adds	r7, #8
 801c466:	46bd      	mov	sp, r7
 801c468:	bd80      	pop	{r7, pc}
 801c46a:	bf00      	nop
 801c46c:	20001c94 	.word	0x20001c94

0801c470 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b082      	sub	sp, #8
 801c474:	af00      	add	r7, sp, #0
 801c476:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801c478:	4b03      	ldr	r3, [pc, #12]	@ (801c488 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	2020      	movs	r0, #32
 801c47e:	4798      	blx	r3
}
 801c480:	bf00      	nop
 801c482:	3708      	adds	r7, #8
 801c484:	46bd      	mov	sp, r7
 801c486:	bd80      	pop	{r7, pc}
 801c488:	20001c94 	.word	0x20001c94

0801c48c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b082      	sub	sp, #8
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801c494:	4b03      	ldr	r3, [pc, #12]	@ (801c4a4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	2004      	movs	r0, #4
 801c49a:	4798      	blx	r3
}
 801c49c:	bf00      	nop
 801c49e:	3708      	adds	r7, #8
 801c4a0:	46bd      	mov	sp, r7
 801c4a2:	bd80      	pop	{r7, pc}
 801c4a4:	20001c94 	.word	0x20001c94

0801c4a8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b082      	sub	sp, #8
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801c4b0:	4b03      	ldr	r3, [pc, #12]	@ (801c4c0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	2008      	movs	r0, #8
 801c4b6:	4798      	blx	r3
}
 801c4b8:	bf00      	nop
 801c4ba:	3708      	adds	r7, #8
 801c4bc:	46bd      	mov	sp, r7
 801c4be:	bd80      	pop	{r7, pc}
 801c4c0:	20001c94 	.word	0x20001c94

0801c4c4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b082      	sub	sp, #8
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801c4cc:	4b03      	ldr	r3, [pc, #12]	@ (801c4dc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	2010      	movs	r0, #16
 801c4d2:	4798      	blx	r3
}
 801c4d4:	bf00      	nop
 801c4d6:	3708      	adds	r7, #8
 801c4d8:	46bd      	mov	sp, r7
 801c4da:	bd80      	pop	{r7, pc}
 801c4dc:	20001c94 	.word	0x20001c94

0801c4e0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c4e0:	b580      	push	{r7, lr}
 801c4e2:	b082      	sub	sp, #8
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801c4e8:	4b04      	ldr	r3, [pc, #16]	@ (801c4fc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801c4f0:	4798      	blx	r3
}
 801c4f2:	bf00      	nop
 801c4f4:	3708      	adds	r7, #8
 801c4f6:	46bd      	mov	sp, r7
 801c4f8:	bd80      	pop	{r7, pc}
 801c4fa:	bf00      	nop
 801c4fc:	20001c94 	.word	0x20001c94

0801c500 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801c500:	b580      	push	{r7, lr}
 801c502:	b084      	sub	sp, #16
 801c504:	af00      	add	r7, sp, #0
 801c506:	4603      	mov	r3, r0
 801c508:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801c50a:	f7f0 f9a4 	bl	800c856 <RBI_IsDCDC>
 801c50e:	4603      	mov	r3, r0
 801c510:	2b01      	cmp	r3, #1
 801c512:	d112      	bne.n	801c53a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801c514:	f640 1023 	movw	r0, #2339	@ 0x923
 801c518:	f7ff fe02 	bl	801c120 <SUBGRF_ReadRegister>
 801c51c:	4603      	mov	r3, r0
 801c51e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801c520:	7bfb      	ldrb	r3, [r7, #15]
 801c522:	f023 0306 	bic.w	r3, r3, #6
 801c526:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801c528:	7bfa      	ldrb	r2, [r7, #15]
 801c52a:	79fb      	ldrb	r3, [r7, #7]
 801c52c:	4313      	orrs	r3, r2
 801c52e:	b2db      	uxtb	r3, r3
 801c530:	4619      	mov	r1, r3
 801c532:	f640 1023 	movw	r0, #2339	@ 0x923
 801c536:	f7ff fdd1 	bl	801c0dc <SUBGRF_WriteRegister>
  }
}
 801c53a:	bf00      	nop
 801c53c:	3710      	adds	r7, #16
 801c53e:	46bd      	mov	sp, r7
 801c540:	bd80      	pop	{r7, pc}
	...

0801c544 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c544:	b480      	push	{r7}
 801c546:	b085      	sub	sp, #20
 801c548:	af00      	add	r7, sp, #0
 801c54a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d101      	bne.n	801c556 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c552:	231f      	movs	r3, #31
 801c554:	e017      	b.n	801c586 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c556:	2300      	movs	r3, #0
 801c558:	73fb      	strb	r3, [r7, #15]
 801c55a:	e00f      	b.n	801c57c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c55c:	7bfb      	ldrb	r3, [r7, #15]
 801c55e:	4a0c      	ldr	r2, [pc, #48]	@ (801c590 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c560:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c564:	687a      	ldr	r2, [r7, #4]
 801c566:	429a      	cmp	r2, r3
 801c568:	d205      	bcs.n	801c576 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c56a:	7bfb      	ldrb	r3, [r7, #15]
 801c56c:	4a08      	ldr	r2, [pc, #32]	@ (801c590 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c56e:	00db      	lsls	r3, r3, #3
 801c570:	4413      	add	r3, r2
 801c572:	791b      	ldrb	r3, [r3, #4]
 801c574:	e007      	b.n	801c586 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c576:	7bfb      	ldrb	r3, [r7, #15]
 801c578:	3301      	adds	r3, #1
 801c57a:	73fb      	strb	r3, [r7, #15]
 801c57c:	7bfb      	ldrb	r3, [r7, #15]
 801c57e:	2b15      	cmp	r3, #21
 801c580:	d9ec      	bls.n	801c55c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801c582:	bf00      	nop
 801c584:	e7fd      	b.n	801c582 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c586:	4618      	mov	r0, r3
 801c588:	3714      	adds	r7, #20
 801c58a:	46bd      	mov	sp, r7
 801c58c:	bc80      	pop	{r7}
 801c58e:	4770      	bx	lr
 801c590:	0801ffb0 	.word	0x0801ffb0

0801c594 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b08a      	sub	sp, #40	@ 0x28
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
 801c59c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c59e:	4b35      	ldr	r3, [pc, #212]	@ (801c674 <SUBGRF_GetCFO+0xe0>)
 801c5a0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c5a2:	f640 0007 	movw	r0, #2055	@ 0x807
 801c5a6:	f7ff fdbb 	bl	801c120 <SUBGRF_ReadRegister>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c5ae:	7ffb      	ldrb	r3, [r7, #31]
 801c5b0:	08db      	lsrs	r3, r3, #3
 801c5b2:	b2db      	uxtb	r3, r3
 801c5b4:	f003 0303 	and.w	r3, r3, #3
 801c5b8:	3328      	adds	r3, #40	@ 0x28
 801c5ba:	443b      	add	r3, r7
 801c5bc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c5c0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c5c2:	7ffb      	ldrb	r3, [r7, #31]
 801c5c4:	f003 0307 	and.w	r3, r3, #7
 801c5c8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801c5ca:	7fba      	ldrb	r2, [r7, #30]
 801c5cc:	7f7b      	ldrb	r3, [r7, #29]
 801c5ce:	3301      	adds	r3, #1
 801c5d0:	fa02 f303 	lsl.w	r3, r2, r3
 801c5d4:	461a      	mov	r2, r3
 801c5d6:	4b28      	ldr	r3, [pc, #160]	@ (801c678 <SUBGRF_GetCFO+0xe4>)
 801c5d8:	fbb3 f3f2 	udiv	r3, r3, r2
 801c5dc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c5de:	69ba      	ldr	r2, [r7, #24]
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 801c5e6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c5e8:	2301      	movs	r3, #1
 801c5ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c5ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c5f2:	697a      	ldr	r2, [r7, #20]
 801c5f4:	fb02 f303 	mul.w	r3, r2, r3
 801c5f8:	2b07      	cmp	r3, #7
 801c5fa:	d802      	bhi.n	801c602 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c5fc:	2302      	movs	r3, #2
 801c5fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801c602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c606:	697a      	ldr	r2, [r7, #20]
 801c608:	fb02 f303 	mul.w	r3, r2, r3
 801c60c:	2b03      	cmp	r3, #3
 801c60e:	d802      	bhi.n	801c616 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c610:	2304      	movs	r3, #4
 801c612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c616:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c61a:	69bb      	ldr	r3, [r7, #24]
 801c61c:	fb02 f303 	mul.w	r3, r2, r3
 801c620:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c622:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801c626:	f7ff fd7b 	bl	801c120 <SUBGRF_ReadRegister>
 801c62a:	4603      	mov	r3, r0
 801c62c:	021b      	lsls	r3, r3, #8
 801c62e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801c632:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c634:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801c638:	f7ff fd72 	bl	801c120 <SUBGRF_ReadRegister>
 801c63c:	4603      	mov	r3, r0
 801c63e:	461a      	mov	r2, r3
 801c640:	6a3b      	ldr	r3, [r7, #32]
 801c642:	4313      	orrs	r3, r2
 801c644:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c646:	6a3b      	ldr	r3, [r7, #32]
 801c648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d005      	beq.n	801c65c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c650:	6a3b      	ldr	r3, [r7, #32]
 801c652:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c656:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c65a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c65c:	693b      	ldr	r3, [r7, #16]
 801c65e:	095b      	lsrs	r3, r3, #5
 801c660:	6a3a      	ldr	r2, [r7, #32]
 801c662:	fb02 f303 	mul.w	r3, r2, r3
 801c666:	11da      	asrs	r2, r3, #7
 801c668:	683b      	ldr	r3, [r7, #0]
 801c66a:	601a      	str	r2, [r3, #0]
}
 801c66c:	bf00      	nop
 801c66e:	3728      	adds	r7, #40	@ 0x28
 801c670:	46bd      	mov	sp, r7
 801c672:	bd80      	pop	{r7, pc}
 801c674:	0c0a0804 	.word	0x0c0a0804
 801c678:	01e84800 	.word	0x01e84800

0801c67c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801c67c:	b480      	push	{r7}
 801c67e:	b087      	sub	sp, #28
 801c680:	af00      	add	r7, sp, #0
 801c682:	4603      	mov	r3, r0
 801c684:	60b9      	str	r1, [r7, #8]
 801c686:	607a      	str	r2, [r7, #4]
 801c688:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801c68a:	2300      	movs	r3, #0
 801c68c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801c68e:	f04f 33ff 	mov.w	r3, #4294967295
 801c692:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c694:	697b      	ldr	r3, [r7, #20]
}
 801c696:	4618      	mov	r0, r3
 801c698:	371c      	adds	r7, #28
 801c69a:	46bd      	mov	sp, r7
 801c69c:	bc80      	pop	{r7}
 801c69e:	4770      	bx	lr

0801c6a0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801c6a0:	b480      	push	{r7}
 801c6a2:	b087      	sub	sp, #28
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	60b9      	str	r1, [r7, #8]
 801c6aa:	607a      	str	r2, [r7, #4]
 801c6ac:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801c6ae:	2300      	movs	r3, #0
 801c6b0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801c6b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c6b6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c6b8:	697b      	ldr	r3, [r7, #20]
}
 801c6ba:	4618      	mov	r0, r3
 801c6bc:	371c      	adds	r7, #28
 801c6be:	46bd      	mov	sp, r7
 801c6c0:	bc80      	pop	{r7}
 801c6c2:	4770      	bx	lr

0801c6c4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801c6c4:	b480      	push	{r7}
 801c6c6:	b085      	sub	sp, #20
 801c6c8:	af00      	add	r7, sp, #0
 801c6ca:	60f8      	str	r0, [r7, #12]
 801c6cc:	60b9      	str	r1, [r7, #8]
 801c6ce:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c6d0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c6d4:	4618      	mov	r0, r3
 801c6d6:	3714      	adds	r7, #20
 801c6d8:	46bd      	mov	sp, r7
 801c6da:	bc80      	pop	{r7}
 801c6dc:	4770      	bx	lr

0801c6de <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c6de:	b480      	push	{r7}
 801c6e0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c6e2:	bf00      	nop
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	bc80      	pop	{r7}
 801c6e8:	4770      	bx	lr

0801c6ea <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c6ea:	b480      	push	{r7}
 801c6ec:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c6ee:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	46bd      	mov	sp, r7
 801c6f4:	bc80      	pop	{r7}
 801c6f6:	4770      	bx	lr

0801c6f8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c6f8:	b480      	push	{r7}
 801c6fa:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c6fc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c6fe:	4618      	mov	r0, r3
 801c700:	46bd      	mov	sp, r7
 801c702:	bc80      	pop	{r7}
 801c704:	4770      	bx	lr

0801c706 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c706:	b480      	push	{r7}
 801c708:	b083      	sub	sp, #12
 801c70a:	af00      	add	r7, sp, #0
 801c70c:	4603      	mov	r3, r0
 801c70e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c710:	bf00      	nop
 801c712:	370c      	adds	r7, #12
 801c714:	46bd      	mov	sp, r7
 801c716:	bc80      	pop	{r7}
 801c718:	4770      	bx	lr

0801c71a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c71a:	b480      	push	{r7}
 801c71c:	b087      	sub	sp, #28
 801c71e:	af00      	add	r7, sp, #0
 801c720:	60f8      	str	r0, [r7, #12]
 801c722:	460b      	mov	r3, r1
 801c724:	607a      	str	r2, [r7, #4]
 801c726:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c728:	f04f 33ff 	mov.w	r3, #4294967295
 801c72c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c72e:	697b      	ldr	r3, [r7, #20]
}
 801c730:	4618      	mov	r0, r3
 801c732:	371c      	adds	r7, #28
 801c734:	46bd      	mov	sp, r7
 801c736:	bc80      	pop	{r7}
 801c738:	4770      	bx	lr

0801c73a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c73a:	b480      	push	{r7}
 801c73c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c73e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c742:	4618      	mov	r0, r3
 801c744:	46bd      	mov	sp, r7
 801c746:	bc80      	pop	{r7}
 801c748:	4770      	bx	lr

0801c74a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c74a:	b480      	push	{r7}
 801c74c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c74e:	bf00      	nop
 801c750:	46bd      	mov	sp, r7
 801c752:	bc80      	pop	{r7}
 801c754:	4770      	bx	lr

0801c756 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c756:	b480      	push	{r7}
 801c758:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c75a:	bf00      	nop
 801c75c:	46bd      	mov	sp, r7
 801c75e:	bc80      	pop	{r7}
 801c760:	4770      	bx	lr

0801c762 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c762:	b480      	push	{r7}
 801c764:	b083      	sub	sp, #12
 801c766:	af00      	add	r7, sp, #0
 801c768:	4603      	mov	r3, r0
 801c76a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c76c:	bf00      	nop
 801c76e:	370c      	adds	r7, #12
 801c770:	46bd      	mov	sp, r7
 801c772:	bc80      	pop	{r7}
 801c774:	4770      	bx	lr
	...

0801c778 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c778:	b480      	push	{r7}
 801c77a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c77c:	4b04      	ldr	r3, [pc, #16]	@ (801c790 <UTIL_LPM_Init+0x18>)
 801c77e:	2200      	movs	r2, #0
 801c780:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c782:	4b04      	ldr	r3, [pc, #16]	@ (801c794 <UTIL_LPM_Init+0x1c>)
 801c784:	2200      	movs	r2, #0
 801c786:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c788:	bf00      	nop
 801c78a:	46bd      	mov	sp, r7
 801c78c:	bc80      	pop	{r7}
 801c78e:	4770      	bx	lr
 801c790:	20001c98 	.word	0x20001c98
 801c794:	20001c9c 	.word	0x20001c9c

0801c798 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c798:	b480      	push	{r7}
 801c79a:	b087      	sub	sp, #28
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	6078      	str	r0, [r7, #4]
 801c7a0:	460b      	mov	r3, r1
 801c7a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7a4:	f3ef 8310 	mrs	r3, PRIMASK
 801c7a8:	613b      	str	r3, [r7, #16]
  return(result);
 801c7aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c7ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7ae:	b672      	cpsid	i
}
 801c7b0:	bf00      	nop
  
  switch( state )
 801c7b2:	78fb      	ldrb	r3, [r7, #3]
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d008      	beq.n	801c7ca <UTIL_LPM_SetStopMode+0x32>
 801c7b8:	2b01      	cmp	r3, #1
 801c7ba:	d10e      	bne.n	801c7da <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c7bc:	4b0d      	ldr	r3, [pc, #52]	@ (801c7f4 <UTIL_LPM_SetStopMode+0x5c>)
 801c7be:	681a      	ldr	r2, [r3, #0]
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	4313      	orrs	r3, r2
 801c7c4:	4a0b      	ldr	r2, [pc, #44]	@ (801c7f4 <UTIL_LPM_SetStopMode+0x5c>)
 801c7c6:	6013      	str	r3, [r2, #0]
      break;
 801c7c8:	e008      	b.n	801c7dc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	43da      	mvns	r2, r3
 801c7ce:	4b09      	ldr	r3, [pc, #36]	@ (801c7f4 <UTIL_LPM_SetStopMode+0x5c>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	4013      	ands	r3, r2
 801c7d4:	4a07      	ldr	r2, [pc, #28]	@ (801c7f4 <UTIL_LPM_SetStopMode+0x5c>)
 801c7d6:	6013      	str	r3, [r2, #0]
      break;
 801c7d8:	e000      	b.n	801c7dc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c7da:	bf00      	nop
 801c7dc:	697b      	ldr	r3, [r7, #20]
 801c7de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	f383 8810 	msr	PRIMASK, r3
}
 801c7e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c7e8:	bf00      	nop
 801c7ea:	371c      	adds	r7, #28
 801c7ec:	46bd      	mov	sp, r7
 801c7ee:	bc80      	pop	{r7}
 801c7f0:	4770      	bx	lr
 801c7f2:	bf00      	nop
 801c7f4:	20001c98 	.word	0x20001c98

0801c7f8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c7f8:	b480      	push	{r7}
 801c7fa:	b087      	sub	sp, #28
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
 801c800:	460b      	mov	r3, r1
 801c802:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c804:	f3ef 8310 	mrs	r3, PRIMASK
 801c808:	613b      	str	r3, [r7, #16]
  return(result);
 801c80a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c80c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c80e:	b672      	cpsid	i
}
 801c810:	bf00      	nop
  
  switch(state)
 801c812:	78fb      	ldrb	r3, [r7, #3]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d008      	beq.n	801c82a <UTIL_LPM_SetOffMode+0x32>
 801c818:	2b01      	cmp	r3, #1
 801c81a:	d10e      	bne.n	801c83a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c81c:	4b0d      	ldr	r3, [pc, #52]	@ (801c854 <UTIL_LPM_SetOffMode+0x5c>)
 801c81e:	681a      	ldr	r2, [r3, #0]
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	4313      	orrs	r3, r2
 801c824:	4a0b      	ldr	r2, [pc, #44]	@ (801c854 <UTIL_LPM_SetOffMode+0x5c>)
 801c826:	6013      	str	r3, [r2, #0]
      break;
 801c828:	e008      	b.n	801c83c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	43da      	mvns	r2, r3
 801c82e:	4b09      	ldr	r3, [pc, #36]	@ (801c854 <UTIL_LPM_SetOffMode+0x5c>)
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	4013      	ands	r3, r2
 801c834:	4a07      	ldr	r2, [pc, #28]	@ (801c854 <UTIL_LPM_SetOffMode+0x5c>)
 801c836:	6013      	str	r3, [r2, #0]
      break;
 801c838:	e000      	b.n	801c83c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c83a:	bf00      	nop
 801c83c:	697b      	ldr	r3, [r7, #20]
 801c83e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	f383 8810 	msr	PRIMASK, r3
}
 801c846:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c848:	bf00      	nop
 801c84a:	371c      	adds	r7, #28
 801c84c:	46bd      	mov	sp, r7
 801c84e:	bc80      	pop	{r7}
 801c850:	4770      	bx	lr
 801c852:	bf00      	nop
 801c854:	20001c9c 	.word	0x20001c9c

0801c858 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c858:	b580      	push	{r7, lr}
 801c85a:	b084      	sub	sp, #16
 801c85c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c85e:	f3ef 8310 	mrs	r3, PRIMASK
 801c862:	60bb      	str	r3, [r7, #8]
  return(result);
 801c864:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c866:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c868:	b672      	cpsid	i
}
 801c86a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c86c:	4b12      	ldr	r3, [pc, #72]	@ (801c8b8 <UTIL_LPM_EnterLowPower+0x60>)
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	2b00      	cmp	r3, #0
 801c872:	d006      	beq.n	801c882 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c874:	4b11      	ldr	r3, [pc, #68]	@ (801c8bc <UTIL_LPM_EnterLowPower+0x64>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c87a:	4b10      	ldr	r3, [pc, #64]	@ (801c8bc <UTIL_LPM_EnterLowPower+0x64>)
 801c87c:	685b      	ldr	r3, [r3, #4]
 801c87e:	4798      	blx	r3
 801c880:	e010      	b.n	801c8a4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c882:	4b0f      	ldr	r3, [pc, #60]	@ (801c8c0 <UTIL_LPM_EnterLowPower+0x68>)
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d006      	beq.n	801c898 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c88a:	4b0c      	ldr	r3, [pc, #48]	@ (801c8bc <UTIL_LPM_EnterLowPower+0x64>)
 801c88c:	689b      	ldr	r3, [r3, #8]
 801c88e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c890:	4b0a      	ldr	r3, [pc, #40]	@ (801c8bc <UTIL_LPM_EnterLowPower+0x64>)
 801c892:	68db      	ldr	r3, [r3, #12]
 801c894:	4798      	blx	r3
 801c896:	e005      	b.n	801c8a4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c898:	4b08      	ldr	r3, [pc, #32]	@ (801c8bc <UTIL_LPM_EnterLowPower+0x64>)
 801c89a:	691b      	ldr	r3, [r3, #16]
 801c89c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c89e:	4b07      	ldr	r3, [pc, #28]	@ (801c8bc <UTIL_LPM_EnterLowPower+0x64>)
 801c8a0:	695b      	ldr	r3, [r3, #20]
 801c8a2:	4798      	blx	r3
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	f383 8810 	msr	PRIMASK, r3
}
 801c8ae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c8b0:	bf00      	nop
 801c8b2:	3710      	adds	r7, #16
 801c8b4:	46bd      	mov	sp, r7
 801c8b6:	bd80      	pop	{r7, pc}
 801c8b8:	20001c98 	.word	0x20001c98
 801c8bc:	0801fa24 	.word	0x0801fa24
 801c8c0:	20001c9c 	.word	0x20001c9c

0801c8c4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c8c4:	b480      	push	{r7}
 801c8c6:	b087      	sub	sp, #28
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	60f8      	str	r0, [r7, #12]
 801c8cc:	60b9      	str	r1, [r7, #8]
 801c8ce:	4613      	mov	r3, r2
 801c8d0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c8d6:	68bb      	ldr	r3, [r7, #8]
 801c8d8:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c8da:	e007      	b.n	801c8ec <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c8dc:	693a      	ldr	r2, [r7, #16]
 801c8de:	1c53      	adds	r3, r2, #1
 801c8e0:	613b      	str	r3, [r7, #16]
 801c8e2:	697b      	ldr	r3, [r7, #20]
 801c8e4:	1c59      	adds	r1, r3, #1
 801c8e6:	6179      	str	r1, [r7, #20]
 801c8e8:	7812      	ldrb	r2, [r2, #0]
 801c8ea:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c8ec:	88fb      	ldrh	r3, [r7, #6]
 801c8ee:	1e5a      	subs	r2, r3, #1
 801c8f0:	80fa      	strh	r2, [r7, #6]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d1f2      	bne.n	801c8dc <UTIL_MEM_cpy_8+0x18>
    }
}
 801c8f6:	bf00      	nop
 801c8f8:	bf00      	nop
 801c8fa:	371c      	adds	r7, #28
 801c8fc:	46bd      	mov	sp, r7
 801c8fe:	bc80      	pop	{r7}
 801c900:	4770      	bx	lr

0801c902 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c902:	b480      	push	{r7}
 801c904:	b085      	sub	sp, #20
 801c906:	af00      	add	r7, sp, #0
 801c908:	6078      	str	r0, [r7, #4]
 801c90a:	460b      	mov	r3, r1
 801c90c:	70fb      	strb	r3, [r7, #3]
 801c90e:	4613      	mov	r3, r2
 801c910:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c916:	e004      	b.n	801c922 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	1c5a      	adds	r2, r3, #1
 801c91c:	60fa      	str	r2, [r7, #12]
 801c91e:	78fa      	ldrb	r2, [r7, #3]
 801c920:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c922:	883b      	ldrh	r3, [r7, #0]
 801c924:	1e5a      	subs	r2, r3, #1
 801c926:	803a      	strh	r2, [r7, #0]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d1f5      	bne.n	801c918 <UTIL_MEM_set_8+0x16>
  }
}
 801c92c:	bf00      	nop
 801c92e:	bf00      	nop
 801c930:	3714      	adds	r7, #20
 801c932:	46bd      	mov	sp, r7
 801c934:	bc80      	pop	{r7}
 801c936:	4770      	bx	lr

0801c938 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c938:	b082      	sub	sp, #8
 801c93a:	b480      	push	{r7}
 801c93c:	b087      	sub	sp, #28
 801c93e:	af00      	add	r7, sp, #0
 801c940:	60f8      	str	r0, [r7, #12]
 801c942:	1d38      	adds	r0, r7, #4
 801c944:	e880 0006 	stmia.w	r0, {r1, r2}
 801c948:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c94a:	2300      	movs	r3, #0
 801c94c:	613b      	str	r3, [r7, #16]
 801c94e:	2300      	movs	r3, #0
 801c950:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c956:	4413      	add	r3, r2
 801c958:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c95a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c95e:	b29a      	uxth	r2, r3
 801c960:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c964:	b29b      	uxth	r3, r3
 801c966:	4413      	add	r3, r2
 801c968:	b29b      	uxth	r3, r3
 801c96a:	b21b      	sxth	r3, r3
 801c96c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c96e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c976:	db0a      	blt.n	801c98e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c978:	693b      	ldr	r3, [r7, #16]
 801c97a:	3301      	adds	r3, #1
 801c97c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c97e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c982:	b29b      	uxth	r3, r3
 801c984:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801c988:	b29b      	uxth	r3, r3
 801c98a:	b21b      	sxth	r3, r3
 801c98c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	461a      	mov	r2, r3
 801c992:	f107 0310 	add.w	r3, r7, #16
 801c996:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c99a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c99e:	68f8      	ldr	r0, [r7, #12]
 801c9a0:	371c      	adds	r7, #28
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	bc80      	pop	{r7}
 801c9a6:	b002      	add	sp, #8
 801c9a8:	4770      	bx	lr

0801c9aa <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c9aa:	b082      	sub	sp, #8
 801c9ac:	b480      	push	{r7}
 801c9ae:	b087      	sub	sp, #28
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	60f8      	str	r0, [r7, #12]
 801c9b4:	1d38      	adds	r0, r7, #4
 801c9b6:	e880 0006 	stmia.w	r0, {r1, r2}
 801c9ba:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c9bc:	2300      	movs	r3, #0
 801c9be:	613b      	str	r3, [r7, #16]
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c9c4:	687a      	ldr	r2, [r7, #4]
 801c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9c8:	1ad3      	subs	r3, r2, r3
 801c9ca:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c9cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c9d0:	b29a      	uxth	r2, r3
 801c9d2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c9d6:	b29b      	uxth	r3, r3
 801c9d8:	1ad3      	subs	r3, r2, r3
 801c9da:	b29b      	uxth	r3, r3
 801c9dc:	b21b      	sxth	r3, r3
 801c9de:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c9e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	da0a      	bge.n	801c9fe <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c9e8:	693b      	ldr	r3, [r7, #16]
 801c9ea:	3b01      	subs	r3, #1
 801c9ec:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c9ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c9f2:	b29b      	uxth	r3, r3
 801c9f4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801c9f8:	b29b      	uxth	r3, r3
 801c9fa:	b21b      	sxth	r3, r3
 801c9fc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	461a      	mov	r2, r3
 801ca02:	f107 0310 	add.w	r3, r7, #16
 801ca06:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ca0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ca0e:	68f8      	ldr	r0, [r7, #12]
 801ca10:	371c      	adds	r7, #28
 801ca12:	46bd      	mov	sp, r7
 801ca14:	bc80      	pop	{r7}
 801ca16:	b002      	add	sp, #8
 801ca18:	4770      	bx	lr
	...

0801ca1c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b088      	sub	sp, #32
 801ca20:	af02      	add	r7, sp, #8
 801ca22:	463b      	mov	r3, r7
 801ca24:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca28:	2300      	movs	r3, #0
 801ca2a:	60bb      	str	r3, [r7, #8]
 801ca2c:	2300      	movs	r3, #0
 801ca2e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ca30:	4b10      	ldr	r3, [pc, #64]	@ (801ca74 <SysTimeSet+0x58>)
 801ca32:	691b      	ldr	r3, [r3, #16]
 801ca34:	f107 0208 	add.w	r2, r7, #8
 801ca38:	3204      	adds	r2, #4
 801ca3a:	4610      	mov	r0, r2
 801ca3c:	4798      	blx	r3
 801ca3e:	4603      	mov	r3, r0
 801ca40:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ca42:	f107 0010 	add.w	r0, r7, #16
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	9300      	str	r3, [sp, #0]
 801ca4a:	68bb      	ldr	r3, [r7, #8]
 801ca4c:	463a      	mov	r2, r7
 801ca4e:	ca06      	ldmia	r2, {r1, r2}
 801ca50:	f7ff ffab 	bl	801c9aa <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ca54:	4b07      	ldr	r3, [pc, #28]	@ (801ca74 <SysTimeSet+0x58>)
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	693a      	ldr	r2, [r7, #16]
 801ca5a:	4610      	mov	r0, r2
 801ca5c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ca5e:	4b05      	ldr	r3, [pc, #20]	@ (801ca74 <SysTimeSet+0x58>)
 801ca60:	689b      	ldr	r3, [r3, #8]
 801ca62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801ca66:	4610      	mov	r0, r2
 801ca68:	4798      	blx	r3
}
 801ca6a:	bf00      	nop
 801ca6c:	3718      	adds	r7, #24
 801ca6e:	46bd      	mov	sp, r7
 801ca70:	bd80      	pop	{r7, pc}
 801ca72:	bf00      	nop
 801ca74:	0801fb08 	.word	0x0801fb08

0801ca78 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ca78:	b580      	push	{r7, lr}
 801ca7a:	b08a      	sub	sp, #40	@ 0x28
 801ca7c:	af02      	add	r7, sp, #8
 801ca7e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca80:	2300      	movs	r3, #0
 801ca82:	61bb      	str	r3, [r7, #24]
 801ca84:	2300      	movs	r3, #0
 801ca86:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca88:	2300      	movs	r3, #0
 801ca8a:	613b      	str	r3, [r7, #16]
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ca90:	4b14      	ldr	r3, [pc, #80]	@ (801cae4 <SysTimeGet+0x6c>)
 801ca92:	691b      	ldr	r3, [r3, #16]
 801ca94:	f107 0218 	add.w	r2, r7, #24
 801ca98:	3204      	adds	r2, #4
 801ca9a:	4610      	mov	r0, r2
 801ca9c:	4798      	blx	r3
 801ca9e:	4603      	mov	r3, r0
 801caa0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801caa2:	4b10      	ldr	r3, [pc, #64]	@ (801cae4 <SysTimeGet+0x6c>)
 801caa4:	68db      	ldr	r3, [r3, #12]
 801caa6:	4798      	blx	r3
 801caa8:	4603      	mov	r3, r0
 801caaa:	b21b      	sxth	r3, r3
 801caac:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801caae:	4b0d      	ldr	r3, [pc, #52]	@ (801cae4 <SysTimeGet+0x6c>)
 801cab0:	685b      	ldr	r3, [r3, #4]
 801cab2:	4798      	blx	r3
 801cab4:	4603      	mov	r3, r0
 801cab6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801cab8:	f107 0010 	add.w	r0, r7, #16
 801cabc:	69fb      	ldr	r3, [r7, #28]
 801cabe:	9300      	str	r3, [sp, #0]
 801cac0:	69bb      	ldr	r3, [r7, #24]
 801cac2:	f107 0208 	add.w	r2, r7, #8
 801cac6:	ca06      	ldmia	r2, {r1, r2}
 801cac8:	f7ff ff36 	bl	801c938 <SysTimeAdd>

  return sysTime;
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	461a      	mov	r2, r3
 801cad0:	f107 0310 	add.w	r3, r7, #16
 801cad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cad8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cadc:	6878      	ldr	r0, [r7, #4]
 801cade:	3720      	adds	r7, #32
 801cae0:	46bd      	mov	sp, r7
 801cae2:	bd80      	pop	{r7, pc}
 801cae4:	0801fb08 	.word	0x0801fb08

0801cae8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801cae8:	b580      	push	{r7, lr}
 801caea:	b084      	sub	sp, #16
 801caec:	af00      	add	r7, sp, #0
 801caee:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801caf0:	2300      	movs	r3, #0
 801caf2:	60bb      	str	r3, [r7, #8]
 801caf4:	2300      	movs	r3, #0
 801caf6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801caf8:	4b0a      	ldr	r3, [pc, #40]	@ (801cb24 <SysTimeGetMcuTime+0x3c>)
 801cafa:	691b      	ldr	r3, [r3, #16]
 801cafc:	f107 0208 	add.w	r2, r7, #8
 801cb00:	3204      	adds	r2, #4
 801cb02:	4610      	mov	r0, r2
 801cb04:	4798      	blx	r3
 801cb06:	4603      	mov	r3, r0
 801cb08:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	461a      	mov	r2, r3
 801cb0e:	f107 0308 	add.w	r3, r7, #8
 801cb12:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cb16:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cb1a:	6878      	ldr	r0, [r7, #4]
 801cb1c:	3710      	adds	r7, #16
 801cb1e:	46bd      	mov	sp, r7
 801cb20:	bd80      	pop	{r7, pc}
 801cb22:	bf00      	nop
 801cb24:	0801fb08 	.word	0x0801fb08

0801cb28 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801cb28:	b480      	push	{r7}
 801cb2a:	b085      	sub	sp, #20
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801cb30:	2300      	movs	r3, #0
 801cb32:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801cb34:	e00e      	b.n	801cb54 <ee_skip_atoi+0x2c>
 801cb36:	68fa      	ldr	r2, [r7, #12]
 801cb38:	4613      	mov	r3, r2
 801cb3a:	009b      	lsls	r3, r3, #2
 801cb3c:	4413      	add	r3, r2
 801cb3e:	005b      	lsls	r3, r3, #1
 801cb40:	4618      	mov	r0, r3
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	1c59      	adds	r1, r3, #1
 801cb48:	687a      	ldr	r2, [r7, #4]
 801cb4a:	6011      	str	r1, [r2, #0]
 801cb4c:	781b      	ldrb	r3, [r3, #0]
 801cb4e:	4403      	add	r3, r0
 801cb50:	3b30      	subs	r3, #48	@ 0x30
 801cb52:	60fb      	str	r3, [r7, #12]
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	781b      	ldrb	r3, [r3, #0]
 801cb5a:	2b2f      	cmp	r3, #47	@ 0x2f
 801cb5c:	d904      	bls.n	801cb68 <ee_skip_atoi+0x40>
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	681b      	ldr	r3, [r3, #0]
 801cb62:	781b      	ldrb	r3, [r3, #0]
 801cb64:	2b39      	cmp	r3, #57	@ 0x39
 801cb66:	d9e6      	bls.n	801cb36 <ee_skip_atoi+0xe>
  return i;
 801cb68:	68fb      	ldr	r3, [r7, #12]
}
 801cb6a:	4618      	mov	r0, r3
 801cb6c:	3714      	adds	r7, #20
 801cb6e:	46bd      	mov	sp, r7
 801cb70:	bc80      	pop	{r7}
 801cb72:	4770      	bx	lr

0801cb74 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801cb74:	b480      	push	{r7}
 801cb76:	b099      	sub	sp, #100	@ 0x64
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	60f8      	str	r0, [r7, #12]
 801cb7c:	60b9      	str	r1, [r7, #8]
 801cb7e:	607a      	str	r2, [r7, #4]
 801cb80:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801cb82:	4b71      	ldr	r3, [pc, #452]	@ (801cd48 <ee_number+0x1d4>)
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801cb88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cb8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d002      	beq.n	801cb98 <ee_number+0x24>
 801cb92:	4b6e      	ldr	r3, [pc, #440]	@ (801cd4c <ee_number+0x1d8>)
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801cb98:	683b      	ldr	r3, [r7, #0]
 801cb9a:	2b01      	cmp	r3, #1
 801cb9c:	dd02      	ble.n	801cba4 <ee_number+0x30>
 801cb9e:	683b      	ldr	r3, [r7, #0]
 801cba0:	2b24      	cmp	r3, #36	@ 0x24
 801cba2:	dd01      	ble.n	801cba8 <ee_number+0x34>
 801cba4:	2300      	movs	r3, #0
 801cba6:	e0ca      	b.n	801cd3e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801cba8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cbaa:	f003 0301 	and.w	r3, r3, #1
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d001      	beq.n	801cbb6 <ee_number+0x42>
 801cbb2:	2330      	movs	r3, #48	@ 0x30
 801cbb4:	e000      	b.n	801cbb8 <ee_number+0x44>
 801cbb6:	2320      	movs	r3, #32
 801cbb8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801cbc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cbc4:	f003 0302 	and.w	r3, r3, #2
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d00b      	beq.n	801cbe4 <ee_number+0x70>
  {
    if (num < 0)
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	da08      	bge.n	801cbe4 <ee_number+0x70>
    {
      sign = '-';
 801cbd2:	232d      	movs	r3, #45	@ 0x2d
 801cbd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	425b      	negs	r3, r3
 801cbdc:	607b      	str	r3, [r7, #4]
      size--;
 801cbde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbe0:	3b01      	subs	r3, #1
 801cbe2:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801cbe4:	2300      	movs	r3, #0
 801cbe6:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d11e      	bne.n	801cc2c <ee_number+0xb8>
    tmp[i++] = '0';
 801cbee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cbf0:	1c5a      	adds	r2, r3, #1
 801cbf2:	657a      	str	r2, [r7, #84]	@ 0x54
 801cbf4:	3360      	adds	r3, #96	@ 0x60
 801cbf6:	443b      	add	r3, r7
 801cbf8:	2230      	movs	r2, #48	@ 0x30
 801cbfa:	f803 2c50 	strb.w	r2, [r3, #-80]
 801cbfe:	e018      	b.n	801cc32 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	683a      	ldr	r2, [r7, #0]
 801cc04:	fbb3 f1f2 	udiv	r1, r3, r2
 801cc08:	fb01 f202 	mul.w	r2, r1, r2
 801cc0c:	1a9b      	subs	r3, r3, r2
 801cc0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801cc10:	441a      	add	r2, r3
 801cc12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cc14:	1c59      	adds	r1, r3, #1
 801cc16:	6579      	str	r1, [r7, #84]	@ 0x54
 801cc18:	7812      	ldrb	r2, [r2, #0]
 801cc1a:	3360      	adds	r3, #96	@ 0x60
 801cc1c:	443b      	add	r3, r7
 801cc1e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801cc22:	687a      	ldr	r2, [r7, #4]
 801cc24:	683b      	ldr	r3, [r7, #0]
 801cc26:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc2a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d1e6      	bne.n	801cc00 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801cc32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cc34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801cc36:	429a      	cmp	r2, r3
 801cc38:	dd01      	ble.n	801cc3e <ee_number+0xca>
 801cc3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cc3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801cc3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801cc40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801cc42:	1ad3      	subs	r3, r2, r3
 801cc44:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801cc46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cc48:	f003 0301 	and.w	r3, r3, #1
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d112      	bne.n	801cc76 <ee_number+0x102>
 801cc50:	e00c      	b.n	801cc6c <ee_number+0xf8>
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	1c5a      	adds	r2, r3, #1
 801cc56:	60fa      	str	r2, [r7, #12]
 801cc58:	2220      	movs	r2, #32
 801cc5a:	701a      	strb	r2, [r3, #0]
 801cc5c:	68bb      	ldr	r3, [r7, #8]
 801cc5e:	3b01      	subs	r3, #1
 801cc60:	60bb      	str	r3, [r7, #8]
 801cc62:	68bb      	ldr	r3, [r7, #8]
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d101      	bne.n	801cc6c <ee_number+0xf8>
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	e068      	b.n	801cd3e <ee_number+0x1ca>
 801cc6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cc6e:	1e5a      	subs	r2, r3, #1
 801cc70:	66ba      	str	r2, [r7, #104]	@ 0x68
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	dced      	bgt.n	801cc52 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801cc76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d01b      	beq.n	801ccb6 <ee_number+0x142>
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	1c5a      	adds	r2, r3, #1
 801cc82:	60fa      	str	r2, [r7, #12]
 801cc84:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801cc88:	701a      	strb	r2, [r3, #0]
 801cc8a:	68bb      	ldr	r3, [r7, #8]
 801cc8c:	3b01      	subs	r3, #1
 801cc8e:	60bb      	str	r3, [r7, #8]
 801cc90:	68bb      	ldr	r3, [r7, #8]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d10f      	bne.n	801ccb6 <ee_number+0x142>
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	e051      	b.n	801cd3e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	1c5a      	adds	r2, r3, #1
 801cc9e:	60fa      	str	r2, [r7, #12]
 801cca0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801cca4:	701a      	strb	r2, [r3, #0]
 801cca6:	68bb      	ldr	r3, [r7, #8]
 801cca8:	3b01      	subs	r3, #1
 801ccaa:	60bb      	str	r3, [r7, #8]
 801ccac:	68bb      	ldr	r3, [r7, #8]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d101      	bne.n	801ccb6 <ee_number+0x142>
 801ccb2:	68fb      	ldr	r3, [r7, #12]
 801ccb4:	e043      	b.n	801cd3e <ee_number+0x1ca>
 801ccb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ccb8:	1e5a      	subs	r2, r3, #1
 801ccba:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	dcec      	bgt.n	801cc9a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ccc0:	e00c      	b.n	801ccdc <ee_number+0x168>
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	1c5a      	adds	r2, r3, #1
 801ccc6:	60fa      	str	r2, [r7, #12]
 801ccc8:	2230      	movs	r2, #48	@ 0x30
 801ccca:	701a      	strb	r2, [r3, #0]
 801cccc:	68bb      	ldr	r3, [r7, #8]
 801ccce:	3b01      	subs	r3, #1
 801ccd0:	60bb      	str	r3, [r7, #8]
 801ccd2:	68bb      	ldr	r3, [r7, #8]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d101      	bne.n	801ccdc <ee_number+0x168>
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	e030      	b.n	801cd3e <ee_number+0x1ca>
 801ccdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ccde:	1e5a      	subs	r2, r3, #1
 801cce0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801cce2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cce4:	429a      	cmp	r2, r3
 801cce6:	dbec      	blt.n	801ccc2 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801cce8:	e010      	b.n	801cd0c <ee_number+0x198>
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	1c5a      	adds	r2, r3, #1
 801ccee:	60fa      	str	r2, [r7, #12]
 801ccf0:	f107 0110 	add.w	r1, r7, #16
 801ccf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ccf6:	440a      	add	r2, r1
 801ccf8:	7812      	ldrb	r2, [r2, #0]
 801ccfa:	701a      	strb	r2, [r3, #0]
 801ccfc:	68bb      	ldr	r3, [r7, #8]
 801ccfe:	3b01      	subs	r3, #1
 801cd00:	60bb      	str	r3, [r7, #8]
 801cd02:	68bb      	ldr	r3, [r7, #8]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d101      	bne.n	801cd0c <ee_number+0x198>
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	e018      	b.n	801cd3e <ee_number+0x1ca>
 801cd0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cd0e:	1e5a      	subs	r2, r3, #1
 801cd10:	657a      	str	r2, [r7, #84]	@ 0x54
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	dce9      	bgt.n	801ccea <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801cd16:	e00c      	b.n	801cd32 <ee_number+0x1be>
 801cd18:	68fb      	ldr	r3, [r7, #12]
 801cd1a:	1c5a      	adds	r2, r3, #1
 801cd1c:	60fa      	str	r2, [r7, #12]
 801cd1e:	2220      	movs	r2, #32
 801cd20:	701a      	strb	r2, [r3, #0]
 801cd22:	68bb      	ldr	r3, [r7, #8]
 801cd24:	3b01      	subs	r3, #1
 801cd26:	60bb      	str	r3, [r7, #8]
 801cd28:	68bb      	ldr	r3, [r7, #8]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d101      	bne.n	801cd32 <ee_number+0x1be>
 801cd2e:	68fb      	ldr	r3, [r7, #12]
 801cd30:	e005      	b.n	801cd3e <ee_number+0x1ca>
 801cd32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cd34:	1e5a      	subs	r2, r3, #1
 801cd36:	66ba      	str	r2, [r7, #104]	@ 0x68
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	dced      	bgt.n	801cd18 <ee_number+0x1a4>

  return str;
 801cd3c:	68fb      	ldr	r3, [r7, #12]
}
 801cd3e:	4618      	mov	r0, r3
 801cd40:	3764      	adds	r7, #100	@ 0x64
 801cd42:	46bd      	mov	sp, r7
 801cd44:	bc80      	pop	{r7}
 801cd46:	4770      	bx	lr
 801cd48:	20000138 	.word	0x20000138
 801cd4c:	2000013c 	.word	0x2000013c

0801cd50 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801cd50:	b580      	push	{r7, lr}
 801cd52:	b092      	sub	sp, #72	@ 0x48
 801cd54:	af04      	add	r7, sp, #16
 801cd56:	60f8      	str	r0, [r7, #12]
 801cd58:	60b9      	str	r1, [r7, #8]
 801cd5a:	607a      	str	r2, [r7, #4]
 801cd5c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801cd5e:	68bb      	ldr	r3, [r7, #8]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	dc01      	bgt.n	801cd68 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801cd64:	2300      	movs	r3, #0
 801cd66:	e13e      	b.n	801cfe6 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cd6c:	e128      	b.n	801cfc0 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801cd6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	1ad2      	subs	r2, r2, r3
 801cd74:	68bb      	ldr	r3, [r7, #8]
 801cd76:	3b01      	subs	r3, #1
 801cd78:	429a      	cmp	r2, r3
 801cd7a:	f280 812e 	bge.w	801cfda <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	781b      	ldrb	r3, [r3, #0]
 801cd82:	2b25      	cmp	r3, #37	@ 0x25
 801cd84:	d006      	beq.n	801cd94 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801cd86:	687a      	ldr	r2, [r7, #4]
 801cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd8a:	1c59      	adds	r1, r3, #1
 801cd8c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801cd8e:	7812      	ldrb	r2, [r2, #0]
 801cd90:	701a      	strb	r2, [r3, #0]
      continue;
 801cd92:	e112      	b.n	801cfba <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801cd94:	2300      	movs	r3, #0
 801cd96:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	3301      	adds	r3, #1
 801cd9c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	781b      	ldrb	r3, [r3, #0]
 801cda2:	2b30      	cmp	r3, #48	@ 0x30
 801cda4:	d103      	bne.n	801cdae <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801cda6:	6a3b      	ldr	r3, [r7, #32]
 801cda8:	f043 0301 	orr.w	r3, r3, #1
 801cdac:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801cdae:	f04f 33ff 	mov.w	r3, #4294967295
 801cdb2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	781b      	ldrb	r3, [r3, #0]
 801cdb8:	2b2f      	cmp	r3, #47	@ 0x2f
 801cdba:	d908      	bls.n	801cdce <tiny_vsnprintf_like+0x7e>
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	781b      	ldrb	r3, [r3, #0]
 801cdc0:	2b39      	cmp	r3, #57	@ 0x39
 801cdc2:	d804      	bhi.n	801cdce <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801cdc4:	1d3b      	adds	r3, r7, #4
 801cdc6:	4618      	mov	r0, r3
 801cdc8:	f7ff feae 	bl	801cb28 <ee_skip_atoi>
 801cdcc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801cdce:	f04f 33ff 	mov.w	r3, #4294967295
 801cdd2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801cdd4:	f04f 33ff 	mov.w	r3, #4294967295
 801cdd8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801cdda:	230a      	movs	r3, #10
 801cddc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	781b      	ldrb	r3, [r3, #0]
 801cde2:	3b58      	subs	r3, #88	@ 0x58
 801cde4:	2b20      	cmp	r3, #32
 801cde6:	f200 8094 	bhi.w	801cf12 <tiny_vsnprintf_like+0x1c2>
 801cdea:	a201      	add	r2, pc, #4	@ (adr r2, 801cdf0 <tiny_vsnprintf_like+0xa0>)
 801cdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cdf0:	0801cefb 	.word	0x0801cefb
 801cdf4:	0801cf13 	.word	0x0801cf13
 801cdf8:	0801cf13 	.word	0x0801cf13
 801cdfc:	0801cf13 	.word	0x0801cf13
 801ce00:	0801cf13 	.word	0x0801cf13
 801ce04:	0801cf13 	.word	0x0801cf13
 801ce08:	0801cf13 	.word	0x0801cf13
 801ce0c:	0801cf13 	.word	0x0801cf13
 801ce10:	0801cf13 	.word	0x0801cf13
 801ce14:	0801cf13 	.word	0x0801cf13
 801ce18:	0801cf13 	.word	0x0801cf13
 801ce1c:	0801ce7f 	.word	0x0801ce7f
 801ce20:	0801cf09 	.word	0x0801cf09
 801ce24:	0801cf13 	.word	0x0801cf13
 801ce28:	0801cf13 	.word	0x0801cf13
 801ce2c:	0801cf13 	.word	0x0801cf13
 801ce30:	0801cf13 	.word	0x0801cf13
 801ce34:	0801cf09 	.word	0x0801cf09
 801ce38:	0801cf13 	.word	0x0801cf13
 801ce3c:	0801cf13 	.word	0x0801cf13
 801ce40:	0801cf13 	.word	0x0801cf13
 801ce44:	0801cf13 	.word	0x0801cf13
 801ce48:	0801cf13 	.word	0x0801cf13
 801ce4c:	0801cf13 	.word	0x0801cf13
 801ce50:	0801cf13 	.word	0x0801cf13
 801ce54:	0801cf13 	.word	0x0801cf13
 801ce58:	0801cf13 	.word	0x0801cf13
 801ce5c:	0801ce9f 	.word	0x0801ce9f
 801ce60:	0801cf13 	.word	0x0801cf13
 801ce64:	0801cf5f 	.word	0x0801cf5f
 801ce68:	0801cf13 	.word	0x0801cf13
 801ce6c:	0801cf13 	.word	0x0801cf13
 801ce70:	0801cf03 	.word	0x0801cf03
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ce74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce76:	1c5a      	adds	r2, r3, #1
 801ce78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ce7a:	2220      	movs	r2, #32
 801ce7c:	701a      	strb	r2, [r3, #0]
 801ce7e:	69fb      	ldr	r3, [r7, #28]
 801ce80:	3b01      	subs	r3, #1
 801ce82:	61fb      	str	r3, [r7, #28]
 801ce84:	69fb      	ldr	r3, [r7, #28]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	dcf4      	bgt.n	801ce74 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ce8a:	683b      	ldr	r3, [r7, #0]
 801ce8c:	1d1a      	adds	r2, r3, #4
 801ce8e:	603a      	str	r2, [r7, #0]
 801ce90:	6819      	ldr	r1, [r3, #0]
 801ce92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce94:	1c5a      	adds	r2, r3, #1
 801ce96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ce98:	b2ca      	uxtb	r2, r1
 801ce9a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801ce9c:	e08d      	b.n	801cfba <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801ce9e:	683b      	ldr	r3, [r7, #0]
 801cea0:	1d1a      	adds	r2, r3, #4
 801cea2:	603a      	str	r2, [r7, #0]
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801cea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d101      	bne.n	801ceb2 <tiny_vsnprintf_like+0x162>
 801ceae:	4b50      	ldr	r3, [pc, #320]	@ (801cff0 <tiny_vsnprintf_like+0x2a0>)
 801ceb0:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ceb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ceb4:	f7e3 f960 	bl	8000178 <strlen>
 801ceb8:	4603      	mov	r3, r0
 801ceba:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801cebc:	e004      	b.n	801cec8 <tiny_vsnprintf_like+0x178>
 801cebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cec0:	1c5a      	adds	r2, r3, #1
 801cec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801cec4:	2220      	movs	r2, #32
 801cec6:	701a      	strb	r2, [r3, #0]
 801cec8:	69fb      	ldr	r3, [r7, #28]
 801ceca:	1e5a      	subs	r2, r3, #1
 801cecc:	61fa      	str	r2, [r7, #28]
 801cece:	693a      	ldr	r2, [r7, #16]
 801ced0:	429a      	cmp	r2, r3
 801ced2:	dbf4      	blt.n	801cebe <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ced4:	2300      	movs	r3, #0
 801ced6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ced8:	e00a      	b.n	801cef0 <tiny_vsnprintf_like+0x1a0>
 801ceda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cedc:	1c53      	adds	r3, r2, #1
 801cede:	627b      	str	r3, [r7, #36]	@ 0x24
 801cee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cee2:	1c59      	adds	r1, r3, #1
 801cee4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801cee6:	7812      	ldrb	r2, [r2, #0]
 801cee8:	701a      	strb	r2, [r3, #0]
 801ceea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ceec:	3301      	adds	r3, #1
 801ceee:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cef2:	693b      	ldr	r3, [r7, #16]
 801cef4:	429a      	cmp	r2, r3
 801cef6:	dbf0      	blt.n	801ceda <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801cef8:	e05f      	b.n	801cfba <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801cefa:	6a3b      	ldr	r3, [r7, #32]
 801cefc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cf00:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801cf02:	2310      	movs	r3, #16
 801cf04:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801cf06:	e02b      	b.n	801cf60 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801cf08:	6a3b      	ldr	r3, [r7, #32]
 801cf0a:	f043 0302 	orr.w	r3, r3, #2
 801cf0e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801cf10:	e025      	b.n	801cf5e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	781b      	ldrb	r3, [r3, #0]
 801cf16:	2b25      	cmp	r3, #37	@ 0x25
 801cf18:	d004      	beq.n	801cf24 <tiny_vsnprintf_like+0x1d4>
 801cf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf1c:	1c5a      	adds	r2, r3, #1
 801cf1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801cf20:	2225      	movs	r2, #37	@ 0x25
 801cf22:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801cf24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	1ad2      	subs	r2, r2, r3
 801cf2a:	68bb      	ldr	r3, [r7, #8]
 801cf2c:	3b01      	subs	r3, #1
 801cf2e:	429a      	cmp	r2, r3
 801cf30:	da16      	bge.n	801cf60 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	781b      	ldrb	r3, [r3, #0]
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d006      	beq.n	801cf48 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801cf3a:	687a      	ldr	r2, [r7, #4]
 801cf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf3e:	1c59      	adds	r1, r3, #1
 801cf40:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801cf42:	7812      	ldrb	r2, [r2, #0]
 801cf44:	701a      	strb	r2, [r3, #0]
 801cf46:	e002      	b.n	801cf4e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	3b01      	subs	r3, #1
 801cf4c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801cf4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	1ad2      	subs	r2, r2, r3
 801cf54:	68bb      	ldr	r3, [r7, #8]
 801cf56:	3b01      	subs	r3, #1
 801cf58:	429a      	cmp	r2, r3
 801cf5a:	db2d      	blt.n	801cfb8 <tiny_vsnprintf_like+0x268>
 801cf5c:	e000      	b.n	801cf60 <tiny_vsnprintf_like+0x210>
        break;
 801cf5e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801cf60:	697b      	ldr	r3, [r7, #20]
 801cf62:	2b6c      	cmp	r3, #108	@ 0x6c
 801cf64:	d105      	bne.n	801cf72 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801cf66:	683b      	ldr	r3, [r7, #0]
 801cf68:	1d1a      	adds	r2, r3, #4
 801cf6a:	603a      	str	r2, [r7, #0]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	637b      	str	r3, [r7, #52]	@ 0x34
 801cf70:	e00f      	b.n	801cf92 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801cf72:	6a3b      	ldr	r3, [r7, #32]
 801cf74:	f003 0302 	and.w	r3, r3, #2
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d005      	beq.n	801cf88 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801cf7c:	683b      	ldr	r3, [r7, #0]
 801cf7e:	1d1a      	adds	r2, r3, #4
 801cf80:	603a      	str	r2, [r7, #0]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	637b      	str	r3, [r7, #52]	@ 0x34
 801cf86:	e004      	b.n	801cf92 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801cf88:	683b      	ldr	r3, [r7, #0]
 801cf8a:	1d1a      	adds	r2, r3, #4
 801cf8c:	603a      	str	r2, [r7, #0]
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801cf92:	68bb      	ldr	r3, [r7, #8]
 801cf94:	1e5a      	subs	r2, r3, #1
 801cf96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	1acb      	subs	r3, r1, r3
 801cf9c:	1ad1      	subs	r1, r2, r3
 801cf9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cfa0:	6a3b      	ldr	r3, [r7, #32]
 801cfa2:	9302      	str	r3, [sp, #8]
 801cfa4:	69bb      	ldr	r3, [r7, #24]
 801cfa6:	9301      	str	r3, [sp, #4]
 801cfa8:	69fb      	ldr	r3, [r7, #28]
 801cfaa:	9300      	str	r3, [sp, #0]
 801cfac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cfb0:	f7ff fde0 	bl	801cb74 <ee_number>
 801cfb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801cfb6:	e000      	b.n	801cfba <tiny_vsnprintf_like+0x26a>
        continue;
 801cfb8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	3301      	adds	r3, #1
 801cfbe:	607b      	str	r3, [r7, #4]
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	781b      	ldrb	r3, [r3, #0]
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	f47f aed2 	bne.w	801cd6e <tiny_vsnprintf_like+0x1e>
 801cfca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	1ad2      	subs	r2, r2, r3
 801cfd0:	68bb      	ldr	r3, [r7, #8]
 801cfd2:	3b01      	subs	r3, #1
 801cfd4:	429a      	cmp	r2, r3
 801cfd6:	f6bf aeca 	bge.w	801cd6e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801cfda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfdc:	2200      	movs	r2, #0
 801cfde:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801cfe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cfe2:	68fb      	ldr	r3, [r7, #12]
 801cfe4:	1ad3      	subs	r3, r2, r3
}
 801cfe6:	4618      	mov	r0, r3
 801cfe8:	3738      	adds	r7, #56	@ 0x38
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bd80      	pop	{r7, pc}
 801cfee:	bf00      	nop
 801cff0:	0801fa1c 	.word	0x0801fa1c

0801cff4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b090      	sub	sp, #64	@ 0x40
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801cffc:	4b73      	ldr	r3, [pc, #460]	@ (801d1cc <UTIL_SEQ_Run+0x1d8>)
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801d002:	4b72      	ldr	r3, [pc, #456]	@ (801d1cc <UTIL_SEQ_Run+0x1d8>)
 801d004:	681a      	ldr	r2, [r3, #0]
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	4013      	ands	r3, r2
 801d00a:	4a70      	ldr	r2, [pc, #448]	@ (801d1cc <UTIL_SEQ_Run+0x1d8>)
 801d00c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801d00e:	4b70      	ldr	r3, [pc, #448]	@ (801d1d0 <UTIL_SEQ_Run+0x1dc>)
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801d014:	4b6f      	ldr	r3, [pc, #444]	@ (801d1d4 <UTIL_SEQ_Run+0x1e0>)
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801d01a:	4b6f      	ldr	r3, [pc, #444]	@ (801d1d8 <UTIL_SEQ_Run+0x1e4>)
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801d020:	4b6e      	ldr	r3, [pc, #440]	@ (801d1dc <UTIL_SEQ_Run+0x1e8>)
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d026:	e08d      	b.n	801d144 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801d028:	2300      	movs	r3, #0
 801d02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d02c:	e002      	b.n	801d034 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801d02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d030:	3301      	adds	r3, #1
 801d032:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d034:	4a6a      	ldr	r2, [pc, #424]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d038:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d03e:	401a      	ands	r2, r3
 801d040:	4b62      	ldr	r3, [pc, #392]	@ (801d1cc <UTIL_SEQ_Run+0x1d8>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	4013      	ands	r3, r2
 801d046:	2b00      	cmp	r3, #0
 801d048:	d0f1      	beq.n	801d02e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801d04a:	4a65      	ldr	r2, [pc, #404]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d04e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d054:	401a      	ands	r2, r3
 801d056:	4b5d      	ldr	r3, [pc, #372]	@ (801d1cc <UTIL_SEQ_Run+0x1d8>)
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	4013      	ands	r3, r2
 801d05c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801d05e:	4a60      	ldr	r2, [pc, #384]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d062:	00db      	lsls	r3, r3, #3
 801d064:	4413      	add	r3, r2
 801d066:	685a      	ldr	r2, [r3, #4]
 801d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d06a:	4013      	ands	r3, r2
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d106      	bne.n	801d07e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801d070:	4a5b      	ldr	r2, [pc, #364]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d074:	00db      	lsls	r3, r3, #3
 801d076:	4413      	add	r3, r2
 801d078:	f04f 32ff 	mov.w	r2, #4294967295
 801d07c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801d07e:	4a58      	ldr	r2, [pc, #352]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d082:	00db      	lsls	r3, r3, #3
 801d084:	4413      	add	r3, r2
 801d086:	685a      	ldr	r2, [r3, #4]
 801d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d08a:	4013      	ands	r3, r2
 801d08c:	4618      	mov	r0, r3
 801d08e:	f000 f907 	bl	801d2a0 <SEQ_BitPosition>
 801d092:	4603      	mov	r3, r0
 801d094:	461a      	mov	r2, r3
 801d096:	4b53      	ldr	r3, [pc, #332]	@ (801d1e4 <UTIL_SEQ_Run+0x1f0>)
 801d098:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801d09a:	4a51      	ldr	r2, [pc, #324]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d09c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d09e:	00db      	lsls	r3, r3, #3
 801d0a0:	4413      	add	r3, r2
 801d0a2:	685a      	ldr	r2, [r3, #4]
 801d0a4:	4b4f      	ldr	r3, [pc, #316]	@ (801d1e4 <UTIL_SEQ_Run+0x1f0>)
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	2101      	movs	r1, #1
 801d0aa:	fa01 f303 	lsl.w	r3, r1, r3
 801d0ae:	43db      	mvns	r3, r3
 801d0b0:	401a      	ands	r2, r3
 801d0b2:	494b      	ldr	r1, [pc, #300]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d0b6:	00db      	lsls	r3, r3, #3
 801d0b8:	440b      	add	r3, r1
 801d0ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0bc:	f3ef 8310 	mrs	r3, PRIMASK
 801d0c0:	61bb      	str	r3, [r7, #24]
  return(result);
 801d0c2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d0c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0c6:	b672      	cpsid	i
}
 801d0c8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801d0ca:	4b46      	ldr	r3, [pc, #280]	@ (801d1e4 <UTIL_SEQ_Run+0x1f0>)
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	2201      	movs	r2, #1
 801d0d0:	fa02 f303 	lsl.w	r3, r2, r3
 801d0d4:	43da      	mvns	r2, r3
 801d0d6:	4b3e      	ldr	r3, [pc, #248]	@ (801d1d0 <UTIL_SEQ_Run+0x1dc>)
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	4013      	ands	r3, r2
 801d0dc:	4a3c      	ldr	r2, [pc, #240]	@ (801d1d0 <UTIL_SEQ_Run+0x1dc>)
 801d0de:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d0e0:	2301      	movs	r3, #1
 801d0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d0e4:	e013      	b.n	801d10e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801d0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d0e8:	3b01      	subs	r3, #1
 801d0ea:	4a3d      	ldr	r2, [pc, #244]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d0ec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801d0f0:	4b3c      	ldr	r3, [pc, #240]	@ (801d1e4 <UTIL_SEQ_Run+0x1f0>)
 801d0f2:	681b      	ldr	r3, [r3, #0]
 801d0f4:	2201      	movs	r2, #1
 801d0f6:	fa02 f303 	lsl.w	r3, r2, r3
 801d0fa:	43da      	mvns	r2, r3
 801d0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d0fe:	3b01      	subs	r3, #1
 801d100:	400a      	ands	r2, r1
 801d102:	4937      	ldr	r1, [pc, #220]	@ (801d1e0 <UTIL_SEQ_Run+0x1ec>)
 801d104:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d10a:	3b01      	subs	r3, #1
 801d10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d110:	2b00      	cmp	r3, #0
 801d112:	d1e8      	bne.n	801d0e6 <UTIL_SEQ_Run+0xf2>
 801d114:	6a3b      	ldr	r3, [r7, #32]
 801d116:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d118:	697b      	ldr	r3, [r7, #20]
 801d11a:	f383 8810 	msr	PRIMASK, r3
}
 801d11e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801d120:	4b30      	ldr	r3, [pc, #192]	@ (801d1e4 <UTIL_SEQ_Run+0x1f0>)
 801d122:	681b      	ldr	r3, [r3, #0]
 801d124:	4a30      	ldr	r2, [pc, #192]	@ (801d1e8 <UTIL_SEQ_Run+0x1f4>)
 801d126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d12a:	4798      	blx	r3

    local_taskset = TaskSet;
 801d12c:	4b28      	ldr	r3, [pc, #160]	@ (801d1d0 <UTIL_SEQ_Run+0x1dc>)
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801d132:	4b28      	ldr	r3, [pc, #160]	@ (801d1d4 <UTIL_SEQ_Run+0x1e0>)
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801d138:	4b27      	ldr	r3, [pc, #156]	@ (801d1d8 <UTIL_SEQ_Run+0x1e4>)
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801d13e:	4b27      	ldr	r3, [pc, #156]	@ (801d1dc <UTIL_SEQ_Run+0x1e8>)
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d144:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d148:	401a      	ands	r2, r3
 801d14a:	4b20      	ldr	r3, [pc, #128]	@ (801d1cc <UTIL_SEQ_Run+0x1d8>)
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	4013      	ands	r3, r2
 801d150:	2b00      	cmp	r3, #0
 801d152:	d005      	beq.n	801d160 <UTIL_SEQ_Run+0x16c>
 801d154:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d158:	4013      	ands	r3, r2
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	f43f af64 	beq.w	801d028 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801d160:	4b20      	ldr	r3, [pc, #128]	@ (801d1e4 <UTIL_SEQ_Run+0x1f0>)
 801d162:	f04f 32ff 	mov.w	r2, #4294967295
 801d166:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801d168:	f000 f88e 	bl	801d288 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d16c:	f3ef 8310 	mrs	r3, PRIMASK
 801d170:	613b      	str	r3, [r7, #16]
  return(result);
 801d172:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801d174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d176:	b672      	cpsid	i
}
 801d178:	bf00      	nop
  local_taskset = TaskSet;
 801d17a:	4b15      	ldr	r3, [pc, #84]	@ (801d1d0 <UTIL_SEQ_Run+0x1dc>)
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801d180:	4b14      	ldr	r3, [pc, #80]	@ (801d1d4 <UTIL_SEQ_Run+0x1e0>)
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801d186:	4b14      	ldr	r3, [pc, #80]	@ (801d1d8 <UTIL_SEQ_Run+0x1e4>)
 801d188:	681b      	ldr	r3, [r3, #0]
 801d18a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801d18c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d190:	401a      	ands	r2, r3
 801d192:	4b0e      	ldr	r3, [pc, #56]	@ (801d1cc <UTIL_SEQ_Run+0x1d8>)
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	4013      	ands	r3, r2
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d107      	bne.n	801d1ac <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801d19c:	4b0f      	ldr	r3, [pc, #60]	@ (801d1dc <UTIL_SEQ_Run+0x1e8>)
 801d19e:	681a      	ldr	r2, [r3, #0]
 801d1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d1a2:	4013      	ands	r3, r2
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d101      	bne.n	801d1ac <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801d1a8:	f7e5 ff0c 	bl	8002fc4 <UTIL_SEQ_Idle>
 801d1ac:	69fb      	ldr	r3, [r7, #28]
 801d1ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	f383 8810 	msr	PRIMASK, r3
}
 801d1b6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801d1b8:	f000 f86c 	bl	801d294 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801d1bc:	4a03      	ldr	r2, [pc, #12]	@ (801d1cc <UTIL_SEQ_Run+0x1d8>)
 801d1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1c0:	6013      	str	r3, [r2, #0]

  return;
 801d1c2:	bf00      	nop
}
 801d1c4:	3740      	adds	r7, #64	@ 0x40
 801d1c6:	46bd      	mov	sp, r7
 801d1c8:	bd80      	pop	{r7, pc}
 801d1ca:	bf00      	nop
 801d1cc:	20000144 	.word	0x20000144
 801d1d0:	20001ca0 	.word	0x20001ca0
 801d1d4:	20001ca4 	.word	0x20001ca4
 801d1d8:	20000140 	.word	0x20000140
 801d1dc:	20001ca8 	.word	0x20001ca8
 801d1e0:	20001cc0 	.word	0x20001cc0
 801d1e4:	20001cac 	.word	0x20001cac
 801d1e8:	20001cb0 	.word	0x20001cb0

0801d1ec <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b088      	sub	sp, #32
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	60f8      	str	r0, [r7, #12]
 801d1f4:	60b9      	str	r1, [r7, #8]
 801d1f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1f8:	f3ef 8310 	mrs	r3, PRIMASK
 801d1fc:	617b      	str	r3, [r7, #20]
  return(result);
 801d1fe:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d202:	b672      	cpsid	i
}
 801d204:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d206:	68f8      	ldr	r0, [r7, #12]
 801d208:	f000 f84a 	bl	801d2a0 <SEQ_BitPosition>
 801d20c:	4603      	mov	r3, r0
 801d20e:	4619      	mov	r1, r3
 801d210:	4a06      	ldr	r2, [pc, #24]	@ (801d22c <UTIL_SEQ_RegTask+0x40>)
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d218:	69fb      	ldr	r3, [r7, #28]
 801d21a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d21c:	69bb      	ldr	r3, [r7, #24]
 801d21e:	f383 8810 	msr	PRIMASK, r3
}
 801d222:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d224:	bf00      	nop
}
 801d226:	3720      	adds	r7, #32
 801d228:	46bd      	mov	sp, r7
 801d22a:	bd80      	pop	{r7, pc}
 801d22c:	20001cb0 	.word	0x20001cb0

0801d230 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d230:	b480      	push	{r7}
 801d232:	b087      	sub	sp, #28
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
 801d238:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d23a:	f3ef 8310 	mrs	r3, PRIMASK
 801d23e:	60fb      	str	r3, [r7, #12]
  return(result);
 801d240:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d244:	b672      	cpsid	i
}
 801d246:	bf00      	nop

  TaskSet |= TaskId_bm;
 801d248:	4b0d      	ldr	r3, [pc, #52]	@ (801d280 <UTIL_SEQ_SetTask+0x50>)
 801d24a:	681a      	ldr	r2, [r3, #0]
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	4313      	orrs	r3, r2
 801d250:	4a0b      	ldr	r2, [pc, #44]	@ (801d280 <UTIL_SEQ_SetTask+0x50>)
 801d252:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d254:	4a0b      	ldr	r2, [pc, #44]	@ (801d284 <UTIL_SEQ_SetTask+0x54>)
 801d256:	683b      	ldr	r3, [r7, #0]
 801d258:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	431a      	orrs	r2, r3
 801d260:	4908      	ldr	r1, [pc, #32]	@ (801d284 <UTIL_SEQ_SetTask+0x54>)
 801d262:	683b      	ldr	r3, [r7, #0]
 801d264:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801d268:	697b      	ldr	r3, [r7, #20]
 801d26a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d26c:	693b      	ldr	r3, [r7, #16]
 801d26e:	f383 8810 	msr	PRIMASK, r3
}
 801d272:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d274:	bf00      	nop
}
 801d276:	371c      	adds	r7, #28
 801d278:	46bd      	mov	sp, r7
 801d27a:	bc80      	pop	{r7}
 801d27c:	4770      	bx	lr
 801d27e:	bf00      	nop
 801d280:	20001ca0 	.word	0x20001ca0
 801d284:	20001cc0 	.word	0x20001cc0

0801d288 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801d288:	b480      	push	{r7}
 801d28a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d28c:	bf00      	nop
}
 801d28e:	46bd      	mov	sp, r7
 801d290:	bc80      	pop	{r7}
 801d292:	4770      	bx	lr

0801d294 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801d294:	b480      	push	{r7}
 801d296:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d298:	bf00      	nop
}
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bc80      	pop	{r7}
 801d29e:	4770      	bx	lr

0801d2a0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d2a0:	b480      	push	{r7}
 801d2a2:	b085      	sub	sp, #20
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d2b0:	68bb      	ldr	r3, [r7, #8]
 801d2b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d2b6:	d204      	bcs.n	801d2c2 <SEQ_BitPosition+0x22>
 801d2b8:	2310      	movs	r3, #16
 801d2ba:	73fb      	strb	r3, [r7, #15]
 801d2bc:	68bb      	ldr	r3, [r7, #8]
 801d2be:	041b      	lsls	r3, r3, #16
 801d2c0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d2c2:	68bb      	ldr	r3, [r7, #8]
 801d2c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d2c8:	d205      	bcs.n	801d2d6 <SEQ_BitPosition+0x36>
 801d2ca:	7bfb      	ldrb	r3, [r7, #15]
 801d2cc:	3308      	adds	r3, #8
 801d2ce:	73fb      	strb	r3, [r7, #15]
 801d2d0:	68bb      	ldr	r3, [r7, #8]
 801d2d2:	021b      	lsls	r3, r3, #8
 801d2d4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801d2d6:	68bb      	ldr	r3, [r7, #8]
 801d2d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d2dc:	d205      	bcs.n	801d2ea <SEQ_BitPosition+0x4a>
 801d2de:	7bfb      	ldrb	r3, [r7, #15]
 801d2e0:	3304      	adds	r3, #4
 801d2e2:	73fb      	strb	r3, [r7, #15]
 801d2e4:	68bb      	ldr	r3, [r7, #8]
 801d2e6:	011b      	lsls	r3, r3, #4
 801d2e8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801d2ea:	68bb      	ldr	r3, [r7, #8]
 801d2ec:	0f1b      	lsrs	r3, r3, #28
 801d2ee:	4a07      	ldr	r2, [pc, #28]	@ (801d30c <SEQ_BitPosition+0x6c>)
 801d2f0:	5cd2      	ldrb	r2, [r2, r3]
 801d2f2:	7bfb      	ldrb	r3, [r7, #15]
 801d2f4:	4413      	add	r3, r2
 801d2f6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801d2f8:	7bfb      	ldrb	r3, [r7, #15]
 801d2fa:	f1c3 031f 	rsb	r3, r3, #31
 801d2fe:	b2db      	uxtb	r3, r3
}
 801d300:	4618      	mov	r0, r3
 801d302:	3714      	adds	r7, #20
 801d304:	46bd      	mov	sp, r7
 801d306:	bc80      	pop	{r7}
 801d308:	4770      	bx	lr
 801d30a:	bf00      	nop
 801d30c:	08020060 	.word	0x08020060

0801d310 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d310:	b580      	push	{r7, lr}
 801d312:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d314:	4b04      	ldr	r3, [pc, #16]	@ (801d328 <UTIL_TIMER_Init+0x18>)
 801d316:	2200      	movs	r2, #0
 801d318:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d31a:	4b04      	ldr	r3, [pc, #16]	@ (801d32c <UTIL_TIMER_Init+0x1c>)
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	4798      	blx	r3
 801d320:	4603      	mov	r3, r0
}
 801d322:	4618      	mov	r0, r3
 801d324:	bd80      	pop	{r7, pc}
 801d326:	bf00      	nop
 801d328:	20001cc8 	.word	0x20001cc8
 801d32c:	0801fadc 	.word	0x0801fadc

0801d330 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d330:	b580      	push	{r7, lr}
 801d332:	b084      	sub	sp, #16
 801d334:	af00      	add	r7, sp, #0
 801d336:	60f8      	str	r0, [r7, #12]
 801d338:	60b9      	str	r1, [r7, #8]
 801d33a:	603b      	str	r3, [r7, #0]
 801d33c:	4613      	mov	r3, r2
 801d33e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801d340:	68fb      	ldr	r3, [r7, #12]
 801d342:	2b00      	cmp	r3, #0
 801d344:	d023      	beq.n	801d38e <UTIL_TIMER_Create+0x5e>
 801d346:	683b      	ldr	r3, [r7, #0]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d020      	beq.n	801d38e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801d34c:	68fb      	ldr	r3, [r7, #12]
 801d34e:	2200      	movs	r2, #0
 801d350:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d352:	4b11      	ldr	r3, [pc, #68]	@ (801d398 <UTIL_TIMER_Create+0x68>)
 801d354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d356:	68b8      	ldr	r0, [r7, #8]
 801d358:	4798      	blx	r3
 801d35a:	4602      	mov	r2, r0
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	2200      	movs	r2, #0
 801d364:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	2200      	movs	r2, #0
 801d36a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	2200      	movs	r2, #0
 801d370:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	683a      	ldr	r2, [r7, #0]
 801d376:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	69ba      	ldr	r2, [r7, #24]
 801d37c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	79fa      	ldrb	r2, [r7, #7]
 801d382:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	2200      	movs	r2, #0
 801d388:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d38a:	2300      	movs	r3, #0
 801d38c:	e000      	b.n	801d390 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d38e:	2301      	movs	r3, #1
  }
}
 801d390:	4618      	mov	r0, r3
 801d392:	3710      	adds	r7, #16
 801d394:	46bd      	mov	sp, r7
 801d396:	bd80      	pop	{r7, pc}
 801d398:	0801fadc 	.word	0x0801fadc

0801d39c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801d39c:	b580      	push	{r7, lr}
 801d39e:	b08a      	sub	sp, #40	@ 0x28
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d056      	beq.n	801d45e <UTIL_TIMER_Start+0xc2>
 801d3b0:	6878      	ldr	r0, [r7, #4]
 801d3b2:	f000 f9a9 	bl	801d708 <TimerExists>
 801d3b6:	4603      	mov	r3, r0
 801d3b8:	f083 0301 	eor.w	r3, r3, #1
 801d3bc:	b2db      	uxtb	r3, r3
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d04d      	beq.n	801d45e <UTIL_TIMER_Start+0xc2>
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	7a5b      	ldrb	r3, [r3, #9]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d149      	bne.n	801d45e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3ca:	f3ef 8310 	mrs	r3, PRIMASK
 801d3ce:	613b      	str	r3, [r7, #16]
  return(result);
 801d3d0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d3d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3d4:	b672      	cpsid	i
}
 801d3d6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	685b      	ldr	r3, [r3, #4]
 801d3dc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801d3de:	4b24      	ldr	r3, [pc, #144]	@ (801d470 <UTIL_TIMER_Start+0xd4>)
 801d3e0:	6a1b      	ldr	r3, [r3, #32]
 801d3e2:	4798      	blx	r3
 801d3e4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801d3e6:	6a3a      	ldr	r2, [r7, #32]
 801d3e8:	69bb      	ldr	r3, [r7, #24]
 801d3ea:	429a      	cmp	r2, r3
 801d3ec:	d201      	bcs.n	801d3f2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801d3ee:	69bb      	ldr	r3, [r7, #24]
 801d3f0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	6a3a      	ldr	r2, [r7, #32]
 801d3f6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	2201      	movs	r2, #1
 801d402:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	2200      	movs	r2, #0
 801d408:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801d40a:	4b1a      	ldr	r3, [pc, #104]	@ (801d474 <UTIL_TIMER_Start+0xd8>)
 801d40c:	681b      	ldr	r3, [r3, #0]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d106      	bne.n	801d420 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801d412:	4b17      	ldr	r3, [pc, #92]	@ (801d470 <UTIL_TIMER_Start+0xd4>)
 801d414:	691b      	ldr	r3, [r3, #16]
 801d416:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801d418:	6878      	ldr	r0, [r7, #4]
 801d41a:	f000 f9eb 	bl	801d7f4 <TimerInsertNewHeadTimer>
 801d41e:	e017      	b.n	801d450 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801d420:	4b13      	ldr	r3, [pc, #76]	@ (801d470 <UTIL_TIMER_Start+0xd4>)
 801d422:	699b      	ldr	r3, [r3, #24]
 801d424:	4798      	blx	r3
 801d426:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	681a      	ldr	r2, [r3, #0]
 801d42c:	697b      	ldr	r3, [r7, #20]
 801d42e:	441a      	add	r2, r3
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	681a      	ldr	r2, [r3, #0]
 801d438:	4b0e      	ldr	r3, [pc, #56]	@ (801d474 <UTIL_TIMER_Start+0xd8>)
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	429a      	cmp	r2, r3
 801d440:	d203      	bcs.n	801d44a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801d442:	6878      	ldr	r0, [r7, #4]
 801d444:	f000 f9d6 	bl	801d7f4 <TimerInsertNewHeadTimer>
 801d448:	e002      	b.n	801d450 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801d44a:	6878      	ldr	r0, [r7, #4]
 801d44c:	f000 f9a2 	bl	801d794 <TimerInsertTimer>
 801d450:	69fb      	ldr	r3, [r7, #28]
 801d452:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	f383 8810 	msr	PRIMASK, r3
}
 801d45a:	bf00      	nop
  {
 801d45c:	e002      	b.n	801d464 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d45e:	2301      	movs	r3, #1
 801d460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801d464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801d468:	4618      	mov	r0, r3
 801d46a:	3728      	adds	r7, #40	@ 0x28
 801d46c:	46bd      	mov	sp, r7
 801d46e:	bd80      	pop	{r7, pc}
 801d470:	0801fadc 	.word	0x0801fadc
 801d474:	20001cc8 	.word	0x20001cc8

0801d478 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d478:	b580      	push	{r7, lr}
 801d47a:	b088      	sub	sp, #32
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d480:	2300      	movs	r3, #0
 801d482:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	2b00      	cmp	r3, #0
 801d488:	d05b      	beq.n	801d542 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d48a:	f3ef 8310 	mrs	r3, PRIMASK
 801d48e:	60fb      	str	r3, [r7, #12]
  return(result);
 801d490:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d494:	b672      	cpsid	i
}
 801d496:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801d498:	4b2d      	ldr	r3, [pc, #180]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801d49e:	4b2c      	ldr	r3, [pc, #176]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	2201      	movs	r2, #1
 801d4a8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801d4aa:	4b29      	ldr	r3, [pc, #164]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d041      	beq.n	801d536 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801d4b8:	4b25      	ldr	r3, [pc, #148]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	687a      	ldr	r2, [r7, #4]
 801d4be:	429a      	cmp	r2, r3
 801d4c0:	d134      	bne.n	801d52c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801d4c2:	4b23      	ldr	r3, [pc, #140]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	2200      	movs	r2, #0
 801d4c8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801d4ca:	4b21      	ldr	r3, [pc, #132]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	695b      	ldr	r3, [r3, #20]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d00a      	beq.n	801d4ea <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801d4d4:	4b1e      	ldr	r3, [pc, #120]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	695b      	ldr	r3, [r3, #20]
 801d4da:	4a1d      	ldr	r2, [pc, #116]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4dc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801d4de:	4b1c      	ldr	r3, [pc, #112]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	f000 f92c 	bl	801d740 <TimerSetTimeout>
 801d4e8:	e023      	b.n	801d532 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801d4ea:	4b1a      	ldr	r3, [pc, #104]	@ (801d554 <UTIL_TIMER_Stop+0xdc>)
 801d4ec:	68db      	ldr	r3, [r3, #12]
 801d4ee:	4798      	blx	r3
            TimerListHead = NULL;
 801d4f0:	4b17      	ldr	r3, [pc, #92]	@ (801d550 <UTIL_TIMER_Stop+0xd8>)
 801d4f2:	2200      	movs	r2, #0
 801d4f4:	601a      	str	r2, [r3, #0]
 801d4f6:	e01c      	b.n	801d532 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801d4f8:	697a      	ldr	r2, [r7, #20]
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	429a      	cmp	r2, r3
 801d4fe:	d110      	bne.n	801d522 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801d500:	697b      	ldr	r3, [r7, #20]
 801d502:	695b      	ldr	r3, [r3, #20]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d006      	beq.n	801d516 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801d508:	697b      	ldr	r3, [r7, #20]
 801d50a:	695b      	ldr	r3, [r3, #20]
 801d50c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d50e:	69bb      	ldr	r3, [r7, #24]
 801d510:	697a      	ldr	r2, [r7, #20]
 801d512:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801d514:	e00d      	b.n	801d532 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801d516:	2300      	movs	r3, #0
 801d518:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d51a:	69bb      	ldr	r3, [r7, #24]
 801d51c:	697a      	ldr	r2, [r7, #20]
 801d51e:	615a      	str	r2, [r3, #20]
            break;
 801d520:	e007      	b.n	801d532 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801d522:	697b      	ldr	r3, [r7, #20]
 801d524:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801d526:	697b      	ldr	r3, [r7, #20]
 801d528:	695b      	ldr	r3, [r3, #20]
 801d52a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801d52c:	697b      	ldr	r3, [r7, #20]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d1e2      	bne.n	801d4f8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801d532:	2300      	movs	r3, #0
 801d534:	77fb      	strb	r3, [r7, #31]
 801d536:	693b      	ldr	r3, [r7, #16]
 801d538:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d53a:	68bb      	ldr	r3, [r7, #8]
 801d53c:	f383 8810 	msr	PRIMASK, r3
}
 801d540:	e001      	b.n	801d546 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801d542:	2301      	movs	r3, #1
 801d544:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801d546:	7ffb      	ldrb	r3, [r7, #31]
}
 801d548:	4618      	mov	r0, r3
 801d54a:	3720      	adds	r7, #32
 801d54c:	46bd      	mov	sp, r7
 801d54e:	bd80      	pop	{r7, pc}
 801d550:	20001cc8 	.word	0x20001cc8
 801d554:	0801fadc 	.word	0x0801fadc

0801d558 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b084      	sub	sp, #16
 801d55c:	af00      	add	r7, sp, #0
 801d55e:	6078      	str	r0, [r7, #4]
 801d560:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d562:	2300      	movs	r3, #0
 801d564:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d102      	bne.n	801d572 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d56c:	2301      	movs	r3, #1
 801d56e:	73fb      	strb	r3, [r7, #15]
 801d570:	e014      	b.n	801d59c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d572:	4b0d      	ldr	r3, [pc, #52]	@ (801d5a8 <UTIL_TIMER_SetPeriod+0x50>)
 801d574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d576:	6838      	ldr	r0, [r7, #0]
 801d578:	4798      	blx	r3
 801d57a:	4602      	mov	r2, r0
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d580:	6878      	ldr	r0, [r7, #4]
 801d582:	f000 f8c1 	bl	801d708 <TimerExists>
 801d586:	4603      	mov	r3, r0
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d007      	beq.n	801d59c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d58c:	6878      	ldr	r0, [r7, #4]
 801d58e:	f7ff ff73 	bl	801d478 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d592:	6878      	ldr	r0, [r7, #4]
 801d594:	f7ff ff02 	bl	801d39c <UTIL_TIMER_Start>
 801d598:	4603      	mov	r3, r0
 801d59a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d59c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d59e:	4618      	mov	r0, r3
 801d5a0:	3710      	adds	r7, #16
 801d5a2:	46bd      	mov	sp, r7
 801d5a4:	bd80      	pop	{r7, pc}
 801d5a6:	bf00      	nop
 801d5a8:	0801fadc 	.word	0x0801fadc

0801d5ac <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d5ac:	b590      	push	{r4, r7, lr}
 801d5ae:	b089      	sub	sp, #36	@ 0x24
 801d5b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5b2:	f3ef 8310 	mrs	r3, PRIMASK
 801d5b6:	60bb      	str	r3, [r7, #8]
  return(result);
 801d5b8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d5ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d5bc:	b672      	cpsid	i
}
 801d5be:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d5c0:	4b38      	ldr	r3, [pc, #224]	@ (801d6a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d5c2:	695b      	ldr	r3, [r3, #20]
 801d5c4:	4798      	blx	r3
 801d5c6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d5c8:	4b36      	ldr	r3, [pc, #216]	@ (801d6a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d5ca:	691b      	ldr	r3, [r3, #16]
 801d5cc:	4798      	blx	r3
 801d5ce:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d5d0:	693a      	ldr	r2, [r7, #16]
 801d5d2:	697b      	ldr	r3, [r7, #20]
 801d5d4:	1ad3      	subs	r3, r2, r3
 801d5d6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d5d8:	4b33      	ldr	r3, [pc, #204]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d037      	beq.n	801d650 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d5e0:	4b31      	ldr	r3, [pc, #196]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d5e6:	69fb      	ldr	r3, [r7, #28]
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	68fa      	ldr	r2, [r7, #12]
 801d5ec:	429a      	cmp	r2, r3
 801d5ee:	d206      	bcs.n	801d5fe <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d5f0:	69fb      	ldr	r3, [r7, #28]
 801d5f2:	681a      	ldr	r2, [r3, #0]
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	1ad2      	subs	r2, r2, r3
 801d5f8:	69fb      	ldr	r3, [r7, #28]
 801d5fa:	601a      	str	r2, [r3, #0]
 801d5fc:	e002      	b.n	801d604 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d5fe:	69fb      	ldr	r3, [r7, #28]
 801d600:	2200      	movs	r2, #0
 801d602:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d604:	69fb      	ldr	r3, [r7, #28]
 801d606:	695b      	ldr	r3, [r3, #20]
 801d608:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d60a:	69fb      	ldr	r3, [r7, #28]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d1ea      	bne.n	801d5e6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d610:	e01e      	b.n	801d650 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d612:	4b25      	ldr	r3, [pc, #148]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d618:	4b23      	ldr	r3, [pc, #140]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	695b      	ldr	r3, [r3, #20]
 801d61e:	4a22      	ldr	r2, [pc, #136]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d620:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d622:	69fb      	ldr	r3, [r7, #28]
 801d624:	2200      	movs	r2, #0
 801d626:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d628:	69fb      	ldr	r3, [r7, #28]
 801d62a:	2200      	movs	r2, #0
 801d62c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d62e:	69fb      	ldr	r3, [r7, #28]
 801d630:	68db      	ldr	r3, [r3, #12]
 801d632:	69fa      	ldr	r2, [r7, #28]
 801d634:	6912      	ldr	r2, [r2, #16]
 801d636:	4610      	mov	r0, r2
 801d638:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d63a:	69fb      	ldr	r3, [r7, #28]
 801d63c:	7adb      	ldrb	r3, [r3, #11]
 801d63e:	2b01      	cmp	r3, #1
 801d640:	d106      	bne.n	801d650 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d642:	69fb      	ldr	r3, [r7, #28]
 801d644:	7a9b      	ldrb	r3, [r3, #10]
 801d646:	2b00      	cmp	r3, #0
 801d648:	d102      	bne.n	801d650 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d64a:	69f8      	ldr	r0, [r7, #28]
 801d64c:	f7ff fea6 	bl	801d39c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d650:	4b15      	ldr	r3, [pc, #84]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	2b00      	cmp	r3, #0
 801d656:	d00d      	beq.n	801d674 <UTIL_TIMER_IRQ_Handler+0xc8>
 801d658:	4b13      	ldr	r3, [pc, #76]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d0d7      	beq.n	801d612 <UTIL_TIMER_IRQ_Handler+0x66>
 801d662:	4b11      	ldr	r3, [pc, #68]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	681c      	ldr	r4, [r3, #0]
 801d668:	4b0e      	ldr	r3, [pc, #56]	@ (801d6a4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d66a:	699b      	ldr	r3, [r3, #24]
 801d66c:	4798      	blx	r3
 801d66e:	4603      	mov	r3, r0
 801d670:	429c      	cmp	r4, r3
 801d672:	d3ce      	bcc.n	801d612 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d674:	4b0c      	ldr	r3, [pc, #48]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d676:	681b      	ldr	r3, [r3, #0]
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d009      	beq.n	801d690 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d67c:	4b0a      	ldr	r3, [pc, #40]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	7a1b      	ldrb	r3, [r3, #8]
 801d682:	2b00      	cmp	r3, #0
 801d684:	d104      	bne.n	801d690 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d686:	4b08      	ldr	r3, [pc, #32]	@ (801d6a8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	4618      	mov	r0, r3
 801d68c:	f000 f858 	bl	801d740 <TimerSetTimeout>
 801d690:	69bb      	ldr	r3, [r7, #24]
 801d692:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	f383 8810 	msr	PRIMASK, r3
}
 801d69a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d69c:	bf00      	nop
 801d69e:	3724      	adds	r7, #36	@ 0x24
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	bd90      	pop	{r4, r7, pc}
 801d6a4:	0801fadc 	.word	0x0801fadc
 801d6a8:	20001cc8 	.word	0x20001cc8

0801d6ac <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b082      	sub	sp, #8
 801d6b0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d6b2:	4b06      	ldr	r3, [pc, #24]	@ (801d6cc <UTIL_TIMER_GetCurrentTime+0x20>)
 801d6b4:	69db      	ldr	r3, [r3, #28]
 801d6b6:	4798      	blx	r3
 801d6b8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d6ba:	4b04      	ldr	r3, [pc, #16]	@ (801d6cc <UTIL_TIMER_GetCurrentTime+0x20>)
 801d6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6be:	6878      	ldr	r0, [r7, #4]
 801d6c0:	4798      	blx	r3
 801d6c2:	4603      	mov	r3, r0
}
 801d6c4:	4618      	mov	r0, r3
 801d6c6:	3708      	adds	r7, #8
 801d6c8:	46bd      	mov	sp, r7
 801d6ca:	bd80      	pop	{r7, pc}
 801d6cc:	0801fadc 	.word	0x0801fadc

0801d6d0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d6d0:	b580      	push	{r7, lr}
 801d6d2:	b084      	sub	sp, #16
 801d6d4:	af00      	add	r7, sp, #0
 801d6d6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d6d8:	4b0a      	ldr	r3, [pc, #40]	@ (801d704 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d6da:	69db      	ldr	r3, [r3, #28]
 801d6dc:	4798      	blx	r3
 801d6de:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d6e0:	4b08      	ldr	r3, [pc, #32]	@ (801d704 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6e4:	6878      	ldr	r0, [r7, #4]
 801d6e6:	4798      	blx	r3
 801d6e8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d6ea:	4b06      	ldr	r3, [pc, #24]	@ (801d704 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6ee:	68f9      	ldr	r1, [r7, #12]
 801d6f0:	68ba      	ldr	r2, [r7, #8]
 801d6f2:	1a8a      	subs	r2, r1, r2
 801d6f4:	4610      	mov	r0, r2
 801d6f6:	4798      	blx	r3
 801d6f8:	4603      	mov	r3, r0
}
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	3710      	adds	r7, #16
 801d6fe:	46bd      	mov	sp, r7
 801d700:	bd80      	pop	{r7, pc}
 801d702:	bf00      	nop
 801d704:	0801fadc 	.word	0x0801fadc

0801d708 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d708:	b480      	push	{r7}
 801d70a:	b085      	sub	sp, #20
 801d70c:	af00      	add	r7, sp, #0
 801d70e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d710:	4b0a      	ldr	r3, [pc, #40]	@ (801d73c <TimerExists+0x34>)
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d716:	e008      	b.n	801d72a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d718:	68fa      	ldr	r2, [r7, #12]
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	429a      	cmp	r2, r3
 801d71e:	d101      	bne.n	801d724 <TimerExists+0x1c>
    {
      return true;
 801d720:	2301      	movs	r3, #1
 801d722:	e006      	b.n	801d732 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	695b      	ldr	r3, [r3, #20]
 801d728:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d1f3      	bne.n	801d718 <TimerExists+0x10>
  }
  return false;
 801d730:	2300      	movs	r3, #0
}
 801d732:	4618      	mov	r0, r3
 801d734:	3714      	adds	r7, #20
 801d736:	46bd      	mov	sp, r7
 801d738:	bc80      	pop	{r7}
 801d73a:	4770      	bx	lr
 801d73c:	20001cc8 	.word	0x20001cc8

0801d740 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d740:	b590      	push	{r4, r7, lr}
 801d742:	b085      	sub	sp, #20
 801d744:	af00      	add	r7, sp, #0
 801d746:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d748:	4b11      	ldr	r3, [pc, #68]	@ (801d790 <TimerSetTimeout+0x50>)
 801d74a:	6a1b      	ldr	r3, [r3, #32]
 801d74c:	4798      	blx	r3
 801d74e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	2201      	movs	r2, #1
 801d754:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	681c      	ldr	r4, [r3, #0]
 801d75a:	4b0d      	ldr	r3, [pc, #52]	@ (801d790 <TimerSetTimeout+0x50>)
 801d75c:	699b      	ldr	r3, [r3, #24]
 801d75e:	4798      	blx	r3
 801d760:	4602      	mov	r2, r0
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	4413      	add	r3, r2
 801d766:	429c      	cmp	r4, r3
 801d768:	d207      	bcs.n	801d77a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d76a:	4b09      	ldr	r3, [pc, #36]	@ (801d790 <TimerSetTimeout+0x50>)
 801d76c:	699b      	ldr	r3, [r3, #24]
 801d76e:	4798      	blx	r3
 801d770:	4602      	mov	r2, r0
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	441a      	add	r2, r3
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d77a:	4b05      	ldr	r3, [pc, #20]	@ (801d790 <TimerSetTimeout+0x50>)
 801d77c:	689b      	ldr	r3, [r3, #8]
 801d77e:	687a      	ldr	r2, [r7, #4]
 801d780:	6812      	ldr	r2, [r2, #0]
 801d782:	4610      	mov	r0, r2
 801d784:	4798      	blx	r3
}
 801d786:	bf00      	nop
 801d788:	3714      	adds	r7, #20
 801d78a:	46bd      	mov	sp, r7
 801d78c:	bd90      	pop	{r4, r7, pc}
 801d78e:	bf00      	nop
 801d790:	0801fadc 	.word	0x0801fadc

0801d794 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d794:	b480      	push	{r7}
 801d796:	b085      	sub	sp, #20
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d79c:	4b14      	ldr	r3, [pc, #80]	@ (801d7f0 <TimerInsertTimer+0x5c>)
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d7a2:	4b13      	ldr	r3, [pc, #76]	@ (801d7f0 <TimerInsertTimer+0x5c>)
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	695b      	ldr	r3, [r3, #20]
 801d7a8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d7aa:	e012      	b.n	801d7d2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	681a      	ldr	r2, [r3, #0]
 801d7b0:	68bb      	ldr	r3, [r7, #8]
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	429a      	cmp	r2, r3
 801d7b6:	d905      	bls.n	801d7c4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d7b8:	68bb      	ldr	r3, [r7, #8]
 801d7ba:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d7bc:	68bb      	ldr	r3, [r7, #8]
 801d7be:	695b      	ldr	r3, [r3, #20]
 801d7c0:	60bb      	str	r3, [r7, #8]
 801d7c2:	e006      	b.n	801d7d2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	687a      	ldr	r2, [r7, #4]
 801d7c8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	68ba      	ldr	r2, [r7, #8]
 801d7ce:	615a      	str	r2, [r3, #20]
        return;
 801d7d0:	e009      	b.n	801d7e6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	695b      	ldr	r3, [r3, #20]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d1e8      	bne.n	801d7ac <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	687a      	ldr	r2, [r7, #4]
 801d7de:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	2200      	movs	r2, #0
 801d7e4:	615a      	str	r2, [r3, #20]
}
 801d7e6:	3714      	adds	r7, #20
 801d7e8:	46bd      	mov	sp, r7
 801d7ea:	bc80      	pop	{r7}
 801d7ec:	4770      	bx	lr
 801d7ee:	bf00      	nop
 801d7f0:	20001cc8 	.word	0x20001cc8

0801d7f4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d7f4:	b580      	push	{r7, lr}
 801d7f6:	b084      	sub	sp, #16
 801d7f8:	af00      	add	r7, sp, #0
 801d7fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d7fc:	4b0b      	ldr	r3, [pc, #44]	@ (801d82c <TimerInsertNewHeadTimer+0x38>)
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d802:	68fb      	ldr	r3, [r7, #12]
 801d804:	2b00      	cmp	r3, #0
 801d806:	d002      	beq.n	801d80e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	2200      	movs	r2, #0
 801d80c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	68fa      	ldr	r2, [r7, #12]
 801d812:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d814:	4a05      	ldr	r2, [pc, #20]	@ (801d82c <TimerInsertNewHeadTimer+0x38>)
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d81a:	4b04      	ldr	r3, [pc, #16]	@ (801d82c <TimerInsertNewHeadTimer+0x38>)
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	4618      	mov	r0, r3
 801d820:	f7ff ff8e 	bl	801d740 <TimerSetTimeout>
}
 801d824:	bf00      	nop
 801d826:	3710      	adds	r7, #16
 801d828:	46bd      	mov	sp, r7
 801d82a:	bd80      	pop	{r7, pc}
 801d82c:	20001cc8 	.word	0x20001cc8

0801d830 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d830:	b580      	push	{r7, lr}
 801d832:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d834:	2218      	movs	r2, #24
 801d836:	2100      	movs	r1, #0
 801d838:	4807      	ldr	r0, [pc, #28]	@ (801d858 <UTIL_ADV_TRACE_Init+0x28>)
 801d83a:	f7ff f862 	bl	801c902 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d83e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801d842:	2100      	movs	r1, #0
 801d844:	4805      	ldr	r0, [pc, #20]	@ (801d85c <UTIL_ADV_TRACE_Init+0x2c>)
 801d846:	f7ff f85c 	bl	801c902 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d84a:	4b05      	ldr	r3, [pc, #20]	@ (801d860 <UTIL_ADV_TRACE_Init+0x30>)
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	4805      	ldr	r0, [pc, #20]	@ (801d864 <UTIL_ADV_TRACE_Init+0x34>)
 801d850:	4798      	blx	r3
 801d852:	4603      	mov	r3, r0
}
 801d854:	4618      	mov	r0, r3
 801d856:	bd80      	pop	{r7, pc}
 801d858:	20001ccc 	.word	0x20001ccc
 801d85c:	20001ce4 	.word	0x20001ce4
 801d860:	0801fb1c 	.word	0x0801fb1c
 801d864:	0801dad1 	.word	0x0801dad1

0801d868 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d868:	b480      	push	{r7}
 801d86a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d86c:	4b06      	ldr	r3, [pc, #24]	@ (801d888 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d86e:	8a5a      	ldrh	r2, [r3, #18]
 801d870:	4b05      	ldr	r3, [pc, #20]	@ (801d888 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d872:	8a1b      	ldrh	r3, [r3, #16]
 801d874:	429a      	cmp	r2, r3
 801d876:	d101      	bne.n	801d87c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d878:	2301      	movs	r3, #1
 801d87a:	e000      	b.n	801d87e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d87c:	2300      	movs	r3, #0
}
 801d87e:	4618      	mov	r0, r3
 801d880:	46bd      	mov	sp, r7
 801d882:	bc80      	pop	{r7}
 801d884:	4770      	bx	lr
 801d886:	bf00      	nop
 801d888:	20001ccc 	.word	0x20001ccc

0801d88c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d88c:	b408      	push	{r3}
 801d88e:	b580      	push	{r7, lr}
 801d890:	b08d      	sub	sp, #52	@ 0x34
 801d892:	af00      	add	r7, sp, #0
 801d894:	60f8      	str	r0, [r7, #12]
 801d896:	60b9      	str	r1, [r7, #8]
 801d898:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d89a:	2300      	movs	r3, #0
 801d89c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d89e:	2300      	movs	r3, #0
 801d8a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d8a2:	4b37      	ldr	r3, [pc, #220]	@ (801d980 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d8a4:	7a1b      	ldrb	r3, [r3, #8]
 801d8a6:	461a      	mov	r2, r3
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	4293      	cmp	r3, r2
 801d8ac:	d902      	bls.n	801d8b4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d8ae:	f06f 0304 	mvn.w	r3, #4
 801d8b2:	e05e      	b.n	801d972 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d8b4:	4b32      	ldr	r3, [pc, #200]	@ (801d980 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d8b6:	68da      	ldr	r2, [r3, #12]
 801d8b8:	68bb      	ldr	r3, [r7, #8]
 801d8ba:	4013      	ands	r3, r2
 801d8bc:	68ba      	ldr	r2, [r7, #8]
 801d8be:	429a      	cmp	r2, r3
 801d8c0:	d002      	beq.n	801d8c8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d8c2:	f06f 0305 	mvn.w	r3, #5
 801d8c6:	e054      	b.n	801d972 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d8c8:	4b2d      	ldr	r3, [pc, #180]	@ (801d980 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d8ca:	685b      	ldr	r3, [r3, #4]
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d00a      	beq.n	801d8e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d007      	beq.n	801d8e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d8d6:	4b2a      	ldr	r3, [pc, #168]	@ (801d980 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d8d8:	685b      	ldr	r3, [r3, #4]
 801d8da:	f107 0116 	add.w	r1, r7, #22
 801d8de:	f107 0218 	add.w	r2, r7, #24
 801d8e2:	4610      	mov	r0, r2
 801d8e4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d8e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801d8ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d8f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801d8f4:	4823      	ldr	r0, [pc, #140]	@ (801d984 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d8f6:	f7ff fa2b 	bl	801cd50 <tiny_vsnprintf_like>
 801d8fa:	4603      	mov	r3, r0
 801d8fc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801d8fe:	f000 f9f1 	bl	801dce4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d902:	8afa      	ldrh	r2, [r7, #22]
 801d904:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801d906:	4413      	add	r3, r2
 801d908:	b29b      	uxth	r3, r3
 801d90a:	f107 0214 	add.w	r2, r7, #20
 801d90e:	4611      	mov	r1, r2
 801d910:	4618      	mov	r0, r3
 801d912:	f000 f969 	bl	801dbe8 <TRACE_AllocateBufer>
 801d916:	4603      	mov	r3, r0
 801d918:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d91c:	d025      	beq.n	801d96a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d91e:	2300      	movs	r3, #0
 801d920:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801d922:	e00e      	b.n	801d942 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d924:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d926:	8aba      	ldrh	r2, [r7, #20]
 801d928:	3330      	adds	r3, #48	@ 0x30
 801d92a:	443b      	add	r3, r7
 801d92c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d930:	4b15      	ldr	r3, [pc, #84]	@ (801d988 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d932:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d934:	8abb      	ldrh	r3, [r7, #20]
 801d936:	3301      	adds	r3, #1
 801d938:	b29b      	uxth	r3, r3
 801d93a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d93c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d93e:	3301      	adds	r3, #1
 801d940:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801d942:	8afb      	ldrh	r3, [r7, #22]
 801d944:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d946:	429a      	cmp	r2, r3
 801d948:	d3ec      	bcc.n	801d924 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d94a:	8abb      	ldrh	r3, [r7, #20]
 801d94c:	461a      	mov	r2, r3
 801d94e:	4b0e      	ldr	r3, [pc, #56]	@ (801d988 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d950:	18d0      	adds	r0, r2, r3
 801d952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d954:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d956:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801d95a:	f7ff f9f9 	bl	801cd50 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d95e:	f000 f9df 	bl	801dd20 <TRACE_UnLock>

    return TRACE_Send();
 801d962:	f000 f831 	bl	801d9c8 <TRACE_Send>
 801d966:	4603      	mov	r3, r0
 801d968:	e003      	b.n	801d972 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d96a:	f000 f9d9 	bl	801dd20 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d96e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d972:	4618      	mov	r0, r3
 801d974:	3734      	adds	r7, #52	@ 0x34
 801d976:	46bd      	mov	sp, r7
 801d978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d97c:	b001      	add	sp, #4
 801d97e:	4770      	bx	lr
 801d980:	20001ccc 	.word	0x20001ccc
 801d984:	200020e4 	.word	0x200020e4
 801d988:	20001ce4 	.word	0x20001ce4

0801d98c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d98c:	b480      	push	{r7}
 801d98e:	b083      	sub	sp, #12
 801d990:	af00      	add	r7, sp, #0
 801d992:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d994:	4a03      	ldr	r2, [pc, #12]	@ (801d9a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	6053      	str	r3, [r2, #4]
}
 801d99a:	bf00      	nop
 801d99c:	370c      	adds	r7, #12
 801d99e:	46bd      	mov	sp, r7
 801d9a0:	bc80      	pop	{r7}
 801d9a2:	4770      	bx	lr
 801d9a4:	20001ccc 	.word	0x20001ccc

0801d9a8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d9a8:	b480      	push	{r7}
 801d9aa:	b083      	sub	sp, #12
 801d9ac:	af00      	add	r7, sp, #0
 801d9ae:	4603      	mov	r3, r0
 801d9b0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d9b2:	4a04      	ldr	r2, [pc, #16]	@ (801d9c4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d9b4:	79fb      	ldrb	r3, [r7, #7]
 801d9b6:	7213      	strb	r3, [r2, #8]
}
 801d9b8:	bf00      	nop
 801d9ba:	370c      	adds	r7, #12
 801d9bc:	46bd      	mov	sp, r7
 801d9be:	bc80      	pop	{r7}
 801d9c0:	4770      	bx	lr
 801d9c2:	bf00      	nop
 801d9c4:	20001ccc 	.word	0x20001ccc

0801d9c8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d9c8:	b580      	push	{r7, lr}
 801d9ca:	b088      	sub	sp, #32
 801d9cc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d9ce:	2300      	movs	r3, #0
 801d9d0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d9d2:	2300      	movs	r3, #0
 801d9d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9d6:	f3ef 8310 	mrs	r3, PRIMASK
 801d9da:	613b      	str	r3, [r7, #16]
  return(result);
 801d9dc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d9de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d9e0:	b672      	cpsid	i
}
 801d9e2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d9e4:	f000 f9ba 	bl	801dd5c <TRACE_IsLocked>
 801d9e8:	4603      	mov	r3, r0
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d15d      	bne.n	801daaa <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d9ee:	f000 f979 	bl	801dce4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d9f2:	4b34      	ldr	r3, [pc, #208]	@ (801dac4 <TRACE_Send+0xfc>)
 801d9f4:	8a1a      	ldrh	r2, [r3, #16]
 801d9f6:	4b33      	ldr	r3, [pc, #204]	@ (801dac4 <TRACE_Send+0xfc>)
 801d9f8:	8a5b      	ldrh	r3, [r3, #18]
 801d9fa:	429a      	cmp	r2, r3
 801d9fc:	d04d      	beq.n	801da9a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d9fe:	4b31      	ldr	r3, [pc, #196]	@ (801dac4 <TRACE_Send+0xfc>)
 801da00:	789b      	ldrb	r3, [r3, #2]
 801da02:	2b01      	cmp	r3, #1
 801da04:	d117      	bne.n	801da36 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801da06:	4b2f      	ldr	r3, [pc, #188]	@ (801dac4 <TRACE_Send+0xfc>)
 801da08:	881a      	ldrh	r2, [r3, #0]
 801da0a:	4b2e      	ldr	r3, [pc, #184]	@ (801dac4 <TRACE_Send+0xfc>)
 801da0c:	8a1b      	ldrh	r3, [r3, #16]
 801da0e:	1ad3      	subs	r3, r2, r3
 801da10:	b29a      	uxth	r2, r3
 801da12:	4b2c      	ldr	r3, [pc, #176]	@ (801dac4 <TRACE_Send+0xfc>)
 801da14:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801da16:	4b2b      	ldr	r3, [pc, #172]	@ (801dac4 <TRACE_Send+0xfc>)
 801da18:	2202      	movs	r2, #2
 801da1a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801da1c:	4b29      	ldr	r3, [pc, #164]	@ (801dac4 <TRACE_Send+0xfc>)
 801da1e:	2200      	movs	r2, #0
 801da20:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801da22:	4b28      	ldr	r3, [pc, #160]	@ (801dac4 <TRACE_Send+0xfc>)
 801da24:	8a9b      	ldrh	r3, [r3, #20]
 801da26:	2b00      	cmp	r3, #0
 801da28:	d105      	bne.n	801da36 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801da2a:	4b26      	ldr	r3, [pc, #152]	@ (801dac4 <TRACE_Send+0xfc>)
 801da2c:	2200      	movs	r2, #0
 801da2e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801da30:	4b24      	ldr	r3, [pc, #144]	@ (801dac4 <TRACE_Send+0xfc>)
 801da32:	2200      	movs	r2, #0
 801da34:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801da36:	4b23      	ldr	r3, [pc, #140]	@ (801dac4 <TRACE_Send+0xfc>)
 801da38:	789b      	ldrb	r3, [r3, #2]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d115      	bne.n	801da6a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801da3e:	4b21      	ldr	r3, [pc, #132]	@ (801dac4 <TRACE_Send+0xfc>)
 801da40:	8a5a      	ldrh	r2, [r3, #18]
 801da42:	4b20      	ldr	r3, [pc, #128]	@ (801dac4 <TRACE_Send+0xfc>)
 801da44:	8a1b      	ldrh	r3, [r3, #16]
 801da46:	429a      	cmp	r2, r3
 801da48:	d908      	bls.n	801da5c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801da4a:	4b1e      	ldr	r3, [pc, #120]	@ (801dac4 <TRACE_Send+0xfc>)
 801da4c:	8a5a      	ldrh	r2, [r3, #18]
 801da4e:	4b1d      	ldr	r3, [pc, #116]	@ (801dac4 <TRACE_Send+0xfc>)
 801da50:	8a1b      	ldrh	r3, [r3, #16]
 801da52:	1ad3      	subs	r3, r2, r3
 801da54:	b29a      	uxth	r2, r3
 801da56:	4b1b      	ldr	r3, [pc, #108]	@ (801dac4 <TRACE_Send+0xfc>)
 801da58:	829a      	strh	r2, [r3, #20]
 801da5a:	e006      	b.n	801da6a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801da5c:	4b19      	ldr	r3, [pc, #100]	@ (801dac4 <TRACE_Send+0xfc>)
 801da5e:	8a1b      	ldrh	r3, [r3, #16]
 801da60:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801da64:	b29a      	uxth	r2, r3
 801da66:	4b17      	ldr	r3, [pc, #92]	@ (801dac4 <TRACE_Send+0xfc>)
 801da68:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801da6a:	4b16      	ldr	r3, [pc, #88]	@ (801dac4 <TRACE_Send+0xfc>)
 801da6c:	8a1b      	ldrh	r3, [r3, #16]
 801da6e:	461a      	mov	r2, r3
 801da70:	4b15      	ldr	r3, [pc, #84]	@ (801dac8 <TRACE_Send+0x100>)
 801da72:	4413      	add	r3, r2
 801da74:	61bb      	str	r3, [r7, #24]
 801da76:	697b      	ldr	r3, [r7, #20]
 801da78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da7a:	68fb      	ldr	r3, [r7, #12]
 801da7c:	f383 8810 	msr	PRIMASK, r3
}
 801da80:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801da82:	f7e5 fba5 	bl	80031d0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801da86:	4b11      	ldr	r3, [pc, #68]	@ (801dacc <TRACE_Send+0x104>)
 801da88:	68db      	ldr	r3, [r3, #12]
 801da8a:	4a0e      	ldr	r2, [pc, #56]	@ (801dac4 <TRACE_Send+0xfc>)
 801da8c:	8a92      	ldrh	r2, [r2, #20]
 801da8e:	4611      	mov	r1, r2
 801da90:	69b8      	ldr	r0, [r7, #24]
 801da92:	4798      	blx	r3
 801da94:	4603      	mov	r3, r0
 801da96:	77fb      	strb	r3, [r7, #31]
 801da98:	e00d      	b.n	801dab6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801da9a:	f000 f941 	bl	801dd20 <TRACE_UnLock>
 801da9e:	697b      	ldr	r3, [r7, #20]
 801daa0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801daa2:	68bb      	ldr	r3, [r7, #8]
 801daa4:	f383 8810 	msr	PRIMASK, r3
}
 801daa8:	e005      	b.n	801dab6 <TRACE_Send+0xee>
 801daaa:	697b      	ldr	r3, [r7, #20]
 801daac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	f383 8810 	msr	PRIMASK, r3
}
 801dab4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801dab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801daba:	4618      	mov	r0, r3
 801dabc:	3720      	adds	r7, #32
 801dabe:	46bd      	mov	sp, r7
 801dac0:	bd80      	pop	{r7, pc}
 801dac2:	bf00      	nop
 801dac4:	20001ccc 	.word	0x20001ccc
 801dac8:	20001ce4 	.word	0x20001ce4
 801dacc:	0801fb1c 	.word	0x0801fb1c

0801dad0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801dad0:	b580      	push	{r7, lr}
 801dad2:	b088      	sub	sp, #32
 801dad4:	af00      	add	r7, sp, #0
 801dad6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801dad8:	2300      	movs	r3, #0
 801dada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dadc:	f3ef 8310 	mrs	r3, PRIMASK
 801dae0:	617b      	str	r3, [r7, #20]
  return(result);
 801dae2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dae4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801dae6:	b672      	cpsid	i
}
 801dae8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801daea:	4b3c      	ldr	r3, [pc, #240]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801daec:	789b      	ldrb	r3, [r3, #2]
 801daee:	2b02      	cmp	r3, #2
 801daf0:	d106      	bne.n	801db00 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801daf2:	4b3a      	ldr	r3, [pc, #232]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801daf4:	2200      	movs	r2, #0
 801daf6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801daf8:	4b38      	ldr	r3, [pc, #224]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801dafa:	2200      	movs	r2, #0
 801dafc:	821a      	strh	r2, [r3, #16]
 801dafe:	e00a      	b.n	801db16 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801db00:	4b36      	ldr	r3, [pc, #216]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db02:	8a1a      	ldrh	r2, [r3, #16]
 801db04:	4b35      	ldr	r3, [pc, #212]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db06:	8a9b      	ldrh	r3, [r3, #20]
 801db08:	4413      	add	r3, r2
 801db0a:	b29b      	uxth	r3, r3
 801db0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801db10:	b29a      	uxth	r2, r3
 801db12:	4b32      	ldr	r3, [pc, #200]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db14:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801db16:	4b31      	ldr	r3, [pc, #196]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db18:	8a1a      	ldrh	r2, [r3, #16]
 801db1a:	4b30      	ldr	r3, [pc, #192]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db1c:	8a5b      	ldrh	r3, [r3, #18]
 801db1e:	429a      	cmp	r2, r3
 801db20:	d04d      	beq.n	801dbbe <TRACE_TxCpltCallback+0xee>
 801db22:	4b2e      	ldr	r3, [pc, #184]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db24:	8adb      	ldrh	r3, [r3, #22]
 801db26:	2b01      	cmp	r3, #1
 801db28:	d149      	bne.n	801dbbe <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801db2a:	4b2c      	ldr	r3, [pc, #176]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db2c:	789b      	ldrb	r3, [r3, #2]
 801db2e:	2b01      	cmp	r3, #1
 801db30:	d117      	bne.n	801db62 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801db32:	4b2a      	ldr	r3, [pc, #168]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db34:	881a      	ldrh	r2, [r3, #0]
 801db36:	4b29      	ldr	r3, [pc, #164]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db38:	8a1b      	ldrh	r3, [r3, #16]
 801db3a:	1ad3      	subs	r3, r2, r3
 801db3c:	b29a      	uxth	r2, r3
 801db3e:	4b27      	ldr	r3, [pc, #156]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db40:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801db42:	4b26      	ldr	r3, [pc, #152]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db44:	2202      	movs	r2, #2
 801db46:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801db48:	4b24      	ldr	r3, [pc, #144]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db4a:	2200      	movs	r2, #0
 801db4c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801db4e:	4b23      	ldr	r3, [pc, #140]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db50:	8a9b      	ldrh	r3, [r3, #20]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d105      	bne.n	801db62 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801db56:	4b21      	ldr	r3, [pc, #132]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db58:	2200      	movs	r2, #0
 801db5a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801db5c:	4b1f      	ldr	r3, [pc, #124]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db5e:	2200      	movs	r2, #0
 801db60:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801db62:	4b1e      	ldr	r3, [pc, #120]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db64:	789b      	ldrb	r3, [r3, #2]
 801db66:	2b00      	cmp	r3, #0
 801db68:	d115      	bne.n	801db96 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801db6a:	4b1c      	ldr	r3, [pc, #112]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db6c:	8a5a      	ldrh	r2, [r3, #18]
 801db6e:	4b1b      	ldr	r3, [pc, #108]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db70:	8a1b      	ldrh	r3, [r3, #16]
 801db72:	429a      	cmp	r2, r3
 801db74:	d908      	bls.n	801db88 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801db76:	4b19      	ldr	r3, [pc, #100]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db78:	8a5a      	ldrh	r2, [r3, #18]
 801db7a:	4b18      	ldr	r3, [pc, #96]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db7c:	8a1b      	ldrh	r3, [r3, #16]
 801db7e:	1ad3      	subs	r3, r2, r3
 801db80:	b29a      	uxth	r2, r3
 801db82:	4b16      	ldr	r3, [pc, #88]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db84:	829a      	strh	r2, [r3, #20]
 801db86:	e006      	b.n	801db96 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801db88:	4b14      	ldr	r3, [pc, #80]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db8a:	8a1b      	ldrh	r3, [r3, #16]
 801db8c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801db90:	b29a      	uxth	r2, r3
 801db92:	4b12      	ldr	r3, [pc, #72]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db94:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801db96:	4b11      	ldr	r3, [pc, #68]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801db98:	8a1b      	ldrh	r3, [r3, #16]
 801db9a:	461a      	mov	r2, r3
 801db9c:	4b10      	ldr	r3, [pc, #64]	@ (801dbe0 <TRACE_TxCpltCallback+0x110>)
 801db9e:	4413      	add	r3, r2
 801dba0:	61fb      	str	r3, [r7, #28]
 801dba2:	69bb      	ldr	r3, [r7, #24]
 801dba4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dba6:	693b      	ldr	r3, [r7, #16]
 801dba8:	f383 8810 	msr	PRIMASK, r3
}
 801dbac:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801dbae:	4b0d      	ldr	r3, [pc, #52]	@ (801dbe4 <TRACE_TxCpltCallback+0x114>)
 801dbb0:	68db      	ldr	r3, [r3, #12]
 801dbb2:	4a0a      	ldr	r2, [pc, #40]	@ (801dbdc <TRACE_TxCpltCallback+0x10c>)
 801dbb4:	8a92      	ldrh	r2, [r2, #20]
 801dbb6:	4611      	mov	r1, r2
 801dbb8:	69f8      	ldr	r0, [r7, #28]
 801dbba:	4798      	blx	r3
 801dbbc:	e00a      	b.n	801dbd4 <TRACE_TxCpltCallback+0x104>
 801dbbe:	69bb      	ldr	r3, [r7, #24]
 801dbc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	f383 8810 	msr	PRIMASK, r3
}
 801dbc8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801dbca:	f7e5 fb09 	bl	80031e0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801dbce:	f000 f8a7 	bl	801dd20 <TRACE_UnLock>
  }
}
 801dbd2:	bf00      	nop
 801dbd4:	bf00      	nop
 801dbd6:	3720      	adds	r7, #32
 801dbd8:	46bd      	mov	sp, r7
 801dbda:	bd80      	pop	{r7, pc}
 801dbdc:	20001ccc 	.word	0x20001ccc
 801dbe0:	20001ce4 	.word	0x20001ce4
 801dbe4:	0801fb1c 	.word	0x0801fb1c

0801dbe8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801dbe8:	b480      	push	{r7}
 801dbea:	b087      	sub	sp, #28
 801dbec:	af00      	add	r7, sp, #0
 801dbee:	4603      	mov	r3, r0
 801dbf0:	6039      	str	r1, [r7, #0]
 801dbf2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801dbf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801dbf8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbfa:	f3ef 8310 	mrs	r3, PRIMASK
 801dbfe:	60fb      	str	r3, [r7, #12]
  return(result);
 801dc00:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dc02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801dc04:	b672      	cpsid	i
}
 801dc06:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801dc08:	4b35      	ldr	r3, [pc, #212]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc0a:	8a5a      	ldrh	r2, [r3, #18]
 801dc0c:	4b34      	ldr	r3, [pc, #208]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc0e:	8a1b      	ldrh	r3, [r3, #16]
 801dc10:	429a      	cmp	r2, r3
 801dc12:	d11b      	bne.n	801dc4c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801dc14:	4b32      	ldr	r3, [pc, #200]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc16:	8a5b      	ldrh	r3, [r3, #18]
 801dc18:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801dc1c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801dc1e:	88fa      	ldrh	r2, [r7, #6]
 801dc20:	8afb      	ldrh	r3, [r7, #22]
 801dc22:	429a      	cmp	r2, r3
 801dc24:	d33a      	bcc.n	801dc9c <TRACE_AllocateBufer+0xb4>
 801dc26:	4b2e      	ldr	r3, [pc, #184]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc28:	8a1b      	ldrh	r3, [r3, #16]
 801dc2a:	88fa      	ldrh	r2, [r7, #6]
 801dc2c:	429a      	cmp	r2, r3
 801dc2e:	d235      	bcs.n	801dc9c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801dc30:	4b2b      	ldr	r3, [pc, #172]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc32:	2201      	movs	r2, #1
 801dc34:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801dc36:	4b2a      	ldr	r3, [pc, #168]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc38:	8a5a      	ldrh	r2, [r3, #18]
 801dc3a:	4b29      	ldr	r3, [pc, #164]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc3c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801dc3e:	4b28      	ldr	r3, [pc, #160]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc40:	8a1b      	ldrh	r3, [r3, #16]
 801dc42:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801dc44:	4b26      	ldr	r3, [pc, #152]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc46:	2200      	movs	r2, #0
 801dc48:	825a      	strh	r2, [r3, #18]
 801dc4a:	e027      	b.n	801dc9c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801dc4c:	4b24      	ldr	r3, [pc, #144]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc4e:	8a5a      	ldrh	r2, [r3, #18]
 801dc50:	4b23      	ldr	r3, [pc, #140]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc52:	8a1b      	ldrh	r3, [r3, #16]
 801dc54:	429a      	cmp	r2, r3
 801dc56:	d91b      	bls.n	801dc90 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801dc58:	4b21      	ldr	r3, [pc, #132]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc5a:	8a5b      	ldrh	r3, [r3, #18]
 801dc5c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801dc60:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801dc62:	88fa      	ldrh	r2, [r7, #6]
 801dc64:	8afb      	ldrh	r3, [r7, #22]
 801dc66:	429a      	cmp	r2, r3
 801dc68:	d318      	bcc.n	801dc9c <TRACE_AllocateBufer+0xb4>
 801dc6a:	4b1d      	ldr	r3, [pc, #116]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc6c:	8a1b      	ldrh	r3, [r3, #16]
 801dc6e:	88fa      	ldrh	r2, [r7, #6]
 801dc70:	429a      	cmp	r2, r3
 801dc72:	d213      	bcs.n	801dc9c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801dc74:	4b1a      	ldr	r3, [pc, #104]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc76:	2201      	movs	r2, #1
 801dc78:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801dc7a:	4b19      	ldr	r3, [pc, #100]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc7c:	8a5a      	ldrh	r2, [r3, #18]
 801dc7e:	4b18      	ldr	r3, [pc, #96]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc80:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801dc82:	4b17      	ldr	r3, [pc, #92]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc84:	8a1b      	ldrh	r3, [r3, #16]
 801dc86:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801dc88:	4b15      	ldr	r3, [pc, #84]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc8a:	2200      	movs	r2, #0
 801dc8c:	825a      	strh	r2, [r3, #18]
 801dc8e:	e005      	b.n	801dc9c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801dc90:	4b13      	ldr	r3, [pc, #76]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc92:	8a1a      	ldrh	r2, [r3, #16]
 801dc94:	4b12      	ldr	r3, [pc, #72]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dc96:	8a5b      	ldrh	r3, [r3, #18]
 801dc98:	1ad3      	subs	r3, r2, r3
 801dc9a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801dc9c:	8afa      	ldrh	r2, [r7, #22]
 801dc9e:	88fb      	ldrh	r3, [r7, #6]
 801dca0:	429a      	cmp	r2, r3
 801dca2:	d90f      	bls.n	801dcc4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801dca4:	4b0e      	ldr	r3, [pc, #56]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dca6:	8a5a      	ldrh	r2, [r3, #18]
 801dca8:	683b      	ldr	r3, [r7, #0]
 801dcaa:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801dcac:	4b0c      	ldr	r3, [pc, #48]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dcae:	8a5a      	ldrh	r2, [r3, #18]
 801dcb0:	88fb      	ldrh	r3, [r7, #6]
 801dcb2:	4413      	add	r3, r2
 801dcb4:	b29b      	uxth	r3, r3
 801dcb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801dcba:	b29a      	uxth	r2, r3
 801dcbc:	4b08      	ldr	r3, [pc, #32]	@ (801dce0 <TRACE_AllocateBufer+0xf8>)
 801dcbe:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	82bb      	strh	r3, [r7, #20]
 801dcc4:	693b      	ldr	r3, [r7, #16]
 801dcc6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcc8:	68bb      	ldr	r3, [r7, #8]
 801dcca:	f383 8810 	msr	PRIMASK, r3
}
 801dcce:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801dcd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	371c      	adds	r7, #28
 801dcd8:	46bd      	mov	sp, r7
 801dcda:	bc80      	pop	{r7}
 801dcdc:	4770      	bx	lr
 801dcde:	bf00      	nop
 801dce0:	20001ccc 	.word	0x20001ccc

0801dce4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801dce4:	b480      	push	{r7}
 801dce6:	b085      	sub	sp, #20
 801dce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcea:	f3ef 8310 	mrs	r3, PRIMASK
 801dcee:	607b      	str	r3, [r7, #4]
  return(result);
 801dcf0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dcf2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801dcf4:	b672      	cpsid	i
}
 801dcf6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801dcf8:	4b08      	ldr	r3, [pc, #32]	@ (801dd1c <TRACE_Lock+0x38>)
 801dcfa:	8adb      	ldrh	r3, [r3, #22]
 801dcfc:	3301      	adds	r3, #1
 801dcfe:	b29a      	uxth	r2, r3
 801dd00:	4b06      	ldr	r3, [pc, #24]	@ (801dd1c <TRACE_Lock+0x38>)
 801dd02:	82da      	strh	r2, [r3, #22]
 801dd04:	68fb      	ldr	r3, [r7, #12]
 801dd06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd08:	68bb      	ldr	r3, [r7, #8]
 801dd0a:	f383 8810 	msr	PRIMASK, r3
}
 801dd0e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801dd10:	bf00      	nop
 801dd12:	3714      	adds	r7, #20
 801dd14:	46bd      	mov	sp, r7
 801dd16:	bc80      	pop	{r7}
 801dd18:	4770      	bx	lr
 801dd1a:	bf00      	nop
 801dd1c:	20001ccc 	.word	0x20001ccc

0801dd20 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801dd20:	b480      	push	{r7}
 801dd22:	b085      	sub	sp, #20
 801dd24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd26:	f3ef 8310 	mrs	r3, PRIMASK
 801dd2a:	607b      	str	r3, [r7, #4]
  return(result);
 801dd2c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dd2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801dd30:	b672      	cpsid	i
}
 801dd32:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801dd34:	4b08      	ldr	r3, [pc, #32]	@ (801dd58 <TRACE_UnLock+0x38>)
 801dd36:	8adb      	ldrh	r3, [r3, #22]
 801dd38:	3b01      	subs	r3, #1
 801dd3a:	b29a      	uxth	r2, r3
 801dd3c:	4b06      	ldr	r3, [pc, #24]	@ (801dd58 <TRACE_UnLock+0x38>)
 801dd3e:	82da      	strh	r2, [r3, #22]
 801dd40:	68fb      	ldr	r3, [r7, #12]
 801dd42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd44:	68bb      	ldr	r3, [r7, #8]
 801dd46:	f383 8810 	msr	PRIMASK, r3
}
 801dd4a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801dd4c:	bf00      	nop
 801dd4e:	3714      	adds	r7, #20
 801dd50:	46bd      	mov	sp, r7
 801dd52:	bc80      	pop	{r7}
 801dd54:	4770      	bx	lr
 801dd56:	bf00      	nop
 801dd58:	20001ccc 	.word	0x20001ccc

0801dd5c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801dd5c:	b480      	push	{r7}
 801dd5e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801dd60:	4b05      	ldr	r3, [pc, #20]	@ (801dd78 <TRACE_IsLocked+0x1c>)
 801dd62:	8adb      	ldrh	r3, [r3, #22]
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	bf14      	ite	ne
 801dd68:	2301      	movne	r3, #1
 801dd6a:	2300      	moveq	r3, #0
 801dd6c:	b2db      	uxtb	r3, r3
}
 801dd6e:	4618      	mov	r0, r3
 801dd70:	46bd      	mov	sp, r7
 801dd72:	bc80      	pop	{r7}
 801dd74:	4770      	bx	lr
 801dd76:	bf00      	nop
 801dd78:	20001ccc 	.word	0x20001ccc

0801dd7c <memset>:
 801dd7c:	4402      	add	r2, r0
 801dd7e:	4603      	mov	r3, r0
 801dd80:	4293      	cmp	r3, r2
 801dd82:	d100      	bne.n	801dd86 <memset+0xa>
 801dd84:	4770      	bx	lr
 801dd86:	f803 1b01 	strb.w	r1, [r3], #1
 801dd8a:	e7f9      	b.n	801dd80 <memset+0x4>

0801dd8c <__errno>:
 801dd8c:	4b01      	ldr	r3, [pc, #4]	@ (801dd94 <__errno+0x8>)
 801dd8e:	6818      	ldr	r0, [r3, #0]
 801dd90:	4770      	bx	lr
 801dd92:	bf00      	nop
 801dd94:	20000148 	.word	0x20000148

0801dd98 <__libc_init_array>:
 801dd98:	b570      	push	{r4, r5, r6, lr}
 801dd9a:	4d0d      	ldr	r5, [pc, #52]	@ (801ddd0 <__libc_init_array+0x38>)
 801dd9c:	4c0d      	ldr	r4, [pc, #52]	@ (801ddd4 <__libc_init_array+0x3c>)
 801dd9e:	1b64      	subs	r4, r4, r5
 801dda0:	10a4      	asrs	r4, r4, #2
 801dda2:	2600      	movs	r6, #0
 801dda4:	42a6      	cmp	r6, r4
 801dda6:	d109      	bne.n	801ddbc <__libc_init_array+0x24>
 801dda8:	4d0b      	ldr	r5, [pc, #44]	@ (801ddd8 <__libc_init_array+0x40>)
 801ddaa:	4c0c      	ldr	r4, [pc, #48]	@ (801dddc <__libc_init_array+0x44>)
 801ddac:	f001 f994 	bl	801f0d8 <_init>
 801ddb0:	1b64      	subs	r4, r4, r5
 801ddb2:	10a4      	asrs	r4, r4, #2
 801ddb4:	2600      	movs	r6, #0
 801ddb6:	42a6      	cmp	r6, r4
 801ddb8:	d105      	bne.n	801ddc6 <__libc_init_array+0x2e>
 801ddba:	bd70      	pop	{r4, r5, r6, pc}
 801ddbc:	f855 3b04 	ldr.w	r3, [r5], #4
 801ddc0:	4798      	blx	r3
 801ddc2:	3601      	adds	r6, #1
 801ddc4:	e7ee      	b.n	801dda4 <__libc_init_array+0xc>
 801ddc6:	f855 3b04 	ldr.w	r3, [r5], #4
 801ddca:	4798      	blx	r3
 801ddcc:	3601      	adds	r6, #1
 801ddce:	e7f2      	b.n	801ddb6 <__libc_init_array+0x1e>
 801ddd0:	08020188 	.word	0x08020188
 801ddd4:	08020188 	.word	0x08020188
 801ddd8:	08020188 	.word	0x08020188
 801dddc:	0802018c 	.word	0x0802018c

0801dde0 <log>:
 801dde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dde2:	4604      	mov	r4, r0
 801dde4:	460d      	mov	r5, r1
 801dde6:	f000 f923 	bl	801e030 <__ieee754_log>
 801ddea:	4622      	mov	r2, r4
 801ddec:	4606      	mov	r6, r0
 801ddee:	460f      	mov	r7, r1
 801ddf0:	462b      	mov	r3, r5
 801ddf2:	4620      	mov	r0, r4
 801ddf4:	4629      	mov	r1, r5
 801ddf6:	f7e2 fe1d 	bl	8000a34 <__aeabi_dcmpun>
 801ddfa:	b998      	cbnz	r0, 801de24 <log+0x44>
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	2300      	movs	r3, #0
 801de00:	4620      	mov	r0, r4
 801de02:	4629      	mov	r1, r5
 801de04:	f7e2 fe0c 	bl	8000a20 <__aeabi_dcmpgt>
 801de08:	b960      	cbnz	r0, 801de24 <log+0x44>
 801de0a:	2200      	movs	r2, #0
 801de0c:	2300      	movs	r3, #0
 801de0e:	4620      	mov	r0, r4
 801de10:	4629      	mov	r1, r5
 801de12:	f7e2 fddd 	bl	80009d0 <__aeabi_dcmpeq>
 801de16:	b140      	cbz	r0, 801de2a <log+0x4a>
 801de18:	f7ff ffb8 	bl	801dd8c <__errno>
 801de1c:	4f07      	ldr	r7, [pc, #28]	@ (801de3c <log+0x5c>)
 801de1e:	2322      	movs	r3, #34	@ 0x22
 801de20:	6003      	str	r3, [r0, #0]
 801de22:	2600      	movs	r6, #0
 801de24:	4630      	mov	r0, r6
 801de26:	4639      	mov	r1, r7
 801de28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de2a:	f7ff ffaf 	bl	801dd8c <__errno>
 801de2e:	2321      	movs	r3, #33	@ 0x21
 801de30:	6003      	str	r3, [r0, #0]
 801de32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801de36:	4802      	ldr	r0, [pc, #8]	@ (801de40 <log+0x60>)
 801de38:	f000 b872 	b.w	801df20 <nan>
 801de3c:	fff00000 	.word	0xfff00000
 801de40:	08020070 	.word	0x08020070

0801de44 <pow>:
 801de44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de48:	4614      	mov	r4, r2
 801de4a:	461d      	mov	r5, r3
 801de4c:	4680      	mov	r8, r0
 801de4e:	4689      	mov	r9, r1
 801de50:	f000 faa2 	bl	801e398 <__ieee754_pow>
 801de54:	4622      	mov	r2, r4
 801de56:	4606      	mov	r6, r0
 801de58:	460f      	mov	r7, r1
 801de5a:	462b      	mov	r3, r5
 801de5c:	4620      	mov	r0, r4
 801de5e:	4629      	mov	r1, r5
 801de60:	f7e2 fde8 	bl	8000a34 <__aeabi_dcmpun>
 801de64:	bbc8      	cbnz	r0, 801deda <pow+0x96>
 801de66:	2200      	movs	r2, #0
 801de68:	2300      	movs	r3, #0
 801de6a:	4640      	mov	r0, r8
 801de6c:	4649      	mov	r1, r9
 801de6e:	f7e2 fdaf 	bl	80009d0 <__aeabi_dcmpeq>
 801de72:	b1b8      	cbz	r0, 801dea4 <pow+0x60>
 801de74:	2200      	movs	r2, #0
 801de76:	2300      	movs	r3, #0
 801de78:	4620      	mov	r0, r4
 801de7a:	4629      	mov	r1, r5
 801de7c:	f7e2 fda8 	bl	80009d0 <__aeabi_dcmpeq>
 801de80:	2800      	cmp	r0, #0
 801de82:	d141      	bne.n	801df08 <pow+0xc4>
 801de84:	4620      	mov	r0, r4
 801de86:	4629      	mov	r1, r5
 801de88:	f000 f844 	bl	801df14 <finite>
 801de8c:	b328      	cbz	r0, 801deda <pow+0x96>
 801de8e:	2200      	movs	r2, #0
 801de90:	2300      	movs	r3, #0
 801de92:	4620      	mov	r0, r4
 801de94:	4629      	mov	r1, r5
 801de96:	f7e2 fda5 	bl	80009e4 <__aeabi_dcmplt>
 801de9a:	b1f0      	cbz	r0, 801deda <pow+0x96>
 801de9c:	f7ff ff76 	bl	801dd8c <__errno>
 801dea0:	2322      	movs	r3, #34	@ 0x22
 801dea2:	e019      	b.n	801ded8 <pow+0x94>
 801dea4:	4630      	mov	r0, r6
 801dea6:	4639      	mov	r1, r7
 801dea8:	f000 f834 	bl	801df14 <finite>
 801deac:	b9c8      	cbnz	r0, 801dee2 <pow+0x9e>
 801deae:	4640      	mov	r0, r8
 801deb0:	4649      	mov	r1, r9
 801deb2:	f000 f82f 	bl	801df14 <finite>
 801deb6:	b1a0      	cbz	r0, 801dee2 <pow+0x9e>
 801deb8:	4620      	mov	r0, r4
 801deba:	4629      	mov	r1, r5
 801debc:	f000 f82a 	bl	801df14 <finite>
 801dec0:	b178      	cbz	r0, 801dee2 <pow+0x9e>
 801dec2:	4632      	mov	r2, r6
 801dec4:	463b      	mov	r3, r7
 801dec6:	4630      	mov	r0, r6
 801dec8:	4639      	mov	r1, r7
 801deca:	f7e2 fdb3 	bl	8000a34 <__aeabi_dcmpun>
 801dece:	2800      	cmp	r0, #0
 801ded0:	d0e4      	beq.n	801de9c <pow+0x58>
 801ded2:	f7ff ff5b 	bl	801dd8c <__errno>
 801ded6:	2321      	movs	r3, #33	@ 0x21
 801ded8:	6003      	str	r3, [r0, #0]
 801deda:	4630      	mov	r0, r6
 801dedc:	4639      	mov	r1, r7
 801dede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dee2:	2200      	movs	r2, #0
 801dee4:	2300      	movs	r3, #0
 801dee6:	4630      	mov	r0, r6
 801dee8:	4639      	mov	r1, r7
 801deea:	f7e2 fd71 	bl	80009d0 <__aeabi_dcmpeq>
 801deee:	2800      	cmp	r0, #0
 801def0:	d0f3      	beq.n	801deda <pow+0x96>
 801def2:	4640      	mov	r0, r8
 801def4:	4649      	mov	r1, r9
 801def6:	f000 f80d 	bl	801df14 <finite>
 801defa:	2800      	cmp	r0, #0
 801defc:	d0ed      	beq.n	801deda <pow+0x96>
 801defe:	4620      	mov	r0, r4
 801df00:	4629      	mov	r1, r5
 801df02:	f000 f807 	bl	801df14 <finite>
 801df06:	e7c8      	b.n	801de9a <pow+0x56>
 801df08:	4f01      	ldr	r7, [pc, #4]	@ (801df10 <pow+0xcc>)
 801df0a:	2600      	movs	r6, #0
 801df0c:	e7e5      	b.n	801deda <pow+0x96>
 801df0e:	bf00      	nop
 801df10:	3ff00000 	.word	0x3ff00000

0801df14 <finite>:
 801df14:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 801df18:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801df1c:	0fc0      	lsrs	r0, r0, #31
 801df1e:	4770      	bx	lr

0801df20 <nan>:
 801df20:	4901      	ldr	r1, [pc, #4]	@ (801df28 <nan+0x8>)
 801df22:	2000      	movs	r0, #0
 801df24:	4770      	bx	lr
 801df26:	bf00      	nop
 801df28:	7ff80000 	.word	0x7ff80000
 801df2c:	00000000 	.word	0x00000000

0801df30 <floor>:
 801df30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df34:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801df38:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801df3c:	2e13      	cmp	r6, #19
 801df3e:	4602      	mov	r2, r0
 801df40:	460b      	mov	r3, r1
 801df42:	460c      	mov	r4, r1
 801df44:	4605      	mov	r5, r0
 801df46:	4680      	mov	r8, r0
 801df48:	dc35      	bgt.n	801dfb6 <floor+0x86>
 801df4a:	2e00      	cmp	r6, #0
 801df4c:	da17      	bge.n	801df7e <floor+0x4e>
 801df4e:	a334      	add	r3, pc, #208	@ (adr r3, 801e020 <floor+0xf0>)
 801df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df54:	f7e2 f91e 	bl	8000194 <__adddf3>
 801df58:	2200      	movs	r2, #0
 801df5a:	2300      	movs	r3, #0
 801df5c:	f7e2 fd60 	bl	8000a20 <__aeabi_dcmpgt>
 801df60:	b150      	cbz	r0, 801df78 <floor+0x48>
 801df62:	2c00      	cmp	r4, #0
 801df64:	da57      	bge.n	801e016 <floor+0xe6>
 801df66:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801df6a:	432c      	orrs	r4, r5
 801df6c:	2500      	movs	r5, #0
 801df6e:	42ac      	cmp	r4, r5
 801df70:	4c2d      	ldr	r4, [pc, #180]	@ (801e028 <floor+0xf8>)
 801df72:	bf08      	it	eq
 801df74:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801df78:	4623      	mov	r3, r4
 801df7a:	462a      	mov	r2, r5
 801df7c:	e024      	b.n	801dfc8 <floor+0x98>
 801df7e:	4f2b      	ldr	r7, [pc, #172]	@ (801e02c <floor+0xfc>)
 801df80:	4137      	asrs	r7, r6
 801df82:	ea01 0c07 	and.w	ip, r1, r7
 801df86:	ea5c 0c00 	orrs.w	ip, ip, r0
 801df8a:	d01d      	beq.n	801dfc8 <floor+0x98>
 801df8c:	a324      	add	r3, pc, #144	@ (adr r3, 801e020 <floor+0xf0>)
 801df8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df92:	f7e2 f8ff 	bl	8000194 <__adddf3>
 801df96:	2200      	movs	r2, #0
 801df98:	2300      	movs	r3, #0
 801df9a:	f7e2 fd41 	bl	8000a20 <__aeabi_dcmpgt>
 801df9e:	2800      	cmp	r0, #0
 801dfa0:	d0ea      	beq.n	801df78 <floor+0x48>
 801dfa2:	2c00      	cmp	r4, #0
 801dfa4:	bfbe      	ittt	lt
 801dfa6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801dfaa:	4133      	asrlt	r3, r6
 801dfac:	18e4      	addlt	r4, r4, r3
 801dfae:	ea24 0407 	bic.w	r4, r4, r7
 801dfb2:	2500      	movs	r5, #0
 801dfb4:	e7e0      	b.n	801df78 <floor+0x48>
 801dfb6:	2e33      	cmp	r6, #51	@ 0x33
 801dfb8:	dd0a      	ble.n	801dfd0 <floor+0xa0>
 801dfba:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801dfbe:	d103      	bne.n	801dfc8 <floor+0x98>
 801dfc0:	f7e2 f8e8 	bl	8000194 <__adddf3>
 801dfc4:	4602      	mov	r2, r0
 801dfc6:	460b      	mov	r3, r1
 801dfc8:	4610      	mov	r0, r2
 801dfca:	4619      	mov	r1, r3
 801dfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfd0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801dfd4:	f04f 3cff 	mov.w	ip, #4294967295
 801dfd8:	fa2c f707 	lsr.w	r7, ip, r7
 801dfdc:	4207      	tst	r7, r0
 801dfde:	d0f3      	beq.n	801dfc8 <floor+0x98>
 801dfe0:	a30f      	add	r3, pc, #60	@ (adr r3, 801e020 <floor+0xf0>)
 801dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfe6:	f7e2 f8d5 	bl	8000194 <__adddf3>
 801dfea:	2200      	movs	r2, #0
 801dfec:	2300      	movs	r3, #0
 801dfee:	f7e2 fd17 	bl	8000a20 <__aeabi_dcmpgt>
 801dff2:	2800      	cmp	r0, #0
 801dff4:	d0c0      	beq.n	801df78 <floor+0x48>
 801dff6:	2c00      	cmp	r4, #0
 801dff8:	da0a      	bge.n	801e010 <floor+0xe0>
 801dffa:	2e14      	cmp	r6, #20
 801dffc:	d101      	bne.n	801e002 <floor+0xd2>
 801dffe:	3401      	adds	r4, #1
 801e000:	e006      	b.n	801e010 <floor+0xe0>
 801e002:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e006:	2301      	movs	r3, #1
 801e008:	40b3      	lsls	r3, r6
 801e00a:	441d      	add	r5, r3
 801e00c:	4545      	cmp	r5, r8
 801e00e:	d3f6      	bcc.n	801dffe <floor+0xce>
 801e010:	ea25 0507 	bic.w	r5, r5, r7
 801e014:	e7b0      	b.n	801df78 <floor+0x48>
 801e016:	2500      	movs	r5, #0
 801e018:	462c      	mov	r4, r5
 801e01a:	e7ad      	b.n	801df78 <floor+0x48>
 801e01c:	f3af 8000 	nop.w
 801e020:	8800759c 	.word	0x8800759c
 801e024:	7e37e43c 	.word	0x7e37e43c
 801e028:	bff00000 	.word	0xbff00000
 801e02c:	000fffff 	.word	0x000fffff

0801e030 <__ieee754_log>:
 801e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e034:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801e038:	b087      	sub	sp, #28
 801e03a:	4602      	mov	r2, r0
 801e03c:	460b      	mov	r3, r1
 801e03e:	460d      	mov	r5, r1
 801e040:	da24      	bge.n	801e08c <__ieee754_log+0x5c>
 801e042:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 801e046:	4304      	orrs	r4, r0
 801e048:	d108      	bne.n	801e05c <__ieee754_log+0x2c>
 801e04a:	49cd      	ldr	r1, [pc, #820]	@ (801e380 <__ieee754_log+0x350>)
 801e04c:	2200      	movs	r2, #0
 801e04e:	2300      	movs	r3, #0
 801e050:	2000      	movs	r0, #0
 801e052:	f7e2 fb7f 	bl	8000754 <__aeabi_ddiv>
 801e056:	b007      	add	sp, #28
 801e058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e05c:	2900      	cmp	r1, #0
 801e05e:	da04      	bge.n	801e06a <__ieee754_log+0x3a>
 801e060:	f7e2 f896 	bl	8000190 <__aeabi_dsub>
 801e064:	2200      	movs	r2, #0
 801e066:	2300      	movs	r3, #0
 801e068:	e7f3      	b.n	801e052 <__ieee754_log+0x22>
 801e06a:	4bc6      	ldr	r3, [pc, #792]	@ (801e384 <__ieee754_log+0x354>)
 801e06c:	2200      	movs	r2, #0
 801e06e:	f7e2 fa47 	bl	8000500 <__aeabi_dmul>
 801e072:	460b      	mov	r3, r1
 801e074:	460d      	mov	r5, r1
 801e076:	4602      	mov	r2, r0
 801e078:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 801e07c:	48c2      	ldr	r0, [pc, #776]	@ (801e388 <__ieee754_log+0x358>)
 801e07e:	4285      	cmp	r5, r0
 801e080:	dd06      	ble.n	801e090 <__ieee754_log+0x60>
 801e082:	4610      	mov	r0, r2
 801e084:	4619      	mov	r1, r3
 801e086:	f7e2 f885 	bl	8000194 <__adddf3>
 801e08a:	e7e4      	b.n	801e056 <__ieee754_log+0x26>
 801e08c:	2100      	movs	r1, #0
 801e08e:	e7f5      	b.n	801e07c <__ieee754_log+0x4c>
 801e090:	152c      	asrs	r4, r5, #20
 801e092:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801e096:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801e09a:	440c      	add	r4, r1
 801e09c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 801e0a0:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 801e0a4:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 801e0a8:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 801e0ac:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 801e0b0:	ea41 0305 	orr.w	r3, r1, r5
 801e0b4:	4610      	mov	r0, r2
 801e0b6:	4619      	mov	r1, r3
 801e0b8:	2200      	movs	r2, #0
 801e0ba:	4bb4      	ldr	r3, [pc, #720]	@ (801e38c <__ieee754_log+0x35c>)
 801e0bc:	f7e2 f868 	bl	8000190 <__aeabi_dsub>
 801e0c0:	1cab      	adds	r3, r5, #2
 801e0c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e0c6:	2b02      	cmp	r3, #2
 801e0c8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 801e0cc:	4682      	mov	sl, r0
 801e0ce:	468b      	mov	fp, r1
 801e0d0:	f04f 0200 	mov.w	r2, #0
 801e0d4:	dc53      	bgt.n	801e17e <__ieee754_log+0x14e>
 801e0d6:	2300      	movs	r3, #0
 801e0d8:	f7e2 fc7a 	bl	80009d0 <__aeabi_dcmpeq>
 801e0dc:	b1d0      	cbz	r0, 801e114 <__ieee754_log+0xe4>
 801e0de:	2c00      	cmp	r4, #0
 801e0e0:	f000 8120 	beq.w	801e324 <__ieee754_log+0x2f4>
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	f7e2 f9a1 	bl	800042c <__aeabi_i2d>
 801e0ea:	a391      	add	r3, pc, #580	@ (adr r3, 801e330 <__ieee754_log+0x300>)
 801e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0f0:	4606      	mov	r6, r0
 801e0f2:	460f      	mov	r7, r1
 801e0f4:	f7e2 fa04 	bl	8000500 <__aeabi_dmul>
 801e0f8:	a38f      	add	r3, pc, #572	@ (adr r3, 801e338 <__ieee754_log+0x308>)
 801e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0fe:	4604      	mov	r4, r0
 801e100:	460d      	mov	r5, r1
 801e102:	4630      	mov	r0, r6
 801e104:	4639      	mov	r1, r7
 801e106:	f7e2 f9fb 	bl	8000500 <__aeabi_dmul>
 801e10a:	4602      	mov	r2, r0
 801e10c:	460b      	mov	r3, r1
 801e10e:	4620      	mov	r0, r4
 801e110:	4629      	mov	r1, r5
 801e112:	e7b8      	b.n	801e086 <__ieee754_log+0x56>
 801e114:	a38a      	add	r3, pc, #552	@ (adr r3, 801e340 <__ieee754_log+0x310>)
 801e116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e11a:	4650      	mov	r0, sl
 801e11c:	4659      	mov	r1, fp
 801e11e:	f7e2 f9ef 	bl	8000500 <__aeabi_dmul>
 801e122:	4602      	mov	r2, r0
 801e124:	460b      	mov	r3, r1
 801e126:	2000      	movs	r0, #0
 801e128:	4999      	ldr	r1, [pc, #612]	@ (801e390 <__ieee754_log+0x360>)
 801e12a:	f7e2 f831 	bl	8000190 <__aeabi_dsub>
 801e12e:	4652      	mov	r2, sl
 801e130:	4606      	mov	r6, r0
 801e132:	460f      	mov	r7, r1
 801e134:	465b      	mov	r3, fp
 801e136:	4650      	mov	r0, sl
 801e138:	4659      	mov	r1, fp
 801e13a:	f7e2 f9e1 	bl	8000500 <__aeabi_dmul>
 801e13e:	4602      	mov	r2, r0
 801e140:	460b      	mov	r3, r1
 801e142:	4630      	mov	r0, r6
 801e144:	4639      	mov	r1, r7
 801e146:	f7e2 f9db 	bl	8000500 <__aeabi_dmul>
 801e14a:	4606      	mov	r6, r0
 801e14c:	460f      	mov	r7, r1
 801e14e:	b914      	cbnz	r4, 801e156 <__ieee754_log+0x126>
 801e150:	4632      	mov	r2, r6
 801e152:	463b      	mov	r3, r7
 801e154:	e0a0      	b.n	801e298 <__ieee754_log+0x268>
 801e156:	4620      	mov	r0, r4
 801e158:	f7e2 f968 	bl	800042c <__aeabi_i2d>
 801e15c:	a374      	add	r3, pc, #464	@ (adr r3, 801e330 <__ieee754_log+0x300>)
 801e15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e162:	4680      	mov	r8, r0
 801e164:	4689      	mov	r9, r1
 801e166:	f7e2 f9cb 	bl	8000500 <__aeabi_dmul>
 801e16a:	a373      	add	r3, pc, #460	@ (adr r3, 801e338 <__ieee754_log+0x308>)
 801e16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e170:	4604      	mov	r4, r0
 801e172:	460d      	mov	r5, r1
 801e174:	4640      	mov	r0, r8
 801e176:	4649      	mov	r1, r9
 801e178:	f7e2 f9c2 	bl	8000500 <__aeabi_dmul>
 801e17c:	e0a5      	b.n	801e2ca <__ieee754_log+0x29a>
 801e17e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e182:	f7e2 f807 	bl	8000194 <__adddf3>
 801e186:	4602      	mov	r2, r0
 801e188:	460b      	mov	r3, r1
 801e18a:	4650      	mov	r0, sl
 801e18c:	4659      	mov	r1, fp
 801e18e:	f7e2 fae1 	bl	8000754 <__aeabi_ddiv>
 801e192:	e9cd 0100 	strd	r0, r1, [sp]
 801e196:	4620      	mov	r0, r4
 801e198:	f7e2 f948 	bl	800042c <__aeabi_i2d>
 801e19c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e1a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e1a4:	4610      	mov	r0, r2
 801e1a6:	4619      	mov	r1, r3
 801e1a8:	f7e2 f9aa 	bl	8000500 <__aeabi_dmul>
 801e1ac:	4602      	mov	r2, r0
 801e1ae:	460b      	mov	r3, r1
 801e1b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e1b4:	f7e2 f9a4 	bl	8000500 <__aeabi_dmul>
 801e1b8:	a363      	add	r3, pc, #396	@ (adr r3, 801e348 <__ieee754_log+0x318>)
 801e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1be:	4680      	mov	r8, r0
 801e1c0:	4689      	mov	r9, r1
 801e1c2:	f7e2 f99d 	bl	8000500 <__aeabi_dmul>
 801e1c6:	a362      	add	r3, pc, #392	@ (adr r3, 801e350 <__ieee754_log+0x320>)
 801e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1cc:	f7e1 ffe2 	bl	8000194 <__adddf3>
 801e1d0:	4642      	mov	r2, r8
 801e1d2:	464b      	mov	r3, r9
 801e1d4:	f7e2 f994 	bl	8000500 <__aeabi_dmul>
 801e1d8:	a35f      	add	r3, pc, #380	@ (adr r3, 801e358 <__ieee754_log+0x328>)
 801e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1de:	f7e1 ffd9 	bl	8000194 <__adddf3>
 801e1e2:	4642      	mov	r2, r8
 801e1e4:	464b      	mov	r3, r9
 801e1e6:	f7e2 f98b 	bl	8000500 <__aeabi_dmul>
 801e1ea:	a35d      	add	r3, pc, #372	@ (adr r3, 801e360 <__ieee754_log+0x330>)
 801e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1f0:	f7e1 ffd0 	bl	8000194 <__adddf3>
 801e1f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e1f8:	f7e2 f982 	bl	8000500 <__aeabi_dmul>
 801e1fc:	a35a      	add	r3, pc, #360	@ (adr r3, 801e368 <__ieee754_log+0x338>)
 801e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e206:	4640      	mov	r0, r8
 801e208:	4649      	mov	r1, r9
 801e20a:	f7e2 f979 	bl	8000500 <__aeabi_dmul>
 801e20e:	a358      	add	r3, pc, #352	@ (adr r3, 801e370 <__ieee754_log+0x340>)
 801e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e214:	f7e1 ffbe 	bl	8000194 <__adddf3>
 801e218:	4642      	mov	r2, r8
 801e21a:	464b      	mov	r3, r9
 801e21c:	f7e2 f970 	bl	8000500 <__aeabi_dmul>
 801e220:	a355      	add	r3, pc, #340	@ (adr r3, 801e378 <__ieee754_log+0x348>)
 801e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e226:	f7e1 ffb5 	bl	8000194 <__adddf3>
 801e22a:	4642      	mov	r2, r8
 801e22c:	464b      	mov	r3, r9
 801e22e:	f7e2 f967 	bl	8000500 <__aeabi_dmul>
 801e232:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 801e236:	4602      	mov	r2, r0
 801e238:	460b      	mov	r3, r1
 801e23a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801e23e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e242:	f7e1 ffa7 	bl	8000194 <__adddf3>
 801e246:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801e24a:	3551      	adds	r5, #81	@ 0x51
 801e24c:	4335      	orrs	r5, r6
 801e24e:	2d00      	cmp	r5, #0
 801e250:	4680      	mov	r8, r0
 801e252:	4689      	mov	r9, r1
 801e254:	dd48      	ble.n	801e2e8 <__ieee754_log+0x2b8>
 801e256:	4b4e      	ldr	r3, [pc, #312]	@ (801e390 <__ieee754_log+0x360>)
 801e258:	2200      	movs	r2, #0
 801e25a:	4650      	mov	r0, sl
 801e25c:	4659      	mov	r1, fp
 801e25e:	f7e2 f94f 	bl	8000500 <__aeabi_dmul>
 801e262:	4652      	mov	r2, sl
 801e264:	465b      	mov	r3, fp
 801e266:	f7e2 f94b 	bl	8000500 <__aeabi_dmul>
 801e26a:	4602      	mov	r2, r0
 801e26c:	460b      	mov	r3, r1
 801e26e:	4606      	mov	r6, r0
 801e270:	460f      	mov	r7, r1
 801e272:	4640      	mov	r0, r8
 801e274:	4649      	mov	r1, r9
 801e276:	f7e1 ff8d 	bl	8000194 <__adddf3>
 801e27a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e27e:	f7e2 f93f 	bl	8000500 <__aeabi_dmul>
 801e282:	4680      	mov	r8, r0
 801e284:	4689      	mov	r9, r1
 801e286:	b964      	cbnz	r4, 801e2a2 <__ieee754_log+0x272>
 801e288:	4602      	mov	r2, r0
 801e28a:	460b      	mov	r3, r1
 801e28c:	4630      	mov	r0, r6
 801e28e:	4639      	mov	r1, r7
 801e290:	f7e1 ff7e 	bl	8000190 <__aeabi_dsub>
 801e294:	4602      	mov	r2, r0
 801e296:	460b      	mov	r3, r1
 801e298:	4650      	mov	r0, sl
 801e29a:	4659      	mov	r1, fp
 801e29c:	f7e1 ff78 	bl	8000190 <__aeabi_dsub>
 801e2a0:	e6d9      	b.n	801e056 <__ieee754_log+0x26>
 801e2a2:	a323      	add	r3, pc, #140	@ (adr r3, 801e330 <__ieee754_log+0x300>)
 801e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e2ac:	f7e2 f928 	bl	8000500 <__aeabi_dmul>
 801e2b0:	a321      	add	r3, pc, #132	@ (adr r3, 801e338 <__ieee754_log+0x308>)
 801e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2b6:	4604      	mov	r4, r0
 801e2b8:	460d      	mov	r5, r1
 801e2ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e2be:	f7e2 f91f 	bl	8000500 <__aeabi_dmul>
 801e2c2:	4642      	mov	r2, r8
 801e2c4:	464b      	mov	r3, r9
 801e2c6:	f7e1 ff65 	bl	8000194 <__adddf3>
 801e2ca:	4602      	mov	r2, r0
 801e2cc:	460b      	mov	r3, r1
 801e2ce:	4630      	mov	r0, r6
 801e2d0:	4639      	mov	r1, r7
 801e2d2:	f7e1 ff5d 	bl	8000190 <__aeabi_dsub>
 801e2d6:	4652      	mov	r2, sl
 801e2d8:	465b      	mov	r3, fp
 801e2da:	f7e1 ff59 	bl	8000190 <__aeabi_dsub>
 801e2de:	4602      	mov	r2, r0
 801e2e0:	460b      	mov	r3, r1
 801e2e2:	4620      	mov	r0, r4
 801e2e4:	4629      	mov	r1, r5
 801e2e6:	e7d9      	b.n	801e29c <__ieee754_log+0x26c>
 801e2e8:	4602      	mov	r2, r0
 801e2ea:	460b      	mov	r3, r1
 801e2ec:	4650      	mov	r0, sl
 801e2ee:	4659      	mov	r1, fp
 801e2f0:	f7e1 ff4e 	bl	8000190 <__aeabi_dsub>
 801e2f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e2f8:	f7e2 f902 	bl	8000500 <__aeabi_dmul>
 801e2fc:	4606      	mov	r6, r0
 801e2fe:	460f      	mov	r7, r1
 801e300:	2c00      	cmp	r4, #0
 801e302:	f43f af25 	beq.w	801e150 <__ieee754_log+0x120>
 801e306:	a30a      	add	r3, pc, #40	@ (adr r3, 801e330 <__ieee754_log+0x300>)
 801e308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e310:	f7e2 f8f6 	bl	8000500 <__aeabi_dmul>
 801e314:	a308      	add	r3, pc, #32	@ (adr r3, 801e338 <__ieee754_log+0x308>)
 801e316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e31a:	4604      	mov	r4, r0
 801e31c:	460d      	mov	r5, r1
 801e31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e322:	e729      	b.n	801e178 <__ieee754_log+0x148>
 801e324:	2000      	movs	r0, #0
 801e326:	2100      	movs	r1, #0
 801e328:	e695      	b.n	801e056 <__ieee754_log+0x26>
 801e32a:	bf00      	nop
 801e32c:	f3af 8000 	nop.w
 801e330:	fee00000 	.word	0xfee00000
 801e334:	3fe62e42 	.word	0x3fe62e42
 801e338:	35793c76 	.word	0x35793c76
 801e33c:	3dea39ef 	.word	0x3dea39ef
 801e340:	55555555 	.word	0x55555555
 801e344:	3fd55555 	.word	0x3fd55555
 801e348:	df3e5244 	.word	0xdf3e5244
 801e34c:	3fc2f112 	.word	0x3fc2f112
 801e350:	96cb03de 	.word	0x96cb03de
 801e354:	3fc74664 	.word	0x3fc74664
 801e358:	94229359 	.word	0x94229359
 801e35c:	3fd24924 	.word	0x3fd24924
 801e360:	55555593 	.word	0x55555593
 801e364:	3fe55555 	.word	0x3fe55555
 801e368:	d078c69f 	.word	0xd078c69f
 801e36c:	3fc39a09 	.word	0x3fc39a09
 801e370:	1d8e78af 	.word	0x1d8e78af
 801e374:	3fcc71c5 	.word	0x3fcc71c5
 801e378:	9997fa04 	.word	0x9997fa04
 801e37c:	3fd99999 	.word	0x3fd99999
 801e380:	c3500000 	.word	0xc3500000
 801e384:	43500000 	.word	0x43500000
 801e388:	7fefffff 	.word	0x7fefffff
 801e38c:	3ff00000 	.word	0x3ff00000
 801e390:	3fe00000 	.word	0x3fe00000
 801e394:	00000000 	.word	0x00000000

0801e398 <__ieee754_pow>:
 801e398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e39c:	b091      	sub	sp, #68	@ 0x44
 801e39e:	e9cd 2300 	strd	r2, r3, [sp]
 801e3a2:	468b      	mov	fp, r1
 801e3a4:	e9dd 1800 	ldrd	r1, r8, [sp]
 801e3a8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 801e3ac:	4682      	mov	sl, r0
 801e3ae:	ea57 0001 	orrs.w	r0, r7, r1
 801e3b2:	d112      	bne.n	801e3da <__ieee754_pow+0x42>
 801e3b4:	4653      	mov	r3, sl
 801e3b6:	18db      	adds	r3, r3, r3
 801e3b8:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 801e3bc:	4152      	adcs	r2, r2
 801e3be:	4298      	cmp	r0, r3
 801e3c0:	4b92      	ldr	r3, [pc, #584]	@ (801e60c <__ieee754_pow+0x274>)
 801e3c2:	4193      	sbcs	r3, r2
 801e3c4:	f080 84ce 	bcs.w	801ed64 <__ieee754_pow+0x9cc>
 801e3c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3cc:	4650      	mov	r0, sl
 801e3ce:	4659      	mov	r1, fp
 801e3d0:	f7e1 fee0 	bl	8000194 <__adddf3>
 801e3d4:	b011      	add	sp, #68	@ 0x44
 801e3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3da:	4b8d      	ldr	r3, [pc, #564]	@ (801e610 <__ieee754_pow+0x278>)
 801e3dc:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 801e3e0:	429e      	cmp	r6, r3
 801e3e2:	465d      	mov	r5, fp
 801e3e4:	46d1      	mov	r9, sl
 801e3e6:	d807      	bhi.n	801e3f8 <__ieee754_pow+0x60>
 801e3e8:	d102      	bne.n	801e3f0 <__ieee754_pow+0x58>
 801e3ea:	f1ba 0f00 	cmp.w	sl, #0
 801e3ee:	d1eb      	bne.n	801e3c8 <__ieee754_pow+0x30>
 801e3f0:	429f      	cmp	r7, r3
 801e3f2:	d801      	bhi.n	801e3f8 <__ieee754_pow+0x60>
 801e3f4:	d10f      	bne.n	801e416 <__ieee754_pow+0x7e>
 801e3f6:	b171      	cbz	r1, 801e416 <__ieee754_pow+0x7e>
 801e3f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801e3fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801e400:	ea55 0509 	orrs.w	r5, r5, r9
 801e404:	d1e0      	bne.n	801e3c8 <__ieee754_pow+0x30>
 801e406:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e40a:	18db      	adds	r3, r3, r3
 801e40c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801e410:	4152      	adcs	r2, r2
 801e412:	429d      	cmp	r5, r3
 801e414:	e7d4      	b.n	801e3c0 <__ieee754_pow+0x28>
 801e416:	2d00      	cmp	r5, #0
 801e418:	4633      	mov	r3, r6
 801e41a:	da39      	bge.n	801e490 <__ieee754_pow+0xf8>
 801e41c:	4a7d      	ldr	r2, [pc, #500]	@ (801e614 <__ieee754_pow+0x27c>)
 801e41e:	4297      	cmp	r7, r2
 801e420:	d84e      	bhi.n	801e4c0 <__ieee754_pow+0x128>
 801e422:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801e426:	4297      	cmp	r7, r2
 801e428:	f240 84ab 	bls.w	801ed82 <__ieee754_pow+0x9ea>
 801e42c:	153a      	asrs	r2, r7, #20
 801e42e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801e432:	2a14      	cmp	r2, #20
 801e434:	dd0f      	ble.n	801e456 <__ieee754_pow+0xbe>
 801e436:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801e43a:	fa21 f402 	lsr.w	r4, r1, r2
 801e43e:	fa04 f202 	lsl.w	r2, r4, r2
 801e442:	428a      	cmp	r2, r1
 801e444:	f040 849d 	bne.w	801ed82 <__ieee754_pow+0x9ea>
 801e448:	f004 0401 	and.w	r4, r4, #1
 801e44c:	f1c4 0402 	rsb	r4, r4, #2
 801e450:	2900      	cmp	r1, #0
 801e452:	d15a      	bne.n	801e50a <__ieee754_pow+0x172>
 801e454:	e00e      	b.n	801e474 <__ieee754_pow+0xdc>
 801e456:	2900      	cmp	r1, #0
 801e458:	d156      	bne.n	801e508 <__ieee754_pow+0x170>
 801e45a:	f1c2 0214 	rsb	r2, r2, #20
 801e45e:	fa47 f402 	asr.w	r4, r7, r2
 801e462:	fa04 f202 	lsl.w	r2, r4, r2
 801e466:	42ba      	cmp	r2, r7
 801e468:	f040 8488 	bne.w	801ed7c <__ieee754_pow+0x9e4>
 801e46c:	f004 0401 	and.w	r4, r4, #1
 801e470:	f1c4 0402 	rsb	r4, r4, #2
 801e474:	4a68      	ldr	r2, [pc, #416]	@ (801e618 <__ieee754_pow+0x280>)
 801e476:	4297      	cmp	r7, r2
 801e478:	d130      	bne.n	801e4dc <__ieee754_pow+0x144>
 801e47a:	f1b8 0f00 	cmp.w	r8, #0
 801e47e:	f280 8479 	bge.w	801ed74 <__ieee754_pow+0x9dc>
 801e482:	4965      	ldr	r1, [pc, #404]	@ (801e618 <__ieee754_pow+0x280>)
 801e484:	4652      	mov	r2, sl
 801e486:	465b      	mov	r3, fp
 801e488:	2000      	movs	r0, #0
 801e48a:	f7e2 f963 	bl	8000754 <__aeabi_ddiv>
 801e48e:	e7a1      	b.n	801e3d4 <__ieee754_pow+0x3c>
 801e490:	2400      	movs	r4, #0
 801e492:	2900      	cmp	r1, #0
 801e494:	d139      	bne.n	801e50a <__ieee754_pow+0x172>
 801e496:	4a5e      	ldr	r2, [pc, #376]	@ (801e610 <__ieee754_pow+0x278>)
 801e498:	4297      	cmp	r7, r2
 801e49a:	d1eb      	bne.n	801e474 <__ieee754_pow+0xdc>
 801e49c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 801e4a0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801e4a4:	ea53 0309 	orrs.w	r3, r3, r9
 801e4a8:	f000 845c 	beq.w	801ed64 <__ieee754_pow+0x9cc>
 801e4ac:	4b5b      	ldr	r3, [pc, #364]	@ (801e61c <__ieee754_pow+0x284>)
 801e4ae:	429e      	cmp	r6, r3
 801e4b0:	d908      	bls.n	801e4c4 <__ieee754_pow+0x12c>
 801e4b2:	f1b8 0f00 	cmp.w	r8, #0
 801e4b6:	f2c0 8459 	blt.w	801ed6c <__ieee754_pow+0x9d4>
 801e4ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e4be:	e789      	b.n	801e3d4 <__ieee754_pow+0x3c>
 801e4c0:	2402      	movs	r4, #2
 801e4c2:	e7e6      	b.n	801e492 <__ieee754_pow+0xfa>
 801e4c4:	f1b8 0f00 	cmp.w	r8, #0
 801e4c8:	f04f 0000 	mov.w	r0, #0
 801e4cc:	f04f 0100 	mov.w	r1, #0
 801e4d0:	da80      	bge.n	801e3d4 <__ieee754_pow+0x3c>
 801e4d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 801e4d6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e4da:	e77b      	b.n	801e3d4 <__ieee754_pow+0x3c>
 801e4dc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 801e4e0:	d106      	bne.n	801e4f0 <__ieee754_pow+0x158>
 801e4e2:	4652      	mov	r2, sl
 801e4e4:	465b      	mov	r3, fp
 801e4e6:	4650      	mov	r0, sl
 801e4e8:	4659      	mov	r1, fp
 801e4ea:	f7e2 f809 	bl	8000500 <__aeabi_dmul>
 801e4ee:	e771      	b.n	801e3d4 <__ieee754_pow+0x3c>
 801e4f0:	4a4b      	ldr	r2, [pc, #300]	@ (801e620 <__ieee754_pow+0x288>)
 801e4f2:	4590      	cmp	r8, r2
 801e4f4:	d109      	bne.n	801e50a <__ieee754_pow+0x172>
 801e4f6:	2d00      	cmp	r5, #0
 801e4f8:	db07      	blt.n	801e50a <__ieee754_pow+0x172>
 801e4fa:	4650      	mov	r0, sl
 801e4fc:	4659      	mov	r1, fp
 801e4fe:	b011      	add	sp, #68	@ 0x44
 801e500:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e504:	f000 bd12 	b.w	801ef2c <__ieee754_sqrt>
 801e508:	2400      	movs	r4, #0
 801e50a:	4650      	mov	r0, sl
 801e50c:	4659      	mov	r1, fp
 801e50e:	9302      	str	r3, [sp, #8]
 801e510:	f000 fc6a 	bl	801ede8 <fabs>
 801e514:	9b02      	ldr	r3, [sp, #8]
 801e516:	f1b9 0f00 	cmp.w	r9, #0
 801e51a:	d127      	bne.n	801e56c <__ieee754_pow+0x1d4>
 801e51c:	4a3e      	ldr	r2, [pc, #248]	@ (801e618 <__ieee754_pow+0x280>)
 801e51e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 801e522:	4594      	cmp	ip, r2
 801e524:	d000      	beq.n	801e528 <__ieee754_pow+0x190>
 801e526:	bb0e      	cbnz	r6, 801e56c <__ieee754_pow+0x1d4>
 801e528:	f1b8 0f00 	cmp.w	r8, #0
 801e52c:	da05      	bge.n	801e53a <__ieee754_pow+0x1a2>
 801e52e:	4602      	mov	r2, r0
 801e530:	460b      	mov	r3, r1
 801e532:	2000      	movs	r0, #0
 801e534:	4938      	ldr	r1, [pc, #224]	@ (801e618 <__ieee754_pow+0x280>)
 801e536:	f7e2 f90d 	bl	8000754 <__aeabi_ddiv>
 801e53a:	2d00      	cmp	r5, #0
 801e53c:	f6bf af4a 	bge.w	801e3d4 <__ieee754_pow+0x3c>
 801e540:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 801e544:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 801e548:	4326      	orrs	r6, r4
 801e54a:	d108      	bne.n	801e55e <__ieee754_pow+0x1c6>
 801e54c:	4602      	mov	r2, r0
 801e54e:	460b      	mov	r3, r1
 801e550:	4610      	mov	r0, r2
 801e552:	4619      	mov	r1, r3
 801e554:	f7e1 fe1c 	bl	8000190 <__aeabi_dsub>
 801e558:	4602      	mov	r2, r0
 801e55a:	460b      	mov	r3, r1
 801e55c:	e795      	b.n	801e48a <__ieee754_pow+0xf2>
 801e55e:	2c01      	cmp	r4, #1
 801e560:	f47f af38 	bne.w	801e3d4 <__ieee754_pow+0x3c>
 801e564:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e568:	4619      	mov	r1, r3
 801e56a:	e733      	b.n	801e3d4 <__ieee754_pow+0x3c>
 801e56c:	0fea      	lsrs	r2, r5, #31
 801e56e:	3a01      	subs	r2, #1
 801e570:	ea52 0c04 	orrs.w	ip, r2, r4
 801e574:	d102      	bne.n	801e57c <__ieee754_pow+0x1e4>
 801e576:	4652      	mov	r2, sl
 801e578:	465b      	mov	r3, fp
 801e57a:	e7e9      	b.n	801e550 <__ieee754_pow+0x1b8>
 801e57c:	3c01      	subs	r4, #1
 801e57e:	4314      	orrs	r4, r2
 801e580:	bf14      	ite	ne
 801e582:	f8df a094 	ldrne.w	sl, [pc, #148]	@ 801e618 <__ieee754_pow+0x280>
 801e586:	f8df a09c 	ldreq.w	sl, [pc, #156]	@ 801e624 <__ieee754_pow+0x28c>
 801e58a:	f04f 0900 	mov.w	r9, #0
 801e58e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 801e592:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 801e596:	f240 8107 	bls.w	801e7a8 <__ieee754_pow+0x410>
 801e59a:	4b23      	ldr	r3, [pc, #140]	@ (801e628 <__ieee754_pow+0x290>)
 801e59c:	429f      	cmp	r7, r3
 801e59e:	4b1f      	ldr	r3, [pc, #124]	@ (801e61c <__ieee754_pow+0x284>)
 801e5a0:	d913      	bls.n	801e5ca <__ieee754_pow+0x232>
 801e5a2:	429e      	cmp	r6, r3
 801e5a4:	d808      	bhi.n	801e5b8 <__ieee754_pow+0x220>
 801e5a6:	f1b8 0f00 	cmp.w	r8, #0
 801e5aa:	da08      	bge.n	801e5be <__ieee754_pow+0x226>
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	b011      	add	sp, #68	@ 0x44
 801e5b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b4:	f000 bcb4 	b.w	801ef20 <__math_oflow>
 801e5b8:	f1b8 0f00 	cmp.w	r8, #0
 801e5bc:	dcf6      	bgt.n	801e5ac <__ieee754_pow+0x214>
 801e5be:	2000      	movs	r0, #0
 801e5c0:	b011      	add	sp, #68	@ 0x44
 801e5c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5c6:	f000 bca6 	b.w	801ef16 <__math_uflow>
 801e5ca:	429e      	cmp	r6, r3
 801e5cc:	d20c      	bcs.n	801e5e8 <__ieee754_pow+0x250>
 801e5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5d2:	2200      	movs	r2, #0
 801e5d4:	2300      	movs	r3, #0
 801e5d6:	f7e2 fa05 	bl	80009e4 <__aeabi_dcmplt>
 801e5da:	3800      	subs	r0, #0
 801e5dc:	bf18      	it	ne
 801e5de:	2001      	movne	r0, #1
 801e5e0:	f1b8 0f00 	cmp.w	r8, #0
 801e5e4:	daec      	bge.n	801e5c0 <__ieee754_pow+0x228>
 801e5e6:	e7e2      	b.n	801e5ae <__ieee754_pow+0x216>
 801e5e8:	4b0b      	ldr	r3, [pc, #44]	@ (801e618 <__ieee754_pow+0x280>)
 801e5ea:	429e      	cmp	r6, r3
 801e5ec:	f04f 0200 	mov.w	r2, #0
 801e5f0:	d91c      	bls.n	801e62c <__ieee754_pow+0x294>
 801e5f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e5f6:	2300      	movs	r3, #0
 801e5f8:	f7e2 f9f4 	bl	80009e4 <__aeabi_dcmplt>
 801e5fc:	3800      	subs	r0, #0
 801e5fe:	bf18      	it	ne
 801e600:	2001      	movne	r0, #1
 801e602:	f1b8 0f00 	cmp.w	r8, #0
 801e606:	dcd2      	bgt.n	801e5ae <__ieee754_pow+0x216>
 801e608:	e7da      	b.n	801e5c0 <__ieee754_pow+0x228>
 801e60a:	bf00      	nop
 801e60c:	fff00000 	.word	0xfff00000
 801e610:	7ff00000 	.word	0x7ff00000
 801e614:	433fffff 	.word	0x433fffff
 801e618:	3ff00000 	.word	0x3ff00000
 801e61c:	3fefffff 	.word	0x3fefffff
 801e620:	3fe00000 	.word	0x3fe00000
 801e624:	bff00000 	.word	0xbff00000
 801e628:	43f00000 	.word	0x43f00000
 801e62c:	4b5a      	ldr	r3, [pc, #360]	@ (801e798 <__ieee754_pow+0x400>)
 801e62e:	f7e1 fdaf 	bl	8000190 <__aeabi_dsub>
 801e632:	a351      	add	r3, pc, #324	@ (adr r3, 801e778 <__ieee754_pow+0x3e0>)
 801e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e638:	4604      	mov	r4, r0
 801e63a:	460d      	mov	r5, r1
 801e63c:	f7e1 ff60 	bl	8000500 <__aeabi_dmul>
 801e640:	a34f      	add	r3, pc, #316	@ (adr r3, 801e780 <__ieee754_pow+0x3e8>)
 801e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e646:	4606      	mov	r6, r0
 801e648:	460f      	mov	r7, r1
 801e64a:	4620      	mov	r0, r4
 801e64c:	4629      	mov	r1, r5
 801e64e:	f7e1 ff57 	bl	8000500 <__aeabi_dmul>
 801e652:	4b52      	ldr	r3, [pc, #328]	@ (801e79c <__ieee754_pow+0x404>)
 801e654:	4682      	mov	sl, r0
 801e656:	468b      	mov	fp, r1
 801e658:	2200      	movs	r2, #0
 801e65a:	4620      	mov	r0, r4
 801e65c:	4629      	mov	r1, r5
 801e65e:	f7e1 ff4f 	bl	8000500 <__aeabi_dmul>
 801e662:	4602      	mov	r2, r0
 801e664:	460b      	mov	r3, r1
 801e666:	a148      	add	r1, pc, #288	@ (adr r1, 801e788 <__ieee754_pow+0x3f0>)
 801e668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e66c:	f7e1 fd90 	bl	8000190 <__aeabi_dsub>
 801e670:	4622      	mov	r2, r4
 801e672:	462b      	mov	r3, r5
 801e674:	f7e1 ff44 	bl	8000500 <__aeabi_dmul>
 801e678:	4602      	mov	r2, r0
 801e67a:	460b      	mov	r3, r1
 801e67c:	2000      	movs	r0, #0
 801e67e:	4948      	ldr	r1, [pc, #288]	@ (801e7a0 <__ieee754_pow+0x408>)
 801e680:	f7e1 fd86 	bl	8000190 <__aeabi_dsub>
 801e684:	4622      	mov	r2, r4
 801e686:	4680      	mov	r8, r0
 801e688:	4689      	mov	r9, r1
 801e68a:	462b      	mov	r3, r5
 801e68c:	4620      	mov	r0, r4
 801e68e:	4629      	mov	r1, r5
 801e690:	f7e1 ff36 	bl	8000500 <__aeabi_dmul>
 801e694:	4602      	mov	r2, r0
 801e696:	460b      	mov	r3, r1
 801e698:	4640      	mov	r0, r8
 801e69a:	4649      	mov	r1, r9
 801e69c:	f7e1 ff30 	bl	8000500 <__aeabi_dmul>
 801e6a0:	a33b      	add	r3, pc, #236	@ (adr r3, 801e790 <__ieee754_pow+0x3f8>)
 801e6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a6:	f7e1 ff2b 	bl	8000500 <__aeabi_dmul>
 801e6aa:	4602      	mov	r2, r0
 801e6ac:	460b      	mov	r3, r1
 801e6ae:	4650      	mov	r0, sl
 801e6b0:	4659      	mov	r1, fp
 801e6b2:	f7e1 fd6d 	bl	8000190 <__aeabi_dsub>
 801e6b6:	4602      	mov	r2, r0
 801e6b8:	460b      	mov	r3, r1
 801e6ba:	4680      	mov	r8, r0
 801e6bc:	4689      	mov	r9, r1
 801e6be:	4630      	mov	r0, r6
 801e6c0:	4639      	mov	r1, r7
 801e6c2:	f7e1 fd67 	bl	8000194 <__adddf3>
 801e6c6:	2400      	movs	r4, #0
 801e6c8:	4632      	mov	r2, r6
 801e6ca:	463b      	mov	r3, r7
 801e6cc:	4620      	mov	r0, r4
 801e6ce:	460d      	mov	r5, r1
 801e6d0:	f7e1 fd5e 	bl	8000190 <__aeabi_dsub>
 801e6d4:	4602      	mov	r2, r0
 801e6d6:	460b      	mov	r3, r1
 801e6d8:	4640      	mov	r0, r8
 801e6da:	4649      	mov	r1, r9
 801e6dc:	f7e1 fd58 	bl	8000190 <__aeabi_dsub>
 801e6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e6e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e6e8:	2300      	movs	r3, #0
 801e6ea:	9304      	str	r3, [sp, #16]
 801e6ec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801e6f0:	4606      	mov	r6, r0
 801e6f2:	460f      	mov	r7, r1
 801e6f4:	4652      	mov	r2, sl
 801e6f6:	465b      	mov	r3, fp
 801e6f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e6fc:	f7e1 fd48 	bl	8000190 <__aeabi_dsub>
 801e700:	4622      	mov	r2, r4
 801e702:	462b      	mov	r3, r5
 801e704:	f7e1 fefc 	bl	8000500 <__aeabi_dmul>
 801e708:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e70c:	4680      	mov	r8, r0
 801e70e:	4689      	mov	r9, r1
 801e710:	4630      	mov	r0, r6
 801e712:	4639      	mov	r1, r7
 801e714:	f7e1 fef4 	bl	8000500 <__aeabi_dmul>
 801e718:	4602      	mov	r2, r0
 801e71a:	460b      	mov	r3, r1
 801e71c:	4640      	mov	r0, r8
 801e71e:	4649      	mov	r1, r9
 801e720:	f7e1 fd38 	bl	8000194 <__adddf3>
 801e724:	4652      	mov	r2, sl
 801e726:	465b      	mov	r3, fp
 801e728:	4606      	mov	r6, r0
 801e72a:	460f      	mov	r7, r1
 801e72c:	4620      	mov	r0, r4
 801e72e:	4629      	mov	r1, r5
 801e730:	f7e1 fee6 	bl	8000500 <__aeabi_dmul>
 801e734:	460b      	mov	r3, r1
 801e736:	4602      	mov	r2, r0
 801e738:	4680      	mov	r8, r0
 801e73a:	4689      	mov	r9, r1
 801e73c:	4630      	mov	r0, r6
 801e73e:	4639      	mov	r1, r7
 801e740:	f7e1 fd28 	bl	8000194 <__adddf3>
 801e744:	4b17      	ldr	r3, [pc, #92]	@ (801e7a4 <__ieee754_pow+0x40c>)
 801e746:	4299      	cmp	r1, r3
 801e748:	4604      	mov	r4, r0
 801e74a:	460d      	mov	r5, r1
 801e74c:	468a      	mov	sl, r1
 801e74e:	468b      	mov	fp, r1
 801e750:	f340 82de 	ble.w	801ed10 <__ieee754_pow+0x978>
 801e754:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801e758:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801e75c:	4303      	orrs	r3, r0
 801e75e:	f000 81dd 	beq.w	801eb1c <__ieee754_pow+0x784>
 801e762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e766:	2200      	movs	r2, #0
 801e768:	2300      	movs	r3, #0
 801e76a:	f7e2 f93b 	bl	80009e4 <__aeabi_dcmplt>
 801e76e:	3800      	subs	r0, #0
 801e770:	bf18      	it	ne
 801e772:	2001      	movne	r0, #1
 801e774:	e71b      	b.n	801e5ae <__ieee754_pow+0x216>
 801e776:	bf00      	nop
 801e778:	60000000 	.word	0x60000000
 801e77c:	3ff71547 	.word	0x3ff71547
 801e780:	f85ddf44 	.word	0xf85ddf44
 801e784:	3e54ae0b 	.word	0x3e54ae0b
 801e788:	55555555 	.word	0x55555555
 801e78c:	3fd55555 	.word	0x3fd55555
 801e790:	652b82fe 	.word	0x652b82fe
 801e794:	3ff71547 	.word	0x3ff71547
 801e798:	3ff00000 	.word	0x3ff00000
 801e79c:	3fd00000 	.word	0x3fd00000
 801e7a0:	3fe00000 	.word	0x3fe00000
 801e7a4:	408fffff 	.word	0x408fffff
 801e7a8:	4ad3      	ldr	r2, [pc, #844]	@ (801eaf8 <__ieee754_pow+0x760>)
 801e7aa:	402a      	ands	r2, r5
 801e7ac:	2a00      	cmp	r2, #0
 801e7ae:	f040 817a 	bne.w	801eaa6 <__ieee754_pow+0x70e>
 801e7b2:	4bd2      	ldr	r3, [pc, #840]	@ (801eafc <__ieee754_pow+0x764>)
 801e7b4:	2200      	movs	r2, #0
 801e7b6:	f7e1 fea3 	bl	8000500 <__aeabi_dmul>
 801e7ba:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 801e7be:	460b      	mov	r3, r1
 801e7c0:	151a      	asrs	r2, r3, #20
 801e7c2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801e7c6:	4422      	add	r2, r4
 801e7c8:	920a      	str	r2, [sp, #40]	@ 0x28
 801e7ca:	4acd      	ldr	r2, [pc, #820]	@ (801eb00 <__ieee754_pow+0x768>)
 801e7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e7d0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801e7d4:	4293      	cmp	r3, r2
 801e7d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801e7da:	dd08      	ble.n	801e7ee <__ieee754_pow+0x456>
 801e7dc:	4ac9      	ldr	r2, [pc, #804]	@ (801eb04 <__ieee754_pow+0x76c>)
 801e7de:	4293      	cmp	r3, r2
 801e7e0:	f340 8163 	ble.w	801eaaa <__ieee754_pow+0x712>
 801e7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7e6:	3301      	adds	r3, #1
 801e7e8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7ea:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801e7ee:	2600      	movs	r6, #0
 801e7f0:	00f3      	lsls	r3, r6, #3
 801e7f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e7f4:	4bc4      	ldr	r3, [pc, #784]	@ (801eb08 <__ieee754_pow+0x770>)
 801e7f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e7fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e7fe:	4629      	mov	r1, r5
 801e800:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801e804:	461a      	mov	r2, r3
 801e806:	4623      	mov	r3, r4
 801e808:	4682      	mov	sl, r0
 801e80a:	f7e1 fcc1 	bl	8000190 <__aeabi_dsub>
 801e80e:	4652      	mov	r2, sl
 801e810:	462b      	mov	r3, r5
 801e812:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801e816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e81a:	f7e1 fcbb 	bl	8000194 <__adddf3>
 801e81e:	4602      	mov	r2, r0
 801e820:	460b      	mov	r3, r1
 801e822:	2000      	movs	r0, #0
 801e824:	49b9      	ldr	r1, [pc, #740]	@ (801eb0c <__ieee754_pow+0x774>)
 801e826:	f7e1 ff95 	bl	8000754 <__aeabi_ddiv>
 801e82a:	4602      	mov	r2, r0
 801e82c:	460b      	mov	r3, r1
 801e82e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801e832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e836:	f7e1 fe63 	bl	8000500 <__aeabi_dmul>
 801e83a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e83e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801e842:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801e846:	2300      	movs	r3, #0
 801e848:	9304      	str	r3, [sp, #16]
 801e84a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e84e:	46ab      	mov	fp, r5
 801e850:	106d      	asrs	r5, r5, #1
 801e852:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801e856:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801e85a:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801e85e:	2200      	movs	r2, #0
 801e860:	4640      	mov	r0, r8
 801e862:	4649      	mov	r1, r9
 801e864:	4614      	mov	r4, r2
 801e866:	461d      	mov	r5, r3
 801e868:	f7e1 fe4a 	bl	8000500 <__aeabi_dmul>
 801e86c:	4602      	mov	r2, r0
 801e86e:	460b      	mov	r3, r1
 801e870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e874:	f7e1 fc8c 	bl	8000190 <__aeabi_dsub>
 801e878:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e87c:	4606      	mov	r6, r0
 801e87e:	460f      	mov	r7, r1
 801e880:	4620      	mov	r0, r4
 801e882:	4629      	mov	r1, r5
 801e884:	f7e1 fc84 	bl	8000190 <__aeabi_dsub>
 801e888:	4602      	mov	r2, r0
 801e88a:	460b      	mov	r3, r1
 801e88c:	4650      	mov	r0, sl
 801e88e:	4659      	mov	r1, fp
 801e890:	f7e1 fc7e 	bl	8000190 <__aeabi_dsub>
 801e894:	4642      	mov	r2, r8
 801e896:	464b      	mov	r3, r9
 801e898:	f7e1 fe32 	bl	8000500 <__aeabi_dmul>
 801e89c:	4602      	mov	r2, r0
 801e89e:	460b      	mov	r3, r1
 801e8a0:	4630      	mov	r0, r6
 801e8a2:	4639      	mov	r1, r7
 801e8a4:	f7e1 fc74 	bl	8000190 <__aeabi_dsub>
 801e8a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801e8ac:	f7e1 fe28 	bl	8000500 <__aeabi_dmul>
 801e8b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e8b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801e8b8:	4610      	mov	r0, r2
 801e8ba:	4619      	mov	r1, r3
 801e8bc:	f7e1 fe20 	bl	8000500 <__aeabi_dmul>
 801e8c0:	a37b      	add	r3, pc, #492	@ (adr r3, 801eab0 <__ieee754_pow+0x718>)
 801e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8c6:	4604      	mov	r4, r0
 801e8c8:	460d      	mov	r5, r1
 801e8ca:	f7e1 fe19 	bl	8000500 <__aeabi_dmul>
 801e8ce:	a37a      	add	r3, pc, #488	@ (adr r3, 801eab8 <__ieee754_pow+0x720>)
 801e8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8d4:	f7e1 fc5e 	bl	8000194 <__adddf3>
 801e8d8:	4622      	mov	r2, r4
 801e8da:	462b      	mov	r3, r5
 801e8dc:	f7e1 fe10 	bl	8000500 <__aeabi_dmul>
 801e8e0:	a377      	add	r3, pc, #476	@ (adr r3, 801eac0 <__ieee754_pow+0x728>)
 801e8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8e6:	f7e1 fc55 	bl	8000194 <__adddf3>
 801e8ea:	4622      	mov	r2, r4
 801e8ec:	462b      	mov	r3, r5
 801e8ee:	f7e1 fe07 	bl	8000500 <__aeabi_dmul>
 801e8f2:	a375      	add	r3, pc, #468	@ (adr r3, 801eac8 <__ieee754_pow+0x730>)
 801e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8f8:	f7e1 fc4c 	bl	8000194 <__adddf3>
 801e8fc:	4622      	mov	r2, r4
 801e8fe:	462b      	mov	r3, r5
 801e900:	f7e1 fdfe 	bl	8000500 <__aeabi_dmul>
 801e904:	a372      	add	r3, pc, #456	@ (adr r3, 801ead0 <__ieee754_pow+0x738>)
 801e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e90a:	f7e1 fc43 	bl	8000194 <__adddf3>
 801e90e:	4622      	mov	r2, r4
 801e910:	462b      	mov	r3, r5
 801e912:	f7e1 fdf5 	bl	8000500 <__aeabi_dmul>
 801e916:	a370      	add	r3, pc, #448	@ (adr r3, 801ead8 <__ieee754_pow+0x740>)
 801e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e91c:	f7e1 fc3a 	bl	8000194 <__adddf3>
 801e920:	4622      	mov	r2, r4
 801e922:	4606      	mov	r6, r0
 801e924:	460f      	mov	r7, r1
 801e926:	462b      	mov	r3, r5
 801e928:	4620      	mov	r0, r4
 801e92a:	4629      	mov	r1, r5
 801e92c:	f7e1 fde8 	bl	8000500 <__aeabi_dmul>
 801e930:	4602      	mov	r2, r0
 801e932:	460b      	mov	r3, r1
 801e934:	4630      	mov	r0, r6
 801e936:	4639      	mov	r1, r7
 801e938:	f7e1 fde2 	bl	8000500 <__aeabi_dmul>
 801e93c:	4642      	mov	r2, r8
 801e93e:	4604      	mov	r4, r0
 801e940:	460d      	mov	r5, r1
 801e942:	464b      	mov	r3, r9
 801e944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e948:	f7e1 fc24 	bl	8000194 <__adddf3>
 801e94c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e950:	f7e1 fdd6 	bl	8000500 <__aeabi_dmul>
 801e954:	4622      	mov	r2, r4
 801e956:	462b      	mov	r3, r5
 801e958:	f7e1 fc1c 	bl	8000194 <__adddf3>
 801e95c:	4642      	mov	r2, r8
 801e95e:	4682      	mov	sl, r0
 801e960:	468b      	mov	fp, r1
 801e962:	464b      	mov	r3, r9
 801e964:	4640      	mov	r0, r8
 801e966:	4649      	mov	r1, r9
 801e968:	f7e1 fdca 	bl	8000500 <__aeabi_dmul>
 801e96c:	4b68      	ldr	r3, [pc, #416]	@ (801eb10 <__ieee754_pow+0x778>)
 801e96e:	2200      	movs	r2, #0
 801e970:	4606      	mov	r6, r0
 801e972:	460f      	mov	r7, r1
 801e974:	f7e1 fc0e 	bl	8000194 <__adddf3>
 801e978:	4652      	mov	r2, sl
 801e97a:	465b      	mov	r3, fp
 801e97c:	f7e1 fc0a 	bl	8000194 <__adddf3>
 801e980:	2400      	movs	r4, #0
 801e982:	460d      	mov	r5, r1
 801e984:	4622      	mov	r2, r4
 801e986:	460b      	mov	r3, r1
 801e988:	4640      	mov	r0, r8
 801e98a:	4649      	mov	r1, r9
 801e98c:	f7e1 fdb8 	bl	8000500 <__aeabi_dmul>
 801e990:	4b5f      	ldr	r3, [pc, #380]	@ (801eb10 <__ieee754_pow+0x778>)
 801e992:	4680      	mov	r8, r0
 801e994:	4689      	mov	r9, r1
 801e996:	2200      	movs	r2, #0
 801e998:	4620      	mov	r0, r4
 801e99a:	4629      	mov	r1, r5
 801e99c:	f7e1 fbf8 	bl	8000190 <__aeabi_dsub>
 801e9a0:	4632      	mov	r2, r6
 801e9a2:	463b      	mov	r3, r7
 801e9a4:	f7e1 fbf4 	bl	8000190 <__aeabi_dsub>
 801e9a8:	4602      	mov	r2, r0
 801e9aa:	460b      	mov	r3, r1
 801e9ac:	4650      	mov	r0, sl
 801e9ae:	4659      	mov	r1, fp
 801e9b0:	f7e1 fbee 	bl	8000190 <__aeabi_dsub>
 801e9b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e9b8:	f7e1 fda2 	bl	8000500 <__aeabi_dmul>
 801e9bc:	4622      	mov	r2, r4
 801e9be:	4606      	mov	r6, r0
 801e9c0:	460f      	mov	r7, r1
 801e9c2:	462b      	mov	r3, r5
 801e9c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e9c8:	f7e1 fd9a 	bl	8000500 <__aeabi_dmul>
 801e9cc:	4602      	mov	r2, r0
 801e9ce:	460b      	mov	r3, r1
 801e9d0:	4630      	mov	r0, r6
 801e9d2:	4639      	mov	r1, r7
 801e9d4:	f7e1 fbde 	bl	8000194 <__adddf3>
 801e9d8:	4606      	mov	r6, r0
 801e9da:	460f      	mov	r7, r1
 801e9dc:	4602      	mov	r2, r0
 801e9de:	460b      	mov	r3, r1
 801e9e0:	4640      	mov	r0, r8
 801e9e2:	4649      	mov	r1, r9
 801e9e4:	f7e1 fbd6 	bl	8000194 <__adddf3>
 801e9e8:	2400      	movs	r4, #0
 801e9ea:	a33d      	add	r3, pc, #244	@ (adr r3, 801eae0 <__ieee754_pow+0x748>)
 801e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	460d      	mov	r5, r1
 801e9f4:	f7e1 fd84 	bl	8000500 <__aeabi_dmul>
 801e9f8:	4642      	mov	r2, r8
 801e9fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e9fe:	464b      	mov	r3, r9
 801ea00:	4620      	mov	r0, r4
 801ea02:	4629      	mov	r1, r5
 801ea04:	f7e1 fbc4 	bl	8000190 <__aeabi_dsub>
 801ea08:	4602      	mov	r2, r0
 801ea0a:	460b      	mov	r3, r1
 801ea0c:	4630      	mov	r0, r6
 801ea0e:	4639      	mov	r1, r7
 801ea10:	f7e1 fbbe 	bl	8000190 <__aeabi_dsub>
 801ea14:	a334      	add	r3, pc, #208	@ (adr r3, 801eae8 <__ieee754_pow+0x750>)
 801ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea1a:	f7e1 fd71 	bl	8000500 <__aeabi_dmul>
 801ea1e:	a334      	add	r3, pc, #208	@ (adr r3, 801eaf0 <__ieee754_pow+0x758>)
 801ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea24:	4606      	mov	r6, r0
 801ea26:	460f      	mov	r7, r1
 801ea28:	4620      	mov	r0, r4
 801ea2a:	4629      	mov	r1, r5
 801ea2c:	f7e1 fd68 	bl	8000500 <__aeabi_dmul>
 801ea30:	4602      	mov	r2, r0
 801ea32:	460b      	mov	r3, r1
 801ea34:	4630      	mov	r0, r6
 801ea36:	4639      	mov	r1, r7
 801ea38:	f7e1 fbac 	bl	8000194 <__adddf3>
 801ea3c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ea3e:	4b35      	ldr	r3, [pc, #212]	@ (801eb14 <__ieee754_pow+0x77c>)
 801ea40:	4413      	add	r3, r2
 801ea42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea46:	f7e1 fba5 	bl	8000194 <__adddf3>
 801ea4a:	4682      	mov	sl, r0
 801ea4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ea4e:	468b      	mov	fp, r1
 801ea50:	f7e1 fcec 	bl	800042c <__aeabi_i2d>
 801ea54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ea56:	4b30      	ldr	r3, [pc, #192]	@ (801eb18 <__ieee754_pow+0x780>)
 801ea58:	4413      	add	r3, r2
 801ea5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ea5e:	4606      	mov	r6, r0
 801ea60:	460f      	mov	r7, r1
 801ea62:	4652      	mov	r2, sl
 801ea64:	465b      	mov	r3, fp
 801ea66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ea6a:	f7e1 fb93 	bl	8000194 <__adddf3>
 801ea6e:	4642      	mov	r2, r8
 801ea70:	464b      	mov	r3, r9
 801ea72:	f7e1 fb8f 	bl	8000194 <__adddf3>
 801ea76:	4632      	mov	r2, r6
 801ea78:	463b      	mov	r3, r7
 801ea7a:	f7e1 fb8b 	bl	8000194 <__adddf3>
 801ea7e:	2400      	movs	r4, #0
 801ea80:	4632      	mov	r2, r6
 801ea82:	463b      	mov	r3, r7
 801ea84:	4620      	mov	r0, r4
 801ea86:	460d      	mov	r5, r1
 801ea88:	f7e1 fb82 	bl	8000190 <__aeabi_dsub>
 801ea8c:	4642      	mov	r2, r8
 801ea8e:	464b      	mov	r3, r9
 801ea90:	f7e1 fb7e 	bl	8000190 <__aeabi_dsub>
 801ea94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ea98:	f7e1 fb7a 	bl	8000190 <__aeabi_dsub>
 801ea9c:	4602      	mov	r2, r0
 801ea9e:	460b      	mov	r3, r1
 801eaa0:	4650      	mov	r0, sl
 801eaa2:	4659      	mov	r1, fp
 801eaa4:	e61a      	b.n	801e6dc <__ieee754_pow+0x344>
 801eaa6:	2400      	movs	r4, #0
 801eaa8:	e68a      	b.n	801e7c0 <__ieee754_pow+0x428>
 801eaaa:	2601      	movs	r6, #1
 801eaac:	e6a0      	b.n	801e7f0 <__ieee754_pow+0x458>
 801eaae:	bf00      	nop
 801eab0:	4a454eef 	.word	0x4a454eef
 801eab4:	3fca7e28 	.word	0x3fca7e28
 801eab8:	93c9db65 	.word	0x93c9db65
 801eabc:	3fcd864a 	.word	0x3fcd864a
 801eac0:	a91d4101 	.word	0xa91d4101
 801eac4:	3fd17460 	.word	0x3fd17460
 801eac8:	518f264d 	.word	0x518f264d
 801eacc:	3fd55555 	.word	0x3fd55555
 801ead0:	db6fabff 	.word	0xdb6fabff
 801ead4:	3fdb6db6 	.word	0x3fdb6db6
 801ead8:	33333303 	.word	0x33333303
 801eadc:	3fe33333 	.word	0x3fe33333
 801eae0:	e0000000 	.word	0xe0000000
 801eae4:	3feec709 	.word	0x3feec709
 801eae8:	dc3a03fd 	.word	0xdc3a03fd
 801eaec:	3feec709 	.word	0x3feec709
 801eaf0:	145b01f5 	.word	0x145b01f5
 801eaf4:	be3e2fe0 	.word	0xbe3e2fe0
 801eaf8:	7ff00000 	.word	0x7ff00000
 801eafc:	43400000 	.word	0x43400000
 801eb00:	0003988e 	.word	0x0003988e
 801eb04:	000bb679 	.word	0x000bb679
 801eb08:	08020098 	.word	0x08020098
 801eb0c:	3ff00000 	.word	0x3ff00000
 801eb10:	40080000 	.word	0x40080000
 801eb14:	08020078 	.word	0x08020078
 801eb18:	08020088 	.word	0x08020088
 801eb1c:	a39a      	add	r3, pc, #616	@ (adr r3, 801ed88 <__ieee754_pow+0x9f0>)
 801eb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb22:	4630      	mov	r0, r6
 801eb24:	4639      	mov	r1, r7
 801eb26:	f7e1 fb35 	bl	8000194 <__adddf3>
 801eb2a:	4642      	mov	r2, r8
 801eb2c:	e9cd 0100 	strd	r0, r1, [sp]
 801eb30:	464b      	mov	r3, r9
 801eb32:	4620      	mov	r0, r4
 801eb34:	4629      	mov	r1, r5
 801eb36:	f7e1 fb2b 	bl	8000190 <__aeabi_dsub>
 801eb3a:	4602      	mov	r2, r0
 801eb3c:	460b      	mov	r3, r1
 801eb3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801eb42:	f7e1 ff6d 	bl	8000a20 <__aeabi_dcmpgt>
 801eb46:	2800      	cmp	r0, #0
 801eb48:	f47f ae0b 	bne.w	801e762 <__ieee754_pow+0x3ca>
 801eb4c:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801eb50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801eb54:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801eb58:	fa43 fa0a 	asr.w	sl, r3, sl
 801eb5c:	44da      	add	sl, fp
 801eb5e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801eb62:	489b      	ldr	r0, [pc, #620]	@ (801edd0 <__ieee754_pow+0xa38>)
 801eb64:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801eb68:	4108      	asrs	r0, r1
 801eb6a:	ea00 030a 	and.w	r3, r0, sl
 801eb6e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801eb72:	f1c1 0114 	rsb	r1, r1, #20
 801eb76:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801eb7a:	fa4a fa01 	asr.w	sl, sl, r1
 801eb7e:	f1bb 0f00 	cmp.w	fp, #0
 801eb82:	4640      	mov	r0, r8
 801eb84:	4649      	mov	r1, r9
 801eb86:	f04f 0200 	mov.w	r2, #0
 801eb8a:	bfb8      	it	lt
 801eb8c:	f1ca 0a00 	rsblt	sl, sl, #0
 801eb90:	f7e1 fafe 	bl	8000190 <__aeabi_dsub>
 801eb94:	4680      	mov	r8, r0
 801eb96:	4689      	mov	r9, r1
 801eb98:	4632      	mov	r2, r6
 801eb9a:	463b      	mov	r3, r7
 801eb9c:	4640      	mov	r0, r8
 801eb9e:	4649      	mov	r1, r9
 801eba0:	f7e1 faf8 	bl	8000194 <__adddf3>
 801eba4:	2400      	movs	r4, #0
 801eba6:	a37a      	add	r3, pc, #488	@ (adr r3, 801ed90 <__ieee754_pow+0x9f8>)
 801eba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebac:	4620      	mov	r0, r4
 801ebae:	460d      	mov	r5, r1
 801ebb0:	f7e1 fca6 	bl	8000500 <__aeabi_dmul>
 801ebb4:	4642      	mov	r2, r8
 801ebb6:	e9cd 0100 	strd	r0, r1, [sp]
 801ebba:	464b      	mov	r3, r9
 801ebbc:	4620      	mov	r0, r4
 801ebbe:	4629      	mov	r1, r5
 801ebc0:	f7e1 fae6 	bl	8000190 <__aeabi_dsub>
 801ebc4:	4602      	mov	r2, r0
 801ebc6:	460b      	mov	r3, r1
 801ebc8:	4630      	mov	r0, r6
 801ebca:	4639      	mov	r1, r7
 801ebcc:	f7e1 fae0 	bl	8000190 <__aeabi_dsub>
 801ebd0:	a371      	add	r3, pc, #452	@ (adr r3, 801ed98 <__ieee754_pow+0xa00>)
 801ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd6:	f7e1 fc93 	bl	8000500 <__aeabi_dmul>
 801ebda:	a371      	add	r3, pc, #452	@ (adr r3, 801eda0 <__ieee754_pow+0xa08>)
 801ebdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebe0:	4680      	mov	r8, r0
 801ebe2:	4689      	mov	r9, r1
 801ebe4:	4620      	mov	r0, r4
 801ebe6:	4629      	mov	r1, r5
 801ebe8:	f7e1 fc8a 	bl	8000500 <__aeabi_dmul>
 801ebec:	4602      	mov	r2, r0
 801ebee:	460b      	mov	r3, r1
 801ebf0:	4640      	mov	r0, r8
 801ebf2:	4649      	mov	r1, r9
 801ebf4:	f7e1 face 	bl	8000194 <__adddf3>
 801ebf8:	4604      	mov	r4, r0
 801ebfa:	460d      	mov	r5, r1
 801ebfc:	4602      	mov	r2, r0
 801ebfe:	460b      	mov	r3, r1
 801ec00:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec04:	f7e1 fac6 	bl	8000194 <__adddf3>
 801ec08:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec0c:	4680      	mov	r8, r0
 801ec0e:	4689      	mov	r9, r1
 801ec10:	f7e1 fabe 	bl	8000190 <__aeabi_dsub>
 801ec14:	4602      	mov	r2, r0
 801ec16:	460b      	mov	r3, r1
 801ec18:	4620      	mov	r0, r4
 801ec1a:	4629      	mov	r1, r5
 801ec1c:	f7e1 fab8 	bl	8000190 <__aeabi_dsub>
 801ec20:	4642      	mov	r2, r8
 801ec22:	4606      	mov	r6, r0
 801ec24:	460f      	mov	r7, r1
 801ec26:	464b      	mov	r3, r9
 801ec28:	4640      	mov	r0, r8
 801ec2a:	4649      	mov	r1, r9
 801ec2c:	f7e1 fc68 	bl	8000500 <__aeabi_dmul>
 801ec30:	a35d      	add	r3, pc, #372	@ (adr r3, 801eda8 <__ieee754_pow+0xa10>)
 801ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec36:	4604      	mov	r4, r0
 801ec38:	460d      	mov	r5, r1
 801ec3a:	f7e1 fc61 	bl	8000500 <__aeabi_dmul>
 801ec3e:	a35c      	add	r3, pc, #368	@ (adr r3, 801edb0 <__ieee754_pow+0xa18>)
 801ec40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec44:	f7e1 faa4 	bl	8000190 <__aeabi_dsub>
 801ec48:	4622      	mov	r2, r4
 801ec4a:	462b      	mov	r3, r5
 801ec4c:	f7e1 fc58 	bl	8000500 <__aeabi_dmul>
 801ec50:	a359      	add	r3, pc, #356	@ (adr r3, 801edb8 <__ieee754_pow+0xa20>)
 801ec52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec56:	f7e1 fa9d 	bl	8000194 <__adddf3>
 801ec5a:	4622      	mov	r2, r4
 801ec5c:	462b      	mov	r3, r5
 801ec5e:	f7e1 fc4f 	bl	8000500 <__aeabi_dmul>
 801ec62:	a357      	add	r3, pc, #348	@ (adr r3, 801edc0 <__ieee754_pow+0xa28>)
 801ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec68:	f7e1 fa92 	bl	8000190 <__aeabi_dsub>
 801ec6c:	4622      	mov	r2, r4
 801ec6e:	462b      	mov	r3, r5
 801ec70:	f7e1 fc46 	bl	8000500 <__aeabi_dmul>
 801ec74:	a354      	add	r3, pc, #336	@ (adr r3, 801edc8 <__ieee754_pow+0xa30>)
 801ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec7a:	f7e1 fa8b 	bl	8000194 <__adddf3>
 801ec7e:	4622      	mov	r2, r4
 801ec80:	462b      	mov	r3, r5
 801ec82:	f7e1 fc3d 	bl	8000500 <__aeabi_dmul>
 801ec86:	4602      	mov	r2, r0
 801ec88:	460b      	mov	r3, r1
 801ec8a:	4640      	mov	r0, r8
 801ec8c:	4649      	mov	r1, r9
 801ec8e:	f7e1 fa7f 	bl	8000190 <__aeabi_dsub>
 801ec92:	4604      	mov	r4, r0
 801ec94:	460d      	mov	r5, r1
 801ec96:	4602      	mov	r2, r0
 801ec98:	460b      	mov	r3, r1
 801ec9a:	4640      	mov	r0, r8
 801ec9c:	4649      	mov	r1, r9
 801ec9e:	f7e1 fc2f 	bl	8000500 <__aeabi_dmul>
 801eca2:	2200      	movs	r2, #0
 801eca4:	e9cd 0100 	strd	r0, r1, [sp]
 801eca8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ecac:	4620      	mov	r0, r4
 801ecae:	4629      	mov	r1, r5
 801ecb0:	f7e1 fa6e 	bl	8000190 <__aeabi_dsub>
 801ecb4:	4602      	mov	r2, r0
 801ecb6:	460b      	mov	r3, r1
 801ecb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ecbc:	f7e1 fd4a 	bl	8000754 <__aeabi_ddiv>
 801ecc0:	4632      	mov	r2, r6
 801ecc2:	4604      	mov	r4, r0
 801ecc4:	460d      	mov	r5, r1
 801ecc6:	463b      	mov	r3, r7
 801ecc8:	4640      	mov	r0, r8
 801ecca:	4649      	mov	r1, r9
 801eccc:	f7e1 fc18 	bl	8000500 <__aeabi_dmul>
 801ecd0:	4632      	mov	r2, r6
 801ecd2:	463b      	mov	r3, r7
 801ecd4:	f7e1 fa5e 	bl	8000194 <__adddf3>
 801ecd8:	4602      	mov	r2, r0
 801ecda:	460b      	mov	r3, r1
 801ecdc:	4620      	mov	r0, r4
 801ecde:	4629      	mov	r1, r5
 801ece0:	f7e1 fa56 	bl	8000190 <__aeabi_dsub>
 801ece4:	4642      	mov	r2, r8
 801ece6:	464b      	mov	r3, r9
 801ece8:	f7e1 fa52 	bl	8000190 <__aeabi_dsub>
 801ecec:	4602      	mov	r2, r0
 801ecee:	460b      	mov	r3, r1
 801ecf0:	2000      	movs	r0, #0
 801ecf2:	4938      	ldr	r1, [pc, #224]	@ (801edd4 <__ieee754_pow+0xa3c>)
 801ecf4:	f7e1 fa4c 	bl	8000190 <__aeabi_dsub>
 801ecf8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801ecfc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 801ed00:	da2e      	bge.n	801ed60 <__ieee754_pow+0x9c8>
 801ed02:	4652      	mov	r2, sl
 801ed04:	f000 f874 	bl	801edf0 <scalbn>
 801ed08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ed0c:	f7ff bbed 	b.w	801e4ea <__ieee754_pow+0x152>
 801ed10:	4c31      	ldr	r4, [pc, #196]	@ (801edd8 <__ieee754_pow+0xa40>)
 801ed12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ed16:	42a3      	cmp	r3, r4
 801ed18:	d91a      	bls.n	801ed50 <__ieee754_pow+0x9b8>
 801ed1a:	4b30      	ldr	r3, [pc, #192]	@ (801eddc <__ieee754_pow+0xa44>)
 801ed1c:	440b      	add	r3, r1
 801ed1e:	4303      	orrs	r3, r0
 801ed20:	d009      	beq.n	801ed36 <__ieee754_pow+0x99e>
 801ed22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed26:	2200      	movs	r2, #0
 801ed28:	2300      	movs	r3, #0
 801ed2a:	f7e1 fe5b 	bl	80009e4 <__aeabi_dcmplt>
 801ed2e:	3800      	subs	r0, #0
 801ed30:	bf18      	it	ne
 801ed32:	2001      	movne	r0, #1
 801ed34:	e444      	b.n	801e5c0 <__ieee754_pow+0x228>
 801ed36:	4642      	mov	r2, r8
 801ed38:	464b      	mov	r3, r9
 801ed3a:	f7e1 fa29 	bl	8000190 <__aeabi_dsub>
 801ed3e:	4632      	mov	r2, r6
 801ed40:	463b      	mov	r3, r7
 801ed42:	f7e1 fe63 	bl	8000a0c <__aeabi_dcmpge>
 801ed46:	2800      	cmp	r0, #0
 801ed48:	d1eb      	bne.n	801ed22 <__ieee754_pow+0x98a>
 801ed4a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 801ede0 <__ieee754_pow+0xa48>
 801ed4e:	e6fd      	b.n	801eb4c <__ieee754_pow+0x7b4>
 801ed50:	469a      	mov	sl, r3
 801ed52:	4b24      	ldr	r3, [pc, #144]	@ (801ede4 <__ieee754_pow+0xa4c>)
 801ed54:	459a      	cmp	sl, r3
 801ed56:	f63f aef9 	bhi.w	801eb4c <__ieee754_pow+0x7b4>
 801ed5a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ed5e:	e71b      	b.n	801eb98 <__ieee754_pow+0x800>
 801ed60:	4621      	mov	r1, r4
 801ed62:	e7d1      	b.n	801ed08 <__ieee754_pow+0x970>
 801ed64:	491b      	ldr	r1, [pc, #108]	@ (801edd4 <__ieee754_pow+0xa3c>)
 801ed66:	2000      	movs	r0, #0
 801ed68:	f7ff bb34 	b.w	801e3d4 <__ieee754_pow+0x3c>
 801ed6c:	2000      	movs	r0, #0
 801ed6e:	2100      	movs	r1, #0
 801ed70:	f7ff bb30 	b.w	801e3d4 <__ieee754_pow+0x3c>
 801ed74:	4650      	mov	r0, sl
 801ed76:	4659      	mov	r1, fp
 801ed78:	f7ff bb2c 	b.w	801e3d4 <__ieee754_pow+0x3c>
 801ed7c:	460c      	mov	r4, r1
 801ed7e:	f7ff bb79 	b.w	801e474 <__ieee754_pow+0xdc>
 801ed82:	2400      	movs	r4, #0
 801ed84:	f7ff bb64 	b.w	801e450 <__ieee754_pow+0xb8>
 801ed88:	652b82fe 	.word	0x652b82fe
 801ed8c:	3c971547 	.word	0x3c971547
 801ed90:	00000000 	.word	0x00000000
 801ed94:	3fe62e43 	.word	0x3fe62e43
 801ed98:	fefa39ef 	.word	0xfefa39ef
 801ed9c:	3fe62e42 	.word	0x3fe62e42
 801eda0:	0ca86c39 	.word	0x0ca86c39
 801eda4:	be205c61 	.word	0xbe205c61
 801eda8:	72bea4d0 	.word	0x72bea4d0
 801edac:	3e663769 	.word	0x3e663769
 801edb0:	c5d26bf1 	.word	0xc5d26bf1
 801edb4:	3ebbbd41 	.word	0x3ebbbd41
 801edb8:	af25de2c 	.word	0xaf25de2c
 801edbc:	3f11566a 	.word	0x3f11566a
 801edc0:	16bebd93 	.word	0x16bebd93
 801edc4:	3f66c16c 	.word	0x3f66c16c
 801edc8:	5555553e 	.word	0x5555553e
 801edcc:	3fc55555 	.word	0x3fc55555
 801edd0:	fff00000 	.word	0xfff00000
 801edd4:	3ff00000 	.word	0x3ff00000
 801edd8:	4090cbff 	.word	0x4090cbff
 801eddc:	3f6f3400 	.word	0x3f6f3400
 801ede0:	4090cc00 	.word	0x4090cc00
 801ede4:	3fe00000 	.word	0x3fe00000

0801ede8 <fabs>:
 801ede8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801edec:	4619      	mov	r1, r3
 801edee:	4770      	bx	lr

0801edf0 <scalbn>:
 801edf0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 801edf4:	4616      	mov	r6, r2
 801edf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801edfa:	4683      	mov	fp, r0
 801edfc:	468c      	mov	ip, r1
 801edfe:	460b      	mov	r3, r1
 801ee00:	b982      	cbnz	r2, 801ee24 <scalbn+0x34>
 801ee02:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ee06:	4303      	orrs	r3, r0
 801ee08:	d039      	beq.n	801ee7e <scalbn+0x8e>
 801ee0a:	4b2f      	ldr	r3, [pc, #188]	@ (801eec8 <scalbn+0xd8>)
 801ee0c:	2200      	movs	r2, #0
 801ee0e:	f7e1 fb77 	bl	8000500 <__aeabi_dmul>
 801ee12:	4b2e      	ldr	r3, [pc, #184]	@ (801eecc <scalbn+0xdc>)
 801ee14:	429e      	cmp	r6, r3
 801ee16:	4683      	mov	fp, r0
 801ee18:	468c      	mov	ip, r1
 801ee1a:	da0d      	bge.n	801ee38 <scalbn+0x48>
 801ee1c:	a326      	add	r3, pc, #152	@ (adr r3, 801eeb8 <scalbn+0xc8>)
 801ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee22:	e01b      	b.n	801ee5c <scalbn+0x6c>
 801ee24:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 801ee28:	42ba      	cmp	r2, r7
 801ee2a:	d109      	bne.n	801ee40 <scalbn+0x50>
 801ee2c:	4602      	mov	r2, r0
 801ee2e:	f7e1 f9b1 	bl	8000194 <__adddf3>
 801ee32:	4683      	mov	fp, r0
 801ee34:	468c      	mov	ip, r1
 801ee36:	e022      	b.n	801ee7e <scalbn+0x8e>
 801ee38:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ee3c:	460b      	mov	r3, r1
 801ee3e:	3a36      	subs	r2, #54	@ 0x36
 801ee40:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ee44:	428e      	cmp	r6, r1
 801ee46:	dd0c      	ble.n	801ee62 <scalbn+0x72>
 801ee48:	a31d      	add	r3, pc, #116	@ (adr r3, 801eec0 <scalbn+0xd0>)
 801ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee4e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 801ee52:	461c      	mov	r4, r3
 801ee54:	f361 74df 	bfi	r4, r1, #31, #1
 801ee58:	481d      	ldr	r0, [pc, #116]	@ (801eed0 <scalbn+0xe0>)
 801ee5a:	4621      	mov	r1, r4
 801ee5c:	f7e1 fb50 	bl	8000500 <__aeabi_dmul>
 801ee60:	e7e7      	b.n	801ee32 <scalbn+0x42>
 801ee62:	4432      	add	r2, r6
 801ee64:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801ee68:	428a      	cmp	r2, r1
 801ee6a:	dced      	bgt.n	801ee48 <scalbn+0x58>
 801ee6c:	2a00      	cmp	r2, #0
 801ee6e:	dd0a      	ble.n	801ee86 <scalbn+0x96>
 801ee70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ee74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801ee78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ee7c:	46ac      	mov	ip, r5
 801ee7e:	4658      	mov	r0, fp
 801ee80:	4661      	mov	r1, ip
 801ee82:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 801ee86:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801ee8a:	da09      	bge.n	801eea0 <scalbn+0xb0>
 801ee8c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 801ee90:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 801ee94:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 801ee98:	480e      	ldr	r0, [pc, #56]	@ (801eed4 <scalbn+0xe4>)
 801ee9a:	f041 011f 	orr.w	r1, r1, #31
 801ee9e:	e7bd      	b.n	801ee1c <scalbn+0x2c>
 801eea0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801eea4:	3236      	adds	r2, #54	@ 0x36
 801eea6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801eeaa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801eeae:	4658      	mov	r0, fp
 801eeb0:	4b09      	ldr	r3, [pc, #36]	@ (801eed8 <scalbn+0xe8>)
 801eeb2:	4629      	mov	r1, r5
 801eeb4:	2200      	movs	r2, #0
 801eeb6:	e7d1      	b.n	801ee5c <scalbn+0x6c>
 801eeb8:	c2f8f359 	.word	0xc2f8f359
 801eebc:	01a56e1f 	.word	0x01a56e1f
 801eec0:	8800759c 	.word	0x8800759c
 801eec4:	7e37e43c 	.word	0x7e37e43c
 801eec8:	43500000 	.word	0x43500000
 801eecc:	ffff3cb0 	.word	0xffff3cb0
 801eed0:	8800759c 	.word	0x8800759c
 801eed4:	c2f8f359 	.word	0xc2f8f359
 801eed8:	3c900000 	.word	0x3c900000

0801eedc <with_errno>:
 801eedc:	b570      	push	{r4, r5, r6, lr}
 801eede:	4604      	mov	r4, r0
 801eee0:	460d      	mov	r5, r1
 801eee2:	4616      	mov	r6, r2
 801eee4:	f7fe ff52 	bl	801dd8c <__errno>
 801eee8:	4629      	mov	r1, r5
 801eeea:	6006      	str	r6, [r0, #0]
 801eeec:	4620      	mov	r0, r4
 801eeee:	bd70      	pop	{r4, r5, r6, pc}

0801eef0 <xflow>:
 801eef0:	b513      	push	{r0, r1, r4, lr}
 801eef2:	4604      	mov	r4, r0
 801eef4:	4619      	mov	r1, r3
 801eef6:	4610      	mov	r0, r2
 801eef8:	b10c      	cbz	r4, 801eefe <xflow+0xe>
 801eefa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801eefe:	e9cd 2300 	strd	r2, r3, [sp]
 801ef02:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ef06:	f7e1 fafb 	bl	8000500 <__aeabi_dmul>
 801ef0a:	2222      	movs	r2, #34	@ 0x22
 801ef0c:	b002      	add	sp, #8
 801ef0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef12:	f7ff bfe3 	b.w	801eedc <with_errno>

0801ef16 <__math_uflow>:
 801ef16:	2200      	movs	r2, #0
 801ef18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801ef1c:	f7ff bfe8 	b.w	801eef0 <xflow>

0801ef20 <__math_oflow>:
 801ef20:	2200      	movs	r2, #0
 801ef22:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 801ef26:	f7ff bfe3 	b.w	801eef0 <xflow>
	...

0801ef2c <__ieee754_sqrt>:
 801ef2c:	4a67      	ldr	r2, [pc, #412]	@ (801f0cc <__ieee754_sqrt+0x1a0>)
 801ef2e:	438a      	bics	r2, r1
 801ef30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef34:	4606      	mov	r6, r0
 801ef36:	460f      	mov	r7, r1
 801ef38:	460b      	mov	r3, r1
 801ef3a:	4604      	mov	r4, r0
 801ef3c:	d10e      	bne.n	801ef5c <__ieee754_sqrt+0x30>
 801ef3e:	4602      	mov	r2, r0
 801ef40:	f7e1 fade 	bl	8000500 <__aeabi_dmul>
 801ef44:	4602      	mov	r2, r0
 801ef46:	460b      	mov	r3, r1
 801ef48:	4630      	mov	r0, r6
 801ef4a:	4639      	mov	r1, r7
 801ef4c:	f7e1 f922 	bl	8000194 <__adddf3>
 801ef50:	4606      	mov	r6, r0
 801ef52:	460f      	mov	r7, r1
 801ef54:	4630      	mov	r0, r6
 801ef56:	4639      	mov	r1, r7
 801ef58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef5c:	2900      	cmp	r1, #0
 801ef5e:	dc0c      	bgt.n	801ef7a <__ieee754_sqrt+0x4e>
 801ef60:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801ef64:	4302      	orrs	r2, r0
 801ef66:	d0f5      	beq.n	801ef54 <__ieee754_sqrt+0x28>
 801ef68:	b189      	cbz	r1, 801ef8e <__ieee754_sqrt+0x62>
 801ef6a:	4602      	mov	r2, r0
 801ef6c:	f7e1 f910 	bl	8000190 <__aeabi_dsub>
 801ef70:	4602      	mov	r2, r0
 801ef72:	460b      	mov	r3, r1
 801ef74:	f7e1 fbee 	bl	8000754 <__aeabi_ddiv>
 801ef78:	e7ea      	b.n	801ef50 <__ieee754_sqrt+0x24>
 801ef7a:	150a      	asrs	r2, r1, #20
 801ef7c:	d115      	bne.n	801efaa <__ieee754_sqrt+0x7e>
 801ef7e:	2100      	movs	r1, #0
 801ef80:	e009      	b.n	801ef96 <__ieee754_sqrt+0x6a>
 801ef82:	0ae3      	lsrs	r3, r4, #11
 801ef84:	3a15      	subs	r2, #21
 801ef86:	0564      	lsls	r4, r4, #21
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d0fa      	beq.n	801ef82 <__ieee754_sqrt+0x56>
 801ef8c:	e7f7      	b.n	801ef7e <__ieee754_sqrt+0x52>
 801ef8e:	460a      	mov	r2, r1
 801ef90:	e7fa      	b.n	801ef88 <__ieee754_sqrt+0x5c>
 801ef92:	005b      	lsls	r3, r3, #1
 801ef94:	3101      	adds	r1, #1
 801ef96:	02d8      	lsls	r0, r3, #11
 801ef98:	d5fb      	bpl.n	801ef92 <__ieee754_sqrt+0x66>
 801ef9a:	1e48      	subs	r0, r1, #1
 801ef9c:	1a12      	subs	r2, r2, r0
 801ef9e:	f1c1 0020 	rsb	r0, r1, #32
 801efa2:	fa24 f000 	lsr.w	r0, r4, r0
 801efa6:	4303      	orrs	r3, r0
 801efa8:	408c      	lsls	r4, r1
 801efaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801efae:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801efb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801efb6:	07d2      	lsls	r2, r2, #31
 801efb8:	bf5c      	itt	pl
 801efba:	005b      	lslpl	r3, r3, #1
 801efbc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801efc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801efc4:	bf58      	it	pl
 801efc6:	0064      	lslpl	r4, r4, #1
 801efc8:	2600      	movs	r6, #0
 801efca:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801efce:	107f      	asrs	r7, r7, #1
 801efd0:	0064      	lsls	r4, r4, #1
 801efd2:	2116      	movs	r1, #22
 801efd4:	4632      	mov	r2, r6
 801efd6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801efda:	1815      	adds	r5, r2, r0
 801efdc:	429d      	cmp	r5, r3
 801efde:	bfde      	ittt	le
 801efe0:	182a      	addle	r2, r5, r0
 801efe2:	1b5b      	suble	r3, r3, r5
 801efe4:	1836      	addle	r6, r6, r0
 801efe6:	0fe5      	lsrs	r5, r4, #31
 801efe8:	3901      	subs	r1, #1
 801efea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801efee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801eff2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801eff6:	d1f0      	bne.n	801efda <__ieee754_sqrt+0xae>
 801eff8:	460d      	mov	r5, r1
 801effa:	f04f 0a20 	mov.w	sl, #32
 801effe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801f002:	429a      	cmp	r2, r3
 801f004:	eb01 0c00 	add.w	ip, r1, r0
 801f008:	db02      	blt.n	801f010 <__ieee754_sqrt+0xe4>
 801f00a:	d113      	bne.n	801f034 <__ieee754_sqrt+0x108>
 801f00c:	45a4      	cmp	ip, r4
 801f00e:	d811      	bhi.n	801f034 <__ieee754_sqrt+0x108>
 801f010:	f1bc 0f00 	cmp.w	ip, #0
 801f014:	eb0c 0100 	add.w	r1, ip, r0
 801f018:	da42      	bge.n	801f0a0 <__ieee754_sqrt+0x174>
 801f01a:	2900      	cmp	r1, #0
 801f01c:	db40      	blt.n	801f0a0 <__ieee754_sqrt+0x174>
 801f01e:	f102 0e01 	add.w	lr, r2, #1
 801f022:	1a9b      	subs	r3, r3, r2
 801f024:	45a4      	cmp	ip, r4
 801f026:	bf88      	it	hi
 801f028:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f02c:	eba4 040c 	sub.w	r4, r4, ip
 801f030:	4405      	add	r5, r0
 801f032:	4672      	mov	r2, lr
 801f034:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 801f038:	f1ba 0a01 	subs.w	sl, sl, #1
 801f03c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 801f040:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801f044:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801f048:	d1db      	bne.n	801f002 <__ieee754_sqrt+0xd6>
 801f04a:	431c      	orrs	r4, r3
 801f04c:	d01a      	beq.n	801f084 <__ieee754_sqrt+0x158>
 801f04e:	4c20      	ldr	r4, [pc, #128]	@ (801f0d0 <__ieee754_sqrt+0x1a4>)
 801f050:	f8df b080 	ldr.w	fp, [pc, #128]	@ 801f0d4 <__ieee754_sqrt+0x1a8>
 801f054:	e9d4 0100 	ldrd	r0, r1, [r4]
 801f058:	e9db 2300 	ldrd	r2, r3, [fp]
 801f05c:	f7e1 f898 	bl	8000190 <__aeabi_dsub>
 801f060:	e9d4 8900 	ldrd	r8, r9, [r4]
 801f064:	4602      	mov	r2, r0
 801f066:	460b      	mov	r3, r1
 801f068:	4640      	mov	r0, r8
 801f06a:	4649      	mov	r1, r9
 801f06c:	f7e1 fcc4 	bl	80009f8 <__aeabi_dcmple>
 801f070:	b140      	cbz	r0, 801f084 <__ieee754_sqrt+0x158>
 801f072:	f1b5 3fff 	cmp.w	r5, #4294967295
 801f076:	e9d4 0100 	ldrd	r0, r1, [r4]
 801f07a:	e9db 2300 	ldrd	r2, r3, [fp]
 801f07e:	d111      	bne.n	801f0a4 <__ieee754_sqrt+0x178>
 801f080:	3601      	adds	r6, #1
 801f082:	4655      	mov	r5, sl
 801f084:	1072      	asrs	r2, r6, #1
 801f086:	086b      	lsrs	r3, r5, #1
 801f088:	07f1      	lsls	r1, r6, #31
 801f08a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f08e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f092:	bf48      	it	mi
 801f094:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f098:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 801f09c:	4618      	mov	r0, r3
 801f09e:	e757      	b.n	801ef50 <__ieee754_sqrt+0x24>
 801f0a0:	4696      	mov	lr, r2
 801f0a2:	e7be      	b.n	801f022 <__ieee754_sqrt+0xf6>
 801f0a4:	f7e1 f876 	bl	8000194 <__adddf3>
 801f0a8:	e9d4 8900 	ldrd	r8, r9, [r4]
 801f0ac:	4602      	mov	r2, r0
 801f0ae:	460b      	mov	r3, r1
 801f0b0:	4640      	mov	r0, r8
 801f0b2:	4649      	mov	r1, r9
 801f0b4:	f7e1 fc96 	bl	80009e4 <__aeabi_dcmplt>
 801f0b8:	b120      	cbz	r0, 801f0c4 <__ieee754_sqrt+0x198>
 801f0ba:	1ca8      	adds	r0, r5, #2
 801f0bc:	bf08      	it	eq
 801f0be:	3601      	addeq	r6, #1
 801f0c0:	3502      	adds	r5, #2
 801f0c2:	e7df      	b.n	801f084 <__ieee754_sqrt+0x158>
 801f0c4:	1c6b      	adds	r3, r5, #1
 801f0c6:	f023 0501 	bic.w	r5, r3, #1
 801f0ca:	e7db      	b.n	801f084 <__ieee754_sqrt+0x158>
 801f0cc:	7ff00000 	.word	0x7ff00000
 801f0d0:	200001a0 	.word	0x200001a0
 801f0d4:	20000198 	.word	0x20000198

0801f0d8 <_init>:
 801f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0da:	bf00      	nop
 801f0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0de:	bc08      	pop	{r3}
 801f0e0:	469e      	mov	lr, r3
 801f0e2:	4770      	bx	lr

0801f0e4 <_fini>:
 801f0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0e6:	bf00      	nop
 801f0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0ea:	bc08      	pop	{r3}
 801f0ec:	469e      	mov	lr, r3
 801f0ee:	4770      	bx	lr
