
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d6e8  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f44  0801d820  0801d820  0001e820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801e764  0801e764  0001f764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801e83c  0801e83c  0002014c  2**0
                  CONTENTS
  5 .ARM          00000008  0801e83c  0801e83c  0001f83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801e844  0801e844  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801e844  0801e844  0001f844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801e848  0801e848  0001f848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000014c  20000000  0801e84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002114  2000014c  0801e998  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002260  0801e998  00020260  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004409c  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aae8  00000000  00000000  00064212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003638  00000000  00000000  0006ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000297d  00000000  00000000  00072338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b77  00000000  00000000  00074cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045019  00000000  00000000  0009e82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ced75  00000000  00000000  000e3845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b25ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e0ec  00000000  00000000  001b2600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001c06ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000014c 	.word	0x2000014c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801d808 	.word	0x0801d808

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000150 	.word	0x20000150
 8000174:	0801d808 	.word	0x0801d808

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d92:	2afd      	cmp	r2, #253	@ 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	@ 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	@ 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_f2uiz>:
 8001118:	0042      	lsls	r2, r0, #1
 800111a:	d20e      	bcs.n	800113a <__aeabi_f2uiz+0x22>
 800111c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001120:	d30b      	bcc.n	800113a <__aeabi_f2uiz+0x22>
 8001122:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001126:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112a:	d409      	bmi.n	8001140 <__aeabi_f2uiz+0x28>
 800112c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001130:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001134:	fa23 f002 	lsr.w	r0, r3, r2
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2uiz+0x32>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d102      	bne.n	8001150 <__aeabi_f2uiz+0x38>
 800114a:	f04f 30ff 	mov.w	r0, #4294967295
 800114e:	4770      	bx	lr
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <__aeabi_uldivmod>:
 8001158:	b953      	cbnz	r3, 8001170 <__aeabi_uldivmod+0x18>
 800115a:	b94a      	cbnz	r2, 8001170 <__aeabi_uldivmod+0x18>
 800115c:	2900      	cmp	r1, #0
 800115e:	bf08      	it	eq
 8001160:	2800      	cmpeq	r0, #0
 8001162:	bf1c      	itt	ne
 8001164:	f04f 31ff 	movne.w	r1, #4294967295
 8001168:	f04f 30ff 	movne.w	r0, #4294967295
 800116c:	f000 b96a 	b.w	8001444 <__aeabi_idiv0>
 8001170:	f1ad 0c08 	sub.w	ip, sp, #8
 8001174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001178:	f000 f806 	bl	8001188 <__udivmoddi4>
 800117c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <__udivmoddi4>:
 8001188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	9d08      	ldr	r5, [sp, #32]
 800118e:	460c      	mov	r4, r1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d14e      	bne.n	8001232 <__udivmoddi4+0xaa>
 8001194:	4694      	mov	ip, r2
 8001196:	458c      	cmp	ip, r1
 8001198:	4686      	mov	lr, r0
 800119a:	fab2 f282 	clz	r2, r2
 800119e:	d962      	bls.n	8001266 <__udivmoddi4+0xde>
 80011a0:	b14a      	cbz	r2, 80011b6 <__udivmoddi4+0x2e>
 80011a2:	f1c2 0320 	rsb	r3, r2, #32
 80011a6:	4091      	lsls	r1, r2
 80011a8:	fa20 f303 	lsr.w	r3, r0, r3
 80011ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b0:	4319      	orrs	r1, r3
 80011b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80011b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ba:	fa1f f68c 	uxth.w	r6, ip
 80011be:	fbb1 f4f7 	udiv	r4, r1, r7
 80011c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c6:	fb07 1114 	mls	r1, r7, r4, r1
 80011ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011ce:	fb04 f106 	mul.w	r1, r4, r6
 80011d2:	4299      	cmp	r1, r3
 80011d4:	d90a      	bls.n	80011ec <__udivmoddi4+0x64>
 80011d6:	eb1c 0303 	adds.w	r3, ip, r3
 80011da:	f104 30ff 	add.w	r0, r4, #4294967295
 80011de:	f080 8112 	bcs.w	8001406 <__udivmoddi4+0x27e>
 80011e2:	4299      	cmp	r1, r3
 80011e4:	f240 810f 	bls.w	8001406 <__udivmoddi4+0x27e>
 80011e8:	3c02      	subs	r4, #2
 80011ea:	4463      	add	r3, ip
 80011ec:	1a59      	subs	r1, r3, r1
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011f6:	fb07 1110 	mls	r1, r7, r0, r1
 80011fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011fe:	fb00 f606 	mul.w	r6, r0, r6
 8001202:	429e      	cmp	r6, r3
 8001204:	d90a      	bls.n	800121c <__udivmoddi4+0x94>
 8001206:	eb1c 0303 	adds.w	r3, ip, r3
 800120a:	f100 31ff 	add.w	r1, r0, #4294967295
 800120e:	f080 80fc 	bcs.w	800140a <__udivmoddi4+0x282>
 8001212:	429e      	cmp	r6, r3
 8001214:	f240 80f9 	bls.w	800140a <__udivmoddi4+0x282>
 8001218:	4463      	add	r3, ip
 800121a:	3802      	subs	r0, #2
 800121c:	1b9b      	subs	r3, r3, r6
 800121e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001222:	2100      	movs	r1, #0
 8001224:	b11d      	cbz	r5, 800122e <__udivmoddi4+0xa6>
 8001226:	40d3      	lsrs	r3, r2
 8001228:	2200      	movs	r2, #0
 800122a:	e9c5 3200 	strd	r3, r2, [r5]
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	428b      	cmp	r3, r1
 8001234:	d905      	bls.n	8001242 <__udivmoddi4+0xba>
 8001236:	b10d      	cbz	r5, 800123c <__udivmoddi4+0xb4>
 8001238:	e9c5 0100 	strd	r0, r1, [r5]
 800123c:	2100      	movs	r1, #0
 800123e:	4608      	mov	r0, r1
 8001240:	e7f5      	b.n	800122e <__udivmoddi4+0xa6>
 8001242:	fab3 f183 	clz	r1, r3
 8001246:	2900      	cmp	r1, #0
 8001248:	d146      	bne.n	80012d8 <__udivmoddi4+0x150>
 800124a:	42a3      	cmp	r3, r4
 800124c:	d302      	bcc.n	8001254 <__udivmoddi4+0xcc>
 800124e:	4290      	cmp	r0, r2
 8001250:	f0c0 80f0 	bcc.w	8001434 <__udivmoddi4+0x2ac>
 8001254:	1a86      	subs	r6, r0, r2
 8001256:	eb64 0303 	sbc.w	r3, r4, r3
 800125a:	2001      	movs	r0, #1
 800125c:	2d00      	cmp	r5, #0
 800125e:	d0e6      	beq.n	800122e <__udivmoddi4+0xa6>
 8001260:	e9c5 6300 	strd	r6, r3, [r5]
 8001264:	e7e3      	b.n	800122e <__udivmoddi4+0xa6>
 8001266:	2a00      	cmp	r2, #0
 8001268:	f040 8090 	bne.w	800138c <__udivmoddi4+0x204>
 800126c:	eba1 040c 	sub.w	r4, r1, ip
 8001270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001274:	fa1f f78c 	uxth.w	r7, ip
 8001278:	2101      	movs	r1, #1
 800127a:	fbb4 f6f8 	udiv	r6, r4, r8
 800127e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001282:	fb08 4416 	mls	r4, r8, r6, r4
 8001286:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800128a:	fb07 f006 	mul.w	r0, r7, r6
 800128e:	4298      	cmp	r0, r3
 8001290:	d908      	bls.n	80012a4 <__udivmoddi4+0x11c>
 8001292:	eb1c 0303 	adds.w	r3, ip, r3
 8001296:	f106 34ff 	add.w	r4, r6, #4294967295
 800129a:	d202      	bcs.n	80012a2 <__udivmoddi4+0x11a>
 800129c:	4298      	cmp	r0, r3
 800129e:	f200 80cd 	bhi.w	800143c <__udivmoddi4+0x2b4>
 80012a2:	4626      	mov	r6, r4
 80012a4:	1a1c      	subs	r4, r3, r0
 80012a6:	fa1f f38e 	uxth.w	r3, lr
 80012aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ae:	fb08 4410 	mls	r4, r8, r0, r4
 80012b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b6:	fb00 f707 	mul.w	r7, r0, r7
 80012ba:	429f      	cmp	r7, r3
 80012bc:	d908      	bls.n	80012d0 <__udivmoddi4+0x148>
 80012be:	eb1c 0303 	adds.w	r3, ip, r3
 80012c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80012c6:	d202      	bcs.n	80012ce <__udivmoddi4+0x146>
 80012c8:	429f      	cmp	r7, r3
 80012ca:	f200 80b0 	bhi.w	800142e <__udivmoddi4+0x2a6>
 80012ce:	4620      	mov	r0, r4
 80012d0:	1bdb      	subs	r3, r3, r7
 80012d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012d6:	e7a5      	b.n	8001224 <__udivmoddi4+0x9c>
 80012d8:	f1c1 0620 	rsb	r6, r1, #32
 80012dc:	408b      	lsls	r3, r1
 80012de:	fa22 f706 	lsr.w	r7, r2, r6
 80012e2:	431f      	orrs	r7, r3
 80012e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80012e8:	fa04 f301 	lsl.w	r3, r4, r1
 80012ec:	ea43 030c 	orr.w	r3, r3, ip
 80012f0:	40f4      	lsrs	r4, r6
 80012f2:	fa00 f801 	lsl.w	r8, r0, r1
 80012f6:	0c38      	lsrs	r0, r7, #16
 80012f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80012fc:	fbb4 fef0 	udiv	lr, r4, r0
 8001300:	fa1f fc87 	uxth.w	ip, r7
 8001304:	fb00 441e 	mls	r4, r0, lr, r4
 8001308:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800130c:	fb0e f90c 	mul.w	r9, lr, ip
 8001310:	45a1      	cmp	r9, r4
 8001312:	fa02 f201 	lsl.w	r2, r2, r1
 8001316:	d90a      	bls.n	800132e <__udivmoddi4+0x1a6>
 8001318:	193c      	adds	r4, r7, r4
 800131a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800131e:	f080 8084 	bcs.w	800142a <__udivmoddi4+0x2a2>
 8001322:	45a1      	cmp	r9, r4
 8001324:	f240 8081 	bls.w	800142a <__udivmoddi4+0x2a2>
 8001328:	f1ae 0e02 	sub.w	lr, lr, #2
 800132c:	443c      	add	r4, r7
 800132e:	eba4 0409 	sub.w	r4, r4, r9
 8001332:	fa1f f983 	uxth.w	r9, r3
 8001336:	fbb4 f3f0 	udiv	r3, r4, r0
 800133a:	fb00 4413 	mls	r4, r0, r3, r4
 800133e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001342:	fb03 fc0c 	mul.w	ip, r3, ip
 8001346:	45a4      	cmp	ip, r4
 8001348:	d907      	bls.n	800135a <__udivmoddi4+0x1d2>
 800134a:	193c      	adds	r4, r7, r4
 800134c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001350:	d267      	bcs.n	8001422 <__udivmoddi4+0x29a>
 8001352:	45a4      	cmp	ip, r4
 8001354:	d965      	bls.n	8001422 <__udivmoddi4+0x29a>
 8001356:	3b02      	subs	r3, #2
 8001358:	443c      	add	r4, r7
 800135a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800135e:	fba0 9302 	umull	r9, r3, r0, r2
 8001362:	eba4 040c 	sub.w	r4, r4, ip
 8001366:	429c      	cmp	r4, r3
 8001368:	46ce      	mov	lr, r9
 800136a:	469c      	mov	ip, r3
 800136c:	d351      	bcc.n	8001412 <__udivmoddi4+0x28a>
 800136e:	d04e      	beq.n	800140e <__udivmoddi4+0x286>
 8001370:	b155      	cbz	r5, 8001388 <__udivmoddi4+0x200>
 8001372:	ebb8 030e 	subs.w	r3, r8, lr
 8001376:	eb64 040c 	sbc.w	r4, r4, ip
 800137a:	fa04 f606 	lsl.w	r6, r4, r6
 800137e:	40cb      	lsrs	r3, r1
 8001380:	431e      	orrs	r6, r3
 8001382:	40cc      	lsrs	r4, r1
 8001384:	e9c5 6400 	strd	r6, r4, [r5]
 8001388:	2100      	movs	r1, #0
 800138a:	e750      	b.n	800122e <__udivmoddi4+0xa6>
 800138c:	f1c2 0320 	rsb	r3, r2, #32
 8001390:	fa20 f103 	lsr.w	r1, r0, r3
 8001394:	fa0c fc02 	lsl.w	ip, ip, r2
 8001398:	fa24 f303 	lsr.w	r3, r4, r3
 800139c:	4094      	lsls	r4, r2
 800139e:	430c      	orrs	r4, r1
 80013a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80013a8:	fa1f f78c 	uxth.w	r7, ip
 80013ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80013b0:	fb08 3110 	mls	r1, r8, r0, r3
 80013b4:	0c23      	lsrs	r3, r4, #16
 80013b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013ba:	fb00 f107 	mul.w	r1, r0, r7
 80013be:	4299      	cmp	r1, r3
 80013c0:	d908      	bls.n	80013d4 <__udivmoddi4+0x24c>
 80013c2:	eb1c 0303 	adds.w	r3, ip, r3
 80013c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ca:	d22c      	bcs.n	8001426 <__udivmoddi4+0x29e>
 80013cc:	4299      	cmp	r1, r3
 80013ce:	d92a      	bls.n	8001426 <__udivmoddi4+0x29e>
 80013d0:	3802      	subs	r0, #2
 80013d2:	4463      	add	r3, ip
 80013d4:	1a5b      	subs	r3, r3, r1
 80013d6:	b2a4      	uxth	r4, r4
 80013d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80013dc:	fb08 3311 	mls	r3, r8, r1, r3
 80013e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013e4:	fb01 f307 	mul.w	r3, r1, r7
 80013e8:	42a3      	cmp	r3, r4
 80013ea:	d908      	bls.n	80013fe <__udivmoddi4+0x276>
 80013ec:	eb1c 0404 	adds.w	r4, ip, r4
 80013f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013f4:	d213      	bcs.n	800141e <__udivmoddi4+0x296>
 80013f6:	42a3      	cmp	r3, r4
 80013f8:	d911      	bls.n	800141e <__udivmoddi4+0x296>
 80013fa:	3902      	subs	r1, #2
 80013fc:	4464      	add	r4, ip
 80013fe:	1ae4      	subs	r4, r4, r3
 8001400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001404:	e739      	b.n	800127a <__udivmoddi4+0xf2>
 8001406:	4604      	mov	r4, r0
 8001408:	e6f0      	b.n	80011ec <__udivmoddi4+0x64>
 800140a:	4608      	mov	r0, r1
 800140c:	e706      	b.n	800121c <__udivmoddi4+0x94>
 800140e:	45c8      	cmp	r8, r9
 8001410:	d2ae      	bcs.n	8001370 <__udivmoddi4+0x1e8>
 8001412:	ebb9 0e02 	subs.w	lr, r9, r2
 8001416:	eb63 0c07 	sbc.w	ip, r3, r7
 800141a:	3801      	subs	r0, #1
 800141c:	e7a8      	b.n	8001370 <__udivmoddi4+0x1e8>
 800141e:	4631      	mov	r1, r6
 8001420:	e7ed      	b.n	80013fe <__udivmoddi4+0x276>
 8001422:	4603      	mov	r3, r0
 8001424:	e799      	b.n	800135a <__udivmoddi4+0x1d2>
 8001426:	4630      	mov	r0, r6
 8001428:	e7d4      	b.n	80013d4 <__udivmoddi4+0x24c>
 800142a:	46d6      	mov	lr, sl
 800142c:	e77f      	b.n	800132e <__udivmoddi4+0x1a6>
 800142e:	4463      	add	r3, ip
 8001430:	3802      	subs	r0, #2
 8001432:	e74d      	b.n	80012d0 <__udivmoddi4+0x148>
 8001434:	4606      	mov	r6, r0
 8001436:	4623      	mov	r3, r4
 8001438:	4608      	mov	r0, r1
 800143a:	e70f      	b.n	800125c <__udivmoddi4+0xd4>
 800143c:	3e02      	subs	r6, #2
 800143e:	4463      	add	r3, ip
 8001440:	e730      	b.n	80012a4 <__udivmoddi4+0x11c>
 8001442:	bf00      	nop

08001444 <__aeabi_idiv0>:
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffe9 	bl	800042c <__aeabi_i2d>
 800145a:	a311      	add	r3, pc, #68	@ (adr r3, 80014a0 <process_temp_code+0x58>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f84e 	bl	8000500 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <process_temp_code+0x68>)
 8001472:	f7ff f96f 	bl	8000754 <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	a30a      	add	r3, pc, #40	@ (adr r3, 80014a8 <process_temp_code+0x60>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe fe84 	bl	8000190 <__aeabi_dsub>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff faf8 	bl	8000a84 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	3d70a3d7 	.word	0x3d70a3d7
 80014a4:	4065f70a 	.word	0x4065f70a
 80014a8:	cccccccd 	.word	0xcccccccd
 80014ac:	40476ccc 	.word	0x40476ccc
 80014b0:	40f00000 	.word	0x40f00000

080014b4 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffb3 	bl	800042c <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <process_humi_code+0x84>)
 80014cc:	f7ff f818 	bl	8000500 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <process_humi_code+0x88>)
 80014de:	f7ff f939 	bl	8000754 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <process_humi_code+0x8c>)
 80014f0:	f7fe fe4e 	bl	8000190 <__aeabi_dsub>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fac2 	bl	8000a84 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fdb7 	bl	800107c <__aeabi_fcmplt>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <process_humi_code+0x66>
    return 0;
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e009      	b.n	800152e <process_humi_code+0x7a>
  else if(value > 100)
 800151a:	490a      	ldr	r1, [pc, #40]	@ (8001544 <process_humi_code+0x90>)
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7ff fdcb 	bl	80010b8 <__aeabi_fcmpgt>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <process_humi_code+0x78>
    return 100;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <process_humi_code+0x90>)
 800152a:	e000      	b.n	800152e <process_humi_code+0x7a>
  else
    return (float)value;
 800152c:	68fb      	ldr	r3, [r7, #12]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	405f4000 	.word	0x405f4000
 800153c:	40f00000 	.word	0x40f00000
 8001540:	40180000 	.word	0x40180000
 8001544:	42c80000 	.word	0x42c80000

08001548 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3301      	adds	r3, #1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21b      	sxth	r3, r3
 8001564:	b29b      	uxth	r3, r3
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <w_reg>:
  else
    return 0;
}

static int8_t w_reg(uint8_t value, Si7021_registers_t reg)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af04      	add	r7, sp, #16
 8001576:	4603      	mov	r3, r0
 8001578:	460a      	mov	r2, r1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	4613      	mov	r3, r2
 800157e:	71bb      	strb	r3, [r7, #6]
  uint16_t cmd;

  if(reg == User_Register_1)
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <w_reg+0x1c>
  {
    cmd = W_RHT_U_reg;
 8001586:	23e6      	movs	r3, #230	@ 0xe6
 8001588:	81fb      	strh	r3, [r7, #14]
 800158a:	e008      	b.n	800159e <w_reg+0x2e>
  }
  else if(reg == Heater_Control_Register)
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d102      	bne.n	8001598 <w_reg+0x28>
  {
    cmd = W_Heater_C_reg;
 8001592:	2351      	movs	r3, #81	@ 0x51
 8001594:	81fb      	strh	r3, [r7, #14]
 8001596:	e002      	b.n	800159e <w_reg+0x2e>
  }
  else
    return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e013      	b.n	80015c6 <w_reg+0x56>

  if(HAL_OK != HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, cmd, 1, &value, 1, 10000))
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	89fa      	ldrh	r2, [r7, #14]
 80015a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	2301      	movs	r3, #1
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	1dfb      	adds	r3, r7, #7
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <w_reg+0x60>)
 80015b4:	f004 fcde 	bl	8005f74 <HAL_I2C_Mem_Write>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <w_reg+0x54>
    return -1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e000      	b.n	80015c6 <w_reg+0x56>
  else
    return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001d0 	.word	0x200001d0

080015d4 <r_both_Si7021>:

  return 0;
}

int8_t r_both_Si7021(float* humidity, float* temperature)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint8_t cmd = Humi_HM;
 80015de:	23e5      	movs	r3, #229	@ 0xe5
 80015e0:	737b      	strb	r3, [r7, #13]
  uint8_t buffer[2];
  uint16_t code;

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	f107 020d 	add.w	r2, r7, #13
 80015e8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	482d      	ldr	r0, [pc, #180]	@ (80016a8 <r_both_Si7021+0xd4>)
 80015f2:	f004 fab1 	bl	8005b58 <HAL_I2C_Master_Transmit>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <r_both_Si7021+0x2e>
    return -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	e04e      	b.n	80016a0 <r_both_Si7021+0xcc>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c3, I2C_ADDR, buffer, 2, 10000))
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	f107 0208 	add.w	r2, r7, #8
 8001608:	f242 7310 	movw	r3, #10000	@ 0x2710
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2302      	movs	r3, #2
 8001610:	4825      	ldr	r0, [pc, #148]	@ (80016a8 <r_both_Si7021+0xd4>)
 8001612:	f004 fbb9 	bl	8005d88 <HAL_I2C_Master_Receive>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <r_both_Si7021+0x4e>
    return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	e03e      	b.n	80016a0 <r_both_Si7021+0xcc>

  code = convert_to_uint16(buffer);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff8e 	bl	8001548 <convert_to_uint16>
 800162c:	4603      	mov	r3, r0
 800162e:	81fb      	strh	r3, [r7, #14]
  *humidity = process_humi_code(code);
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff3e 	bl	80014b4 <process_humi_code>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]

  /* There is a temperature measurement with each RH measurement */
  cmd = Temp_AH;
 800163e:	23e0      	movs	r3, #224	@ 0xe0
 8001640:	737b      	strb	r3, [r7, #13]

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 8001642:	2180      	movs	r1, #128	@ 0x80
 8001644:	f107 020d 	add.w	r2, r7, #13
 8001648:	f242 7310 	movw	r3, #10000	@ 0x2710
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	4815      	ldr	r0, [pc, #84]	@ (80016a8 <r_both_Si7021+0xd4>)
 8001652:	f004 fa81 	bl	8005b58 <HAL_I2C_Master_Transmit>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <r_both_Si7021+0x8e>
    return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	e01e      	b.n	80016a0 <r_both_Si7021+0xcc>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c3, I2C_ADDR, buffer, 2, 10000))
 8001662:	2180      	movs	r1, #128	@ 0x80
 8001664:	f107 0208 	add.w	r2, r7, #8
 8001668:	f242 7310 	movw	r3, #10000	@ 0x2710
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2302      	movs	r3, #2
 8001670:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <r_both_Si7021+0xd4>)
 8001672:	f004 fb89 	bl	8005d88 <HAL_I2C_Master_Receive>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <r_both_Si7021+0xae>
    return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e00e      	b.n	80016a0 <r_both_Si7021+0xcc>

  code = convert_to_uint16(buffer);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff5e 	bl	8001548 <convert_to_uint16>
 800168c:	4603      	mov	r3, r0
 800168e:	81fb      	strh	r3, [r7, #14]
  *temperature = process_temp_code(code);
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fed8 	bl	8001448 <process_temp_code>
 8001698:	4602      	mov	r2, r0
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	601a      	str	r2, [r3, #0]

  return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200001d0 	.word	0x200001d0

080016ac <enable_heater_Si7021>:
  else
    return 0;
}

int8_t enable_heater_Si7021(uint8_t val)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  int8_t rv;
  uint8_t temp = user_register_1;
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <enable_heater_Si7021+0x70>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	73bb      	strb	r3, [r7, #14]

  if(val == 0)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <enable_heater_Si7021+0x36>
  {
    user_register_1 &= ~(1<<HTRE);
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <enable_heater_Si7021+0x70>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <enable_heater_Si7021+0x70>)
 80016ce:	701a      	strb	r2, [r3, #0]
    rv = w_reg(user_register_1, User_Register_1);
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <enable_heater_Si7021+0x70>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff4a 	bl	8001570 <w_reg>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e00e      	b.n	8001700 <enable_heater_Si7021+0x54>
  }
  else
  {
    user_register_1 |= (1<<HTRE);
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <enable_heater_Si7021+0x70>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <enable_heater_Si7021+0x70>)
 80016ee:	701a      	strb	r2, [r3, #0]
    rv = w_reg(user_register_1, User_Register_1);
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <enable_heater_Si7021+0x70>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff3a 	bl	8001570 <w_reg>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
  }

  /* in case of write error restore local copy of the register value */
  if(rv < 0)
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	2b00      	cmp	r3, #0
 8001706:	da02      	bge.n	800170e <enable_heater_Si7021+0x62>
    user_register_1 = temp;
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <enable_heater_Si7021+0x70>)
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	7013      	strb	r3, [r2, #0]

  return rv;
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000000 	.word	0x20000000

08001720 <rst_Si7021>:

int8_t rst_Si7021()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af02      	add	r7, sp, #8
  uint8_t cmd = Si7021_Reset;
 8001726:	23fe      	movs	r3, #254	@ 0xfe
 8001728:	71fb      	strb	r3, [r7, #7]

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	1dfa      	adds	r2, r7, #7
 800172e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	4807      	ldr	r0, [pc, #28]	@ (8001754 <rst_Si7021+0x34>)
 8001738:	f004 fa0e 	bl	8005b58 <HAL_I2C_Master_Transmit>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <rst_Si7021+0x28>
    return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e000      	b.n	800174a <rst_Si7021+0x2a>
  else
    return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001d0 	.word	0x200001d0

08001758 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001764:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001774:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001794:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	43db      	mvns	r3, r3
 800179a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800179e:	4013      	ands	r3, r2
 80017a0:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80017b0:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <MX_ADC_Init+0x94>)
 80017b2:	4a24      	ldr	r2, [pc, #144]	@ (8001844 <MX_ADC_Init+0x98>)
 80017b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <MX_ADC_Init+0x94>)
 80017b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80017bc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <MX_ADC_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <MX_ADC_Init+0x94>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <MX_ADC_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <MX_ADC_Init+0x94>)
 80017d2:	2204      	movs	r2, #4
 80017d4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_ADC_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_ADC_Init+0x94>)
 80017de:	2200      	movs	r2, #0
 80017e0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MX_ADC_Init+0x94>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_ADC_Init+0x94>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_ADC_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_ADC_Init+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <MX_ADC_Init+0x94>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_ADC_Init+0x94>)
 8001804:	2200      	movs	r2, #0
 8001806:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <MX_ADC_Init+0x94>)
 800180c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001810:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001812:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <MX_ADC_Init+0x94>)
 8001814:	2207      	movs	r2, #7
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MX_ADC_Init+0x94>)
 800181a:	2207      	movs	r2, #7
 800181c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <MX_ADC_Init+0x94>)
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_ADC_Init+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <MX_ADC_Init+0x94>)
 800182e:	f002 f899 	bl	8003964 <HAL_ADC_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001838:	f000 fd1e 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000168 	.word	0x20000168
 8001844:	40012400 	.word	0x40012400

08001848 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a05      	ldr	r2, [pc, #20]	@ (800186c <HAL_ADC_MspInit+0x24>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d103      	bne.n	8001862 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800185a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800185e:	f7ff ff7b 	bl	8001758 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40012400 	.word	0x40012400

08001870 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <HAL_ADC_MspDeInit+0x24>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d103      	bne.n	800188a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001882:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001886:	f7ff ff7f 	bl	8001788 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40012400 	.word	0x40012400

08001898 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <SYS_InitMeasurement+0x14>)
 800189e:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <SYS_InitMeasurement+0x18>)
 80018a0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000168 	.word	0x20000168
 80018b0:	40012400 	.word	0x40012400

080018b4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80018c2:	4813      	ldr	r0, [pc, #76]	@ (8001910 <SYS_GetBatteryLevel+0x5c>)
 80018c4:	f000 f82a 	bl	800191c <ADC_ReadChannels>
 80018c8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	80fb      	strh	r3, [r7, #6]
 80018d4:	e016      	b.n	8001904 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <SYS_GetBatteryLevel+0x60>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00b      	beq.n	80018fa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <SYS_GetBatteryLevel+0x60>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80018ec:	fb03 f202 	mul.w	r2, r3, r2
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	80fb      	strh	r3, [r7, #6]
 80018f8:	e004      	b.n	8001904 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80018fa:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <SYS_GetBatteryLevel+0x64>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001904:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	b4002000 	.word	0xb4002000
 8001914:	1fff75aa 	.word	0x1fff75aa
 8001918:	004c08d8 	.word	0x004c08d8

0800191c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001934:	f7ff ff3a 	bl	80017ac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001938:	481a      	ldr	r0, [pc, #104]	@ (80019a4 <ADC_ReadChannels+0x88>)
 800193a:	f002 fe32 	bl	80045a2 <HAL_ADCEx_Calibration_Start>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001944:	f000 fc98 	bl	8002278 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4619      	mov	r1, r3
 800195a:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <ADC_ReadChannels+0x88>)
 800195c:	f002 fb3e 	bl	8003fdc <HAL_ADC_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001966:	f000 fc87 	bl	8002278 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800196a:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <ADC_ReadChannels+0x88>)
 800196c:	f002 fa1a 	bl	8003da4 <HAL_ADC_Start>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001976:	f000 fc7f 	bl	8002278 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800197a:	f04f 31ff 	mov.w	r1, #4294967295
 800197e:	4809      	ldr	r0, [pc, #36]	@ (80019a4 <ADC_ReadChannels+0x88>)
 8001980:	f002 fa88 	bl	8003e94 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001984:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <ADC_ReadChannels+0x88>)
 8001986:	f002 fa53 	bl	8003e30 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800198a:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <ADC_ReadChannels+0x88>)
 800198c:	f002 fb19 	bl	8003fc2 <HAL_ADC_GetValue>
 8001990:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001992:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <ADC_ReadChannels+0x88>)
 8001994:	f002 f97a 	bl	8003c8c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001998:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000168 	.word	0x20000168

080019a8 <LL_AHB1_GRP1_EnableClock>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019dc:	2004      	movs	r0, #4
 80019de:	f7ff ffe3 	bl	80019a8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7ff ffe0 	bl	80019a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2102      	movs	r1, #2
 80019ec:	200b      	movs	r0, #11
 80019ee:	f002 ff7e 	bl	80048ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019f2:	200b      	movs	r0, #11
 80019f4:	f002 ff95 	bl	8004922 <HAL_NVIC_EnableIRQ>

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a08:	23ff      	movs	r3, #255	@ 0xff
 8001a0a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a12:	d311      	bcc.n	8001a38 <FLASH_IF_Write+0x3c>
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <FLASH_IF_Write+0x48>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	029a      	lsls	r2, r3, #10
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <FLASH_IF_Write+0x4c>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001a22:	3b01      	subs	r3, #1
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d306      	bcc.n	8001a38 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f85a 	bl	8001ae8 <FLASH_IF_INT_Write>
 8001a34:	4603      	mov	r3, r0
 8001a36:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	1fff75e0 	.word	0x1fff75e0
 8001a48:	03fffc00 	.word	0x03fffc00

08001a4c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a58:	23ff      	movs	r3, #255	@ 0xff
 8001a5a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a62:	d311      	bcc.n	8001a88 <FLASH_IF_Read+0x3c>
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <FLASH_IF_Read+0x48>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	029a      	lsls	r2, r3, #10
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <FLASH_IF_Read+0x4c>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001a72:	3b01      	subs	r3, #1
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d306      	bcc.n	8001a88 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f93a 	bl	8001cf8 <FLASH_IF_INT_Read>
 8001a84:	4603      	mov	r3, r0
 8001a86:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	1fff75e0 	.word	0x1fff75e0
 8001a98:	03fffc00 	.word	0x03fffc00

08001a9c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001aa6:	23ff      	movs	r3, #255	@ 0xff
 8001aa8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ab0:	d310      	bcc.n	8001ad4 <FLASH_IF_Erase+0x38>
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <FLASH_IF_Erase+0x44>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	029a      	lsls	r2, r3, #10
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <FLASH_IF_Erase+0x48>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d305      	bcc.n	8001ad4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f932 	bl	8001d34 <FLASH_IF_INT_Erase>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	1fff75e0 	.word	0x1fff75e0
 8001ae4:	03fffc00 	.word	0x03fffc00

08001ae8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b090      	sub	sp, #64	@ 0x40
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00c      	beq.n	8001b26 <FLASH_IF_INT_Write+0x3e>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <FLASH_IF_INT_Write+0x3e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d104      	bne.n	8001b26 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001b26:	f06f 0305 	mvn.w	r3, #5
 8001b2a:	e0da      	b.n	8001ce2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001b2c:	f000 f992 	bl	8001e54 <FLASH_IF_INT_Clear_Error>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001b36:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80cf 	bne.w	8001cde <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001b40:	f003 fb3a 	bl	80051b8 <HAL_FLASH_Unlock>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 80c6 	bne.w	8001cd8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001b52:	4b66      	ldr	r3, [pc, #408]	@ (8001cec <FLASH_IF_INT_Write+0x204>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0299      	lsls	r1, r3, #10
 8001b58:	4b65      	ldr	r3, [pc, #404]	@ (8001cf0 <FLASH_IF_INT_Write+0x208>)
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	0adb      	lsrs	r3, r3, #11
 8001b68:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a5d      	ldr	r2, [pc, #372]	@ (8001cec <FLASH_IF_INT_Write+0x204>)
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	0291      	lsls	r1, r2, #10
 8001b7c:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf0 <FLASH_IF_INT_Write+0x208>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b84:	fb01 f202 	mul.w	r2, r1, r2
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	0ada      	lsrs	r2, r3, #11
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d905      	bls.n	8001ba6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001ba4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001baa:	e089      	b.n	8001cc0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bae:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001bb2:	02db      	lsls	r3, r3, #11
 8001bb4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001bb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f925 	bl	8001e08 <FLASH_IF_INT_IsEmpty>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d031      	beq.n	8001c28 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <FLASH_IF_INT_Write+0x20c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001bcc:	23fa      	movs	r3, #250	@ 0xfa
 8001bce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001bd2:	e07e      	b.n	8001cd2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001bd4:	4b47      	ldr	r3, [pc, #284]	@ (8001cf4 <FLASH_IF_INT_Write+0x20c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f88a 	bl	8001cf8 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001be4:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <FLASH_IF_INT_Write+0x20c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bee:	4413      	add	r3, r2
 8001bf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f01a fafc 	bl	801c1f4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f896 	bl	8001d34 <FLASH_IF_INT_Erase>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001c0e:	23fe      	movs	r3, #254	@ 0xfe
 8001c10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001c14:	e05d      	b.n	8001cd2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001c1a:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <FLASH_IF_INT_Write+0x20c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001c20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e005      	b.n	8001c34 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c2e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c32:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c38:	e026      	b.n	8001c88 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001c3a:	6a3a      	ldr	r2, [r7, #32]
 8001c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c46:	2001      	movs	r0, #1
 8001c48:	f003 fa72 	bl	8005130 <HAL_FLASH_Program>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d113      	bne.n	8001c7a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c58:	6a3a      	ldr	r2, [r7, #32]
 8001c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5c:	4413      	add	r3, r2
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	4299      	cmp	r1, r3
 8001c64:	bf08      	it	eq
 8001c66:	4290      	cmpeq	r0, r2
 8001c68:	d003      	beq.n	8001c72 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001c6a:	23fc      	movs	r3, #252	@ 0xfc
 8001c6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001c70:	e00e      	b.n	8001c90 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	3308      	adds	r3, #8
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c78:	e003      	b.n	8001c82 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001c7a:	23fc      	movs	r3, #252	@ 0xfc
 8001c7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001c80:	e006      	b.n	8001c90 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c84:	3308      	adds	r3, #8
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3d4      	bcc.n	8001c3a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001c90:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11b      	bne.n	8001cd0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001c98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9c:	4413      	add	r3, r2
 8001c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca4:	4413      	add	r3, r2
 8001ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cb2:	bf28      	it	cs
 8001cb4:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f4ff af6f 	bcc.w	8001bac <FLASH_IF_INT_Write+0xc4>
 8001cce:	e000      	b.n	8001cd2 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001cd0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001cd2:	f003 fa93 	bl	80051fc <HAL_FLASH_Lock>
 8001cd6:	e002      	b.n	8001cde <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001cd8:	23fb      	movs	r3, #251	@ 0xfb
 8001cda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001cde:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3740      	adds	r7, #64	@ 0x40
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	1fff75e0 	.word	0x1fff75e0
 8001cf0:	03fffc00 	.word	0x03fffc00
 8001cf4:	200001cc 	.word	0x200001cc

08001cf8 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <FLASH_IF_INT_Read+0x1c>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001d14:	f06f 0305 	mvn.w	r3, #5
 8001d18:	e008      	b.n	8001d2c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f01a fa66 	bl	801c1f4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001d54:	f06f 0305 	mvn.w	r3, #5
 8001d58:	e04e      	b.n	8001df8 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001d5a:	f000 f87b 	bl	8001e54 <FLASH_IF_INT_Clear_Error>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001d62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d144      	bne.n	8001df4 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001d6a:	f003 fa25 	bl	80051b8 <HAL_FLASH_Unlock>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d13d      	bne.n	8001df0 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d74:	2302      	movs	r3, #2
 8001d76:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <FLASH_IF_INT_Erase+0xcc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0299      	lsls	r1, r3, #10
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <FLASH_IF_INT_Erase+0xd0>)
 8001d86:	400b      	ands	r3, r1
 8001d88:	fbb2 f1f3 	udiv	r1, r2, r3
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	0adb      	lsrs	r3, r3, #11
 8001d94:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001da0:	3b01      	subs	r3, #1
 8001da2:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <FLASH_IF_INT_Erase+0xcc>)
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	0291      	lsls	r1, r2, #10
 8001da8:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <FLASH_IF_INT_Erase+0xd0>)
 8001daa:	400a      	ands	r2, r1
 8001dac:	fbb3 f1f2 	udiv	r1, r3, r2
 8001db0:	fb01 f202 	mul.w	r2, r1, r2
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	0ada      	lsrs	r2, r3, #11
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001dc0:	f107 0214 	add.w	r2, r7, #20
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 faf6 	bl	80053bc <HAL_FLASHEx_Erase>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001dd4:	7fbb      	ldrb	r3, [r7, #30]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001dda:	7fbb      	ldrb	r3, [r7, #30]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d101      	bne.n	8001de4 <FLASH_IF_INT_Erase+0xb0>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e001      	b.n	8001de8 <FLASH_IF_INT_Erase+0xb4>
 8001de4:	f06f 0301 	mvn.w	r3, #1
 8001de8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001dea:	f003 fa07 	bl	80051fc <HAL_FLASH_Lock>
 8001dee:	e001      	b.n	8001df4 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001df0:	23fb      	movs	r3, #251	@ 0xfb
 8001df2:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001df4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	1fff75e0 	.word	0x1fff75e0
 8001e04:	03fffc00 	.word	0x03fffc00

08001e08 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	e011      	b.n	8001e40 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e26:	bf08      	it	eq
 8001e28:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001e2c:	d002      	beq.n	8001e34 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
      break;
 8001e32:	e009      	b.n	8001e48 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3308      	adds	r3, #8
 8001e38:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3308      	adds	r3, #8
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3e9      	bcc.n	8001e1c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001e48:	68fb      	ldr	r3, [r7, #12]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001e5a:	23fb      	movs	r3, #251	@ 0xfb
 8001e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001e5e:	f003 f9ab 	bl	80051b8 <HAL_FLASH_Unlock>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d110      	bne.n	8001e8a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e6e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e76:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001e7a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001e7c:	f003 f9be 	bl	80051fc <HAL_FLASH_Lock>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	58004000 	.word	0x58004000

08001e9c <LL_AHB2_GRP1_EnableClock>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001eaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee0:	2004      	movs	r0, #4
 8001ee2:	f7ff ffdb 	bl	8001e9c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7ff ffd8 	bl	8001e9c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff ffd5 	bl	8001e9c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 8001ef8:	4821      	ldr	r0, [pc, #132]	@ (8001f80 <MX_GPIO_Init+0xb4>)
 8001efa:	f003 fd61 	bl	80059c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2120      	movs	r1, #32
 8001f02:	481f      	ldr	r0, [pc, #124]	@ (8001f80 <MX_GPIO_Init+0xb4>)
 8001f04:	f003 fd5c 	bl	80059c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2131      	movs	r1, #49	@ 0x31
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f10:	f003 fd56 	bl	80059c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DBG3_Pin DBG4_Pin LED2_Pin DBG2_Pin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001f14:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001f18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4815      	ldr	r0, [pc, #84]	@ (8001f80 <MX_GPIO_Init+0xb4>)
 8001f2c:	f003 fb1a 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG1_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001f30:	2331      	movs	r3, #49	@ 0x31
 8001f32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f48:	f003 fb0c 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001f4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4807      	ldr	r0, [pc, #28]	@ (8001f80 <MX_GPIO_Init+0xb4>)
 8001f62:	f003 faff 	bl	8005564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2029      	movs	r0, #41	@ 0x29
 8001f6c:	f002 fcbf 	bl	80048ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f70:	2029      	movs	r0, #41	@ 0x29
 8001f72:	f002 fcd6 	bl	8004922 <HAL_NVIC_EnableIRQ>

}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	48000400 	.word	0x48000400

08001f84 <LL_AHB2_GRP1_EnableClock>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <LL_APB1_GRP1_EnableClock>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <MX_I2C3_Init+0x74>)
 8001fea:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <MX_I2C3_Init+0x78>)
 8001fec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10805D88;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_I2C3_Init+0x74>)
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <MX_I2C3_Init+0x7c>)
 8001ff2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MX_I2C3_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <MX_I2C3_Init+0x74>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_I2C3_Init+0x74>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_I2C3_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800201e:	480e      	ldr	r0, [pc, #56]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002020:	f003 fcfe 	bl	8005a20 <HAL_I2C_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800202a:	f000 f925 	bl	8002278 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800202e:	2100      	movs	r1, #0
 8002030:	4809      	ldr	r0, [pc, #36]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002032:	f004 fba9 	bl	8006788 <HAL_I2CEx_ConfigAnalogFilter>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800203c:	f000 f91c 	bl	8002278 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002040:	2100      	movs	r1, #0
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002044:	f004 fbea 	bl	800681c <HAL_I2CEx_ConfigDigitalFilter>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800204e:	f000 f913 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200001d0 	.word	0x200001d0
 800205c:	40005c00 	.word	0x40005c00
 8002060:	10805d88 	.word	0x10805d88

08002064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b096      	sub	sp, #88	@ 0x58
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2238      	movs	r2, #56	@ 0x38
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f01b fb11 	bl	801d6ac <memset>
  if(i2cHandle->Instance==I2C3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <HAL_I2C_MspInit+0xb0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d13a      	bne.n	800210a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002094:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002098:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800209a:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 fe75 	bl	8007d94 <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80020b0:	f000 f8e2 	bl	8002278 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7ff ff65 	bl	8001f84 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ba:	2004      	movs	r0, #4
 80020bc:	f7ff ff62 	bl	8001f84 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB14     ------> I2C3_SDA
    PC0     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020c4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c6:	2312      	movs	r3, #18
 80020c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020d2:	2304      	movs	r3, #4
 80020d4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020da:	4619      	mov	r1, r3
 80020dc:	480e      	ldr	r0, [pc, #56]	@ (8002118 <HAL_I2C_MspInit+0xb4>)
 80020de:	f003 fa41 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e2:	2301      	movs	r3, #1
 80020e4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e6:	2312      	movs	r3, #18
 80020e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020f2:	2304      	movs	r3, #4
 80020f4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020fa:	4619      	mov	r1, r3
 80020fc:	4807      	ldr	r0, [pc, #28]	@ (800211c <HAL_I2C_MspInit+0xb8>)
 80020fe:	f003 fa31 	bl	8005564 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002102:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002106:	f7ff ff55 	bl	8001fb4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3758      	adds	r7, #88	@ 0x58
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40005c00 	.word	0x40005c00
 8002118:	48000400 	.word	0x48000400
 800211c:	48000800 	.word	0x48000800

08002120 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002130:	f023 0218 	bic.w	r2, r3, #24
 8002134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
	...

0800214c <SI7201_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SI7201_Init()
  {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
#ifdef SI7021_H_
  int8_t enable_status = enable_heater_Si7021(1);
 8002152:	2001      	movs	r0, #1
 8002154:	f7ff faaa 	bl	80016ac <enable_heater_Si7021>
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]

  int8_t reset_status = rst_Si7021();
 800215c:	f7ff fae0 	bl	8001720 <rst_Si7021>
 8002160:	4603      	mov	r3, r0
 8002162:	71bb      	strb	r3, [r7, #6]

  if(enable_status == 0 && reset_status == 0){
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <SI7201_Init+0x36>
 800216c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <SI7201_Init+0x36>
  	  APP_LOG(0, VLEVEL_M, "Si7021 status => OK\n");
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <SI7201_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2002      	movs	r0, #2
 800217c:	f01b f81e 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
 8002180:	e006      	b.n	8002190 <SI7201_Init+0x44>
    }
    else
    {
      APP_LOG(0, VLEVEL_M, "Si7021 status => Error\n");
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <SI7201_Init+0x50>)
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2002      	movs	r0, #2
 800218a:	f01b f817 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    }
#endif
  }
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	0801d820 	.word	0x0801d820
 800219c:	0801d838 	.word	0x0801d838

080021a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a4:	f001 f9f0 	bl	8003588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a8:	f000 f80c 	bl	80021c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ac:	f7ff fe8e 	bl	8001ecc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80021b0:	f009 f992 	bl	800b4d8 <MX_LoRaWAN_Init>
  MX_I2C3_Init();
 80021b4:	f7ff ff16 	bl	8001fe4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SI7201_Init();
 80021b8:	f7ff ffc8 	bl	800214c <SI7201_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80021bc:	f009 f994 	bl	800b4e8 <MX_LoRaWAN_Process>
 80021c0:	e7fc      	b.n	80021bc <main+0x1c>
	...

080021c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b09a      	sub	sp, #104	@ 0x68
 80021c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ca:	f107 0320 	add.w	r3, r7, #32
 80021ce:	2248      	movs	r2, #72	@ 0x48
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f01b fa6a 	bl	801d6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
 80021e8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021ea:	f004 fb63 	bl	80068b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7ff ff96 	bl	8002120 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <SystemClock_Config+0xb0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002274 <SystemClock_Config+0xb0>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <SystemClock_Config+0xb0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002210:	2324      	movs	r3, #36	@ 0x24
 8002212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002214:	2381      	movs	r3, #129	@ 0x81
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002218:	2301      	movs	r3, #1
 800221a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002220:	23b0      	movs	r3, #176	@ 0xb0
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002224:	2300      	movs	r3, #0
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fe8d 	bl	8006f4c <HAL_RCC_OscConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002238:	f000 f81e 	bl	8002278 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800223c:	234f      	movs	r3, #79	@ 0x4f
 800223e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	2102      	movs	r1, #2
 800225a:	4618      	mov	r0, r3
 800225c:	f005 f9f8 	bl	8007650 <HAL_RCC_ClockConfig>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002266:	f000 f807 	bl	8002278 <Error_Handler>
  }
}
 800226a:	bf00      	nop
 800226c:	3768      	adds	r7, #104	@ 0x68
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	58000400 	.word	0x58000400

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <Error_Handler+0x8>

08002284 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <LL_APB1_GRP1_EnableClock>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022c8:	68fb      	ldr	r3, [r7, #12]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	@ 0x30
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	222c      	movs	r2, #44	@ 0x2c
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f01b f9e3 	bl	801d6ac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <MX_RTC_Init+0x9c>)
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <MX_RTC_Init+0xa0>)
 80022ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80022ec:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <MX_RTC_Init+0x9c>)
 80022ee:	221f      	movs	r2, #31
 80022f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <MX_RTC_Init+0x9c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <MX_RTC_Init+0x9c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <MX_RTC_Init+0x9c>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <MX_RTC_Init+0x9c>)
 8002306:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800230a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <MX_RTC_Init+0x9c>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <MX_RTC_Init+0x9c>)
 8002314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800231a:	4815      	ldr	r0, [pc, #84]	@ (8002370 <MX_RTC_Init+0x9c>)
 800231c:	f005 fe54 	bl	8007fc8 <HAL_RTC_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002326:	f7ff ffa7 	bl	8002278 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800232a:	4811      	ldr	r0, [pc, #68]	@ (8002370 <MX_RTC_Init+0x9c>)
 800232c:	f006 f94a 	bl	80085c4 <HAL_RTCEx_SetSSRU_IT>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002336:	f7ff ff9f 	bl	8002278 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002346:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800234a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800234c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2200      	movs	r2, #0
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	@ (8002370 <MX_RTC_Init+0x9c>)
 800235a:	f005 feb7 	bl	80080cc <HAL_RTC_SetAlarm_IT>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002364:	f7ff ff88 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3730      	adds	r7, #48	@ 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000224 	.word	0x20000224
 8002374:	40002800 	.word	0x40002800

08002378 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b090      	sub	sp, #64	@ 0x40
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	2238      	movs	r2, #56	@ 0x38
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f01b f98f 	bl	801d6ac <memset>
  if(rtcHandle->Instance==RTC)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a16      	ldr	r2, [pc, #88]	@ (80023ec <HAL_RTC_MspInit+0x74>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d125      	bne.n	80023e4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800239c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800239e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 fcf3 	bl	8007d94 <HAL_RCCEx_PeriphCLKConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80023b4:	f7ff ff60 	bl	8002278 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023b8:	f7ff ff64 	bl	8002284 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80023bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80023c0:	f7ff ff70 	bl	80022a4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	2002      	movs	r0, #2
 80023ca:	f002 fa90 	bl	80048ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80023ce:	2002      	movs	r0, #2
 80023d0:	f002 faa7 	bl	8004922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	202a      	movs	r0, #42	@ 0x2a
 80023da:	f002 fa88 	bl	80048ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023de:	202a      	movs	r0, #42	@ 0x2a
 80023e0:	f002 fa9f 	bl	8004922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023e4:	bf00      	nop
 80023e6:	3740      	adds	r7, #64	@ 0x40
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40002800 	.word	0x40002800

080023f0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	58000400 	.word	0x58000400

08002408 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002424:	f001 f8d0 	bl	80035c8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002428:	f7ff ffe2 	bl	80023f0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800242c:	2001      	movs	r0, #1
 800242e:	f004 fad3 	bl	80069d8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}

08002436 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800243a:	f001 f8d3 	bl	80035e4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800243e:	f000 ff53 	bl	80032e8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}

08002446 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800244a:	f001 f8bd 	bl	80035c8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800244e:	2101      	movs	r1, #1
 8002450:	2000      	movs	r0, #0
 8002452:	f004 fa3d 	bl	80068d0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}

0800245a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800245e:	f001 f8c1 	bl	80035e4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002476:	bf00      	nop
 8002478:	e7fd      	b.n	8002476 <NMI_Handler+0x4>

0800247a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247e:	bf00      	nop
 8002480:	e7fd      	b.n	800247e <HardFault_Handler+0x4>

08002482 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002486:	bf00      	nop
 8002488:	e7fd      	b.n	8002486 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	bf00      	nop
 8002490:	e7fd      	b.n	800248e <BusFault_Handler+0x4>

08002492 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002496:	bf00      	nop
 8002498:	e7fd      	b.n	8002496 <UsageFault_Handler+0x4>

0800249a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
	...

080024cc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80024d2:	f006 f8b3 	bl	800863c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000224 	.word	0x20000224

080024e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <DMA1_Channel1_IRQHandler+0x10>)
 80024e6:	f002 fcb3 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000304 	.word	0x20000304

080024f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <USART1_IRQHandler+0x10>)
 80024fa:	f006 feed 	bl	80092d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000270 	.word	0x20000270

08002508 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800250c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002510:	f003 fa6e 	bl	80059f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <RTC_Alarm_IRQHandler+0x10>)
 800251e:	f005 ff3d 	bl	800839c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000224 	.word	0x20000224

0800252c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002532:	f006 fbf1 	bl	8008d18 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000025c 	.word	0x2000025c

08002540 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <MX_SUBGHZ_Init+0x20>)
 8002576:	2208      	movs	r2, #8
 8002578:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	@ (8002590 <MX_SUBGHZ_Init+0x20>)
 800257c:	f006 f94a 	bl	8008814 <HAL_SUBGHZ_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002586:	f7ff fe77 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000025c 	.word	0x2000025c

08002594 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff ffcf 	bl	8002540 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2032      	movs	r0, #50	@ 0x32
 80025a8:	f002 f9a1 	bl	80048ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80025ac:	2032      	movs	r0, #50	@ 0x32
 80025ae:	f002 f9b8 	bl	8004922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <LL_RCC_SetClkAfterWakeFromStop>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80025cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <LL_FLASH_GetUDN+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	1fff7580 	.word	0x1fff7580

080025f4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <LL_FLASH_GetDeviceID+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	1fff7584 	.word	0x1fff7584

0800260c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <LL_FLASH_GetSTCompanyID+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0a1b      	lsrs	r3, r3, #8
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	1fff7584 	.word	0x1fff7584

08002624 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002628:	2000      	movs	r0, #0
 800262a:	f7ff ffc6 	bl	80025ba <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800262e:	f01a fb07 	bl	801cc40 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <SystemApp_Init+0x48>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002638:	f000 f98c 	bl	8002954 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800263c:	f01a fd90 	bl	801d160 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002640:	480b      	ldr	r0, [pc, #44]	@ (8002670 <SystemApp_Init+0x4c>)
 8002642:	f01a fe3b 	bl	801d2bc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002646:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <SystemApp_Init+0x50>)
 8002648:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800264c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800264e:	2002      	movs	r0, #2
 8002650:	f01a fe42 	bl	801d2d8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002654:	f7ff f920 	bl	8001898 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002658:	f000 fa16 	bl	8002a88 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800265c:	f019 fd24 	bl	801c0a8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002660:	2101      	movs	r1, #1
 8002662:	2001      	movs	r0, #1
 8002664:	f019 fd60 	bl	801c128 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000268 	.word	0x20000268
 8002670:	08002845 	.word	0x08002845
 8002674:	58004000 	.word	0x58004000

08002678 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800267c:	f019 fd84 	bl	801c188 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800268e:	f7ff f911 	bl	80018b4 <SYS_GetBatteryLevel>
 8002692:	4603      	mov	r3, r0
 8002694:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002696:	88bb      	ldrh	r3, [r7, #4]
 8002698:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800269c:	4293      	cmp	r3, r2
 800269e:	d902      	bls.n	80026a6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80026a0:	23fe      	movs	r3, #254	@ 0xfe
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	e014      	b.n	80026d0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80026a6:	88bb      	ldrh	r3, [r7, #4]
 80026a8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80026ac:	d202      	bcs.n	80026b4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	71fb      	strb	r3, [r7, #7]
 80026b2:	e00d      	b.n	80026d0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80026ba:	461a      	mov	r2, r3
 80026bc:	4613      	mov	r3, r2
 80026be:	01db      	lsls	r3, r3, #7
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <GetBatteryLevel+0x58>)
 80026c8:	fba3 2302 	umull	r2, r3, r3, r2
 80026cc:	09db      	lsrs	r3, r3, #7
 80026ce:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80026d0:	79fb      	ldrb	r3, [r7, #7]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	1b4e81b5 	.word	0x1b4e81b5

080026e0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f98d 	bl	8002a0c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fce9 	bl	80010cc <__aeabi_f2iz>
 80026fa:	4603      	mov	r3, r0
 80026fc:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80026fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800270a:	b590      	push	{r4, r7, lr}
 800270c:	b087      	sub	sp, #28
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002716:	f7ff ff63 	bl	80025e0 <LL_FLASH_GetUDN>
 800271a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d138      	bne.n	8002796 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002724:	f000 ff6c 	bl	8003600 <HAL_GetUIDw0>
 8002728:	4604      	mov	r4, r0
 800272a:	f000 ff7d 	bl	8003628 <HAL_GetUIDw2>
 800272e:	4603      	mov	r3, r0
 8002730:	4423      	add	r3, r4
 8002732:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002734:	f000 ff6e 	bl	8003614 <HAL_GetUIDw1>
 8002738:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	0e1a      	lsrs	r2, r3, #24
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3307      	adds	r3, #7
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	0c1a      	lsrs	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3306      	adds	r3, #6
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	0a1a      	lsrs	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3305      	adds	r3, #5
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0e1a      	lsrs	r2, r3, #24
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3303      	adds	r3, #3
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	0c1a      	lsrs	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3302      	adds	r3, #2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	0a1a      	lsrs	r2, r3, #8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3301      	adds	r3, #1
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002794:	e031      	b.n	80027fa <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3307      	adds	r3, #7
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	0a1a      	lsrs	r2, r3, #8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3306      	adds	r3, #6
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	0c1a      	lsrs	r2, r3, #16
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3305      	adds	r3, #5
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	0e1a      	lsrs	r2, r3, #24
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80027c4:	f7ff ff16 	bl	80025f4 <LL_FLASH_GetDeviceID>
 80027c8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3303      	adds	r3, #3
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80027d4:	f7ff ff1a 	bl	800260c <LL_FLASH_GetSTCompanyID>
 80027d8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3302      	adds	r3, #2
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	0a1a      	lsrs	r2, r3, #8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3301      	adds	r3, #1
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	701a      	strb	r2, [r3, #0]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}

08002802 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002802:	b590      	push	{r4, r7, lr}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800280a:	f7ff fee9 	bl	80025e0 <LL_FLASH_GetUDN>
 800280e:	4602      	mov	r2, r0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d10d      	bne.n	800283a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800281e:	f000 feef 	bl	8003600 <HAL_GetUIDw0>
 8002822:	4604      	mov	r4, r0
 8002824:	f000 fef6 	bl	8003614 <HAL_GetUIDw1>
 8002828:	4603      	mov	r3, r0
 800282a:	405c      	eors	r4, r3
 800282c:	f000 fefc 	bl	8003628 <HAL_GetUIDw2>
 8002830:	4603      	mov	r3, r0
 8002832:	ea84 0203 	eor.w	r2, r4, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bd90      	pop	{r4, r7, pc}
	...

08002844 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af02      	add	r7, sp, #8
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	4618      	mov	r0, r3
 8002854:	f019 fda8 	bl	801c3a8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	@ (8002880 <TimestampNow+0x3c>)
 8002862:	2110      	movs	r1, #16
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f81d 	bl	80028a4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fd fc84 	bl	8000178 <strlen>
 8002870:	4603      	mov	r3, r0
 8002872:	b29a      	uxth	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	0801d850 	.word	0x0801d850

08002884 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002888:	2101      	movs	r1, #1
 800288a:	2002      	movs	r0, #2
 800288c:	f019 fc1c 	bl	801c0c8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}

08002894 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002898:	2100      	movs	r1, #0
 800289a:	2002      	movs	r0, #2
 800289c:	f019 fc14 	bl	801c0c8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80028a4:	b40c      	push	{r2, r3}
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f019 fedf 	bl	801c680 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028cc:	b002      	add	sp, #8
 80028ce:	4770      	bx	lr

080028d0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_GetTick+0x24>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80028f6:	f000 f993 	bl	8002c20 <TIMER_IF_GetTimerValue>
 80028fa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000268 	.word	0x20000268

0800290c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fa09 	bl	8002d2e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <LL_AHB2_GRP1_EnableClock>:
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002930:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4313      	orrs	r3, r2
 800293a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002940:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002948:	68fb      	ldr	r3, [r7, #12]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800295a:	f000 fe6f 	bl	800363c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800295e:	f000 fe73 	bl	8003648 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002962:	f000 fe77 	bl	8003654 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002974:	2301      	movs	r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002980:	2001      	movs	r0, #1
 8002982:	f7ff ffcf 	bl	8002924 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002986:	2002      	movs	r0, #2
 8002988:	f7ff ffcc 	bl	8002924 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800298c:	2002      	movs	r0, #2
 800298e:	f7ff ffc9 	bl	8002924 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002992:	2002      	movs	r0, #2
 8002994:	f7ff ffc6 	bl	8002924 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002998:	2301      	movs	r3, #1
 800299a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029a4:	f002 fdde 	bl	8005564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80029a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029ac:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4815      	ldr	r0, [pc, #84]	@ (8002a08 <DBG_Init+0xb4>)
 80029b4:	f002 fdd6 	bl	8005564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80029b8:	2308      	movs	r3, #8
 80029ba:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4811      	ldr	r0, [pc, #68]	@ (8002a08 <DBG_Init+0xb4>)
 80029c2:	f002 fdcf 	bl	8005564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80029c6:	2310      	movs	r3, #16
 80029c8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	480e      	ldr	r0, [pc, #56]	@ (8002a08 <DBG_Init+0xb4>)
 80029d0:	f002 fdc8 	bl	8005564 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2101      	movs	r1, #1
 80029d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029dc:	f002 fff0 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029e6:	4808      	ldr	r0, [pc, #32]	@ (8002a08 <DBG_Init+0xb4>)
 80029e8:	f002 ffea 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2108      	movs	r1, #8
 80029f0:	4805      	ldr	r0, [pc, #20]	@ (8002a08 <DBG_Init+0xb4>)
 80029f2:	f002 ffe5 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2110      	movs	r1, #16
 80029fa:	4803      	ldr	r0, [pc, #12]	@ (8002a08 <DBG_Init+0xb4>)
 80029fc:	f002 ffe0 	bl	80059c0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002a00:	bf00      	nop
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	48000400 	.word	0x48000400

08002a0c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002a14:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <EnvSensors_Read+0x64>)
 8002a16:	60fb      	str	r3, [r7, #12]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002a18:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <EnvSensors_Read+0x68>)
 8002a1a:	60bb      	str	r3, [r7, #8]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	@ (8002a78 <EnvSensors_Read+0x6c>)
 8002a1e:	617b      	str	r3, [r7, #20]
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

#ifdef SI7021_H_
  int8_t status = r_both_Si7021(&HUMIDITY_Value, &TEMPERATURE_Value);
 8002a20:	f107 0208 	add.w	r2, r7, #8
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fdd2 	bl	80015d4 <r_both_Si7021>
 8002a30:	4603      	mov	r3, r0
 8002a32:	74fb      	strb	r3, [r7, #19]

  if(status != 0)
 8002a34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <EnvSensors_Read+0x3c>
  {
	  APP_LOG(1, VLEVEL_M, "Read temperature & humidity error\n");
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <EnvSensors_Read+0x70>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2100      	movs	r1, #0
 8002a42:	2002      	movs	r0, #2
 8002a44:	f01a fbba 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
  }
#endif

  sensor_data->humidity    = HUMIDITY_Value;
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <EnvSensors_Read+0x74>)
 8002a5e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <EnvSensors_Read+0x78>)
 8002a64:	611a      	str	r2, [r3, #16]

  return 0;
 8002a66:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	42480000 	.word	0x42480000
 8002a74:	41900000 	.word	0x41900000
 8002a78:	447a0000 	.word	0x447a0000
 8002a7c:	0801d85c 	.word	0x0801d85c
 8002a80:	003e090d 	.word	0x003e090d
 8002a84:	000503ab 	.word	0x000503ab

08002a88 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002a92:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002aca:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <TIMER_IF_Init+0x5c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	f083 0301 	eor.w	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <TIMER_IF_Init+0x60>)
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002ae0:	f7ff fbf8 	bl	80022d4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002ae4:	f000 f856 	bl	8002b94 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ae8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aec:	480c      	ldr	r0, [pc, #48]	@ (8002b20 <TIMER_IF_Init+0x60>)
 8002aee:	f005 fbf9 	bl	80082e4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <TIMER_IF_Init+0x60>)
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002afa:	4809      	ldr	r0, [pc, #36]	@ (8002b20 <TIMER_IF_Init+0x60>)
 8002afc:	f005 fd30 	bl	8008560 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f000 f9d3 	bl	8002eac <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002b06:	f000 f85f 	bl	8002bc8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002b0a:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <TIMER_IF_Init+0x5c>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000269 	.word	0x20000269
 8002b20:	20000224 	.word	0x20000224

08002b24 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	@ 0x38
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002b32:	f107 0308 	add.w	r3, r7, #8
 8002b36:	222c      	movs	r2, #44	@ 0x2c
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f01a fdb6 	bl	801d6ac <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002b40:	f000 f828 	bl	8002b94 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <TIMER_IF_StartTimer+0x68>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002b5c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002b60:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4807      	ldr	r0, [pc, #28]	@ (8002b90 <TIMER_IF_StartTimer+0x6c>)
 8002b72:	f005 faab 	bl	80080cc <HAL_RTC_SetAlarm_IT>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002b7c:	f7ff fb7c 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002b80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3738      	adds	r7, #56	@ 0x38
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000026c 	.word	0x2000026c
 8002b90:	20000224 	.word	0x20000224

08002b94 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <TIMER_IF_StopTimer+0x2c>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ba4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ba8:	4806      	ldr	r0, [pc, #24]	@ (8002bc4 <TIMER_IF_StopTimer+0x30>)
 8002baa:	f005 fb9b 	bl	80082e4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bae:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <TIMER_IF_StopTimer+0x30>)
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40002800 	.word	0x40002800
 8002bc4:	20000224 	.word	0x20000224

08002bc8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002bcc:	f000 f98e 	bl	8002eec <GetTimerTicks>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a03      	ldr	r2, [pc, #12]	@ (8002be0 <TIMER_IF_SetTimerContext+0x18>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002bd6:	4b02      	ldr	r3, [pc, #8]	@ (8002be0 <TIMER_IF_SetTimerContext+0x18>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000026c 	.word	0x2000026c

08002be4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002be8:	4b02      	ldr	r3, [pc, #8]	@ (8002bf4 <TIMER_IF_GetTimerContext+0x10>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	2000026c 	.word	0x2000026c

08002bf8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002c02:	f000 f973 	bl	8002eec <GetTimerTicks>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000026c 	.word	0x2000026c

08002c20 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <TIMER_IF_GetTimerValue+0x24>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002c32:	f000 f95b 	bl	8002eec <GetTimerTicks>
 8002c36:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000269 	.word	0x20000269

08002c48 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002c52:	2303      	movs	r3, #3
 8002c54:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002c56:	687b      	ldr	r3, [r7, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002c62:	b5b0      	push	{r4, r5, r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	2000      	movs	r0, #0
 8002c72:	460a      	mov	r2, r1
 8002c74:	4603      	mov	r3, r0
 8002c76:	0d95      	lsrs	r5, r2, #22
 8002c78:	0294      	lsls	r4, r2, #10
 8002c7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	4620      	mov	r0, r4
 8002c84:	4629      	mov	r1, r5
 8002c86:	f7fe fa67 	bl	8001158 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bdb0      	pop	{r4, r5, r7, pc}

08002c9c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002c9c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	2000      	movs	r0, #0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f04f 0a00 	mov.w	sl, #0
 8002cba:	f04f 0b00 	mov.w	fp, #0
 8002cbe:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002cc2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002cc6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002cca:	4650      	mov	r0, sl
 8002ccc:	4659      	mov	r1, fp
 8002cce:	1b02      	subs	r2, r0, r4
 8002cd0:	eb61 0305 	sbc.w	r3, r1, r5
 8002cd4:	f04f 0000 	mov.w	r0, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	0099      	lsls	r1, r3, #2
 8002cde:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ce2:	0090      	lsls	r0, r2, #2
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	eb12 0804 	adds.w	r8, r2, r4
 8002cec:	eb43 0905 	adc.w	r9, r3, r5
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d04:	4690      	mov	r8, r2
 8002d06:	4699      	mov	r9, r3
 8002d08:	4640      	mov	r0, r8
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	0a82      	lsrs	r2, r0, #10
 8002d16:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d1a:	0a8b      	lsrs	r3, r1, #10
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002d20:	68fb      	ldr	r3, [r7, #12]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d2c:	4770      	bx	lr

08002d2e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff93 	bl	8002c62 <TIMER_IF_Convert_ms2Tick>
 8002d3c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002d3e:	f000 f8d5 	bl	8002eec <GetTimerTicks>
 8002d42:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002d44:	e000      	b.n	8002d48 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002d46:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002d48:	f000 f8d0 	bl	8002eec <GetTimerTicks>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d8f6      	bhi.n	8002d46 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002d6a:	f01a f8b7 	bl	801cedc <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002d7e:	f000 f8a5 	bl	8002ecc <TIMER_IF_BkUp_Read_MSBticks>
 8002d82:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f88f 	bl	8002eac <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002d96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9a:	b08c      	sub	sp, #48	@ 0x30
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002da4:	f000 f8a2 	bl	8002eec <GetTimerTicks>
 8002da8:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002daa:	f000 f88f 	bl	8002ecc <TIMER_IF_BkUp_Read_MSBticks>
 8002dae:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	2200      	movs	r2, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	60fa      	str	r2, [r7, #12]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	000b      	movs	r3, r1
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dc8:	2000      	movs	r0, #0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	4605      	mov	r5, r0
 8002dce:	eb12 0804 	adds.w	r8, r2, r4
 8002dd2:	eb43 0905 	adc.w	r9, r3, r5
 8002dd6:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002dda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	0a82      	lsrs	r2, r0, #10
 8002de8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002dec:	0a8b      	lsrs	r3, r1, #10
 8002dee:	4613      	mov	r3, r2
 8002df0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2200      	movs	r2, #0
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002e00:	f04f 0b00 	mov.w	fp, #0
 8002e04:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff46 	bl	8002c9c <TIMER_IF_Convert_Tick2ms>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3730      	adds	r7, #48	@ 0x30
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e24 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4803      	ldr	r0, [pc, #12]	@ (8002e40 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002e32:	f005 fc27 	bl	8008684 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000224 	.word	0x20000224

08002e44 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4803      	ldr	r0, [pc, #12]	@ (8002e60 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002e52:	f005 fc17 	bl	8008684 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000224 	.word	0x20000224

08002e64 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4804      	ldr	r0, [pc, #16]	@ (8002e84 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002e72:	f005 fc1f 	bl	80086b4 <HAL_RTCEx_BKUPRead>
 8002e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002e78:	687b      	ldr	r3, [r7, #4]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000224 	.word	0x20000224

08002e88 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002e92:	2101      	movs	r1, #1
 8002e94:	4804      	ldr	r0, [pc, #16]	@ (8002ea8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002e96:	f005 fc0d 	bl	80086b4 <HAL_RTCEx_BKUPRead>
 8002e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002e9c:	687b      	ldr	r3, [r7, #4]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000224 	.word	0x20000224

08002eac <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4803      	ldr	r0, [pc, #12]	@ (8002ec8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002eba:	f005 fbe3 	bl	8008684 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000224 	.word	0x20000224

08002ecc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4804      	ldr	r0, [pc, #16]	@ (8002ee8 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002ed6:	f005 fbed 	bl	80086b4 <HAL_RTCEx_BKUPRead>
 8002eda:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002edc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000224 	.word	0x20000224

08002eec <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ef2:	480b      	ldr	r0, [pc, #44]	@ (8002f20 <GetTimerTicks+0x34>)
 8002ef4:	f7ff fdd9 	bl	8002aaa <LL_RTC_TIME_GetSubSecond>
 8002ef8:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002efa:	e003      	b.n	8002f04 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002efc:	4808      	ldr	r0, [pc, #32]	@ (8002f20 <GetTimerTicks+0x34>)
 8002efe:	f7ff fdd4 	bl	8002aaa <LL_RTC_TIME_GetSubSecond>
 8002f02:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002f04:	4806      	ldr	r0, [pc, #24]	@ (8002f20 <GetTimerTicks+0x34>)
 8002f06:	f7ff fdd0 	bl	8002aaa <LL_RTC_TIME_GetSubSecond>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d1f4      	bne.n	8002efc <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40002800 	.word	0x40002800

08002f24 <LL_AHB2_GRP1_EnableClock>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <LL_APB2_GRP1_EnableClock>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4013      	ands	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f78:	68fb      	ldr	r3, [r7, #12]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <LL_APB2_GRP1_DisableClock>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fac:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fae:	4a23      	ldr	r2, [pc, #140]	@ (800303c <MX_USART1_UART_Init+0x94>)
 8002fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fba:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fce:	220c      	movs	r2, #12
 8002fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fde:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fea:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ff0:	4811      	ldr	r0, [pc, #68]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002ff2:	f006 f854 	bl	800909e <HAL_UART_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ffc:	f7ff f93c 	bl	8002278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003000:	2100      	movs	r1, #0
 8003002:	480d      	ldr	r0, [pc, #52]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8003004:	f008 f97d 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800300e:	f7ff f933 	bl	8002278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003012:	2100      	movs	r1, #0
 8003014:	4808      	ldr	r0, [pc, #32]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8003016:	f008 f9b2 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003020:	f7ff f92a 	bl	8002278 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003024:	4804      	ldr	r0, [pc, #16]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8003026:	f008 f931 	bl	800b28c <HAL_UARTEx_EnableFifoMode>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003030:	f7ff f922 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000270 	.word	0x20000270
 800303c:	40013800 	.word	0x40013800

08003040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b096      	sub	sp, #88	@ 0x58
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	2238      	movs	r2, #56	@ 0x38
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f01a fb23 	bl	801d6ac <memset>
  if(uartHandle->Instance==USART1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2f      	ldr	r2, [pc, #188]	@ (8003128 <HAL_UART_MspInit+0xe8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d156      	bne.n	800311e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003070:	2301      	movs	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003074:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003078:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	4618      	mov	r0, r3
 8003080:	f004 fe88 	bl	8007d94 <HAL_RCCEx_PeriphCLKConfig>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800308a:	f7ff f8f5 	bl	8002278 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800308e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003092:	f7ff ff5f 	bl	8002f54 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003096:	2002      	movs	r0, #2
 8003098:	f7ff ff44 	bl	8002f24 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800309c:	23c0      	movs	r3, #192	@ 0xc0
 800309e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a8:	2303      	movs	r3, #3
 80030aa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030ac:	2307      	movs	r3, #7
 80030ae:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80030b4:	4619      	mov	r1, r3
 80030b6:	481d      	ldr	r0, [pc, #116]	@ (800312c <HAL_UART_MspInit+0xec>)
 80030b8:	f002 fa54 	bl	8005564 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80030bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030be:	4a1d      	ldr	r2, [pc, #116]	@ (8003134 <HAL_UART_MspInit+0xf4>)
 80030c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030c4:	2212      	movs	r2, #18
 80030c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030ca:	2210      	movs	r2, #16
 80030cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ce:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030d4:	4b16      	ldr	r3, [pc, #88]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030da:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030dc:	2200      	movs	r2, #0
 80030de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e0:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030ec:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030f2:	480f      	ldr	r0, [pc, #60]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030f4:	f001 fc32 	bl	800495c <HAL_DMA_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80030fe:	f7ff f8bb 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 8003106:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003108:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2102      	movs	r1, #2
 8003112:	2024      	movs	r0, #36	@ 0x24
 8003114:	f001 fbeb 	bl	80048ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003118:	2024      	movs	r0, #36	@ 0x24
 800311a:	f001 fc02 	bl	8004922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800311e:	bf00      	nop
 8003120:	3758      	adds	r7, #88	@ 0x58
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40013800 	.word	0x40013800
 800312c:	48000400 	.word	0x48000400
 8003130:	20000304 	.word	0x20000304
 8003134:	40020008 	.word	0x40020008

08003138 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0b      	ldr	r2, [pc, #44]	@ (8003174 <HAL_UART_MspDeInit+0x3c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10f      	bne.n	800316a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800314a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800314e:	f7ff ff19 	bl	8002f84 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003152:	21c0      	movs	r1, #192	@ 0xc0
 8003154:	4808      	ldr	r0, [pc, #32]	@ (8003178 <HAL_UART_MspDeInit+0x40>)
 8003156:	f002 fb65 	bl	8005824 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800315e:	4618      	mov	r0, r3
 8003160:	f001 fca4 	bl	8004aac <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003164:	2024      	movs	r0, #36	@ 0x24
 8003166:	f001 fbea 	bl	800493e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40013800 	.word	0x40013800
 8003178:	48000400 	.word	0x48000400

0800317c <LL_APB2_GRP1_ForceReset>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800318a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4313      	orrs	r3, r2
 8003192:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <LL_APB2_GRP1_ReleaseReset>:
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031b4:	4013      	ands	r3, r2
 80031b6:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
	...

080031c4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80031ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80031d2:	4905      	ldr	r1, [pc, #20]	@ (80031e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	58000800 	.word	0x58000800

080031ec <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80031f4:	4a07      	ldr	r2, [pc, #28]	@ (8003214 <vcom_Init+0x28>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80031fa:	f7fe fbed 	bl	80019d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80031fe:	f7ff fed3 	bl	8002fa8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003202:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003206:	f7ff ffdd 	bl	80031c4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800320a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000368 	.word	0x20000368

08003218 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800321c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003220:	f7ff ffac 	bl	800317c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003224:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003228:	f7ff ffb9 	bl	800319e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800322c:	4804      	ldr	r0, [pc, #16]	@ (8003240 <vcom_DeInit+0x28>)
 800322e:	f7ff ff83 	bl	8003138 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003232:	200f      	movs	r0, #15
 8003234:	f001 fb83 	bl	800493e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003238:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800323a:	4618      	mov	r0, r3
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000270 	.word	0x20000270

08003244 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	461a      	mov	r2, r3
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4804      	ldr	r0, [pc, #16]	@ (8003268 <vcom_Trace_DMA+0x24>)
 8003258:	f005 ffbe 	bl	80091d8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800325c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000270 	.word	0x20000270

0800326c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003274:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <vcom_ReceiveInit+0x70>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800327a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800327e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003288:	4815      	ldr	r0, [pc, #84]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 800328a:	f007 ff72 	bl	800b172 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800328e:	bf00      	nop
 8003290:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329e:	d0f7      	beq.n	8003290 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80032a0:	bf00      	nop
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032b0:	d1f7      	bne.n	80032a2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80032b2:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80032c0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80032c2:	4807      	ldr	r0, [pc, #28]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032c4:	f007 ffb0 	bl	800b228 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80032c8:	2201      	movs	r2, #1
 80032ca:	4906      	ldr	r1, [pc, #24]	@ (80032e4 <vcom_ReceiveInit+0x78>)
 80032cc:	4804      	ldr	r0, [pc, #16]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032ce:	f005 ff37 	bl	8009140 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80032d2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	2000036c 	.word	0x2000036c
 80032e0:	20000270 	.word	0x20000270
 80032e4:	20000364 	.word	0x20000364

080032e8 <vcom_Resume>:

void vcom_Resume(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032ec:	4808      	ldr	r0, [pc, #32]	@ (8003310 <vcom_Resume+0x28>)
 80032ee:	f005 fed6 	bl	800909e <HAL_UART_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <vcom_Resume+0x14>
  {
    Error_Handler();
 80032f8:	f7fe ffbe 	bl	8002278 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032fc:	4805      	ldr	r0, [pc, #20]	@ (8003314 <vcom_Resume+0x2c>)
 80032fe:	f001 fb2d 	bl	800495c <HAL_DMA_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <vcom_Resume+0x24>
  {
    Error_Handler();
 8003308:	f7fe ffb6 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000270 	.word	0x20000270
 8003314:	20000304 	.word	0x20000304

08003318 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a05      	ldr	r2, [pc, #20]	@ (800333c <HAL_UART_TxCpltCallback+0x24>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d103      	bne.n	8003332 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_UART_TxCpltCallback+0x28>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2000      	movs	r0, #0
 8003330:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40013800 	.word	0x40013800
 8003340:	20000368 	.word	0x20000368

08003344 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <HAL_UART_RxCpltCallback+0x44>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d113      	bne.n	800337e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003356:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <HAL_UART_RxCpltCallback+0x48>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_UART_RxCpltCallback+0x30>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <HAL_UART_RxCpltCallback+0x48>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	2101      	movs	r1, #1
 8003370:	4807      	ldr	r0, [pc, #28]	@ (8003390 <HAL_UART_RxCpltCallback+0x4c>)
 8003372:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003374:	2201      	movs	r2, #1
 8003376:	4906      	ldr	r1, [pc, #24]	@ (8003390 <HAL_UART_RxCpltCallback+0x4c>)
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f005 fee1 	bl	8009140 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40013800 	.word	0x40013800
 800338c:	2000036c 	.word	0x2000036c
 8003390:	20000364 	.word	0x20000364

08003394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003394:	480d      	ldr	r0, [pc, #52]	@ (80033cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003396:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003398:	f7ff fb81 	bl	8002a9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800339c:	480c      	ldr	r0, [pc, #48]	@ (80033d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800339e:	490d      	ldr	r1, [pc, #52]	@ (80033d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033a0:	4a0d      	ldr	r2, [pc, #52]	@ (80033d8 <LoopForever+0xe>)
  movs r3, #0
 80033a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a4:	e002      	b.n	80033ac <LoopCopyDataInit>

080033a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033aa:	3304      	adds	r3, #4

080033ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b0:	d3f9      	bcc.n	80033a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033b2:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b4:	4c0a      	ldr	r4, [pc, #40]	@ (80033e0 <LoopForever+0x16>)
  movs r3, #0
 80033b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b8:	e001      	b.n	80033be <LoopFillZerobss>

080033ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033bc:	3204      	adds	r2, #4

080033be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c0:	d3fb      	bcc.n	80033ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033c2:	f01a f97b 	bl	801d6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033c6:	f7fe feeb 	bl	80021a0 <main>

080033ca <LoopForever>:

LoopForever:
    b LoopForever
 80033ca:	e7fe      	b.n	80033ca <LoopForever>
  ldr   r0, =_estack
 80033cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80033d8:	0801e84c 	.word	0x0801e84c
  ldr r2, =_sbss
 80033dc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80033e0:	20002260 	.word	0x20002260

080033e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033e4:	e7fe      	b.n	80033e4 <ADC_IRQHandler>

080033e6 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80033fa:	2310      	movs	r3, #16
 80033fc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80033fe:	2301      	movs	r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003412:	f002 f8a7 	bl	8005564 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003416:	2320      	movs	r3, #32
 8003418:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	4619      	mov	r1, r3
 800341e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003422:	f002 f89f 	bl	8005564 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003426:	2200      	movs	r2, #0
 8003428:	2120      	movs	r1, #32
 800342a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800342e:	f002 fac7 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003432:	2200      	movs	r2, #0
 8003434:	2110      	movs	r1, #16
 8003436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800343a:	f002 fac1 	bl	80059c0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d83f      	bhi.n	80034d8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003471 	.word	0x08003471
 8003464:	0800348b 	.word	0x0800348b
 8003468:	080034a5 	.word	0x080034a5
 800346c:	080034bf 	.word	0x080034bf
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003470:	2200      	movs	r2, #0
 8003472:	2110      	movs	r1, #16
 8003474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003478:	f002 faa2 	bl	80059c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800347c:	2200      	movs	r2, #0
 800347e:	2120      	movs	r1, #32
 8003480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003484:	f002 fa9c 	bl	80059c0 <HAL_GPIO_WritePin>
      break;      
 8003488:	e027      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800348a:	2201      	movs	r2, #1
 800348c:	2110      	movs	r1, #16
 800348e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003492:	f002 fa95 	bl	80059c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003496:	2200      	movs	r2, #0
 8003498:	2120      	movs	r1, #32
 800349a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349e:	f002 fa8f 	bl	80059c0 <HAL_GPIO_WritePin>
      break;
 80034a2:	e01a      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80034a4:	2201      	movs	r2, #1
 80034a6:	2110      	movs	r1, #16
 80034a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ac:	f002 fa88 	bl	80059c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80034b0:	2201      	movs	r2, #1
 80034b2:	2120      	movs	r1, #32
 80034b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034b8:	f002 fa82 	bl	80059c0 <HAL_GPIO_WritePin>
      break;
 80034bc:	e00d      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80034be:	2200      	movs	r2, #0
 80034c0:	2110      	movs	r1, #16
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c6:	f002 fa7b 	bl	80059c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80034ca:	2201      	movs	r2, #1
 80034cc:	2120      	movs	r1, #32
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d2:	f002 fa75 	bl	80059c0 <HAL_GPIO_WritePin>
      break;
 80034d6:	e000      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80034d8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80034e8:	2302      	movs	r3, #2
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800351e:	230f      	movs	r3, #15
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e001      	b.n	8003528 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003524:	2316      	movs	r3, #22
 8003526:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003538:	4b04      	ldr	r3, [pc, #16]	@ (800354c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a03      	ldr	r2, [pc, #12]	@ (800354c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6053      	str	r3, [r2, #4]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	e0042000 	.word	0xe0042000

08003550 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a03      	ldr	r2, [pc, #12]	@ (8003568 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800355a:	f023 0302 	bic.w	r3, r3, #2
 800355e:	6053      	str	r3, [r2, #4]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	e0042000 	.word	0xe0042000

0800356c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003570:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a03      	ldr	r2, [pc, #12]	@ (8003584 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6053      	str	r3, [r2, #4]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	e0042000 	.word	0xe0042000

08003588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003592:	2003      	movs	r0, #3
 8003594:	f001 f9a0 	bl	80048d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003598:	f004 fa1e 	bl	80079d8 <HAL_RCC_GetHCLKFreq>
 800359c:	4603      	mov	r3, r0
 800359e:	4a09      	ldr	r2, [pc, #36]	@ (80035c4 <HAL_Init+0x3c>)
 80035a0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035a2:	200f      	movs	r0, #15
 80035a4:	f7ff f994 	bl	80028d0 <HAL_InitTick>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	71fb      	strb	r3, [r7, #7]
 80035b2:	e001      	b.n	80035b8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035b4:	f7fe ff57 	bl	8002466 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035b8:	79fb      	ldrb	r3, [r7, #7]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000004 	.word	0x20000004

080035c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80035cc:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <HAL_SuspendTick+0x18>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a03      	ldr	r2, [pc, #12]	@ (80035e0 <HAL_SuspendTick+0x18>)
 80035d2:	f023 0302 	bic.w	r3, r3, #2
 80035d6:	6013      	str	r3, [r2, #0]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	e000e010 	.word	0xe000e010

080035e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80035e8:	4b04      	ldr	r3, [pc, #16]	@ (80035fc <HAL_ResumeTick+0x18>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a03      	ldr	r2, [pc, #12]	@ (80035fc <HAL_ResumeTick+0x18>)
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	e000e010 	.word	0xe000e010

08003600 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003604:	4b02      	ldr	r3, [pc, #8]	@ (8003610 <HAL_GetUIDw0+0x10>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	1fff7590 	.word	0x1fff7590

08003614 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003618:	4b02      	ldr	r3, [pc, #8]	@ (8003624 <HAL_GetUIDw1+0x10>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	1fff7594 	.word	0x1fff7594

08003628 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800362c:	4b02      	ldr	r3, [pc, #8]	@ (8003638 <HAL_GetUIDw2+0x10>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	1fff7598 	.word	0x1fff7598

0800363c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003640:	f7ff ff78 	bl	8003534 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 800364c:	f7ff ff80 	bl	8003550 <LL_DBGMCU_DisableDBGStopMode>
}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003658:	f7ff ff88 	bl	800356c <LL_DBGMCU_DisableDBGStandbyMode>
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}

08003660 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2107      	movs	r1, #7
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	401a      	ands	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2107      	movs	r1, #7
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	210f      	movs	r1, #15
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	401a      	ands	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	f003 010f 	and.w	r1, r3, #15
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	43db      	mvns	r3, r3
 80037d0:	401a      	ands	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	0219      	lsls	r1, r3, #8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	400b      	ands	r3, r1
 80037da:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80037de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003802:	f023 0317 	bic.w	r3, r3, #23
 8003806:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003828:	f023 0317 	bic.w	r3, r3, #23
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6093      	str	r3, [r2, #8]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384e:	d101      	bne.n	8003854 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003870:	f023 0317 	bic.w	r3, r3, #23
 8003874:	f043 0201 	orr.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003896:	f023 0317 	bic.w	r3, r3, #23
 800389a:	f043 0202 	orr.w	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <LL_ADC_IsEnabled+0x18>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <LL_ADC_IsEnabled+0x1a>
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d101      	bne.n	80038e8 <LL_ADC_IsDisableOngoing+0x18>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <LL_ADC_IsDisableOngoing+0x1a>
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003904:	f023 0317 	bic.w	r3, r3, #23
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800392a:	f023 0317 	bic.w	r3, r3, #23
 800392e:	f043 0210 	orr.w	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d101      	bne.n	8003958 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e17e      	b.n	8003c84 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7fd ff57 	bl	8001848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff44 	bl	800383a <LL_ADC_IsInternalRegulatorEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d115      	bne.n	80039e4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff18 	bl	80037f2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039c2:	4b9e      	ldr	r3, [pc, #632]	@ (8003c3c <HAL_ADC_Init+0x2d8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	4a9d      	ldr	r2, [pc, #628]	@ (8003c40 <HAL_ADC_Init+0x2dc>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	3301      	adds	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039d6:	e002      	b.n	80039de <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3b01      	subs	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f9      	bne.n	80039d8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff26 	bl	800383a <LL_ADC_IsInternalRegulatorEnabled>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	f043 0210 	orr.w	r2, r3, #16
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff93 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 8003a1a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 8124 	bne.w	8003c72 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 8120 	bne.w	8003c72 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a3a:	f043 0202 	orr.w	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff30 	bl	80038ac <LL_ADC_IsEnabled>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 80a7 	bne.w	8003ba2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	7e1b      	ldrb	r3, [r3, #24]
 8003a5c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a5e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7e5b      	ldrb	r3, [r3, #25]
 8003a64:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a66:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	7e9b      	ldrb	r3, [r3, #26]
 8003a6c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a6e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a74:	2a00      	cmp	r2, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_ADC_Init+0x11a>
 8003a78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a7c:	e000      	b.n	8003a80 <HAL_ADC_Init+0x11c>
 8003a7e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a80:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a86:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da04      	bge.n	8003a9a <HAL_ADC_Init+0x136>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a98:	e001      	b.n	8003a9e <HAL_ADC_Init+0x13a>
 8003a9a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003a9e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003aa6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003aa8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d114      	bne.n	8003ae4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7e9b      	ldrb	r3, [r3, #26]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e00b      	b.n	8003ae4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003af8:	4313      	orrs	r3, r2
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003b0a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	69b9      	ldr	r1, [r7, #24]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b24:	4313      	orrs	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d111      	bne.n	8003b5a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b42:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003b48:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003b4e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	4b38      	ldr	r3, [pc, #224]	@ (8003c44 <HAL_ADC_Init+0x2e0>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003b76:	d014      	beq.n	8003ba2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b80:	d00f      	beq.n	8003ba2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c48 <HAL_ADC_Init+0x2e4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003b9c:	492a      	ldr	r1, [pc, #168]	@ (8003c48 <HAL_ADC_Init+0x2e4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003baa:	461a      	mov	r2, r3
 8003bac:	2100      	movs	r1, #0
 8003bae:	f7ff fd76 	bl	800369e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4923      	ldr	r1, [pc, #140]	@ (8003c4c <HAL_ADC_Init+0x2e8>)
 8003bbe:	f7ff fd6e 	bl	800369e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f062 020f 	orn	r2, r2, #15
 8003bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bda:	e017      	b.n	8003c0c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be4:	d112      	bne.n	8003c0c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f003 031c 	and.w	r3, r3, #28
 8003bf8:	f06f 020f 	mvn.w	r2, #15
 8003bfc:	fa02 f103 	lsl.w	r1, r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fd61 	bl	80036da <LL_ADC_GetSamplingTimeCommonChannels>
 8003c18:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d116      	bne.n	8003c50 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2c:	f023 0303 	bic.w	r3, r3, #3
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c38:	e023      	b.n	8003c82 <HAL_ADC_Init+0x31e>
 8003c3a:	bf00      	nop
 8003c3c:	20000004 	.word	0x20000004
 8003c40:	053e2d63 	.word	0x053e2d63
 8003c44:	1ffffc02 	.word	0x1ffffc02
 8003c48:	40012708 	.word	0x40012708
 8003c4c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	f023 0312 	bic.w	r3, r3, #18
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c70:	e007      	b.n	8003c82 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	f043 0210 	orr.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07a      	b.n	8003d94 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca2:	f043 0202 	orr.w	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 face 	bl	800424c <ADC_ConversionStop>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fb92 	bl	80043e4 <ADC_Disable>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fd9f 	bl	8003818 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003ce8:	f023 0303 	bic.w	r3, r3, #3
 8003cec:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f240 329f 	movw	r2, #927	@ 0x39f
 8003cf6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <HAL_ADC_DeInit+0x110>)
 8003d04:	400b      	ands	r3, r1
 8003d06:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0207 	bic.w	r2, r2, #7
 8003d16:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2200      	movs	r2, #0
 8003d24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003d34:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003d64:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003d66:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <HAL_ADC_DeInit+0x114>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003da0 <HAL_ADC_DeInit+0x114>)
 8003d6c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003d70:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fd7c 	bl	8001870 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	833e0200 	.word	0x833e0200
 8003da0:	40012708 	.word	0x40012708

08003da4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fdc5 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d132      	bne.n	8003e22 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_Start+0x26>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e02e      	b.n	8003e28 <HAL_ADC_Start+0x84>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa80 	bl	80042d8 <ADC_Enable>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d11a      	bne.n	8003e18 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	221c      	movs	r2, #28
 8003e02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fd6f 	bl	80038f4 <LL_ADC_REG_StartConversion>
 8003e16:	e006      	b.n	8003e26 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003e20:	e001      	b.n	8003e26 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_Stop+0x16>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e022      	b.n	8003e8c <HAL_ADC_Stop+0x5c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9fc 	bl	800424c <ADC_ConversionStop>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d111      	bne.n	8003e82 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fac0 	bl	80043e4 <ADC_Disable>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d102      	bne.n	8003eac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e010      	b.n	8003ece <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e077      	b.n	8003fba <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003eca:	2304      	movs	r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ece:	f7fe fd09 	bl	80028e4 <HAL_GetTick>
 8003ed2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ed4:	e021      	b.n	8003f1a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d01d      	beq.n	8003f1a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ede:	f7fe fd01 	bl	80028e4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <HAL_ADC_PollForConversion+0x60>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d112      	bne.n	8003f1a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e04f      	b.n	8003fba <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0d6      	beq.n	8003ed6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fbe6 	bl	800370a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d031      	beq.n	8003fa8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7e9b      	ldrb	r3, [r3, #26]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d12d      	bne.n	8003fa8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d126      	bne.n	8003fa8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fcee 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d112      	bne.n	8003f90 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 020c 	bic.w	r2, r2, #12
 8003f78:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f8e:	e00b      	b.n	8003fa8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa0:	f043 0201 	orr.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	220c      	movs	r2, #12
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x28>
 8004000:	2302      	movs	r3, #2
 8004002:	e110      	b.n	8004226 <HAL_ADC_ConfigChannel+0x24a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fc95 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 80f7 	bne.w	800420c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	f000 80b1 	beq.w	800418a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004030:	d004      	beq.n	800403c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004036:	4a7e      	ldr	r2, [pc, #504]	@ (8004230 <HAL_ADC_ConfigChannel+0x254>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7ff fb92 	bl	8003770 <LL_ADC_REG_SetSequencerChAdd>
 800404c:	e041      	b.n	80040d2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	210f      	movs	r1, #15
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	401a      	ands	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_ADC_ConfigChannel+0xa0>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	e011      	b.n	80040a0 <HAL_ADC_ConfigChannel+0xc4>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004094:	2320      	movs	r3, #32
 8004096:	e003      	b.n	80040a0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	6839      	ldr	r1, [r7, #0]
 80040a2:	6849      	ldr	r1, [r1, #4]
 80040a4:	f001 011f 	and.w	r1, r1, #31
 80040a8:	408b      	lsls	r3, r1
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d808      	bhi.n	80040d2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	f7ff fb2e 	bl	800372e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7ff fb6b 	bl	80037ba <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f280 8097 	bge.w	800421c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040ee:	4851      	ldr	r0, [pc, #324]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 80040f0:	f7ff fac8 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 80040f4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4f      	ldr	r2, [pc, #316]	@ (8004238 <HAL_ADC_ConfigChannel+0x25c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d120      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11b      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004110:	4619      	mov	r1, r3
 8004112:	4848      	ldr	r0, [pc, #288]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 8004114:	f7ff faa4 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004118:	4b48      	ldr	r3, [pc, #288]	@ (800423c <HAL_ADC_ConfigChannel+0x260>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	099b      	lsrs	r3, r3, #6
 800411e:	4a48      	ldr	r2, [pc, #288]	@ (8004240 <HAL_ADC_ConfigChannel+0x264>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004132:	e002      	b.n	800413a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	3b01      	subs	r3, #1
 8004138:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f9      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004140:	e06c      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a3f      	ldr	r2, [pc, #252]	@ (8004244 <HAL_ADC_ConfigChannel+0x268>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d10c      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800415c:	4619      	mov	r1, r3
 800415e:	4835      	ldr	r0, [pc, #212]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 8004160:	f7ff fa7e 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 8004164:	e05a      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a37      	ldr	r2, [pc, #220]	@ (8004248 <HAL_ADC_ConfigChannel+0x26c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d155      	bne.n	800421c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004176:	2b00      	cmp	r3, #0
 8004178:	d150      	bne.n	800421c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004180:	4619      	mov	r1, r3
 8004182:	482c      	ldr	r0, [pc, #176]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 8004184:	f7ff fa6c 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 8004188:	e048      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004192:	d004      	beq.n	800419e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004198:	4a25      	ldr	r2, [pc, #148]	@ (8004230 <HAL_ADC_ConfigChannel+0x254>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d107      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7ff faf3 	bl	8003794 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	da32      	bge.n	800421c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b6:	481f      	ldr	r0, [pc, #124]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 80041b8:	f7ff fa64 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 80041bc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <HAL_ADC_ConfigChannel+0x25c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d107      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041ce:	4619      	mov	r1, r3
 80041d0:	4818      	ldr	r0, [pc, #96]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 80041d2:	f7ff fa45 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 80041d6:	e021      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	@ (8004244 <HAL_ADC_ConfigChannel+0x268>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d107      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041e8:	4619      	mov	r1, r3
 80041ea:	4812      	ldr	r0, [pc, #72]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 80041ec:	f7ff fa38 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 80041f0:	e014      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <HAL_ADC_ConfigChannel+0x26c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d10f      	bne.n	800421c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004202:	4619      	mov	r1, r3
 8004204:	480b      	ldr	r0, [pc, #44]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 8004206:	f7ff fa2b 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 800420a:	e007      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004224:	7ffb      	ldrb	r3, [r7, #31]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	80000004 	.word	0x80000004
 8004234:	40012708 	.word	0x40012708
 8004238:	b0001000 	.word	0xb0001000
 800423c:	20000004 	.word	0x20000004
 8004240:	053e2d63 	.word	0x053e2d63
 8004244:	b8004000 	.word	0xb8004000
 8004248:	b4002000 	.word	0xb4002000

0800424c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fb71 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d033      	beq.n	80042cc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fb31 	bl	80038d0 <LL_ADC_IsDisableOngoing>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fb4e 	bl	800391a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800427e:	f7fe fb31 	bl	80028e4 <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004284:	e01b      	b.n	80042be <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004286:	f7fe fb2d 	bl	80028e4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d914      	bls.n	80042be <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a6:	f043 0210 	orr.w	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b2:	f043 0201 	orr.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e007      	b.n	80042ce <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1dc      	bne.n	8004286 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fadf 	bl	80038ac <LL_ADC_IsEnabled>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d169      	bne.n	80043c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	4b36      	ldr	r3, [pc, #216]	@ (80043d4 <ADC_Enable+0xfc>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e055      	b.n	80043ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fa9c 	bl	8003860 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004328:	482b      	ldr	r0, [pc, #172]	@ (80043d8 <ADC_Enable+0x100>)
 800432a:	f7ff f9ab 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 800432e:	4603      	mov	r3, r0
 8004330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00f      	beq.n	8004358 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004338:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <ADC_Enable+0x104>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	099b      	lsrs	r3, r3, #6
 800433e:	4a28      	ldr	r2, [pc, #160]	@ (80043e0 <ADC_Enable+0x108>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004348:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800434a:	e002      	b.n	8004352 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	3b01      	subs	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f9      	bne.n	800434c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	7e5b      	ldrb	r3, [r3, #25]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d033      	beq.n	80043c8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004360:	f7fe fac0 	bl	80028e4 <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004366:	e028      	b.n	80043ba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fa9d 	bl	80038ac <LL_ADC_IsEnabled>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fa6f 	bl	8003860 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004382:	f7fe faaf 	bl	80028e4 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d914      	bls.n	80043ba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b01      	cmp	r3, #1
 800439c:	d00d      	beq.n	80043ba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	f043 0210 	orr.w	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	f043 0201 	orr.w	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e007      	b.n	80043ca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d1cf      	bne.n	8004368 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	80000017 	.word	0x80000017
 80043d8:	40012708 	.word	0x40012708
 80043dc:	20000004 	.word	0x20000004
 80043e0:	053e2d63 	.word	0x053e2d63

080043e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fa6d 	bl	80038d0 <LL_ADC_IsDisableOngoing>
 80043f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fa55 	bl	80038ac <LL_ADC_IsEnabled>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d047      	beq.n	8004498 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d144      	bne.n	8004498 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0305 	and.w	r3, r3, #5
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10c      	bne.n	8004436 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fa30 	bl	8003886 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2203      	movs	r2, #3
 800442c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800442e:	f7fe fa59 	bl	80028e4 <HAL_GetTick>
 8004432:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004434:	e029      	b.n	800448a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443a:	f043 0210 	orr.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e023      	b.n	800449a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004452:	f7fe fa47 	bl	80028e4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d914      	bls.n	800448a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	f043 0210 	orr.w	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	f043 0201 	orr.w	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e007      	b.n	800449a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1dc      	bne.n	8004452 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <LL_ADC_SetCalibrationFactor>:
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044b2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <LL_ADC_GetCalibrationFactor>:
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <LL_ADC_Enable>:
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044f6:	f023 0317 	bic.w	r3, r3, #23
 80044fa:	f043 0201 	orr.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <LL_ADC_Disable>:
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800451c:	f023 0317 	bic.w	r3, r3, #23
 8004520:	f043 0202 	orr.w	r2, r3, #2
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <LL_ADC_IsEnabled>:
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <LL_ADC_IsEnabled+0x18>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <LL_ADC_IsEnabled+0x1a>
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <LL_ADC_StartCalibration>:
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004566:	f023 0317 	bic.w	r3, r3, #23
 800456a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <LL_ADC_IsCalibrationOnGoing>:
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800458c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004590:	d101      	bne.n	8004596 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_ADCEx_Calibration_Start+0x1e>
 80045bc:	2302      	movs	r3, #2
 80045be:	e0b9      	b.n	8004734 <HAL_ADCEx_Calibration_Start+0x192>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff0b 	bl	80043e4 <ADC_Disable>
 80045ce:	4603      	mov	r3, r0
 80045d0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ffab 	bl	8004532 <LL_ADC_IsEnabled>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 809d 	bne.w	800471e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80045ec:	f043 0202 	orr.w	r2, r3, #2
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	f248 0303 	movw	r3, #32771	@ 0x8003
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e02e      	b.n	800467a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff98 	bl	8004556 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004626:	e014      	b.n	8004652 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	3301      	adds	r3, #1
 800462c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004634:	d30d      	bcc.n	8004652 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	f023 0312 	bic.w	r3, r3, #18
 800463e:	f043 0210 	orr.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e070      	b.n	8004734 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ff90 	bl	800457c <LL_ADC_IsCalibrationOnGoing>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e2      	bne.n	8004628 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff2f 	bl	80044ca <LL_ADC_GetCalibrationFactor>
 800466c:	4602      	mov	r2, r0
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4413      	add	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b07      	cmp	r3, #7
 800467e:	d9cd      	bls.n	800461c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff29 	bl	80044e6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff01 	bl	80044a2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff31 	bl	800450c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046aa:	f7fe f91b 	bl	80028e4 <HAL_GetTick>
 80046ae:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046b0:	e01c      	b.n	80046ec <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046b2:	f7fe f917 	bl	80028e4 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d915      	bls.n	80046ec <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff34 	bl	8004532 <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	f043 0210 	orr.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e023      	b.n	8004734 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff1e 	bl	8004532 <LL_ADC_IsEnabled>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1da      	bne.n	80046b2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68d9      	ldr	r1, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	430a      	orrs	r2, r1
 800470a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004710:	f023 0303 	bic.w	r3, r3, #3
 8004714:	f043 0201 	orr.w	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	659a      	str	r2, [r3, #88]	@ 0x58
 800471c:	e005      	b.n	800472a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004722:	f043 0210 	orr.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476e:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60d3      	str	r3, [r2, #12]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004788:	4b04      	ldr	r3, [pc, #16]	@ (800479c <__NVIC_GetPriorityGrouping+0x18>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0307 	and.w	r3, r3, #7
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db0b      	blt.n	80047ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	4906      	ldr	r1, [pc, #24]	@ (80047d4 <__NVIC_EnableIRQ+0x34>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2001      	movs	r0, #1
 80047c2:	fa00 f202 	lsl.w	r2, r0, r2
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	e000e100 	.word	0xe000e100

080047d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db12      	blt.n	8004810 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	490a      	ldr	r1, [pc, #40]	@ (800481c <__NVIC_DisableIRQ+0x44>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	3320      	adds	r3, #32
 8004800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004804:	f3bf 8f4f 	dsb	sy
}
 8004808:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800480a:	f3bf 8f6f 	isb	sy
}
 800480e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000e100 	.word	0xe000e100

08004820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	6039      	str	r1, [r7, #0]
 800482a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	2b00      	cmp	r3, #0
 8004832:	db0a      	blt.n	800484a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	490c      	ldr	r1, [pc, #48]	@ (800486c <__NVIC_SetPriority+0x4c>)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	0112      	lsls	r2, r2, #4
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	440b      	add	r3, r1
 8004844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004848:	e00a      	b.n	8004860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4908      	ldr	r1, [pc, #32]	@ (8004870 <__NVIC_SetPriority+0x50>)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	3b04      	subs	r3, #4
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	440b      	add	r3, r1
 800485e:	761a      	strb	r2, [r3, #24]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	e000e100 	.word	0xe000e100
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	@ 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	bf28      	it	cs
 8004892:	2304      	movcs	r3, #4
 8004894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3304      	adds	r3, #4
 800489a:	2b06      	cmp	r3, #6
 800489c:	d902      	bls.n	80048a4 <NVIC_EncodePriority+0x30>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3b03      	subs	r3, #3
 80048a2:	e000      	b.n	80048a6 <NVIC_EncodePriority+0x32>
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	401a      	ands	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048bc:	f04f 31ff 	mov.w	r1, #4294967295
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43d9      	mvns	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	4313      	orrs	r3, r2
         );
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3724      	adds	r7, #36	@ 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ff2b 	bl	800473c <__NVIC_SetPriorityGrouping>
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b086      	sub	sp, #24
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4603      	mov	r3, r0
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048fc:	f7ff ff42 	bl	8004784 <__NVIC_GetPriorityGrouping>
 8004900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	6978      	ldr	r0, [r7, #20]
 8004908:	f7ff ffb4 	bl	8004874 <NVIC_EncodePriority>
 800490c:	4602      	mov	r2, r0
 800490e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff83 	bl	8004820 <__NVIC_SetPriority>
}
 800491a:	bf00      	nop
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	4603      	mov	r3, r0
 800492a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800492c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff ff35 	bl	80047a0 <__NVIC_EnableIRQ>
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	4603      	mov	r3, r0
 8004946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff43 	bl	80047d8 <__NVIC_DisableIRQ>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e08e      	b.n	8004a8c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	4b47      	ldr	r3, [pc, #284]	@ (8004a94 <HAL_DMA_Init+0x138>)
 8004976:	429a      	cmp	r2, r3
 8004978:	d80f      	bhi.n	800499a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	4b45      	ldr	r3, [pc, #276]	@ (8004a98 <HAL_DMA_Init+0x13c>)
 8004982:	4413      	add	r3, r2
 8004984:	4a45      	ldr	r2, [pc, #276]	@ (8004a9c <HAL_DMA_Init+0x140>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	009a      	lsls	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a42      	ldr	r2, [pc, #264]	@ (8004aa0 <HAL_DMA_Init+0x144>)
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40
 8004998:	e00e      	b.n	80049b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	4b40      	ldr	r3, [pc, #256]	@ (8004aa4 <HAL_DMA_Init+0x148>)
 80049a2:	4413      	add	r3, r2
 80049a4:	4a3d      	ldr	r2, [pc, #244]	@ (8004a9c <HAL_DMA_Init+0x140>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	009a      	lsls	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a3c      	ldr	r2, [pc, #240]	@ (8004aa8 <HAL_DMA_Init+0x14c>)
 80049b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80049ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fb24 	bl	8005058 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a18:	d102      	bne.n	8004a20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d010      	beq.n	8004a62 <HAL_DMA_Init+0x106>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d80c      	bhi.n	8004a62 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb4d 	bl	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	e008      	b.n	8004a74 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40020407 	.word	0x40020407
 8004a98:	bffdfff8 	.word	0xbffdfff8
 8004a9c:	cccccccd 	.word	0xcccccccd
 8004aa0:	40020000 	.word	0x40020000
 8004aa4:	bffdfbf8 	.word	0xbffdfbf8
 8004aa8:	40020400 	.word	0x40020400

08004aac <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e07b      	b.n	8004bb6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8004bc0 <HAL_DMA_DeInit+0x114>)
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d80f      	bhi.n	8004afa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4b38      	ldr	r3, [pc, #224]	@ (8004bc4 <HAL_DMA_DeInit+0x118>)
 8004ae2:	4413      	add	r3, r2
 8004ae4:	4a38      	ldr	r2, [pc, #224]	@ (8004bc8 <HAL_DMA_DeInit+0x11c>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	009a      	lsls	r2, r3, #2
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a35      	ldr	r2, [pc, #212]	@ (8004bcc <HAL_DMA_DeInit+0x120>)
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004af8:	e00e      	b.n	8004b18 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b33      	ldr	r3, [pc, #204]	@ (8004bd0 <HAL_DMA_DeInit+0x124>)
 8004b02:	4413      	add	r3, r2
 8004b04:	4a30      	ldr	r2, [pc, #192]	@ (8004bc8 <HAL_DMA_DeInit+0x11c>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	009a      	lsls	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd4 <HAL_DMA_DeInit+0x128>)
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b24:	f003 021c 	and.w	r2, r3, #28
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b32:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fa8f 	bl	8005058 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b4a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00f      	beq.n	8004b74 <HAL_DMA_DeInit+0xc8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d80b      	bhi.n	8004b74 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fac3 	bl	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b72:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40020407 	.word	0x40020407
 8004bc4:	bffdfff8 	.word	0xbffdfff8
 8004bc8:	cccccccd 	.word	0xcccccccd
 8004bcc:	40020000 	.word	0x40020000
 8004bd0:	bffdfbf8 	.word	0xbffdfbf8
 8004bd4:	40020400 	.word	0x40020400

08004bd8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_DMA_Start_IT+0x20>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e069      	b.n	8004ccc <HAL_DMA_Start_IT+0xf4>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d155      	bne.n	8004cb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f9d3 	bl	8004fdc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 020e 	orr.w	r2, r2, #14
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e00f      	b.n	8004c70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 020a 	orr.w	r2, r2, #10
 8004c6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e008      	b.n	8004cca <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2280      	movs	r2, #128	@ 0x80
 8004cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e04f      	b.n	8004d86 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d008      	beq.n	8004d04 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e040      	b.n	8004d86 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 020e 	bic.w	r2, r2, #14
 8004d12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d38:	f003 021c 	and.w	r2, r3, #28
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f202 	lsl.w	r2, r1, r2
 8004d46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d005      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2204      	movs	r2, #4
 8004dac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e047      	b.n	8004e44 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 020e 	bic.w	r2, r2, #14
 8004dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de8:	f003 021c 	and.w	r2, r3, #28
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f202 	lsl.w	r2, r1, r2
 8004df6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
    }
  }
  return status;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6c:	f003 031c 	and.w	r3, r3, #28
 8004e70:	2204      	movs	r2, #4
 8004e72:	409a      	lsls	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d027      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x7c>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d022      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d107      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0204 	bic.w	r2, r2, #4
 8004ea2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea8:	f003 021c 	and.w	r2, r3, #28
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	2104      	movs	r1, #4
 8004eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8081 	beq.w	8004fc4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004eca:	e07b      	b.n	8004fc4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed0:	f003 031c 	and.w	r3, r3, #28
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d03d      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x10c>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d038      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 020a 	bic.w	r2, r2, #10
 8004f06:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd0 <HAL_DMA_IRQHandler+0x180>)
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d909      	bls.n	8004f30 <HAL_DMA_IRQHandler+0xe0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f20:	f003 031c 	and.w	r3, r3, #28
 8004f24:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <HAL_DMA_IRQHandler+0x184>)
 8004f26:	2102      	movs	r1, #2
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	6053      	str	r3, [r2, #4]
 8004f2e:	e008      	b.n	8004f42 <HAL_DMA_IRQHandler+0xf2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f34:	f003 031c 	and.w	r3, r3, #28
 8004f38:	4a27      	ldr	r2, [pc, #156]	@ (8004fd8 <HAL_DMA_IRQHandler+0x188>)
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f40:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d038      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004f5a:	e033      	b.n	8004fc4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f60:	f003 031c 	and.w	r3, r3, #28
 8004f64:	2208      	movs	r2, #8
 8004f66:	409a      	lsls	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02a      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x176>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d025      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 020e 	bic.w	r2, r2, #14
 8004f88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8e:	f003 021c 	and.w	r2, r3, #28
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	2101      	movs	r1, #1
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
}
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40020080 	.word	0x40020080
 8004fd4:	40020400 	.word	0x40020400
 8004fd8:	40020000 	.word	0x40020000

08004fdc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ff2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500a:	f003 021c 	and.w	r2, r3, #28
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	2101      	movs	r1, #1
 8005014:	fa01 f202 	lsl.w	r2, r1, r2
 8005018:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b10      	cmp	r3, #16
 8005028:	d108      	bne.n	800503c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800503a:	e007      	b.n	800504c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
	...

08005058 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	4b1c      	ldr	r3, [pc, #112]	@ (80050d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d813      	bhi.n	8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005070:	089b      	lsrs	r3, r3, #2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005078:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	3b08      	subs	r3, #8
 8005088:	4a14      	ldr	r2, [pc, #80]	@ (80050dc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e011      	b.n	80050b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005098:	089b      	lsrs	r3, r3, #2
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800509e:	4413      	add	r3, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3b08      	subs	r3, #8
 80050ac:	4a0b      	ldr	r2, [pc, #44]	@ (80050dc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	3307      	adds	r3, #7
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0a      	ldr	r2, [pc, #40]	@ (80050e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80050bc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2201      	movs	r2, #1
 80050c6:	409a      	lsls	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40020407 	.word	0x40020407
 80050dc:	cccccccd 	.word	0xcccccccd
 80050e0:	4002081c 	.word	0x4002081c
 80050e4:	40020880 	.word	0x40020880

080050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a08      	ldr	r2, [pc, #32]	@ (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800510c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3b01      	subs	r3, #1
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2201      	movs	r2, #1
 8005118:	409a      	lsls	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	1000823f 	.word	0x1000823f
 800512c:	40020940 	.word	0x40020940

08005130 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800513e:	4b1c      	ldr	r3, [pc, #112]	@ (80051b0 <HAL_FLASH_Program+0x80>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_FLASH_Program+0x1a>
 8005146:	2302      	movs	r3, #2
 8005148:	e02d      	b.n	80051a6 <HAL_FLASH_Program+0x76>
 800514a:	4b19      	ldr	r3, [pc, #100]	@ (80051b0 <HAL_FLASH_Program+0x80>)
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005150:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <HAL_FLASH_Program+0x80>)
 8005152:	2200      	movs	r2, #0
 8005154:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005156:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800515a:	f000 f869 	bl	8005230 <FLASH_WaitForLastOperation>
 800515e:	4603      	mov	r3, r0
 8005160:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11a      	bne.n	800519e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800516e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005172:	68b8      	ldr	r0, [r7, #8]
 8005174:	f000 f8be 	bl	80052f4 <FLASH_Program_DoubleWord>
 8005178:	e004      	b.n	8005184 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	4619      	mov	r1, r3
 800517e:	68b8      	ldr	r0, [r7, #8]
 8005180:	f000 f8de 	bl	8005340 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005184:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005188:	f000 f852 	bl	8005230 <FLASH_WaitForLastOperation>
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005190:	4b08      	ldr	r3, [pc, #32]	@ (80051b4 <HAL_FLASH_Program+0x84>)
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	43db      	mvns	r3, r3
 8005198:	4906      	ldr	r1, [pc, #24]	@ (80051b4 <HAL_FLASH_Program+0x84>)
 800519a:	4013      	ands	r3, r2
 800519c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800519e:	4b04      	ldr	r3, [pc, #16]	@ (80051b0 <HAL_FLASH_Program+0x80>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000370 	.word	0x20000370
 80051b4:	58004000 	.word	0x58004000

080051b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <HAL_FLASH_Unlock+0x38>)
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da0b      	bge.n	80051e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80051ca:	4b09      	ldr	r3, [pc, #36]	@ (80051f0 <HAL_FLASH_Unlock+0x38>)
 80051cc:	4a09      	ldr	r2, [pc, #36]	@ (80051f4 <HAL_FLASH_Unlock+0x3c>)
 80051ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80051d0:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <HAL_FLASH_Unlock+0x38>)
 80051d2:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <HAL_FLASH_Unlock+0x40>)
 80051d4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80051d6:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <HAL_FLASH_Unlock+0x38>)
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da01      	bge.n	80051e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80051e2:	79fb      	ldrb	r3, [r7, #7]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	58004000 	.word	0x58004000
 80051f4:	45670123 	.word	0x45670123
 80051f8:	cdef89ab 	.word	0xcdef89ab

080051fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <HAL_FLASH_Lock+0x30>)
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	4a08      	ldr	r2, [pc, #32]	@ (800522c <HAL_FLASH_Lock+0x30>)
 800520c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005210:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005212:	4b06      	ldr	r3, [pc, #24]	@ (800522c <HAL_FLASH_Lock+0x30>)
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	db01      	blt.n	800521e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800521e:	79fb      	ldrb	r3, [r7, #7]
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	58004000 	.word	0x58004000

08005230 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005238:	f7fd fb54 	bl	80028e4 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800523e:	e009      	b.n	8005254 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005240:	f7fd fb50 	bl	80028e4 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d801      	bhi.n	8005254 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e046      	b.n	80052e2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005254:	4b25      	ldr	r3, [pc, #148]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005260:	d0ee      	beq.n	8005240 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005262:	4b22      	ldr	r3, [pc, #136]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005272:	4b1e      	ldr	r3, [pc, #120]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 8005274:	2201      	movs	r2, #1
 8005276:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800527e:	4013      	ands	r3, r2
 8005280:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005288:	d307      	bcc.n	800529a <FLASH_WaitForLastOperation+0x6a>
 800528a:	4b18      	ldr	r3, [pc, #96]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005294:	4915      	ldr	r1, [pc, #84]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	618b      	str	r3, [r1, #24]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <FLASH_WaitForLastOperation+0x7e>
 80052a4:	4a11      	ldr	r2, [pc, #68]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80052ac:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00e      	beq.n	80052d2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80052b4:	4a0e      	ldr	r2, [pc, #56]	@ (80052f0 <FLASH_WaitForLastOperation+0xc0>)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e011      	b.n	80052e2 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80052be:	f7fd fb11 	bl	80028e4 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d801      	bhi.n	80052d2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e007      	b.n	80052e2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052de:	d0ee      	beq.n	80052be <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	58004000 	.word	0x58004000
 80052f0:	20000370 	.word	0x20000370

080052f4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005300:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <FLASH_Program_DoubleWord+0x48>)
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	4a0d      	ldr	r2, [pc, #52]	@ (800533c <FLASH_Program_DoubleWord+0x48>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005312:	f3bf 8f6f 	isb	sy
}
 8005316:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	000a      	movs	r2, r1
 8005326:	2300      	movs	r3, #0
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	3104      	adds	r1, #4
 800532c:	4613      	mov	r3, r2
 800532e:	600b      	str	r3, [r1, #0]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	58004000 	.word	0x58004000

08005340 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800534a:	2340      	movs	r3, #64	@ 0x40
 800534c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005356:	4b18      	ldr	r3, [pc, #96]	@ (80053b8 <FLASH_Program_Fast+0x78>)
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <FLASH_Program_Fast+0x78>)
 800535c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005360:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005362:	f3ef 8310 	mrs	r3, PRIMASK
 8005366:	60fb      	str	r3, [r7, #12]
  return(result);
 8005368:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800536a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800536c:	b672      	cpsid	i
}
 800536e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	3304      	adds	r3, #4
 800537c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	3304      	adds	r3, #4
 8005382:	617b      	str	r3, [r7, #20]
    row_index--;
 8005384:	7ffb      	ldrb	r3, [r7, #31]
 8005386:	3b01      	subs	r3, #1
 8005388:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800538a:	7ffb      	ldrb	r3, [r7, #31]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ef      	bne.n	8005370 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005390:	bf00      	nop
 8005392:	4b09      	ldr	r3, [pc, #36]	@ (80053b8 <FLASH_Program_Fast+0x78>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800539e:	d0f8      	beq.n	8005392 <FLASH_Program_Fast+0x52>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f383 8810 	msr	PRIMASK, r3
}
 80053aa:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80053ac:	bf00      	nop
 80053ae:	3724      	adds	r7, #36	@ 0x24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	58004000 	.word	0x58004000

080053bc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053c6:	4b28      	ldr	r3, [pc, #160]	@ (8005468 <HAL_FLASHEx_Erase+0xac>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_FLASHEx_Erase+0x16>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e046      	b.n	8005460 <HAL_FLASHEx_Erase+0xa4>
 80053d2:	4b25      	ldr	r3, [pc, #148]	@ (8005468 <HAL_FLASHEx_Erase+0xac>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80053d8:	4b23      	ldr	r3, [pc, #140]	@ (8005468 <HAL_FLASHEx_Erase+0xac>)
 80053da:	2200      	movs	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053e2:	f7ff ff25 	bl	8005230 <FLASH_WaitForLastOperation>
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d133      	bne.n	8005458 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d108      	bne.n	800540a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80053f8:	f000 f838 	bl	800546c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005400:	f7ff ff16 	bl	8005230 <FLASH_WaitForLastOperation>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
 8005408:	e024      	b.n	8005454 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f04f 32ff 	mov.w	r2, #4294967295
 8005410:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60bb      	str	r3, [r7, #8]
 8005418:	e012      	b.n	8005440 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800541a:	68b8      	ldr	r0, [r7, #8]
 800541c:	f000 f836 	bl	800548c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005424:	f7ff ff04 	bl	8005230 <FLASH_WaitForLastOperation>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	601a      	str	r2, [r3, #0]
          break;
 8005438:	e00a      	b.n	8005450 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	3301      	adds	r3, #1
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4413      	add	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d3e4      	bcc.n	800541a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005450:	f000 f878 	bl	8005544 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005454:	f000 f832 	bl	80054bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <HAL_FLASHEx_Erase+0xac>)
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]

  return status;
 800545e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000370 	.word	0x20000370

0800546c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005470:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <FLASH_MassErase+0x1c>)
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	4a04      	ldr	r2, [pc, #16]	@ (8005488 <FLASH_MassErase+0x1c>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800547a:	f043 0304 	orr.w	r3, r3, #4
 800547e:	6153      	str	r3, [r2, #20]
#endif
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	58004000 	.word	0x58004000

0800548c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005494:	4b08      	ldr	r3, [pc, #32]	@ (80054b8 <FLASH_PageErase+0x2c>)
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	4a05      	ldr	r2, [pc, #20]	@ (80054b8 <FLASH_PageErase+0x2c>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a8:	f043 0302 	orr.w	r3, r3, #2
 80054ac:	6153      	str	r3, [r2, #20]
#endif
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	58004000 	.word	0x58004000

080054bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80054c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d117      	bne.n	80054fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80054cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80054d8:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	4b16      	ldr	r3, [pc, #88]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a15      	ldr	r2, [pc, #84]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054f0:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054fa:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80054fc:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005504:	2b01      	cmp	r3, #1
 8005506:	d117      	bne.n	8005538 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005508:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <FLASH_FlushCaches+0x84>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a0c      	ldr	r2, [pc, #48]	@ (8005540 <FLASH_FlushCaches+0x84>)
 800550e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005512:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <FLASH_FlushCaches+0x84>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <FLASH_FlushCaches+0x84>)
 800551a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <FLASH_FlushCaches+0x84>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a06      	ldr	r2, [pc, #24]	@ (8005540 <FLASH_FlushCaches+0x84>)
 8005526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800552a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800552c:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <FLASH_FlushCaches+0x84>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a03      	ldr	r2, [pc, #12]	@ (8005540 <FLASH_FlushCaches+0x84>)
 8005532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005536:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr
 8005540:	58004000 	.word	0x58004000

08005544 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <FLASH_AcknowledgePageErase+0x1c>)
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4a04      	ldr	r2, [pc, #16]	@ (8005560 <FLASH_AcknowledgePageErase+0x1c>)
 800554e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005552:	f023 0302 	bic.w	r3, r3, #2
 8005556:	6153      	str	r3, [r2, #20]
#endif
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	58004000 	.word	0x58004000

08005564 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005572:	e140      	b.n	80057f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2101      	movs	r1, #1
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	fa01 f303 	lsl.w	r3, r1, r3
 8005580:	4013      	ands	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 8132 	beq.w	80057f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d005      	beq.n	80055a4 <HAL_GPIO_Init+0x40>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d130      	bne.n	8005606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	2203      	movs	r2, #3
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055da:	2201      	movs	r2, #1
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4013      	ands	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	f003 0201 	and.w	r2, r3, #1
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d017      	beq.n	8005642 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	2203      	movs	r2, #3
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4013      	ands	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d123      	bne.n	8005696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	08da      	lsrs	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3208      	adds	r2, #8
 8005656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	220f      	movs	r2, #15
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4013      	ands	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	08da      	lsrs	r2, r3, #3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3208      	adds	r2, #8
 8005690:	6939      	ldr	r1, [r7, #16]
 8005692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	2203      	movs	r2, #3
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4013      	ands	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f003 0203 	and.w	r2, r3, #3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 808c 	beq.w	80057f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80056d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005814 <HAL_GPIO_Init+0x2b0>)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	3302      	adds	r3, #2
 80056e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	2207      	movs	r2, #7
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4013      	ands	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005702:	d00d      	beq.n	8005720 <HAL_GPIO_Init+0x1bc>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a44      	ldr	r2, [pc, #272]	@ (8005818 <HAL_GPIO_Init+0x2b4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <HAL_GPIO_Init+0x1b8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a43      	ldr	r2, [pc, #268]	@ (800581c <HAL_GPIO_Init+0x2b8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d101      	bne.n	8005718 <HAL_GPIO_Init+0x1b4>
 8005714:	2302      	movs	r3, #2
 8005716:	e004      	b.n	8005722 <HAL_GPIO_Init+0x1be>
 8005718:	2307      	movs	r3, #7
 800571a:	e002      	b.n	8005722 <HAL_GPIO_Init+0x1be>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_GPIO_Init+0x1be>
 8005720:	2300      	movs	r3, #0
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	f002 0203 	and.w	r2, r2, #3
 8005728:	0092      	lsls	r2, r2, #2
 800572a:	4093      	lsls	r3, r2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005732:	4938      	ldr	r1, [pc, #224]	@ (8005814 <HAL_GPIO_Init+0x2b0>)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	089b      	lsrs	r3, r3, #2
 8005738:	3302      	adds	r3, #2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005740:	4b37      	ldr	r3, [pc, #220]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	43db      	mvns	r3, r3
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4013      	ands	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005764:	4a2e      	ldr	r2, [pc, #184]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800576a:	4b2d      	ldr	r3, [pc, #180]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	43db      	mvns	r3, r3
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800578e:	4a24      	ldr	r2, [pc, #144]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005794:	4b22      	ldr	r3, [pc, #136]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 8005796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800579a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	43db      	mvns	r3, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80057ba:	4a19      	ldr	r2, [pc, #100]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80057c2:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 80057c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80057e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	3301      	adds	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	f47f aeb7 	bne.w	8005574 <HAL_GPIO_Init+0x10>
  }
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	48000400 	.word	0x48000400
 800581c:	48000800 	.word	0x48000800
 8005820:	58000800 	.word	0x58000800

08005824 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005832:	e0af      	b.n	8005994 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005834:	2201      	movs	r2, #1
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4013      	ands	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a2 	beq.w	800598e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800584a:	4a59      	ldr	r2, [pc, #356]	@ (80059b0 <HAL_GPIO_DeInit+0x18c>)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	3302      	adds	r3, #2
 8005852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005856:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	2207      	movs	r2, #7
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4013      	ands	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005872:	d00d      	beq.n	8005890 <HAL_GPIO_DeInit+0x6c>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a4f      	ldr	r2, [pc, #316]	@ (80059b4 <HAL_GPIO_DeInit+0x190>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <HAL_GPIO_DeInit+0x68>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a4e      	ldr	r2, [pc, #312]	@ (80059b8 <HAL_GPIO_DeInit+0x194>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d101      	bne.n	8005888 <HAL_GPIO_DeInit+0x64>
 8005884:	2302      	movs	r3, #2
 8005886:	e004      	b.n	8005892 <HAL_GPIO_DeInit+0x6e>
 8005888:	2307      	movs	r3, #7
 800588a:	e002      	b.n	8005892 <HAL_GPIO_DeInit+0x6e>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_GPIO_DeInit+0x6e>
 8005890:	2300      	movs	r3, #0
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	f002 0203 	and.w	r2, r2, #3
 8005898:	0092      	lsls	r2, r2, #2
 800589a:	4093      	lsls	r3, r2
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d136      	bne.n	8005910 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80058a2:	4b46      	ldr	r3, [pc, #280]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058a4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	4943      	ldr	r1, [pc, #268]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80058b4:	4b41      	ldr	r3, [pc, #260]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	43db      	mvns	r3, r3
 80058be:	493f      	ldr	r1, [pc, #252]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80058c6:	4b3d      	ldr	r3, [pc, #244]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	493b      	ldr	r1, [pc, #236]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80058d4:	4b39      	ldr	r3, [pc, #228]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	43db      	mvns	r3, r3
 80058dc:	4937      	ldr	r1, [pc, #220]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058de:	4013      	ands	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	2207      	movs	r2, #7
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80058f2:	4a2f      	ldr	r2, [pc, #188]	@ (80059b0 <HAL_GPIO_DeInit+0x18c>)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	089b      	lsrs	r3, r3, #2
 80058f8:	3302      	adds	r3, #2
 80058fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	43da      	mvns	r2, r3
 8005902:	482b      	ldr	r0, [pc, #172]	@ (80059b0 <HAL_GPIO_DeInit+0x18c>)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	089b      	lsrs	r3, r3, #2
 8005908:	400a      	ands	r2, r1
 800590a:	3302      	adds	r3, #2
 800590c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	2103      	movs	r1, #3
 800591a:	fa01 f303 	lsl.w	r3, r1, r3
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	08da      	lsrs	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3208      	adds	r2, #8
 800592c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	220f      	movs	r2, #15
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	43db      	mvns	r3, r3
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	08d2      	lsrs	r2, r2, #3
 8005944:	4019      	ands	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3208      	adds	r2, #8
 800594a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	2103      	movs	r1, #3
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	2101      	movs	r1, #1
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	401a      	ands	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	2103      	movs	r1, #3
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	401a      	ands	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3301      	adds	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f af49 	bne.w	8005834 <HAL_GPIO_DeInit+0x10>
  }
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	48000400 	.word	0x48000400
 80059b8:	48000800 	.word	0x48000800
 80059bc:	58000800 	.word	0x58000800

080059c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	807b      	strh	r3, [r7, #2]
 80059cc:	4613      	mov	r3, r2
 80059ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059d0:	787b      	ldrb	r3, [r7, #1]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059d6:	887a      	ldrh	r2, [r7, #2]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059dc:	e002      	b.n	80059e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059de:	887a      	ldrh	r2, [r7, #2]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr
	...

080059f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059fa:	4b08      	ldr	r3, [pc, #32]	@ (8005a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d006      	beq.n	8005a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a06:	4a05      	ldr	r2, [pc, #20]	@ (8005a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a08:	88fb      	ldrh	r3, [r7, #6]
 8005a0a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f005 fe7a 	bl	800b708 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	58000800 	.word	0x58000800

08005a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e08d      	b.n	8005b4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc fb0c 	bl	8002064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2224      	movs	r2, #36	@ 0x24
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d107      	bne.n	8005a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	e006      	b.n	8005aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d108      	bne.n	8005ac2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005abe:	605a      	str	r2, [r3, #4]
 8005ac0:	e007      	b.n	8005ad2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69d9      	ldr	r1, [r3, #28]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1a      	ldr	r2, [r3, #32]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	461a      	mov	r2, r3
 8005b64:	460b      	mov	r3, r1
 8005b66:	817b      	strh	r3, [r7, #10]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	f040 80fd 	bne.w	8005d74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_I2C_Master_Transmit+0x30>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e0f6      	b.n	8005d76 <HAL_I2C_Master_Transmit+0x21e>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b90:	f7fc fea8 	bl	80028e4 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	2319      	movs	r3, #25
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fb71 	bl	800628a <I2C_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e0e1      	b.n	8005d76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2221      	movs	r2, #33	@ 0x21
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2210      	movs	r2, #16
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	893a      	ldrh	r2, [r7, #8]
 8005bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2bff      	cmp	r3, #255	@ 0xff
 8005be2:	d906      	bls.n	8005bf2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	22ff      	movs	r2, #255	@ 0xff
 8005be8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005bea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	e007      	b.n	8005c02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005bfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d024      	beq.n	8005c54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0e:	781a      	ldrb	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	3301      	adds	r3, #1
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	8979      	ldrh	r1, [r7, #10]
 8005c46:	4b4e      	ldr	r3, [pc, #312]	@ (8005d80 <HAL_I2C_Master_Transmit+0x228>)
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fd6b 	bl	8006728 <I2C_TransferConfig>
 8005c52:	e066      	b.n	8005d22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	8979      	ldrh	r1, [r7, #10]
 8005c5c:	4b48      	ldr	r3, [pc, #288]	@ (8005d80 <HAL_I2C_Master_Transmit+0x228>)
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fd60 	bl	8006728 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c68:	e05b      	b.n	8005d22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	6a39      	ldr	r1, [r7, #32]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fb64 	bl	800633c <I2C_WaitOnTXISFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07b      	b.n	8005d76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	781a      	ldrb	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d034      	beq.n	8005d22 <HAL_I2C_Master_Transmit+0x1ca>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d130      	bne.n	8005d22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2180      	movs	r1, #128	@ 0x80
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fadd 	bl	800628a <I2C_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e04d      	b.n	8005d76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2bff      	cmp	r3, #255	@ 0xff
 8005ce2:	d90e      	bls.n	8005d02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	22ff      	movs	r2, #255	@ 0xff
 8005ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	8979      	ldrh	r1, [r7, #10]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fd14 	bl	8006728 <I2C_TransferConfig>
 8005d00:	e00f      	b.n	8005d22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	8979      	ldrh	r1, [r7, #10]
 8005d14:	2300      	movs	r3, #0
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fd03 	bl	8006728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d19e      	bne.n	8005c6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	6a39      	ldr	r1, [r7, #32]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fb4a 	bl	80063ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e01a      	b.n	8005d76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2220      	movs	r2, #32
 8005d46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <HAL_I2C_Master_Transmit+0x22c>)
 8005d54:	400b      	ands	r3, r1
 8005d56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	80002000 	.word	0x80002000
 8005d84:	fe00e800 	.word	0xfe00e800

08005d88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	461a      	mov	r2, r3
 8005d94:	460b      	mov	r3, r1
 8005d96:	817b      	strh	r3, [r7, #10]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	f040 80db 	bne.w	8005f60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_I2C_Master_Receive+0x30>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e0d4      	b.n	8005f62 <HAL_I2C_Master_Receive+0x1da>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dc0:	f7fc fd90 	bl	80028e4 <HAL_GetTick>
 8005dc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2319      	movs	r3, #25
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fa59 	bl	800628a <I2C_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e0bf      	b.n	8005f62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2222      	movs	r2, #34	@ 0x22
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2210      	movs	r2, #16
 8005dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	893a      	ldrh	r2, [r7, #8]
 8005e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2bff      	cmp	r3, #255	@ 0xff
 8005e12:	d90e      	bls.n	8005e32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	22ff      	movs	r2, #255	@ 0xff
 8005e18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	8979      	ldrh	r1, [r7, #10]
 8005e22:	4b52      	ldr	r3, [pc, #328]	@ (8005f6c <HAL_I2C_Master_Receive+0x1e4>)
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fc7c 	bl	8006728 <I2C_TransferConfig>
 8005e30:	e06d      	b.n	8005f0e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	8979      	ldrh	r1, [r7, #10]
 8005e44:	4b49      	ldr	r3, [pc, #292]	@ (8005f6c <HAL_I2C_Master_Receive+0x1e4>)
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fc6b 	bl	8006728 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005e52:	e05c      	b.n	8005f0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	6a39      	ldr	r1, [r7, #32]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 faf9 	bl	8006450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e07c      	b.n	8005f62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d034      	beq.n	8005f0e <HAL_I2C_Master_Receive+0x186>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d130      	bne.n	8005f0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2180      	movs	r1, #128	@ 0x80
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f9e7 	bl	800628a <I2C_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e04d      	b.n	8005f62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2bff      	cmp	r3, #255	@ 0xff
 8005ece:	d90e      	bls.n	8005eee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	22ff      	movs	r2, #255	@ 0xff
 8005ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	8979      	ldrh	r1, [r7, #10]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fc1e 	bl	8006728 <I2C_TransferConfig>
 8005eec:	e00f      	b.n	8005f0e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	8979      	ldrh	r1, [r7, #10]
 8005f00:	2300      	movs	r3, #0
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fc0d 	bl	8006728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d19d      	bne.n	8005e54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	6a39      	ldr	r1, [r7, #32]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fa54 	bl	80063ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01a      	b.n	8005f62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2220      	movs	r2, #32
 8005f32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f70 <HAL_I2C_Master_Receive+0x1e8>)
 8005f40:	400b      	ands	r3, r1
 8005f42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	80002400 	.word	0x80002400
 8005f70:	fe00e800 	.word	0xfe00e800

08005f74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	817b      	strh	r3, [r7, #10]
 8005f86:	460b      	mov	r3, r1
 8005f88:	813b      	strh	r3, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	f040 80f9 	bne.w	800618e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_I2C_Mem_Write+0x34>
 8005fa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d105      	bne.n	8005fb4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0ed      	b.n	8006190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_I2C_Mem_Write+0x4e>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e0e6      	b.n	8006190 <HAL_I2C_Mem_Write+0x21c>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fca:	f7fc fc8b 	bl	80028e4 <HAL_GetTick>
 8005fce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2319      	movs	r3, #25
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f954 	bl	800628a <I2C_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0d1      	b.n	8006190 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2221      	movs	r2, #33	@ 0x21
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2240      	movs	r2, #64	@ 0x40
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800600c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006014:	88f8      	ldrh	r0, [r7, #6]
 8006016:	893a      	ldrh	r2, [r7, #8]
 8006018:	8979      	ldrh	r1, [r7, #10]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	4603      	mov	r3, r0
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f8b9 	bl	800619c <I2C_RequestMemoryWrite>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e0a9      	b.n	8006190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2bff      	cmp	r3, #255	@ 0xff
 8006044:	d90e      	bls.n	8006064 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	22ff      	movs	r2, #255	@ 0xff
 800604a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006050:	b2da      	uxtb	r2, r3
 8006052:	8979      	ldrh	r1, [r7, #10]
 8006054:	2300      	movs	r3, #0
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 fb63 	bl	8006728 <I2C_TransferConfig>
 8006062:	e00f      	b.n	8006084 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006072:	b2da      	uxtb	r2, r3
 8006074:	8979      	ldrh	r1, [r7, #10]
 8006076:	2300      	movs	r3, #0
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 fb52 	bl	8006728 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f957 	bl	800633c <I2C_WaitOnTXISFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e07b      	b.n	8006190 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d034      	beq.n	800613c <HAL_I2C_Mem_Write+0x1c8>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d130      	bne.n	800613c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e0:	2200      	movs	r2, #0
 80060e2:	2180      	movs	r1, #128	@ 0x80
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f8d0 	bl	800628a <I2C_WaitOnFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e04d      	b.n	8006190 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2bff      	cmp	r3, #255	@ 0xff
 80060fc:	d90e      	bls.n	800611c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	22ff      	movs	r2, #255	@ 0xff
 8006102:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006108:	b2da      	uxtb	r2, r3
 800610a:	8979      	ldrh	r1, [r7, #10]
 800610c:	2300      	movs	r3, #0
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fb07 	bl	8006728 <I2C_TransferConfig>
 800611a:	e00f      	b.n	800613c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612a:	b2da      	uxtb	r2, r3
 800612c:	8979      	ldrh	r1, [r7, #10]
 800612e:	2300      	movs	r3, #0
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 faf6 	bl	8006728 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d19e      	bne.n	8006084 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f93d 	bl	80063ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e01a      	b.n	8006190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2220      	movs	r2, #32
 8006160:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6859      	ldr	r1, [r3, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b0a      	ldr	r3, [pc, #40]	@ (8006198 <HAL_I2C_Mem_Write+0x224>)
 800616e:	400b      	ands	r3, r1
 8006170:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800618e:	2302      	movs	r3, #2
  }
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	fe00e800 	.word	0xfe00e800

0800619c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	4608      	mov	r0, r1
 80061a6:	4611      	mov	r1, r2
 80061a8:	461a      	mov	r2, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	817b      	strh	r3, [r7, #10]
 80061ae:	460b      	mov	r3, r1
 80061b0:	813b      	strh	r3, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	8979      	ldrh	r1, [r7, #10]
 80061bc:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <I2C_RequestMemoryWrite+0xa4>)
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 faaf 	bl	8006728 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	69b9      	ldr	r1, [r7, #24]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f8b4 	bl	800633c <I2C_WaitOnTXISFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e02c      	b.n	8006238 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d105      	bne.n	80061f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061e4:	893b      	ldrh	r3, [r7, #8]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ee:	e015      	b.n	800621c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061f0:	893b      	ldrh	r3, [r7, #8]
 80061f2:	0a1b      	lsrs	r3, r3, #8
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	69b9      	ldr	r1, [r7, #24]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 f89a 	bl	800633c <I2C_WaitOnTXISFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e012      	b.n	8006238 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006212:	893b      	ldrh	r3, [r7, #8]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2200      	movs	r2, #0
 8006224:	2180      	movs	r1, #128	@ 0x80
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f82f 	bl	800628a <I2C_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	80002000 	.word	0x80002000

08006244 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b02      	cmp	r3, #2
 8006258:	d103      	bne.n	8006262 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2200      	movs	r2, #0
 8006260:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d007      	beq.n	8006280 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	619a      	str	r2, [r3, #24]
  }
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	bc80      	pop	{r7}
 8006288:	4770      	bx	lr

0800628a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800629a:	e03b      	b.n	8006314 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f961 	bl	8006568 <I2C_IsErrorOccurred>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e041      	b.n	8006334 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d02d      	beq.n	8006314 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b8:	f7fc fb14 	bl	80028e4 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d302      	bcc.n	80062ce <I2C_WaitOnFlagUntilTimeout+0x44>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d122      	bne.n	8006314 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4013      	ands	r3, r2
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d113      	bne.n	8006314 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e00f      	b.n	8006334 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4013      	ands	r3, r2
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	429a      	cmp	r2, r3
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	429a      	cmp	r2, r3
 8006330:	d0b4      	beq.n	800629c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006348:	e033      	b.n	80063b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f90a 	bl	8006568 <I2C_IsErrorOccurred>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e031      	b.n	80063c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d025      	beq.n	80063b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7fc fabd 	bl	80028e4 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11a      	bne.n	80063b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b02      	cmp	r3, #2
 8006388:	d013      	beq.n	80063b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638e:	f043 0220 	orr.w	r2, r3, #32
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e007      	b.n	80063c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d1c4      	bne.n	800634a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063d6:	e02f      	b.n	8006438 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f8c3 	bl	8006568 <I2C_IsErrorOccurred>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e02d      	b.n	8006448 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ec:	f7fc fa7a 	bl	80028e4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d302      	bcc.n	8006402 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d11a      	bne.n	8006438 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b20      	cmp	r3, #32
 800640e:	d013      	beq.n	8006438 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006414:	f043 0220 	orr.w	r2, r3, #32
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e007      	b.n	8006448 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b20      	cmp	r3, #32
 8006444:	d1c8      	bne.n	80063d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006460:	e071      	b.n	8006546 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f87e 	bl	8006568 <I2C_IsErrorOccurred>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b20      	cmp	r3, #32
 8006482:	d13b      	bne.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d138      	bne.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b04      	cmp	r3, #4
 8006496:	d105      	bne.n	80064a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d121      	bne.n	80064f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2210      	movs	r2, #16
 80064b8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2204      	movs	r2, #4
 80064be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2220      	movs	r2, #32
 80064c6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b24      	ldr	r3, [pc, #144]	@ (8006564 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80064d4:	400b      	ands	r3, r1
 80064d6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
 80064f4:	e002      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80064fc:	f7fc f9f2 	bl	80028e4 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d119      	bne.n	8006546 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d116      	bne.n	8006546 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b04      	cmp	r3, #4
 8006524:	d00f      	beq.n	8006546 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652a:	f043 0220 	orr.w	r2, r3, #32
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b04      	cmp	r3, #4
 8006552:	d002      	beq.n	800655a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d083      	beq.n	8006462 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	fe00e800 	.word	0xfe00e800

08006568 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	@ 0x28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b00      	cmp	r3, #0
 8006592:	d068      	beq.n	8006666 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2210      	movs	r2, #16
 800659a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800659c:	e049      	b.n	8006632 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d045      	beq.n	8006632 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065a6:	f7fc f99d 	bl	80028e4 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d302      	bcc.n	80065bc <I2C_IsErrorOccurred+0x54>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d13a      	bne.n	8006632 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065de:	d121      	bne.n	8006624 <I2C_IsErrorOccurred+0xbc>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065e6:	d01d      	beq.n	8006624 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d01a      	beq.n	8006624 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065fe:	f7fc f971 	bl	80028e4 <HAL_GetTick>
 8006602:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006604:	e00e      	b.n	8006624 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006606:	f7fc f96d 	bl	80028e4 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b19      	cmp	r3, #25
 8006612:	d907      	bls.n	8006624 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	f043 0320 	orr.w	r3, r3, #32
 800661a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006622:	e006      	b.n	8006632 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b20      	cmp	r3, #32
 8006630:	d1e9      	bne.n	8006606 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b20      	cmp	r3, #32
 800663e:	d003      	beq.n	8006648 <I2C_IsErrorOccurred+0xe0>
 8006640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0aa      	beq.n	800659e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2220      	movs	r2, #32
 8006656:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f043 0304 	orr.w	r3, r3, #4
 800665e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	f043 0308 	orr.w	r3, r3, #8
 80066a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	f043 0302 	orr.w	r3, r3, #2
 80066c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80066d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01c      	beq.n	8006716 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fdb1 	bl	8006244 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6859      	ldr	r1, [r3, #4]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <I2C_IsErrorOccurred+0x1bc>)
 80066ee:	400b      	ands	r3, r1
 80066f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	431a      	orrs	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800671a:	4618      	mov	r0, r3
 800671c:	3728      	adds	r7, #40	@ 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	fe00e800 	.word	0xfe00e800

08006728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	607b      	str	r3, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	817b      	strh	r3, [r7, #10]
 8006736:	4613      	mov	r3, r2
 8006738:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800673a:	897b      	ldrh	r3, [r7, #10]
 800673c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006740:	7a7b      	ldrb	r3, [r7, #9]
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006748:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	4313      	orrs	r3, r2
 8006752:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006756:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	0d5b      	lsrs	r3, r3, #21
 8006762:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006766:	4b07      	ldr	r3, [pc, #28]	@ (8006784 <I2C_TransferConfig+0x5c>)
 8006768:	430b      	orrs	r3, r1
 800676a:	43db      	mvns	r3, r3
 800676c:	ea02 0103 	and.w	r1, r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800677a:	bf00      	nop
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr
 8006784:	03ff63ff 	.word	0x03ff63ff

08006788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b20      	cmp	r3, #32
 800679c:	d138      	bne.n	8006810 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e032      	b.n	8006812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2224      	movs	r2, #36	@ 0x24
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6819      	ldr	r1, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	e000      	b.n	8006812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006810:	2302      	movs	r3, #2
  }
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr

0800681c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b20      	cmp	r3, #32
 8006830:	d139      	bne.n	80068a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800683c:	2302      	movs	r3, #2
 800683e:	e033      	b.n	80068a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2224      	movs	r2, #36	@ 0x24
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800686e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068a6:	2302      	movs	r3, #2
  }
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068b8:	4b04      	ldr	r3, [pc, #16]	@ (80068cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a03      	ldr	r2, [pc, #12]	@ (80068cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80068be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c2:	6013      	str	r3, [r2, #0]
}
 80068c4:	bf00      	nop
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr
 80068cc:	58000400 	.word	0x58000400

080068d0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10c      	bne.n	80068fc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80068e2:	4b13      	ldr	r3, [pc, #76]	@ (8006930 <HAL_PWR_EnterSLEEPMode+0x60>)
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ee:	d10d      	bne.n	800690c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80068f0:	f000 f83c 	bl	800696c <HAL_PWREx_DisableLowPowerRunMode>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80068fa:	e015      	b.n	8006928 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80068fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006930 <HAL_PWR_EnterSLEEPMode+0x60>)
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006908:	f000 f822 	bl	8006950 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800690c:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <HAL_PWR_EnterSLEEPMode+0x64>)
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	4a08      	ldr	r2, [pc, #32]	@ (8006934 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006912:	f023 0304 	bic.w	r3, r3, #4
 8006916:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800691e:	bf30      	wfi
 8006920:	e002      	b.n	8006928 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006922:	bf40      	sev
    __WFE();
 8006924:	bf20      	wfe
    __WFE();
 8006926:	bf20      	wfe
  }
}
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	58000400 	.word	0x58000400
 8006934:	e000ed00 	.word	0xe000ed00

08006938 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800693c:	4b03      	ldr	r3, [pc, #12]	@ (800694c <HAL_PWREx_GetVoltageRange+0x14>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006944:	4618      	mov	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr
 800694c:	58000400 	.word	0x58000400

08006950 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006954:	4b04      	ldr	r3, [pc, #16]	@ (8006968 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a03      	ldr	r2, [pc, #12]	@ (8006968 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800695a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800695e:	6013      	str	r3, [r2, #0]
}
 8006960:	bf00      	nop
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr
 8006968:	58000400 	.word	0x58000400

0800696c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006972:	4b16      	ldr	r3, [pc, #88]	@ (80069cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a15      	ldr	r2, [pc, #84]	@ (80069cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006978:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800697c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800697e:	4b14      	ldr	r3, [pc, #80]	@ (80069d0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2232      	movs	r2, #50	@ 0x32
 8006984:	fb02 f303 	mul.w	r3, r2, r3
 8006988:	4a12      	ldr	r2, [pc, #72]	@ (80069d4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	0c9b      	lsrs	r3, r3, #18
 8006990:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006992:	e002      	b.n	800699a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3b01      	subs	r3, #1
 8006998:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800699a:	4b0c      	ldr	r3, [pc, #48]	@ (80069cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a6:	d102      	bne.n	80069ae <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f2      	bne.n	8006994 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80069ae:	4b07      	ldr	r3, [pc, #28]	@ (80069cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ba:	d101      	bne.n	80069c0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e000      	b.n	80069c2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr
 80069cc:	58000400 	.word	0x58000400
 80069d0:	20000004 	.word	0x20000004
 80069d4:	431bde83 	.word	0x431bde83

080069d8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80069e2:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 0307 	bic.w	r3, r3, #7
 80069ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006a24 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80069f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a28 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006a28 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80069f8:	f043 0304 	orr.w	r3, r3, #4
 80069fc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006a04:	bf30      	wfi
 8006a06:	e002      	b.n	8006a0e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006a08:	bf40      	sev
    __WFE();
 8006a0a:	bf20      	wfe
    __WFE();
 8006a0c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006a0e:	4b06      	ldr	r3, [pc, #24]	@ (8006a28 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	4a05      	ldr	r2, [pc, #20]	@ (8006a28 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006a14:	f023 0304 	bic.w	r3, r3, #4
 8006a18:	6113      	str	r3, [r2, #16]
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr
 8006a24:	58000400 	.word	0x58000400
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <LL_PWR_IsEnabledBkUpAccess>:
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3c:	d101      	bne.n	8006a42 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	58000400 	.word	0x58000400

08006a50 <LL_RCC_HSE_EnableTcxo>:
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a62:	6013      	str	r3, [r2, #0]
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <LL_RCC_HSE_DisableTcxo>:
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a7e:	6013      	str	r3, [r2, #0]
}
 8006a80:	bf00      	nop
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a9a:	d101      	bne.n	8006aa0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <LL_RCC_HSE_Enable>:
{
 8006aaa:	b480      	push	{r7}
 8006aac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006abc:	6013      	str	r3, [r2, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <LL_RCC_HSE_Disable>:
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ad8:	6013      	str	r3, [r2, #0]
}
 8006ada:	bf00      	nop
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr

08006ae2 <LL_RCC_HSE_IsReady>:
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006af4:	d101      	bne.n	8006afa <LL_RCC_HSE_IsReady+0x18>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <LL_RCC_HSE_IsReady+0x1a>
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <LL_RCC_HSI_Enable>:
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <LL_RCC_HSI_Disable>:
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b32:	6013      	str	r3, [r2, #0]
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <LL_RCC_HSI_IsReady>:
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b4e:	d101      	bne.n	8006b54 <LL_RCC_HSI_IsReady+0x18>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <LL_RCC_HSI_IsReady+0x1a>
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <LL_RCC_HSI_SetCalibTrimming>:
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	061b      	lsls	r3, r3, #24
 8006b74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	604b      	str	r3, [r1, #4]
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr

08006b86 <LL_RCC_LSE_IsReady>:
{
 8006b86:	b480      	push	{r7}
 8006b88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d101      	bne.n	8006b9e <LL_RCC_LSE_IsReady+0x18>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <LL_RCC_LSE_IsReady+0x1a>
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <LL_RCC_LSI_Enable>:
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bb8:	f043 0301 	orr.w	r3, r3, #1
 8006bbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006bc0:	bf00      	nop
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <LL_RCC_LSI_Disable>:
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006be0:	bf00      	nop
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr

08006be8 <LL_RCC_LSI_IsReady>:
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d101      	bne.n	8006c00 <LL_RCC_LSI_IsReady+0x18>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <LL_RCC_LSI_IsReady+0x1a>
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <LL_RCC_MSI_Enable>:
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	6013      	str	r3, [r2, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr

08006c26 <LL_RCC_MSI_Disable>:
{
 8006c26:	b480      	push	{r7}
 8006c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	6013      	str	r3, [r2, #0]
}
 8006c3a:	bf00      	nop
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <LL_RCC_MSI_IsReady>:
{
 8006c42:	b480      	push	{r7}
 8006c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d101      	bne.n	8006c58 <LL_RCC_MSI_IsReady+0x16>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <LL_RCC_MSI_IsReady+0x18>
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr

08006c62 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006c62:	b480      	push	{r7}
 8006c64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d101      	bne.n	8006c78 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bc80      	pop	{r7}
 8006c80:	4770      	bx	lr

08006c82 <LL_RCC_MSI_GetRange>:
{
 8006c82:	b480      	push	{r7}
 8006c84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ca4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <LL_RCC_SetSysClkSource>:
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f023 0203 	bic.w	r2, r3, #3
 8006cea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	608b      	str	r3, [r1, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <LL_RCC_GetSysClkSource>:
{
 8006cfe:	b480      	push	{r7}
 8006d00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 030c 	and.w	r3, r3, #12
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <LL_RCC_SetAHBPrescaler>:
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	608b      	str	r3, [r1, #8]
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr

08006d3a <LL_RCC_SetAHB3Prescaler>:
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d4a:	f023 020f 	bic.w	r2, r3, #15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	091b      	lsrs	r3, r3, #4
 8006d52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <LL_RCC_SetAPB1Prescaler>:
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	608b      	str	r3, [r1, #8]
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr

08006d8c <LL_RCC_SetAPB2Prescaler>:
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	608b      	str	r3, [r1, #8]
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <LL_RCC_GetAHBPrescaler>:
{
 8006db2:	b480      	push	{r7}
 8006db4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <LL_RCC_GetAHB3Prescaler>:
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr

08006de2 <LL_RCC_GetAPB1Prescaler>:
{
 8006de2:	b480      	push	{r7}
 8006de4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <LL_RCC_GetAPB2Prescaler>:
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr

08006e0e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e20:	6013      	str	r3, [r2, #0]
}
 8006e22:	bf00      	nop
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr

08006e2a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e3c:	6013      	str	r3, [r2, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr

08006e46 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006e46:	b480      	push	{r7}
 8006e48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e58:	d101      	bne.n	8006e5e <LL_RCC_PLL_IsReady+0x18>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <LL_RCC_PLL_IsReady+0x1a>
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr

08006e68 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr

08006e80 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr

08006e96 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006e96:	b480      	push	{r7}
 8006e98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f003 0303 	and.w	r3, r3, #3
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr

08006ec2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed4:	d101      	bne.n	8006eda <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr

08006ee4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef8:	d101      	bne.n	8006efe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f1a:	d101      	bne.n	8006f20 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr

08006f2a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f3c:	d101      	bne.n	8006f42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr

08006f4c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e36f      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f5e:	f7ff fece 	bl	8006cfe <LL_RCC_GetSysClkSource>
 8006f62:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f64:	f7ff ffa2 	bl	8006eac <LL_RCC_PLL_GetMainSource>
 8006f68:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80c4 	beq.w	8007100 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <HAL_RCC_OscConfig+0x3e>
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	2b0c      	cmp	r3, #12
 8006f82:	d176      	bne.n	8007072 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d173      	bne.n	8007072 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e353      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x68>
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fb2:	e006      	b.n	8006fc2 <HAL_RCC_OscConfig+0x76>
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fbc:	091b      	lsrs	r3, r3, #4
 8006fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d222      	bcs.n	800700c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fd3c 	bl	8007a48 <RCC_SetFlashLatencyFromMSIRange>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e331      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fe4:	f043 0308 	orr.w	r3, r3, #8
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff fe53 	bl	8006cb0 <LL_RCC_MSI_SetCalibTrimming>
 800700a:	e021      	b.n	8007050 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800700c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007016:	f043 0308 	orr.w	r3, r3, #8
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800702e:	4313      	orrs	r3, r2
 8007030:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff fe3a 	bl	8006cb0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fd01 	bl	8007a48 <RCC_SetFlashLatencyFromMSIRange>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e2f6      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007050:	f000 fcc2 	bl	80079d8 <HAL_RCC_GetHCLKFreq>
 8007054:	4603      	mov	r3, r0
 8007056:	4aa7      	ldr	r2, [pc, #668]	@ (80072f4 <HAL_RCC_OscConfig+0x3a8>)
 8007058:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800705a:	4ba7      	ldr	r3, [pc, #668]	@ (80072f8 <HAL_RCC_OscConfig+0x3ac>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f7fb fc36 	bl	80028d0 <HAL_InitTick>
 8007064:	4603      	mov	r3, r0
 8007066:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007068:	7cfb      	ldrb	r3, [r7, #19]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d047      	beq.n	80070fe <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800706e:	7cfb      	ldrb	r3, [r7, #19]
 8007070:	e2e5      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d02c      	beq.n	80070d4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800707a:	f7ff fdc6 	bl	8006c0a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800707e:	f7fb fc31 	bl	80028e4 <HAL_GetTick>
 8007082:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007084:	e008      	b.n	8007098 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007086:	f7fb fc2d 	bl	80028e4 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e2d2      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007098:	f7ff fdd3 	bl	8006c42 <LL_RCC_MSI_IsReady>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0f1      	beq.n	8007086 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070ac:	f043 0308 	orr.w	r3, r3, #8
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070c4:	4313      	orrs	r3, r2
 80070c6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fdef 	bl	8006cb0 <LL_RCC_MSI_SetCalibTrimming>
 80070d2:	e015      	b.n	8007100 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070d4:	f7ff fda7 	bl	8006c26 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070d8:	f7fb fc04 	bl	80028e4 <HAL_GetTick>
 80070dc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070e0:	f7fb fc00 	bl	80028e4 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e2a5      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80070f2:	f7ff fda6 	bl	8006c42 <LL_RCC_MSI_IsReady>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f1      	bne.n	80070e0 <HAL_RCC_OscConfig+0x194>
 80070fc:	e000      	b.n	8007100 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80070fe:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d058      	beq.n	80071be <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	2b08      	cmp	r3, #8
 8007110:	d005      	beq.n	800711e <HAL_RCC_OscConfig+0x1d2>
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	2b0c      	cmp	r3, #12
 8007116:	d108      	bne.n	800712a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b03      	cmp	r3, #3
 800711c:	d105      	bne.n	800712a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d14b      	bne.n	80071be <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e289      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800712a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800713c:	4313      	orrs	r3, r2
 800713e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007148:	d102      	bne.n	8007150 <HAL_RCC_OscConfig+0x204>
 800714a:	f7ff fcae 	bl	8006aaa <LL_RCC_HSE_Enable>
 800714e:	e00d      	b.n	800716c <HAL_RCC_OscConfig+0x220>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8007158:	d104      	bne.n	8007164 <HAL_RCC_OscConfig+0x218>
 800715a:	f7ff fc79 	bl	8006a50 <LL_RCC_HSE_EnableTcxo>
 800715e:	f7ff fca4 	bl	8006aaa <LL_RCC_HSE_Enable>
 8007162:	e003      	b.n	800716c <HAL_RCC_OscConfig+0x220>
 8007164:	f7ff fcaf 	bl	8006ac6 <LL_RCC_HSE_Disable>
 8007168:	f7ff fc80 	bl	8006a6c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d012      	beq.n	800719a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007174:	f7fb fbb6 	bl	80028e4 <HAL_GetTick>
 8007178:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800717c:	f7fb fbb2 	bl	80028e4 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b64      	cmp	r3, #100	@ 0x64
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e257      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800718e:	f7ff fca8 	bl	8006ae2 <LL_RCC_HSE_IsReady>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d0f1      	beq.n	800717c <HAL_RCC_OscConfig+0x230>
 8007198:	e011      	b.n	80071be <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719a:	f7fb fba3 	bl	80028e4 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071a2:	f7fb fb9f 	bl	80028e4 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b64      	cmp	r3, #100	@ 0x64
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e244      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80071b4:	f7ff fc95 	bl	8006ae2 <LL_RCC_HSE_IsReady>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f1      	bne.n	80071a2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d046      	beq.n	8007258 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d005      	beq.n	80071dc <HAL_RCC_OscConfig+0x290>
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b0c      	cmp	r3, #12
 80071d4:	d10e      	bne.n	80071f4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d10b      	bne.n	80071f4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e22a      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fcb6 	bl	8006b5e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071f2:	e031      	b.n	8007258 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d019      	beq.n	8007230 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071fc:	f7ff fc82 	bl	8006b04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007200:	f7fb fb70 	bl	80028e4 <HAL_GetTick>
 8007204:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007208:	f7fb fb6c 	bl	80028e4 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e211      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800721a:	f7ff fc8f 	bl	8006b3c <LL_RCC_HSI_IsReady>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0f1      	beq.n	8007208 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fc98 	bl	8006b5e <LL_RCC_HSI_SetCalibTrimming>
 800722e:	e013      	b.n	8007258 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007230:	f7ff fc76 	bl	8006b20 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007234:	f7fb fb56 	bl	80028e4 <HAL_GetTick>
 8007238:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800723a:	e008      	b.n	800724e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800723c:	f7fb fb52 	bl	80028e4 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d901      	bls.n	800724e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e1f7      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800724e:	f7ff fc75 	bl	8006b3c <LL_RCC_HSI_IsReady>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1f1      	bne.n	800723c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d06e      	beq.n	8007342 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d056      	beq.n	800731a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800726c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007270:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007274:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69da      	ldr	r2, [r3, #28]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	429a      	cmp	r2, r3
 8007282:	d031      	beq.n	80072e8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d006      	beq.n	800729c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e1d0      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d013      	beq.n	80072ce <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80072a6:	f7ff fc8f 	bl	8006bc8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072aa:	f7fb fb1b 	bl	80028e4 <HAL_GetTick>
 80072ae:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072b2:	f7fb fb17 	bl	80028e4 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b11      	cmp	r3, #17
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e1bc      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80072c4:	f7ff fc90 	bl	8006be8 <LL_RCC_LSI_IsReady>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f1      	bne.n	80072b2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80072ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072d6:	f023 0210 	bic.w	r2, r3, #16
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e8:	f7ff fc5e 	bl	8006ba8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ec:	f7fb fafa 	bl	80028e4 <HAL_GetTick>
 80072f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80072f2:	e00c      	b.n	800730e <HAL_RCC_OscConfig+0x3c2>
 80072f4:	20000004 	.word	0x20000004
 80072f8:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fc:	f7fb faf2 	bl	80028e4 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b11      	cmp	r3, #17
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e197      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800730e:	f7ff fc6b 	bl	8006be8 <LL_RCC_LSI_IsReady>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0f1      	beq.n	80072fc <HAL_RCC_OscConfig+0x3b0>
 8007318:	e013      	b.n	8007342 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800731a:	f7ff fc55 	bl	8006bc8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800731e:	f7fb fae1 	bl	80028e4 <HAL_GetTick>
 8007322:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007326:	f7fb fadd 	bl	80028e4 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b11      	cmp	r3, #17
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e182      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007338:	f7ff fc56 	bl	8006be8 <LL_RCC_LSI_IsReady>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f1      	bne.n	8007326 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80d8 	beq.w	8007500 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007350:	f7ff fb6c 	bl	8006a2c <LL_PWR_IsEnabledBkUpAccess>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d113      	bne.n	8007382 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800735a:	f7ff faab 	bl	80068b4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800735e:	f7fb fac1 	bl	80028e4 <HAL_GetTick>
 8007362:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007366:	f7fb fabd 	bl	80028e4 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e162      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007378:	f7ff fb58 	bl	8006a2c <LL_PWR_IsEnabledBkUpAccess>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0f1      	beq.n	8007366 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d07b      	beq.n	8007482 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2b85      	cmp	r3, #133	@ 0x85
 8007390:	d003      	beq.n	800739a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b05      	cmp	r3, #5
 8007398:	d109      	bne.n	80073ae <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800739a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073a6:	f043 0304 	orr.w	r3, r3, #4
 80073aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073ae:	f7fb fa99 	bl	80028e4 <HAL_GetTick>
 80073b2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80073c8:	e00a      	b.n	80073e0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ca:	f7fb fa8b 	bl	80028e4 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d8:	4293      	cmp	r3, r2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e12e      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80073e0:	f7ff fbd1 	bl	8006b86 <LL_RCC_LSE_IsReady>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0ef      	beq.n	80073ca <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	2b81      	cmp	r3, #129	@ 0x81
 80073f0:	d003      	beq.n	80073fa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b85      	cmp	r3, #133	@ 0x85
 80073f8:	d121      	bne.n	800743e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073fa:	f7fb fa73 	bl	80028e4 <HAL_GetTick>
 80073fe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800740c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007414:	e00a      	b.n	800742c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007416:	f7fb fa65 	bl	80028e4 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007424:	4293      	cmp	r3, r2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e108      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800742c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0ec      	beq.n	8007416 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800743c:	e060      	b.n	8007500 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743e:	f7fb fa51 	bl	80028e4 <HAL_GetTick>
 8007442:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007458:	e00a      	b.n	8007470 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745a:	f7fb fa43 	bl	80028e4 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007468:	4293      	cmp	r3, r2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e0e6      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1ec      	bne.n	800745a <HAL_RCC_OscConfig+0x50e>
 8007480:	e03e      	b.n	8007500 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007482:	f7fb fa2f 	bl	80028e4 <HAL_GetTick>
 8007486:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800748c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007490:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800749c:	e00a      	b.n	80074b4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fb fa21 	bl	80028e4 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e0c4      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1ec      	bne.n	800749e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074c4:	f7fb fa0e 	bl	80028e4 <HAL_GetTick>
 80074c8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80074ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fb fa00 	bl	80028e4 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0a3      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80074f6:	f7ff fb46 	bl	8006b86 <LL_RCC_LSE_IsReady>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1ef      	bne.n	80074e0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8099 	beq.w	800763c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b0c      	cmp	r3, #12
 800750e:	d06c      	beq.n	80075ea <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007514:	2b02      	cmp	r3, #2
 8007516:	d14b      	bne.n	80075b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007518:	f7ff fc87 	bl	8006e2a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800751c:	f7fb f9e2 	bl	80028e4 <HAL_GetTick>
 8007520:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007524:	f7fb f9de 	bl	80028e4 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b0a      	cmp	r3, #10
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e083      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007536:	f7ff fc86 	bl	8006e46 <LL_RCC_PLL_IsReady>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f1      	bne.n	8007524 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	4b40      	ldr	r3, [pc, #256]	@ (8007648 <HAL_RCC_OscConfig+0x6fc>)
 8007548:	4013      	ands	r3, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007552:	4311      	orrs	r1, r2
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007558:	0212      	lsls	r2, r2, #8
 800755a:	4311      	orrs	r1, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007560:	4311      	orrs	r1, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007566:	4311      	orrs	r1, r2
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800756c:	430a      	orrs	r2, r1
 800756e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007572:	4313      	orrs	r3, r2
 8007574:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007576:	f7ff fc4a 	bl	8006e0e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800757a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007588:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758a:	f7fb f9ab 	bl	80028e4 <HAL_GetTick>
 800758e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007592:	f7fb f9a7 	bl	80028e4 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b0a      	cmp	r3, #10
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e04c      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80075a4:	f7ff fc4f 	bl	8006e46 <LL_RCC_PLL_IsReady>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0f1      	beq.n	8007592 <HAL_RCC_OscConfig+0x646>
 80075ae:	e045      	b.n	800763c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b0:	f7ff fc3b 	bl	8006e2a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b4:	f7fb f996 	bl	80028e4 <HAL_GetTick>
 80075b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80075ba:	e008      	b.n	80075ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075bc:	f7fb f992 	bl	80028e4 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b0a      	cmp	r3, #10
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e037      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80075ce:	f7ff fc3a 	bl	8006e46 <LL_RCC_PLL_IsReady>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f1      	bne.n	80075bc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80075d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075e2:	4b1a      	ldr	r3, [pc, #104]	@ (800764c <HAL_RCC_OscConfig+0x700>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	60cb      	str	r3, [r1, #12]
 80075e8:	e028      	b.n	800763c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e023      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	f003 0203 	and.w	r2, r3, #3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	429a      	cmp	r2, r3
 800760a:	d115      	bne.n	8007638 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007616:	429a      	cmp	r2, r3
 8007618:	d10e      	bne.n	8007638 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	429a      	cmp	r2, r3
 8007628:	d106      	bne.n	8007638 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3720      	adds	r7, #32
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	11c1808c 	.word	0x11c1808c
 800764c:	eefefffc 	.word	0xeefefffc

08007650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e10f      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007664:	4b89      	ldr	r3, [pc, #548]	@ (800788c <HAL_RCC_ClockConfig+0x23c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d91b      	bls.n	80076aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007672:	4b86      	ldr	r3, [pc, #536]	@ (800788c <HAL_RCC_ClockConfig+0x23c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f023 0207 	bic.w	r2, r3, #7
 800767a:	4984      	ldr	r1, [pc, #528]	@ (800788c <HAL_RCC_ClockConfig+0x23c>)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	4313      	orrs	r3, r2
 8007680:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007682:	f7fb f92f 	bl	80028e4 <HAL_GetTick>
 8007686:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007688:	e008      	b.n	800769c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800768a:	f7fb f92b 	bl	80028e4 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e0f3      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800769c:	4b7b      	ldr	r3, [pc, #492]	@ (800788c <HAL_RCC_ClockConfig+0x23c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d1ef      	bne.n	800768a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d016      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fb2a 	bl	8006d14 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076c0:	f7fb f910 	bl	80028e4 <HAL_GetTick>
 80076c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80076c6:	e008      	b.n	80076da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076c8:	f7fb f90c 	bl	80028e4 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d901      	bls.n	80076da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e0d4      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80076da:	f7ff fbf2 	bl	8006ec2 <LL_RCC_IsActiveFlag_HPRE>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d0f1      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d016      	beq.n	800771e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7ff fb20 	bl	8006d3a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076fa:	f7fb f8f3 	bl	80028e4 <HAL_GetTick>
 80076fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007700:	e008      	b.n	8007714 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007702:	f7fb f8ef 	bl	80028e4 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e0b7      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007714:	f7ff fbe6 	bl	8006ee4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f1      	beq.n	8007702 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	d016      	beq.n	8007758 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fb19 	bl	8006d66 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007734:	f7fb f8d6 	bl	80028e4 <HAL_GetTick>
 8007738:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800773a:	e008      	b.n	800774e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800773c:	f7fb f8d2 	bl	80028e4 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e09a      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800774e:	f7ff fbdb 	bl	8006f08 <LL_RCC_IsActiveFlag_PPRE1>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0f1      	beq.n	800773c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d017      	beq.n	8007794 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fb0e 	bl	8006d8c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007770:	f7fb f8b8 	bl	80028e4 <HAL_GetTick>
 8007774:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007776:	e008      	b.n	800778a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007778:	f7fb f8b4 	bl	80028e4 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e07c      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800778a:	f7ff fbce 	bl	8006f2a <LL_RCC_IsActiveFlag_PPRE2>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0f1      	beq.n	8007778 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d043      	beq.n	8007828 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d106      	bne.n	80077b6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80077a8:	f7ff f99b 	bl	8006ae2 <LL_RCC_HSE_IsReady>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d11e      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e066      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d106      	bne.n	80077cc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80077be:	f7ff fb42 	bl	8006e46 <LL_RCC_PLL_IsReady>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d113      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e05b      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d106      	bne.n	80077e2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80077d4:	f7ff fa35 	bl	8006c42 <LL_RCC_MSI_IsReady>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d108      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e050      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80077e2:	f7ff f9ab 	bl	8006b3c <LL_RCC_HSI_IsReady>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e049      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fa6f 	bl	8006cd8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077fa:	f7fb f873 	bl	80028e4 <HAL_GetTick>
 80077fe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007800:	e00a      	b.n	8007818 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007802:	f7fb f86f 	bl	80028e4 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007810:	4293      	cmp	r3, r2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e035      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007818:	f7ff fa71 	bl	8006cfe <LL_RCC_GetSysClkSource>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	429a      	cmp	r2, r3
 8007826:	d1ec      	bne.n	8007802 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007828:	4b18      	ldr	r3, [pc, #96]	@ (800788c <HAL_RCC_ClockConfig+0x23c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d21b      	bcs.n	800786e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007836:	4b15      	ldr	r3, [pc, #84]	@ (800788c <HAL_RCC_ClockConfig+0x23c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f023 0207 	bic.w	r2, r3, #7
 800783e:	4913      	ldr	r1, [pc, #76]	@ (800788c <HAL_RCC_ClockConfig+0x23c>)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	4313      	orrs	r3, r2
 8007844:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007846:	f7fb f84d 	bl	80028e4 <HAL_GetTick>
 800784a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800784c:	e008      	b.n	8007860 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800784e:	f7fb f849 	bl	80028e4 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e011      	b.n	8007884 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007860:	4b0a      	ldr	r3, [pc, #40]	@ (800788c <HAL_RCC_ClockConfig+0x23c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d1ef      	bne.n	800784e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800786e:	f000 f8b3 	bl	80079d8 <HAL_RCC_GetHCLKFreq>
 8007872:	4603      	mov	r3, r0
 8007874:	4a06      	ldr	r2, [pc, #24]	@ (8007890 <HAL_RCC_ClockConfig+0x240>)
 8007876:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007878:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <HAL_RCC_ClockConfig+0x244>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f7fb f827 	bl	80028d0 <HAL_InitTick>
 8007882:	4603      	mov	r3, r0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	58004000 	.word	0x58004000
 8007890:	20000004 	.word	0x20000004
 8007894:	20000008 	.word	0x20000008

08007898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078a6:	f7ff fa2a 	bl	8006cfe <LL_RCC_GetSysClkSource>
 80078aa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078ac:	f7ff fafe 	bl	8006eac <LL_RCC_PLL_GetMainSource>
 80078b0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <HAL_RCC_GetSysClockFreq+0x2c>
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b0c      	cmp	r3, #12
 80078bc:	d139      	bne.n	8007932 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d136      	bne.n	8007932 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80078c4:	f7ff f9cd 	bl	8006c62 <LL_RCC_MSI_IsEnabledRangeSelect>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d115      	bne.n	80078fa <HAL_RCC_GetSysClockFreq+0x62>
 80078ce:	f7ff f9c8 	bl	8006c62 <LL_RCC_MSI_IsEnabledRangeSelect>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d106      	bne.n	80078e6 <HAL_RCC_GetSysClockFreq+0x4e>
 80078d8:	f7ff f9d3 	bl	8006c82 <LL_RCC_MSI_GetRange>
 80078dc:	4603      	mov	r3, r0
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	e005      	b.n	80078f2 <HAL_RCC_GetSysClockFreq+0x5a>
 80078e6:	f7ff f9d7 	bl	8006c98 <LL_RCC_MSI_GetRangeAfterStandby>
 80078ea:	4603      	mov	r3, r0
 80078ec:	0a1b      	lsrs	r3, r3, #8
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	4a36      	ldr	r2, [pc, #216]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x134>)
 80078f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f8:	e014      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0x8c>
 80078fa:	f7ff f9b2 	bl	8006c62 <LL_RCC_MSI_IsEnabledRangeSelect>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b01      	cmp	r3, #1
 8007902:	d106      	bne.n	8007912 <HAL_RCC_GetSysClockFreq+0x7a>
 8007904:	f7ff f9bd 	bl	8006c82 <LL_RCC_MSI_GetRange>
 8007908:	4603      	mov	r3, r0
 800790a:	091b      	lsrs	r3, r3, #4
 800790c:	f003 030f 	and.w	r3, r3, #15
 8007910:	e005      	b.n	800791e <HAL_RCC_GetSysClockFreq+0x86>
 8007912:	f7ff f9c1 	bl	8006c98 <LL_RCC_MSI_GetRangeAfterStandby>
 8007916:	4603      	mov	r3, r0
 8007918:	091b      	lsrs	r3, r3, #4
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	4a2b      	ldr	r2, [pc, #172]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x134>)
 8007920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007924:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d115      	bne.n	8007958 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007930:	e012      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d102      	bne.n	800793e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007938:	4b25      	ldr	r3, [pc, #148]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x138>)
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e00c      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b08      	cmp	r3, #8
 8007942:	d109      	bne.n	8007958 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007944:	f7ff f8a0 	bl	8006a88 <LL_RCC_HSE_IsEnabledDiv2>
 8007948:	4603      	mov	r3, r0
 800794a:	2b01      	cmp	r3, #1
 800794c:	d102      	bne.n	8007954 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800794e:	4b20      	ldr	r3, [pc, #128]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	e001      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007954:	4b1f      	ldr	r3, [pc, #124]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007956:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007958:	f7ff f9d1 	bl	8006cfe <LL_RCC_GetSysClkSource>
 800795c:	4603      	mov	r3, r0
 800795e:	2b0c      	cmp	r3, #12
 8007960:	d12f      	bne.n	80079c2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007962:	f7ff faa3 	bl	8006eac <LL_RCC_PLL_GetMainSource>
 8007966:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d003      	beq.n	8007976 <HAL_RCC_GetSysClockFreq+0xde>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b03      	cmp	r3, #3
 8007972:	d003      	beq.n	800797c <HAL_RCC_GetSysClockFreq+0xe4>
 8007974:	e00d      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007976:	4b16      	ldr	r3, [pc, #88]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007978:	60fb      	str	r3, [r7, #12]
        break;
 800797a:	e00d      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800797c:	f7ff f884 	bl	8006a88 <LL_RCC_HSE_IsEnabledDiv2>
 8007980:	4603      	mov	r3, r0
 8007982:	2b01      	cmp	r3, #1
 8007984:	d102      	bne.n	800798c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007986:	4b12      	ldr	r3, [pc, #72]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007988:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800798a:	e005      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800798c:	4b11      	ldr	r3, [pc, #68]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800798e:	60fb      	str	r3, [r7, #12]
        break;
 8007990:	e002      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	60fb      	str	r3, [r7, #12]
        break;
 8007996:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007998:	f7ff fa66 	bl	8006e68 <LL_RCC_PLL_GetN>
 800799c:	4602      	mov	r2, r0
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	fb03 f402 	mul.w	r4, r3, r2
 80079a4:	f7ff fa77 	bl	8006e96 <LL_RCC_PLL_GetDivider>
 80079a8:	4603      	mov	r3, r0
 80079aa:	091b      	lsrs	r3, r3, #4
 80079ac:	3301      	adds	r3, #1
 80079ae:	fbb4 f4f3 	udiv	r4, r4, r3
 80079b2:	f7ff fa65 	bl	8006e80 <LL_RCC_PLL_GetR>
 80079b6:	4603      	mov	r3, r0
 80079b8:	0f5b      	lsrs	r3, r3, #29
 80079ba:	3301      	adds	r3, #1
 80079bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80079c0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80079c2:	697b      	ldr	r3, [r7, #20]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	0801e190 	.word	0x0801e190
 80079d0:	00f42400 	.word	0x00f42400
 80079d4:	01e84800 	.word	0x01e84800

080079d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079d8:	b598      	push	{r3, r4, r7, lr}
 80079da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80079dc:	f7ff ff5c 	bl	8007898 <HAL_RCC_GetSysClockFreq>
 80079e0:	4604      	mov	r4, r0
 80079e2:	f7ff f9e6 	bl	8006db2 <LL_RCC_GetAHBPrescaler>
 80079e6:	4603      	mov	r3, r0
 80079e8:	091b      	lsrs	r3, r3, #4
 80079ea:	f003 030f 	and.w	r3, r3, #15
 80079ee:	4a03      	ldr	r2, [pc, #12]	@ (80079fc <HAL_RCC_GetHCLKFreq+0x24>)
 80079f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	bd98      	pop	{r3, r4, r7, pc}
 80079fc:	0801e130 	.word	0x0801e130

08007a00 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a00:	b598      	push	{r3, r4, r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007a04:	f7ff ffe8 	bl	80079d8 <HAL_RCC_GetHCLKFreq>
 8007a08:	4604      	mov	r4, r0
 8007a0a:	f7ff f9ea 	bl	8006de2 <LL_RCC_GetAPB1Prescaler>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	0a1b      	lsrs	r3, r3, #8
 8007a12:	4a03      	ldr	r2, [pc, #12]	@ (8007a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	bd98      	pop	{r3, r4, r7, pc}
 8007a20:	0801e170 	.word	0x0801e170

08007a24 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a24:	b598      	push	{r3, r4, r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007a28:	f7ff ffd6 	bl	80079d8 <HAL_RCC_GetHCLKFreq>
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	f7ff f9e3 	bl	8006df8 <LL_RCC_GetAPB2Prescaler>
 8007a32:	4603      	mov	r3, r0
 8007a34:	0adb      	lsrs	r3, r3, #11
 8007a36:	4a03      	ldr	r2, [pc, #12]	@ (8007a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd98      	pop	{r3, r4, r7, pc}
 8007a44:	0801e170 	.word	0x0801e170

08007a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007a48:	b590      	push	{r4, r7, lr}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	091b      	lsrs	r3, r3, #4
 8007a54:	f003 030f 	and.w	r3, r3, #15
 8007a58:	4a10      	ldr	r2, [pc, #64]	@ (8007a9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007a60:	f7ff f9b2 	bl	8006dc8 <LL_RCC_GetAHB3Prescaler>
 8007a64:	4603      	mov	r3, r0
 8007a66:	091b      	lsrs	r3, r3, #4
 8007a68:	f003 030f 	and.w	r3, r3, #15
 8007a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4a09      	ldr	r2, [pc, #36]	@ (8007aa4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a82:	0c9c      	lsrs	r4, r3, #18
 8007a84:	f7fe ff58 	bl	8006938 <HAL_PWREx_GetVoltageRange>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 f80b 	bl	8007aa8 <RCC_SetFlashLatency>
 8007a92:	4603      	mov	r3, r0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd90      	pop	{r4, r7, pc}
 8007a9c:	0801e190 	.word	0x0801e190
 8007aa0:	0801e130 	.word	0x0801e130
 8007aa4:	431bde83 	.word	0x431bde83

08007aa8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08e      	sub	sp, #56	@ 0x38
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007ab2:	4a3a      	ldr	r2, [pc, #232]	@ (8007b9c <RCC_SetFlashLatency+0xf4>)
 8007ab4:	f107 0320 	add.w	r3, r7, #32
 8007ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007abc:	6018      	str	r0, [r3, #0]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007ac2:	4a37      	ldr	r2, [pc, #220]	@ (8007ba0 <RCC_SetFlashLatency+0xf8>)
 8007ac4:	f107 0318 	add.w	r3, r7, #24
 8007ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007acc:	6018      	str	r0, [r3, #0]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007ad2:	4a34      	ldr	r2, [pc, #208]	@ (8007ba4 <RCC_SetFlashLatency+0xfc>)
 8007ad4:	f107 030c 	add.w	r3, r7, #12
 8007ad8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007ada:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007ade:	2300      	movs	r3, #0
 8007ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ae8:	d11b      	bne.n	8007b22 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007aea:	2300      	movs	r3, #0
 8007aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8007aee:	e014      	b.n	8007b1a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	3338      	adds	r3, #56	@ 0x38
 8007af6:	443b      	add	r3, r7
 8007af8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007afc:	461a      	mov	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d807      	bhi.n	8007b14 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	3338      	adds	r3, #56	@ 0x38
 8007b0a:	443b      	add	r3, r7
 8007b0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b12:	e021      	b.n	8007b58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	3301      	adds	r3, #1
 8007b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d9e7      	bls.n	8007af0 <RCC_SetFlashLatency+0x48>
 8007b20:	e01a      	b.n	8007b58 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b22:	2300      	movs	r3, #0
 8007b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b26:	e014      	b.n	8007b52 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	3338      	adds	r3, #56	@ 0x38
 8007b2e:	443b      	add	r3, r7
 8007b30:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007b34:	461a      	mov	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d807      	bhi.n	8007b4c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	3338      	adds	r3, #56	@ 0x38
 8007b42:	443b      	add	r3, r7
 8007b44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b4a:	e005      	b.n	8007b58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4e:	3301      	adds	r3, #1
 8007b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d9e7      	bls.n	8007b28 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b58:	4b13      	ldr	r3, [pc, #76]	@ (8007ba8 <RCC_SetFlashLatency+0x100>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f023 0207 	bic.w	r2, r3, #7
 8007b60:	4911      	ldr	r1, [pc, #68]	@ (8007ba8 <RCC_SetFlashLatency+0x100>)
 8007b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b64:	4313      	orrs	r3, r2
 8007b66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b68:	f7fa febc 	bl	80028e4 <HAL_GetTick>
 8007b6c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b6e:	e008      	b.n	8007b82 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b70:	f7fa feb8 	bl	80028e4 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e007      	b.n	8007b92 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b82:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <RCC_SetFlashLatency+0x100>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d1ef      	bne.n	8007b70 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3738      	adds	r7, #56	@ 0x38
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	0801d880 	.word	0x0801d880
 8007ba0:	0801d888 	.word	0x0801d888
 8007ba4:	0801d890 	.word	0x0801d890
 8007ba8:	58004000 	.word	0x58004000

08007bac <LL_RCC_LSE_IsReady>:
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d101      	bne.n	8007bc4 <LL_RCC_LSE_IsReady+0x18>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e000      	b.n	8007bc6 <LL_RCC_LSE_IsReady+0x1a>
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bc80      	pop	{r7}
 8007bcc:	4770      	bx	lr

08007bce <LL_RCC_SetUSARTClockSource>:
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bda:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	43db      	mvns	r3, r3
 8007be4:	401a      	ands	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <LL_RCC_SetI2SClockSource>:
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <LL_RCC_SetLPUARTClockSource>:
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr

08007c52 <LL_RCC_SetI2CClockSource>:
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	091b      	lsrs	r3, r3, #4
 8007c66:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	401a      	ands	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007c76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr

08007c8a <LL_RCC_SetLPTIMClockSource>:
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	041b      	lsls	r3, r3, #16
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	041b      	lsls	r3, r3, #16
 8007ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr

08007cbc <LL_RCC_SetRNGClockSource>:
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ccc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr

08007ce6 <LL_RCC_SetADCClockSource>:
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007cfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr

08007d10 <LL_RCC_SetRTCClockSource>:
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bc80      	pop	{r7}
 8007d38:	4770      	bx	lr

08007d3a <LL_RCC_GetRTCClockSource>:
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr

08007d52 <LL_RCC_ForceBackupDomainReset>:
{
 8007d52:	b480      	push	{r7}
 8007d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007d6a:	bf00      	nop
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr

08007d72 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007d72:	b480      	push	{r7}
 8007d74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007d8a:	bf00      	nop
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr
	...

08007d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007da0:	2300      	movs	r3, #0
 8007da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007da4:	2300      	movs	r3, #0
 8007da6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d058      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007db4:	f7fe fd7e 	bl	80068b4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007db8:	f7fa fd94 	bl	80028e4 <HAL_GetTick>
 8007dbc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007dbe:	e009      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dc0:	f7fa fd90 	bl	80028e4 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d902      	bls.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8007dd2:	e006      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007dd4:	4b7b      	ldr	r3, [pc, #492]	@ (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de0:	d1ee      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007de2:	7cfb      	ldrb	r3, [r7, #19]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d13c      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007de8:	f7ff ffa7 	bl	8007d3a <LL_RCC_GetRTCClockSource>
 8007dec:	4602      	mov	r2, r0
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d00f      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e02:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e04:	f7ff ffa5 	bl	8007d52 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e08:	f7ff ffb3 	bl	8007d72 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d014      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e20:	f7fa fd60 	bl	80028e4 <HAL_GetTick>
 8007e24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007e26:	e00b      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e28:	f7fa fd5c 	bl	80028e4 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d902      	bls.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	74fb      	strb	r3, [r7, #19]
            break;
 8007e3e:	e004      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007e40:	f7ff feb4 	bl	8007bac <LL_RCC_LSE_IsReady>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d1ee      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007e4a:	7cfb      	ldrb	r3, [r7, #19]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d105      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff ff5b 	bl	8007d10 <LL_RCC_SetRTCClockSource>
 8007e5a:	e004      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e5c:	7cfb      	ldrb	r3, [r7, #19]
 8007e5e:	74bb      	strb	r3, [r7, #18]
 8007e60:	e001      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e62:	7cfb      	ldrb	r3, [r7, #19]
 8007e64:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fea9 	bl	8007bce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d004      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff fe9e 	bl	8007bce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff fec0 	bl	8007c28 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff fee6 	bl	8007c8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fedb 	bl	8007c8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff fed0 	bl	8007c8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fea9 	bl	8007c52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fe9e 	bl	8007c52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff fe93 	bl	8007c52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d011      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff fe5e 	bl	8007bfe <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f4a:	d107      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d010      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff fea5 	bl	8007cbc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d107      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f88:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d011      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fea3 	bl	8007ce6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fa8:	d107      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fb8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007fba:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	58000400 	.word	0x58000400

08007fc8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d071      	beq.n	80080be <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fa f9c2 	bl	8002378 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007ffc:	4b32      	ldr	r3, [pc, #200]	@ (80080c8 <HAL_RTC_Init+0x100>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	2b10      	cmp	r3, #16
 8008006:	d051      	beq.n	80080ac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008008:	4b2f      	ldr	r3, [pc, #188]	@ (80080c8 <HAL_RTC_Init+0x100>)
 800800a:	22ca      	movs	r2, #202	@ 0xca
 800800c:	625a      	str	r2, [r3, #36]	@ 0x24
 800800e:	4b2e      	ldr	r3, [pc, #184]	@ (80080c8 <HAL_RTC_Init+0x100>)
 8008010:	2253      	movs	r2, #83	@ 0x53
 8008012:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa11 	bl	800843c <RTC_EnterInitMode>
 800801a:	4603      	mov	r3, r0
 800801c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d13f      	bne.n	80080a4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008024:	4b28      	ldr	r3, [pc, #160]	@ (80080c8 <HAL_RTC_Init+0x100>)
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	4a27      	ldr	r2, [pc, #156]	@ (80080c8 <HAL_RTC_Init+0x100>)
 800802a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800802e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008032:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008034:	4b24      	ldr	r3, [pc, #144]	@ (80080c8 <HAL_RTC_Init+0x100>)
 8008036:	699a      	ldr	r2, [r3, #24]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6859      	ldr	r1, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	4319      	orrs	r1, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	430b      	orrs	r3, r1
 8008048:	491f      	ldr	r1, [pc, #124]	@ (80080c8 <HAL_RTC_Init+0x100>)
 800804a:	4313      	orrs	r3, r2
 800804c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	491b      	ldr	r1, [pc, #108]	@ (80080c8 <HAL_RTC_Init+0x100>)
 800805a:	4313      	orrs	r3, r2
 800805c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800805e:	4b1a      	ldr	r3, [pc, #104]	@ (80080c8 <HAL_RTC_Init+0x100>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806e:	430b      	orrs	r3, r1
 8008070:	4915      	ldr	r1, [pc, #84]	@ (80080c8 <HAL_RTC_Init+0x100>)
 8008072:	4313      	orrs	r3, r2
 8008074:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa14 	bl	80084a4 <RTC_ExitInitMode>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10e      	bne.n	80080a4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008086:	4b10      	ldr	r3, [pc, #64]	@ (80080c8 <HAL_RTC_Init+0x100>)
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a19      	ldr	r1, [r3, #32]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	4319      	orrs	r1, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	430b      	orrs	r3, r1
 800809e:	490a      	ldr	r1, [pc, #40]	@ (80080c8 <HAL_RTC_Init+0x100>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080a4:	4b08      	ldr	r3, [pc, #32]	@ (80080c8 <HAL_RTC_Init+0x100>)
 80080a6:	22ff      	movs	r2, #255	@ 0xff
 80080a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80080aa:	e001      	b.n	80080b0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	40002800 	.word	0x40002800

080080cc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d101      	bne.n	80080ea <HAL_RTC_SetAlarm_IT+0x1e>
 80080e6:	2302      	movs	r3, #2
 80080e8:	e0f3      	b.n	80082d2 <HAL_RTC_SetAlarm_IT+0x206>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2202      	movs	r2, #2
 80080f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80080fa:	4b78      	ldr	r3, [pc, #480]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008102:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800810a:	d06a      	beq.n	80081e2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d13a      	bne.n	8008188 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008112:	4b72      	ldr	r3, [pc, #456]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f000 f9f5 	bl	8008520 <RTC_ByteToBcd2>
 8008136:	4603      	mov	r3, r0
 8008138:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f9ee 	bl	8008520 <RTC_ByteToBcd2>
 8008144:	4603      	mov	r3, r0
 8008146:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008148:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	789b      	ldrb	r3, [r3, #2]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f9e6 	bl	8008520 <RTC_ByteToBcd2>
 8008154:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008156:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	78db      	ldrb	r3, [r3, #3]
 800815e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008160:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f9d8 	bl	8008520 <RTC_ByteToBcd2>
 8008170:	4603      	mov	r3, r0
 8008172:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008174:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800817c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	e02c      	b.n	80081e2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8008190:	d00d      	beq.n	80081ae <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800819a:	d008      	beq.n	80081ae <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800819c:	4b4f      	ldr	r3, [pc, #316]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d102      	bne.n	80081ae <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2200      	movs	r2, #0
 80081ac:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80081ba:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80081c0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	78db      	ldrb	r3, [r3, #3]
 80081c6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80081c8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80081d0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80081d2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80081d8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081e2:	4b3e      	ldr	r3, [pc, #248]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 80081e4:	22ca      	movs	r2, #202	@ 0xca
 80081e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80081e8:	4b3c      	ldr	r3, [pc, #240]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 80081ea:	2253      	movs	r2, #83	@ 0x53
 80081ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081f6:	d12c      	bne.n	8008252 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80081f8:	4b38      	ldr	r3, [pc, #224]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	4a37      	ldr	r2, [pc, #220]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 80081fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008202:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008204:	4b35      	ldr	r3, [pc, #212]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008206:	2201      	movs	r2, #1
 8008208:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008210:	d107      	bne.n	8008222 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	4930      	ldr	r1, [pc, #192]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 800821c:	4313      	orrs	r3, r2
 800821e:	644b      	str	r3, [r1, #68]	@ 0x44
 8008220:	e006      	b.n	8008230 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008222:	4a2e      	ldr	r2, [pc, #184]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008228:	4a2c      	ldr	r2, [pc, #176]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008230:	4a2a      	ldr	r2, [pc, #168]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823c:	f043 0201 	orr.w	r2, r3, #1
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008244:	4b25      	ldr	r3, [pc, #148]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	4a24      	ldr	r2, [pc, #144]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 800824a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800824e:	6193      	str	r3, [r2, #24]
 8008250:	e02b      	b.n	80082aa <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008252:	4b22      	ldr	r3, [pc, #136]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	4a21      	ldr	r2, [pc, #132]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008258:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800825c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800825e:	4b1f      	ldr	r3, [pc, #124]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008260:	2202      	movs	r2, #2
 8008262:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800826a:	d107      	bne.n	800827c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	699a      	ldr	r2, [r3, #24]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	4919      	ldr	r1, [pc, #100]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008276:	4313      	orrs	r3, r2
 8008278:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800827a:	e006      	b.n	800828a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800827c:	4a17      	ldr	r2, [pc, #92]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008282:	4a16      	ldr	r2, [pc, #88]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800828a:	4a14      	ldr	r2, [pc, #80]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008296:	f043 0202 	orr.w	r2, r3, #2
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800829e:	4b0f      	ldr	r3, [pc, #60]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	4a0e      	ldr	r2, [pc, #56]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 80082a4:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80082a8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80082aa:	4b0d      	ldr	r3, [pc, #52]	@ (80082e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80082ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b0:	4a0b      	ldr	r2, [pc, #44]	@ (80082e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80082b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082b6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082ba:	4b08      	ldr	r3, [pc, #32]	@ (80082dc <HAL_RTC_SetAlarm_IT+0x210>)
 80082bc:	22ff      	movs	r2, #255	@ 0xff
 80082be:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd90      	pop	{r4, r7, pc}
 80082da:	bf00      	nop
 80082dc:	40002800 	.word	0x40002800
 80082e0:	58000800 	.word	0x58000800

080082e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_RTC_DeactivateAlarm+0x18>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e048      	b.n	800838e <HAL_RTC_DeactivateAlarm+0xaa>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800830c:	4b22      	ldr	r3, [pc, #136]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 800830e:	22ca      	movs	r2, #202	@ 0xca
 8008310:	625a      	str	r2, [r3, #36]	@ 0x24
 8008312:	4b21      	ldr	r3, [pc, #132]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008314:	2253      	movs	r2, #83	@ 0x53
 8008316:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800831e:	d115      	bne.n	800834c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008320:	4b1d      	ldr	r3, [pc, #116]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	4a1c      	ldr	r2, [pc, #112]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008326:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800832a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800832c:	4b1a      	ldr	r3, [pc, #104]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 800832e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008330:	4a19      	ldr	r2, [pc, #100]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008332:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008336:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833c:	f023 0201 	bic.w	r2, r3, #1
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008344:	4b14      	ldr	r3, [pc, #80]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008346:	2201      	movs	r2, #1
 8008348:	65da      	str	r2, [r3, #92]	@ 0x5c
 800834a:	e014      	b.n	8008376 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800834c:	4b12      	ldr	r3, [pc, #72]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	4a11      	ldr	r2, [pc, #68]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008352:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8008356:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008358:	4b0f      	ldr	r3, [pc, #60]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 800835a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800835c:	4a0e      	ldr	r2, [pc, #56]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 800835e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008362:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008368:	f023 0202 	bic.w	r2, r3, #2
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008370:	4b09      	ldr	r3, [pc, #36]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008372:	2202      	movs	r2, #2
 8008374:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008376:	4b08      	ldr	r3, [pc, #32]	@ (8008398 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008378:	22ff      	movs	r2, #255	@ 0xff
 800837a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr
 8008398:	40002800 	.word	0x40002800

0800839c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80083a4:	4b11      	ldr	r3, [pc, #68]	@ (80083ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80083a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80083ba:	4b0c      	ldr	r3, [pc, #48]	@ (80083ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80083bc:	2201      	movs	r2, #1
 80083be:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7fa fcce 	bl	8002d62 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80083d0:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80083d2:	2202      	movs	r2, #2
 80083d4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f94a 	bl	8008670 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80083e4:	bf00      	nop
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40002800 	.word	0x40002800

080083f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80083f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008438 <HAL_RTC_WaitForSynchro+0x48>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	4a0e      	ldr	r2, [pc, #56]	@ (8008438 <HAL_RTC_WaitForSynchro+0x48>)
 80083fe:	f023 0320 	bic.w	r3, r3, #32
 8008402:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008404:	f7fa fa6e 	bl	80028e4 <HAL_GetTick>
 8008408:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800840a:	e009      	b.n	8008420 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800840c:	f7fa fa6a 	bl	80028e4 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800841a:	d901      	bls.n	8008420 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e006      	b.n	800842e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008420:	4b05      	ldr	r3, [pc, #20]	@ (8008438 <HAL_RTC_WaitForSynchro+0x48>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0ef      	beq.n	800840c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	40002800 	.word	0x40002800

0800843c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008448:	4b15      	ldr	r3, [pc, #84]	@ (80084a0 <RTC_EnterInitMode+0x64>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008450:	2b00      	cmp	r3, #0
 8008452:	d120      	bne.n	8008496 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008454:	4b12      	ldr	r3, [pc, #72]	@ (80084a0 <RTC_EnterInitMode+0x64>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	4a11      	ldr	r2, [pc, #68]	@ (80084a0 <RTC_EnterInitMode+0x64>)
 800845a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800845e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008460:	f7fa fa40 	bl	80028e4 <HAL_GetTick>
 8008464:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008466:	e00d      	b.n	8008484 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008468:	f7fa fa3c 	bl	80028e4 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008476:	d905      	bls.n	8008484 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2203      	movs	r2, #3
 8008480:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008484:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <RTC_EnterInitMode+0x64>)
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848c:	2b00      	cmp	r3, #0
 800848e:	d102      	bne.n	8008496 <RTC_EnterInitMode+0x5a>
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	2b03      	cmp	r3, #3
 8008494:	d1e8      	bne.n	8008468 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008496:	7bfb      	ldrb	r3, [r7, #15]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40002800 	.word	0x40002800

080084a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80084b0:	4b1a      	ldr	r3, [pc, #104]	@ (800851c <RTC_ExitInitMode+0x78>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	4a19      	ldr	r2, [pc, #100]	@ (800851c <RTC_ExitInitMode+0x78>)
 80084b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80084bc:	4b17      	ldr	r3, [pc, #92]	@ (800851c <RTC_ExitInitMode+0x78>)
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10c      	bne.n	80084e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff ff91 	bl	80083f0 <HAL_RTC_WaitForSynchro>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01e      	beq.n	8008512 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2203      	movs	r2, #3
 80084d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	73fb      	strb	r3, [r7, #15]
 80084e0:	e017      	b.n	8008512 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084e2:	4b0e      	ldr	r3, [pc, #56]	@ (800851c <RTC_ExitInitMode+0x78>)
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	4a0d      	ldr	r2, [pc, #52]	@ (800851c <RTC_ExitInitMode+0x78>)
 80084e8:	f023 0320 	bic.w	r3, r3, #32
 80084ec:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff ff7e 	bl	80083f0 <HAL_RTC_WaitForSynchro>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2203      	movs	r2, #3
 80084fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008506:	4b05      	ldr	r3, [pc, #20]	@ (800851c <RTC_ExitInitMode+0x78>)
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	4a04      	ldr	r2, [pc, #16]	@ (800851c <RTC_ExitInitMode+0x78>)
 800850c:	f043 0320 	orr.w	r3, r3, #32
 8008510:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008512:	7bfb      	ldrb	r3, [r7, #15]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	40002800 	.word	0x40002800

08008520 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008532:	e005      	b.n	8008540 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	3b0a      	subs	r3, #10
 800853e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	2b09      	cmp	r3, #9
 8008544:	d8f6      	bhi.n	8008534 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	b2da      	uxtb	r2, r3
 800854e:	7afb      	ldrb	r3, [r7, #11]
 8008550:	4313      	orrs	r3, r2
 8008552:	b2db      	uxtb	r3, r3
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
	...

08008560 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008572:	2302      	movs	r3, #2
 8008574:	e01f      	b.n	80085b6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2202      	movs	r2, #2
 8008582:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008586:	4b0e      	ldr	r3, [pc, #56]	@ (80085c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008588:	22ca      	movs	r2, #202	@ 0xca
 800858a:	625a      	str	r2, [r3, #36]	@ 0x24
 800858c:	4b0c      	ldr	r3, [pc, #48]	@ (80085c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800858e:	2253      	movs	r2, #83	@ 0x53
 8008590:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008592:	4b0b      	ldr	r3, [pc, #44]	@ (80085c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	4a0a      	ldr	r2, [pc, #40]	@ (80085c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008598:	f043 0320 	orr.w	r3, r3, #32
 800859c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800859e:	4b08      	ldr	r3, [pc, #32]	@ (80085c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80085a0:	22ff      	movs	r2, #255	@ 0xff
 80085a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr
 80085c0:	40002800 	.word	0x40002800

080085c4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d101      	bne.n	80085da <HAL_RTCEx_SetSSRU_IT+0x16>
 80085d6:	2302      	movs	r3, #2
 80085d8:	e027      	b.n	800862a <HAL_RTCEx_SetSSRU_IT+0x66>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2202      	movs	r2, #2
 80085e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085ea:	4b12      	ldr	r3, [pc, #72]	@ (8008634 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80085ec:	22ca      	movs	r2, #202	@ 0xca
 80085ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80085f0:	4b10      	ldr	r3, [pc, #64]	@ (8008634 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80085f2:	2253      	movs	r2, #83	@ 0x53
 80085f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80085f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008634 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	4a0e      	ldr	r2, [pc, #56]	@ (8008634 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80085fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008600:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008602:	4b0d      	ldr	r3, [pc, #52]	@ (8008638 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008608:	4a0b      	ldr	r2, [pc, #44]	@ (8008638 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800860a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800860e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008612:	4b08      	ldr	r3, [pc, #32]	@ (8008634 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008614:	22ff      	movs	r2, #255	@ 0xff
 8008616:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr
 8008634:	40002800 	.word	0x40002800
 8008638:	58000800 	.word	0x58000800

0800863c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008644:	4b09      	ldr	r3, [pc, #36]	@ (800866c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008650:	4b06      	ldr	r3, [pc, #24]	@ (800866c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008652:	2240      	movs	r2, #64	@ 0x40
 8008654:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fa fb8d 	bl	8002d76 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	40002800 	.word	0x40002800

08008670 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr
	...

08008684 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008690:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008692:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4413      	add	r3, r2
 800869c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	4000b100 	.word	0x4000b100

080086b4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80086be:	4b07      	ldr	r3, [pc, #28]	@ (80086dc <HAL_RTCEx_BKUPRead+0x28>)
 80086c0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4413      	add	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	4000b100 	.word	0x4000b100

080086e0 <LL_PWR_SetRadioBusyTrigger>:
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80086e8:	4b06      	ldr	r3, [pc, #24]	@ (8008704 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086f0:	4904      	ldr	r1, [pc, #16]	@ (8008704 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	608b      	str	r3, [r1, #8]
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	58000400 	.word	0x58000400

08008708 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800870c:	4b05      	ldr	r3, [pc, #20]	@ (8008724 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800870e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008712:	4a04      	ldr	r2, [pc, #16]	@ (8008724 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800871c:	bf00      	nop
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr
 8008724:	58000400 	.word	0x58000400

08008728 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800872c:	4b05      	ldr	r3, [pc, #20]	@ (8008744 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800872e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008732:	4a04      	ldr	r2, [pc, #16]	@ (8008744 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008734:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800873c:	bf00      	nop
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr
 8008744:	58000400 	.word	0x58000400

08008748 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008748:	b480      	push	{r7}
 800874a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800874c:	4b03      	ldr	r3, [pc, #12]	@ (800875c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800874e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008752:	619a      	str	r2, [r3, #24]
}
 8008754:	bf00      	nop
 8008756:	46bd      	mov	sp, r7
 8008758:	bc80      	pop	{r7}
 800875a:	4770      	bx	lr
 800875c:	58000400 	.word	0x58000400

08008760 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008764:	4b06      	ldr	r3, [pc, #24]	@ (8008780 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b02      	cmp	r3, #2
 800876e:	d101      	bne.n	8008774 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008770:	2301      	movs	r3, #1
 8008772:	e000      	b.n	8008776 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	58000400 	.word	0x58000400

08008784 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008788:	4b06      	ldr	r3, [pc, #24]	@ (80087a4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b04      	cmp	r3, #4
 8008792:	d101      	bne.n	8008798 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	bc80      	pop	{r7}
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	58000400 	.word	0x58000400

080087a8 <LL_RCC_RF_DisableReset>:
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80087ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80087c0:	bf00      	nop
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <LL_RCC_IsRFUnderReset>:
{
 80087c8:	b480      	push	{r7}
 80087ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80087cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087dc:	d101      	bne.n	80087e2 <LL_RCC_IsRFUnderReset+0x1a>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <LL_RCC_IsRFUnderReset+0x1c>
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80087f4:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <LL_EXTI_EnableIT_32_63+0x24>)
 80087f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80087fa:	4905      	ldr	r1, [pc, #20]	@ (8008810 <LL_EXTI_EnableIT_32_63+0x24>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4313      	orrs	r3, r2
 8008800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	58000800 	.word	0x58000800

08008814 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d103      	bne.n	800882a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	73fb      	strb	r3, [r7, #15]
    return status;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	e052      	b.n	80088d0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	799b      	ldrb	r3, [r3, #6]
 8008832:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <HAL_SUBGHZ_Init+0x2c>
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d109      	bne.n	8008854 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7f9 fea4 	bl	8002594 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800884c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008850:	f7ff ffcc 	bl	80087ec <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d126      	bne.n	80088a8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8008860:	f7ff ffa2 	bl	80087a8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008864:	4b1c      	ldr	r3, [pc, #112]	@ (80088d8 <HAL_SUBGHZ_Init+0xc4>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	4613      	mov	r3, r2
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	0cdb      	lsrs	r3, r3, #19
 8008872:	2264      	movs	r2, #100	@ 0x64
 8008874:	fb02 f303 	mul.w	r3, r2, r3
 8008878:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d105      	bne.n	800888c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	609a      	str	r2, [r3, #8]
        break;
 800888a:	e007      	b.n	800889c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	3b01      	subs	r3, #1
 8008890:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8008892:	f7ff ff99 	bl	80087c8 <LL_RCC_IsRFUnderReset>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1ee      	bne.n	800887a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800889c:	f7ff ff34 	bl	8008708 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80088a0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80088a4:	f7ff ff1c 	bl	80086e0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80088a8:	f7ff ff4e 	bl	8008748 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fab0 	bl	8008e1c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	719a      	strb	r2, [r3, #6]

  return status;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	20000004 	.word	0x20000004

080088dc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	461a      	mov	r2, r3
 80088e8:	460b      	mov	r3, r1
 80088ea:	817b      	strh	r3, [r7, #10]
 80088ec:	4613      	mov	r3, r2
 80088ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	799b      	ldrb	r3, [r3, #6]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d14a      	bne.n	8008990 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	795b      	ldrb	r3, [r3, #5]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d101      	bne.n	8008906 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008902:	2302      	movs	r3, #2
 8008904:	e045      	b.n	8008992 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2202      	movs	r2, #2
 8008910:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 fb50 	bl	8008fb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008918:	f7ff ff06 	bl	8008728 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800891c:	210d      	movs	r1, #13
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 fa9c 	bl	8008e5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008924:	897b      	ldrh	r3, [r7, #10]
 8008926:	0a1b      	lsrs	r3, r3, #8
 8008928:	b29b      	uxth	r3, r3
 800892a:	b2db      	uxtb	r3, r3
 800892c:	4619      	mov	r1, r3
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 fa94 	bl	8008e5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008934:	897b      	ldrh	r3, [r7, #10]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	4619      	mov	r1, r3
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fa8e 	bl	8008e5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008940:	2300      	movs	r3, #0
 8008942:	82bb      	strh	r3, [r7, #20]
 8008944:	e00a      	b.n	800895c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008946:	8abb      	ldrh	r3, [r7, #20]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	4413      	add	r3, r2
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	4619      	mov	r1, r3
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 fa83 	bl	8008e5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008956:	8abb      	ldrh	r3, [r7, #20]
 8008958:	3301      	adds	r3, #1
 800895a:	82bb      	strh	r3, [r7, #20]
 800895c:	8aba      	ldrh	r2, [r7, #20]
 800895e:	893b      	ldrh	r3, [r7, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	d3f0      	bcc.n	8008946 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008964:	f7ff fed0 	bl	8008708 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fb49 	bl	8009000 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	75fb      	strb	r3, [r7, #23]
 800897a:	e001      	b.n	8008980 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2201      	movs	r2, #1
 8008984:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	715a      	strb	r2, [r3, #5]

    return status;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	e000      	b.n	8008992 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008990:	2302      	movs	r3, #2
  }
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b088      	sub	sp, #32
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	461a      	mov	r2, r3
 80089a6:	460b      	mov	r3, r1
 80089a8:	817b      	strh	r3, [r7, #10]
 80089aa:	4613      	mov	r3, r2
 80089ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	799b      	ldrb	r3, [r3, #6]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d14a      	bne.n	8008a52 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	795b      	ldrb	r3, [r3, #5]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e045      	b.n	8008a54 <HAL_SUBGHZ_ReadRegisters+0xba>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 faf2 	bl	8008fb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80089d4:	f7ff fea8 	bl	8008728 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80089d8:	211d      	movs	r1, #29
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fa3e 	bl	8008e5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80089e0:	897b      	ldrh	r3, [r7, #10]
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	4619      	mov	r1, r3
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 fa36 	bl	8008e5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80089f0:	897b      	ldrh	r3, [r7, #10]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	4619      	mov	r1, r3
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 fa30 	bl	8008e5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80089fc:	2100      	movs	r1, #0
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fa2c 	bl	8008e5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a04:	2300      	movs	r3, #0
 8008a06:	82fb      	strh	r3, [r7, #22]
 8008a08:	e009      	b.n	8008a1e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008a0a:	69b9      	ldr	r1, [r7, #24]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fa7b 	bl	8008f08 <SUBGHZSPI_Receive>
      pData++;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	3301      	adds	r3, #1
 8008a16:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008a18:	8afb      	ldrh	r3, [r7, #22]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	82fb      	strh	r3, [r7, #22]
 8008a1e:	8afa      	ldrh	r2, [r7, #22]
 8008a20:	893b      	ldrh	r3, [r7, #8]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d3f1      	bcc.n	8008a0a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a26:	f7ff fe6f 	bl	8008708 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 fae8 	bl	8009000 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	77fb      	strb	r3, [r7, #31]
 8008a3c:	e001      	b.n	8008a42 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	715a      	strb	r2, [r3, #5]

    return status;
 8008a4e:	7ffb      	ldrb	r3, [r7, #31]
 8008a50:	e000      	b.n	8008a54 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008a52:	2302      	movs	r3, #2
  }
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	607a      	str	r2, [r7, #4]
 8008a66:	461a      	mov	r2, r3
 8008a68:	460b      	mov	r3, r1
 8008a6a:	72fb      	strb	r3, [r7, #11]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	799b      	ldrb	r3, [r3, #6]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d14a      	bne.n	8008b10 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	795b      	ldrb	r3, [r3, #5]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d101      	bne.n	8008a86 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008a82:	2302      	movs	r3, #2
 8008a84:	e045      	b.n	8008b12 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 fa93 	bl	8008fb8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	2b84      	cmp	r3, #132	@ 0x84
 8008a96:	d002      	beq.n	8008a9e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	2b94      	cmp	r3, #148	@ 0x94
 8008a9c:	d103      	bne.n	8008aa6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	711a      	strb	r2, [r3, #4]
 8008aa4:	e002      	b.n	8008aac <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008aac:	f7ff fe3c 	bl	8008728 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f9d1 	bl	8008e5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008aba:	2300      	movs	r3, #0
 8008abc:	82bb      	strh	r3, [r7, #20]
 8008abe:	e00a      	b.n	8008ad6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008ac0:	8abb      	ldrh	r3, [r7, #20]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f9c6 	bl	8008e5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008ad0:	8abb      	ldrh	r3, [r7, #20]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	82bb      	strh	r3, [r7, #20]
 8008ad6:	8aba      	ldrh	r2, [r7, #20]
 8008ad8:	893b      	ldrh	r3, [r7, #8]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d3f0      	bcc.n	8008ac0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008ade:	f7ff fe13 	bl	8008708 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008ae2:	7afb      	ldrb	r3, [r7, #11]
 8008ae4:	2b84      	cmp	r3, #132	@ 0x84
 8008ae6:	d002      	beq.n	8008aee <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fa89 	bl	8009000 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	75fb      	strb	r3, [r7, #23]
 8008afa:	e001      	b.n	8008b00 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2201      	movs	r2, #1
 8008b04:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	715a      	strb	r2, [r3, #5]

    return status;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	e000      	b.n	8008b12 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008b10:	2302      	movs	r3, #2
  }
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b088      	sub	sp, #32
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	461a      	mov	r2, r3
 8008b26:	460b      	mov	r3, r1
 8008b28:	72fb      	strb	r3, [r7, #11]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	799b      	ldrb	r3, [r3, #6]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d13d      	bne.n	8008bb8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	795b      	ldrb	r3, [r3, #5]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e038      	b.n	8008bba <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fa32 	bl	8008fb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b54:	f7ff fde8 	bl	8008728 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008b58:	7afb      	ldrb	r3, [r7, #11]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f97d 	bl	8008e5c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008b62:	2100      	movs	r1, #0
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f979 	bl	8008e5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	82fb      	strh	r3, [r7, #22]
 8008b6e:	e009      	b.n	8008b84 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008b70:	69b9      	ldr	r1, [r7, #24]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 f9c8 	bl	8008f08 <SUBGHZSPI_Receive>
      pData++;
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008b7e:	8afb      	ldrh	r3, [r7, #22]
 8008b80:	3301      	adds	r3, #1
 8008b82:	82fb      	strh	r3, [r7, #22]
 8008b84:	8afa      	ldrh	r2, [r7, #22]
 8008b86:	893b      	ldrh	r3, [r7, #8]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d3f1      	bcc.n	8008b70 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b8c:	f7ff fdbc 	bl	8008708 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 fa35 	bl	8009000 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	77fb      	strb	r3, [r7, #31]
 8008ba2:	e001      	b.n	8008ba8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2201      	movs	r2, #1
 8008bac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	715a      	strb	r2, [r3, #5]

    return status;
 8008bb4:	7ffb      	ldrb	r3, [r7, #31]
 8008bb6:	e000      	b.n	8008bba <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008bb8:	2302      	movs	r3, #2
  }
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3720      	adds	r7, #32
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b086      	sub	sp, #24
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	460b      	mov	r3, r1
 8008bd0:	72fb      	strb	r3, [r7, #11]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	799b      	ldrb	r3, [r3, #6]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d13e      	bne.n	8008c5e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	795b      	ldrb	r3, [r3, #5]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e039      	b.n	8008c60 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 f9e0 	bl	8008fb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008bf8:	f7ff fd96 	bl	8008728 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008bfc:	210e      	movs	r1, #14
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 f92c 	bl	8008e5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	4619      	mov	r1, r3
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 f927 	bl	8008e5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008c0e:	2300      	movs	r3, #0
 8008c10:	82bb      	strh	r3, [r7, #20]
 8008c12:	e00a      	b.n	8008c2a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008c14:	8abb      	ldrh	r3, [r7, #20]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	4413      	add	r3, r2
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f91c 	bl	8008e5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008c24:	8abb      	ldrh	r3, [r7, #20]
 8008c26:	3301      	adds	r3, #1
 8008c28:	82bb      	strh	r3, [r7, #20]
 8008c2a:	8aba      	ldrh	r2, [r7, #20]
 8008c2c:	893b      	ldrh	r3, [r7, #8]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d3f0      	bcc.n	8008c14 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c32:	f7ff fd69 	bl	8008708 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 f9e2 	bl	8009000 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	75fb      	strb	r3, [r7, #23]
 8008c48:	e001      	b.n	8008c4e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	715a      	strb	r2, [r3, #5]

    return status;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	e000      	b.n	8008c60 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008c5e:	2302      	movs	r3, #2
  }
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	607a      	str	r2, [r7, #4]
 8008c72:	461a      	mov	r2, r3
 8008c74:	460b      	mov	r3, r1
 8008c76:	72fb      	strb	r3, [r7, #11]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	799b      	ldrb	r3, [r3, #6]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d141      	bne.n	8008d0e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	795b      	ldrb	r3, [r3, #5]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e03c      	b.n	8008d10 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f98b 	bl	8008fb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008ca2:	f7ff fd41 	bl	8008728 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008ca6:	211e      	movs	r1, #30
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f8d7 	bl	8008e5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f8d2 	bl	8008e5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008cb8:	2100      	movs	r1, #0
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 f8ce 	bl	8008e5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	82fb      	strh	r3, [r7, #22]
 8008cc4:	e009      	b.n	8008cda <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008cc6:	69b9      	ldr	r1, [r7, #24]
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 f91d 	bl	8008f08 <SUBGHZSPI_Receive>
      pData++;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008cd4:	8afb      	ldrh	r3, [r7, #22]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	82fb      	strh	r3, [r7, #22]
 8008cda:	8afa      	ldrh	r2, [r7, #22]
 8008cdc:	893b      	ldrh	r3, [r7, #8]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d3f1      	bcc.n	8008cc6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008ce2:	f7ff fd11 	bl	8008708 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 f98a 	bl	8009000 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	77fb      	strb	r3, [r7, #31]
 8008cf8:	e001      	b.n	8008cfe <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	715a      	strb	r2, [r3, #5]

    return status;
 8008d0a:	7ffb      	ldrb	r3, [r7, #31]
 8008d0c:	e000      	b.n	8008d10 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008d0e:	2302      	movs	r3, #2
  }
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3720      	adds	r7, #32
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008d20:	2300      	movs	r3, #0
 8008d22:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008d24:	f107 020c 	add.w	r2, r7, #12
 8008d28:	2302      	movs	r3, #2
 8008d2a:	2112      	movs	r1, #18
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff fef4 	bl	8008b1a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008d32:	7b3b      	ldrb	r3, [r7, #12]
 8008d34:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008d36:	89fb      	ldrh	r3, [r7, #14]
 8008d38:	021b      	lsls	r3, r3, #8
 8008d3a:	b21a      	sxth	r2, r3
 8008d3c:	7b7b      	ldrb	r3, [r7, #13]
 8008d3e:	b21b      	sxth	r3, r3
 8008d40:	4313      	orrs	r3, r2
 8008d42:	b21b      	sxth	r3, r3
 8008d44:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008d46:	f107 020c 	add.w	r2, r7, #12
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	2102      	movs	r1, #2
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff fe84 	bl	8008a5c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008d54:	89fb      	ldrh	r3, [r7, #14]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f012 ffc6 	bl	801bcf0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d007      	beq.n	8008d7e <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8008d6e:	89fb      	ldrh	r3, [r7, #14]
 8008d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f012 ffc7 	bl	801bd0c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008d7e:	89fb      	ldrh	r3, [r7, #14]
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f013 f817 	bl	801bdbc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008d8e:	89fb      	ldrh	r3, [r7, #14]
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f013 f81d 	bl	801bdd8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008d9e:	89fb      	ldrh	r3, [r7, #14]
 8008da0:	f003 0310 	and.w	r3, r3, #16
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f013 f823 	bl	801bdf4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008dae:	89fb      	ldrh	r3, [r7, #14]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f012 fff1 	bl	801bda0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008dbe:	89fb      	ldrh	r3, [r7, #14]
 8008dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f012 ffad 	bl	801bd28 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008dce:	89fb      	ldrh	r3, [r7, #14]
 8008dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00d      	beq.n	8008df4 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d004      	beq.n	8008dec <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008de2:	2101      	movs	r1, #1
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f012 ffad 	bl	801bd44 <HAL_SUBGHZ_CADStatusCallback>
 8008dea:	e003      	b.n	8008df4 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008dec:	2100      	movs	r1, #0
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f012 ffa8 	bl	801bd44 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008df4:	89fb      	ldrh	r3, [r7, #14]
 8008df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f012 ffbe 	bl	801bd80 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008e04:	89fb      	ldrh	r3, [r7, #14]
 8008e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f012 fffe 	bl	801be10 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <SUBGHZSPI_Init+0x3c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a0b      	ldr	r2, [pc, #44]	@ (8008e58 <SUBGHZSPI_Init+0x3c>)
 8008e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e2e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008e30:	4a09      	ldr	r2, [pc, #36]	@ (8008e58 <SUBGHZSPI_Init+0x3c>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8008e38:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008e3a:	4b07      	ldr	r3, [pc, #28]	@ (8008e58 <SUBGHZSPI_Init+0x3c>)
 8008e3c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008e40:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008e42:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <SUBGHZSPI_Init+0x3c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a04      	ldr	r2, [pc, #16]	@ (8008e58 <SUBGHZSPI_Init+0x3c>)
 8008e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4c:	6013      	str	r3, [r2, #0]
}
 8008e4e:	bf00      	nop
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bc80      	pop	{r7}
 8008e56:	4770      	bx	lr
 8008e58:	58010000 	.word	0x58010000

08008e5c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e6c:	4b23      	ldr	r3, [pc, #140]	@ (8008efc <SUBGHZSPI_Transmit+0xa0>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4613      	mov	r3, r2
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	0cdb      	lsrs	r3, r3, #19
 8008e7a:	2264      	movs	r2, #100	@ 0x64
 8008e7c:	fb02 f303 	mul.w	r3, r2, r3
 8008e80:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d105      	bne.n	8008e94 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	609a      	str	r2, [r3, #8]
      break;
 8008e92:	e008      	b.n	8008ea6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008e9a:	4b19      	ldr	r3, [pc, #100]	@ (8008f00 <SUBGHZSPI_Transmit+0xa4>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d1ed      	bne.n	8008e82 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008ea6:	4b17      	ldr	r3, [pc, #92]	@ (8008f04 <SUBGHZSPI_Transmit+0xa8>)
 8008ea8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	78fa      	ldrb	r2, [r7, #3]
 8008eae:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008eb0:	4b12      	ldr	r3, [pc, #72]	@ (8008efc <SUBGHZSPI_Transmit+0xa0>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	0cdb      	lsrs	r3, r3, #19
 8008ebe:	2264      	movs	r2, #100	@ 0x64
 8008ec0:	fb02 f303 	mul.w	r3, r2, r3
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	609a      	str	r2, [r3, #8]
      break;
 8008ed6:	e008      	b.n	8008eea <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008ede:	4b08      	ldr	r3, [pc, #32]	@ (8008f00 <SUBGHZSPI_Transmit+0xa4>)
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d1ed      	bne.n	8008ec6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008eea:	4b05      	ldr	r3, [pc, #20]	@ (8008f00 <SUBGHZSPI_Transmit+0xa4>)
 8008eec:	68db      	ldr	r3, [r3, #12]

  return status;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bc80      	pop	{r7}
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20000004 	.word	0x20000004
 8008f00:	58010000 	.word	0x58010000
 8008f04:	5801000c 	.word	0x5801000c

08008f08 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f16:	4b25      	ldr	r3, [pc, #148]	@ (8008fac <SUBGHZSPI_Receive+0xa4>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	0cdb      	lsrs	r3, r3, #19
 8008f24:	2264      	movs	r2, #100	@ 0x64
 8008f26:	fb02 f303 	mul.w	r3, r2, r3
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d105      	bne.n	8008f3e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	609a      	str	r2, [r3, #8]
      break;
 8008f3c:	e008      	b.n	8008f50 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008f44:	4b1a      	ldr	r3, [pc, #104]	@ (8008fb0 <SUBGHZSPI_Receive+0xa8>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d1ed      	bne.n	8008f2c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008f50:	4b18      	ldr	r3, [pc, #96]	@ (8008fb4 <SUBGHZSPI_Receive+0xac>)
 8008f52:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	22ff      	movs	r2, #255	@ 0xff
 8008f58:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f5a:	4b14      	ldr	r3, [pc, #80]	@ (8008fac <SUBGHZSPI_Receive+0xa4>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	0cdb      	lsrs	r3, r3, #19
 8008f68:	2264      	movs	r2, #100	@ 0x64
 8008f6a:	fb02 f303 	mul.w	r3, r2, r3
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d105      	bne.n	8008f82 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	609a      	str	r2, [r3, #8]
      break;
 8008f80:	e008      	b.n	8008f94 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008f88:	4b09      	ldr	r3, [pc, #36]	@ (8008fb0 <SUBGHZSPI_Receive+0xa8>)
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d1ed      	bne.n	8008f70 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008f94:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <SUBGHZSPI_Receive+0xa8>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	701a      	strb	r2, [r3, #0]

  return status;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc80      	pop	{r7}
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20000004 	.word	0x20000004
 8008fb0:	58010000 	.word	0x58010000
 8008fb4:	5801000c 	.word	0x5801000c

08008fb8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	791b      	ldrb	r3, [r3, #4]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d111      	bne.n	8008fec <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008ffc <SUBGHZ_CheckDeviceReady+0x44>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	0c1b      	lsrs	r3, r3, #16
 8008fd6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008fd8:	f7ff fba6 	bl	8008728 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1f9      	bne.n	8008fdc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008fe8:	f7ff fb8e 	bl	8008708 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f807 	bl	8009000 <SUBGHZ_WaitOnBusy>
 8008ff2:	4603      	mov	r3, r0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20000004 	.word	0x20000004

08009000 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800900c:	4b12      	ldr	r3, [pc, #72]	@ (8009058 <SUBGHZ_WaitOnBusy+0x58>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	4413      	add	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	0d1b      	lsrs	r3, r3, #20
 800901a:	2264      	movs	r2, #100	@ 0x64
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009022:	f7ff fbaf 	bl	8008784 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009026:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d105      	bne.n	800903a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2202      	movs	r2, #2
 8009036:	609a      	str	r2, [r3, #8]
      break;
 8009038:	e009      	b.n	800904e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	3b01      	subs	r3, #1
 800903e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009040:	f7ff fb8e 	bl	8008760 <LL_PWR_IsActiveFlag_RFBUSYS>
 8009044:	4602      	mov	r2, r0
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	4013      	ands	r3, r2
 800904a:	2b01      	cmp	r3, #1
 800904c:	d0e9      	beq.n	8009022 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800904e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20000004 	.word	0x20000004

0800905c <LL_RCC_GetUSARTClockSource>:
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009068:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	401a      	ands	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	4313      	orrs	r3, r2
}
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	bc80      	pop	{r7}
 800907e:	4770      	bx	lr

08009080 <LL_RCC_GetLPUARTClockSource>:
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800908c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4013      	ands	r3, r2
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	bc80      	pop	{r7}
 800909c:	4770      	bx	lr

0800909e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e042      	b.n	8009136 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7f9 ffbc 	bl	8003040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2224      	movs	r2, #36	@ 0x24
 80090cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0201 	bic.w	r2, r2, #1
 80090de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 feab 	bl	8009e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fc34 	bl	800995c <UART_SetConfig>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e01b      	b.n	8009136 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800910c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800911c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f042 0201 	orr.w	r2, r2, #1
 800912c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 ff29 	bl	8009f86 <UART_CheckIdleState>
 8009134:	4603      	mov	r3, r0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	@ 0x28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009154:	2b20      	cmp	r3, #32
 8009156:	d137      	bne.n	80091c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <HAL_UART_Receive_IT+0x24>
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e030      	b.n	80091ca <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a18      	ldr	r2, [pc, #96]	@ (80091d4 <HAL_UART_Receive_IT+0x94>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d01f      	beq.n	80091b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d018      	beq.n	80091b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	613b      	str	r3, [r7, #16]
   return(result);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800919a:	627b      	str	r3, [r7, #36]	@ 0x24
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	623b      	str	r3, [r7, #32]
 80091a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	69f9      	ldr	r1, [r7, #28]
 80091aa:	6a3a      	ldr	r2, [r7, #32]
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e6      	bne.n	8009186 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	461a      	mov	r2, r3
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 fffe 	bl	800a1c0 <UART_Start_Receive_IT>
 80091c4:	4603      	mov	r3, r0
 80091c6:	e000      	b.n	80091ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091c8:	2302      	movs	r3, #2
  }
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3728      	adds	r7, #40	@ 0x28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	40008000 	.word	0x40008000

080091d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08a      	sub	sp, #40	@ 0x28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d167      	bne.n	80092c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <HAL_UART_Transmit_DMA+0x24>
 80091f6:	88fb      	ldrh	r3, [r7, #6]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e060      	b.n	80092c2 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	88fa      	ldrh	r2, [r7, #6]
 8009212:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2221      	movs	r2, #33	@ 0x21
 8009222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d028      	beq.n	8009280 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009232:	4a26      	ldr	r2, [pc, #152]	@ (80092cc <HAL_UART_Transmit_DMA+0xf4>)
 8009234:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800923a:	4a25      	ldr	r2, [pc, #148]	@ (80092d0 <HAL_UART_Transmit_DMA+0xf8>)
 800923c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009242:	4a24      	ldr	r2, [pc, #144]	@ (80092d4 <HAL_UART_Transmit_DMA+0xfc>)
 8009244:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800924a:	2200      	movs	r2, #0
 800924c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009256:	4619      	mov	r1, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3328      	adds	r3, #40	@ 0x28
 800925e:	461a      	mov	r2, r3
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	f7fb fcb9 	bl	8004bd8 <HAL_DMA_Start_IT>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d009      	beq.n	8009280 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2210      	movs	r2, #16
 8009270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2220      	movs	r2, #32
 8009278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e020      	b.n	80092c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2240      	movs	r2, #64	@ 0x40
 8009286:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3308      	adds	r3, #8
 800928e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	613b      	str	r3, [r7, #16]
   return(result);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929e:	627b      	str	r3, [r7, #36]	@ 0x24
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3308      	adds	r3, #8
 80092a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092a8:	623a      	str	r2, [r7, #32]
 80092aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	69f9      	ldr	r1, [r7, #28]
 80092ae:	6a3a      	ldr	r2, [r7, #32]
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e5      	bne.n	8009288 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	e000      	b.n	80092c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80092c0:	2302      	movs	r3, #2
  }
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3728      	adds	r7, #40	@ 0x28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	0800a54b 	.word	0x0800a54b
 80092d0:	0800a5e5 	.word	0x0800a5e5
 80092d4:	0800a601 	.word	0x0800a601

080092d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b0ba      	sub	sp, #232	@ 0xe8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009302:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009306:	4013      	ands	r3, r2
 8009308:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800930c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009310:	2b00      	cmp	r3, #0
 8009312:	d11b      	bne.n	800934c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b00      	cmp	r3, #0
 800931e:	d015      	beq.n	800934c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d105      	bne.n	8009338 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800932c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d009      	beq.n	800934c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 82e3 	beq.w	8009908 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
      }
      return;
 800934a:	e2dd      	b.n	8009908 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800934c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 8123 	beq.w	800959c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009356:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800935a:	4b8d      	ldr	r3, [pc, #564]	@ (8009590 <HAL_UART_IRQHandler+0x2b8>)
 800935c:	4013      	ands	r3, r2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009366:	4b8b      	ldr	r3, [pc, #556]	@ (8009594 <HAL_UART_IRQHandler+0x2bc>)
 8009368:	4013      	ands	r3, r2
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 8116 	beq.w	800959c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d011      	beq.n	80093a0 <HAL_UART_IRQHandler+0xc8>
 800937c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2201      	movs	r2, #1
 800938e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009396:	f043 0201 	orr.w	r2, r3, #1
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d011      	beq.n	80093d0 <HAL_UART_IRQHandler+0xf8>
 80093ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00b      	beq.n	80093d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2202      	movs	r2, #2
 80093be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c6:	f043 0204 	orr.w	r2, r3, #4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d011      	beq.n	8009400 <HAL_UART_IRQHandler+0x128>
 80093dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2204      	movs	r2, #4
 80093ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f6:	f043 0202 	orr.w	r2, r3, #2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009404:	f003 0308 	and.w	r3, r3, #8
 8009408:	2b00      	cmp	r3, #0
 800940a:	d017      	beq.n	800943c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d105      	bne.n	8009424 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800941c:	4b5c      	ldr	r3, [pc, #368]	@ (8009590 <HAL_UART_IRQHandler+0x2b8>)
 800941e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2208      	movs	r2, #8
 800942a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009432:	f043 0208 	orr.w	r2, r3, #8
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800943c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009444:	2b00      	cmp	r3, #0
 8009446:	d012      	beq.n	800946e <HAL_UART_IRQHandler+0x196>
 8009448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800944c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00c      	beq.n	800946e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800945c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009464:	f043 0220 	orr.w	r2, r3, #32
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 8249 	beq.w	800990c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800947a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b00      	cmp	r3, #0
 8009484:	d013      	beq.n	80094ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d105      	bne.n	800949e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d007      	beq.n	80094ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c2:	2b40      	cmp	r3, #64	@ 0x40
 80094c4:	d005      	beq.n	80094d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d054      	beq.n	800957c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 ffd4 	bl	800a480 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e2:	2b40      	cmp	r3, #64	@ 0x40
 80094e4:	d146      	bne.n	8009574 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3308      	adds	r3, #8
 80094ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3308      	adds	r3, #8
 800950e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009512:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800951e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800952a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1d9      	bne.n	80094e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009538:	2b00      	cmp	r3, #0
 800953a:	d017      	beq.n	800956c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009542:	4a15      	ldr	r2, [pc, #84]	@ (8009598 <HAL_UART_IRQHandler+0x2c0>)
 8009544:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800954c:	4618      	mov	r0, r3
 800954e:	f7fb fc1f 	bl	8004d90 <HAL_DMA_Abort_IT>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d019      	beq.n	800958c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800955e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009566:	4610      	mov	r0, r2
 8009568:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956a:	e00f      	b.n	800958c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f9e0 	bl	8009932 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009572:	e00b      	b.n	800958c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f9dc 	bl	8009932 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800957a:	e007      	b.n	800958c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f9d8 	bl	8009932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800958a:	e1bf      	b.n	800990c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958c:	bf00      	nop
    return;
 800958e:	e1bd      	b.n	800990c <HAL_UART_IRQHandler+0x634>
 8009590:	10000001 	.word	0x10000001
 8009594:	04000120 	.word	0x04000120
 8009598:	0800a681 	.word	0x0800a681

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	f040 8153 	bne.w	800984c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 814c 	beq.w	800984c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095b8:	f003 0310 	and.w	r3, r3, #16
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 8145 	beq.w	800984c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2210      	movs	r2, #16
 80095c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d4:	2b40      	cmp	r3, #64	@ 0x40
 80095d6:	f040 80bb 	bne.w	8009750 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 818f 	beq.w	8009910 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095fc:	429a      	cmp	r2, r3
 80095fe:	f080 8187 	bcs.w	8009910 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009608:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0320 	and.w	r3, r3, #32
 800961a:	2b00      	cmp	r3, #0
 800961c:	f040 8087 	bne.w	800972e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800963c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800964a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800964e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009656:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1da      	bne.n	8009620 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800967a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800967c:	f023 0301 	bic.w	r3, r3, #1
 8009680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800968e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009692:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e1      	bne.n	800966a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3308      	adds	r3, #8
 80096ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3308      	adds	r3, #8
 80096c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80096ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80096d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e3      	bne.n	80096a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096fc:	f023 0310 	bic.w	r3, r3, #16
 8009700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	461a      	mov	r2, r3
 800970a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800970e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009710:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009714:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800971c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e4      	bne.n	80096ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009728:	4618      	mov	r0, r3
 800972a:	f7fb fad3 	bl	8004cd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2202      	movs	r2, #2
 8009732:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009740:	b29b      	uxth	r3, r3
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	b29b      	uxth	r3, r3
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f8fb 	bl	8009944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800974e:	e0df      	b.n	8009910 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800975c:	b29b      	uxth	r3, r3
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800976a:	b29b      	uxth	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 80d1 	beq.w	8009914 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 80cc 	beq.w	8009914 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800978a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800978c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009790:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800979e:	647b      	str	r3, [r7, #68]	@ 0x44
 80097a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e4      	bne.n	800977c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3308      	adds	r3, #8
 80097b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	623b      	str	r3, [r7, #32]
   return(result);
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3308      	adds	r3, #8
 80097d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80097da:	633a      	str	r2, [r7, #48]	@ 0x30
 80097dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e1      	bne.n	80097b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f023 0310 	bic.w	r3, r3, #16
 8009816:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009824:	61fb      	str	r3, [r7, #28]
 8009826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	69b9      	ldr	r1, [r7, #24]
 800982a:	69fa      	ldr	r2, [r7, #28]
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	617b      	str	r3, [r7, #20]
   return(result);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e4      	bne.n	8009802 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800983e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f87d 	bl	8009944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800984a:	e063      	b.n	8009914 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800984c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00e      	beq.n	8009876 <HAL_UART_IRQHandler+0x59e>
 8009858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800985c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d008      	beq.n	8009876 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800986c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fc64 	bl	800b13c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009874:	e051      	b.n	800991a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800987a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800987e:	2b00      	cmp	r3, #0
 8009880:	d014      	beq.n	80098ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800988a:	2b00      	cmp	r3, #0
 800988c:	d105      	bne.n	800989a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800988e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d03a      	beq.n	8009918 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
    }
    return;
 80098aa:	e035      	b.n	8009918 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d009      	beq.n	80098cc <HAL_UART_IRQHandler+0x5f4>
 80098b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fef1 	bl	800a6ac <UART_EndTransmit_IT>
    return;
 80098ca:	e026      	b.n	800991a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d009      	beq.n	80098ec <HAL_UART_IRQHandler+0x614>
 80098d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 fc3b 	bl	800b160 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ea:	e016      	b.n	800991a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d010      	beq.n	800991a <HAL_UART_IRQHandler+0x642>
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	da0c      	bge.n	800991a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 fc24 	bl	800b14e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009906:	e008      	b.n	800991a <HAL_UART_IRQHandler+0x642>
      return;
 8009908:	bf00      	nop
 800990a:	e006      	b.n	800991a <HAL_UART_IRQHandler+0x642>
    return;
 800990c:	bf00      	nop
 800990e:	e004      	b.n	800991a <HAL_UART_IRQHandler+0x642>
      return;
 8009910:	bf00      	nop
 8009912:	e002      	b.n	800991a <HAL_UART_IRQHandler+0x642>
      return;
 8009914:	bf00      	nop
 8009916:	e000      	b.n	800991a <HAL_UART_IRQHandler+0x642>
    return;
 8009918:	bf00      	nop
  }
}
 800991a:	37e8      	adds	r7, #232	@ 0xe8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr

08009932 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	bc80      	pop	{r7}
 8009958:	4770      	bx	lr
	...

0800995c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800995c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009960:	b08c      	sub	sp, #48	@ 0x30
 8009962:	af00      	add	r7, sp, #0
 8009964:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	431a      	orrs	r2, r3
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	431a      	orrs	r2, r3
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	69db      	ldr	r3, [r3, #28]
 8009980:	4313      	orrs	r3, r2
 8009982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	4b94      	ldr	r3, [pc, #592]	@ (8009bdc <UART_SetConfig+0x280>)
 800998c:	4013      	ands	r3, r2
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	6812      	ldr	r2, [r2, #0]
 8009992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009994:	430b      	orrs	r3, r1
 8009996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a89      	ldr	r2, [pc, #548]	@ (8009be0 <UART_SetConfig+0x284>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d004      	beq.n	80099c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099c4:	4313      	orrs	r3, r2
 80099c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80099d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099dc:	430b      	orrs	r3, r1
 80099de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e6:	f023 010f 	bic.w	r1, r3, #15
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a7a      	ldr	r2, [pc, #488]	@ (8009be4 <UART_SetConfig+0x288>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d127      	bne.n	8009a50 <UART_SetConfig+0xf4>
 8009a00:	2003      	movs	r0, #3
 8009a02:	f7ff fb2b 	bl	800905c <LL_RCC_GetUSARTClockSource>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d81b      	bhi.n	8009a48 <UART_SetConfig+0xec>
 8009a10:	a201      	add	r2, pc, #4	@ (adr r2, 8009a18 <UART_SetConfig+0xbc>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009a29 	.word	0x08009a29
 8009a1c:	08009a39 	.word	0x08009a39
 8009a20:	08009a31 	.word	0x08009a31
 8009a24:	08009a41 	.word	0x08009a41
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2e:	e080      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009a30:	2302      	movs	r3, #2
 8009a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a36:	e07c      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3e:	e078      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009a40:	2308      	movs	r3, #8
 8009a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a46:	e074      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4e:	e070      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a64      	ldr	r2, [pc, #400]	@ (8009be8 <UART_SetConfig+0x28c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d138      	bne.n	8009acc <UART_SetConfig+0x170>
 8009a5a:	200c      	movs	r0, #12
 8009a5c:	f7ff fafe 	bl	800905c <LL_RCC_GetUSARTClockSource>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8009a66:	2b0c      	cmp	r3, #12
 8009a68:	d82c      	bhi.n	8009ac4 <UART_SetConfig+0x168>
 8009a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a70 <UART_SetConfig+0x114>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009aa5 	.word	0x08009aa5
 8009a74:	08009ac5 	.word	0x08009ac5
 8009a78:	08009ac5 	.word	0x08009ac5
 8009a7c:	08009ac5 	.word	0x08009ac5
 8009a80:	08009ab5 	.word	0x08009ab5
 8009a84:	08009ac5 	.word	0x08009ac5
 8009a88:	08009ac5 	.word	0x08009ac5
 8009a8c:	08009ac5 	.word	0x08009ac5
 8009a90:	08009aad 	.word	0x08009aad
 8009a94:	08009ac5 	.word	0x08009ac5
 8009a98:	08009ac5 	.word	0x08009ac5
 8009a9c:	08009ac5 	.word	0x08009ac5
 8009aa0:	08009abd 	.word	0x08009abd
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aaa:	e042      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009aac:	2302      	movs	r3, #2
 8009aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ab2:	e03e      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009ab4:	2304      	movs	r3, #4
 8009ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aba:	e03a      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009abc:	2308      	movs	r3, #8
 8009abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac2:	e036      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aca:	e032      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a43      	ldr	r2, [pc, #268]	@ (8009be0 <UART_SetConfig+0x284>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d12a      	bne.n	8009b2c <UART_SetConfig+0x1d0>
 8009ad6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009ada:	f7ff fad1 	bl	8009080 <LL_RCC_GetLPUARTClockSource>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ae4:	d01a      	beq.n	8009b1c <UART_SetConfig+0x1c0>
 8009ae6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aea:	d81b      	bhi.n	8009b24 <UART_SetConfig+0x1c8>
 8009aec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009af0:	d00c      	beq.n	8009b0c <UART_SetConfig+0x1b0>
 8009af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009af6:	d815      	bhi.n	8009b24 <UART_SetConfig+0x1c8>
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <UART_SetConfig+0x1a8>
 8009afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b00:	d008      	beq.n	8009b14 <UART_SetConfig+0x1b8>
 8009b02:	e00f      	b.n	8009b24 <UART_SetConfig+0x1c8>
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0a:	e012      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b12:	e00e      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009b14:	2304      	movs	r3, #4
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b1a:	e00a      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b22:	e006      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009b24:	2310      	movs	r3, #16
 8009b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b2a:	e002      	b.n	8009b32 <UART_SetConfig+0x1d6>
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a2a      	ldr	r2, [pc, #168]	@ (8009be0 <UART_SetConfig+0x284>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	f040 80a4 	bne.w	8009c86 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b42:	2b08      	cmp	r3, #8
 8009b44:	d823      	bhi.n	8009b8e <UART_SetConfig+0x232>
 8009b46:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <UART_SetConfig+0x1f0>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b71 	.word	0x08009b71
 8009b50:	08009b8f 	.word	0x08009b8f
 8009b54:	08009b79 	.word	0x08009b79
 8009b58:	08009b8f 	.word	0x08009b8f
 8009b5c:	08009b7f 	.word	0x08009b7f
 8009b60:	08009b8f 	.word	0x08009b8f
 8009b64:	08009b8f 	.word	0x08009b8f
 8009b68:	08009b8f 	.word	0x08009b8f
 8009b6c:	08009b87 	.word	0x08009b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b70:	f7fd ff46 	bl	8007a00 <HAL_RCC_GetPCLK1Freq>
 8009b74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b76:	e010      	b.n	8009b9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b78:	4b1c      	ldr	r3, [pc, #112]	@ (8009bec <UART_SetConfig+0x290>)
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b7c:	e00d      	b.n	8009b9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b7e:	f7fd fe8b 	bl	8007898 <HAL_RCC_GetSysClockFreq>
 8009b82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b84:	e009      	b.n	8009b9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b8c:	e005      	b.n	8009b9a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 8137 	beq.w	8009e10 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba6:	4a12      	ldr	r2, [pc, #72]	@ (8009bf0 <UART_SetConfig+0x294>)
 8009ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bac:	461a      	mov	r2, r3
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	4413      	add	r3, r2
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d305      	bcc.n	8009bd2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d910      	bls.n	8009bf4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bd8:	e11a      	b.n	8009e10 <UART_SetConfig+0x4b4>
 8009bda:	bf00      	nop
 8009bdc:	cfff69f3 	.word	0xcfff69f3
 8009be0:	40008000 	.word	0x40008000
 8009be4:	40013800 	.word	0x40013800
 8009be8:	40004400 	.word	0x40004400
 8009bec:	00f42400 	.word	0x00f42400
 8009bf0:	0801e220 	.word	0x0801e220
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	60bb      	str	r3, [r7, #8]
 8009bfa:	60fa      	str	r2, [r7, #12]
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c00:	4a8e      	ldr	r2, [pc, #568]	@ (8009e3c <UART_SetConfig+0x4e0>)
 8009c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2200      	movs	r2, #0
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	607a      	str	r2, [r7, #4]
 8009c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c16:	f7f7 fa9f 	bl	8001158 <__aeabi_uldivmod>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4610      	mov	r0, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	f04f 0300 	mov.w	r3, #0
 8009c2a:	020b      	lsls	r3, r1, #8
 8009c2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c30:	0202      	lsls	r2, r0, #8
 8009c32:	6979      	ldr	r1, [r7, #20]
 8009c34:	6849      	ldr	r1, [r1, #4]
 8009c36:	0849      	lsrs	r1, r1, #1
 8009c38:	2000      	movs	r0, #0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	eb12 0804 	adds.w	r8, r2, r4
 8009c42:	eb43 0905 	adc.w	r9, r3, r5
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	469a      	mov	sl, r3
 8009c4e:	4693      	mov	fp, r2
 8009c50:	4652      	mov	r2, sl
 8009c52:	465b      	mov	r3, fp
 8009c54:	4640      	mov	r0, r8
 8009c56:	4649      	mov	r1, r9
 8009c58:	f7f7 fa7e 	bl	8001158 <__aeabi_uldivmod>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4613      	mov	r3, r2
 8009c62:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c6a:	d308      	bcc.n	8009c7e <UART_SetConfig+0x322>
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c72:	d204      	bcs.n	8009c7e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6a3a      	ldr	r2, [r7, #32]
 8009c7a:	60da      	str	r2, [r3, #12]
 8009c7c:	e0c8      	b.n	8009e10 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c84:	e0c4      	b.n	8009e10 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c8e:	d167      	bne.n	8009d60 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009c90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c94:	2b08      	cmp	r3, #8
 8009c96:	d828      	bhi.n	8009cea <UART_SetConfig+0x38e>
 8009c98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <UART_SetConfig+0x344>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009cc5 	.word	0x08009cc5
 8009ca4:	08009ccd 	.word	0x08009ccd
 8009ca8:	08009cd5 	.word	0x08009cd5
 8009cac:	08009ceb 	.word	0x08009ceb
 8009cb0:	08009cdb 	.word	0x08009cdb
 8009cb4:	08009ceb 	.word	0x08009ceb
 8009cb8:	08009ceb 	.word	0x08009ceb
 8009cbc:	08009ceb 	.word	0x08009ceb
 8009cc0:	08009ce3 	.word	0x08009ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cc4:	f7fd fe9c 	bl	8007a00 <HAL_RCC_GetPCLK1Freq>
 8009cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cca:	e014      	b.n	8009cf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ccc:	f7fd feaa 	bl	8007a24 <HAL_RCC_GetPCLK2Freq>
 8009cd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cd2:	e010      	b.n	8009cf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cd4:	4b5a      	ldr	r3, [pc, #360]	@ (8009e40 <UART_SetConfig+0x4e4>)
 8009cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cd8:	e00d      	b.n	8009cf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cda:	f7fd fddd 	bl	8007898 <HAL_RCC_GetSysClockFreq>
 8009cde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ce0:	e009      	b.n	8009cf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ce8:	e005      	b.n	8009cf6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 8089 	beq.w	8009e10 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d02:	4a4e      	ldr	r2, [pc, #312]	@ (8009e3c <UART_SetConfig+0x4e0>)
 8009d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d10:	005a      	lsls	r2, r3, #1
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	085b      	lsrs	r3, r3, #1
 8009d18:	441a      	add	r2, r3
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	2b0f      	cmp	r3, #15
 8009d28:	d916      	bls.n	8009d58 <UART_SetConfig+0x3fc>
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d30:	d212      	bcs.n	8009d58 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	f023 030f 	bic.w	r3, r3, #15
 8009d3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	085b      	lsrs	r3, r3, #1
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	8bfb      	ldrh	r3, [r7, #30]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	8bfa      	ldrh	r2, [r7, #30]
 8009d54:	60da      	str	r2, [r3, #12]
 8009d56:	e05b      	b.n	8009e10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d5e:	e057      	b.n	8009e10 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d828      	bhi.n	8009dba <UART_SetConfig+0x45e>
 8009d68:	a201      	add	r2, pc, #4	@ (adr r2, 8009d70 <UART_SetConfig+0x414>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d95 	.word	0x08009d95
 8009d74:	08009d9d 	.word	0x08009d9d
 8009d78:	08009da5 	.word	0x08009da5
 8009d7c:	08009dbb 	.word	0x08009dbb
 8009d80:	08009dab 	.word	0x08009dab
 8009d84:	08009dbb 	.word	0x08009dbb
 8009d88:	08009dbb 	.word	0x08009dbb
 8009d8c:	08009dbb 	.word	0x08009dbb
 8009d90:	08009db3 	.word	0x08009db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d94:	f7fd fe34 	bl	8007a00 <HAL_RCC_GetPCLK1Freq>
 8009d98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d9a:	e014      	b.n	8009dc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d9c:	f7fd fe42 	bl	8007a24 <HAL_RCC_GetPCLK2Freq>
 8009da0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009da2:	e010      	b.n	8009dc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009da4:	4b26      	ldr	r3, [pc, #152]	@ (8009e40 <UART_SetConfig+0x4e4>)
 8009da6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009da8:	e00d      	b.n	8009dc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009daa:	f7fd fd75 	bl	8007898 <HAL_RCC_GetSysClockFreq>
 8009dae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009db0:	e009      	b.n	8009dc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009db8:	e005      	b.n	8009dc6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009dc4:	bf00      	nop
    }

    if (pclk != 0U)
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d021      	beq.n	8009e10 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8009e3c <UART_SetConfig+0x4e0>)
 8009dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dda:	fbb3 f2f2 	udiv	r2, r3, r2
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	085b      	lsrs	r3, r3, #1
 8009de4:	441a      	add	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	2b0f      	cmp	r3, #15
 8009df4:	d909      	bls.n	8009e0a <UART_SetConfig+0x4ae>
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dfc:	d205      	bcs.n	8009e0a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60da      	str	r2, [r3, #12]
 8009e08:	e002      	b.n	8009e10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2200      	movs	r2, #0
 8009e24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3730      	adds	r7, #48	@ 0x30
 8009e34:	46bd      	mov	sp, r7
 8009e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e3a:	bf00      	nop
 8009e3c:	0801e220 	.word	0x0801e220
 8009e40:	00f42400 	.word	0x00f42400

08009e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00a      	beq.n	8009e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00a      	beq.n	8009eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed8:	f003 0310 	and.w	r3, r3, #16
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01a      	beq.n	8009f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f42:	d10a      	bne.n	8009f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]
  }
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr

08009f86 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b086      	sub	sp, #24
 8009f8a:	af02      	add	r7, sp, #8
 8009f8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f96:	f7f8 fca5 	bl	80028e4 <HAL_GetTick>
 8009f9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0308 	and.w	r3, r3, #8
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d10e      	bne.n	8009fc8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009faa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f832 	bl	800a022 <UART_WaitOnFlagUntilTimeout>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e028      	b.n	800a01a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d10e      	bne.n	8009ff4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f81c 	bl	800a022 <UART_WaitOnFlagUntilTimeout>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e012      	b.n	800a01a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2220      	movs	r2, #32
 800a000:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b09c      	sub	sp, #112	@ 0x70
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	603b      	str	r3, [r7, #0]
 800a02e:	4613      	mov	r3, r2
 800a030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a032:	e0af      	b.n	800a194 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03a:	f000 80ab 	beq.w	800a194 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a03e:	f7f8 fc51 	bl	80028e4 <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d302      	bcc.n	800a054 <UART_WaitOnFlagUntilTimeout+0x32>
 800a04e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a050:	2b00      	cmp	r3, #0
 800a052:	d140      	bne.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a05c:	e853 3f00 	ldrex	r3, [r3]
 800a060:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a064:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a068:	667b      	str	r3, [r7, #100]	@ 0x64
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a072:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a074:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a076:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a078:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a07a:	e841 2300 	strex	r3, r2, [r1]
 800a07e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1e6      	bne.n	800a054 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3308      	adds	r3, #8
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a098:	f023 0301 	bic.w	r3, r3, #1
 800a09c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a0a6:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a0a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a0b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e5      	bne.n	800a086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e06f      	b.n	800a1b6 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d057      	beq.n	800a194 <UART_WaitOnFlagUntilTimeout+0x172>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b80      	cmp	r3, #128	@ 0x80
 800a0e8:	d054      	beq.n	800a194 <UART_WaitOnFlagUntilTimeout+0x172>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b40      	cmp	r3, #64	@ 0x40
 800a0ee:	d051      	beq.n	800a194 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0fe:	d149      	bne.n	800a194 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a108:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a11e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	461a      	mov	r2, r3
 800a126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
 800a12a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a12e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e6      	bne.n	800a10a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3308      	adds	r3, #8
 800a142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	e853 3f00 	ldrex	r3, [r3]
 800a14a:	613b      	str	r3, [r7, #16]
   return(result);
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f023 0301 	bic.w	r3, r3, #1
 800a152:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3308      	adds	r3, #8
 800a15a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a15c:	623a      	str	r2, [r7, #32]
 800a15e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a160:	69f9      	ldr	r1, [r7, #28]
 800a162:	6a3a      	ldr	r2, [r7, #32]
 800a164:	e841 2300 	strex	r3, r2, [r1]
 800a168:	61bb      	str	r3, [r7, #24]
   return(result);
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e5      	bne.n	800a13c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2220      	movs	r2, #32
 800a174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2220      	movs	r2, #32
 800a184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e010      	b.n	800a1b6 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	69da      	ldr	r2, [r3, #28]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	4013      	ands	r3, r2
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	bf0c      	ite	eq
 800a1a4:	2301      	moveq	r3, #1
 800a1a6:	2300      	movne	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	f43f af40 	beq.w	800a034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3770      	adds	r7, #112	@ 0x70
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b0a3      	sub	sp, #140	@ 0x8c
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	88fa      	ldrh	r2, [r7, #6]
 800a1d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	88fa      	ldrh	r2, [r7, #6]
 800a1e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f2:	d10e      	bne.n	800a212 <UART_Start_Receive_IT+0x52>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d105      	bne.n	800a208 <UART_Start_Receive_IT+0x48>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a202:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a206:	e02d      	b.n	800a264 <UART_Start_Receive_IT+0xa4>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	22ff      	movs	r2, #255	@ 0xff
 800a20c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a210:	e028      	b.n	800a264 <UART_Start_Receive_IT+0xa4>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10d      	bne.n	800a236 <UART_Start_Receive_IT+0x76>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d104      	bne.n	800a22c <UART_Start_Receive_IT+0x6c>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	22ff      	movs	r2, #255	@ 0xff
 800a226:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a22a:	e01b      	b.n	800a264 <UART_Start_Receive_IT+0xa4>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	227f      	movs	r2, #127	@ 0x7f
 800a230:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a234:	e016      	b.n	800a264 <UART_Start_Receive_IT+0xa4>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a23e:	d10d      	bne.n	800a25c <UART_Start_Receive_IT+0x9c>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d104      	bne.n	800a252 <UART_Start_Receive_IT+0x92>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	227f      	movs	r2, #127	@ 0x7f
 800a24c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a250:	e008      	b.n	800a264 <UART_Start_Receive_IT+0xa4>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	223f      	movs	r2, #63	@ 0x3f
 800a256:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a25a:	e003      	b.n	800a264 <UART_Start_Receive_IT+0xa4>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2222      	movs	r2, #34	@ 0x22
 800a270:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3308      	adds	r3, #8
 800a27a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a27e:	e853 3f00 	ldrex	r3, [r3]
 800a282:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3308      	adds	r3, #8
 800a294:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a298:	673a      	str	r2, [r7, #112]	@ 0x70
 800a29a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a29e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a2a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e3      	bne.n	800a274 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2b4:	d14f      	bne.n	800a356 <UART_Start_Receive_IT+0x196>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a2bc:	88fa      	ldrh	r2, [r7, #6]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d349      	bcc.n	800a356 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2ca:	d107      	bne.n	800a2dc <UART_Start_Receive_IT+0x11c>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d103      	bne.n	800a2dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a46      	ldr	r2, [pc, #280]	@ (800a3f0 <UART_Start_Receive_IT+0x230>)
 800a2d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a2da:	e002      	b.n	800a2e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4a45      	ldr	r2, [pc, #276]	@ (800a3f4 <UART_Start_Receive_IT+0x234>)
 800a2e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d01a      	beq.n	800a320 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a2f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a30c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a30e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a312:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a31a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e4      	bne.n	800a2ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3308      	adds	r3, #8
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a336:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3308      	adds	r3, #8
 800a33e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a340:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a342:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a34e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e5      	bne.n	800a320 <UART_Start_Receive_IT+0x160>
 800a354:	e046      	b.n	800a3e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a35e:	d107      	bne.n	800a370 <UART_Start_Receive_IT+0x1b0>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d103      	bne.n	800a370 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	4a23      	ldr	r2, [pc, #140]	@ (800a3f8 <UART_Start_Receive_IT+0x238>)
 800a36c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a36e:	e002      	b.n	800a376 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4a22      	ldr	r2, [pc, #136]	@ (800a3fc <UART_Start_Receive_IT+0x23c>)
 800a374:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d019      	beq.n	800a3b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a386:	e853 3f00 	ldrex	r3, [r3]
 800a38a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a392:	677b      	str	r3, [r7, #116]	@ 0x74
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a39c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a39e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e6      	bne.n	800a37e <UART_Start_Receive_IT+0x1be>
 800a3b0:	e018      	b.n	800a3e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	e853 3f00 	ldrex	r3, [r3]
 800a3be:	613b      	str	r3, [r7, #16]
   return(result);
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f043 0320 	orr.w	r3, r3, #32
 800a3c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3d0:	623b      	str	r3, [r7, #32]
 800a3d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d4:	69f9      	ldr	r1, [r7, #28]
 800a3d6:	6a3a      	ldr	r2, [r7, #32]
 800a3d8:	e841 2300 	strex	r3, r2, [r1]
 800a3dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1e6      	bne.n	800a3b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	378c      	adds	r7, #140	@ 0x8c
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr
 800a3f0:	0800add5 	.word	0x0800add5
 800a3f4:	0800aa75 	.word	0x0800aa75
 800a3f8:	0800a8bd 	.word	0x0800a8bd
 800a3fc:	0800a705 	.word	0x0800a705

0800a400 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a400:	b480      	push	{r7}
 800a402:	b08f      	sub	sp, #60	@ 0x3c
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	61fb      	str	r3, [r7, #28]
   return(result);
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a41c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a428:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a42c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e6      	bne.n	800a408 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	60bb      	str	r3, [r7, #8]
   return(result);
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a450:	633b      	str	r3, [r7, #48]	@ 0x30
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3308      	adds	r3, #8
 800a458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a45a:	61ba      	str	r2, [r7, #24]
 800a45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6979      	ldr	r1, [r7, #20]
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	613b      	str	r3, [r7, #16]
   return(result);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e5      	bne.n	800a43a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2220      	movs	r2, #32
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a476:	bf00      	nop
 800a478:	373c      	adds	r7, #60	@ 0x3c
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bc80      	pop	{r7}
 800a47e:	4770      	bx	lr

0800a480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a480:	b480      	push	{r7}
 800a482:	b095      	sub	sp, #84	@ 0x54
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e6      	bne.n	800a488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4d0:	f023 0301 	bic.w	r3, r3, #1
 800a4d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4e6:	e841 2300 	strex	r3, r2, [r1]
 800a4ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1e3      	bne.n	800a4ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d118      	bne.n	800a52c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	60bb      	str	r3, [r7, #8]
   return(result);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f023 0310 	bic.w	r3, r3, #16
 800a50e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6979      	ldr	r1, [r7, #20]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	613b      	str	r3, [r7, #16]
   return(result);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e6      	bne.n	800a4fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a540:	bf00      	nop
 800a542:	3754      	adds	r7, #84	@ 0x54
 800a544:	46bd      	mov	sp, r7
 800a546:	bc80      	pop	{r7}
 800a548:	4770      	bx	lr

0800a54a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b090      	sub	sp, #64	@ 0x40
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0320 	and.w	r3, r3, #32
 800a562:	2b00      	cmp	r3, #0
 800a564:	d137      	bne.n	800a5d6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a568:	2200      	movs	r2, #0
 800a56a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3308      	adds	r3, #8
 800a574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	623b      	str	r3, [r7, #32]
   return(result);
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a584:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3308      	adds	r3, #8
 800a58c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a58e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e5      	bne.n	800a56e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	e853 3f00 	ldrex	r3, [r3]
 800a5ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c0:	61fb      	str	r3, [r7, #28]
 800a5c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	69b9      	ldr	r1, [r7, #24]
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	e841 2300 	strex	r3, r2, [r1]
 800a5cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e6      	bne.n	800a5a2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5d4:	e002      	b.n	800a5dc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a5d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a5d8:	f7f8 fe9e 	bl	8003318 <HAL_UART_TxCpltCallback>
}
 800a5dc:	bf00      	nop
 800a5de:	3740      	adds	r7, #64	@ 0x40
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f7ff f994 	bl	8009920 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5f8:	bf00      	nop
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a614:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a61c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a628:	2b80      	cmp	r3, #128	@ 0x80
 800a62a:	d109      	bne.n	800a640 <UART_DMAError+0x40>
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2b21      	cmp	r3, #33	@ 0x21
 800a630:	d106      	bne.n	800a640 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2200      	movs	r2, #0
 800a636:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a63a:	6978      	ldr	r0, [r7, #20]
 800a63c:	f7ff fee0 	bl	800a400 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a64a:	2b40      	cmp	r3, #64	@ 0x40
 800a64c:	d109      	bne.n	800a662 <UART_DMAError+0x62>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b22      	cmp	r3, #34	@ 0x22
 800a652:	d106      	bne.n	800a662 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	2200      	movs	r2, #0
 800a658:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a65c:	6978      	ldr	r0, [r7, #20]
 800a65e:	f7ff ff0f 	bl	800a480 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a668:	f043 0210 	orr.w	r2, r3, #16
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a672:	6978      	ldr	r0, [r7, #20]
 800a674:	f7ff f95d 	bl	8009932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a678:	bf00      	nop
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7ff f947 	bl	8009932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6a4:	bf00      	nop
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	e853 3f00 	ldrex	r3, [r3]
 800a6c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6c8:	61fb      	str	r3, [r7, #28]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	61bb      	str	r3, [r7, #24]
 800a6d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d6:	6979      	ldr	r1, [r7, #20]
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	613b      	str	r3, [r7, #16]
   return(result);
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e6      	bne.n	800a6b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7f8 fe0f 	bl	8003318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6fa:	bf00      	nop
 800a6fc:	3720      	adds	r7, #32
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b09c      	sub	sp, #112	@ 0x70
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a712:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a71c:	2b22      	cmp	r3, #34	@ 0x22
 800a71e:	f040 80be 	bne.w	800a89e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a728:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a72c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a730:	b2d9      	uxtb	r1, r3
 800a732:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a736:	b2da      	uxtb	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a73c:	400a      	ands	r2, r1
 800a73e:	b2d2      	uxtb	r2, r2
 800a740:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a752:	b29b      	uxth	r3, r3
 800a754:	3b01      	subs	r3, #1
 800a756:	b29a      	uxth	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a764:	b29b      	uxth	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	f040 80a1 	bne.w	800a8ae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a77a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a77c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a780:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a78a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a78c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e6      	bne.n	800a76c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b0:	f023 0301 	bic.w	r3, r3, #1
 800a7b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3308      	adds	r3, #8
 800a7bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a7be:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e5      	bne.n	800a79e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a33      	ldr	r2, [pc, #204]	@ (800a8b8 <UART_RxISR_8BIT+0x1b4>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d01f      	beq.n	800a830 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d018      	beq.n	800a830 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	623b      	str	r3, [r7, #32]
   return(result);
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a812:	663b      	str	r3, [r7, #96]	@ 0x60
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a81c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a81e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a820:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e6      	bne.n	800a7fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a834:	2b01      	cmp	r3, #1
 800a836:	d12e      	bne.n	800a896 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0310 	bic.w	r3, r3, #16
 800a852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a85c:	61fb      	str	r3, [r7, #28]
 800a85e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	69b9      	ldr	r1, [r7, #24]
 800a862:	69fa      	ldr	r2, [r7, #28]
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	617b      	str	r3, [r7, #20]
   return(result);
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e6      	bne.n	800a83e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	f003 0310 	and.w	r3, r3, #16
 800a87a:	2b10      	cmp	r3, #16
 800a87c:	d103      	bne.n	800a886 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2210      	movs	r2, #16
 800a884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7ff f858 	bl	8009944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a894:	e00b      	b.n	800a8ae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7f8 fd54 	bl	8003344 <HAL_UART_RxCpltCallback>
}
 800a89c:	e007      	b.n	800a8ae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	699a      	ldr	r2, [r3, #24]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f042 0208 	orr.w	r2, r2, #8
 800a8ac:	619a      	str	r2, [r3, #24]
}
 800a8ae:	bf00      	nop
 800a8b0:	3770      	adds	r7, #112	@ 0x70
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	40008000 	.word	0x40008000

0800a8bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b09c      	sub	sp, #112	@ 0x70
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a8ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8d4:	2b22      	cmp	r3, #34	@ 0x22
 800a8d6:	f040 80be 	bne.w	800aa56 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a8ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a8ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8fe:	1c9a      	adds	r2, r3, #2
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	3b01      	subs	r3, #1
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f040 80a1 	bne.w	800aa66 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a938:	667b      	str	r3, [r7, #100]	@ 0x64
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a942:	657b      	str	r3, [r7, #84]	@ 0x54
 800a944:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a946:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a948:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a94a:	e841 2300 	strex	r3, r2, [r1]
 800a94e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1e6      	bne.n	800a924 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3308      	adds	r3, #8
 800a95c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a968:	f023 0301 	bic.w	r3, r3, #1
 800a96c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3308      	adds	r3, #8
 800a974:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a976:	643a      	str	r2, [r7, #64]	@ 0x40
 800a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a97c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e5      	bne.n	800a956 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2220      	movs	r2, #32
 800a98e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a33      	ldr	r2, [pc, #204]	@ (800aa70 <UART_RxISR_16BIT+0x1b4>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d01f      	beq.n	800a9e8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d018      	beq.n	800a9e8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	e853 3f00 	ldrex	r3, [r3]
 800a9c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9d6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9dc:	e841 2300 	strex	r3, r2, [r1]
 800a9e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1e6      	bne.n	800a9b6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d12e      	bne.n	800aa4e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f023 0310 	bic.w	r3, r3, #16
 800aa0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa14:	61bb      	str	r3, [r7, #24]
 800aa16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa18:	6979      	ldr	r1, [r7, #20]
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	e841 2300 	strex	r3, r2, [r1]
 800aa20:	613b      	str	r3, [r7, #16]
   return(result);
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e6      	bne.n	800a9f6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f003 0310 	and.w	r3, r3, #16
 800aa32:	2b10      	cmp	r3, #16
 800aa34:	d103      	bne.n	800aa3e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2210      	movs	r2, #16
 800aa3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7fe ff7c 	bl	8009944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa4c:	e00b      	b.n	800aa66 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7f8 fc78 	bl	8003344 <HAL_UART_RxCpltCallback>
}
 800aa54:	e007      	b.n	800aa66 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	699a      	ldr	r2, [r3, #24]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f042 0208 	orr.w	r2, r2, #8
 800aa64:	619a      	str	r2, [r3, #24]
}
 800aa66:	bf00      	nop
 800aa68:	3770      	adds	r7, #112	@ 0x70
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	40008000 	.word	0x40008000

0800aa74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b0ac      	sub	sp, #176	@ 0xb0
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa82:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaaa:	2b22      	cmp	r3, #34	@ 0x22
 800aaac:	f040 8182 	bne.w	800adb4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aab6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aaba:	e125      	b.n	800ad08 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aac6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800aaca:	b2d9      	uxtb	r1, r3
 800aacc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aad6:	400a      	ands	r2, r1
 800aad8:	b2d2      	uxtb	r2, r2
 800aada:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab06:	f003 0307 	and.w	r3, r3, #7
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d053      	beq.n	800abb6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d011      	beq.n	800ab3e <UART_RxISR_8BIT_FIFOEN+0xca>
 800ab1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00b      	beq.n	800ab3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab34:	f043 0201 	orr.w	r2, r3, #1
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab42:	f003 0302 	and.w	r3, r3, #2
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d011      	beq.n	800ab6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ab4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00b      	beq.n	800ab6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab64:	f043 0204 	orr.w	r2, r3, #4
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab72:	f003 0304 	and.w	r3, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d011      	beq.n	800ab9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ab7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00b      	beq.n	800ab9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2204      	movs	r2, #4
 800ab8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab94:	f043 0202 	orr.w	r2, r3, #2
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d006      	beq.n	800abb6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7fe fec2 	bl	8009932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f040 80a2 	bne.w	800ad08 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abcc:	e853 3f00 	ldrex	r3, [r3]
 800abd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800abd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	461a      	mov	r2, r3
 800abe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800abe8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800abec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800abee:	e841 2300 	strex	r3, r2, [r1]
 800abf2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800abf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1e4      	bne.n	800abc4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3308      	adds	r3, #8
 800ac00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac04:	e853 3f00 	ldrex	r3, [r3]
 800ac08:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ac0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac10:	f023 0301 	bic.w	r3, r3, #1
 800ac14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac22:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ac24:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ac28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ac2a:	e841 2300 	strex	r3, r2, [r1]
 800ac2e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ac30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e1      	bne.n	800abfa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a5f      	ldr	r2, [pc, #380]	@ (800adcc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d021      	beq.n	800ac98 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01a      	beq.n	800ac98 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac6a:	e853 3f00 	ldrex	r3, [r3]
 800ac6e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac84:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac86:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac88:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac8c:	e841 2300 	strex	r3, r2, [r1]
 800ac90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ac92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e4      	bne.n	800ac62 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d130      	bne.n	800ad02 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acae:	e853 3f00 	ldrex	r3, [r3]
 800acb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	f023 0310 	bic.w	r3, r3, #16
 800acba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acc8:	643b      	str	r3, [r7, #64]	@ 0x40
 800acca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e4      	bne.n	800aca6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	69db      	ldr	r3, [r3, #28]
 800ace2:	f003 0310 	and.w	r3, r3, #16
 800ace6:	2b10      	cmp	r3, #16
 800ace8:	d103      	bne.n	800acf2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2210      	movs	r2, #16
 800acf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7fe fe22 	bl	8009944 <HAL_UARTEx_RxEventCallback>
 800ad00:	e002      	b.n	800ad08 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7f8 fb1e 	bl	8003344 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad08:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d006      	beq.n	800ad1e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800ad10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f47f aecf 	bne.w	800aabc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad24:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d049      	beq.n	800adc4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad36:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d242      	bcs.n	800adc4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3308      	adds	r3, #8
 800ad44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e3      	bne.n	800ad3e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a15      	ldr	r2, [pc, #84]	@ (800add0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ad7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	e853 3f00 	ldrex	r3, [r3]
 800ad88:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	f043 0320 	orr.w	r3, r3, #32
 800ad90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ad9e:	61bb      	str	r3, [r7, #24]
 800ada0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada2:	6979      	ldr	r1, [r7, #20]
 800ada4:	69ba      	ldr	r2, [r7, #24]
 800ada6:	e841 2300 	strex	r3, r2, [r1]
 800adaa:	613b      	str	r3, [r7, #16]
   return(result);
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1e4      	bne.n	800ad7c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800adb2:	e007      	b.n	800adc4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f042 0208 	orr.w	r2, r2, #8
 800adc2:	619a      	str	r2, [r3, #24]
}
 800adc4:	bf00      	nop
 800adc6:	37b0      	adds	r7, #176	@ 0xb0
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	40008000 	.word	0x40008000
 800add0:	0800a705 	.word	0x0800a705

0800add4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b0ae      	sub	sp, #184	@ 0xb8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ade2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae0a:	2b22      	cmp	r3, #34	@ 0x22
 800ae0c:	f040 8186 	bne.w	800b11c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae16:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae1a:	e129      	b.n	800b070 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae22:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ae2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ae32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ae36:	4013      	ands	r3, r2
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae44:	1c9a      	adds	r2, r3, #2
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	3b01      	subs	r3, #1
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ae66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae6a:	f003 0307 	and.w	r3, r3, #7
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d053      	beq.n	800af1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d011      	beq.n	800aea2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ae7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00b      	beq.n	800aea2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae98:	f043 0201 	orr.w	r2, r3, #1
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d011      	beq.n	800aed2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aeae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00b      	beq.n	800aed2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2202      	movs	r2, #2
 800aec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aec8:	f043 0204 	orr.w	r2, r3, #4
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aed6:	f003 0304 	and.w	r3, r3, #4
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d011      	beq.n	800af02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800aede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2204      	movs	r2, #4
 800aef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aef8:	f043 0202 	orr.w	r2, r3, #2
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7fe fd10 	bl	8009932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	f040 80a4 	bne.w	800b070 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	461a      	mov	r2, r3
 800af46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e2      	bne.n	800af28 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3308      	adds	r3, #8
 800af68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af6c:	e853 3f00 	ldrex	r3, [r3]
 800af70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af78:	f023 0301 	bic.w	r3, r3, #1
 800af7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3308      	adds	r3, #8
 800af86:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800af8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800af90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800af98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e1      	bne.n	800af62 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a5f      	ldr	r2, [pc, #380]	@ (800b134 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d021      	beq.n	800b000 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d01a      	beq.n	800b000 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afd2:	e853 3f00 	ldrex	r3, [r3]
 800afd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800afd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800afde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800afec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aff2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aff4:	e841 2300 	strex	r3, r2, [r1]
 800aff8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800affa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e4      	bne.n	800afca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b004:	2b01      	cmp	r3, #1
 800b006:	d130      	bne.n	800b06a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b016:	e853 3f00 	ldrex	r3, [r3]
 800b01a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b01e:	f023 0310 	bic.w	r3, r3, #16
 800b022:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b030:	647b      	str	r3, [r7, #68]	@ 0x44
 800b032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b038:	e841 2300 	strex	r3, r2, [r1]
 800b03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e4      	bne.n	800b00e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	f003 0310 	and.w	r3, r3, #16
 800b04e:	2b10      	cmp	r3, #16
 800b050:	d103      	bne.n	800b05a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2210      	movs	r2, #16
 800b058:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7fe fc6e 	bl	8009944 <HAL_UARTEx_RxEventCallback>
 800b068:	e002      	b.n	800b070 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7f8 f96a 	bl	8003344 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b070:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b074:	2b00      	cmp	r3, #0
 800b076:	d006      	beq.n	800b086 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800b078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b07c:	f003 0320 	and.w	r3, r3, #32
 800b080:	2b00      	cmp	r3, #0
 800b082:	f47f aecb 	bne.w	800ae1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b08c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b090:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b094:	2b00      	cmp	r3, #0
 800b096:	d049      	beq.n	800b12c <UART_RxISR_16BIT_FIFOEN+0x358>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b09e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d242      	bcs.n	800b12c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3308      	adds	r3, #8
 800b0ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b0:	e853 3f00 	ldrex	r3, [r3]
 800b0b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b0ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e3      	bne.n	800b0a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a15      	ldr	r2, [pc, #84]	@ (800b138 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b0e2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f043 0320 	orr.w	r3, r3, #32
 800b0f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b106:	61fb      	str	r3, [r7, #28]
 800b108:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	69b9      	ldr	r1, [r7, #24]
 800b10c:	69fa      	ldr	r2, [r7, #28]
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	617b      	str	r3, [r7, #20]
   return(result);
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e4      	bne.n	800b0e4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b11a:	e007      	b.n	800b12c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0208 	orr.w	r2, r2, #8
 800b12a:	619a      	str	r2, [r3, #24]
}
 800b12c:	bf00      	nop
 800b12e:	37b8      	adds	r7, #184	@ 0xb8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	40008000 	.word	0x40008000
 800b138:	0800a8bd 	.word	0x0800a8bd

0800b13c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	bc80      	pop	{r7}
 800b14c:	4770      	bx	lr

0800b14e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr

0800b160 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bc80      	pop	{r7}
 800b170:	4770      	bx	lr

0800b172 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b088      	sub	sp, #32
 800b176:	af02      	add	r7, sp, #8
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	1d3b      	adds	r3, r7, #4
 800b17c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d101      	bne.n	800b192 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b18e:	2302      	movs	r3, #2
 800b190:	e046      	b.n	800b220 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2224      	movs	r2, #36	@ 0x24
 800b19e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f022 0201 	bic.w	r2, r2, #1
 800b1b0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	430a      	orrs	r2, r1
 800b1c4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d105      	bne.n	800b1d8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b1cc:	1d3b      	adds	r3, r7, #4
 800b1ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 f911 	bl	800b3fa <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f042 0201 	orr.w	r2, r2, #1
 800b1e6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1e8:	f7f7 fb7c 	bl	80028e4 <HAL_GetTick>
 800b1ec:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f7fe ff10 	bl	800a022 <UART_WaitOnFlagUntilTimeout>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	75fb      	strb	r3, [r7, #23]
 800b20c:	e003      	b.n	800b216 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b228:	b480      	push	{r7}
 800b22a:	b089      	sub	sp, #36	@ 0x24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b236:	2b01      	cmp	r3, #1
 800b238:	d101      	bne.n	800b23e <HAL_UARTEx_EnableStopMode+0x16>
 800b23a:	2302      	movs	r3, #2
 800b23c:	e021      	b.n	800b282 <HAL_UARTEx_EnableStopMode+0x5a>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	e853 3f00 	ldrex	r3, [r3]
 800b252:	60bb      	str	r3, [r7, #8]
   return(result);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	f043 0302 	orr.w	r3, r3, #2
 800b25a:	61fb      	str	r3, [r7, #28]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	461a      	mov	r2, r3
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	61bb      	str	r3, [r7, #24]
 800b266:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b268:	6979      	ldr	r1, [r7, #20]
 800b26a:	69ba      	ldr	r2, [r7, #24]
 800b26c:	e841 2300 	strex	r3, r2, [r1]
 800b270:	613b      	str	r3, [r7, #16]
   return(result);
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e6      	bne.n	800b246 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3724      	adds	r7, #36	@ 0x24
 800b286:	46bd      	mov	sp, r7
 800b288:	bc80      	pop	{r7}
 800b28a:	4770      	bx	lr

0800b28c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d101      	bne.n	800b2a2 <HAL_UARTEx_EnableFifoMode+0x16>
 800b29e:	2302      	movs	r3, #2
 800b2a0:	e02b      	b.n	800b2fa <HAL_UARTEx_EnableFifoMode+0x6e>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2224      	movs	r2, #36	@ 0x24
 800b2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0201 	bic.w	r2, r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b2d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800b2d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f8ac 	bl	800b440 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b312:	2b01      	cmp	r3, #1
 800b314:	d101      	bne.n	800b31a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b316:	2302      	movs	r3, #2
 800b318:	e02d      	b.n	800b376 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2224      	movs	r2, #36	@ 0x24
 800b326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0201 	bic.w	r2, r2, #1
 800b340:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	430a      	orrs	r2, r1
 800b354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f872 	bl	800b440 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2220      	movs	r2, #32
 800b368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d101      	bne.n	800b396 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b392:	2302      	movs	r3, #2
 800b394:	e02d      	b.n	800b3f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2224      	movs	r2, #36	@ 0x24
 800b3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f022 0201 	bic.w	r2, r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f834 	bl	800b440 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	1d3b      	adds	r3, r7, #4
 800b404:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f023 0210 	bic.w	r2, r3, #16
 800b412:	893b      	ldrh	r3, [r7, #8]
 800b414:	4619      	mov	r1, r3
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	430a      	orrs	r2, r1
 800b41c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800b428:	7abb      	ldrb	r3, [r7, #10]
 800b42a:	061a      	lsls	r2, r3, #24
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	605a      	str	r2, [r3, #4]
}
 800b434:	bf00      	nop
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	bc80      	pop	{r7}
 800b43c:	4770      	bx	lr
	...

0800b440 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d108      	bne.n	800b462 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b460:	e031      	b.n	800b4c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b462:	2308      	movs	r3, #8
 800b464:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b466:	2308      	movs	r3, #8
 800b468:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	0e5b      	lsrs	r3, r3, #25
 800b472:	b2db      	uxtb	r3, r3
 800b474:	f003 0307 	and.w	r3, r3, #7
 800b478:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	0f5b      	lsrs	r3, r3, #29
 800b482:	b2db      	uxtb	r3, r3
 800b484:	f003 0307 	and.w	r3, r3, #7
 800b488:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
 800b48c:	7b3a      	ldrb	r2, [r7, #12]
 800b48e:	4910      	ldr	r1, [pc, #64]	@ (800b4d0 <UARTEx_SetNbDataToProcess+0x90>)
 800b490:	5c8a      	ldrb	r2, [r1, r2]
 800b492:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b496:	7b3a      	ldrb	r2, [r7, #12]
 800b498:	490e      	ldr	r1, [pc, #56]	@ (800b4d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b49a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b49c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	7b7a      	ldrb	r2, [r7, #13]
 800b4ac:	4908      	ldr	r1, [pc, #32]	@ (800b4d0 <UARTEx_SetNbDataToProcess+0x90>)
 800b4ae:	5c8a      	ldrb	r2, [r1, r2]
 800b4b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4b4:	7b7a      	ldrb	r2, [r7, #13]
 800b4b6:	4907      	ldr	r1, [pc, #28]	@ (800b4d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b4b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b4c6:	bf00      	nop
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bc80      	pop	{r7}
 800b4ce:	4770      	bx	lr
 800b4d0:	0801e238 	.word	0x0801e238
 800b4d4:	0801e240 	.word	0x0801e240

0800b4d8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b4dc:	f7f7 f8a2 	bl	8002624 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b4e0:	f000 f820 	bl	800b524 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b4e4:	bf00      	nop
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f0:	f011 fa18 	bl	801c924 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b4f4:	bf00      	nop
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b4fc:	f3bf 8f4f 	dsb	sy
}
 800b500:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b502:	4b06      	ldr	r3, [pc, #24]	@ (800b51c <__NVIC_SystemReset+0x24>)
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b50a:	4904      	ldr	r1, [pc, #16]	@ (800b51c <__NVIC_SystemReset+0x24>)
 800b50c:	4b04      	ldr	r3, [pc, #16]	@ (800b520 <__NVIC_SystemReset+0x28>)
 800b50e:	4313      	orrs	r3, r2
 800b510:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b512:	f3bf 8f4f 	dsb	sy
}
 800b516:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b518:	bf00      	nop
 800b51a:	e7fd      	b.n	800b518 <__NVIC_SystemReset+0x20>
 800b51c:	e000ed00 	.word	0xe000ed00
 800b520:	05fa0004 	.word	0x05fa0004

0800b524 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800b52e:	2300      	movs	r3, #0
 800b530:	9302      	str	r3, [sp, #8]
 800b532:	2303      	movs	r3, #3
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	2301      	movs	r3, #1
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	4b59      	ldr	r3, [pc, #356]	@ (800b6a0 <LoRaWAN_Init+0x17c>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	2100      	movs	r1, #0
 800b540:	2002      	movs	r0, #2
 800b542:	f011 fe3b 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800b546:	2301      	movs	r3, #1
 800b548:	9302      	str	r3, [sp, #8]
 800b54a:	2306      	movs	r3, #6
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	2302      	movs	r3, #2
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	4b54      	ldr	r3, [pc, #336]	@ (800b6a4 <LoRaWAN_Init+0x180>)
 800b554:	2200      	movs	r2, #0
 800b556:	2100      	movs	r1, #0
 800b558:	2002      	movs	r0, #2
 800b55a:	f011 fe2f 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b55e:	2301      	movs	r3, #1
 800b560:	9302      	str	r3, [sp, #8]
 800b562:	2303      	movs	r3, #3
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	2301      	movs	r3, #1
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	4b4f      	ldr	r3, [pc, #316]	@ (800b6a8 <LoRaWAN_Init+0x184>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	2100      	movs	r1, #0
 800b570:	2002      	movs	r0, #2
 800b572:	f011 fe23 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800b576:	1d3b      	adds	r3, r7, #4
 800b578:	4619      	mov	r1, r3
 800b57a:	2000      	movs	r0, #0
 800b57c:	f003 fa52 	bl	800ea24 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	0e1b      	lsrs	r3, r3, #24
 800b584:	b2db      	uxtb	r3, r3
 800b586:	461a      	mov	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	0c1b      	lsrs	r3, r3, #16
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	4619      	mov	r1, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	0a1b      	lsrs	r3, r3, #8
 800b594:	b2db      	uxtb	r3, r3
 800b596:	9302      	str	r3, [sp, #8]
 800b598:	9101      	str	r1, [sp, #4]
 800b59a:	9200      	str	r2, [sp, #0]
 800b59c:	4b43      	ldr	r3, [pc, #268]	@ (800b6ac <LoRaWAN_Init+0x188>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	2002      	movs	r0, #2
 800b5a4:	f011 fe0a 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800b5a8:	1d3b      	adds	r3, r7, #4
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	f003 fa39 	bl	800ea24 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	0e1b      	lsrs	r3, r3, #24
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	0c1b      	lsrs	r3, r3, #16
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	0a1b      	lsrs	r3, r3, #8
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	b2c0      	uxtb	r0, r0
 800b5cc:	9003      	str	r0, [sp, #12]
 800b5ce:	9302      	str	r3, [sp, #8]
 800b5d0:	9101      	str	r1, [sp, #4]
 800b5d2:	9200      	str	r2, [sp, #0]
 800b5d4:	4b36      	ldr	r3, [pc, #216]	@ (800b6b0 <LoRaWAN_Init+0x18c>)
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2100      	movs	r1, #0
 800b5da:	2002      	movs	r0, #2
 800b5dc:	f011 fdee 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	4b33      	ldr	r3, [pc, #204]	@ (800b6b4 <LoRaWAN_Init+0x190>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b5ec:	4832      	ldr	r0, [pc, #200]	@ (800b6b8 <LoRaWAN_Init+0x194>)
 800b5ee:	f011 fb37 	bl	801cc60 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	4b31      	ldr	r3, [pc, #196]	@ (800b6bc <LoRaWAN_Init+0x198>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b5fe:	4830      	ldr	r0, [pc, #192]	@ (800b6c0 <LoRaWAN_Init+0x19c>)
 800b600:	f011 fb2e 	bl	801cc60 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800b604:	2300      	movs	r3, #0
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	4b2e      	ldr	r3, [pc, #184]	@ (800b6c4 <LoRaWAN_Init+0x1a0>)
 800b60a:	2201      	movs	r2, #1
 800b60c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b610:	482d      	ldr	r0, [pc, #180]	@ (800b6c8 <LoRaWAN_Init+0x1a4>)
 800b612:	f011 fb25 	bl	801cc60 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800b616:	2300      	movs	r3, #0
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	4b2c      	ldr	r3, [pc, #176]	@ (800b6cc <LoRaWAN_Init+0x1a8>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b622:	482b      	ldr	r0, [pc, #172]	@ (800b6d0 <LoRaWAN_Init+0x1ac>)
 800b624:	f011 fb1c 	bl	801cc60 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b628:	4a2a      	ldr	r2, [pc, #168]	@ (800b6d4 <LoRaWAN_Init+0x1b0>)
 800b62a:	2100      	movs	r1, #0
 800b62c:	2001      	movs	r0, #1
 800b62e:	f011 fa75 	bl	801cb1c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b632:	4a29      	ldr	r2, [pc, #164]	@ (800b6d8 <LoRaWAN_Init+0x1b4>)
 800b634:	2100      	movs	r1, #0
 800b636:	2002      	movs	r0, #2
 800b638:	f011 fa70 	bl	801cb1c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b63c:	4a27      	ldr	r2, [pc, #156]	@ (800b6dc <LoRaWAN_Init+0x1b8>)
 800b63e:	2100      	movs	r1, #0
 800b640:	2004      	movs	r0, #4
 800b642:	f011 fa6b 	bl	801cb1c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b646:	4a26      	ldr	r2, [pc, #152]	@ (800b6e0 <LoRaWAN_Init+0x1bc>)
 800b648:	2100      	movs	r1, #0
 800b64a:	2008      	movs	r0, #8
 800b64c:	f011 fa66 	bl	801cb1c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b650:	f000 fd3a 	bl	800c0c8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b654:	4923      	ldr	r1, [pc, #140]	@ (800b6e4 <LoRaWAN_Init+0x1c0>)
 800b656:	4824      	ldr	r0, [pc, #144]	@ (800b6e8 <LoRaWAN_Init+0x1c4>)
 800b658:	f002 fa4a 	bl	800daf0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b65c:	4823      	ldr	r0, [pc, #140]	@ (800b6ec <LoRaWAN_Init+0x1c8>)
 800b65e:	f002 fab5 	bl	800dbcc <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800b662:	4819      	ldr	r0, [pc, #100]	@ (800b6c8 <LoRaWAN_Init+0x1a4>)
 800b664:	f011 fb32 	bl	801cccc <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b668:	4b21      	ldr	r3, [pc, #132]	@ (800b6f0 <LoRaWAN_Init+0x1cc>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	4a21      	ldr	r2, [pc, #132]	@ (800b6f4 <LoRaWAN_Init+0x1d0>)
 800b66e:	7812      	ldrb	r2, [r2, #0]
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f002 fc0e 	bl	800de94 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b678:	4b1f      	ldr	r3, [pc, #124]	@ (800b6f8 <LoRaWAN_Init+0x1d4>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10b      	bne.n	800b698 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b680:	4b1e      	ldr	r3, [pc, #120]	@ (800b6fc <LoRaWAN_Init+0x1d8>)
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	2300      	movs	r3, #0
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	4b1d      	ldr	r3, [pc, #116]	@ (800b700 <LoRaWAN_Init+0x1dc>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	481d      	ldr	r0, [pc, #116]	@ (800b704 <LoRaWAN_Init+0x1e0>)
 800b68e:	f011 fae7 	bl	801cc60 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b692:	481c      	ldr	r0, [pc, #112]	@ (800b704 <LoRaWAN_Init+0x1e0>)
 800b694:	f011 fb1a 	bl	801cccc <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b698:	bf00      	nop
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	0801d8bc 	.word	0x0801d8bc
 800b6a4:	0801d8e0 	.word	0x0801d8e0
 800b6a8:	0801d904 	.word	0x0801d904
 800b6ac:	0801d928 	.word	0x0801d928
 800b6b0:	0801d94c 	.word	0x0801d94c
 800b6b4:	0800bbe9 	.word	0x0800bbe9
 800b6b8:	200004b0 	.word	0x200004b0
 800b6bc:	0800bbfb 	.word	0x0800bbfb
 800b6c0:	200004c8 	.word	0x200004c8
 800b6c4:	0800bc0d 	.word	0x0800bc0d
 800b6c8:	200004e0 	.word	0x200004e0
 800b6cc:	0800bfc9 	.word	0x0800bfc9
 800b6d0:	200003a4 	.word	0x200003a4
 800b6d4:	0800de29 	.word	0x0800de29
 800b6d8:	0800b879 	.word	0x0800b879
 800b6dc:	0800bfed 	.word	0x0800bfed
 800b6e0:	0800bf49 	.word	0x0800bf49
 800b6e4:	01030000 	.word	0x01030000
 800b6e8:	20000028 	.word	0x20000028
 800b6ec:	20000074 	.word	0x20000074
 800b6f0:	20000024 	.word	0x20000024
 800b6f4:	20000025 	.word	0x20000025
 800b6f8:	20000388 	.word	0x20000388
 800b6fc:	2000008c 	.word	0x2000008c
 800b700:	0800bbc5 	.word	0x0800bbc5
 800b704:	2000038c 	.word	0x2000038c

0800b708 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800b712:	88fb      	ldrh	r3, [r7, #6]
 800b714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b718:	d104      	bne.n	800b724 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b71a:	2100      	movs	r1, #0
 800b71c:	2002      	movs	r0, #2
 800b71e:	f011 fa1f 	bl	801cb60 <UTIL_SEQ_SetTask>
      }
      break;
 800b722:	e000      	b.n	800b726 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800b724:	bf00      	nop
  }
}
 800b726:	bf00      	nop
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b730:	b5b0      	push	{r4, r5, r7, lr}
 800b732:	b08a      	sub	sp, #40	@ 0x28
 800b734:	af06      	add	r7, sp, #24
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 8086 	beq.w	800b852 <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800b746:	4845      	ldr	r0, [pc, #276]	@ (800b85c <OnRxData+0x12c>)
 800b748:	f011 fac0 	bl	801cccc <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d05a      	beq.n	800b80a <OnRxData+0xda>
    {
      if (appData != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d057      	beq.n	800b80a <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d050      	beq.n	800b80a <OnRxData+0xda>
        {
          switch (appData->Port)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d01f      	beq.n	800b7b0 <OnRxData+0x80>
 800b770:	2b03      	cmp	r3, #3
 800b772:	d145      	bne.n	800b800 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	785b      	ldrb	r3, [r3, #1]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d143      	bne.n	800b804 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b02      	cmp	r3, #2
 800b784:	d00e      	beq.n	800b7a4 <OnRxData+0x74>
 800b786:	2b02      	cmp	r3, #2
 800b788:	dc10      	bgt.n	800b7ac <OnRxData+0x7c>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <OnRxData+0x64>
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d004      	beq.n	800b79c <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800b792:	e00b      	b.n	800b7ac <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800b794:	2000      	movs	r0, #0
 800b796:	f002 fd31 	bl	800e1fc <LmHandlerRequestClass>
                    break;
 800b79a:	e008      	b.n	800b7ae <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800b79c:	2001      	movs	r0, #1
 800b79e:	f002 fd2d 	bl	800e1fc <LmHandlerRequestClass>
                    break;
 800b7a2:	e004      	b.n	800b7ae <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800b7a4:	2002      	movs	r0, #2
 800b7a6:	f002 fd29 	bl	800e1fc <LmHandlerRequestClass>
                    break;
 800b7aa:	e000      	b.n	800b7ae <OnRxData+0x7e>
                    break;
 800b7ac:	bf00      	nop
                }
              }
              break;
 800b7ae:	e029      	b.n	800b804 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	785b      	ldrb	r3, [r3, #1]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d127      	bne.n	800b808 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	f003 0301 	and.w	r3, r3, #1
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	4b26      	ldr	r3, [pc, #152]	@ (800b860 <OnRxData+0x130>)
 800b7c6:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800b7c8:	4b25      	ldr	r3, [pc, #148]	@ (800b860 <OnRxData+0x130>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10b      	bne.n	800b7e8 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800b7d0:	4b24      	ldr	r3, [pc, #144]	@ (800b864 <OnRxData+0x134>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	2003      	movs	r0, #3
 800b7d8:	f011 fcf0 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800b7dc:	2201      	movs	r2, #1
 800b7de:	2120      	movs	r1, #32
 800b7e0:	4821      	ldr	r0, [pc, #132]	@ (800b868 <OnRxData+0x138>)
 800b7e2:	f7fa f8ed 	bl	80059c0 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800b7e6:	e00f      	b.n	800b808 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800b7e8:	4b20      	ldr	r3, [pc, #128]	@ (800b86c <OnRxData+0x13c>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	2003      	movs	r0, #3
 800b7f0:	f011 fce4 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	2120      	movs	r1, #32
 800b7f8:	481b      	ldr	r0, [pc, #108]	@ (800b868 <OnRxData+0x138>)
 800b7fa:	f7fa f8e1 	bl	80059c0 <HAL_GPIO_WritePin>
              break;
 800b7fe:	e003      	b.n	800b808 <OnRxData+0xd8>

            default:

              break;
 800b800:	bf00      	nop
 800b802:	e002      	b.n	800b80a <OnRxData+0xda>
              break;
 800b804:	bf00      	nop
 800b806:	e000      	b.n	800b80a <OnRxData+0xda>
              break;
 800b808:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	7c1b      	ldrb	r3, [r3, #16]
 800b80e:	2b05      	cmp	r3, #5
 800b810:	d81f      	bhi.n	800b852 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	7bfa      	ldrb	r2, [r7, #15]
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800b81e:	460c      	mov	r4, r1
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	7c09      	ldrb	r1, [r1, #16]
 800b824:	4608      	mov	r0, r1
 800b826:	4912      	ldr	r1, [pc, #72]	@ (800b870 <OnRxData+0x140>)
 800b828:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b82c:	6838      	ldr	r0, [r7, #0]
 800b82e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800b832:	4605      	mov	r5, r0
 800b834:	6838      	ldr	r0, [r7, #0]
 800b836:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800b83a:	9005      	str	r0, [sp, #20]
 800b83c:	9504      	str	r5, [sp, #16]
 800b83e:	9103      	str	r1, [sp, #12]
 800b840:	9402      	str	r4, [sp, #8]
 800b842:	9201      	str	r2, [sp, #4]
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	4b0b      	ldr	r3, [pc, #44]	@ (800b874 <OnRxData+0x144>)
 800b848:	2200      	movs	r2, #0
 800b84a:	2100      	movs	r1, #0
 800b84c:	2003      	movs	r0, #3
 800b84e:	f011 fcb5 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800b852:	bf00      	nop
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bdb0      	pop	{r4, r5, r7, pc}
 800b85a:	bf00      	nop
 800b85c:	200004c8 	.word	0x200004c8
 800b860:	200004ae 	.word	0x200004ae
 800b864:	0801d970 	.word	0x0801d970
 800b868:	48000400 	.word	0x48000400
 800b86c:	0801d97c 	.word	0x0801d97c
 800b870:	2000000c 	.word	0x2000000c
 800b874:	0801d988 	.word	0x0801d988

0800b878 <SendTxData>:

static void SendTxData(void)
{
 800b878:	b590      	push	{r4, r7, lr}
 800b87a:	b091      	sub	sp, #68	@ 0x44
 800b87c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b87e:	23ff      	movs	r3, #255	@ 0xff
 800b880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800b884:	f7f6 fefe 	bl	8002684 <GetBatteryLevel>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	637b      	str	r3, [r7, #52]	@ 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800b8ae:	1d3b      	adds	r3, r7, #4
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7f7 f8ab 	bl	8002a0c <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800b8b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	4b9b      	ldr	r3, [pc, #620]	@ (800bb2c <SendTxData+0x2b4>)
 800b8be:	2201      	movs	r2, #1
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	2002      	movs	r0, #2
 800b8c4:	f011 fc7a 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7f5 fbfe 	bl	80010cc <__aeabi_f2iz>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	b21b      	sxth	r3, r3
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	4b96      	ldr	r3, [pc, #600]	@ (800bb30 <SendTxData+0x2b8>)
 800b8d8:	2201      	movs	r2, #1
 800b8da:	2100      	movs	r1, #0
 800b8dc:	2002      	movs	r0, #2
 800b8de:	f011 fc6d 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b8e2:	4b94      	ldr	r3, [pc, #592]	@ (800bb34 <SendTxData+0x2bc>)
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	4993      	ldr	r1, [pc, #588]	@ (800bb38 <SendTxData+0x2c0>)
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7f5 fa27 	bl	8000d40 <__aeabi_fmul>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7f5 fc0f 	bl	8001118 <__aeabi_f2uiz>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature) * 100;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	4618      	mov	r0, r3
 800b902:	f7f5 fbe3 	bl	80010cc <__aeabi_f2iz>
 800b906:	4603      	mov	r3, r0
 800b908:	b21b      	sxth	r3, r3
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	461a      	mov	r2, r3
 800b90e:	0092      	lsls	r2, r2, #2
 800b910:	4413      	add	r3, r2
 800b912:	461a      	mov	r2, r3
 800b914:	0091      	lsls	r1, r2, #2
 800b916:	461a      	mov	r2, r3
 800b918:	460b      	mov	r3, r1
 800b91a:	4413      	add	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	b29b      	uxth	r3, r3
 800b920:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4985      	ldr	r1, [pc, #532]	@ (800bb3c <SendTxData+0x2c4>)
 800b926:	4618      	mov	r0, r3
 800b928:	f7f5 fa0a 	bl	8000d40 <__aeabi_fmul>
 800b92c:	4603      	mov	r3, r0
 800b92e:	4982      	ldr	r1, [pc, #520]	@ (800bb38 <SendTxData+0x2c0>)
 800b930:	4618      	mov	r0, r3
 800b932:	f7f5 fab9 	bl	8000ea8 <__aeabi_fdiv>
 800b936:	4603      	mov	r3, r0
 800b938:	4618      	mov	r0, r3
 800b93a:	f7f5 fbed 	bl	8001118 <__aeabi_f2uiz>
 800b93e:	4603      	mov	r3, r0
 800b940:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800b942:	4b7c      	ldr	r3, [pc, #496]	@ (800bb34 <SendTxData+0x2bc>)
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b948:	1c59      	adds	r1, r3, #1
 800b94a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b94c:	4413      	add	r3, r2
 800b94e:	4a7c      	ldr	r2, [pc, #496]	@ (800bb40 <SendTxData+0x2c8>)
 800b950:	7812      	ldrb	r2, [r2, #0]
 800b952:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800b954:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b956:	0a1b      	lsrs	r3, r3, #8
 800b958:	b298      	uxth	r0, r3
 800b95a:	4b76      	ldr	r3, [pc, #472]	@ (800bb34 <SendTxData+0x2bc>)
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b960:	1c59      	adds	r1, r3, #1
 800b962:	6339      	str	r1, [r7, #48]	@ 0x30
 800b964:	4413      	add	r3, r2
 800b966:	b2c2      	uxtb	r2, r0
 800b968:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800b96a:	4b72      	ldr	r3, [pc, #456]	@ (800bb34 <SendTxData+0x2bc>)
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	1c59      	adds	r1, r3, #1
 800b972:	6339      	str	r1, [r7, #48]	@ 0x30
 800b974:	4413      	add	r3, r2
 800b976:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b978:	b2d2      	uxtb	r2, r2
 800b97a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((temperature >> 8) & 0xFF);
 800b97c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800b980:	121b      	asrs	r3, r3, #8
 800b982:	b218      	sxth	r0, r3
 800b984:	4b6b      	ldr	r3, [pc, #428]	@ (800bb34 <SendTxData+0x2bc>)
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98a:	1c59      	adds	r1, r3, #1
 800b98c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b98e:	4413      	add	r3, r2
 800b990:	b2c2      	uxtb	r2, r0
 800b992:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800b994:	4b67      	ldr	r3, [pc, #412]	@ (800bb34 <SendTxData+0x2bc>)
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99a:	1c59      	adds	r1, r3, #1
 800b99c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b99e:	4413      	add	r3, r2
 800b9a0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800b9a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b9a8:	0a1b      	lsrs	r3, r3, #8
 800b9aa:	b298      	uxth	r0, r3
 800b9ac:	4b61      	ldr	r3, [pc, #388]	@ (800bb34 <SendTxData+0x2bc>)
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b2:	1c59      	adds	r1, r3, #1
 800b9b4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9b6:	4413      	add	r3, r2
 800b9b8:	b2c2      	uxtb	r2, r0
 800b9ba:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800b9bc:	4b5d      	ldr	r3, [pc, #372]	@ (800bb34 <SendTxData+0x2bc>)
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c2:	1c59      	adds	r1, r3, #1
 800b9c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9c6:	4413      	add	r3, r2
 800b9c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b9ca:	b2d2      	uxtb	r2, r2
 800b9cc:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800b9ce:	4b5d      	ldr	r3, [pc, #372]	@ (800bb44 <SendTxData+0x2cc>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b08      	cmp	r3, #8
 800b9d4:	d007      	beq.n	800b9e6 <SendTxData+0x16e>
 800b9d6:	4b5b      	ldr	r3, [pc, #364]	@ (800bb44 <SendTxData+0x2cc>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d003      	beq.n	800b9e6 <SendTxData+0x16e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800b9de:	4b59      	ldr	r3, [pc, #356]	@ (800bb44 <SendTxData+0x2cc>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d120      	bne.n	800ba28 <SendTxData+0x1b0>
  {
    AppData.Buffer[i++] = 0;
 800b9e6:	4b53      	ldr	r3, [pc, #332]	@ (800bb34 <SendTxData+0x2bc>)
 800b9e8:	685a      	ldr	r2, [r3, #4]
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ec:	1c59      	adds	r1, r3, #1
 800b9ee:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9f0:	4413      	add	r3, r2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b9f6:	4b4f      	ldr	r3, [pc, #316]	@ (800bb34 <SendTxData+0x2bc>)
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fc:	1c59      	adds	r1, r3, #1
 800b9fe:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba00:	4413      	add	r3, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ba06:	4b4b      	ldr	r3, [pc, #300]	@ (800bb34 <SendTxData+0x2bc>)
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0c:	1c59      	adds	r1, r3, #1
 800ba0e:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba10:	4413      	add	r3, r2
 800ba12:	2200      	movs	r2, #0
 800ba14:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ba16:	4b47      	ldr	r3, [pc, #284]	@ (800bb34 <SendTxData+0x2bc>)
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1c:	1c59      	adds	r1, r3, #1
 800ba1e:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba20:	4413      	add	r3, r2
 800ba22:	2200      	movs	r2, #0
 800ba24:	701a      	strb	r2, [r3, #0]
 800ba26:	e05b      	b.n	800bae0 <SendTxData+0x268>
  }
  else
  {
    latitude = sensor_data.latitude;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800ba30:	4b40      	ldr	r3, [pc, #256]	@ (800bb34 <SendTxData+0x2bc>)
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba36:	1c59      	adds	r1, r3, #1
 800ba38:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba3a:	18d4      	adds	r4, r2, r3
 800ba3c:	f7f6 fe22 	bl	8002684 <GetBatteryLevel>
 800ba40:	4603      	mov	r3, r0
 800ba42:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800ba44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba46:	1418      	asrs	r0, r3, #16
 800ba48:	4b3a      	ldr	r3, [pc, #232]	@ (800bb34 <SendTxData+0x2bc>)
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4e:	1c59      	adds	r1, r3, #1
 800ba50:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba52:	4413      	add	r3, r2
 800ba54:	b2c2      	uxtb	r2, r0
 800ba56:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800ba58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5a:	1218      	asrs	r0, r3, #8
 800ba5c:	4b35      	ldr	r3, [pc, #212]	@ (800bb34 <SendTxData+0x2bc>)
 800ba5e:	685a      	ldr	r2, [r3, #4]
 800ba60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba62:	1c59      	adds	r1, r3, #1
 800ba64:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba66:	4413      	add	r3, r2
 800ba68:	b2c2      	uxtb	r2, r0
 800ba6a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800ba6c:	4b31      	ldr	r3, [pc, #196]	@ (800bb34 <SendTxData+0x2bc>)
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba72:	1c59      	adds	r1, r3, #1
 800ba74:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba76:	4413      	add	r3, r2
 800ba78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba7a:	b2d2      	uxtb	r2, r2
 800ba7c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800ba7e:	6a3b      	ldr	r3, [r7, #32]
 800ba80:	1418      	asrs	r0, r3, #16
 800ba82:	4b2c      	ldr	r3, [pc, #176]	@ (800bb34 <SendTxData+0x2bc>)
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba88:	1c59      	adds	r1, r3, #1
 800ba8a:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba8c:	4413      	add	r3, r2
 800ba8e:	b2c2      	uxtb	r2, r0
 800ba90:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	1218      	asrs	r0, r3, #8
 800ba96:	4b27      	ldr	r3, [pc, #156]	@ (800bb34 <SendTxData+0x2bc>)
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9c:	1c59      	adds	r1, r3, #1
 800ba9e:	6339      	str	r1, [r7, #48]	@ 0x30
 800baa0:	4413      	add	r3, r2
 800baa2:	b2c2      	uxtb	r2, r0
 800baa4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800baa6:	4b23      	ldr	r3, [pc, #140]	@ (800bb34 <SendTxData+0x2bc>)
 800baa8:	685a      	ldr	r2, [r3, #4]
 800baaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baac:	1c59      	adds	r1, r3, #1
 800baae:	6339      	str	r1, [r7, #48]	@ 0x30
 800bab0:	4413      	add	r3, r2
 800bab2:	6a3a      	ldr	r2, [r7, #32]
 800bab4:	b2d2      	uxtb	r2, r2
 800bab6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800bab8:	8bfb      	ldrh	r3, [r7, #30]
 800baba:	0a1b      	lsrs	r3, r3, #8
 800babc:	b298      	uxth	r0, r3
 800babe:	4b1d      	ldr	r3, [pc, #116]	@ (800bb34 <SendTxData+0x2bc>)
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac4:	1c59      	adds	r1, r3, #1
 800bac6:	6339      	str	r1, [r7, #48]	@ 0x30
 800bac8:	4413      	add	r3, r2
 800baca:	b2c2      	uxtb	r2, r0
 800bacc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800bace:	4b19      	ldr	r3, [pc, #100]	@ (800bb34 <SendTxData+0x2bc>)
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad4:	1c59      	adds	r1, r3, #1
 800bad6:	6339      	str	r1, [r7, #48]	@ 0x30
 800bad8:	4413      	add	r3, r2
 800bada:	8bfa      	ldrh	r2, [r7, #30]
 800badc:	b2d2      	uxtb	r2, r2
 800bade:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800bae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	4b13      	ldr	r3, [pc, #76]	@ (800bb34 <SendTxData+0x2bc>)
 800bae6:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800bae8:	4b17      	ldr	r3, [pc, #92]	@ (800bb48 <SendTxData+0x2d0>)
 800baea:	7a5b      	ldrb	r3, [r3, #9]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d007      	beq.n	800bb00 <SendTxData+0x288>
 800baf0:	f002 fa72 	bl	800dfd8 <LmHandlerJoinStatus>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d102      	bne.n	800bb00 <SendTxData+0x288>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800bafa:	4813      	ldr	r0, [pc, #76]	@ (800bb48 <SendTxData+0x2d0>)
 800bafc:	f011 f954 	bl	801cda8 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800bb00:	4b10      	ldr	r3, [pc, #64]	@ (800bb44 <SendTxData+0x2cc>)
 800bb02:	78db      	ldrb	r3, [r3, #3]
 800bb04:	2200      	movs	r2, #0
 800bb06:	4619      	mov	r1, r3
 800bb08:	480a      	ldr	r0, [pc, #40]	@ (800bb34 <SendTxData+0x2bc>)
 800bb0a:	f002 fa81 	bl	800e010 <LmHandlerSend>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800bb14:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d119      	bne.n	800bb50 <SendTxData+0x2d8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800bb1c:	4b0b      	ldr	r3, [pc, #44]	@ (800bb4c <SendTxData+0x2d4>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	2100      	movs	r1, #0
 800bb22:	2001      	movs	r0, #1
 800bb24:	f011 fb4a 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
 800bb28:	e029      	b.n	800bb7e <SendTxData+0x306>
 800bb2a:	bf00      	nop
 800bb2c:	0801d9d0 	.word	0x0801d9d0
 800bb30:	0801d9dc 	.word	0x0801d9dc
 800bb34:	20000090 	.word	0x20000090
 800bb38:	41200000 	.word	0x41200000
 800bb3c:	42c80000 	.word	0x42c80000
 800bb40:	200004ae 	.word	0x200004ae
 800bb44:	20000074 	.word	0x20000074
 800bb48:	200004e0 	.word	0x200004e0
 800bb4c:	0801d9e8 	.word	0x0801d9e8
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800bb50:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb54:	f113 0f06 	cmn.w	r3, #6
 800bb58:	d111      	bne.n	800bb7e <SendTxData+0x306>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800bb5a:	f002 f991 	bl	800de80 <LmHandlerGetDutyCycleWaitTime>
 800bb5e:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 800bb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00b      	beq.n	800bb7e <SendTxData+0x306>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800bb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb68:	4a11      	ldr	r2, [pc, #68]	@ (800bbb0 <SendTxData+0x338>)
 800bb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6e:	099b      	lsrs	r3, r3, #6
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	4b10      	ldr	r3, [pc, #64]	@ (800bbb4 <SendTxData+0x33c>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	2100      	movs	r1, #0
 800bb78:	2001      	movs	r0, #1
 800bb7a:	f011 fb1f 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800bb7e:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb8 <SendTxData+0x340>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10f      	bne.n	800bba6 <SendTxData+0x32e>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800bb86:	480d      	ldr	r0, [pc, #52]	@ (800bbbc <SendTxData+0x344>)
 800bb88:	f011 f90e 	bl	801cda8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800bb8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc0 <SendTxData+0x348>)
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb92:	4293      	cmp	r3, r2
 800bb94:	bf38      	it	cc
 800bb96:	4613      	movcc	r3, r2
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4808      	ldr	r0, [pc, #32]	@ (800bbbc <SendTxData+0x344>)
 800bb9c:	f011 f974 	bl	801ce88 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800bba0:	4806      	ldr	r0, [pc, #24]	@ (800bbbc <SendTxData+0x344>)
 800bba2:	f011 f893 	bl	801cccc <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800bba6:	bf00      	nop
 800bba8:	373c      	adds	r7, #60	@ 0x3c
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd90      	pop	{r4, r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	10624dd3 	.word	0x10624dd3
 800bbb4:	0801d9f8 	.word	0x0801d9f8
 800bbb8:	20000388 	.word	0x20000388
 800bbbc:	2000038c 	.word	0x2000038c
 800bbc0:	2000008c 	.word	0x2000008c

0800bbc4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bbcc:	2100      	movs	r1, #0
 800bbce:	2002      	movs	r0, #2
 800bbd0:	f010 ffc6 	bl	801cb60 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800bbd4:	4803      	ldr	r0, [pc, #12]	@ (800bbe4 <OnTxTimerEvent+0x20>)
 800bbd6:	f011 f879 	bl	801cccc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	2000038c 	.word	0x2000038c

0800bbe8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bc80      	pop	{r7}
 800bbf8:	4770      	bx	lr

0800bbfa <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b083      	sub	sp, #12
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800bc02:	bf00      	nop
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bc80      	pop	{r7}
 800bc0a:	4770      	bx	lr

0800bc0c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bc80      	pop	{r7}
 800bc1c:	4770      	bx	lr
	...

0800bc20 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af04      	add	r7, sp, #16
 800bc26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d041      	beq.n	800bcb2 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d03d      	beq.n	800bcb2 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800bc36:	4821      	ldr	r0, [pc, #132]	@ (800bcbc <OnTxData+0x9c>)
 800bc38:	f011 f848 	bl	801cccc <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800bc3c:	4b20      	ldr	r3, [pc, #128]	@ (800bcc0 <OnTxData+0xa0>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	2100      	movs	r1, #0
 800bc42:	2002      	movs	r0, #2
 800bc44:	f011 faba 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	7c12      	ldrb	r2, [r2, #16]
 800bc50:	4611      	mov	r1, r2
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800bc58:	4610      	mov	r0, r2
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800bc60:	9203      	str	r2, [sp, #12]
 800bc62:	9002      	str	r0, [sp, #8]
 800bc64:	9101      	str	r1, [sp, #4]
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	4b16      	ldr	r3, [pc, #88]	@ (800bcc4 <OnTxData+0xa4>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	2003      	movs	r0, #3
 800bc70:	f011 faa4 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800bc74:	4b14      	ldr	r3, [pc, #80]	@ (800bcc8 <OnTxData+0xa8>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	2100      	movs	r1, #0
 800bc7a:	2003      	movs	r0, #3
 800bc7c:	f011 fa9e 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7a1b      	ldrb	r3, [r3, #8]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d10e      	bne.n	800bca6 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7a5b      	ldrb	r3, [r3, #9]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <OnTxData+0x74>
 800bc90:	4b0e      	ldr	r3, [pc, #56]	@ (800bccc <OnTxData+0xac>)
 800bc92:	e000      	b.n	800bc96 <OnTxData+0x76>
 800bc94:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd0 <OnTxData+0xb0>)
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd4 <OnTxData+0xb4>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	2003      	movs	r0, #3
 800bca0:	f011 fa8c 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800bca4:	e005      	b.n	800bcb2 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800bca6:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd8 <OnTxData+0xb8>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2100      	movs	r1, #0
 800bcac:	2003      	movs	r0, #3
 800bcae:	f011 fa85 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	200004b0 	.word	0x200004b0
 800bcc0:	0801da18 	.word	0x0801da18
 800bcc4:	0801da4c 	.word	0x0801da4c
 800bcc8:	0801da80 	.word	0x0801da80
 800bccc:	0801da90 	.word	0x0801da90
 800bcd0:	0801da94 	.word	0x0801da94
 800bcd4:	0801da9c 	.word	0x0801da9c
 800bcd8:	0801dab0 	.word	0x0801dab0

0800bcdc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d039      	beq.n	800bd5e <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d11e      	bne.n	800bd32 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	2004      	movs	r0, #4
 800bcf8:	f010 ff32 	bl	801cb60 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800bcfc:	481a      	ldr	r0, [pc, #104]	@ (800bd68 <OnJoinRequest+0x8c>)
 800bcfe:	f011 f853 	bl	801cda8 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800bd02:	4b1a      	ldr	r3, [pc, #104]	@ (800bd6c <OnJoinRequest+0x90>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	2100      	movs	r1, #0
 800bd08:	2002      	movs	r0, #2
 800bd0a:	f011 fa57 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	79db      	ldrb	r3, [r3, #7]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d106      	bne.n	800bd24 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800bd16:	4b16      	ldr	r3, [pc, #88]	@ (800bd70 <OnJoinRequest+0x94>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	2002      	movs	r0, #2
 800bd1e:	f011 fa4d 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800bd22:	e01c      	b.n	800bd5e <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800bd24:	4b13      	ldr	r3, [pc, #76]	@ (800bd74 <OnJoinRequest+0x98>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	2100      	movs	r1, #0
 800bd2a:	2002      	movs	r0, #2
 800bd2c:	f011 fa46 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800bd30:	e015      	b.n	800bd5e <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800bd32:	4b11      	ldr	r3, [pc, #68]	@ (800bd78 <OnJoinRequest+0x9c>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	2100      	movs	r1, #0
 800bd38:	2002      	movs	r0, #2
 800bd3a:	f011 fa3f 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	79db      	ldrb	r3, [r3, #7]
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d10b      	bne.n	800bd5e <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800bd46:	4b0d      	ldr	r3, [pc, #52]	@ (800bd7c <OnJoinRequest+0xa0>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	2002      	movs	r0, #2
 800bd4e:	f011 fa35 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800bd52:	4b0b      	ldr	r3, [pc, #44]	@ (800bd80 <OnJoinRequest+0xa4>)
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2101      	movs	r1, #1
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f002 f89b 	bl	800de94 <LmHandlerJoin>
}
 800bd5e:	bf00      	nop
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	200004e0 	.word	0x200004e0
 800bd6c:	0801dac0 	.word	0x0801dac0
 800bd70:	0801dad8 	.word	0x0801dad8
 800bd74:	0801daf8 	.word	0x0801daf8
 800bd78:	0801db18 	.word	0x0801db18
 800bd7c:	0801db34 	.word	0x0801db34
 800bd80:	20000024 	.word	0x20000024

0800bd84 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800bd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd86:	b093      	sub	sp, #76	@ 0x4c
 800bd88:	af0c      	add	r7, sp, #48	@ 0x30
 800bd8a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d056      	beq.n	800be40 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	785b      	ldrb	r3, [r3, #1]
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d008      	beq.n	800bdac <OnBeaconStatusChange+0x28>
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	d049      	beq.n	800be32 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800bd9e:	4b2a      	ldr	r3, [pc, #168]	@ (800be48 <OnBeaconStatusChange+0xc4>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	2100      	movs	r1, #0
 800bda4:	2002      	movs	r0, #2
 800bda6:	f011 fa09 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800bdaa:	e049      	b.n	800be40 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	7c1b      	ldrb	r3, [r3, #16]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bdb8:	461c      	mov	r4, r3
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800bdc0:	461d      	mov	r5, r3
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	6852      	ldr	r2, [r2, #4]
 800bdca:	6979      	ldr	r1, [r7, #20]
 800bdcc:	7d89      	ldrb	r1, [r1, #22]
 800bdce:	460e      	mov	r6, r1
 800bdd0:	6979      	ldr	r1, [r7, #20]
 800bdd2:	7dc9      	ldrb	r1, [r1, #23]
 800bdd4:	6139      	str	r1, [r7, #16]
 800bdd6:	6979      	ldr	r1, [r7, #20]
 800bdd8:	7e09      	ldrb	r1, [r1, #24]
 800bdda:	60f9      	str	r1, [r7, #12]
 800bddc:	6979      	ldr	r1, [r7, #20]
 800bdde:	7e49      	ldrb	r1, [r1, #25]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	6979      	ldr	r1, [r7, #20]
 800bde4:	7e89      	ldrb	r1, [r1, #26]
 800bde6:	6079      	str	r1, [r7, #4]
 800bde8:	6979      	ldr	r1, [r7, #20]
 800bdea:	7ec9      	ldrb	r1, [r1, #27]
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	6979      	ldr	r1, [r7, #20]
 800bdf0:	7f09      	ldrb	r1, [r1, #28]
 800bdf2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bdf4:	f8d7 c000 	ldr.w	ip, [r7]
 800bdf8:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800bdfc:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800be00:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800be04:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800be08:	f8cd c020 	str.w	ip, [sp, #32]
 800be0c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800be10:	f8cd c01c 	str.w	ip, [sp, #28]
 800be14:	6939      	ldr	r1, [r7, #16]
 800be16:	9106      	str	r1, [sp, #24]
 800be18:	9605      	str	r6, [sp, #20]
 800be1a:	9204      	str	r2, [sp, #16]
 800be1c:	9303      	str	r3, [sp, #12]
 800be1e:	9502      	str	r5, [sp, #8]
 800be20:	9401      	str	r4, [sp, #4]
 800be22:	9000      	str	r0, [sp, #0]
 800be24:	4b09      	ldr	r3, [pc, #36]	@ (800be4c <OnBeaconStatusChange+0xc8>)
 800be26:	2200      	movs	r2, #0
 800be28:	2100      	movs	r1, #0
 800be2a:	2002      	movs	r0, #2
 800be2c:	f011 f9c6 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800be30:	e006      	b.n	800be40 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800be32:	4b07      	ldr	r3, [pc, #28]	@ (800be50 <OnBeaconStatusChange+0xcc>)
 800be34:	2200      	movs	r2, #0
 800be36:	2100      	movs	r1, #0
 800be38:	2002      	movs	r0, #2
 800be3a:	f011 f9bf 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800be3e:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800be40:	bf00      	nop
 800be42:	371c      	adds	r7, #28
 800be44:	46bd      	mov	sp, r7
 800be46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be48:	0801db58 	.word	0x0801db58
 800be4c:	0801db70 	.word	0x0801db70
 800be50:	0801dbe4 	.word	0x0801dbe4

0800be54 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800be54:	b480      	push	{r7}
 800be56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800be58:	bf00      	nop
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bc80      	pop	{r7}
 800be5e:	4770      	bx	lr

0800be60 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af02      	add	r7, sp, #8
 800be66:	4603      	mov	r3, r0
 800be68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	4a06      	ldr	r2, [pc, #24]	@ (800be88 <OnClassChange+0x28>)
 800be6e:	5cd3      	ldrb	r3, [r2, r3]
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	4b06      	ldr	r3, [pc, #24]	@ (800be8c <OnClassChange+0x2c>)
 800be74:	2200      	movs	r2, #0
 800be76:	2100      	movs	r1, #0
 800be78:	2002      	movs	r0, #2
 800be7a:	f011 f99f 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	0801dc20 	.word	0x0801dc20
 800be8c:	0801dc04 	.word	0x0801dc04

0800be90 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800be94:	2100      	movs	r1, #0
 800be96:	2001      	movs	r0, #1
 800be98:	f010 fe62 	bl	801cb60 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800be9c:	bf00      	nop
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800bea8:	4a0d      	ldr	r2, [pc, #52]	@ (800bee0 <OnTxPeriodicityChanged+0x40>)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800beae:	4b0c      	ldr	r3, [pc, #48]	@ (800bee0 <OnTxPeriodicityChanged+0x40>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d103      	bne.n	800bebe <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800beb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bee0 <OnTxPeriodicityChanged+0x40>)
 800beb8:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bebc:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800bebe:	4809      	ldr	r0, [pc, #36]	@ (800bee4 <OnTxPeriodicityChanged+0x44>)
 800bec0:	f010 ff72 	bl	801cda8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800bec4:	4b06      	ldr	r3, [pc, #24]	@ (800bee0 <OnTxPeriodicityChanged+0x40>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4619      	mov	r1, r3
 800beca:	4806      	ldr	r0, [pc, #24]	@ (800bee4 <OnTxPeriodicityChanged+0x44>)
 800becc:	f010 ffdc 	bl	801ce88 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800bed0:	4804      	ldr	r0, [pc, #16]	@ (800bee4 <OnTxPeriodicityChanged+0x44>)
 800bed2:	f010 fefb 	bl	801cccc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800bed6:	bf00      	nop
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	2000008c 	.word	0x2000008c
 800bee4:	2000038c 	.word	0x2000038c

0800bee8 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800bef2:	4a04      	ldr	r2, [pc, #16]	@ (800bf04 <OnTxFrameCtrlChanged+0x1c>)
 800bef4:	79fb      	ldrb	r3, [r7, #7]
 800bef6:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	bc80      	pop	{r7}
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	20000074 	.word	0x20000074

0800bf08 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800bf12:	4a04      	ldr	r2, [pc, #16]	@ (800bf24 <OnPingSlotPeriodicityChanged+0x1c>)
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800bf18:	bf00      	nop
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bc80      	pop	{r7}
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	20000074 	.word	0x20000074

0800bf28 <OnSystemReset>:

static void OnSystemReset(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800bf2c:	f002 fdab 	bl	800ea86 <LmHandlerHalt>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <OnSystemReset+0x1c>
 800bf36:	f002 f84f 	bl	800dfd8 <LmHandlerJoinStatus>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d101      	bne.n	800bf44 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800bf40:	f7ff fada 	bl	800b4f8 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800bf44:	bf00      	nop
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <StopJoin>:

static void StopJoin(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800bf4c:	4817      	ldr	r0, [pc, #92]	@ (800bfac <StopJoin+0x64>)
 800bf4e:	f010 ff2b 	bl	801cda8 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800bf52:	f002 fd8b 	bl	800ea6c <LmHandlerStop>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d006      	beq.n	800bf6a <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800bf5c:	4b14      	ldr	r3, [pc, #80]	@ (800bfb0 <StopJoin+0x68>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2100      	movs	r1, #0
 800bf62:	2002      	movs	r0, #2
 800bf64:	f011 f92a 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
 800bf68:	e01a      	b.n	800bfa0 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800bf6a:	4b12      	ldr	r3, [pc, #72]	@ (800bfb4 <StopJoin+0x6c>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	2002      	movs	r0, #2
 800bf72:	f011 f923 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800bf76:	4b10      	ldr	r3, [pc, #64]	@ (800bfb8 <StopJoin+0x70>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800bf7c:	4b0f      	ldr	r3, [pc, #60]	@ (800bfbc <StopJoin+0x74>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	2100      	movs	r1, #0
 800bf82:	2002      	movs	r0, #2
 800bf84:	f011 f91a 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800bf88:	480d      	ldr	r0, [pc, #52]	@ (800bfc0 <StopJoin+0x78>)
 800bf8a:	f001 fe1f 	bl	800dbcc <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800bf8e:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb8 <StopJoin+0x70>)
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2101      	movs	r1, #1
 800bf94:	4618      	mov	r0, r3
 800bf96:	f001 ff7d 	bl	800de94 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800bf9a:	4804      	ldr	r0, [pc, #16]	@ (800bfac <StopJoin+0x64>)
 800bf9c:	f010 fe96 	bl	801cccc <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800bfa0:	4808      	ldr	r0, [pc, #32]	@ (800bfc4 <StopJoin+0x7c>)
 800bfa2:	f010 fe93 	bl	801cccc <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800bfa6:	bf00      	nop
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	2000038c 	.word	0x2000038c
 800bfb0:	0801dc24 	.word	0x0801dc24
 800bfb4:	0801dc44 	.word	0x0801dc44
 800bfb8:	20000024 	.word	0x20000024
 800bfbc:	0801dc58 	.word	0x0801dc58
 800bfc0:	20000074 	.word	0x20000074
 800bfc4:	200003a4 	.word	0x200003a4

0800bfc8 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800bfd0:	4b05      	ldr	r3, [pc, #20]	@ (800bfe8 <OnStopJoinTimerEvent+0x20>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d103      	bne.n	800bfe0 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800bfd8:	2100      	movs	r1, #0
 800bfda:	2008      	movs	r0, #8
 800bfdc:	f010 fdc0 	bl	801cb60 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20000024 	.word	0x20000024

0800bfec <StoreContext>:

static void StoreContext(void)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800bff2:	23ff      	movs	r3, #255	@ 0xff
 800bff4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800bff6:	f002 fd7b 	bl	800eaf0 <LmHandlerNvmDataStore>
 800bffa:	4603      	mov	r3, r0
 800bffc:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800bffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c002:	f113 0f08 	cmn.w	r3, #8
 800c006:	d106      	bne.n	800c016 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800c008:	4b0a      	ldr	r3, [pc, #40]	@ (800c034 <StoreContext+0x48>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	2100      	movs	r1, #0
 800c00e:	2002      	movs	r0, #2
 800c010:	f011 f8d4 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c014:	e00a      	b.n	800c02c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800c016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01e:	d105      	bne.n	800c02c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800c020:	4b05      	ldr	r3, [pc, #20]	@ (800c038 <StoreContext+0x4c>)
 800c022:	2200      	movs	r2, #0
 800c024:	2100      	movs	r1, #0
 800c026:	2002      	movs	r0, #2
 800c028:	f011 f8c8 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	0801dc78 	.word	0x0801dc78
 800c038:	0801dc90 	.word	0x0801dc90

0800c03c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	4603      	mov	r3, r0
 800c044:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800c046:	79fb      	ldrb	r3, [r7, #7]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d106      	bne.n	800c05a <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800c04c:	4b08      	ldr	r3, [pc, #32]	@ (800c070 <OnNvmDataChange+0x34>)
 800c04e:	2200      	movs	r2, #0
 800c050:	2100      	movs	r1, #0
 800c052:	2002      	movs	r0, #2
 800c054:	f011 f8b2 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c058:	e005      	b.n	800c066 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800c05a:	4b06      	ldr	r3, [pc, #24]	@ (800c074 <OnNvmDataChange+0x38>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	2100      	movs	r1, #0
 800c060:	2002      	movs	r0, #2
 800c062:	f011 f8ab 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800c066:	bf00      	nop
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	0801dca8 	.word	0x0801dca8
 800c074:	0801dcbc 	.word	0x0801dcbc

0800c078 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800c082:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c086:	4807      	ldr	r0, [pc, #28]	@ (800c0a4 <OnStoreContextRequest+0x2c>)
 800c088:	f7f5 fd08 	bl	8001a9c <FLASH_IF_Erase>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d104      	bne.n	800c09c <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	4803      	ldr	r0, [pc, #12]	@ (800c0a4 <OnStoreContextRequest+0x2c>)
 800c098:	f7f5 fcb0 	bl	80019fc <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	0803f000 	.word	0x0803f000

0800c0a8 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	4903      	ldr	r1, [pc, #12]	@ (800c0c4 <OnRestoreContextRequest+0x1c>)
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7f5 fcc8 	bl	8001a4c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	0803f000 	.word	0x0803f000

0800c0c8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800c0cc:	4b15      	ldr	r3, [pc, #84]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c0d2:	4b14      	ldr	r3, [pc, #80]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c0d8:	4b12      	ldr	r3, [pc, #72]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c0de:	4b11      	ldr	r3, [pc, #68]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c0e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	f043 0320 	orr.w	r3, r3, #32
 800c0ec:	4a0d      	ldr	r2, [pc, #52]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c0ee:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10d      	bne.n	800c114 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c0f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c128 <LoraInfo_Init+0x60>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	2000      	movs	r0, #0
 800c100:	f011 f85c 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c104:	bf00      	nop
 800c106:	f011 f847 	bl	801d198 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d1fa      	bne.n	800c106 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c110:	bf00      	nop
 800c112:	e7fd      	b.n	800c110 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c114:	4b03      	ldr	r3, [pc, #12]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c116:	2200      	movs	r2, #0
 800c118:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800c11a:	4b02      	ldr	r3, [pc, #8]	@ (800c124 <LoraInfo_Init+0x5c>)
 800c11c:	2201      	movs	r2, #1
 800c11e:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c120:	bf00      	nop
 800c122:	bd80      	pop	{r7, pc}
 800c124:	200004f8 	.word	0x200004f8
 800c128:	0801dcd0 	.word	0x0801dcd0

0800c12c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c12c:	b480      	push	{r7}
 800c12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c130:	4b02      	ldr	r3, [pc, #8]	@ (800c13c <LoraInfo_GetPtr+0x10>)
}
 800c132:	4618      	mov	r0, r3
 800c134:	46bd      	mov	sp, r7
 800c136:	bc80      	pop	{r7}
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	200004f8 	.word	0x200004f8

0800c140 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c144:	f7f7 f94f 	bl	80033e6 <BSP_RADIO_Init>
 800c148:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b082      	sub	sp, #8
 800c152:	af00      	add	r7, sp, #0
 800c154:	4603      	mov	r3, r0
 800c156:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7f7 f974 	bl	8003448 <BSP_RADIO_ConfigRFSwitch>
 800c160:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c162:	4618      	mov	r0, r3
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c16e:	f7f7 f9b9 	bl	80034e4 <BSP_RADIO_GetTxConfig>
 800c172:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c174:	4618      	mov	r0, r3
 800c176:	bd80      	pop	{r7, pc}

0800c178 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c17c:	f7f7 f9b9 	bl	80034f2 <BSP_RADIO_IsTCXO>
 800c180:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c182:	4618      	mov	r0, r3
 800c184:	bd80      	pop	{r7, pc}

0800c186 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c18a:	f7f7 f9b9 	bl	8003500 <BSP_RADIO_IsDCDC>
 800c18e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c190:	4618      	mov	r0, r3
 800c192:	bd80      	pop	{r7, pc}

0800c194 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	4603      	mov	r3, r0
 800c19c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c19e:	79fb      	ldrb	r3, [r7, #7]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7f7 f9b4 	bl	800350e <BSP_RADIO_GetRFOMaxPowerConfig>
 800c1a6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	33f1      	adds	r3, #241	@ 0xf1
 800c1bc:	2210      	movs	r2, #16
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f00c fcdf 	bl	8018b84 <memset1>
    ctx->M_n = 0;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	22f0      	movs	r2, #240	@ 0xf0
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f00c fcd5 	bl	8018b84 <memset1>
}
 800c1da:	bf00      	nop
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	2110      	movs	r1, #16
 800c1f2:	6838      	ldr	r0, [r7, #0]
 800c1f4:	f000 fe5c 	bl	800ceb0 <lorawan_aes_set_key>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08c      	sub	sp, #48	@ 0x30
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 80a1 	beq.w	800c35a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c21e:	f1c3 0310 	rsb	r3, r3, #16
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	4293      	cmp	r3, r2
 800c226:	bf28      	it	cs
 800c228:	4613      	movcs	r3, r2
 800c22a:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c238:	4413      	add	r3, r2
 800c23a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c23c:	b292      	uxth	r2, r2
 800c23e:	68b9      	ldr	r1, [r7, #8]
 800c240:	4618      	mov	r0, r3
 800c242:	f00c fc64 	bl	8018b0e <memcpy1>
        ctx->M_n += mlen;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800c24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24e:	441a      	add	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c25c:	2b0f      	cmp	r3, #15
 800c25e:	f240 808d 	bls.w	800c37c <AES_CMAC_Update+0x17c>
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c266:	429a      	cmp	r2, r3
 800c268:	f000 8088 	beq.w	800c37c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c26c:	2300      	movs	r3, #0
 800c26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c270:	e015      	b.n	800c29e <AES_CMAC_Update+0x9e>
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c276:	4413      	add	r3, r2
 800c278:	33f1      	adds	r3, #241	@ 0xf1
 800c27a:	781a      	ldrb	r2, [r3, #0]
 800c27c:	68f9      	ldr	r1, [r7, #12]
 800c27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c280:	440b      	add	r3, r1
 800c282:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	4053      	eors	r3, r2
 800c28a:	b2d9      	uxtb	r1, r3
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c290:	4413      	add	r3, r2
 800c292:	33f1      	adds	r3, #241	@ 0xf1
 800c294:	460a      	mov	r2, r1
 800c296:	701a      	strb	r2, [r3, #0]
 800c298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29a:	3301      	adds	r3, #1
 800c29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a0:	2b0f      	cmp	r3, #15
 800c2a2:	dde6      	ble.n	800c272 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c2aa:	f107 0314 	add.w	r3, r7, #20
 800c2ae:	2210      	movs	r2, #16
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f00c fc2c 	bl	8018b0e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	f107 0114 	add.w	r1, r7, #20
 800c2bc:	f107 0314 	add.w	r3, r7, #20
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 fed3 	bl	800d06c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	33f1      	adds	r3, #241	@ 0xf1
 800c2ca:	f107 0114 	add.w	r1, r7, #20
 800c2ce:	2210      	movs	r2, #16
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f00c fc1c 	bl	8018b0e <memcpy1>

        data += mlen;
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2da:	4413      	add	r3, r2
 800c2dc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c2e6:	e038      	b.n	800c35a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2ec:	e013      	b.n	800c316 <AES_CMAC_Update+0x116>
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f2:	4413      	add	r3, r2
 800c2f4:	33f1      	adds	r3, #241	@ 0xf1
 800c2f6:	781a      	ldrb	r2, [r3, #0]
 800c2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fa:	68b9      	ldr	r1, [r7, #8]
 800c2fc:	440b      	add	r3, r1
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	4053      	eors	r3, r2
 800c302:	b2d9      	uxtb	r1, r3
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c308:	4413      	add	r3, r2
 800c30a:	33f1      	adds	r3, #241	@ 0xf1
 800c30c:	460a      	mov	r2, r1
 800c30e:	701a      	strb	r2, [r3, #0]
 800c310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c312:	3301      	adds	r3, #1
 800c314:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c318:	2b0f      	cmp	r3, #15
 800c31a:	dde8      	ble.n	800c2ee <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c322:	f107 0314 	add.w	r3, r7, #20
 800c326:	2210      	movs	r2, #16
 800c328:	4618      	mov	r0, r3
 800c32a:	f00c fbf0 	bl	8018b0e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	f107 0114 	add.w	r1, r7, #20
 800c334:	f107 0314 	add.w	r3, r7, #20
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 fe97 	bl	800d06c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	33f1      	adds	r3, #241	@ 0xf1
 800c342:	f107 0114 	add.w	r1, r7, #20
 800c346:	2210      	movs	r2, #16
 800c348:	4618      	mov	r0, r3
 800c34a:	f00c fbe0 	bl	8018b0e <memcpy1>

        data += 16;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	3310      	adds	r3, #16
 800c352:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3b10      	subs	r3, #16
 800c358:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b10      	cmp	r3, #16
 800c35e:	d8c3      	bhi.n	800c2e8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	b292      	uxth	r2, r2
 800c36a:	68b9      	ldr	r1, [r7, #8]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f00c fbce 	bl	8018b0e <memcpy1>
    ctx->M_n = len;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c37a:	e000      	b.n	800c37e <AES_CMAC_Update+0x17e>
            return;
 800c37c:	bf00      	nop
}
 800c37e:	3730      	adds	r7, #48	@ 0x30
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b092      	sub	sp, #72	@ 0x48
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c38e:	f107 031c 	add.w	r3, r7, #28
 800c392:	2210      	movs	r2, #16
 800c394:	2100      	movs	r1, #0
 800c396:	4618      	mov	r0, r3
 800c398:	f00c fbf4 	bl	8018b84 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	f107 011c 	add.w	r1, r7, #28
 800c3a2:	f107 031c 	add.w	r3, r7, #28
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 fe60 	bl	800d06c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c3ac:	7f3b      	ldrb	r3, [r7, #28]
 800c3ae:	b25b      	sxtb	r3, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	da30      	bge.n	800c416 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3b8:	e01b      	b.n	800c3f2 <AES_CMAC_Final+0x6e>
 800c3ba:	f107 021c 	add.w	r2, r7, #28
 800c3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3c0:	4413      	add	r3, r2
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	005b      	lsls	r3, r3, #1
 800c3c6:	b25a      	sxtb	r2, r3
 800c3c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	3348      	adds	r3, #72	@ 0x48
 800c3ce:	443b      	add	r3, r7
 800c3d0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c3d4:	09db      	lsrs	r3, r3, #7
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	b25b      	sxtb	r3, r3
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	b25b      	sxtb	r3, r3
 800c3de:	b2d9      	uxtb	r1, r3
 800c3e0:	f107 021c 	add.w	r2, r7, #28
 800c3e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3e6:	4413      	add	r3, r2
 800c3e8:	460a      	mov	r2, r1
 800c3ea:	701a      	strb	r2, [r3, #0]
 800c3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3f4:	2b0e      	cmp	r3, #14
 800c3f6:	dde0      	ble.n	800c3ba <AES_CMAC_Final+0x36>
 800c3f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800c404:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c408:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c40c:	43db      	mvns	r3, r3
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c414:	e027      	b.n	800c466 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800c416:	2300      	movs	r3, #0
 800c418:	643b      	str	r3, [r7, #64]	@ 0x40
 800c41a:	e01b      	b.n	800c454 <AES_CMAC_Final+0xd0>
 800c41c:	f107 021c 	add.w	r2, r7, #28
 800c420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c422:	4413      	add	r3, r2
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	005b      	lsls	r3, r3, #1
 800c428:	b25a      	sxtb	r2, r3
 800c42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c42c:	3301      	adds	r3, #1
 800c42e:	3348      	adds	r3, #72	@ 0x48
 800c430:	443b      	add	r3, r7
 800c432:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c436:	09db      	lsrs	r3, r3, #7
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	b25b      	sxtb	r3, r3
 800c43c:	4313      	orrs	r3, r2
 800c43e:	b25b      	sxtb	r3, r3
 800c440:	b2d9      	uxtb	r1, r3
 800c442:	f107 021c 	add.w	r2, r7, #28
 800c446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c448:	4413      	add	r3, r2
 800c44a:	460a      	mov	r2, r1
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c450:	3301      	adds	r3, #1
 800c452:	643b      	str	r3, [r7, #64]	@ 0x40
 800c454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c456:	2b0e      	cmp	r3, #14
 800c458:	dde0      	ble.n	800c41c <AES_CMAC_Final+0x98>
 800c45a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c45e:	005b      	lsls	r3, r3, #1
 800c460:	b2db      	uxtb	r3, r3
 800c462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c46c:	2b10      	cmp	r3, #16
 800c46e:	d11d      	bne.n	800c4ac <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c470:	2300      	movs	r3, #0
 800c472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c474:	e016      	b.n	800c4a4 <AES_CMAC_Final+0x120>
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c47a:	4413      	add	r3, r2
 800c47c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c480:	781a      	ldrb	r2, [r3, #0]
 800c482:	f107 011c 	add.w	r1, r7, #28
 800c486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c488:	440b      	add	r3, r1
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	4053      	eors	r3, r2
 800c48e:	b2d9      	uxtb	r1, r3
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c494:	4413      	add	r3, r2
 800c496:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c49a:	460a      	mov	r2, r1
 800c49c:	701a      	strb	r2, [r3, #0]
 800c49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a6:	2b0f      	cmp	r3, #15
 800c4a8:	dde5      	ble.n	800c476 <AES_CMAC_Final+0xf2>
 800c4aa:	e096      	b.n	800c5da <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c4ac:	7f3b      	ldrb	r3, [r7, #28]
 800c4ae:	b25b      	sxtb	r3, r3
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	da30      	bge.n	800c516 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4b8:	e01b      	b.n	800c4f2 <AES_CMAC_Final+0x16e>
 800c4ba:	f107 021c 	add.w	r2, r7, #28
 800c4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c0:	4413      	add	r3, r2
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	005b      	lsls	r3, r3, #1
 800c4c6:	b25a      	sxtb	r2, r3
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	3348      	adds	r3, #72	@ 0x48
 800c4ce:	443b      	add	r3, r7
 800c4d0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c4d4:	09db      	lsrs	r3, r3, #7
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	b25b      	sxtb	r3, r3
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	b25b      	sxtb	r3, r3
 800c4de:	b2d9      	uxtb	r1, r3
 800c4e0:	f107 021c 	add.w	r2, r7, #28
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	4413      	add	r3, r2
 800c4e8:	460a      	mov	r2, r1
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f4:	2b0e      	cmp	r3, #14
 800c4f6:	dde0      	ble.n	800c4ba <AES_CMAC_Final+0x136>
 800c4f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800c504:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c508:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c50c:	43db      	mvns	r3, r3
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c514:	e027      	b.n	800c566 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800c516:	2300      	movs	r3, #0
 800c518:	637b      	str	r3, [r7, #52]	@ 0x34
 800c51a:	e01b      	b.n	800c554 <AES_CMAC_Final+0x1d0>
 800c51c:	f107 021c 	add.w	r2, r7, #28
 800c520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c522:	4413      	add	r3, r2
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	b25a      	sxtb	r2, r3
 800c52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c52c:	3301      	adds	r3, #1
 800c52e:	3348      	adds	r3, #72	@ 0x48
 800c530:	443b      	add	r3, r7
 800c532:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c536:	09db      	lsrs	r3, r3, #7
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	b25b      	sxtb	r3, r3
 800c53c:	4313      	orrs	r3, r2
 800c53e:	b25b      	sxtb	r3, r3
 800c540:	b2d9      	uxtb	r1, r3
 800c542:	f107 021c 	add.w	r2, r7, #28
 800c546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c548:	4413      	add	r3, r2
 800c54a:	460a      	mov	r2, r1
 800c54c:	701a      	strb	r2, [r3, #0]
 800c54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c550:	3301      	adds	r3, #1
 800c552:	637b      	str	r3, [r7, #52]	@ 0x34
 800c554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c556:	2b0e      	cmp	r3, #14
 800c558:	dde0      	ble.n	800c51c <AES_CMAC_Final+0x198>
 800c55a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	b2db      	uxtb	r3, r3
 800c562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	4413      	add	r3, r2
 800c570:	2280      	movs	r2, #128	@ 0x80
 800c572:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c576:	e007      	b.n	800c588 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	4413      	add	r3, r2
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c59c:	2b0f      	cmp	r3, #15
 800c59e:	d9eb      	bls.n	800c578 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a4:	e016      	b.n	800c5d4 <AES_CMAC_Final+0x250>
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c5b0:	781a      	ldrb	r2, [r3, #0]
 800c5b2:	f107 011c 	add.w	r1, r7, #28
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	440b      	add	r3, r1
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	4053      	eors	r3, r2
 800c5be:	b2d9      	uxtb	r1, r3
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	4413      	add	r3, r2
 800c5c6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c5ca:	460a      	mov	r2, r1
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d6:	2b0f      	cmp	r3, #15
 800c5d8:	dde5      	ble.n	800c5a6 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c5da:	2300      	movs	r3, #0
 800c5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5de:	e015      	b.n	800c60c <AES_CMAC_Final+0x288>
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e4:	4413      	add	r3, r2
 800c5e6:	33f1      	adds	r3, #241	@ 0xf1
 800c5e8:	781a      	ldrb	r2, [r3, #0]
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ee:	440b      	add	r3, r1
 800c5f0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	4053      	eors	r3, r2
 800c5f8:	b2d9      	uxtb	r1, r3
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fe:	4413      	add	r3, r2
 800c600:	33f1      	adds	r3, #241	@ 0xf1
 800c602:	460a      	mov	r2, r1
 800c604:	701a      	strb	r2, [r3, #0]
 800c606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c608:	3301      	adds	r3, #1
 800c60a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60e:	2b0f      	cmp	r3, #15
 800c610:	dde6      	ble.n	800c5e0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c618:	f107 030c 	add.w	r3, r7, #12
 800c61c:	2210      	movs	r2, #16
 800c61e:	4618      	mov	r0, r3
 800c620:	f00c fa75 	bl	8018b0e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	f107 030c 	add.w	r3, r7, #12
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fd1d 	bl	800d06c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c632:	f107 031c 	add.w	r3, r7, #28
 800c636:	2210      	movs	r2, #16
 800c638:	2100      	movs	r1, #0
 800c63a:	4618      	mov	r0, r3
 800c63c:	f00c faa2 	bl	8018b84 <memset1>
}
 800c640:	bf00      	nop
 800c642:	3748      	adds	r7, #72	@ 0x48
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	781a      	ldrb	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3301      	adds	r3, #1
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	7852      	ldrb	r2, [r2, #1]
 800c662:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3302      	adds	r3, #2
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	7892      	ldrb	r2, [r2, #2]
 800c66c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3303      	adds	r3, #3
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	78d2      	ldrb	r2, [r2, #3]
 800c676:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3304      	adds	r3, #4
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	7912      	ldrb	r2, [r2, #4]
 800c680:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3305      	adds	r3, #5
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	7952      	ldrb	r2, [r2, #5]
 800c68a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3306      	adds	r3, #6
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	7992      	ldrb	r2, [r2, #6]
 800c694:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3307      	adds	r3, #7
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	79d2      	ldrb	r2, [r2, #7]
 800c69e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	7a12      	ldrb	r2, [r2, #8]
 800c6a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3309      	adds	r3, #9
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	7a52      	ldrb	r2, [r2, #9]
 800c6b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	330a      	adds	r3, #10
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	7a92      	ldrb	r2, [r2, #10]
 800c6bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	330b      	adds	r3, #11
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	7ad2      	ldrb	r2, [r2, #11]
 800c6c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	330c      	adds	r3, #12
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	7b12      	ldrb	r2, [r2, #12]
 800c6d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	330d      	adds	r3, #13
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	7b52      	ldrb	r2, [r2, #13]
 800c6da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	330e      	adds	r3, #14
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	7b92      	ldrb	r2, [r2, #14]
 800c6e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	330f      	adds	r3, #15
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	7bd2      	ldrb	r2, [r2, #15]
 800c6ee:	701a      	strb	r2, [r3, #0]
#endif
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bc80      	pop	{r7}
 800c6f8:	4770      	bx	lr

0800c6fa <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c6fa:	b480      	push	{r7}
 800c6fc:	b085      	sub	sp, #20
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	60f8      	str	r0, [r7, #12]
 800c702:	60b9      	str	r1, [r7, #8]
 800c704:	4613      	mov	r3, r2
 800c706:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c708:	e007      	b.n	800c71a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	1c53      	adds	r3, r2, #1
 800c70e:	60bb      	str	r3, [r7, #8]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	1c59      	adds	r1, r3, #1
 800c714:	60f9      	str	r1, [r7, #12]
 800c716:	7812      	ldrb	r2, [r2, #0]
 800c718:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c71a:	79fb      	ldrb	r3, [r7, #7]
 800c71c:	1e5a      	subs	r2, r3, #1
 800c71e:	71fa      	strb	r2, [r7, #7]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1f2      	bne.n	800c70a <copy_block_nn+0x10>
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bc80      	pop	{r7}
 800c72e:	4770      	bx	lr

0800c730 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	781a      	ldrb	r2, [r3, #0]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	4053      	eors	r3, r2
 800c744:	b2da      	uxtb	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3301      	adds	r3, #1
 800c74e:	7819      	ldrb	r1, [r3, #0]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	3301      	adds	r3, #1
 800c754:	781a      	ldrb	r2, [r3, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	3301      	adds	r3, #1
 800c75a:	404a      	eors	r2, r1
 800c75c:	b2d2      	uxtb	r2, r2
 800c75e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	3302      	adds	r3, #2
 800c764:	7819      	ldrb	r1, [r3, #0]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	3302      	adds	r3, #2
 800c76a:	781a      	ldrb	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3302      	adds	r3, #2
 800c770:	404a      	eors	r2, r1
 800c772:	b2d2      	uxtb	r2, r2
 800c774:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3303      	adds	r3, #3
 800c77a:	7819      	ldrb	r1, [r3, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	3303      	adds	r3, #3
 800c780:	781a      	ldrb	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3303      	adds	r3, #3
 800c786:	404a      	eors	r2, r1
 800c788:	b2d2      	uxtb	r2, r2
 800c78a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3304      	adds	r3, #4
 800c790:	7819      	ldrb	r1, [r3, #0]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	3304      	adds	r3, #4
 800c796:	781a      	ldrb	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3304      	adds	r3, #4
 800c79c:	404a      	eors	r2, r1
 800c79e:	b2d2      	uxtb	r2, r2
 800c7a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3305      	adds	r3, #5
 800c7a6:	7819      	ldrb	r1, [r3, #0]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	3305      	adds	r3, #5
 800c7ac:	781a      	ldrb	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3305      	adds	r3, #5
 800c7b2:	404a      	eors	r2, r1
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3306      	adds	r3, #6
 800c7bc:	7819      	ldrb	r1, [r3, #0]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	3306      	adds	r3, #6
 800c7c2:	781a      	ldrb	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3306      	adds	r3, #6
 800c7c8:	404a      	eors	r2, r1
 800c7ca:	b2d2      	uxtb	r2, r2
 800c7cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3307      	adds	r3, #7
 800c7d2:	7819      	ldrb	r1, [r3, #0]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	3307      	adds	r3, #7
 800c7d8:	781a      	ldrb	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3307      	adds	r3, #7
 800c7de:	404a      	eors	r2, r1
 800c7e0:	b2d2      	uxtb	r2, r2
 800c7e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	7819      	ldrb	r1, [r3, #0]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	781a      	ldrb	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	404a      	eors	r2, r1
 800c7f6:	b2d2      	uxtb	r2, r2
 800c7f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3309      	adds	r3, #9
 800c7fe:	7819      	ldrb	r1, [r3, #0]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	3309      	adds	r3, #9
 800c804:	781a      	ldrb	r2, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3309      	adds	r3, #9
 800c80a:	404a      	eors	r2, r1
 800c80c:	b2d2      	uxtb	r2, r2
 800c80e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	330a      	adds	r3, #10
 800c814:	7819      	ldrb	r1, [r3, #0]
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	330a      	adds	r3, #10
 800c81a:	781a      	ldrb	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	330a      	adds	r3, #10
 800c820:	404a      	eors	r2, r1
 800c822:	b2d2      	uxtb	r2, r2
 800c824:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	330b      	adds	r3, #11
 800c82a:	7819      	ldrb	r1, [r3, #0]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	330b      	adds	r3, #11
 800c830:	781a      	ldrb	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	330b      	adds	r3, #11
 800c836:	404a      	eors	r2, r1
 800c838:	b2d2      	uxtb	r2, r2
 800c83a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	330c      	adds	r3, #12
 800c840:	7819      	ldrb	r1, [r3, #0]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	330c      	adds	r3, #12
 800c846:	781a      	ldrb	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	330c      	adds	r3, #12
 800c84c:	404a      	eors	r2, r1
 800c84e:	b2d2      	uxtb	r2, r2
 800c850:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	330d      	adds	r3, #13
 800c856:	7819      	ldrb	r1, [r3, #0]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	330d      	adds	r3, #13
 800c85c:	781a      	ldrb	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	330d      	adds	r3, #13
 800c862:	404a      	eors	r2, r1
 800c864:	b2d2      	uxtb	r2, r2
 800c866:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	330e      	adds	r3, #14
 800c86c:	7819      	ldrb	r1, [r3, #0]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	330e      	adds	r3, #14
 800c872:	781a      	ldrb	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	330e      	adds	r3, #14
 800c878:	404a      	eors	r2, r1
 800c87a:	b2d2      	uxtb	r2, r2
 800c87c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	330f      	adds	r3, #15
 800c882:	7819      	ldrb	r1, [r3, #0]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	330f      	adds	r3, #15
 800c888:	781a      	ldrb	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	330f      	adds	r3, #15
 800c88e:	404a      	eors	r2, r1
 800c890:	b2d2      	uxtb	r2, r2
 800c892:	701a      	strb	r2, [r3, #0]
#endif
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	bc80      	pop	{r7}
 800c89c:	4770      	bx	lr

0800c89e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c89e:	b480      	push	{r7}
 800c8a0:	b085      	sub	sp, #20
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	60f8      	str	r0, [r7, #12]
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	781a      	ldrb	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	4053      	eors	r3, r2
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	7819      	ldrb	r1, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	781a      	ldrb	r2, [r3, #0]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	404a      	eors	r2, r1
 800c8cc:	b2d2      	uxtb	r2, r2
 800c8ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	3302      	adds	r3, #2
 800c8d4:	7819      	ldrb	r1, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3302      	adds	r3, #2
 800c8da:	781a      	ldrb	r2, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3302      	adds	r3, #2
 800c8e0:	404a      	eors	r2, r1
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	3303      	adds	r3, #3
 800c8ea:	7819      	ldrb	r1, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3303      	adds	r3, #3
 800c8f0:	781a      	ldrb	r2, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	3303      	adds	r3, #3
 800c8f6:	404a      	eors	r2, r1
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	3304      	adds	r3, #4
 800c900:	7819      	ldrb	r1, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	3304      	adds	r3, #4
 800c906:	781a      	ldrb	r2, [r3, #0]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	3304      	adds	r3, #4
 800c90c:	404a      	eors	r2, r1
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	3305      	adds	r3, #5
 800c916:	7819      	ldrb	r1, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3305      	adds	r3, #5
 800c91c:	781a      	ldrb	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	3305      	adds	r3, #5
 800c922:	404a      	eors	r2, r1
 800c924:	b2d2      	uxtb	r2, r2
 800c926:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	3306      	adds	r3, #6
 800c92c:	7819      	ldrb	r1, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	3306      	adds	r3, #6
 800c932:	781a      	ldrb	r2, [r3, #0]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3306      	adds	r3, #6
 800c938:	404a      	eors	r2, r1
 800c93a:	b2d2      	uxtb	r2, r2
 800c93c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	3307      	adds	r3, #7
 800c942:	7819      	ldrb	r1, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	3307      	adds	r3, #7
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3307      	adds	r3, #7
 800c94e:	404a      	eors	r2, r1
 800c950:	b2d2      	uxtb	r2, r2
 800c952:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	3308      	adds	r3, #8
 800c958:	7819      	ldrb	r1, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3308      	adds	r3, #8
 800c95e:	781a      	ldrb	r2, [r3, #0]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3308      	adds	r3, #8
 800c964:	404a      	eors	r2, r1
 800c966:	b2d2      	uxtb	r2, r2
 800c968:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	3309      	adds	r3, #9
 800c96e:	7819      	ldrb	r1, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3309      	adds	r3, #9
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	3309      	adds	r3, #9
 800c97a:	404a      	eors	r2, r1
 800c97c:	b2d2      	uxtb	r2, r2
 800c97e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	330a      	adds	r3, #10
 800c984:	7819      	ldrb	r1, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	330a      	adds	r3, #10
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	330a      	adds	r3, #10
 800c990:	404a      	eors	r2, r1
 800c992:	b2d2      	uxtb	r2, r2
 800c994:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	330b      	adds	r3, #11
 800c99a:	7819      	ldrb	r1, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	330b      	adds	r3, #11
 800c9a0:	781a      	ldrb	r2, [r3, #0]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	330b      	adds	r3, #11
 800c9a6:	404a      	eors	r2, r1
 800c9a8:	b2d2      	uxtb	r2, r2
 800c9aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	330c      	adds	r3, #12
 800c9b0:	7819      	ldrb	r1, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	330c      	adds	r3, #12
 800c9b6:	781a      	ldrb	r2, [r3, #0]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	330c      	adds	r3, #12
 800c9bc:	404a      	eors	r2, r1
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	330d      	adds	r3, #13
 800c9c6:	7819      	ldrb	r1, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	330d      	adds	r3, #13
 800c9cc:	781a      	ldrb	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	330d      	adds	r3, #13
 800c9d2:	404a      	eors	r2, r1
 800c9d4:	b2d2      	uxtb	r2, r2
 800c9d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	330e      	adds	r3, #14
 800c9dc:	7819      	ldrb	r1, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	330e      	adds	r3, #14
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	330e      	adds	r3, #14
 800c9e8:	404a      	eors	r2, r1
 800c9ea:	b2d2      	uxtb	r2, r2
 800c9ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	330f      	adds	r3, #15
 800c9f2:	7819      	ldrb	r1, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	330f      	adds	r3, #15
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	330f      	adds	r3, #15
 800c9fe:	404a      	eors	r2, r1
 800ca00:	b2d2      	uxtb	r2, r2
 800ca02:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ca04:	bf00      	nop
 800ca06:	3714      	adds	r7, #20
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bc80      	pop	{r7}
 800ca0c:	4770      	bx	lr

0800ca0e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff fe88 	bl	800c730 <xor_block>
}
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	461a      	mov	r2, r3
 800ca36:	4b48      	ldr	r3, [pc, #288]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca38:	5c9a      	ldrb	r2, [r3, r2]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3304      	adds	r3, #4
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	4619      	mov	r1, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4a43      	ldr	r2, [pc, #268]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca4c:	5c52      	ldrb	r2, [r2, r1]
 800ca4e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	3308      	adds	r3, #8
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	4619      	mov	r1, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3308      	adds	r3, #8
 800ca5c:	4a3e      	ldr	r2, [pc, #248]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca5e:	5c52      	ldrb	r2, [r2, r1]
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	330c      	adds	r3, #12
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	330c      	adds	r3, #12
 800ca6e:	4a3a      	ldr	r2, [pc, #232]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca70:	5c52      	ldrb	r2, [r2, r1]
 800ca72:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	785b      	ldrb	r3, [r3, #1]
 800ca78:	73fb      	strb	r3, [r7, #15]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3305      	adds	r3, #5
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	4619      	mov	r1, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3301      	adds	r3, #1
 800ca86:	4a34      	ldr	r2, [pc, #208]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca88:	5c52      	ldrb	r2, [r2, r1]
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	3309      	adds	r3, #9
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	4619      	mov	r1, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3305      	adds	r3, #5
 800ca98:	4a2f      	ldr	r2, [pc, #188]	@ (800cb58 <shift_sub_rows+0x130>)
 800ca9a:	5c52      	ldrb	r2, [r2, r1]
 800ca9c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	330d      	adds	r3, #13
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	4619      	mov	r1, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3309      	adds	r3, #9
 800caaa:	4a2b      	ldr	r2, [pc, #172]	@ (800cb58 <shift_sub_rows+0x130>)
 800caac:	5c52      	ldrb	r2, [r2, r1]
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	7bfa      	ldrb	r2, [r7, #15]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	330d      	adds	r3, #13
 800cab6:	4928      	ldr	r1, [pc, #160]	@ (800cb58 <shift_sub_rows+0x130>)
 800cab8:	5c8a      	ldrb	r2, [r1, r2]
 800caba:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	789b      	ldrb	r3, [r3, #2]
 800cac0:	73fb      	strb	r3, [r7, #15]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	330a      	adds	r3, #10
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	4619      	mov	r1, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3302      	adds	r3, #2
 800cace:	4a22      	ldr	r2, [pc, #136]	@ (800cb58 <shift_sub_rows+0x130>)
 800cad0:	5c52      	ldrb	r2, [r2, r1]
 800cad2:	701a      	strb	r2, [r3, #0]
 800cad4:	7bfa      	ldrb	r2, [r7, #15]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	330a      	adds	r3, #10
 800cada:	491f      	ldr	r1, [pc, #124]	@ (800cb58 <shift_sub_rows+0x130>)
 800cadc:	5c8a      	ldrb	r2, [r1, r2]
 800cade:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	799b      	ldrb	r3, [r3, #6]
 800cae4:	73fb      	strb	r3, [r7, #15]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	330e      	adds	r3, #14
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	4619      	mov	r1, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3306      	adds	r3, #6
 800caf2:	4a19      	ldr	r2, [pc, #100]	@ (800cb58 <shift_sub_rows+0x130>)
 800caf4:	5c52      	ldrb	r2, [r2, r1]
 800caf6:	701a      	strb	r2, [r3, #0]
 800caf8:	7bfa      	ldrb	r2, [r7, #15]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	330e      	adds	r3, #14
 800cafe:	4916      	ldr	r1, [pc, #88]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb00:	5c8a      	ldrb	r2, [r1, r2]
 800cb02:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	7bdb      	ldrb	r3, [r3, #15]
 800cb08:	73fb      	strb	r3, [r7, #15]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	330b      	adds	r3, #11
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	4619      	mov	r1, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	330f      	adds	r3, #15
 800cb16:	4a10      	ldr	r2, [pc, #64]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb18:	5c52      	ldrb	r2, [r2, r1]
 800cb1a:	701a      	strb	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3307      	adds	r3, #7
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	4619      	mov	r1, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	330b      	adds	r3, #11
 800cb28:	4a0b      	ldr	r2, [pc, #44]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb2a:	5c52      	ldrb	r2, [r2, r1]
 800cb2c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3303      	adds	r3, #3
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	4619      	mov	r1, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3307      	adds	r3, #7
 800cb3a:	4a07      	ldr	r2, [pc, #28]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb3c:	5c52      	ldrb	r2, [r2, r1]
 800cb3e:	701a      	strb	r2, [r3, #0]
 800cb40:	7bfa      	ldrb	r2, [r7, #15]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3303      	adds	r3, #3
 800cb46:	4904      	ldr	r1, [pc, #16]	@ (800cb58 <shift_sub_rows+0x130>)
 800cb48:	5c8a      	ldrb	r2, [r1, r2]
 800cb4a:	701a      	strb	r2, [r3, #0]
}
 800cb4c:	bf00      	nop
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bc80      	pop	{r7}
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	0801e248 	.word	0x0801e248

0800cb5c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800cb64:	f107 0308 	add.w	r3, r7, #8
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fd6c 	bl	800c648 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800cb70:	7a3b      	ldrb	r3, [r7, #8]
 800cb72:	461a      	mov	r2, r3
 800cb74:	4b9a      	ldr	r3, [pc, #616]	@ (800cde0 <mix_sub_columns+0x284>)
 800cb76:	5c9a      	ldrb	r2, [r3, r2]
 800cb78:	7b7b      	ldrb	r3, [r7, #13]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	4b99      	ldr	r3, [pc, #612]	@ (800cde4 <mix_sub_columns+0x288>)
 800cb7e:	5c5b      	ldrb	r3, [r3, r1]
 800cb80:	4053      	eors	r3, r2
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	7cbb      	ldrb	r3, [r7, #18]
 800cb86:	4619      	mov	r1, r3
 800cb88:	4b97      	ldr	r3, [pc, #604]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cb8a:	5c5b      	ldrb	r3, [r3, r1]
 800cb8c:	4053      	eors	r3, r2
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	4619      	mov	r1, r3
 800cb94:	4b94      	ldr	r3, [pc, #592]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cb96:	5c5b      	ldrb	r3, [r3, r1]
 800cb98:	4053      	eors	r3, r2
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cba0:	7a3b      	ldrb	r3, [r7, #8]
 800cba2:	461a      	mov	r2, r3
 800cba4:	4b90      	ldr	r3, [pc, #576]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cba6:	5c9a      	ldrb	r2, [r3, r2]
 800cba8:	7b7b      	ldrb	r3, [r7, #13]
 800cbaa:	4619      	mov	r1, r3
 800cbac:	4b8c      	ldr	r3, [pc, #560]	@ (800cde0 <mix_sub_columns+0x284>)
 800cbae:	5c5b      	ldrb	r3, [r3, r1]
 800cbb0:	4053      	eors	r3, r2
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	7cbb      	ldrb	r3, [r7, #18]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	4b8a      	ldr	r3, [pc, #552]	@ (800cde4 <mix_sub_columns+0x288>)
 800cbba:	5c5b      	ldrb	r3, [r3, r1]
 800cbbc:	4053      	eors	r3, r2
 800cbbe:	b2d9      	uxtb	r1, r3
 800cbc0:	7dfb      	ldrb	r3, [r7, #23]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4b88      	ldr	r3, [pc, #544]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cbc6:	5c9a      	ldrb	r2, [r3, r2]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	404a      	eors	r2, r1
 800cbce:	b2d2      	uxtb	r2, r2
 800cbd0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cbd2:	7a3b      	ldrb	r3, [r7, #8]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4b84      	ldr	r3, [pc, #528]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cbd8:	5c9a      	ldrb	r2, [r3, r2]
 800cbda:	7b7b      	ldrb	r3, [r7, #13]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4b82      	ldr	r3, [pc, #520]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cbe0:	5c5b      	ldrb	r3, [r3, r1]
 800cbe2:	4053      	eors	r3, r2
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	7cbb      	ldrb	r3, [r7, #18]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	4b7d      	ldr	r3, [pc, #500]	@ (800cde0 <mix_sub_columns+0x284>)
 800cbec:	5c5b      	ldrb	r3, [r3, r1]
 800cbee:	4053      	eors	r3, r2
 800cbf0:	b2d9      	uxtb	r1, r3
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	4b7b      	ldr	r3, [pc, #492]	@ (800cde4 <mix_sub_columns+0x288>)
 800cbf8:	5c9a      	ldrb	r2, [r3, r2]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	3302      	adds	r3, #2
 800cbfe:	404a      	eors	r2, r1
 800cc00:	b2d2      	uxtb	r2, r2
 800cc02:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cc04:	7a3b      	ldrb	r3, [r7, #8]
 800cc06:	461a      	mov	r2, r3
 800cc08:	4b76      	ldr	r3, [pc, #472]	@ (800cde4 <mix_sub_columns+0x288>)
 800cc0a:	5c9a      	ldrb	r2, [r3, r2]
 800cc0c:	7b7b      	ldrb	r3, [r7, #13]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	4b75      	ldr	r3, [pc, #468]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc12:	5c5b      	ldrb	r3, [r3, r1]
 800cc14:	4053      	eors	r3, r2
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	7cbb      	ldrb	r3, [r7, #18]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	4b72      	ldr	r3, [pc, #456]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc1e:	5c5b      	ldrb	r3, [r3, r1]
 800cc20:	4053      	eors	r3, r2
 800cc22:	b2d9      	uxtb	r1, r3
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
 800cc26:	461a      	mov	r2, r3
 800cc28:	4b6d      	ldr	r3, [pc, #436]	@ (800cde0 <mix_sub_columns+0x284>)
 800cc2a:	5c9a      	ldrb	r2, [r3, r2]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3303      	adds	r3, #3
 800cc30:	404a      	eors	r2, r1
 800cc32:	b2d2      	uxtb	r2, r2
 800cc34:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cc36:	7b3b      	ldrb	r3, [r7, #12]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	4b69      	ldr	r3, [pc, #420]	@ (800cde0 <mix_sub_columns+0x284>)
 800cc3c:	5c9a      	ldrb	r2, [r3, r2]
 800cc3e:	7c7b      	ldrb	r3, [r7, #17]
 800cc40:	4619      	mov	r1, r3
 800cc42:	4b68      	ldr	r3, [pc, #416]	@ (800cde4 <mix_sub_columns+0x288>)
 800cc44:	5c5b      	ldrb	r3, [r3, r1]
 800cc46:	4053      	eors	r3, r2
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	7dbb      	ldrb	r3, [r7, #22]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	4b66      	ldr	r3, [pc, #408]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc50:	5c5b      	ldrb	r3, [r3, r1]
 800cc52:	4053      	eors	r3, r2
 800cc54:	b2d9      	uxtb	r1, r3
 800cc56:	7afb      	ldrb	r3, [r7, #11]
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4b63      	ldr	r3, [pc, #396]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc5c:	5c9a      	ldrb	r2, [r3, r2]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	3304      	adds	r3, #4
 800cc62:	404a      	eors	r2, r1
 800cc64:	b2d2      	uxtb	r2, r2
 800cc66:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cc68:	7b3b      	ldrb	r3, [r7, #12]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	4b5e      	ldr	r3, [pc, #376]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc6e:	5c9a      	ldrb	r2, [r3, r2]
 800cc70:	7c7b      	ldrb	r3, [r7, #17]
 800cc72:	4619      	mov	r1, r3
 800cc74:	4b5a      	ldr	r3, [pc, #360]	@ (800cde0 <mix_sub_columns+0x284>)
 800cc76:	5c5b      	ldrb	r3, [r3, r1]
 800cc78:	4053      	eors	r3, r2
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	7dbb      	ldrb	r3, [r7, #22]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4b58      	ldr	r3, [pc, #352]	@ (800cde4 <mix_sub_columns+0x288>)
 800cc82:	5c5b      	ldrb	r3, [r3, r1]
 800cc84:	4053      	eors	r3, r2
 800cc86:	b2d9      	uxtb	r1, r3
 800cc88:	7afb      	ldrb	r3, [r7, #11]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	4b56      	ldr	r3, [pc, #344]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cc8e:	5c9a      	ldrb	r2, [r3, r2]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3305      	adds	r3, #5
 800cc94:	404a      	eors	r2, r1
 800cc96:	b2d2      	uxtb	r2, r2
 800cc98:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cc9a:	7b3b      	ldrb	r3, [r7, #12]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4b52      	ldr	r3, [pc, #328]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cca0:	5c9a      	ldrb	r2, [r3, r2]
 800cca2:	7c7b      	ldrb	r3, [r7, #17]
 800cca4:	4619      	mov	r1, r3
 800cca6:	4b50      	ldr	r3, [pc, #320]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cca8:	5c5b      	ldrb	r3, [r3, r1]
 800ccaa:	4053      	eors	r3, r2
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	7dbb      	ldrb	r3, [r7, #22]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4b4b      	ldr	r3, [pc, #300]	@ (800cde0 <mix_sub_columns+0x284>)
 800ccb4:	5c5b      	ldrb	r3, [r3, r1]
 800ccb6:	4053      	eors	r3, r2
 800ccb8:	b2d9      	uxtb	r1, r3
 800ccba:	7afb      	ldrb	r3, [r7, #11]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	4b49      	ldr	r3, [pc, #292]	@ (800cde4 <mix_sub_columns+0x288>)
 800ccc0:	5c9a      	ldrb	r2, [r3, r2]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3306      	adds	r3, #6
 800ccc6:	404a      	eors	r2, r1
 800ccc8:	b2d2      	uxtb	r2, r2
 800ccca:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cccc:	7b3b      	ldrb	r3, [r7, #12]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	4b44      	ldr	r3, [pc, #272]	@ (800cde4 <mix_sub_columns+0x288>)
 800ccd2:	5c9a      	ldrb	r2, [r3, r2]
 800ccd4:	7c7b      	ldrb	r3, [r7, #17]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	4b43      	ldr	r3, [pc, #268]	@ (800cde8 <mix_sub_columns+0x28c>)
 800ccda:	5c5b      	ldrb	r3, [r3, r1]
 800ccdc:	4053      	eors	r3, r2
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	7dbb      	ldrb	r3, [r7, #22]
 800cce2:	4619      	mov	r1, r3
 800cce4:	4b40      	ldr	r3, [pc, #256]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cce6:	5c5b      	ldrb	r3, [r3, r1]
 800cce8:	4053      	eors	r3, r2
 800ccea:	b2d9      	uxtb	r1, r3
 800ccec:	7afb      	ldrb	r3, [r7, #11]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	4b3b      	ldr	r3, [pc, #236]	@ (800cde0 <mix_sub_columns+0x284>)
 800ccf2:	5c9a      	ldrb	r2, [r3, r2]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	3307      	adds	r3, #7
 800ccf8:	404a      	eors	r2, r1
 800ccfa:	b2d2      	uxtb	r2, r2
 800ccfc:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ccfe:	7c3b      	ldrb	r3, [r7, #16]
 800cd00:	461a      	mov	r2, r3
 800cd02:	4b37      	ldr	r3, [pc, #220]	@ (800cde0 <mix_sub_columns+0x284>)
 800cd04:	5c9a      	ldrb	r2, [r3, r2]
 800cd06:	7d7b      	ldrb	r3, [r7, #21]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	4b36      	ldr	r3, [pc, #216]	@ (800cde4 <mix_sub_columns+0x288>)
 800cd0c:	5c5b      	ldrb	r3, [r3, r1]
 800cd0e:	4053      	eors	r3, r2
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	7abb      	ldrb	r3, [r7, #10]
 800cd14:	4619      	mov	r1, r3
 800cd16:	4b34      	ldr	r3, [pc, #208]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd18:	5c5b      	ldrb	r3, [r3, r1]
 800cd1a:	4053      	eors	r3, r2
 800cd1c:	b2d9      	uxtb	r1, r3
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	461a      	mov	r2, r3
 800cd22:	4b31      	ldr	r3, [pc, #196]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd24:	5c9a      	ldrb	r2, [r3, r2]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	3308      	adds	r3, #8
 800cd2a:	404a      	eors	r2, r1
 800cd2c:	b2d2      	uxtb	r2, r2
 800cd2e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800cd30:	7c3b      	ldrb	r3, [r7, #16]
 800cd32:	461a      	mov	r2, r3
 800cd34:	4b2c      	ldr	r3, [pc, #176]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd36:	5c9a      	ldrb	r2, [r3, r2]
 800cd38:	7d7b      	ldrb	r3, [r7, #21]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4b28      	ldr	r3, [pc, #160]	@ (800cde0 <mix_sub_columns+0x284>)
 800cd3e:	5c5b      	ldrb	r3, [r3, r1]
 800cd40:	4053      	eors	r3, r2
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	7abb      	ldrb	r3, [r7, #10]
 800cd46:	4619      	mov	r1, r3
 800cd48:	4b26      	ldr	r3, [pc, #152]	@ (800cde4 <mix_sub_columns+0x288>)
 800cd4a:	5c5b      	ldrb	r3, [r3, r1]
 800cd4c:	4053      	eors	r3, r2
 800cd4e:	b2d9      	uxtb	r1, r3
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	461a      	mov	r2, r3
 800cd54:	4b24      	ldr	r3, [pc, #144]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd56:	5c9a      	ldrb	r2, [r3, r2]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3309      	adds	r3, #9
 800cd5c:	404a      	eors	r2, r1
 800cd5e:	b2d2      	uxtb	r2, r2
 800cd60:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800cd62:	7c3b      	ldrb	r3, [r7, #16]
 800cd64:	461a      	mov	r2, r3
 800cd66:	4b20      	ldr	r3, [pc, #128]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd68:	5c9a      	ldrb	r2, [r3, r2]
 800cd6a:	7d7b      	ldrb	r3, [r7, #21]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	4b1e      	ldr	r3, [pc, #120]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cd70:	5c5b      	ldrb	r3, [r3, r1]
 800cd72:	4053      	eors	r3, r2
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	7abb      	ldrb	r3, [r7, #10]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4b19      	ldr	r3, [pc, #100]	@ (800cde0 <mix_sub_columns+0x284>)
 800cd7c:	5c5b      	ldrb	r3, [r3, r1]
 800cd7e:	4053      	eors	r3, r2
 800cd80:	b2d9      	uxtb	r1, r3
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	461a      	mov	r2, r3
 800cd86:	4b17      	ldr	r3, [pc, #92]	@ (800cde4 <mix_sub_columns+0x288>)
 800cd88:	5c9a      	ldrb	r2, [r3, r2]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	330a      	adds	r3, #10
 800cd8e:	404a      	eors	r2, r1
 800cd90:	b2d2      	uxtb	r2, r2
 800cd92:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cd94:	7c3b      	ldrb	r3, [r7, #16]
 800cd96:	461a      	mov	r2, r3
 800cd98:	4b12      	ldr	r3, [pc, #72]	@ (800cde4 <mix_sub_columns+0x288>)
 800cd9a:	5c9a      	ldrb	r2, [r3, r2]
 800cd9c:	7d7b      	ldrb	r3, [r7, #21]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	4b11      	ldr	r3, [pc, #68]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cda2:	5c5b      	ldrb	r3, [r3, r1]
 800cda4:	4053      	eors	r3, r2
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	7abb      	ldrb	r3, [r7, #10]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4b0e      	ldr	r3, [pc, #56]	@ (800cde8 <mix_sub_columns+0x28c>)
 800cdae:	5c5b      	ldrb	r3, [r3, r1]
 800cdb0:	4053      	eors	r3, r2
 800cdb2:	b2d9      	uxtb	r1, r3
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	4b09      	ldr	r3, [pc, #36]	@ (800cde0 <mix_sub_columns+0x284>)
 800cdba:	5c9a      	ldrb	r2, [r3, r2]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	330b      	adds	r3, #11
 800cdc0:	404a      	eors	r2, r1
 800cdc2:	b2d2      	uxtb	r2, r2
 800cdc4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cdc6:	7d3b      	ldrb	r3, [r7, #20]
 800cdc8:	461a      	mov	r2, r3
 800cdca:	4b05      	ldr	r3, [pc, #20]	@ (800cde0 <mix_sub_columns+0x284>)
 800cdcc:	5c9a      	ldrb	r2, [r3, r2]
 800cdce:	7a7b      	ldrb	r3, [r7, #9]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4b04      	ldr	r3, [pc, #16]	@ (800cde4 <mix_sub_columns+0x288>)
 800cdd4:	5c5b      	ldrb	r3, [r3, r1]
 800cdd6:	4053      	eors	r3, r2
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
 800cddc:	4619      	mov	r1, r3
 800cdde:	e005      	b.n	800cdec <mix_sub_columns+0x290>
 800cde0:	0801e348 	.word	0x0801e348
 800cde4:	0801e448 	.word	0x0801e448
 800cde8:	0801e248 	.word	0x0801e248
 800cdec:	4b2d      	ldr	r3, [pc, #180]	@ (800cea4 <mix_sub_columns+0x348>)
 800cdee:	5c5b      	ldrb	r3, [r3, r1]
 800cdf0:	4053      	eors	r3, r2
 800cdf2:	b2d9      	uxtb	r1, r3
 800cdf4:	7cfb      	ldrb	r3, [r7, #19]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	4b2a      	ldr	r3, [pc, #168]	@ (800cea4 <mix_sub_columns+0x348>)
 800cdfa:	5c9a      	ldrb	r2, [r3, r2]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	330c      	adds	r3, #12
 800ce00:	404a      	eors	r2, r1
 800ce02:	b2d2      	uxtb	r2, r2
 800ce04:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ce06:	7d3b      	ldrb	r3, [r7, #20]
 800ce08:	461a      	mov	r2, r3
 800ce0a:	4b26      	ldr	r3, [pc, #152]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce0c:	5c9a      	ldrb	r2, [r3, r2]
 800ce0e:	7a7b      	ldrb	r3, [r7, #9]
 800ce10:	4619      	mov	r1, r3
 800ce12:	4b25      	ldr	r3, [pc, #148]	@ (800cea8 <mix_sub_columns+0x34c>)
 800ce14:	5c5b      	ldrb	r3, [r3, r1]
 800ce16:	4053      	eors	r3, r2
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	7bbb      	ldrb	r3, [r7, #14]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4b23      	ldr	r3, [pc, #140]	@ (800ceac <mix_sub_columns+0x350>)
 800ce20:	5c5b      	ldrb	r3, [r3, r1]
 800ce22:	4053      	eors	r3, r2
 800ce24:	b2d9      	uxtb	r1, r3
 800ce26:	7cfb      	ldrb	r3, [r7, #19]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	4b1e      	ldr	r3, [pc, #120]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce2c:	5c9a      	ldrb	r2, [r3, r2]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	330d      	adds	r3, #13
 800ce32:	404a      	eors	r2, r1
 800ce34:	b2d2      	uxtb	r2, r2
 800ce36:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ce38:	7d3b      	ldrb	r3, [r7, #20]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	4b19      	ldr	r3, [pc, #100]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce3e:	5c9a      	ldrb	r2, [r3, r2]
 800ce40:	7a7b      	ldrb	r3, [r7, #9]
 800ce42:	4619      	mov	r1, r3
 800ce44:	4b17      	ldr	r3, [pc, #92]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce46:	5c5b      	ldrb	r3, [r3, r1]
 800ce48:	4053      	eors	r3, r2
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	7bbb      	ldrb	r3, [r7, #14]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	4b15      	ldr	r3, [pc, #84]	@ (800cea8 <mix_sub_columns+0x34c>)
 800ce52:	5c5b      	ldrb	r3, [r3, r1]
 800ce54:	4053      	eors	r3, r2
 800ce56:	b2d9      	uxtb	r1, r3
 800ce58:	7cfb      	ldrb	r3, [r7, #19]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	4b13      	ldr	r3, [pc, #76]	@ (800ceac <mix_sub_columns+0x350>)
 800ce5e:	5c9a      	ldrb	r2, [r3, r2]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	330e      	adds	r3, #14
 800ce64:	404a      	eors	r2, r1
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ce6a:	7d3b      	ldrb	r3, [r7, #20]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ceac <mix_sub_columns+0x350>)
 800ce70:	5c9a      	ldrb	r2, [r3, r2]
 800ce72:	7a7b      	ldrb	r3, [r7, #9]
 800ce74:	4619      	mov	r1, r3
 800ce76:	4b0b      	ldr	r3, [pc, #44]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce78:	5c5b      	ldrb	r3, [r3, r1]
 800ce7a:	4053      	eors	r3, r2
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
 800ce80:	4619      	mov	r1, r3
 800ce82:	4b08      	ldr	r3, [pc, #32]	@ (800cea4 <mix_sub_columns+0x348>)
 800ce84:	5c5b      	ldrb	r3, [r3, r1]
 800ce86:	4053      	eors	r3, r2
 800ce88:	b2d9      	uxtb	r1, r3
 800ce8a:	7cfb      	ldrb	r3, [r7, #19]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4b06      	ldr	r3, [pc, #24]	@ (800cea8 <mix_sub_columns+0x34c>)
 800ce90:	5c9a      	ldrb	r2, [r3, r2]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	330f      	adds	r3, #15
 800ce96:	404a      	eors	r2, r1
 800ce98:	b2d2      	uxtb	r2, r2
 800ce9a:	701a      	strb	r2, [r3, #0]
  }
 800ce9c:	bf00      	nop
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	0801e248 	.word	0x0801e248
 800cea8:	0801e348 	.word	0x0801e348
 800ceac:	0801e448 	.word	0x0801e448

0800ceb0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800cebe:	7afb      	ldrb	r3, [r7, #11]
 800cec0:	3b10      	subs	r3, #16
 800cec2:	2b10      	cmp	r3, #16
 800cec4:	bf8c      	ite	hi
 800cec6:	2201      	movhi	r2, #1
 800cec8:	2200      	movls	r2, #0
 800ceca:	b2d2      	uxtb	r2, r2
 800cecc:	2a00      	cmp	r2, #0
 800cece:	d10b      	bne.n	800cee8 <lorawan_aes_set_key+0x38>
 800ced0:	4a64      	ldr	r2, [pc, #400]	@ (800d064 <lorawan_aes_set_key+0x1b4>)
 800ced2:	fa22 f303 	lsr.w	r3, r2, r3
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bf14      	ite	ne
 800cede:	2301      	movne	r3, #1
 800cee0:	2300      	moveq	r3, #0
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d105      	bne.n	800cef4 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800cef0:	23ff      	movs	r3, #255	@ 0xff
 800cef2:	e0b2      	b.n	800d05a <lorawan_aes_set_key+0x1aa>
        break;
 800cef4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	7afa      	ldrb	r2, [r7, #11]
 800cefa:	68f9      	ldr	r1, [r7, #12]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7ff fbfc 	bl	800c6fa <copy_block_nn>
    hi = (keylen + 28) << 2;
 800cf02:	7afb      	ldrb	r3, [r7, #11]
 800cf04:	331c      	adds	r3, #28
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800cf0c:	7c7b      	ldrb	r3, [r7, #17]
 800cf0e:	091b      	lsrs	r3, r3, #4
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	3b01      	subs	r3, #1
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cf1c:	7afb      	ldrb	r3, [r7, #11]
 800cf1e:	75fb      	strb	r3, [r7, #23]
 800cf20:	2301      	movs	r3, #1
 800cf22:	75bb      	strb	r3, [r7, #22]
 800cf24:	e093      	b.n	800d04e <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	3b04      	subs	r3, #4
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	5cd3      	ldrb	r3, [r2, r3]
 800cf2e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
 800cf32:	3b03      	subs	r3, #3
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	5cd3      	ldrb	r3, [r2, r3]
 800cf38:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
 800cf3c:	3b02      	subs	r3, #2
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	5cd3      	ldrb	r3, [r2, r3]
 800cf42:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
 800cf46:	3b01      	subs	r3, #1
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	5cd3      	ldrb	r3, [r2, r3]
 800cf4c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800cf4e:	7dfb      	ldrb	r3, [r7, #23]
 800cf50:	7afa      	ldrb	r2, [r7, #11]
 800cf52:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf56:	fb01 f202 	mul.w	r2, r1, r2
 800cf5a:	1a9b      	subs	r3, r3, r2
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d127      	bne.n	800cfb2 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800cf62:	7d7b      	ldrb	r3, [r7, #21]
 800cf64:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800cf66:	7d3b      	ldrb	r3, [r7, #20]
 800cf68:	4a3f      	ldr	r2, [pc, #252]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cf6a:	5cd2      	ldrb	r2, [r2, r3]
 800cf6c:	7dbb      	ldrb	r3, [r7, #22]
 800cf6e:	4053      	eors	r3, r2
 800cf70:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800cf72:	7cfb      	ldrb	r3, [r7, #19]
 800cf74:	4a3c      	ldr	r2, [pc, #240]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cf76:	5cd3      	ldrb	r3, [r2, r3]
 800cf78:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800cf7a:	7cbb      	ldrb	r3, [r7, #18]
 800cf7c:	4a3a      	ldr	r2, [pc, #232]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cf7e:	5cd3      	ldrb	r3, [r2, r3]
 800cf80:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800cf82:	7c3b      	ldrb	r3, [r7, #16]
 800cf84:	4a38      	ldr	r2, [pc, #224]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cf86:	5cd3      	ldrb	r3, [r2, r3]
 800cf88:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800cf8a:	7dbb      	ldrb	r3, [r7, #22]
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	b25a      	sxtb	r2, r3
 800cf90:	7dbb      	ldrb	r3, [r7, #22]
 800cf92:	09db      	lsrs	r3, r3, #7
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	4619      	mov	r1, r3
 800cf98:	0049      	lsls	r1, r1, #1
 800cf9a:	440b      	add	r3, r1
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	00c8      	lsls	r0, r1, #3
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	440b      	add	r3, r1
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	b25b      	sxtb	r3, r3
 800cfaa:	4053      	eors	r3, r2
 800cfac:	b25b      	sxtb	r3, r3
 800cfae:	75bb      	strb	r3, [r7, #22]
 800cfb0:	e01c      	b.n	800cfec <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800cfb2:	7afb      	ldrb	r3, [r7, #11]
 800cfb4:	2b18      	cmp	r3, #24
 800cfb6:	d919      	bls.n	800cfec <lorawan_aes_set_key+0x13c>
 800cfb8:	7dfb      	ldrb	r3, [r7, #23]
 800cfba:	7afa      	ldrb	r2, [r7, #11]
 800cfbc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfc0:	fb01 f202 	mul.w	r2, r1, r2
 800cfc4:	1a9b      	subs	r3, r3, r2
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b10      	cmp	r3, #16
 800cfca:	d10f      	bne.n	800cfec <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800cfcc:	7d7b      	ldrb	r3, [r7, #21]
 800cfce:	4a26      	ldr	r2, [pc, #152]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cfd0:	5cd3      	ldrb	r3, [r2, r3]
 800cfd2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800cfd4:	7d3b      	ldrb	r3, [r7, #20]
 800cfd6:	4a24      	ldr	r2, [pc, #144]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cfd8:	5cd3      	ldrb	r3, [r2, r3]
 800cfda:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800cfdc:	7cfb      	ldrb	r3, [r7, #19]
 800cfde:	4a22      	ldr	r2, [pc, #136]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cfe0:	5cd3      	ldrb	r3, [r2, r3]
 800cfe2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800cfe4:	7cbb      	ldrb	r3, [r7, #18]
 800cfe6:	4a20      	ldr	r2, [pc, #128]	@ (800d068 <lorawan_aes_set_key+0x1b8>)
 800cfe8:	5cd3      	ldrb	r3, [r2, r3]
 800cfea:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800cfec:	7dfa      	ldrb	r2, [r7, #23]
 800cfee:	7afb      	ldrb	r3, [r7, #11]
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800cff4:	7c3b      	ldrb	r3, [r7, #16]
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	5cd1      	ldrb	r1, [r2, r3]
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	7d7a      	ldrb	r2, [r7, #21]
 800cffe:	404a      	eors	r2, r1
 800d000:	b2d1      	uxtb	r1, r2
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d006:	7c3b      	ldrb	r3, [r7, #16]
 800d008:	3301      	adds	r3, #1
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	5cd1      	ldrb	r1, [r2, r3]
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	3301      	adds	r3, #1
 800d012:	7d3a      	ldrb	r2, [r7, #20]
 800d014:	404a      	eors	r2, r1
 800d016:	b2d1      	uxtb	r1, r2
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d01c:	7c3b      	ldrb	r3, [r7, #16]
 800d01e:	3302      	adds	r3, #2
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	5cd1      	ldrb	r1, [r2, r3]
 800d024:	7dfb      	ldrb	r3, [r7, #23]
 800d026:	3302      	adds	r3, #2
 800d028:	7cfa      	ldrb	r2, [r7, #19]
 800d02a:	404a      	eors	r2, r1
 800d02c:	b2d1      	uxtb	r1, r2
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d032:	7c3b      	ldrb	r3, [r7, #16]
 800d034:	3303      	adds	r3, #3
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	5cd1      	ldrb	r1, [r2, r3]
 800d03a:	7dfb      	ldrb	r3, [r7, #23]
 800d03c:	3303      	adds	r3, #3
 800d03e:	7cba      	ldrb	r2, [r7, #18]
 800d040:	404a      	eors	r2, r1
 800d042:	b2d1      	uxtb	r1, r2
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	3304      	adds	r3, #4
 800d04c:	75fb      	strb	r3, [r7, #23]
 800d04e:	7dfa      	ldrb	r2, [r7, #23]
 800d050:	7c7b      	ldrb	r3, [r7, #17]
 800d052:	429a      	cmp	r2, r3
 800d054:	f4ff af67 	bcc.w	800cf26 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	00010101 	.word	0x00010101
 800d068:	0801e248 	.word	0x0801e248

0800d06c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08a      	sub	sp, #40	@ 0x28
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d038      	beq.n	800d0f4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	f107 0314 	add.w	r3, r7, #20
 800d088:	68f9      	ldr	r1, [r7, #12]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7ff fc07 	bl	800c89e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d090:	2301      	movs	r3, #1
 800d092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d096:	e014      	b.n	800d0c2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d098:	f107 0314 	add.w	r3, r7, #20
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fd5d 	bl	800cb5c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d0a8:	0112      	lsls	r2, r2, #4
 800d0aa:	441a      	add	r2, r3
 800d0ac:	f107 0314 	add.w	r3, r7, #20
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7ff fcab 	bl	800ca0e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d0bc:	3301      	adds	r3, #1
 800d0be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d0c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d3e3      	bcc.n	800d098 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d0d0:	f107 0314 	add.w	r3, r7, #20
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7ff fca7 	bl	800ca28 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d0e0:	0112      	lsls	r2, r2, #4
 800d0e2:	441a      	add	r2, r3
 800d0e4:	f107 0314 	add.w	r3, r7, #20
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	68b8      	ldr	r0, [r7, #8]
 800d0ec:	f7ff fbd7 	bl	800c89e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e000      	b.n	800d0f6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d0f4:	23ff      	movs	r3, #255	@ 0xff
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3728      	adds	r7, #40	@ 0x28
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800d100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d102:	b0a1      	sub	sp, #132	@ 0x84
 800d104:	af12      	add	r7, sp, #72	@ 0x48
 800d106:	4603      	mov	r3, r0
 800d108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800d10c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d110:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d114:	4611      	mov	r1, r2
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fa12 	bl	800d540 <SecureElementGetKeyByID>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d174      	bne.n	800d20c <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d122:	2300      	movs	r3, #0
 800d124:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d128:	e06c      	b.n	800d204 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800d12a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d12e:	4939      	ldr	r1, [pc, #228]	@ (800d214 <PrintKey+0x114>)
 800d130:	4613      	mov	r3, r2
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	4413      	add	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	440b      	add	r3, r1
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d140:	429a      	cmp	r2, r3
 800d142:	d15a      	bne.n	800d1fa <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800d144:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d148:	4932      	ldr	r1, [pc, #200]	@ (800d214 <PrintKey+0x114>)
 800d14a:	4613      	mov	r3, r2
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	4413      	add	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	440b      	add	r3, r1
 800d154:	3308      	adds	r3, #8
 800d156:	6819      	ldr	r1, [r3, #0]
 800d158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15a:	785b      	ldrb	r3, [r3, #1]
 800d15c:	461d      	mov	r5, r3
 800d15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d160:	789b      	ldrb	r3, [r3, #2]
 800d162:	461e      	mov	r6, r3
 800d164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d166:	78db      	ldrb	r3, [r3, #3]
 800d168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	791b      	ldrb	r3, [r3, #4]
 800d16e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d172:	795b      	ldrb	r3, [r3, #5]
 800d174:	623b      	str	r3, [r7, #32]
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	799b      	ldrb	r3, [r3, #6]
 800d17a:	61fb      	str	r3, [r7, #28]
 800d17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17e:	79db      	ldrb	r3, [r3, #7]
 800d180:	61bb      	str	r3, [r7, #24]
 800d182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d184:	7a1b      	ldrb	r3, [r3, #8]
 800d186:	617b      	str	r3, [r7, #20]
 800d188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d18a:	7a5b      	ldrb	r3, [r3, #9]
 800d18c:	613b      	str	r3, [r7, #16]
 800d18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d190:	7a9b      	ldrb	r3, [r3, #10]
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d196:	7adb      	ldrb	r3, [r3, #11]
 800d198:	60bb      	str	r3, [r7, #8]
 800d19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19c:	7b1b      	ldrb	r3, [r3, #12]
 800d19e:	607b      	str	r3, [r7, #4]
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a2:	7b5b      	ldrb	r3, [r3, #13]
 800d1a4:	461c      	mov	r4, r3
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a8:	7b9b      	ldrb	r3, [r3, #14]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ae:	7bdb      	ldrb	r3, [r3, #15]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b4:	7c1b      	ldrb	r3, [r3, #16]
 800d1b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d1ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800d1bc:	940d      	str	r4, [sp, #52]	@ 0x34
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	920a      	str	r2, [sp, #40]	@ 0x28
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1ce:	697a      	ldr	r2, [r7, #20]
 800d1d0:	9208      	str	r2, [sp, #32]
 800d1d2:	69ba      	ldr	r2, [r7, #24]
 800d1d4:	9207      	str	r2, [sp, #28]
 800d1d6:	69fa      	ldr	r2, [r7, #28]
 800d1d8:	9206      	str	r2, [sp, #24]
 800d1da:	6a3a      	ldr	r2, [r7, #32]
 800d1dc:	9205      	str	r2, [sp, #20]
 800d1de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1e0:	9204      	str	r2, [sp, #16]
 800d1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	9602      	str	r6, [sp, #8]
 800d1e8:	9501      	str	r5, [sp, #4]
 800d1ea:	9100      	str	r1, [sp, #0]
 800d1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d218 <PrintKey+0x118>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	2002      	movs	r0, #2
 800d1f4:	f00f ffe2 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
 800d1f8:	e008      	b.n	800d20c <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d1fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d1fe:	3301      	adds	r3, #1
 800d200:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d204:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d208:	2b0a      	cmp	r3, #10
 800d20a:	d98e      	bls.n	800d12a <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800d20c:	373c      	adds	r7, #60	@ 0x3c
 800d20e:	46bd      	mov	sp, r7
 800d210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d212:	bf00      	nop
 800d214:	0801e548 	.word	0x0801e548
 800d218:	0801ddb4 	.word	0x0801ddb4

0800d21c <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800d21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d21e:	b091      	sub	sp, #68	@ 0x44
 800d220:	af08      	add	r7, sp, #32
 800d222:	4603      	mov	r3, r0
 800d224:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800d22a:	f107 0310 	add.w	r3, r7, #16
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 fbda 	bl	800d9e8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800d234:	7c3b      	ldrb	r3, [r7, #16]
 800d236:	7c7a      	ldrb	r2, [r7, #17]
 800d238:	7cb9      	ldrb	r1, [r7, #18]
 800d23a:	7cf8      	ldrb	r0, [r7, #19]
 800d23c:	7d3c      	ldrb	r4, [r7, #20]
 800d23e:	7d7d      	ldrb	r5, [r7, #21]
 800d240:	7dbe      	ldrb	r6, [r7, #22]
 800d242:	f897 c017 	ldrb.w	ip, [r7, #23]
 800d246:	f8cd c01c 	str.w	ip, [sp, #28]
 800d24a:	9606      	str	r6, [sp, #24]
 800d24c:	9505      	str	r5, [sp, #20]
 800d24e:	9404      	str	r4, [sp, #16]
 800d250:	9003      	str	r0, [sp, #12]
 800d252:	9102      	str	r1, [sp, #8]
 800d254:	9201      	str	r2, [sp, #4]
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	4b24      	ldr	r3, [pc, #144]	@ (800d2ec <PrintIds+0xd0>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	2100      	movs	r1, #0
 800d25e:	2002      	movs	r0, #2
 800d260:	f00f ffac 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800d264:	f107 0318 	add.w	r3, r7, #24
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 fbed 	bl	800da48 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800d26e:	7e3b      	ldrb	r3, [r7, #24]
 800d270:	7e7a      	ldrb	r2, [r7, #25]
 800d272:	7eb9      	ldrb	r1, [r7, #26]
 800d274:	7ef8      	ldrb	r0, [r7, #27]
 800d276:	7f3c      	ldrb	r4, [r7, #28]
 800d278:	7f7d      	ldrb	r5, [r7, #29]
 800d27a:	7fbe      	ldrb	r6, [r7, #30]
 800d27c:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800d280:	f8cd c01c 	str.w	ip, [sp, #28]
 800d284:	9606      	str	r6, [sp, #24]
 800d286:	9505      	str	r5, [sp, #20]
 800d288:	9404      	str	r4, [sp, #16]
 800d28a:	9003      	str	r0, [sp, #12]
 800d28c:	9102      	str	r1, [sp, #8]
 800d28e:	9201      	str	r2, [sp, #4]
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	4b17      	ldr	r3, [pc, #92]	@ (800d2f0 <PrintIds+0xd4>)
 800d294:	2200      	movs	r2, #0
 800d296:	2100      	movs	r1, #0
 800d298:	2002      	movs	r0, #2
 800d29a:	f00f ff8f 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800d29e:	f107 020c 	add.w	r2, r7, #12
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 fc00 	bl	800daac <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d2ac:	f107 030c 	add.w	r3, r7, #12
 800d2b0:	3303      	adds	r3, #3
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	f107 030c 	add.w	r3, r7, #12
 800d2ba:	3302      	adds	r3, #2
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	f107 030c 	add.w	r3, r7, #12
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f107 030c 	add.w	r3, r7, #12
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	9303      	str	r3, [sp, #12]
 800d2d2:	9002      	str	r0, [sp, #8]
 800d2d4:	9101      	str	r1, [sp, #4]
 800d2d6:	9200      	str	r2, [sp, #0]
 800d2d8:	4b06      	ldr	r3, [pc, #24]	@ (800d2f4 <PrintIds+0xd8>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2100      	movs	r1, #0
 800d2de:	2002      	movs	r0, #2
 800d2e0:	f00f ff6c 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800d2e4:	bf00      	nop
 800d2e6:	3724      	adds	r7, #36	@ 0x24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ec:	0801de10 	.word	0x0801de10
 800d2f0:	0801de50 	.word	0x0801de50
 800d2f4:	0801de90 	.word	0x0801de90

0800d2f8 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d304:	2300      	movs	r3, #0
 800d306:	73fb      	strb	r3, [r7, #15]
 800d308:	e01a      	b.n	800d340 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d30a:	4b12      	ldr	r3, [pc, #72]	@ (800d354 <GetKeyByID+0x5c>)
 800d30c:	6819      	ldr	r1, [r3, #0]
 800d30e:	7bfa      	ldrb	r2, [r7, #15]
 800d310:	4613      	mov	r3, r2
 800d312:	011b      	lsls	r3, r3, #4
 800d314:	4413      	add	r3, r2
 800d316:	440b      	add	r3, r1
 800d318:	3318      	adds	r3, #24
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	79fa      	ldrb	r2, [r7, #7]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d10b      	bne.n	800d33a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d322:	4b0c      	ldr	r3, [pc, #48]	@ (800d354 <GetKeyByID+0x5c>)
 800d324:	6819      	ldr	r1, [r3, #0]
 800d326:	7bfa      	ldrb	r2, [r7, #15]
 800d328:	4613      	mov	r3, r2
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	4413      	add	r3, r2
 800d32e:	3318      	adds	r3, #24
 800d330:	18ca      	adds	r2, r1, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d336:	2300      	movs	r3, #0
 800d338:	e006      	b.n	800d348 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	3301      	adds	r3, #1
 800d33e:	73fb      	strb	r3, [r7, #15]
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	2b0a      	cmp	r3, #10
 800d344:	d9e1      	bls.n	800d30a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d346:	2303      	movs	r3, #3
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bc80      	pop	{r7}
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	20000508 	.word	0x20000508

0800d358 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800d358:	b590      	push	{r4, r7, lr}
 800d35a:	b0d1      	sub	sp, #324	@ 0x144
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800d362:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800d366:	6020      	str	r0, [r4, #0]
 800d368:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800d36c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d370:	6001      	str	r1, [r0, #0]
 800d372:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d376:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800d37a:	600a      	str	r2, [r1, #0]
 800d37c:	461a      	mov	r2, r3
 800d37e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d382:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d386:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d388:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d38c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d003      	beq.n	800d39e <ComputeCmac+0x46>
 800d396:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d101      	bne.n	800d3a2 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d39e:	2302      	movs	r3, #2
 800d3a0:	e05d      	b.n	800d45e <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d3a2:	f107 0314 	add.w	r3, r7, #20
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe ff02 	bl	800c1b0 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d3ac:	f107 0210 	add.w	r2, r7, #16
 800d3b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d3b4:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff ff9b 	bl	800d2f8 <GetKeyByID>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d3c8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d144      	bne.n	800d45a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d3d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d3d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	f107 0314 	add.w	r3, r7, #20
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe fefd 	bl	800c1e2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d3e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d3ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d009      	beq.n	800d40a <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800d3f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d3fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d3fe:	f107 0014 	add.w	r0, r7, #20
 800d402:	2210      	movs	r2, #16
 800d404:	6819      	ldr	r1, [r3, #0]
 800d406:	f7fe fefb 	bl	800c200 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d40a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d40e:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800d412:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d416:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d41a:	f107 0014 	add.w	r0, r7, #20
 800d41e:	6812      	ldr	r2, [r2, #0]
 800d420:	6819      	ldr	r1, [r3, #0]
 800d422:	f7fe feed 	bl	800c200 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d426:	f107 0214 	add.w	r2, r7, #20
 800d42a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800d42e:	4611      	mov	r1, r2
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe ffa7 	bl	800c384 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800d436:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800d43a:	461a      	mov	r2, r3
 800d43c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800d440:	021b      	lsls	r3, r3, #8
 800d442:	431a      	orrs	r2, r3
 800d444:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800d448:	041b      	lsls	r3, r3, #16
 800d44a:	431a      	orrs	r2, r3
 800d44c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d450:	061b      	lsls	r3, r3, #24
 800d452:	431a      	orrs	r2, r3
 800d454:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d458:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d45a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800d45e:	4618      	mov	r0, r3
 800d460:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d464:	46bd      	mov	sp, r7
 800d466:	bd90      	pop	{r4, r7, pc}

0800d468 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d476:	2302      	movs	r3, #2
 800d478:	e00a      	b.n	800d490 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800d47a:	4a07      	ldr	r2, [pc, #28]	@ (800d498 <SecureElementInit+0x30>)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800d480:	4b05      	ldr	r3, [pc, #20]	@ (800d498 <SecureElementInit+0x30>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	22d8      	movs	r2, #216	@ 0xd8
 800d486:	4905      	ldr	r1, [pc, #20]	@ (800d49c <SecureElementInit+0x34>)
 800d488:	4618      	mov	r0, r3
 800d48a:	f00b fb40 	bl	8018b0e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20000508 	.word	0x20000508
 800d49c:	0801e764 	.word	0x0801e764

0800d4a0 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800d4ae:	f107 030c 	add.w	r3, r7, #12
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 fa98 	bl	800d9e8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800d4b8:	f107 0308 	add.w	r3, r7, #8
 800d4bc:	4619      	mov	r1, r3
 800d4be:	2001      	movs	r0, #1
 800d4c0:	f000 faf4 	bl	800daac <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d024      	beq.n	800d514 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75bb      	strb	r3, [r7, #22]
 800d4d2:	e00c      	b.n	800d4ee <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800d4d4:	7dbb      	ldrb	r3, [r7, #22]
 800d4d6:	3318      	adds	r3, #24
 800d4d8:	443b      	add	r3, r7
 800d4da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d002      	beq.n	800d4e8 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	75fb      	strb	r3, [r7, #23]
                break;
 800d4e6:	e005      	b.n	800d4f4 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d4e8:	7dbb      	ldrb	r3, [r7, #22]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	75bb      	strb	r3, [r7, #22]
 800d4ee:	7dbb      	ldrb	r3, [r7, #22]
 800d4f0:	2b07      	cmp	r3, #7
 800d4f2:	d9ef      	bls.n	800d4d4 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
 800d4f6:	f083 0301 	eor.w	r3, r3, #1
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d009      	beq.n	800d514 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800d500:	f107 020c 	add.w	r2, r7, #12
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4610      	mov	r0, r2
 800d508:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800d50a:	f107 030c 	add.w	r3, r7, #12
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fa52 	bl	800d9b8 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00c      	beq.n	800d534 <SecureElementInitMcuID+0x94>
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d109      	bne.n	800d534 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800d520:	f107 0208 	add.w	r2, r7, #8
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	4610      	mov	r0, r2
 800d528:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	4619      	mov	r1, r3
 800d52e:	2001      	movs	r0, #1
 800d530:	f000 faa2 	bl	800da78 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
	...

0800d540 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	4603      	mov	r3, r0
 800d548:	6039      	str	r1, [r7, #0]
 800d54a:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d54c:	2300      	movs	r3, #0
 800d54e:	73fb      	strb	r3, [r7, #15]
 800d550:	e01a      	b.n	800d588 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d552:	4b12      	ldr	r3, [pc, #72]	@ (800d59c <SecureElementGetKeyByID+0x5c>)
 800d554:	6819      	ldr	r1, [r3, #0]
 800d556:	7bfa      	ldrb	r2, [r7, #15]
 800d558:	4613      	mov	r3, r2
 800d55a:	011b      	lsls	r3, r3, #4
 800d55c:	4413      	add	r3, r2
 800d55e:	440b      	add	r3, r1
 800d560:	3318      	adds	r3, #24
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	79fa      	ldrb	r2, [r7, #7]
 800d566:	429a      	cmp	r2, r3
 800d568:	d10b      	bne.n	800d582 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d56a:	4b0c      	ldr	r3, [pc, #48]	@ (800d59c <SecureElementGetKeyByID+0x5c>)
 800d56c:	6819      	ldr	r1, [r3, #0]
 800d56e:	7bfa      	ldrb	r2, [r7, #15]
 800d570:	4613      	mov	r3, r2
 800d572:	011b      	lsls	r3, r3, #4
 800d574:	4413      	add	r3, r2
 800d576:	3318      	adds	r3, #24
 800d578:	18ca      	adds	r2, r1, r3
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d57e:	2300      	movs	r3, #0
 800d580:	e006      	b.n	800d590 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d582:	7bfb      	ldrb	r3, [r7, #15]
 800d584:	3301      	adds	r3, #1
 800d586:	73fb      	strb	r3, [r7, #15]
 800d588:	7bfb      	ldrb	r3, [r7, #15]
 800d58a:	2b0a      	cmp	r3, #10
 800d58c:	d9e1      	bls.n	800d552 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d58e:	2303      	movs	r3, #3
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	bc80      	pop	{r7}
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	20000508 	.word	0x20000508

0800d5a0 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	f7ff fdab 	bl	800d100 <PrintKey>
    PrintKey( NWK_KEY );
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	f7ff fda8 	bl	800d100 <PrintKey>
    PrintKey( APP_S_KEY );
 800d5b0:	2009      	movs	r0, #9
 800d5b2:	f7ff fda5 	bl	800d100 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d5b6:	2008      	movs	r0, #8
 800d5b8:	f7ff fda2 	bl	800d100 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f7ff fe2d 	bl	800d21c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800d5d2:	200b      	movs	r0, #11
 800d5d4:	f7ff fd94 	bl	800d100 <PrintKey>
    PrintKey( MC_KE_KEY );
 800d5d8:	200c      	movs	r0, #12
 800d5da:	f7ff fd91 	bl	800d100 <PrintKey>
    PrintKey( APP_S_KEY );
 800d5de:	2009      	movs	r0, #9
 800d5e0:	f7ff fd8e 	bl	800d100 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d5e4:	2008      	movs	r0, #8
 800d5e6:	f7ff fd8b 	bl	800d100 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800d5ea:	200a      	movs	r0, #10
 800d5ec:	f7ff fd88 	bl	800d100 <PrintKey>
    PrintIds( mode );
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff fe12 	bl	800d21c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	6039      	str	r1, [r7, #0]
 800d60e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d616:	2302      	movs	r3, #2
 800d618:	e04c      	b.n	800d6b4 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d61a:	2300      	movs	r3, #0
 800d61c:	77fb      	strb	r3, [r7, #31]
 800d61e:	e045      	b.n	800d6ac <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d620:	4b26      	ldr	r3, [pc, #152]	@ (800d6bc <SecureElementSetKey+0xb8>)
 800d622:	6819      	ldr	r1, [r3, #0]
 800d624:	7ffa      	ldrb	r2, [r7, #31]
 800d626:	4613      	mov	r3, r2
 800d628:	011b      	lsls	r3, r3, #4
 800d62a:	4413      	add	r3, r2
 800d62c:	440b      	add	r3, r1
 800d62e:	3318      	adds	r3, #24
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	79fa      	ldrb	r2, [r7, #7]
 800d634:	429a      	cmp	r2, r3
 800d636:	d136      	bne.n	800d6a6 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	2b0d      	cmp	r3, #13
 800d63c:	d123      	bne.n	800d686 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d63e:	2306      	movs	r3, #6
 800d640:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	f107 0310 	add.w	r3, r7, #16
 800d64a:	2200      	movs	r2, #0
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	605a      	str	r2, [r3, #4]
 800d650:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800d652:	f107 030c 	add.w	r3, r7, #12
 800d656:	220c      	movs	r2, #12
 800d658:	2110      	movs	r1, #16
 800d65a:	6838      	ldr	r0, [r7, #0]
 800d65c:	f000 f876 	bl	800d74c <SecureElementAesEncrypt>
 800d660:	4603      	mov	r3, r0
 800d662:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d664:	4b15      	ldr	r3, [pc, #84]	@ (800d6bc <SecureElementSetKey+0xb8>)
 800d666:	6819      	ldr	r1, [r3, #0]
 800d668:	7ffa      	ldrb	r2, [r7, #31]
 800d66a:	4613      	mov	r3, r2
 800d66c:	011b      	lsls	r3, r3, #4
 800d66e:	4413      	add	r3, r2
 800d670:	3318      	adds	r3, #24
 800d672:	440b      	add	r3, r1
 800d674:	3301      	adds	r3, #1
 800d676:	f107 010c 	add.w	r1, r7, #12
 800d67a:	2210      	movs	r2, #16
 800d67c:	4618      	mov	r0, r3
 800d67e:	f00b fa46 	bl	8018b0e <memcpy1>
                return retval;
 800d682:	7fbb      	ldrb	r3, [r7, #30]
 800d684:	e016      	b.n	800d6b4 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d686:	4b0d      	ldr	r3, [pc, #52]	@ (800d6bc <SecureElementSetKey+0xb8>)
 800d688:	6819      	ldr	r1, [r3, #0]
 800d68a:	7ffa      	ldrb	r2, [r7, #31]
 800d68c:	4613      	mov	r3, r2
 800d68e:	011b      	lsls	r3, r3, #4
 800d690:	4413      	add	r3, r2
 800d692:	3318      	adds	r3, #24
 800d694:	440b      	add	r3, r1
 800d696:	3301      	adds	r3, #1
 800d698:	2210      	movs	r2, #16
 800d69a:	6839      	ldr	r1, [r7, #0]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f00b fa36 	bl	8018b0e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	e006      	b.n	800d6b4 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d6a6:	7ffb      	ldrb	r3, [r7, #31]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	77fb      	strb	r3, [r7, #31]
 800d6ac:	7ffb      	ldrb	r3, [r7, #31]
 800d6ae:	2b0a      	cmp	r3, #10
 800d6b0:	d9b6      	bls.n	800d620 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d6b2:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3720      	adds	r7, #32
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20000508 	.word	0x20000508

0800d6c0 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af02      	add	r7, sp, #8
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
 800d6cc:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800d6ce:	78fb      	ldrb	r3, [r7, #3]
 800d6d0:	2b0b      	cmp	r3, #11
 800d6d2:	d901      	bls.n	800d6d8 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	e009      	b.n	800d6ec <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d6d8:	78fa      	ldrb	r2, [r7, #3]
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	68b9      	ldr	r1, [r7, #8]
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f7ff fe37 	bl	800d358 <ComputeCmac>
 800d6ea:	4603      	mov	r3, r0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af02      	add	r7, sp, #8
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
 800d700:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d101      	bne.n	800d70c <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d708:	2302      	movs	r3, #2
 800d70a:	e01b      	b.n	800d744 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d70c:	2306      	movs	r3, #6
 800d70e:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	f107 0310 	add.w	r3, r7, #16
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4613      	mov	r3, r2
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	68f9      	ldr	r1, [r7, #12]
 800d722:	2000      	movs	r0, #0
 800d724:	f7ff fe18 	bl	800d358 <ComputeCmac>
 800d728:	4603      	mov	r3, r0
 800d72a:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	e006      	b.n	800d744 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d001      	beq.n	800d742 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d73e:	2301      	movs	r3, #1
 800d740:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d742:	7dfb      	ldrb	r3, [r7, #23]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b0c2      	sub	sp, #264	@ 0x108
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d758:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800d75c:	6001      	str	r1, [r0, #0]
 800d75e:	4611      	mov	r1, r2
 800d760:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d764:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d768:	6013      	str	r3, [r2, #0]
 800d76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d76e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d772:	460a      	mov	r2, r1
 800d774:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d006      	beq.n	800d78a <SecureElementAesEncrypt+0x3e>
 800d77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d78a:	2302      	movs	r3, #2
 800d78c:	e059      	b.n	800d842 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800d78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d792:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f003 030f 	and.w	r3, r3, #15
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d7a0:	2305      	movs	r3, #5
 800d7a2:	e04e      	b.n	800d842 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d7a4:	f107 0314 	add.w	r3, r7, #20
 800d7a8:	22f0      	movs	r2, #240	@ 0xf0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f00b f9e9 	bl	8018b84 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d7b2:	f107 0210 	add.w	r2, r7, #16
 800d7b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ba:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7ff fd98 	bl	800d2f8 <GetKeyByID>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d7ce:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d133      	bne.n	800d83e <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	f107 0214 	add.w	r2, r7, #20
 800d7de:	2110      	movs	r1, #16
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7ff fb65 	bl	800ceb0 <lorawan_aes_set_key>

        uint8_t block = 0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800d7ec:	e020      	b.n	800d830 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800d7ee:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	18d0      	adds	r0, r2, r3
 800d7f6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d7fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d7fe:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d802:	6812      	ldr	r2, [r2, #0]
 800d804:	4413      	add	r3, r2
 800d806:	f107 0214 	add.w	r2, r7, #20
 800d80a:	4619      	mov	r1, r3
 800d80c:	f7ff fc2e 	bl	800d06c <lorawan_aes_encrypt>
            block = block + 16;
 800d810:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d814:	3310      	adds	r3, #16
 800d816:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800d81a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d81e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d822:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d826:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800d82a:	6812      	ldr	r2, [r2, #0]
 800d82c:	3a10      	subs	r2, #16
 800d82e:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800d830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d834:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1d7      	bne.n	800d7ee <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d83e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800d842:	4618      	mov	r0, r3
 800d844:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	460b      	mov	r3, r1
 800d856:	70fb      	strb	r3, [r7, #3]
 800d858:	4613      	mov	r3, r2
 800d85a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d862:	2302      	movs	r3, #2
 800d864:	e02e      	b.n	800d8c4 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d866:	2306      	movs	r3, #6
 800d868:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800d86a:	78bb      	ldrb	r3, [r7, #2]
 800d86c:	2b0c      	cmp	r3, #12
 800d86e:	d104      	bne.n	800d87a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d870:	78fb      	ldrb	r3, [r7, #3]
 800d872:	2b0b      	cmp	r3, #11
 800d874:	d001      	beq.n	800d87a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d876:	2303      	movs	r3, #3
 800d878:	e024      	b.n	800d8c4 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	f107 0310 	add.w	r3, r7, #16
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	605a      	str	r2, [r3, #4]
 800d888:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800d88a:	f107 030c 	add.w	r3, r7, #12
 800d88e:	78fa      	ldrb	r2, [r7, #3]
 800d890:	2110      	movs	r1, #16
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff ff5a 	bl	800d74c <SecureElementAesEncrypt>
 800d898:	4603      	mov	r3, r0
 800d89a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d89c:	7ffb      	ldrb	r3, [r7, #31]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d001      	beq.n	800d8a6 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d8a2:	7ffb      	ldrb	r3, [r7, #31]
 800d8a4:	e00e      	b.n	800d8c4 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800d8a6:	f107 020c 	add.w	r2, r7, #12
 800d8aa:	78bb      	ldrb	r3, [r7, #2]
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fea8 	bl	800d604 <SecureElementSetKey>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d8b8:	7ffb      	ldrb	r3, [r7, #31]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d001      	beq.n	800d8c2 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d8be:	7ffb      	ldrb	r3, [r7, #31]
 800d8c0:	e000      	b.n	800d8c4 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d8c2:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3720      	adds	r7, #32
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60b9      	str	r1, [r7, #8]
 800d8d4:	607b      	str	r3, [r7, #4]
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73fb      	strb	r3, [r7, #15]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d005      	beq.n	800d8f0 <SecureElementProcessJoinAccept+0x24>
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d002      	beq.n	800d8f0 <SecureElementProcessJoinAccept+0x24>
 800d8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	e05c      	b.n	800d9ae <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d8f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8f8:	2b21      	cmp	r3, #33	@ 0x21
 800d8fa:	d901      	bls.n	800d900 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d8fc:	2305      	movs	r3, #5
 800d8fe:	e056      	b.n	800d9ae <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d900:	2301      	movs	r3, #1
 800d902:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d904:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d908:	b29b      	uxth	r3, r3
 800d90a:	461a      	mov	r2, r3
 800d90c:	6879      	ldr	r1, [r7, #4]
 800d90e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d910:	f00b f8fd 	bl	8018b0e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	1c58      	adds	r0, r3, #1
 800d918:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	4619      	mov	r1, r3
 800d920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d922:	3301      	adds	r3, #1
 800d924:	7dfa      	ldrb	r2, [r7, #23]
 800d926:	f7ff ff11 	bl	800d74c <SecureElementAesEncrypt>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d930:	2307      	movs	r3, #7
 800d932:	e03c      	b.n	800d9ae <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d936:	330b      	adds	r3, #11
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	09db      	lsrs	r3, r3, #7
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d940:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800d942:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d946:	3b04      	subs	r3, #4
 800d948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d94a:	4413      	add	r3, r2
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	4619      	mov	r1, r3
 800d950:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d954:	3b03      	subs	r3, #3
 800d956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d958:	4413      	add	r3, r2
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	021b      	lsls	r3, r3, #8
 800d95e:	ea41 0203 	orr.w	r2, r1, r3
 800d962:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d966:	3b02      	subs	r3, #2
 800d968:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d96a:	440b      	add	r3, r1
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	041b      	lsls	r3, r3, #16
 800d970:	431a      	orrs	r2, r3
 800d972:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d976:	3b01      	subs	r3, #1
 800d978:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d97a:	440b      	add	r3, r1
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	061b      	lsls	r3, r3, #24
 800d980:	4313      	orrs	r3, r2
 800d982:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800d984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10d      	bne.n	800d9a8 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d98c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d990:	3b04      	subs	r3, #4
 800d992:	4619      	mov	r1, r3
 800d994:	2301      	movs	r3, #1
 800d996:	693a      	ldr	r2, [r7, #16]
 800d998:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d99a:	f7ff feab 	bl	800d6f4 <SecureElementVerifyAesCmac>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d003      	beq.n	800d9ac <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e002      	b.n	800d9ae <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d9a8:	2304      	movs	r3, #4
 800d9aa:	e000      	b.n	800d9ae <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
	...

0800d9b8 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	e007      	b.n	800d9da <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800d9ca:	4b06      	ldr	r3, [pc, #24]	@ (800d9e4 <SecureElementSetDevEui+0x2c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2208      	movs	r2, #8
 800d9d0:	6879      	ldr	r1, [r7, #4]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f00b f89b 	bl	8018b0e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d9d8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20000508 	.word	0x20000508

0800d9e8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d101      	bne.n	800d9fa <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9f6:	2302      	movs	r3, #2
 800d9f8:	e007      	b.n	800da0a <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800d9fa:	4b06      	ldr	r3, [pc, #24]	@ (800da14 <SecureElementGetDevEui+0x2c>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2208      	movs	r2, #8
 800da00:	4619      	mov	r1, r3
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f00b f883 	bl	8018b0e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800da08:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	20000508 	.word	0x20000508

0800da18 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800da26:	2302      	movs	r3, #2
 800da28:	e008      	b.n	800da3c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800da2a:	4b06      	ldr	r3, [pc, #24]	@ (800da44 <SecureElementSetJoinEui+0x2c>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3308      	adds	r3, #8
 800da30:	2208      	movs	r2, #8
 800da32:	6879      	ldr	r1, [r7, #4]
 800da34:	4618      	mov	r0, r3
 800da36:	f00b f86a 	bl	8018b0e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800da3a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	20000508 	.word	0x20000508

0800da48 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800da56:	2302      	movs	r3, #2
 800da58:	e008      	b.n	800da6c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800da5a:	4b06      	ldr	r3, [pc, #24]	@ (800da74 <SecureElementGetJoinEui+0x2c>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3308      	adds	r3, #8
 800da60:	2208      	movs	r2, #8
 800da62:	4619      	mov	r1, r3
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f00b f852 	bl	8018b0e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800da6a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	20000508 	.word	0x20000508

0800da78 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	4603      	mov	r3, r0
 800da80:	6039      	str	r1, [r7, #0]
 800da82:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800da84:	79fb      	ldrb	r3, [r7, #7]
 800da86:	2b02      	cmp	r3, #2
 800da88:	d104      	bne.n	800da94 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800da8a:	4b07      	ldr	r3, [pc, #28]	@ (800daa8 <SecureElementSetDevAddr+0x30>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	683a      	ldr	r2, [r7, #0]
 800da90:	611a      	str	r2, [r3, #16]
 800da92:	e003      	b.n	800da9c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800da94:	4b04      	ldr	r3, [pc, #16]	@ (800daa8 <SecureElementSetDevAddr+0x30>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800da9c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bc80      	pop	{r7}
 800daa6:	4770      	bx	lr
 800daa8:	20000508 	.word	0x20000508

0800daac <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4603      	mov	r3, r0
 800dab4:	6039      	str	r1, [r7, #0]
 800dab6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dabe:	2302      	movs	r3, #2
 800dac0:	e00e      	b.n	800dae0 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d105      	bne.n	800dad4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800dac8:	4b08      	ldr	r3, [pc, #32]	@ (800daec <SecureElementGetDevAddr+0x40>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	691a      	ldr	r2, [r3, #16]
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	e004      	b.n	800dade <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800dad4:	4b05      	ldr	r3, [pc, #20]	@ (800daec <SecureElementGetDevAddr+0x40>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	695a      	ldr	r2, [r3, #20]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800dade:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bc80      	pop	{r7}
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	20000508 	.word	0x20000508

0800daf0 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800dafa:	4a29      	ldr	r2, [pc, #164]	@ (800dba0 <LmHandlerInit+0xb0>)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800db00:	4b28      	ldr	r3, [pc, #160]	@ (800dba4 <LmHandlerInit+0xb4>)
 800db02:	4a29      	ldr	r2, [pc, #164]	@ (800dba8 <LmHandlerInit+0xb8>)
 800db04:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800db06:	4b27      	ldr	r3, [pc, #156]	@ (800dba4 <LmHandlerInit+0xb4>)
 800db08:	4a28      	ldr	r2, [pc, #160]	@ (800dbac <LmHandlerInit+0xbc>)
 800db0a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800db0c:	4b25      	ldr	r3, [pc, #148]	@ (800dba4 <LmHandlerInit+0xb4>)
 800db0e:	4a28      	ldr	r2, [pc, #160]	@ (800dbb0 <LmHandlerInit+0xc0>)
 800db10:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800db12:	4b24      	ldr	r3, [pc, #144]	@ (800dba4 <LmHandlerInit+0xb4>)
 800db14:	4a27      	ldr	r2, [pc, #156]	@ (800dbb4 <LmHandlerInit+0xc4>)
 800db16:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800db18:	4b21      	ldr	r3, [pc, #132]	@ (800dba0 <LmHandlerInit+0xb0>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a26      	ldr	r2, [pc, #152]	@ (800dbb8 <LmHandlerInit+0xc8>)
 800db20:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800db22:	4b1f      	ldr	r3, [pc, #124]	@ (800dba0 <LmHandlerInit+0xb0>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	4a23      	ldr	r2, [pc, #140]	@ (800dbb8 <LmHandlerInit+0xc8>)
 800db2a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800db2c:	4b1c      	ldr	r3, [pc, #112]	@ (800dba0 <LmHandlerInit+0xb0>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	4a21      	ldr	r2, [pc, #132]	@ (800dbb8 <LmHandlerInit+0xc8>)
 800db34:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800db36:	4b1a      	ldr	r3, [pc, #104]	@ (800dba0 <LmHandlerInit+0xb0>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	4a1e      	ldr	r2, [pc, #120]	@ (800dbb8 <LmHandlerInit+0xc8>)
 800db3e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800db40:	4b1d      	ldr	r3, [pc, #116]	@ (800dbb8 <LmHandlerInit+0xc8>)
 800db42:	4a1e      	ldr	r2, [pc, #120]	@ (800dbbc <LmHandlerInit+0xcc>)
 800db44:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800db46:	4b16      	ldr	r3, [pc, #88]	@ (800dba0 <LmHandlerInit+0xb0>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	4a1a      	ldr	r2, [pc, #104]	@ (800dbb8 <LmHandlerInit+0xc8>)
 800db4e:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	4a1b      	ldr	r2, [pc, #108]	@ (800dbc0 <LmHandlerInit+0xd0>)
 800db54:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800db56:	4b12      	ldr	r3, [pc, #72]	@ (800dba0 <LmHandlerInit+0xb0>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db5c:	4a18      	ldr	r2, [pc, #96]	@ (800dbc0 <LmHandlerInit+0xd0>)
 800db5e:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800db60:	4b17      	ldr	r3, [pc, #92]	@ (800dbc0 <LmHandlerInit+0xd0>)
 800db62:	4a18      	ldr	r2, [pc, #96]	@ (800dbc4 <LmHandlerInit+0xd4>)
 800db64:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800db66:	4b16      	ldr	r3, [pc, #88]	@ (800dbc0 <LmHandlerInit+0xd0>)
 800db68:	4a17      	ldr	r2, [pc, #92]	@ (800dbc8 <LmHandlerInit+0xd8>)
 800db6a:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800db6c:	4914      	ldr	r1, [pc, #80]	@ (800dbc0 <LmHandlerInit+0xd0>)
 800db6e:	2000      	movs	r0, #0
 800db70:	f000 fdc0 	bl	800e6f4 <LmHandlerPackageRegister>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d002      	beq.n	800db80 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800db7a:	f04f 33ff 	mov.w	r3, #4294967295
 800db7e:	e00a      	b.n	800db96 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800db80:	463b      	mov	r3, r7
 800db82:	4618      	mov	r0, r3
 800db84:	f001 fd36 	bl	800f5f4 <LmhpPackagesRegistrationInit>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800db8e:	f04f 33ff 	mov.w	r3, #4294967295
 800db92:	e000      	b.n	800db96 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	20000560 	.word	0x20000560
 800dba4:	20000564 	.word	0x20000564
 800dba8:	0800e3cd 	.word	0x0800e3cd
 800dbac:	0800e441 	.word	0x0800e441
 800dbb0:	0800e511 	.word	0x0800e511
 800dbb4:	0800e661 	.word	0x0800e661
 800dbb8:	20000574 	.word	0x20000574
 800dbbc:	0800eba1 	.word	0x0800eba1
 800dbc0:	20000524 	.word	0x20000524
 800dbc4:	0800e9b5 	.word	0x0800e9b5
 800dbc8:	0800e9ed 	.word	0x0800e9ed

0800dbcc <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b092      	sub	sp, #72	@ 0x48
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800dbd4:	2218      	movs	r2, #24
 800dbd6:	6879      	ldr	r1, [r7, #4]
 800dbd8:	488a      	ldr	r0, [pc, #552]	@ (800de04 <LmHandlerConfigure+0x238>)
 800dbda:	f00a ff98 	bl	8018b0e <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800dbde:	4b8a      	ldr	r3, [pc, #552]	@ (800de08 <LmHandlerConfigure+0x23c>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800dbe4:	f7fe faa2 	bl	800c12c <LoraInfo_GetPtr>
 800dbe8:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800dbea:	4b86      	ldr	r3, [pc, #536]	@ (800de04 <LmHandlerConfigure+0x238>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	4093      	lsls	r3, r2
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d107      	bne.n	800dc10 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800dc00:	4b82      	ldr	r3, [pc, #520]	@ (800de0c <LmHandlerConfigure+0x240>)
 800dc02:	2201      	movs	r2, #1
 800dc04:	2100      	movs	r1, #0
 800dc06:	2000      	movs	r0, #0
 800dc08:	f00f fad8 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800dc0c:	bf00      	nop
 800dc0e:	e7fd      	b.n	800dc0c <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800dc10:	4b7c      	ldr	r3, [pc, #496]	@ (800de04 <LmHandlerConfigure+0x238>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	461a      	mov	r2, r3
 800dc16:	497e      	ldr	r1, [pc, #504]	@ (800de10 <LmHandlerConfigure+0x244>)
 800dc18:	487e      	ldr	r0, [pc, #504]	@ (800de14 <LmHandlerConfigure+0x248>)
 800dc1a:	f005 f80d 	bl	8012c38 <LoRaMacInitialization>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc24:	f04f 33ff 	mov.w	r3, #4294967295
 800dc28:	e0e8      	b.n	800ddfc <LmHandlerConfigure+0x230>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800dc2a:	2327      	movs	r3, #39	@ 0x27
 800dc2c:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dc2e:	f107 0318 	add.w	r3, r7, #24
 800dc32:	4618      	mov	r0, r3
 800dc34:	f005 fd8c 	bl	8013750 <LoRaMacMibSetRequestConfirm>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d103      	bne.n	800dc46 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800dc3e:	4b76      	ldr	r3, [pc, #472]	@ (800de18 <LmHandlerConfigure+0x24c>)
 800dc40:	2201      	movs	r2, #1
 800dc42:	701a      	strb	r2, [r3, #0]
 800dc44:	e02a      	b.n	800dc9c <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800dc46:	2328      	movs	r3, #40	@ 0x28
 800dc48:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800dc4a:	4b74      	ldr	r3, [pc, #464]	@ (800de1c <LmHandlerConfigure+0x250>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00c      	beq.n	800dc6e <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dc54:	f107 0318 	add.w	r3, r7, #24
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f005 fba1 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800dc5e:	4b6f      	ldr	r3, [pc, #444]	@ (800de1c <LmHandlerConfigure+0x250>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	69fa      	ldr	r2, [r7, #28]
 800dc66:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800dc6e:	2327      	movs	r3, #39	@ 0x27
 800dc70:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dc72:	f107 0318 	add.w	r3, r7, #24
 800dc76:	4618      	mov	r0, r3
 800dc78:	f005 fd6a 	bl	8013750 <LoRaMacMibSetRequestConfirm>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d10c      	bne.n	800dc9c <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dc82:	2301      	movs	r3, #1
 800dc84:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dc86:	f107 0318 	add.w	r3, r7, #24
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f005 fb88 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dc90:	7f3b      	ldrb	r3, [r7, #28]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d002      	beq.n	800dc9c <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800dc96:	4b60      	ldr	r3, [pc, #384]	@ (800de18 <LmHandlerConfigure+0x24c>)
 800dc98:	2201      	movs	r2, #1
 800dc9a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800dc9c:	4b5e      	ldr	r3, [pc, #376]	@ (800de18 <LmHandlerConfigure+0x24c>)
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d02e      	beq.n	800dd02 <LmHandlerConfigure+0x136>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800dca4:	4b5d      	ldr	r3, [pc, #372]	@ (800de1c <LmHandlerConfigure+0x250>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d004      	beq.n	800dcb8 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800dcae:	4b5b      	ldr	r3, [pc, #364]	@ (800de1c <LmHandlerConfigure+0x250>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	69db      	ldr	r3, [r3, #28]
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	4798      	blx	r3
        }

        //BZ #156695
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800dcb8:	f000 f98e 	bl	800dfd8 <LmHandlerJoinStatus>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d106      	bne.n	800dcd0 <LmHandlerConfigure+0x104>
 800dcc2:	f002 fc99 	bl	80105f8 <LoRaMacIsStopped>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <LmHandlerConfigure+0x104>
        { 
            LoRaMacStart();
 800dccc:	f005 fa6a 	bl	80131a4 <LoRaMacStart>
        }

        mibReq.Type = MIB_NVM_CTXS;
 800dcd0:	2327      	movs	r3, #39	@ 0x27
 800dcd2:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800dcd4:	f107 0318 	add.w	r3, r7, #24
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f005 fb61 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800dce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dce4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800dce8:	4b46      	ldr	r3, [pc, #280]	@ (800de04 <LmHandlerConfigure+0x238>)
 800dcea:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800dcec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcee:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800dcf2:	4b44      	ldr	r3, [pc, #272]	@ (800de04 <LmHandlerConfigure+0x238>)
 800dcf4:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800dcf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf8:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800dcfc:	4b41      	ldr	r3, [pc, #260]	@ (800de04 <LmHandlerConfigure+0x238>)
 800dcfe:	709a      	strb	r2, [r3, #2]
 800dd00:	e008      	b.n	800dd14 <LmHandlerConfigure+0x148>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800dd02:	2305      	movs	r3, #5
 800dd04:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800dd06:	2300      	movs	r3, #0
 800dd08:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dd0a:	f107 0318 	add.w	r3, r7, #24
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f005 fd1e 	bl	8013750 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800dd14:	4b3e      	ldr	r3, [pc, #248]	@ (800de10 <LmHandlerConfigure+0x244>)
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	4a3d      	ldr	r2, [pc, #244]	@ (800de10 <LmHandlerConfigure+0x244>)
 800dd1a:	68d2      	ldr	r2, [r2, #12]
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7ff fbbe 	bl	800d4a0 <SecureElementInitMcuID>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d002      	beq.n	800dd30 <LmHandlerConfigure+0x164>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd2e:	e065      	b.n	800ddfc <LmHandlerConfigure+0x230>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800dd30:	2306      	movs	r3, #6
 800dd32:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dd34:	f107 0318 	add.w	r3, r7, #24
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f005 fb31 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	4a37      	ldr	r2, [pc, #220]	@ (800de20 <LmHandlerConfigure+0x254>)
 800dd42:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dd44:	f107 0318 	add.w	r3, r7, #24
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f005 fd01 	bl	8013750 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800dd4e:	2302      	movs	r3, #2
 800dd50:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800dd52:	4b33      	ldr	r3, [pc, #204]	@ (800de20 <LmHandlerConfigure+0x254>)
 800dd54:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dd56:	f107 0318 	add.w	r3, r7, #24
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f005 fb20 	bl	80133a0 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800dd60:	2303      	movs	r3, #3
 800dd62:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800dd64:	4b2f      	ldr	r3, [pc, #188]	@ (800de24 <LmHandlerConfigure+0x258>)
 800dd66:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dd68:	f107 0318 	add.w	r3, r7, #24
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f005 fb17 	bl	80133a0 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800dd72:	f7ff fc15 	bl	800d5a0 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800dd76:	230f      	movs	r3, #15
 800dd78:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dd7e:	f107 0318 	add.w	r3, r7, #24
 800dd82:	4618      	mov	r0, r3
 800dd84:	f005 fce4 	bl	8013750 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800dd88:	2310      	movs	r3, #16
 800dd8a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dd90:	f107 0318 	add.w	r3, r7, #24
 800dd94:	4618      	mov	r0, r3
 800dd96:	f005 fcdb 	bl	8013750 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800dd9a:	2304      	movs	r3, #4
 800dd9c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800dd9e:	4b19      	ldr	r3, [pc, #100]	@ (800de04 <LmHandlerConfigure+0x238>)
 800dda0:	789b      	ldrb	r3, [r3, #2]
 800dda2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dda4:	f107 0318 	add.w	r3, r7, #24
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f005 fcd1 	bl	8013750 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ddae:	233a      	movs	r3, #58	@ 0x3a
 800ddb0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ddb2:	4b14      	ldr	r3, [pc, #80]	@ (800de04 <LmHandlerConfigure+0x238>)
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ddb8:	f107 0318 	add.w	r3, r7, #24
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f005 fcc7 	bl	8013750 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ddc2:	230f      	movs	r3, #15
 800ddc4:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800ddc6:	4b0f      	ldr	r3, [pc, #60]	@ (800de04 <LmHandlerConfigure+0x238>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	f107 0210 	add.w	r2, r7, #16
 800ddce:	4611      	mov	r1, r2
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f008 fc70 	bl	80166b6 <RegionGetPhyParam>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	bf14      	ite	ne
 800dde0:	2301      	movne	r3, #1
 800dde2:	2300      	moveq	r3, #0
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	4b07      	ldr	r3, [pc, #28]	@ (800de04 <LmHandlerConfigure+0x238>)
 800dde8:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800ddea:	2014      	movs	r0, #20
 800ddec:	f000 fad6 	bl	800e39c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800ddf0:	4b04      	ldr	r3, [pc, #16]	@ (800de04 <LmHandlerConfigure+0x238>)
 800ddf2:	79db      	ldrb	r3, [r3, #7]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f006 fb89 	bl	801450c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3748      	adds	r7, #72	@ 0x48
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	20000548 	.word	0x20000548
 800de08:	20000590 	.word	0x20000590
 800de0c:	0801debc 	.word	0x0801debc
 800de10:	20000574 	.word	0x20000574
 800de14:	20000564 	.word	0x20000564
 800de18:	20000686 	.word	0x20000686
 800de1c:	20000560 	.word	0x20000560
 800de20:	2000050c 	.word	0x2000050c
 800de24:	20000514 	.word	0x20000514

0800de28 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800de2e:	f002 fe61 	bl	8010af4 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800de32:	f000 fd8b 	bl	800e94c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800de36:	f000 fd5f 	bl	800e8f8 <LmHandlerPackageIsTxPending>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d117      	bne.n	800de70 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800de40:	4b0d      	ldr	r3, [pc, #52]	@ (800de78 <LmHandlerProcess+0x50>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d014      	beq.n	800de72 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800de48:	2300      	movs	r3, #0
 800de4a:	703b      	strb	r3, [r7, #0]
 800de4c:	2300      	movs	r3, #0
 800de4e:	707b      	strb	r3, [r7, #1]
 800de50:	2300      	movs	r3, #0
 800de52:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800de54:	4b09      	ldr	r3, [pc, #36]	@ (800de7c <LmHandlerProcess+0x54>)
 800de56:	78d9      	ldrb	r1, [r3, #3]
 800de58:	463b      	mov	r3, r7
 800de5a:	2200      	movs	r2, #0
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 f8d7 	bl	800e010 <LmHandlerSend>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d104      	bne.n	800de72 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800de68:	4b03      	ldr	r3, [pc, #12]	@ (800de78 <LmHandlerProcess+0x50>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	e000      	b.n	800de72 <LmHandlerProcess+0x4a>
        return;
 800de70:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	20000590 	.word	0x20000590
 800de7c:	20000548 	.word	0x20000548

0800de80 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800de80:	b480      	push	{r7}
 800de82:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800de84:	4b02      	ldr	r3, [pc, #8]	@ (800de90 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800de86:	681b      	ldr	r3, [r3, #0]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bc80      	pop	{r7}
 800de8e:	4770      	bx	lr
 800de90:	2000058c 	.word	0x2000058c

0800de94 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b092      	sub	sp, #72	@ 0x48
 800de98:	af00      	add	r7, sp, #0
 800de9a:	4603      	mov	r3, r0
 800de9c:	460a      	mov	r2, r1
 800de9e:	71fb      	strb	r3, [r7, #7]
 800dea0:	4613      	mov	r3, r2
 800dea2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800dea4:	2301      	movs	r3, #1
 800dea6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800deaa:	4b46      	ldr	r3, [pc, #280]	@ (800dfc4 <LmHandlerJoin+0x130>)
 800deac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800deb6:	4b43      	ldr	r3, [pc, #268]	@ (800dfc4 <LmHandlerJoin+0x130>)
 800deb8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800debc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800dec0:	79fb      	ldrb	r3, [r7, #7]
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d10b      	bne.n	800dede <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dec6:	2302      	movs	r3, #2
 800dec8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800decc:	4b3e      	ldr	r3, [pc, #248]	@ (800dfc8 <LmHandlerJoin+0x134>)
 800dece:	2202      	movs	r2, #2
 800ded0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800ded2:	4a3d      	ldr	r2, [pc, #244]	@ (800dfc8 <LmHandlerJoin+0x134>)
 800ded4:	79bb      	ldrb	r3, [r7, #6]
 800ded6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800ded8:	f005 f964 	bl	80131a4 <LoRaMacStart>
 800dedc:	e05c      	b.n	800df98 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800dede:	2301      	movs	r3, #1
 800dee0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800dee4:	4b38      	ldr	r3, [pc, #224]	@ (800dfc8 <LmHandlerJoin+0x134>)
 800dee6:	2201      	movs	r2, #1
 800dee8:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800deea:	4b36      	ldr	r3, [pc, #216]	@ (800dfc4 <LmHandlerJoin+0x130>)
 800deec:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800def0:	4b35      	ldr	r3, [pc, #212]	@ (800dfc8 <LmHandlerJoin+0x134>)
 800def2:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800def4:	4b33      	ldr	r3, [pc, #204]	@ (800dfc4 <LmHandlerJoin+0x130>)
 800def6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800defa:	4b33      	ldr	r3, [pc, #204]	@ (800dfc8 <LmHandlerJoin+0x134>)
 800defc:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800defe:	4b32      	ldr	r3, [pc, #200]	@ (800dfc8 <LmHandlerJoin+0x134>)
 800df00:	2200      	movs	r2, #0
 800df02:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800df04:	4a30      	ldr	r2, [pc, #192]	@ (800dfc8 <LmHandlerJoin+0x134>)
 800df06:	79bb      	ldrb	r3, [r7, #6]
 800df08:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800df0a:	4b30      	ldr	r3, [pc, #192]	@ (800dfcc <LmHandlerJoin+0x138>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	f083 0301 	eor.w	r3, r3, #1
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b00      	cmp	r3, #0
 800df16:	d034      	beq.n	800df82 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800df18:	231f      	movs	r3, #31
 800df1a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800df1c:	4b29      	ldr	r3, [pc, #164]	@ (800dfc4 <LmHandlerJoin+0x130>)
 800df1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800df22:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df24:	f107 030c 	add.w	r3, r7, #12
 800df28:	4618      	mov	r0, r3
 800df2a:	f005 fc11 	bl	8013750 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800df2e:	2320      	movs	r3, #32
 800df30:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800df32:	4b24      	ldr	r3, [pc, #144]	@ (800dfc4 <LmHandlerJoin+0x130>)
 800df34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800df38:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df3a:	f107 030c 	add.w	r3, r7, #12
 800df3e:	4618      	mov	r0, r3
 800df40:	f005 fc06 	bl	8013750 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800df44:	2322      	movs	r3, #34	@ 0x22
 800df46:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800df48:	4b1e      	ldr	r3, [pc, #120]	@ (800dfc4 <LmHandlerJoin+0x130>)
 800df4a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800df4e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df50:	f107 030c 	add.w	r3, r7, #12
 800df54:	4618      	mov	r0, r3
 800df56:	f005 fbfb 	bl	8013750 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800df5a:	2321      	movs	r3, #33	@ 0x21
 800df5c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800df5e:	4b19      	ldr	r3, [pc, #100]	@ (800dfc4 <LmHandlerJoin+0x130>)
 800df60:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800df64:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df66:	f107 030c 	add.w	r3, r7, #12
 800df6a:	4618      	mov	r0, r3
 800df6c:	f005 fbf0 	bl	8013750 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800df70:	2329      	movs	r3, #41	@ 0x29
 800df72:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800df74:	4b16      	ldr	r3, [pc, #88]	@ (800dfd0 <LmHandlerJoin+0x13c>)
 800df76:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800df78:	f107 030c 	add.w	r3, r7, #12
 800df7c:	4618      	mov	r0, r3
 800df7e:	f005 fbe7 	bl	8013750 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800df82:	f005 f90f 	bl	80131a4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800df86:	2301      	movs	r3, #1
 800df88:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800df8a:	2301      	movs	r3, #1
 800df8c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800df8e:	f107 030c 	add.w	r3, r7, #12
 800df92:	4618      	mov	r0, r3
 800df94:	f005 fbdc 	bl	8013750 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800df98:	4b0c      	ldr	r3, [pc, #48]	@ (800dfcc <LmHandlerJoin+0x138>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	f083 0301 	eor.w	r3, r3, #1
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d102      	bne.n	800dfac <LmHandlerJoin+0x118>
 800dfa6:	79bb      	ldrb	r3, [r7, #6]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d004      	beq.n	800dfb6 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800dfac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f005 ffcf 	bl	8013f54 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800dfb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfb8:	4a06      	ldr	r2, [pc, #24]	@ (800dfd4 <LmHandlerJoin+0x140>)
 800dfba:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800dfbc:	bf00      	nop
 800dfbe:	3748      	adds	r7, #72	@ 0x48
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	20000548 	.word	0x20000548
 800dfc8:	20000098 	.word	0x20000098
 800dfcc:	20000686 	.word	0x20000686
 800dfd0:	01000400 	.word	0x01000400
 800dfd4:	2000058c 	.word	0x2000058c

0800dfd8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b08c      	sub	sp, #48	@ 0x30
 800dfdc:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800dfe2:	1d3b      	adds	r3, r7, #4
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f005 f9db 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800dff0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d106      	bne.n	800e006 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dff8:	7a3b      	ldrb	r3, [r7, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d101      	bne.n	800e002 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800dffe:	2300      	movs	r3, #0
 800e000:	e002      	b.n	800e008 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e002:	2301      	movs	r3, #1
 800e004:	e000      	b.n	800e008 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e006:	2300      	movs	r3, #0
    }
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3730      	adds	r7, #48	@ 0x30
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b08a      	sub	sp, #40	@ 0x28
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	460b      	mov	r3, r1
 800e01a:	70fb      	strb	r3, [r7, #3]
 800e01c:	4613      	mov	r3, r2
 800e01e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e020:	23ff      	movs	r3, #255	@ 0xff
 800e022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800e026:	f002 fabf 	bl	80105a8 <LoRaMacIsBusy>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e030:	f06f 0301 	mvn.w	r3, #1
 800e034:	e0ab      	b.n	800e18e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800e036:	f002 fadf 	bl	80105f8 <LoRaMacIsStopped>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e040:	f06f 0302 	mvn.w	r3, #2
 800e044:	e0a3      	b.n	800e18e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e046:	f7ff ffc7 	bl	800dfd8 <LmHandlerJoinStatus>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d00a      	beq.n	800e066 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e050:	4b51      	ldr	r3, [pc, #324]	@ (800e198 <LmHandlerSend+0x188>)
 800e052:	79db      	ldrb	r3, [r3, #7]
 800e054:	4a50      	ldr	r2, [pc, #320]	@ (800e198 <LmHandlerSend+0x188>)
 800e056:	7a12      	ldrb	r2, [r2, #8]
 800e058:	4611      	mov	r1, r2
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff ff1a 	bl	800de94 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e060:	f06f 0302 	mvn.w	r3, #2
 800e064:	e093      	b.n	800e18e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e066:	4a4d      	ldr	r2, [pc, #308]	@ (800e19c <LmHandlerSend+0x18c>)
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e06c:	78fb      	ldrb	r3, [r7, #3]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	bf14      	ite	ne
 800e072:	2301      	movne	r3, #1
 800e074:	2300      	moveq	r3, #0
 800e076:	b2db      	uxtb	r3, r3
 800e078:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e07a:	4b49      	ldr	r3, [pc, #292]	@ (800e1a0 <LmHandlerSend+0x190>)
 800e07c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e080:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	785b      	ldrb	r3, [r3, #1]
 800e086:	f107 020c 	add.w	r2, r7, #12
 800e08a:	4611      	mov	r1, r2
 800e08c:	4618      	mov	r0, r3
 800e08e:	f005 f8f7 	bl	8013280 <LoRaMacQueryTxPossible>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d009      	beq.n	800e0ac <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e098:	2300      	movs	r3, #0
 800e09a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e09c:	2300      	movs	r3, #0
 800e09e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e0a4:	23f9      	movs	r3, #249	@ 0xf9
 800e0a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0aa:	e008      	b.n	800e0be <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	785b      	ldrb	r3, [r3, #1]
 800e0b6:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e0be:	4b37      	ldr	r3, [pc, #220]	@ (800e19c <LmHandlerSend+0x18c>)
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	3310      	adds	r3, #16
 800e0c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0c8:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e0cc:	4b34      	ldr	r3, [pc, #208]	@ (800e1a0 <LmHandlerSend+0x190>)
 800e0ce:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e0d2:	4b32      	ldr	r3, [pc, #200]	@ (800e19c <LmHandlerSend+0x18c>)
 800e0d4:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800e0d6:	78ba      	ldrb	r2, [r7, #2]
 800e0d8:	f107 0310 	add.w	r3, r7, #16
 800e0dc:	4611      	mov	r1, r2
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f006 f8dc 	bl	801429c <LoRaMacMcpsRequest>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	4a2d      	ldr	r2, [pc, #180]	@ (800e1a4 <LmHandlerSend+0x194>)
 800e0ee:	6013      	str	r3, [r2, #0]

    switch( status )
 800e0f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e0f4:	2b11      	cmp	r3, #17
 800e0f6:	d843      	bhi.n	800e180 <LmHandlerSend+0x170>
 800e0f8:	a201      	add	r2, pc, #4	@ (adr r2, 800e100 <LmHandlerSend+0xf0>)
 800e0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fe:	bf00      	nop
 800e100:	0800e149 	.word	0x0800e149
 800e104:	0800e161 	.word	0x0800e161
 800e108:	0800e181 	.word	0x0800e181
 800e10c:	0800e181 	.word	0x0800e181
 800e110:	0800e181 	.word	0x0800e181
 800e114:	0800e181 	.word	0x0800e181
 800e118:	0800e181 	.word	0x0800e181
 800e11c:	0800e169 	.word	0x0800e169
 800e120:	0800e181 	.word	0x0800e181
 800e124:	0800e181 	.word	0x0800e181
 800e128:	0800e181 	.word	0x0800e181
 800e12c:	0800e179 	.word	0x0800e179
 800e130:	0800e181 	.word	0x0800e181
 800e134:	0800e181 	.word	0x0800e181
 800e138:	0800e161 	.word	0x0800e161
 800e13c:	0800e161 	.word	0x0800e161
 800e140:	0800e161 	.word	0x0800e161
 800e144:	0800e171 	.word	0x0800e171
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800e148:	4b17      	ldr	r3, [pc, #92]	@ (800e1a8 <LmHandlerSend+0x198>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800e14e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e152:	f113 0f07 	cmn.w	r3, #7
 800e156:	d017      	beq.n	800e188 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e158:	2300      	movs	r3, #0
 800e15a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800e15e:	e013      	b.n	800e188 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e160:	23fe      	movs	r3, #254	@ 0xfe
 800e162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e166:	e010      	b.n	800e18a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e168:	23fd      	movs	r3, #253	@ 0xfd
 800e16a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e16e:	e00c      	b.n	800e18a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e170:	23fb      	movs	r3, #251	@ 0xfb
 800e172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e176:	e008      	b.n	800e18a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e178:	23fa      	movs	r3, #250	@ 0xfa
 800e17a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e17e:	e004      	b.n	800e18a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e180:	23ff      	movs	r3, #255	@ 0xff
 800e182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e186:	e000      	b.n	800e18a <LmHandlerSend+0x17a>
            break;
 800e188:	bf00      	nop
    }

    return lmhStatus;
 800e18a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3728      	adds	r7, #40	@ 0x28
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20000098 	.word	0x20000098
 800e19c:	200000a4 	.word	0x200000a4
 800e1a0:	20000548 	.word	0x20000548
 800e1a4:	2000058c 	.word	0x2000058c
 800e1a8:	20000590 	.word	0x20000590

0800e1ac <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e1b2:	2309      	movs	r3, #9
 800e1b4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e1b6:	463b      	mov	r3, r7
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f005 fecb 	bl	8013f54 <LoRaMacMlmeRequest>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	4a06      	ldr	r2, [pc, #24]	@ (800e1e0 <LmHandlerDeviceTimeReq+0x34>)
 800e1c6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	e001      	b.n	800e1d6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e1d2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	2000058c 	.word	0x2000058c

0800e1e4 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e1ee:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bc80      	pop	{r7}
 800e1fa:	4770      	bx	lr

0800e1fc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b08e      	sub	sp, #56	@ 0x38
 800e200:	af00      	add	r7, sp, #0
 800e202:	4603      	mov	r3, r0
 800e204:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e206:	2300      	movs	r3, #0
 800e208:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800e20c:	f002 f9cc 	bl	80105a8 <LoRaMacIsBusy>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e216:	f06f 0301 	mvn.w	r3, #1
 800e21a:	e071      	b.n	800e300 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800e21c:	f7ff fedc 	bl	800dfd8 <LmHandlerJoinStatus>
 800e220:	4603      	mov	r3, r0
 800e222:	2b01      	cmp	r3, #1
 800e224:	d002      	beq.n	800e22c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e226:	f06f 0302 	mvn.w	r3, #2
 800e22a:	e069      	b.n	800e300 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e22c:	2300      	movs	r3, #0
 800e22e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e230:	f107 030c 	add.w	r3, r7, #12
 800e234:	4618      	mov	r0, r3
 800e236:	f005 f8b3 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e240:	f04f 33ff 	mov.w	r3, #4294967295
 800e244:	e05c      	b.n	800e300 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800e246:	7c3b      	ldrb	r3, [r7, #16]
 800e248:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800e24c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	429a      	cmp	r2, r3
 800e254:	d052      	beq.n	800e2fc <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800e256:	79fb      	ldrb	r3, [r7, #7]
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d028      	beq.n	800e2ae <LmHandlerRequestClass+0xb2>
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	dc48      	bgt.n	800e2f2 <LmHandlerRequestClass+0xf6>
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <LmHandlerRequestClass+0x6e>
 800e264:	2b01      	cmp	r3, #1
 800e266:	d01e      	beq.n	800e2a6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800e268:	e043      	b.n	800e2f2 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800e26a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d041      	beq.n	800e2f6 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800e272:	79fb      	ldrb	r3, [r7, #7]
 800e274:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e276:	f107 030c 	add.w	r3, r7, #12
 800e27a:	4618      	mov	r0, r3
 800e27c:	f005 fa68 	bl	8013750 <LoRaMacMibSetRequestConfirm>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10b      	bne.n	800e29e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e286:	4b20      	ldr	r3, [pc, #128]	@ (800e308 <LmHandlerRequestClass+0x10c>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d032      	beq.n	800e2f6 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e290:	4b1d      	ldr	r3, [pc, #116]	@ (800e308 <LmHandlerRequestClass+0x10c>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e296:	79fa      	ldrb	r2, [r7, #7]
 800e298:	4610      	mov	r0, r2
 800e29a:	4798      	blx	r3
                break;
 800e29c:	e02b      	b.n	800e2f6 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e29e:	23ff      	movs	r3, #255	@ 0xff
 800e2a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e2a4:	e027      	b.n	800e2f6 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e2a6:	23ff      	movs	r3, #255	@ 0xff
 800e2a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e2ac:	e026      	b.n	800e2fc <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800e2ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d003      	beq.n	800e2be <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e2b6:	23ff      	movs	r3, #255	@ 0xff
 800e2b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e2bc:	e01d      	b.n	800e2fa <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800e2be:	79fb      	ldrb	r3, [r7, #7]
 800e2c0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e2c2:	f107 030c 	add.w	r3, r7, #12
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f005 fa42 	bl	8013750 <LoRaMacMibSetRequestConfirm>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10b      	bne.n	800e2ea <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e308 <LmHandlerRequestClass+0x10c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00e      	beq.n	800e2fa <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e308 <LmHandlerRequestClass+0x10c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2e2:	79fa      	ldrb	r2, [r7, #7]
 800e2e4:	4610      	mov	r0, r2
 800e2e6:	4798      	blx	r3
                break;
 800e2e8:	e007      	b.n	800e2fa <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e2ea:	23ff      	movs	r3, #255	@ 0xff
 800e2ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e2f0:	e003      	b.n	800e2fa <LmHandlerRequestClass+0xfe>
                break;
 800e2f2:	bf00      	nop
 800e2f4:	e002      	b.n	800e2fc <LmHandlerRequestClass+0x100>
                break;
 800e2f6:	bf00      	nop
 800e2f8:	e000      	b.n	800e2fc <LmHandlerRequestClass+0x100>
                break;
 800e2fa:	bf00      	nop
        }
    }
    return errorStatus;
 800e2fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e300:	4618      	mov	r0, r3
 800e302:	3738      	adds	r7, #56	@ 0x38
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	20000560 	.word	0x20000560

0800e30c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b08c      	sub	sp, #48	@ 0x30
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d102      	bne.n	800e320 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e31a:	f04f 33ff 	mov.w	r3, #4294967295
 800e31e:	e010      	b.n	800e342 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e320:	2300      	movs	r3, #0
 800e322:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e324:	f107 0308 	add.w	r3, r7, #8
 800e328:	4618      	mov	r0, r3
 800e32a:	f005 f839 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e334:	f04f 33ff 	mov.w	r3, #4294967295
 800e338:	e003      	b.n	800e342 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e33a:	7b3a      	ldrb	r2, [r7, #12]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3730      	adds	r7, #48	@ 0x30
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
	...

0800e34c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b08c      	sub	sp, #48	@ 0x30
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d102      	bne.n	800e360 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e35a:	f04f 33ff 	mov.w	r3, #4294967295
 800e35e:	e016      	b.n	800e38e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e360:	2320      	movs	r3, #32
 800e362:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800e364:	f107 0308 	add.w	r3, r7, #8
 800e368:	4618      	mov	r0, r3
 800e36a:	f005 f819 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e374:	f04f 33ff 	mov.w	r3, #4294967295
 800e378:	e009      	b.n	800e38e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e37a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f993 2000 	ldrsb.w	r2, [r3]
 800e388:	4b03      	ldr	r3, [pc, #12]	@ (800e398 <LmHandlerGetTxDatarate+0x4c>)
 800e38a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3730      	adds	r7, #48	@ 0x30
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	20000548 	.word	0x20000548

0800e39c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08c      	sub	sp, #48	@ 0x30
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e3a4:	2323      	movs	r3, #35	@ 0x23
 800e3a6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e3ac:	f107 0308 	add.w	r3, r7, #8
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f005 f9cd 	bl	8013750 <LoRaMacMibSetRequestConfirm>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c0:	e000      	b.n	800e3c4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e3c2:	2300      	movs	r3, #0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3730      	adds	r7, #48	@ 0x30
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e3d4:	4b18      	ldr	r3, [pc, #96]	@ (800e438 <McpsConfirm+0x6c>)
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	785a      	ldrb	r2, [r3, #1]
 800e3de:	4b16      	ldr	r3, [pc, #88]	@ (800e438 <McpsConfirm+0x6c>)
 800e3e0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	789b      	ldrb	r3, [r3, #2]
 800e3e6:	b25a      	sxtb	r2, r3
 800e3e8:	4b13      	ldr	r3, [pc, #76]	@ (800e438 <McpsConfirm+0x6c>)
 800e3ea:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	4a11      	ldr	r2, [pc, #68]	@ (800e438 <McpsConfirm+0x6c>)
 800e3f2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e438 <McpsConfirm+0x6c>)
 800e3fc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	b2da      	uxtb	r2, r3
 800e404:	4b0c      	ldr	r3, [pc, #48]	@ (800e438 <McpsConfirm+0x6c>)
 800e406:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	791b      	ldrb	r3, [r3, #4]
 800e40c:	461a      	mov	r2, r3
 800e40e:	4b0a      	ldr	r3, [pc, #40]	@ (800e438 <McpsConfirm+0x6c>)
 800e410:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800e412:	4b0a      	ldr	r3, [pc, #40]	@ (800e43c <McpsConfirm+0x70>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d004      	beq.n	800e426 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e41c:	4b07      	ldr	r3, [pc, #28]	@ (800e43c <McpsConfirm+0x70>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e422:	4805      	ldr	r0, [pc, #20]	@ (800e438 <McpsConfirm+0x6c>)
 800e424:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e426:	6879      	ldr	r1, [r7, #4]
 800e428:	2000      	movs	r0, #0
 800e42a:	f000 f9e9 	bl	800e800 <LmHandlerPackagesNotify>
}
 800e42e:	bf00      	nop
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	200000a4 	.word	0x200000a4
 800e43c:	20000560 	.word	0x20000560

0800e440 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e44a:	2300      	movs	r3, #0
 800e44c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800e44e:	4b2d      	ldr	r3, [pc, #180]	@ (800e504 <McpsIndication+0xc4>)
 800e450:	2201      	movs	r2, #1
 800e452:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	785a      	ldrb	r2, [r3, #1]
 800e458:	4b2a      	ldr	r3, [pc, #168]	@ (800e504 <McpsIndication+0xc4>)
 800e45a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e45c:	4b29      	ldr	r3, [pc, #164]	@ (800e504 <McpsIndication+0xc4>)
 800e45e:	785b      	ldrb	r3, [r3, #1]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d14b      	bne.n	800e4fc <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	791b      	ldrb	r3, [r3, #4]
 800e468:	b25a      	sxtb	r2, r3
 800e46a:	4b26      	ldr	r3, [pc, #152]	@ (800e504 <McpsIndication+0xc4>)
 800e46c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e474:	b25a      	sxtb	r2, r3
 800e476:	4b23      	ldr	r3, [pc, #140]	@ (800e504 <McpsIndication+0xc4>)
 800e478:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e480:	4b20      	ldr	r3, [pc, #128]	@ (800e504 <McpsIndication+0xc4>)
 800e482:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	78da      	ldrb	r2, [r3, #3]
 800e488:	4b1e      	ldr	r3, [pc, #120]	@ (800e504 <McpsIndication+0xc4>)
 800e48a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	4a1c      	ldr	r2, [pc, #112]	@ (800e504 <McpsIndication+0xc4>)
 800e492:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	78db      	ldrb	r3, [r3, #3]
 800e498:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	7b1b      	ldrb	r3, [r3, #12]
 800e49e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800e4a6:	4b18      	ldr	r3, [pc, #96]	@ (800e508 <McpsIndication+0xc8>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d007      	beq.n	800e4c0 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e4b0:	4b15      	ldr	r3, [pc, #84]	@ (800e508 <McpsIndication+0xc8>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b6:	f107 0210 	add.w	r2, r7, #16
 800e4ba:	4912      	ldr	r1, [pc, #72]	@ (800e504 <McpsIndication+0xc4>)
 800e4bc:	4610      	mov	r0, r2
 800e4be:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800e4c0:	4b11      	ldr	r3, [pc, #68]	@ (800e508 <McpsIndication+0xc8>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d007      	beq.n	800e4da <McpsIndication+0x9a>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	7e1b      	ldrb	r3, [r3, #24]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <McpsIndication+0xc8>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4d8:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e4da:	6879      	ldr	r1, [r7, #4]
 800e4dc:	2001      	movs	r0, #1
 800e4de:	f000 f98f 	bl	800e800 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e4e2:	f107 030f 	add.w	r3, r7, #15
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7ff ff10 	bl	800e30c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	795b      	ldrb	r3, [r3, #5]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d004      	beq.n	800e4fe <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800e4f4:	4b05      	ldr	r3, [pc, #20]	@ (800e50c <McpsIndication+0xcc>)
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	701a      	strb	r2, [r3, #0]
 800e4fa:	e000      	b.n	800e4fe <McpsIndication+0xbe>
        return;
 800e4fc:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800e4fe:	3718      	adds	r7, #24
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	200000c0 	.word	0x200000c0
 800e508:	20000560 	.word	0x20000560
 800e50c:	20000590 	.word	0x20000590

0800e510 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08c      	sub	sp, #48	@ 0x30
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800e518:	4b49      	ldr	r3, [pc, #292]	@ (800e640 <MlmeConfirm+0x130>)
 800e51a:	2200      	movs	r2, #0
 800e51c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	785a      	ldrb	r2, [r3, #1]
 800e522:	4b47      	ldr	r3, [pc, #284]	@ (800e640 <MlmeConfirm+0x130>)
 800e524:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800e526:	4b47      	ldr	r3, [pc, #284]	@ (800e644 <MlmeConfirm+0x134>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e530:	4b44      	ldr	r3, [pc, #272]	@ (800e644 <MlmeConfirm+0x134>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e536:	4842      	ldr	r0, [pc, #264]	@ (800e640 <MlmeConfirm+0x130>)
 800e538:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800e53a:	6879      	ldr	r1, [r7, #4]
 800e53c:	2002      	movs	r0, #2
 800e53e:	f000 f95f 	bl	800e800 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	3b01      	subs	r3, #1
 800e548:	2b0b      	cmp	r3, #11
 800e54a:	d872      	bhi.n	800e632 <MlmeConfirm+0x122>
 800e54c:	a201      	add	r2, pc, #4	@ (adr r2, 800e554 <MlmeConfirm+0x44>)
 800e54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e552:	bf00      	nop
 800e554:	0800e585 	.word	0x0800e585
 800e558:	0800e633 	.word	0x0800e633
 800e55c:	0800e633 	.word	0x0800e633
 800e560:	0800e633 	.word	0x0800e633
 800e564:	0800e601 	.word	0x0800e601
 800e568:	0800e633 	.word	0x0800e633
 800e56c:	0800e633 	.word	0x0800e633
 800e570:	0800e633 	.word	0x0800e633
 800e574:	0800e633 	.word	0x0800e633
 800e578:	0800e633 	.word	0x0800e633
 800e57c:	0800e619 	.word	0x0800e619
 800e580:	0800e633 	.word	0x0800e633
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800e584:	2306      	movs	r3, #6
 800e586:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800e588:	f107 0308 	add.w	r3, r7, #8
 800e58c:	4618      	mov	r0, r3
 800e58e:	f004 ff07 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800e592:	4b2d      	ldr	r3, [pc, #180]	@ (800e648 <MlmeConfirm+0x138>)
 800e594:	79db      	ldrb	r3, [r3, #7]
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	4611      	mov	r1, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7ff fa6c 	bl	800da78 <SecureElementSetDevAddr>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d102      	bne.n	800e5ac <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	4a28      	ldr	r2, [pc, #160]	@ (800e64c <MlmeConfirm+0x13c>)
 800e5aa:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e5ac:	4828      	ldr	r0, [pc, #160]	@ (800e650 <MlmeConfirm+0x140>)
 800e5ae:	f7ff fecd 	bl	800e34c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800e5b2:	4828      	ldr	r0, [pc, #160]	@ (800e654 <MlmeConfirm+0x144>)
 800e5b4:	f000 fa74 	bl	800eaa0 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e5b8:	4b21      	ldr	r3, [pc, #132]	@ (800e640 <MlmeConfirm+0x130>)
 800e5ba:	785b      	ldrb	r3, [r3, #1]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d108      	bne.n	800e5d2 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e5c0:	4b21      	ldr	r3, [pc, #132]	@ (800e648 <MlmeConfirm+0x138>)
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800e5c6:	4b24      	ldr	r3, [pc, #144]	@ (800e658 <MlmeConfirm+0x148>)
 800e5c8:	785b      	ldrb	r3, [r3, #1]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff fe16 	bl	800e1fc <LmHandlerRequestClass>
 800e5d0:	e002      	b.n	800e5d8 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e5d2:	4b1d      	ldr	r3, [pc, #116]	@ (800e648 <MlmeConfirm+0x138>)
 800e5d4:	22ff      	movs	r2, #255	@ 0xff
 800e5d6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800e5d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e644 <MlmeConfirm+0x134>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d004      	beq.n	800e5ec <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e5e2:	4b18      	ldr	r3, [pc, #96]	@ (800e644 <MlmeConfirm+0x134>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5e8:	4817      	ldr	r0, [pc, #92]	@ (800e648 <MlmeConfirm+0x138>)
 800e5ea:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e5ec:	4b14      	ldr	r3, [pc, #80]	@ (800e640 <MlmeConfirm+0x130>)
 800e5ee:	785b      	ldrb	r3, [r3, #1]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d120      	bne.n	800e636 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800e5f4:	4b14      	ldr	r3, [pc, #80]	@ (800e648 <MlmeConfirm+0x138>)
 800e5f6:	79db      	ldrb	r3, [r3, #7]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fe ffe5 	bl	800d5c8 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800e5fe:	e01a      	b.n	800e636 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800e600:	4b16      	ldr	r3, [pc, #88]	@ (800e65c <MlmeConfirm+0x14c>)
 800e602:	2201      	movs	r2, #1
 800e604:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	7a1a      	ldrb	r2, [r3, #8]
 800e60a:	4b14      	ldr	r3, [pc, #80]	@ (800e65c <MlmeConfirm+0x14c>)
 800e60c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	7a5a      	ldrb	r2, [r3, #9]
 800e612:	4b12      	ldr	r3, [pc, #72]	@ (800e65c <MlmeConfirm+0x14c>)
 800e614:	74da      	strb	r2, [r3, #19]
            }
            break;
 800e616:	e00f      	b.n	800e638 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	785b      	ldrb	r3, [r3, #1]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d105      	bne.n	800e62c <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e620:	4b0d      	ldr	r3, [pc, #52]	@ (800e658 <MlmeConfirm+0x148>)
 800e622:	7c1b      	ldrb	r3, [r3, #16]
 800e624:	4618      	mov	r0, r3
 800e626:	f7ff fddd 	bl	800e1e4 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800e62a:	e005      	b.n	800e638 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800e62c:	f7ff fdbe 	bl	800e1ac <LmHandlerDeviceTimeReq>
            break;
 800e630:	e002      	b.n	800e638 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e632:	bf00      	nop
 800e634:	e000      	b.n	800e638 <MlmeConfirm+0x128>
            break;
 800e636:	bf00      	nop
    }
}
 800e638:	bf00      	nop
 800e63a:	3730      	adds	r7, #48	@ 0x30
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	200000a4 	.word	0x200000a4
 800e644:	20000560 	.word	0x20000560
 800e648:	20000098 	.word	0x20000098
 800e64c:	2000050c 	.word	0x2000050c
 800e650:	2000009c 	.word	0x2000009c
 800e654:	2000009d 	.word	0x2000009d
 800e658:	20000548 	.word	0x20000548
 800e65c:	200000c0 	.word	0x200000c0

0800e660 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e66a:	4b20      	ldr	r3, [pc, #128]	@ (800e6ec <MlmeIndication+0x8c>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	785a      	ldrb	r2, [r3, #1]
 800e674:	4b1d      	ldr	r3, [pc, #116]	@ (800e6ec <MlmeIndication+0x8c>)
 800e676:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	789b      	ldrb	r3, [r3, #2]
 800e67c:	b25a      	sxtb	r2, r3
 800e67e:	4b1b      	ldr	r3, [pc, #108]	@ (800e6ec <MlmeIndication+0x8c>)
 800e680:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e688:	b25a      	sxtb	r2, r3
 800e68a:	4b18      	ldr	r3, [pc, #96]	@ (800e6ec <MlmeIndication+0x8c>)
 800e68c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e694:	4b15      	ldr	r3, [pc, #84]	@ (800e6ec <MlmeIndication+0x8c>)
 800e696:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	78da      	ldrb	r2, [r3, #3]
 800e69c:	4b13      	ldr	r3, [pc, #76]	@ (800e6ec <MlmeIndication+0x8c>)
 800e69e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	4a11      	ldr	r2, [pc, #68]	@ (800e6ec <MlmeIndication+0x8c>)
 800e6a6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800e6a8:	4b11      	ldr	r3, [pc, #68]	@ (800e6f0 <MlmeIndication+0x90>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00d      	beq.n	800e6ce <MlmeIndication+0x6e>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2b0a      	cmp	r3, #10
 800e6b8:	d009      	beq.n	800e6ce <MlmeIndication+0x6e>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	2b0e      	cmp	r3, #14
 800e6c0:	d005      	beq.n	800e6ce <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e6f0 <MlmeIndication+0x90>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c8:	4908      	ldr	r1, [pc, #32]	@ (800e6ec <MlmeIndication+0x8c>)
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e6ce:	6879      	ldr	r1, [r7, #4]
 800e6d0:	2003      	movs	r0, #3
 800e6d2:	f000 f895 	bl	800e800 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b0a      	cmp	r3, #10
 800e6dc:	d001      	beq.n	800e6e2 <MlmeIndication+0x82>
 800e6de:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e6e0:	e000      	b.n	800e6e4 <MlmeIndication+0x84>
            break;
 800e6e2:	bf00      	nop
    }
}
 800e6e4:	bf00      	nop
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	200000c0 	.word	0x200000c0
 800e6f0:	20000560 	.word	0x20000560

0800e6f4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	6039      	str	r1, [r7, #0]
 800e6fe:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e700:	2300      	movs	r3, #0
 800e702:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e704:	79fb      	ldrb	r3, [r7, #7]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d104      	bne.n	800e714 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800e70a:	f000 fa8b 	bl	800ec24 <LmhpCompliancePackageFactory>
 800e70e:	4603      	mov	r3, r0
 800e710:	60fb      	str	r3, [r7, #12]
                break;
 800e712:	e00d      	b.n	800e730 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800e714:	f107 020c 	add.w	r2, r7, #12
 800e718:	79fb      	ldrb	r3, [r7, #7]
 800e71a:	4611      	mov	r1, r2
 800e71c:	4618      	mov	r0, r3
 800e71e:	f000 ff73 	bl	800f608 <LmhpPackagesRegister>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d002      	beq.n	800e72e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800e728:	f04f 33ff 	mov.w	r3, #4294967295
 800e72c:	e03b      	b.n	800e7a6 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800e72e:	bf00      	nop
            }
    }
    if( package != NULL )
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d035      	beq.n	800e7a2 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800e736:	79fb      	ldrb	r3, [r7, #7]
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	491d      	ldr	r1, [pc, #116]	@ (800e7b0 <LmHandlerPackageRegister+0xbc>)
 800e73c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e740:	79fb      	ldrb	r3, [r7, #7]
 800e742:	4a1b      	ldr	r2, [pc, #108]	@ (800e7b0 <LmHandlerPackageRegister+0xbc>)
 800e744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e748:	4a1a      	ldr	r2, [pc, #104]	@ (800e7b4 <LmHandlerPackageRegister+0xc0>)
 800e74a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e74c:	4b1a      	ldr	r3, [pc, #104]	@ (800e7b8 <LmHandlerPackageRegister+0xc4>)
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	4917      	ldr	r1, [pc, #92]	@ (800e7b0 <LmHandlerPackageRegister+0xbc>)
 800e754:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e758:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e75a:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e75c:	4b16      	ldr	r3, [pc, #88]	@ (800e7b8 <LmHandlerPackageRegister+0xc4>)
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	4913      	ldr	r1, [pc, #76]	@ (800e7b0 <LmHandlerPackageRegister+0xbc>)
 800e764:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e768:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e76a:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e76c:	79fb      	ldrb	r3, [r7, #7]
 800e76e:	4a10      	ldr	r2, [pc, #64]	@ (800e7b0 <LmHandlerPackageRegister+0xbc>)
 800e770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e774:	4a11      	ldr	r2, [pc, #68]	@ (800e7bc <LmHandlerPackageRegister+0xc8>)
 800e776:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e778:	4b0f      	ldr	r3, [pc, #60]	@ (800e7b8 <LmHandlerPackageRegister+0xc4>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	490c      	ldr	r1, [pc, #48]	@ (800e7b0 <LmHandlerPackageRegister+0xbc>)
 800e780:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e784:	6992      	ldr	r2, [r2, #24]
 800e786:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e788:	79fb      	ldrb	r3, [r7, #7]
 800e78a:	4a09      	ldr	r2, [pc, #36]	@ (800e7b0 <LmHandlerPackageRegister+0xbc>)
 800e78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	4a0b      	ldr	r2, [pc, #44]	@ (800e7c0 <LmHandlerPackageRegister+0xcc>)
 800e794:	6851      	ldr	r1, [r2, #4]
 800e796:	4a0a      	ldr	r2, [pc, #40]	@ (800e7c0 <LmHandlerPackageRegister+0xcc>)
 800e798:	7852      	ldrb	r2, [r2, #1]
 800e79a:	6838      	ldr	r0, [r7, #0]
 800e79c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	e001      	b.n	800e7a6 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e7a2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20000534 	.word	0x20000534
 800e7b4:	0800de95 	.word	0x0800de95
 800e7b8:	20000560 	.word	0x20000560
 800e7bc:	0800e1ad 	.word	0x0800e1ad
 800e7c0:	200000d4 	.word	0x200000d4

0800e7c4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e7ce:	79fb      	ldrb	r3, [r7, #7]
 800e7d0:	2b04      	cmp	r3, #4
 800e7d2:	d80e      	bhi.n	800e7f2 <LmHandlerPackageIsInitialized+0x2e>
 800e7d4:	79fb      	ldrb	r3, [r7, #7]
 800e7d6:	4a09      	ldr	r2, [pc, #36]	@ (800e7fc <LmHandlerPackageIsInitialized+0x38>)
 800e7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d007      	beq.n	800e7f2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	4a05      	ldr	r2, [pc, #20]	@ (800e7fc <LmHandlerPackageIsInitialized+0x38>)
 800e7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	4798      	blx	r3
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	e000      	b.n	800e7f4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e7f2:	2300      	movs	r3, #0
    }
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	20000534 	.word	0x20000534

0800e800 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	4603      	mov	r3, r0
 800e808:	6039      	str	r1, [r7, #0]
 800e80a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e80c:	2300      	movs	r3, #0
 800e80e:	73fb      	strb	r3, [r7, #15]
 800e810:	e067      	b.n	800e8e2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800e812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e816:	4a37      	ldr	r2, [pc, #220]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d05a      	beq.n	800e8d6 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800e820:	79fb      	ldrb	r3, [r7, #7]
 800e822:	2b03      	cmp	r3, #3
 800e824:	d84e      	bhi.n	800e8c4 <LmHandlerPackagesNotify+0xc4>
 800e826:	a201      	add	r2, pc, #4	@ (adr r2, 800e82c <LmHandlerPackagesNotify+0x2c>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e83d 	.word	0x0800e83d
 800e830:	0800e85f 	.word	0x0800e85f
 800e834:	0800e881 	.word	0x0800e881
 800e838:	0800e8a3 	.word	0x0800e8a3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e840:	4a2c      	ldr	r2, [pc, #176]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d03d      	beq.n	800e8c8 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800e84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e850:	4a28      	ldr	r2, [pc, #160]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e856:	699b      	ldr	r3, [r3, #24]
 800e858:	6838      	ldr	r0, [r7, #0]
 800e85a:	4798      	blx	r3
                        }
                        break;
 800e85c:	e034      	b.n	800e8c8 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e862:	4a24      	ldr	r2, [pc, #144]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d02e      	beq.n	800e8cc <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800e86e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e872:	4a20      	ldr	r2, [pc, #128]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e878:	69db      	ldr	r3, [r3, #28]
 800e87a:	6838      	ldr	r0, [r7, #0]
 800e87c:	4798      	blx	r3
                        }
                        break;
 800e87e:	e025      	b.n	800e8cc <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e884:	4a1b      	ldr	r2, [pc, #108]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e88a:	6a1b      	ldr	r3, [r3, #32]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d01f      	beq.n	800e8d0 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800e890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e894:	4a17      	ldr	r2, [pc, #92]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e89a:	6a1b      	ldr	r3, [r3, #32]
 800e89c:	6838      	ldr	r0, [r7, #0]
 800e89e:	4798      	blx	r3
                        }
                        break;
 800e8a0:	e016      	b.n	800e8d0 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e8a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a6:	4a13      	ldr	r2, [pc, #76]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d010      	beq.n	800e8d4 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e8f4 <LmHandlerPackagesNotify+0xf4>)
 800e8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8be:	6838      	ldr	r0, [r7, #0]
 800e8c0:	4798      	blx	r3
                        }
                        break;
 800e8c2:	e007      	b.n	800e8d4 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800e8c4:	bf00      	nop
 800e8c6:	e006      	b.n	800e8d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e8c8:	bf00      	nop
 800e8ca:	e004      	b.n	800e8d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e8cc:	bf00      	nop
 800e8ce:	e002      	b.n	800e8d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e8d0:	bf00      	nop
 800e8d2:	e000      	b.n	800e8d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e8d4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	3301      	adds	r3, #1
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	73fb      	strb	r3, [r7, #15]
 800e8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e6:	2b04      	cmp	r3, #4
 800e8e8:	dd93      	ble.n	800e812 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800e8ea:	bf00      	nop
 800e8ec:	bf00      	nop
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	20000534 	.word	0x20000534

0800e8f8 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e8fe:	2300      	movs	r3, #0
 800e900:	71fb      	strb	r3, [r7, #7]
 800e902:	e018      	b.n	800e936 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800e904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e908:	4a0f      	ldr	r2, [pc, #60]	@ (800e948 <LmHandlerPackageIsTxPending+0x50>)
 800e90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00b      	beq.n	800e92a <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e916:	4a0c      	ldr	r2, [pc, #48]	@ (800e948 <LmHandlerPackageIsTxPending+0x50>)
 800e918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	4798      	blx	r3
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d001      	beq.n	800e92a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e926:	2301      	movs	r3, #1
 800e928:	e00a      	b.n	800e940 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e92a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	3301      	adds	r3, #1
 800e932:	b2db      	uxtb	r3, r3
 800e934:	71fb      	strb	r3, [r7, #7]
 800e936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e93a:	2b04      	cmp	r3, #4
 800e93c:	dde2      	ble.n	800e904 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	20000534 	.word	0x20000534

0800e94c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e952:	2300      	movs	r3, #0
 800e954:	71fb      	strb	r3, [r7, #7]
 800e956:	e022      	b.n	800e99e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e95c:	4a14      	ldr	r2, [pc, #80]	@ (800e9b0 <LmHandlerPackagesProcess+0x64>)
 800e95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d015      	beq.n	800e992 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e96a:	4a11      	ldr	r2, [pc, #68]	@ (800e9b0 <LmHandlerPackagesProcess+0x64>)
 800e96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e970:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00d      	beq.n	800e992 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e976:	79fb      	ldrb	r3, [r7, #7]
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff ff23 	bl	800e7c4 <LmHandlerPackageIsInitialized>
 800e97e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e980:	2b00      	cmp	r3, #0
 800e982:	d006      	beq.n	800e992 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e988:	4a09      	ldr	r2, [pc, #36]	@ (800e9b0 <LmHandlerPackagesProcess+0x64>)
 800e98a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e98e:	691b      	ldr	r3, [r3, #16]
 800e990:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e996:	b2db      	uxtb	r3, r3
 800e998:	3301      	adds	r3, #1
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	71fb      	strb	r3, [r7, #7]
 800e99e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9a2:	2b04      	cmp	r3, #4
 800e9a4:	ddd8      	ble.n	800e958 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e9a6:	bf00      	nop
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	20000534 	.word	0x20000534

0800e9b4 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800e9be:	4a09      	ldr	r2, [pc, #36]	@ (800e9e4 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800e9c0:	79fb      	ldrb	r3, [r7, #7]
 800e9c2:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800e9c4:	4b08      	ldr	r3, [pc, #32]	@ (800e9e8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d005      	beq.n	800e9da <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800e9ce:	4b06      	ldr	r3, [pc, #24]	@ (800e9e8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9d4:	79fa      	ldrb	r2, [r7, #7]
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	4798      	blx	r3
    }
}
 800e9da:	bf00      	nop
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20000548 	.word	0x20000548
 800e9e8:	20000560 	.word	0x20000560

0800e9ec <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800e9f6:	4a09      	ldr	r2, [pc, #36]	@ (800ea1c <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800e9f8:	79fb      	ldrb	r3, [r7, #7]
 800e9fa:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800e9fc:	4b08      	ldr	r3, [pc, #32]	@ (800ea20 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d005      	beq.n	800ea12 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800ea06:	4b06      	ldr	r3, [pc, #24]	@ (800ea20 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea0c:	79fa      	ldrb	r2, [r7, #7]
 800ea0e:	4610      	mov	r0, r2
 800ea10:	4798      	blx	r3
    }
}
 800ea12:	bf00      	nop
 800ea14:	3708      	adds	r7, #8
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	20000548 	.word	0x20000548
 800ea20:	20000560 	.word	0x20000560

0800ea24 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	6039      	str	r1, [r7, #0]
 800ea2e:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d102      	bne.n	800ea3c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea36:	f04f 33ff 	mov.w	r3, #4294967295
 800ea3a:	e00e      	b.n	800ea5a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800ea3c:	79fb      	ldrb	r3, [r7, #7]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <LmHandlerGetVersion+0x24>
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d004      	beq.n	800ea50 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800ea46:	e007      	b.n	800ea58 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	4a06      	ldr	r2, [pc, #24]	@ (800ea64 <LmHandlerGetVersion+0x40>)
 800ea4c:	601a      	str	r2, [r3, #0]
            break;
 800ea4e:	e003      	b.n	800ea58 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	4a05      	ldr	r2, [pc, #20]	@ (800ea68 <LmHandlerGetVersion+0x44>)
 800ea54:	601a      	str	r2, [r3, #0]
            break;
 800ea56:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bc80      	pop	{r7}
 800ea62:	4770      	bx	lr
 800ea64:	01000400 	.word	0x01000400
 800ea68:	02010003 	.word	0x02010003

0800ea6c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800ea70:	f005 fd72 	bl	8014558 <LoRaMacDeInitialization>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	e001      	b.n	800ea82 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ea7e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800ea8a:	f004 fbc1 	bl	8013210 <LoRaMacHalt>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d101      	bne.n	800ea98 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea94:	2300      	movs	r3, #0
 800ea96:	e001      	b.n	800ea9c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ea98:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b08c      	sub	sp, #48	@ 0x30
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d102      	bne.n	800eab4 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800eaae:	f04f 33ff 	mov.w	r3, #4294967295
 800eab2:	e016      	b.n	800eae2 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800eab4:	2321      	movs	r3, #33	@ 0x21
 800eab6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800eab8:	f107 0308 	add.w	r3, r7, #8
 800eabc:	4618      	mov	r0, r3
 800eabe:	f004 fc6f 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800eac8:	f04f 33ff 	mov.w	r3, #4294967295
 800eacc:	e009      	b.n	800eae2 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800eace:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f993 2000 	ldrsb.w	r2, [r3]
 800eadc:	4b03      	ldr	r3, [pc, #12]	@ (800eaec <LmHandlerGetTxPower+0x4c>)
 800eade:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3730      	adds	r7, #48	@ 0x30
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	20000548 	.word	0x20000548

0800eaf0 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b08e      	sub	sp, #56	@ 0x38
 800eaf4:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800eb00:	f7ff ffc1 	bl	800ea86 <LmHandlerHalt>
 800eb04:	4603      	mov	r3, r0
 800eb06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800eb0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d12f      	bne.n	800eb72 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800eb12:	f000 f859 	bl	800ebc8 <NvmDataMgmtStoreBegin>
 800eb16:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800eb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1a:	f113 0f02 	cmn.w	r3, #2
 800eb1e:	d103      	bne.n	800eb28 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800eb20:	23f8      	movs	r3, #248	@ 0xf8
 800eb22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb26:	e01c      	b.n	800eb62 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800eb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d104      	bne.n	800eb38 <LmHandlerNvmDataStore+0x48>
 800eb2e:	4b1b      	ldr	r3, [pc, #108]	@ (800eb9c <LmHandlerNvmDataStore+0xac>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	695b      	ldr	r3, [r3, #20]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d103      	bne.n	800eb40 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800eb38:	23ff      	movs	r3, #255	@ 0xff
 800eb3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb3e:	e010      	b.n	800eb62 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800eb40:	2327      	movs	r3, #39	@ 0x27
 800eb42:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800eb44:	463b      	mov	r3, r7
 800eb46:	4618      	mov	r0, r3
 800eb48:	f004 fc2a 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800eb50:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800eb54:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800eb56:	4b11      	ldr	r3, [pc, #68]	@ (800eb9c <LmHandlerNvmDataStore+0xac>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	695b      	ldr	r3, [r3, #20]
 800eb5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb60:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800eb62:	f000 f847 	bl	800ebf4 <NvmDataMgmtStoreEnd>
 800eb66:	4603      	mov	r3, r0
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d002      	beq.n	800eb72 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800eb6c:	23ff      	movs	r3, #255	@ 0xff
 800eb6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800eb72:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d109      	bne.n	800eb8e <LmHandlerNvmDataStore+0x9e>
 800eb7a:	4b08      	ldr	r3, [pc, #32]	@ (800eb9c <LmHandlerNvmDataStore+0xac>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	69db      	ldr	r3, [r3, #28]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d004      	beq.n	800eb8e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800eb84:	4b05      	ldr	r3, [pc, #20]	@ (800eb9c <LmHandlerNvmDataStore+0xac>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	69db      	ldr	r3, [r3, #28]
 800eb8a:	2001      	movs	r0, #1
 800eb8c:	4798      	blx	r3
    }

    return lmhStatus;
 800eb8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3738      	adds	r7, #56	@ 0x38
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20000560 	.word	0x20000560

0800eba0 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800ebaa:	4b06      	ldr	r3, [pc, #24]	@ (800ebc4 <NvmDataMgmtEvent+0x24>)
 800ebac:	881a      	ldrh	r2, [r3, #0]
 800ebae:	88fb      	ldrh	r3, [r7, #6]
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	4b03      	ldr	r3, [pc, #12]	@ (800ebc4 <NvmDataMgmtEvent+0x24>)
 800ebb6:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bc80      	pop	{r7}
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	20000688 	.word	0x20000688

0800ebc8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800ebcc:	4b08      	ldr	r3, [pc, #32]	@ (800ebf0 <NvmDataMgmtStoreBegin+0x28>)
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d102      	bne.n	800ebda <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800ebd4:	f06f 0301 	mvn.w	r3, #1
 800ebd8:	e008      	b.n	800ebec <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800ebda:	f004 faf1 	bl	80131c0 <LoRaMacStop>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800ebe4:	f06f 0302 	mvn.w	r3, #2
 800ebe8:	e000      	b.n	800ebec <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800ebea:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	20000688 	.word	0x20000688

0800ebf4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ebf8:	4b03      	ldr	r3, [pc, #12]	@ (800ec08 <NvmDataMgmtStoreEnd+0x14>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800ebfe:	f004 fad1 	bl	80131a4 <LoRaMacStart>
    return NVM_DATA_OK;
 800ec02:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20000688 	.word	0x20000688

0800ec0c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800ec10:	2220      	movs	r2, #32
 800ec12:	2100      	movs	r1, #0
 800ec14:	4802      	ldr	r0, [pc, #8]	@ (800ec20 <ClassBStatusReset+0x14>)
 800ec16:	f009 ffb5 	bl	8018b84 <memset1>
}
 800ec1a:	bf00      	nop
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	200006a0 	.word	0x200006a0

0800ec24 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800ec24:	b480      	push	{r7}
 800ec26:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800ec28:	4b02      	ldr	r3, [pc, #8]	@ (800ec34 <LmhpCompliancePackageFactory+0x10>)
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bc80      	pop	{r7}
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	200000dc 	.word	0x200000dc

0800ec38 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af02      	add	r7, sp, #8
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	4613      	mov	r3, r2
 800ec44:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d018      	beq.n	800ec7e <LmhpComplianceInit+0x46>
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d015      	beq.n	800ec7e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800ec52:	4a19      	ldr	r2, [pc, #100]	@ (800ecb8 <LmhpComplianceInit+0x80>)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800ec58:	4a18      	ldr	r2, [pc, #96]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800ec5e:	4a17      	ldr	r2, [pc, #92]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800ec60:	79fb      	ldrb	r3, [r7, #7]
 800ec62:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800ec64:	4b15      	ldr	r3, [pc, #84]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800ec66:	2201      	movs	r2, #1
 800ec68:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	9300      	str	r3, [sp, #0]
 800ec6e:	4b14      	ldr	r3, [pc, #80]	@ (800ecc0 <LmhpComplianceInit+0x88>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	f04f 31ff 	mov.w	r1, #4294967295
 800ec76:	4813      	ldr	r0, [pc, #76]	@ (800ecc4 <LmhpComplianceInit+0x8c>)
 800ec78:	f00d fff2 	bl	801cc60 <UTIL_TIMER_Create>
 800ec7c:	e005      	b.n	800ec8a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800ec7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ecb8 <LmhpComplianceInit+0x80>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800ec84:	4b0d      	ldr	r3, [pc, #52]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800ec86:	2200      	movs	r2, #0
 800ec88:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800ec8a:	4b0c      	ldr	r3, [pc, #48]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800ec90:	f7ff ffbc 	bl	800ec0c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800ec94:	4b09      	ldr	r3, [pc, #36]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800ec96:	2200      	movs	r2, #0
 800ec98:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800ec9a:	4b08      	ldr	r3, [pc, #32]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800eca0:	4b06      	ldr	r3, [pc, #24]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800eca8:	4b04      	ldr	r3, [pc, #16]	@ (800ecbc <LmhpComplianceInit+0x84>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800ecb0:	bf00      	nop
 800ecb2:	3710      	adds	r7, #16
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	200006c4 	.word	0x200006c4
 800ecbc:	2000068c 	.word	0x2000068c
 800ecc0:	0800f5c1 	.word	0x0800f5c1
 800ecc4:	200006c8 	.word	0x200006c8

0800ecc8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800ecc8:	b480      	push	{r7}
 800ecca:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800eccc:	4b02      	ldr	r3, [pc, #8]	@ (800ecd8 <LmhpComplianceIsInitialized+0x10>)
 800ecce:	781b      	ldrb	r3, [r3, #0]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bc80      	pop	{r7}
 800ecd6:	4770      	bx	lr
 800ecd8:	2000068c 	.word	0x2000068c

0800ecdc <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800ecdc:	b480      	push	{r7}
 800ecde:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800ece0:	4b02      	ldr	r3, [pc, #8]	@ (800ecec <LmhpComplianceIsTxPending+0x10>)
 800ece2:	785b      	ldrb	r3, [r3, #1]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bc80      	pop	{r7}
 800ecea:	4770      	bx	lr
 800ecec:	2000068c 	.word	0x2000068c

0800ecf0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ecf0:	b590      	push	{r4, r7, lr}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ecf6:	4b33      	ldr	r3, [pc, #204]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ecf8:	785b      	ldrb	r3, [r3, #1]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d03e      	beq.n	800ed7c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800ecfe:	f00e f96d 	bl	801cfdc <UTIL_TIMER_GetCurrentTime>
 800ed02:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800ed04:	4b2f      	ldr	r3, [pc, #188]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed06:	685c      	ldr	r4, [r3, #4]
 800ed08:	f7ff f8ba 	bl	800de80 <LmHandlerGetDutyCycleWaitTime>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	4423      	add	r3, r4
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d941      	bls.n	800ed9a <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800ed16:	4b2b      	ldr	r3, [pc, #172]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed18:	7a9b      	ldrb	r3, [r3, #10]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d03d      	beq.n	800ed9a <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800ed1e:	23e0      	movs	r3, #224	@ 0xe0
 800ed20:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800ed22:	4b28      	ldr	r3, [pc, #160]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed24:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800ed26:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ed28:	4b26      	ldr	r3, [pc, #152]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed2a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800ed2c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ed2e:	23ff      	movs	r3, #255	@ 0xff
 800ed30:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ed32:	4b24      	ldr	r3, [pc, #144]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed34:	7a19      	ldrb	r1, [r3, #8]
 800ed36:	463b      	mov	r3, r7
 800ed38:	2201      	movs	r2, #1
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7ff f968 	bl	800e010 <LmHandlerSend>
 800ed40:	4603      	mov	r3, r0
 800ed42:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800ed44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d004      	beq.n	800ed56 <LmhpComplianceProcess+0x66>
 800ed4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed50:	f113 0f07 	cmn.w	r3, #7
 800ed54:	d106      	bne.n	800ed64 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800ed56:	4b1b      	ldr	r3, [pc, #108]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800ed5c:	4b19      	ldr	r3, [pc, #100]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed5e:	2200      	movs	r2, #0
 800ed60:	729a      	strb	r2, [r3, #10]
 800ed62:	e007      	b.n	800ed74 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800ed64:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ed68:	4817      	ldr	r0, [pc, #92]	@ (800edc8 <LmhpComplianceProcess+0xd8>)
 800ed6a:	f00e f88d 	bl	801ce88 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800ed6e:	4816      	ldr	r0, [pc, #88]	@ (800edc8 <LmhpComplianceProcess+0xd8>)
 800ed70:	f00d ffac 	bl	801cccc <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800ed74:	4a13      	ldr	r2, [pc, #76]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6053      	str	r3, [r2, #4]
 800ed7a:	e00e      	b.n	800ed9a <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800ed7c:	4b11      	ldr	r3, [pc, #68]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d009      	beq.n	800ed9a <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800ed86:	4b0f      	ldr	r3, [pc, #60]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800ed8e:	4b0d      	ldr	r3, [pc, #52]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed90:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7ff fa31 	bl	800e1fc <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800ed9a:	4b0a      	ldr	r3, [pc, #40]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800ed9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00a      	beq.n	800edba <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800eda4:	4b07      	ldr	r3, [pc, #28]	@ (800edc4 <LmhpComplianceProcess+0xd4>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800edac:	4b07      	ldr	r3, [pc, #28]	@ (800edcc <LmhpComplianceProcess+0xdc>)
 800edae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d002      	beq.n	800edba <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800edb4:	4b05      	ldr	r3, [pc, #20]	@ (800edcc <LmhpComplianceProcess+0xdc>)
 800edb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb8:	4798      	blx	r3
        }
    }
}
 800edba:	bf00      	nop
 800edbc:	3714      	adds	r7, #20
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd90      	pop	{r4, r7, pc}
 800edc2:	bf00      	nop
 800edc4:	2000068c 	.word	0x2000068c
 800edc8:	200006c8 	.word	0x200006c8
 800edcc:	200000dc 	.word	0x200000dc

0800edd0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800edd0:	b5b0      	push	{r4, r5, r7, lr}
 800edd2:	b0a4      	sub	sp, #144	@ 0x90
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800edd8:	2300      	movs	r3, #0
 800edda:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800edde:	4bd0      	ldr	r3, [pc, #832]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	f083 0301 	eor.w	r3, r3, #1
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f040 83bf 	bne.w	800f56c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	78db      	ldrb	r3, [r3, #3]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d103      	bne.n	800edfe <LmhpComplianceOnMcpsIndication+0x2e>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	7b9b      	ldrb	r3, [r3, #14]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d005      	beq.n	800ee0a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800edfe:	4bc8      	ldr	r3, [pc, #800]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800ee00:	8a1b      	ldrh	r3, [r3, #16]
 800ee02:	3301      	adds	r3, #1
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	4bc6      	ldr	r3, [pc, #792]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800ee08:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	7b5b      	ldrb	r3, [r3, #13]
 800ee0e:	f083 0301 	eor.w	r3, r3, #1
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f040 83ab 	bne.w	800f570 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	78db      	ldrb	r3, [r3, #3]
 800ee1e:	2be0      	cmp	r3, #224	@ 0xe0
 800ee20:	f040 83a8 	bne.w	800f574 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800ee24:	4bbe      	ldr	r3, [pc, #760]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	689a      	ldr	r2, [r3, #8]
 800ee2e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee32:	1c59      	adds	r1, r3, #1
 800ee34:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ee38:	4413      	add	r3, r2
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ee3e:	f200 8372 	bhi.w	800f526 <LmhpComplianceOnMcpsIndication+0x756>
 800ee42:	a201      	add	r2, pc, #4	@ (adr r2, 800ee48 <LmhpComplianceOnMcpsIndication+0x78>)
 800ee44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee48:	0800f049 	.word	0x0800f049
 800ee4c:	0800f08d 	.word	0x0800f08d
 800ee50:	0800f097 	.word	0x0800f097
 800ee54:	0800f0ad 	.word	0x0800f0ad
 800ee58:	0800f0cf 	.word	0x0800f0cf
 800ee5c:	0800f0fd 	.word	0x0800f0fd
 800ee60:	0800f129 	.word	0x0800f129
 800ee64:	0800f187 	.word	0x0800f187
 800ee68:	0800f1df 	.word	0x0800f1df
 800ee6c:	0800f24b 	.word	0x0800f24b
 800ee70:	0800f29b 	.word	0x0800f29b
 800ee74:	0800f527 	.word	0x0800f527
 800ee78:	0800f527 	.word	0x0800f527
 800ee7c:	0800f527 	.word	0x0800f527
 800ee80:	0800f527 	.word	0x0800f527
 800ee84:	0800f527 	.word	0x0800f527
 800ee88:	0800f527 	.word	0x0800f527
 800ee8c:	0800f527 	.word	0x0800f527
 800ee90:	0800f527 	.word	0x0800f527
 800ee94:	0800f527 	.word	0x0800f527
 800ee98:	0800f527 	.word	0x0800f527
 800ee9c:	0800f527 	.word	0x0800f527
 800eea0:	0800f527 	.word	0x0800f527
 800eea4:	0800f527 	.word	0x0800f527
 800eea8:	0800f527 	.word	0x0800f527
 800eeac:	0800f527 	.word	0x0800f527
 800eeb0:	0800f527 	.word	0x0800f527
 800eeb4:	0800f527 	.word	0x0800f527
 800eeb8:	0800f527 	.word	0x0800f527
 800eebc:	0800f527 	.word	0x0800f527
 800eec0:	0800f527 	.word	0x0800f527
 800eec4:	0800f527 	.word	0x0800f527
 800eec8:	0800f2a3 	.word	0x0800f2a3
 800eecc:	0800f2b5 	.word	0x0800f2b5
 800eed0:	0800f2bd 	.word	0x0800f2bd
 800eed4:	0800f527 	.word	0x0800f527
 800eed8:	0800f527 	.word	0x0800f527
 800eedc:	0800f527 	.word	0x0800f527
 800eee0:	0800f527 	.word	0x0800f527
 800eee4:	0800f527 	.word	0x0800f527
 800eee8:	0800f527 	.word	0x0800f527
 800eeec:	0800f527 	.word	0x0800f527
 800eef0:	0800f527 	.word	0x0800f527
 800eef4:	0800f527 	.word	0x0800f527
 800eef8:	0800f527 	.word	0x0800f527
 800eefc:	0800f527 	.word	0x0800f527
 800ef00:	0800f527 	.word	0x0800f527
 800ef04:	0800f527 	.word	0x0800f527
 800ef08:	0800f527 	.word	0x0800f527
 800ef0c:	0800f527 	.word	0x0800f527
 800ef10:	0800f527 	.word	0x0800f527
 800ef14:	0800f527 	.word	0x0800f527
 800ef18:	0800f527 	.word	0x0800f527
 800ef1c:	0800f527 	.word	0x0800f527
 800ef20:	0800f527 	.word	0x0800f527
 800ef24:	0800f527 	.word	0x0800f527
 800ef28:	0800f527 	.word	0x0800f527
 800ef2c:	0800f527 	.word	0x0800f527
 800ef30:	0800f527 	.word	0x0800f527
 800ef34:	0800f527 	.word	0x0800f527
 800ef38:	0800f527 	.word	0x0800f527
 800ef3c:	0800f527 	.word	0x0800f527
 800ef40:	0800f527 	.word	0x0800f527
 800ef44:	0800f527 	.word	0x0800f527
 800ef48:	0800f527 	.word	0x0800f527
 800ef4c:	0800f527 	.word	0x0800f527
 800ef50:	0800f527 	.word	0x0800f527
 800ef54:	0800f527 	.word	0x0800f527
 800ef58:	0800f527 	.word	0x0800f527
 800ef5c:	0800f527 	.word	0x0800f527
 800ef60:	0800f527 	.word	0x0800f527
 800ef64:	0800f527 	.word	0x0800f527
 800ef68:	0800f527 	.word	0x0800f527
 800ef6c:	0800f527 	.word	0x0800f527
 800ef70:	0800f527 	.word	0x0800f527
 800ef74:	0800f527 	.word	0x0800f527
 800ef78:	0800f527 	.word	0x0800f527
 800ef7c:	0800f527 	.word	0x0800f527
 800ef80:	0800f527 	.word	0x0800f527
 800ef84:	0800f527 	.word	0x0800f527
 800ef88:	0800f527 	.word	0x0800f527
 800ef8c:	0800f527 	.word	0x0800f527
 800ef90:	0800f527 	.word	0x0800f527
 800ef94:	0800f527 	.word	0x0800f527
 800ef98:	0800f527 	.word	0x0800f527
 800ef9c:	0800f527 	.word	0x0800f527
 800efa0:	0800f527 	.word	0x0800f527
 800efa4:	0800f527 	.word	0x0800f527
 800efa8:	0800f527 	.word	0x0800f527
 800efac:	0800f527 	.word	0x0800f527
 800efb0:	0800f527 	.word	0x0800f527
 800efb4:	0800f527 	.word	0x0800f527
 800efb8:	0800f527 	.word	0x0800f527
 800efbc:	0800f527 	.word	0x0800f527
 800efc0:	0800f527 	.word	0x0800f527
 800efc4:	0800f527 	.word	0x0800f527
 800efc8:	0800f527 	.word	0x0800f527
 800efcc:	0800f527 	.word	0x0800f527
 800efd0:	0800f527 	.word	0x0800f527
 800efd4:	0800f527 	.word	0x0800f527
 800efd8:	0800f527 	.word	0x0800f527
 800efdc:	0800f527 	.word	0x0800f527
 800efe0:	0800f527 	.word	0x0800f527
 800efe4:	0800f527 	.word	0x0800f527
 800efe8:	0800f527 	.word	0x0800f527
 800efec:	0800f527 	.word	0x0800f527
 800eff0:	0800f527 	.word	0x0800f527
 800eff4:	0800f527 	.word	0x0800f527
 800eff8:	0800f527 	.word	0x0800f527
 800effc:	0800f527 	.word	0x0800f527
 800f000:	0800f527 	.word	0x0800f527
 800f004:	0800f527 	.word	0x0800f527
 800f008:	0800f527 	.word	0x0800f527
 800f00c:	0800f527 	.word	0x0800f527
 800f010:	0800f527 	.word	0x0800f527
 800f014:	0800f527 	.word	0x0800f527
 800f018:	0800f527 	.word	0x0800f527
 800f01c:	0800f527 	.word	0x0800f527
 800f020:	0800f527 	.word	0x0800f527
 800f024:	0800f527 	.word	0x0800f527
 800f028:	0800f527 	.word	0x0800f527
 800f02c:	0800f527 	.word	0x0800f527
 800f030:	0800f527 	.word	0x0800f527
 800f034:	0800f527 	.word	0x0800f527
 800f038:	0800f527 	.word	0x0800f527
 800f03c:	0800f2ef 	.word	0x0800f2ef
 800f040:	0800f39f 	.word	0x0800f39f
 800f044:	0800f3d1 	.word	0x0800f3d1
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800f048:	4b35      	ldr	r3, [pc, #212]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f04a:	68da      	ldr	r2, [r3, #12]
 800f04c:	4b34      	ldr	r3, [pc, #208]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f04e:	7a9b      	ldrb	r3, [r3, #10]
 800f050:	1c59      	adds	r1, r3, #1
 800f052:	b2c8      	uxtb	r0, r1
 800f054:	4932      	ldr	r1, [pc, #200]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f056:	7288      	strb	r0, [r1, #10]
 800f058:	4413      	add	r3, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800f05e:	4b30      	ldr	r3, [pc, #192]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f060:	68da      	ldr	r2, [r3, #12]
 800f062:	4b2f      	ldr	r3, [pc, #188]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f064:	7a9b      	ldrb	r3, [r3, #10]
 800f066:	1c59      	adds	r1, r3, #1
 800f068:	b2c8      	uxtb	r0, r1
 800f06a:	492d      	ldr	r1, [pc, #180]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f06c:	7288      	strb	r0, [r1, #10]
 800f06e:	4413      	add	r3, r2
 800f070:	2206      	movs	r2, #6
 800f072:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800f074:	4b2a      	ldr	r3, [pc, #168]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f076:	68da      	ldr	r2, [r3, #12]
 800f078:	4b29      	ldr	r3, [pc, #164]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f07a:	7a9b      	ldrb	r3, [r3, #10]
 800f07c:	1c59      	adds	r1, r3, #1
 800f07e:	b2c8      	uxtb	r0, r1
 800f080:	4927      	ldr	r1, [pc, #156]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f082:	7288      	strb	r0, [r1, #10]
 800f084:	4413      	add	r3, r2
 800f086:	2201      	movs	r2, #1
 800f088:	701a      	strb	r2, [r3, #0]
                break;
 800f08a:	e257      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800f08c:	4b24      	ldr	r3, [pc, #144]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800f094:	e252      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800f096:	4b23      	ldr	r3, [pc, #140]	@ (800f124 <LmhpComplianceOnMcpsIndication+0x354>)
 800f098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f000 8245 	beq.w	800f52a <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f0a0:	4b20      	ldr	r3, [pc, #128]	@ (800f124 <LmhpComplianceOnMcpsIndication+0x354>)
 800f0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0a4:	2101      	movs	r1, #1
 800f0a6:	2002      	movs	r0, #2
 800f0a8:	4798      	blx	r3
                }
                break;
 800f0aa:	e23e      	b.n	800f52a <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	689a      	ldr	r2, [r3, #8]
 800f0b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f0b4:	1c59      	adds	r1, r3, #1
 800f0b6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f0ba:	4413      	add	r3, r2
 800f0bc:	781a      	ldrb	r2, [r3, #0]
 800f0be:	4b18      	ldr	r3, [pc, #96]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f0c0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800f0c4:	4b16      	ldr	r3, [pc, #88]	@ (800f120 <LmhpComplianceOnMcpsIndication+0x350>)
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800f0cc:	e236      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800f0ce:	2304      	movs	r3, #4
 800f0d0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	689a      	ldr	r2, [r3, #8]
 800f0d6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f0da:	1c59      	adds	r1, r3, #1
 800f0dc:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f0e0:	4413      	add	r3, r2
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	bf14      	ite	ne
 800f0e8:	2301      	movne	r3, #1
 800f0ea:	2300      	moveq	r3, #0
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800f0f0:	f107 0308 	add.w	r3, r7, #8
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f004 fb2b 	bl	8013750 <LoRaMacMibSetRequestConfirm>
                break;
 800f0fa:	e21f      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	689a      	ldr	r2, [r3, #8]
 800f100:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f104:	1c59      	adds	r1, r3, #1
 800f106:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f10a:	4413      	add	r3, r2
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	bf14      	ite	ne
 800f112:	2301      	movne	r3, #1
 800f114:	2300      	moveq	r3, #0
 800f116:	b2db      	uxtb	r3, r3
 800f118:	4618      	mov	r0, r3
 800f11a:	f005 f9f7 	bl	801450c <LoRaMacTestSetDutyCycleOn>
                break;
 800f11e:	e20d      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
 800f120:	2000068c 	.word	0x2000068c
 800f124:	200000dc 	.word	0x200000dc
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800f128:	4ba5      	ldr	r3, [pc, #660]	@ (800f3c0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f12a:	f107 0408 	add.w	r4, r7, #8
 800f12e:	461d      	mov	r5, r3
 800f130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f138:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f13c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	689a      	ldr	r2, [r3, #8]
 800f144:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f148:	1c59      	adds	r1, r3, #1
 800f14a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f14e:	4413      	add	r3, r2
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800f156:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f15a:	2b0a      	cmp	r3, #10
 800f15c:	f200 81e7 	bhi.w	800f52e <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800f160:	4b98      	ldr	r3, [pc, #608]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	f000 81e1 	beq.w	800f52e <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800f16c:	4b95      	ldr	r3, [pc, #596]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	685a      	ldr	r2, [r3, #4]
 800f172:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	3390      	adds	r3, #144	@ 0x90
 800f17a:	443b      	add	r3, r7
 800f17c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800f180:	4618      	mov	r0, r3
 800f182:	4790      	blx	r2
                    }
                }
                break;
 800f184:	e1d3      	b.n	800f52e <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	689a      	ldr	r2, [r3, #8]
 800f18a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f18e:	1c59      	adds	r1, r3, #1
 800f190:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f194:	4413      	add	r3, r2
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800f19c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d004      	beq.n	800f1ae <LmhpComplianceOnMcpsIndication+0x3de>
 800f1a4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	f040 81c2 	bne.w	800f532 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f1ae:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f1b2:	2b01      	cmp	r3, #1
 800f1b4:	bf14      	ite	ne
 800f1b6:	2301      	movne	r3, #1
 800f1b8:	2300      	moveq	r3, #0
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4b82      	ldr	r3, [pc, #520]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1c0:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800f1c2:	4b80      	ldr	r3, [pc, #512]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f000 81b2 	beq.w	800f532 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800f1ce:	4b7d      	ldr	r3, [pc, #500]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	689b      	ldr	r3, [r3, #8]
 800f1d4:	4a7c      	ldr	r2, [pc, #496]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1d6:	7a12      	ldrb	r2, [r2, #8]
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4798      	blx	r3
                    }
                }
                break;
 800f1dc:	e1a9      	b.n	800f532 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800f1de:	4b7a      	ldr	r3, [pc, #488]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1e0:	68da      	ldr	r2, [r3, #12]
 800f1e2:	4b79      	ldr	r3, [pc, #484]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1e4:	7a9b      	ldrb	r3, [r3, #10]
 800f1e6:	1c59      	adds	r1, r3, #1
 800f1e8:	b2c8      	uxtb	r0, r1
 800f1ea:	4977      	ldr	r1, [pc, #476]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1ec:	7288      	strb	r0, [r1, #10]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	2208      	movs	r2, #8
 800f1f2:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800f1fa:	e019      	b.n	800f230 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	689a      	ldr	r2, [r3, #8]
 800f200:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f204:	1c59      	adds	r1, r3, #1
 800f206:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f20a:	4413      	add	r3, r2
 800f20c:	781a      	ldrb	r2, [r3, #0]
 800f20e:	4b6e      	ldr	r3, [pc, #440]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f210:	68d9      	ldr	r1, [r3, #12]
 800f212:	4b6d      	ldr	r3, [pc, #436]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f214:	7a9b      	ldrb	r3, [r3, #10]
 800f216:	1c58      	adds	r0, r3, #1
 800f218:	b2c4      	uxtb	r4, r0
 800f21a:	486b      	ldr	r0, [pc, #428]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f21c:	7284      	strb	r4, [r0, #10]
 800f21e:	440b      	add	r3, r1
 800f220:	3201      	adds	r2, #1
 800f222:	b2d2      	uxtb	r2, r2
 800f224:	701a      	strb	r2, [r3, #0]
                     i++ )
 800f226:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800f22a:	3301      	adds	r3, #1
 800f22c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f230:	4b65      	ldr	r3, [pc, #404]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f232:	7a5a      	ldrb	r2, [r3, #9]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	7b1b      	ldrb	r3, [r3, #12]
 800f238:	4293      	cmp	r3, r2
 800f23a:	bf28      	it	cs
 800f23c:	4613      	movcs	r3, r2
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800f244:	429a      	cmp	r2, r3
 800f246:	d3d9      	bcc.n	800f1fc <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800f248:	e178      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800f24a:	4b5f      	ldr	r3, [pc, #380]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f24c:	68da      	ldr	r2, [r3, #12]
 800f24e:	4b5e      	ldr	r3, [pc, #376]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f250:	7a9b      	ldrb	r3, [r3, #10]
 800f252:	1c59      	adds	r1, r3, #1
 800f254:	b2c8      	uxtb	r0, r1
 800f256:	495c      	ldr	r1, [pc, #368]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f258:	7288      	strb	r0, [r1, #10]
 800f25a:	4413      	add	r3, r2
 800f25c:	2209      	movs	r2, #9
 800f25e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800f260:	4b59      	ldr	r3, [pc, #356]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f262:	8a18      	ldrh	r0, [r3, #16]
 800f264:	4b58      	ldr	r3, [pc, #352]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f266:	68da      	ldr	r2, [r3, #12]
 800f268:	4b57      	ldr	r3, [pc, #348]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f26a:	7a9b      	ldrb	r3, [r3, #10]
 800f26c:	1c59      	adds	r1, r3, #1
 800f26e:	b2cc      	uxtb	r4, r1
 800f270:	4955      	ldr	r1, [pc, #340]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f272:	728c      	strb	r4, [r1, #10]
 800f274:	4413      	add	r3, r2
 800f276:	b2c2      	uxtb	r2, r0
 800f278:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800f27a:	4b53      	ldr	r3, [pc, #332]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f27c:	8a1b      	ldrh	r3, [r3, #16]
 800f27e:	0a1b      	lsrs	r3, r3, #8
 800f280:	b298      	uxth	r0, r3
 800f282:	4b51      	ldr	r3, [pc, #324]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f284:	68da      	ldr	r2, [r3, #12]
 800f286:	4b50      	ldr	r3, [pc, #320]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f288:	7a9b      	ldrb	r3, [r3, #10]
 800f28a:	1c59      	adds	r1, r3, #1
 800f28c:	b2cc      	uxtb	r4, r1
 800f28e:	494e      	ldr	r1, [pc, #312]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f290:	728c      	strb	r4, [r1, #10]
 800f292:	4413      	add	r3, r2
 800f294:	b2c2      	uxtb	r2, r0
 800f296:	701a      	strb	r2, [r3, #0]
                break;
 800f298:	e150      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800f29a:	4b4b      	ldr	r3, [pc, #300]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	821a      	strh	r2, [r3, #16]
                break;
 800f2a0:	e14c      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800f2a2:	2305      	movs	r3, #5
 800f2a4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800f2a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f004 fe51 	bl	8013f54 <LoRaMacMlmeRequest>
                break;
 800f2b2:	e143      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800f2b4:	4b45      	ldr	r3, [pc, #276]	@ (800f3cc <LmhpComplianceOnMcpsIndication+0x5fc>)
 800f2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b8:	4798      	blx	r3
                break;
 800f2ba:	e13f      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	689a      	ldr	r2, [r3, #8]
 800f2c0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f2c4:	1c59      	adds	r1, r3, #1
 800f2c6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f2ca:	4413      	add	r3, r2
 800f2cc:	781a      	ldrb	r2, [r3, #0]
 800f2ce:	4b3e      	ldr	r3, [pc, #248]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f2d0:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800f2d2:	4b3c      	ldr	r3, [pc, #240]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	f000 812c 	beq.w	800f536 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800f2de:	4b39      	ldr	r3, [pc, #228]	@ (800f3c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	4a38      	ldr	r2, [pc, #224]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f2e6:	7d52      	ldrb	r2, [r2, #21]
 800f2e8:	4610      	mov	r0, r2
 800f2ea:	4798      	blx	r3
                }
                break;
 800f2ec:	e123      	b.n	800f536 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	7b1b      	ldrb	r3, [r3, #12]
 800f2f2:	2b07      	cmp	r3, #7
 800f2f4:	f040 8121 	bne.w	800f53a <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f2f8:	2306      	movs	r3, #6
 800f2fa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	689a      	ldr	r2, [r3, #8]
 800f302:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f306:	4413      	add	r3, r2
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	b21a      	sxth	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6899      	ldr	r1, [r3, #8]
 800f310:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f314:	3301      	adds	r3, #1
 800f316:	440b      	add	r3, r1
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	021b      	lsls	r3, r3, #8
 800f31c:	b21b      	sxth	r3, r3
 800f31e:	4313      	orrs	r3, r2
 800f320:	b21b      	sxth	r3, r3
 800f322:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800f324:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800f328:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f32c:	3302      	adds	r3, #2
 800f32e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	689a      	ldr	r2, [r3, #8]
 800f336:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f33a:	4413      	add	r3, r2
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	4619      	mov	r1, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	689a      	ldr	r2, [r3, #8]
 800f344:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f348:	3301      	adds	r3, #1
 800f34a:	4413      	add	r3, r2
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	021b      	lsls	r3, r3, #8
 800f350:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6899      	ldr	r1, [r3, #8]
 800f358:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f35c:	3302      	adds	r3, #2
 800f35e:	440b      	add	r3, r1
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f364:	4313      	orrs	r3, r2
 800f366:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f368:	2364      	movs	r3, #100	@ 0x64
 800f36a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800f36e:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800f370:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f374:	3303      	adds	r3, #3
 800f376:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	689a      	ldr	r2, [r3, #8]
 800f37e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f382:	1c59      	adds	r1, r3, #1
 800f384:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f388:	4413      	add	r3, r2
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	b25b      	sxtb	r3, r3
 800f38e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800f392:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f396:	4618      	mov	r0, r3
 800f398:	f004 fddc 	bl	8013f54 <LoRaMacMlmeRequest>
                }
                break;
 800f39c:	e0cd      	b.n	800f53a <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800f39e:	233b      	movs	r3, #59	@ 0x3b
 800f3a0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f3aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f004 f9ce 	bl	8013750 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800f3b4:	4b04      	ldr	r3, [pc, #16]	@ (800f3c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800f3bc:	e0be      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
 800f3be:	bf00      	nop
 800f3c0:	0801df08 	.word	0x0801df08
 800f3c4:	200006c4 	.word	0x200006c4
 800f3c8:	2000068c 	.word	0x2000068c
 800f3cc:	200000dc 	.word	0x200000dc
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800f3d0:	232a      	movs	r3, #42	@ 0x2a
 800f3d2:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800f3d4:	f107 0308 	add.w	r3, r7, #8
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f003 ffe1 	bl	80133a0 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800f3e6:	4b65      	ldr	r3, [pc, #404]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3e8:	68da      	ldr	r2, [r3, #12]
 800f3ea:	4b64      	ldr	r3, [pc, #400]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3ec:	7a9b      	ldrb	r3, [r3, #10]
 800f3ee:	1c59      	adds	r1, r3, #1
 800f3f0:	b2c8      	uxtb	r0, r1
 800f3f2:	4962      	ldr	r1, [pc, #392]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3f4:	7288      	strb	r0, [r1, #10]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	227f      	movs	r2, #127	@ 0x7f
 800f3fa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800f3fc:	4b60      	ldr	r3, [pc, #384]	@ (800f580 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	4b5e      	ldr	r3, [pc, #376]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f402:	68d9      	ldr	r1, [r3, #12]
 800f404:	4b5d      	ldr	r3, [pc, #372]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f406:	7a9b      	ldrb	r3, [r3, #10]
 800f408:	1c58      	adds	r0, r3, #1
 800f40a:	b2c4      	uxtb	r4, r0
 800f40c:	485b      	ldr	r0, [pc, #364]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f40e:	7284      	strb	r4, [r0, #10]
 800f410:	440b      	add	r3, r1
 800f412:	78d2      	ldrb	r2, [r2, #3]
 800f414:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800f416:	4b5a      	ldr	r3, [pc, #360]	@ (800f580 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	4b58      	ldr	r3, [pc, #352]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f41c:	68d9      	ldr	r1, [r3, #12]
 800f41e:	4b57      	ldr	r3, [pc, #348]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f420:	7a9b      	ldrb	r3, [r3, #10]
 800f422:	1c58      	adds	r0, r3, #1
 800f424:	b2c4      	uxtb	r4, r0
 800f426:	4855      	ldr	r0, [pc, #340]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f428:	7284      	strb	r4, [r0, #10]
 800f42a:	440b      	add	r3, r1
 800f42c:	7892      	ldrb	r2, [r2, #2]
 800f42e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800f430:	4b53      	ldr	r3, [pc, #332]	@ (800f580 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	4b51      	ldr	r3, [pc, #324]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f436:	68d9      	ldr	r1, [r3, #12]
 800f438:	4b50      	ldr	r3, [pc, #320]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f43a:	7a9b      	ldrb	r3, [r3, #10]
 800f43c:	1c58      	adds	r0, r3, #1
 800f43e:	b2c4      	uxtb	r4, r0
 800f440:	484e      	ldr	r0, [pc, #312]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f442:	7284      	strb	r4, [r0, #10]
 800f444:	440b      	add	r3, r1
 800f446:	7852      	ldrb	r2, [r2, #1]
 800f448:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800f44a:	4b4d      	ldr	r3, [pc, #308]	@ (800f580 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	4b4b      	ldr	r3, [pc, #300]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f450:	68d9      	ldr	r1, [r3, #12]
 800f452:	4b4a      	ldr	r3, [pc, #296]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f454:	7a9b      	ldrb	r3, [r3, #10]
 800f456:	1c58      	adds	r0, r3, #1
 800f458:	b2c4      	uxtb	r4, r0
 800f45a:	4848      	ldr	r0, [pc, #288]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f45c:	7284      	strb	r4, [r0, #10]
 800f45e:	440b      	add	r3, r1
 800f460:	7812      	ldrb	r2, [r2, #0]
 800f462:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800f464:	4b45      	ldr	r3, [pc, #276]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f466:	68da      	ldr	r2, [r3, #12]
 800f468:	4b44      	ldr	r3, [pc, #272]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f46a:	7a9b      	ldrb	r3, [r3, #10]
 800f46c:	1c59      	adds	r1, r3, #1
 800f46e:	b2c8      	uxtb	r0, r1
 800f470:	4942      	ldr	r1, [pc, #264]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f472:	7288      	strb	r0, [r1, #10]
 800f474:	4413      	add	r3, r2
 800f476:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800f47a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800f47c:	4b3f      	ldr	r3, [pc, #252]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f47e:	68da      	ldr	r2, [r3, #12]
 800f480:	4b3e      	ldr	r3, [pc, #248]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f482:	7a9b      	ldrb	r3, [r3, #10]
 800f484:	1c59      	adds	r1, r3, #1
 800f486:	b2c8      	uxtb	r0, r1
 800f488:	493c      	ldr	r1, [pc, #240]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f48a:	7288      	strb	r0, [r1, #10]
 800f48c:	4413      	add	r3, r2
 800f48e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800f492:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800f494:	4b39      	ldr	r3, [pc, #228]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f496:	68da      	ldr	r2, [r3, #12]
 800f498:	4b38      	ldr	r3, [pc, #224]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f49a:	7a9b      	ldrb	r3, [r3, #10]
 800f49c:	1c59      	adds	r1, r3, #1
 800f49e:	b2c8      	uxtb	r0, r1
 800f4a0:	4936      	ldr	r1, [pc, #216]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4a2:	7288      	strb	r0, [r1, #10]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800f4aa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800f4ac:	4b33      	ldr	r3, [pc, #204]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4ae:	68da      	ldr	r2, [r3, #12]
 800f4b0:	4b32      	ldr	r3, [pc, #200]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4b2:	7a9b      	ldrb	r3, [r3, #10]
 800f4b4:	1c59      	adds	r1, r3, #1
 800f4b6:	b2c8      	uxtb	r0, r1
 800f4b8:	4930      	ldr	r1, [pc, #192]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4ba:	7288      	strb	r0, [r1, #10]
 800f4bc:	4413      	add	r3, r2
 800f4be:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f4c2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800f4c4:	4b2d      	ldr	r3, [pc, #180]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4c6:	68da      	ldr	r2, [r3, #12]
 800f4c8:	4b2c      	ldr	r3, [pc, #176]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4ca:	7a9b      	ldrb	r3, [r3, #10]
 800f4cc:	1c59      	adds	r1, r3, #1
 800f4ce:	b2c8      	uxtb	r0, r1
 800f4d0:	492a      	ldr	r1, [pc, #168]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4d2:	7288      	strb	r0, [r1, #10]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800f4da:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800f4dc:	4b27      	ldr	r3, [pc, #156]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4de:	68da      	ldr	r2, [r3, #12]
 800f4e0:	4b26      	ldr	r3, [pc, #152]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4e2:	7a9b      	ldrb	r3, [r3, #10]
 800f4e4:	1c59      	adds	r1, r3, #1
 800f4e6:	b2c8      	uxtb	r0, r1
 800f4e8:	4924      	ldr	r1, [pc, #144]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4ea:	7288      	strb	r0, [r1, #10]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800f4f2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800f4f4:	4b21      	ldr	r3, [pc, #132]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4f6:	68da      	ldr	r2, [r3, #12]
 800f4f8:	4b20      	ldr	r3, [pc, #128]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f4fa:	7a9b      	ldrb	r3, [r3, #10]
 800f4fc:	1c59      	adds	r1, r3, #1
 800f4fe:	b2c8      	uxtb	r0, r1
 800f500:	491e      	ldr	r1, [pc, #120]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f502:	7288      	strb	r0, [r1, #10]
 800f504:	4413      	add	r3, r2
 800f506:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f50a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800f50c:	4b1b      	ldr	r3, [pc, #108]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f50e:	68da      	ldr	r2, [r3, #12]
 800f510:	4b1a      	ldr	r3, [pc, #104]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f512:	7a9b      	ldrb	r3, [r3, #10]
 800f514:	1c59      	adds	r1, r3, #1
 800f516:	b2c8      	uxtb	r0, r1
 800f518:	4918      	ldr	r1, [pc, #96]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f51a:	7288      	strb	r0, [r1, #10]
 800f51c:	4413      	add	r3, r2
 800f51e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f522:	701a      	strb	r2, [r3, #0]
                break;
 800f524:	e00a      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800f526:	bf00      	nop
 800f528:	e008      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f52a:	bf00      	nop
 800f52c:	e006      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f52e:	bf00      	nop
 800f530:	e004      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f532:	bf00      	nop
 800f534:	e002      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f536:	bf00      	nop
 800f538:	e000      	b.n	800f53c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f53a:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800f53c:	4b0f      	ldr	r3, [pc, #60]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f53e:	7a9b      	ldrb	r3, [r3, #10]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00c      	beq.n	800f55e <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800f544:	4b0f      	ldr	r3, [pc, #60]	@ (800f584 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f546:	7a5b      	ldrb	r3, [r3, #9]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d114      	bne.n	800f576 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800f54c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f550:	480c      	ldr	r0, [pc, #48]	@ (800f584 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f552:	f00d fc99 	bl	801ce88 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800f556:	480b      	ldr	r0, [pc, #44]	@ (800f584 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f558:	f00d fbb8 	bl	801cccc <UTIL_TIMER_Start>
 800f55c:	e00b      	b.n	800f576 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800f55e:	4809      	ldr	r0, [pc, #36]	@ (800f584 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f560:	f00d fc22 	bl	801cda8 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800f564:	4b05      	ldr	r3, [pc, #20]	@ (800f57c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f566:	2200      	movs	r2, #0
 800f568:	705a      	strb	r2, [r3, #1]
 800f56a:	e004      	b.n	800f576 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f56c:	bf00      	nop
 800f56e:	e002      	b.n	800f576 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f570:	bf00      	nop
 800f572:	e000      	b.n	800f576 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f574:	bf00      	nop
    }
}
 800f576:	3790      	adds	r7, #144	@ 0x90
 800f578:	46bd      	mov	sp, r7
 800f57a:	bdb0      	pop	{r4, r5, r7, pc}
 800f57c:	2000068c 	.word	0x2000068c
 800f580:	200006c4 	.word	0x200006c4
 800f584:	200006c8 	.word	0x200006c8

0800f588 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800f590:	bf00      	nop
    }
}
 800f592:	bf00      	nop
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	bc80      	pop	{r7}
 800f59a:	4770      	bx	lr

0800f59c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f5a4:	4b05      	ldr	r3, [pc, #20]	@ (800f5bc <LmhpComplianceOnMlmeIndication+0x20>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	f083 0301 	eor.w	r3, r3, #1
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b00      	cmp	r3, #0
    {
        return;
 800f5b0:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bc80      	pop	{r7}
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	2000068c 	.word	0x2000068c

0800f5c0 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800f5c8:	4b08      	ldr	r3, [pc, #32]	@ (800f5ec <OnProcessTimer+0x2c>)
 800f5ca:	7a9b      	ldrb	r3, [r3, #10]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d002      	beq.n	800f5d6 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800f5d0:	4b06      	ldr	r3, [pc, #24]	@ (800f5ec <OnProcessTimer+0x2c>)
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800f5d6:	4b06      	ldr	r3, [pc, #24]	@ (800f5f0 <OnProcessTimer+0x30>)
 800f5d8:	695b      	ldr	r3, [r3, #20]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d002      	beq.n	800f5e4 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800f5de:	4b04      	ldr	r3, [pc, #16]	@ (800f5f0 <OnProcessTimer+0x30>)
 800f5e0:	695b      	ldr	r3, [r3, #20]
 800f5e2:	4798      	blx	r3
    }
}
 800f5e4:	bf00      	nop
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	2000068c 	.word	0x2000068c
 800f5f0:	200000dc 	.word	0x200000dc

0800f5f4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	370c      	adds	r7, #12
 800f602:	46bd      	mov	sp, r7
 800f604:	bc80      	pop	{r7}
 800f606:	4770      	bx	lr

0800f608 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	4603      	mov	r3, r0
 800f610:	6039      	str	r1, [r7, #0]
 800f612:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800f614:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800f618:	4618      	mov	r0, r3
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bc80      	pop	{r7}
 800f620:	4770      	bx	lr
	...

0800f624 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800f624:	b590      	push	{r4, r7, lr}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f62a:	f00d fcd7 	bl	801cfdc <UTIL_TIMER_GetCurrentTime>
 800f62e:	4603      	mov	r3, r0
 800f630:	4a0f      	ldr	r2, [pc, #60]	@ (800f670 <OnRadioTxDone+0x4c>)
 800f632:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f634:	4c0f      	ldr	r4, [pc, #60]	@ (800f674 <OnRadioTxDone+0x50>)
 800f636:	463b      	mov	r3, r7
 800f638:	4618      	mov	r0, r3
 800f63a:	f00c feb5 	bl	801c3a8 <SysTimeGet>
 800f63e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800f642:	463a      	mov	r2, r7
 800f644:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f648:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f64c:	4a0a      	ldr	r2, [pc, #40]	@ (800f678 <OnRadioTxDone+0x54>)
 800f64e:	7813      	ldrb	r3, [r2, #0]
 800f650:	f043 0320 	orr.w	r3, r3, #32
 800f654:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f656:	f003 fa9f 	bl	8012b98 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f65a:	4b08      	ldr	r3, [pc, #32]	@ (800f67c <OnRadioTxDone+0x58>)
 800f65c:	2201      	movs	r2, #1
 800f65e:	2100      	movs	r1, #0
 800f660:	2002      	movs	r0, #2
 800f662:	f00d fdab 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800f666:	bf00      	nop
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd90      	pop	{r4, r7, pc}
 800f66e:	bf00      	nop
 800f670:	20001820 	.word	0x20001820
 800f674:	200006e0 	.word	0x200006e0
 800f678:	2000181c 	.word	0x2000181c
 800f67c:	0801df34 	.word	0x0801df34

0800f680 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	4608      	mov	r0, r1
 800f68a:	4611      	mov	r1, r2
 800f68c:	461a      	mov	r2, r3
 800f68e:	4603      	mov	r3, r0
 800f690:	817b      	strh	r3, [r7, #10]
 800f692:	460b      	mov	r3, r1
 800f694:	813b      	strh	r3, [r7, #8]
 800f696:	4613      	mov	r3, r2
 800f698:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f69a:	f00d fc9f 	bl	801cfdc <UTIL_TIMER_GetCurrentTime>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	4a11      	ldr	r2, [pc, #68]	@ (800f6e8 <OnRadioRxDone+0x68>)
 800f6a2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f6a4:	4a10      	ldr	r2, [pc, #64]	@ (800f6e8 <OnRadioRxDone+0x68>)
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f6aa:	4a0f      	ldr	r2, [pc, #60]	@ (800f6e8 <OnRadioRxDone+0x68>)
 800f6ac:	897b      	ldrh	r3, [r7, #10]
 800f6ae:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f6b0:	4a0d      	ldr	r2, [pc, #52]	@ (800f6e8 <OnRadioRxDone+0x68>)
 800f6b2:	893b      	ldrh	r3, [r7, #8]
 800f6b4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800f6e8 <OnRadioRxDone+0x68>)
 800f6b8:	79fb      	ldrb	r3, [r7, #7]
 800f6ba:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f6bc:	4a0b      	ldr	r2, [pc, #44]	@ (800f6ec <OnRadioRxDone+0x6c>)
 800f6be:	7813      	ldrb	r3, [r2, #0]
 800f6c0:	f043 0310 	orr.w	r3, r3, #16
 800f6c4:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800f6c6:	4a09      	ldr	r2, [pc, #36]	@ (800f6ec <OnRadioRxDone+0x6c>)
 800f6c8:	7813      	ldrb	r3, [r2, #0]
 800f6ca:	f043 0301 	orr.w	r3, r3, #1
 800f6ce:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800f6d0:	f003 fa62 	bl	8012b98 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f6d4:	4b06      	ldr	r3, [pc, #24]	@ (800f6f0 <OnRadioRxDone+0x70>)
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	2100      	movs	r1, #0
 800f6da:	2002      	movs	r0, #2
 800f6dc:	f00d fd6e 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800f6e0:	bf00      	nop
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	20001824 	.word	0x20001824
 800f6ec:	2000181c 	.word	0x2000181c
 800f6f0:	0801df44 	.word	0x0801df44

0800f6f4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f6f8:	4a07      	ldr	r2, [pc, #28]	@ (800f718 <OnRadioTxTimeout+0x24>)
 800f6fa:	7813      	ldrb	r3, [r2, #0]
 800f6fc:	f043 0308 	orr.w	r3, r3, #8
 800f700:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f702:	f003 fa49 	bl	8012b98 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f706:	4b05      	ldr	r3, [pc, #20]	@ (800f71c <OnRadioTxTimeout+0x28>)
 800f708:	2201      	movs	r2, #1
 800f70a:	2100      	movs	r1, #0
 800f70c:	2002      	movs	r0, #2
 800f70e:	f00d fd55 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800f712:	bf00      	nop
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	2000181c 	.word	0x2000181c
 800f71c:	0801df54 	.word	0x0801df54

0800f720 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f724:	4a04      	ldr	r2, [pc, #16]	@ (800f738 <OnRadioRxError+0x18>)
 800f726:	7813      	ldrb	r3, [r2, #0]
 800f728:	f043 0304 	orr.w	r3, r3, #4
 800f72c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f72e:	f003 fa33 	bl	8012b98 <OnMacProcessNotify>
}
 800f732:	bf00      	nop
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	2000181c 	.word	0x2000181c

0800f73c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f740:	4a07      	ldr	r2, [pc, #28]	@ (800f760 <OnRadioRxTimeout+0x24>)
 800f742:	7813      	ldrb	r3, [r2, #0]
 800f744:	f043 0302 	orr.w	r3, r3, #2
 800f748:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f74a:	f003 fa25 	bl	8012b98 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f74e:	4b05      	ldr	r3, [pc, #20]	@ (800f764 <OnRadioRxTimeout+0x28>)
 800f750:	2201      	movs	r2, #1
 800f752:	2100      	movs	r1, #0
 800f754:	2002      	movs	r0, #2
 800f756:	f00d fd31 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800f75a:	bf00      	nop
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	2000181c 	.word	0x2000181c
 800f764:	0801df64 	.word	0x0801df64

0800f768 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f768:	b480      	push	{r7}
 800f76a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f76c:	4b08      	ldr	r3, [pc, #32]	@ (800f790 <UpdateRxSlotIdleState+0x28>)
 800f76e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f772:	2b02      	cmp	r3, #2
 800f774:	d004      	beq.n	800f780 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f776:	4b07      	ldr	r3, [pc, #28]	@ (800f794 <UpdateRxSlotIdleState+0x2c>)
 800f778:	2206      	movs	r2, #6
 800f77a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f77e:	e003      	b.n	800f788 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f780:	4b04      	ldr	r3, [pc, #16]	@ (800f794 <UpdateRxSlotIdleState+0x2c>)
 800f782:	2202      	movs	r2, #2
 800f784:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800f788:	bf00      	nop
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bc80      	pop	{r7}
 800f78e:	4770      	bx	lr
 800f790:	20000c14 	.word	0x20000c14
 800f794:	200006e0 	.word	0x200006e0

0800f798 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b092      	sub	sp, #72	@ 0x48
 800f79c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f79e:	4b4a      	ldr	r3, [pc, #296]	@ (800f8c8 <ProcessRadioTxDone+0x130>)
 800f7a0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d002      	beq.n	800f7ae <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f7a8:	4b48      	ldr	r3, [pc, #288]	@ (800f8cc <ProcessRadioTxDone+0x134>)
 800f7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7ac:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7ae:	f3ef 8310 	mrs	r3, PRIMASK
 800f7b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800f7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800f7b8:	b672      	cpsid	i
}
 800f7ba:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800f7bc:	f00d fc0e 	bl	801cfdc <UTIL_TIMER_GetCurrentTime>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	4b43      	ldr	r3, [pc, #268]	@ (800f8d0 <ProcessRadioTxDone+0x138>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800f7ca:	4b42      	ldr	r3, [pc, #264]	@ (800f8d4 <ProcessRadioTxDone+0x13c>)
 800f7cc:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d2:	1ad3      	subs	r3, r2, r3
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	4840      	ldr	r0, [pc, #256]	@ (800f8d8 <ProcessRadioTxDone+0x140>)
 800f7d8:	f00d fb56 	bl	801ce88 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f7dc:	483e      	ldr	r0, [pc, #248]	@ (800f8d8 <ProcessRadioTxDone+0x140>)
 800f7de:	f00d fa75 	bl	801cccc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800f7e2:	4b3c      	ldr	r3, [pc, #240]	@ (800f8d4 <ProcessRadioTxDone+0x13c>)
 800f7e4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	483b      	ldr	r0, [pc, #236]	@ (800f8dc <ProcessRadioTxDone+0x144>)
 800f7f0:	f00d fb4a 	bl	801ce88 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f7f4:	4839      	ldr	r0, [pc, #228]	@ (800f8dc <ProcessRadioTxDone+0x144>)
 800f7f6:	f00d fa69 	bl	801cccc <UTIL_TIMER_Start>
 800f7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7fc:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f800:	f383 8810 	msr	PRIMASK, r3
}
 800f804:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800f806:	4b33      	ldr	r3, [pc, #204]	@ (800f8d4 <ProcessRadioTxDone+0x13c>)
 800f808:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d01a      	beq.n	800f846 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f810:	2315      	movs	r3, #21
 800f812:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f816:	4b2c      	ldr	r3, [pc, #176]	@ (800f8c8 <ProcessRadioTxDone+0x130>)
 800f818:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f81c:	f107 0220 	add.w	r2, r7, #32
 800f820:	4611      	mov	r1, r2
 800f822:	4618      	mov	r0, r3
 800f824:	f006 ff47 	bl	80166b6 <RegionGetPhyParam>
 800f828:	4603      	mov	r3, r0
 800f82a:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f82c:	4b29      	ldr	r3, [pc, #164]	@ (800f8d4 <ProcessRadioTxDone+0x13c>)
 800f82e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	4413      	add	r3, r2
 800f836:	4619      	mov	r1, r3
 800f838:	4829      	ldr	r0, [pc, #164]	@ (800f8e0 <ProcessRadioTxDone+0x148>)
 800f83a:	f00d fb25 	bl	801ce88 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f83e:	4828      	ldr	r0, [pc, #160]	@ (800f8e0 <ProcessRadioTxDone+0x148>)
 800f840:	f00d fa44 	bl	801cccc <UTIL_TIMER_Start>
 800f844:	e003      	b.n	800f84e <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f846:	4b23      	ldr	r3, [pc, #140]	@ (800f8d4 <ProcessRadioTxDone+0x13c>)
 800f848:	2200      	movs	r2, #0
 800f84a:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f84e:	4b20      	ldr	r3, [pc, #128]	@ (800f8d0 <ProcessRadioTxDone+0x138>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a1d      	ldr	r2, [pc, #116]	@ (800f8c8 <ProcessRadioTxDone+0x130>)
 800f854:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f856:	4b1f      	ldr	r3, [pc, #124]	@ (800f8d4 <ProcessRadioTxDone+0x13c>)
 800f858:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800f85c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f85e:	4b1c      	ldr	r3, [pc, #112]	@ (800f8d0 <ProcessRadioTxDone+0x138>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f864:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f868:	4618      	mov	r0, r3
 800f86a:	f00c fdd5 	bl	801c418 <SysTimeGetMcuTime>
 800f86e:	4638      	mov	r0, r7
 800f870:	4b15      	ldr	r3, [pc, #84]	@ (800f8c8 <ProcessRadioTxDone+0x130>)
 800f872:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800f876:	9200      	str	r2, [sp, #0]
 800f878:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800f87c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f880:	ca06      	ldmia	r2, {r1, r2}
 800f882:	f00c fd2a 	bl	801c2da <SysTimeSub>
 800f886:	f107 0314 	add.w	r3, r7, #20
 800f88a:	463a      	mov	r2, r7
 800f88c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f890:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f894:	4b0f      	ldr	r3, [pc, #60]	@ (800f8d4 <ProcessRadioTxDone+0x13c>)
 800f896:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800f89a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f89c:	2301      	movs	r3, #1
 800f89e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f8a0:	4b09      	ldr	r3, [pc, #36]	@ (800f8c8 <ProcessRadioTxDone+0x130>)
 800f8a2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d101      	bne.n	800f8ae <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f8ae:	4b06      	ldr	r3, [pc, #24]	@ (800f8c8 <ProcessRadioTxDone+0x130>)
 800f8b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f8b4:	f107 0208 	add.w	r2, r7, #8
 800f8b8:	4611      	mov	r1, r2
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f006 ff13 	bl	80166e6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f8c0:	bf00      	nop
 800f8c2:	3740      	adds	r7, #64	@ 0x40
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	20000c14 	.word	0x20000c14
 800f8cc:	0801e614 	.word	0x0801e614
 800f8d0:	20001820 	.word	0x20001820
 800f8d4:	200006e0 	.word	0x200006e0
 800f8d8:	20000a60 	.word	0x20000a60
 800f8dc:	20000a78 	.word	0x20000a78
 800f8e0:	20000ae0 	.word	0x20000ae0

0800f8e4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f8e8:	4b10      	ldr	r3, [pc, #64]	@ (800f92c <PrepareRxDoneAbort+0x48>)
 800f8ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8f2:	4a0e      	ldr	r2, [pc, #56]	@ (800f92c <PrepareRxDoneAbort+0x48>)
 800f8f4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800f8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f92c <PrepareRxDoneAbort+0x48>)
 800f8fa:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d002      	beq.n	800f908 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f902:	2000      	movs	r0, #0
 800f904:	f001 fa12 	bl	8010d2c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f908:	4a08      	ldr	r2, [pc, #32]	@ (800f92c <PrepareRxDoneAbort+0x48>)
 800f90a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f90e:	f043 0302 	orr.w	r3, r3, #2
 800f912:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f916:	4a05      	ldr	r2, [pc, #20]	@ (800f92c <PrepareRxDoneAbort+0x48>)
 800f918:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f91c:	f043 0310 	orr.w	r3, r3, #16
 800f920:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800f924:	f7ff ff20 	bl	800f768 <UpdateRxSlotIdleState>
}
 800f928:	bf00      	nop
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	200006e0 	.word	0x200006e0

0800f930 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f930:	b590      	push	{r4, r7, lr}
 800f932:	b0a9      	sub	sp, #164	@ 0xa4
 800f934:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f936:	2312      	movs	r3, #18
 800f938:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f93c:	4ba1      	ldr	r3, [pc, #644]	@ (800fbc4 <ProcessRadioRxDone+0x294>)
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800f944:	4b9f      	ldr	r3, [pc, #636]	@ (800fbc4 <ProcessRadioRxDone+0x294>)
 800f946:	891b      	ldrh	r3, [r3, #8]
 800f948:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800f94c:	4b9d      	ldr	r3, [pc, #628]	@ (800fbc4 <ProcessRadioRxDone+0x294>)
 800f94e:	895b      	ldrh	r3, [r3, #10]
 800f950:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800f954:	4b9b      	ldr	r3, [pc, #620]	@ (800fbc4 <ProcessRadioRxDone+0x294>)
 800f956:	7b1b      	ldrb	r3, [r3, #12]
 800f958:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800f95c:	2300      	movs	r3, #0
 800f95e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800f962:	2300      	movs	r3, #0
 800f964:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f966:	4b98      	ldr	r3, [pc, #608]	@ (800fbc8 <ProcessRadioRxDone+0x298>)
 800f968:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f96c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800f970:	2300      	movs	r3, #0
 800f972:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f976:	2301      	movs	r3, #1
 800f978:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800f97c:	2301      	movs	r3, #1
 800f97e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f982:	4a92      	ldr	r2, [pc, #584]	@ (800fbcc <ProcessRadioRxDone+0x29c>)
 800f984:	7813      	ldrb	r3, [r2, #0]
 800f986:	f36f 0300 	bfc	r3, #0, #1
 800f98a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f98c:	4b90      	ldr	r3, [pc, #576]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f98e:	2200      	movs	r2, #0
 800f990:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800f994:	4a8e      	ldr	r2, [pc, #568]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f996:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800f99a:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800f99e:	4a8c      	ldr	r2, [pc, #560]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f9a4:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f9a8:	4b89      	ldr	r3, [pc, #548]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9aa:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800f9ae:	4b88      	ldr	r3, [pc, #544]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9b0:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800f9b4:	4b86      	ldr	r3, [pc, #536]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800f9bc:	4b84      	ldr	r3, [pc, #528]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800f9c4:	4b82      	ldr	r3, [pc, #520]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800f9cc:	4b80      	ldr	r3, [pc, #512]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800f9d4:	4b7e      	ldr	r3, [pc, #504]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800f9dc:	4b7c      	ldr	r3, [pc, #496]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800f9e4:	4b7a      	ldr	r3, [pc, #488]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f9ec:	4b78      	ldr	r3, [pc, #480]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f9f4:	4b76      	ldr	r3, [pc, #472]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800f9fc:	4b74      	ldr	r3, [pc, #464]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fa04:	4b72      	ldr	r3, [pc, #456]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800fa0c:	4b70      	ldr	r3, [pc, #448]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800fa14:	4b6f      	ldr	r3, [pc, #444]	@ (800fbd4 <ProcessRadioRxDone+0x2a4>)
 800fa16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa18:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800fa1a:	4b6d      	ldr	r3, [pc, #436]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fa1c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d102      	bne.n	800fa2a <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800fa24:	486c      	ldr	r0, [pc, #432]	@ (800fbd8 <ProcessRadioRxDone+0x2a8>)
 800fa26:	f00d f9bf 	bl	801cda8 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fa2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fa2e:	4619      	mov	r1, r3
 800fa30:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800fa34:	f004 feba 	bl	80147ac <LoRaMacClassBRxBeacon>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00b      	beq.n	800fa56 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800fa3e:	4a64      	ldr	r2, [pc, #400]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fa40:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800fa44:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800fa48:	4a61      	ldr	r2, [pc, #388]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fa4a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800fa4e:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800fa52:	f000 bc8d 	b.w	8010370 <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fa56:	4b5c      	ldr	r3, [pc, #368]	@ (800fbc8 <ProcessRadioRxDone+0x298>)
 800fa58:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d11e      	bne.n	800fa9e <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fa60:	f004 feb7 	bl	80147d2 <LoRaMacClassBIsPingExpected>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00a      	beq.n	800fa80 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	f004 fe68 	bl	8014740 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fa70:	2000      	movs	r0, #0
 800fa72:	f004 fe89 	bl	8014788 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fa76:	4b56      	ldr	r3, [pc, #344]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fa78:	2204      	movs	r2, #4
 800fa7a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800fa7e:	e00e      	b.n	800fa9e <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fa80:	f004 feae 	bl	80147e0 <LoRaMacClassBIsMulticastExpected>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d009      	beq.n	800fa9e <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	f004 fe62 	bl	8014754 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fa90:	2000      	movs	r0, #0
 800fa92:	f004 fe82 	bl	801479a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fa96:	4b4e      	ldr	r3, [pc, #312]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fa98:	2205      	movs	r2, #5
 800fa9a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800fa9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d107      	bne.n	800fab6 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800faa6:	4b4a      	ldr	r3, [pc, #296]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800faa8:	2201      	movs	r2, #1
 800faaa:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800faae:	f7ff ff19 	bl	800f8e4 <PrepareRxDoneAbort>
        return;
 800fab2:	f000 bc5d 	b.w	8010370 <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fab6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800faba:	1c5a      	adds	r2, r3, #1
 800fabc:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800fac0:	461a      	mov	r2, r3
 800fac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fac6:	4413      	add	r3, r2
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800face:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fad2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	3b01      	subs	r3, #1
 800fada:	2b06      	cmp	r3, #6
 800fadc:	f200 8419 	bhi.w	8010312 <ProcessRadioRxDone+0x9e2>
 800fae0:	a201      	add	r2, pc, #4	@ (adr r2, 800fae8 <ProcessRadioRxDone+0x1b8>)
 800fae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae6:	bf00      	nop
 800fae8:	0800fb05 	.word	0x0800fb05
 800faec:	08010313 	.word	0x08010313
 800faf0:	0800fd23 	.word	0x0800fd23
 800faf4:	08010313 	.word	0x08010313
 800faf8:	0800fd1b 	.word	0x0800fd1b
 800fafc:	08010313 	.word	0x08010313
 800fb00:	080102b7 	.word	0x080102b7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fb04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fb08:	2b10      	cmp	r3, #16
 800fb0a:	d807      	bhi.n	800fb1c <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb0c:	4b30      	ldr	r3, [pc, #192]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fb14:	f7ff fee6 	bl	800f8e4 <PrepareRxDoneAbort>
                return;
 800fb18:	f000 bc2a 	b.w	8010370 <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 800fb1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb20:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800fb22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fb2a:	4b27      	ldr	r3, [pc, #156]	@ (800fbc8 <ProcessRadioRxDone+0x298>)
 800fb2c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d007      	beq.n	800fb44 <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb34:	4b26      	ldr	r3, [pc, #152]	@ (800fbd0 <ProcessRadioRxDone+0x2a0>)
 800fb36:	2201      	movs	r2, #1
 800fb38:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fb3c:	f7ff fed2 	bl	800f8e4 <PrepareRxDoneAbort>
                return;
 800fb40:	f000 bc16 	b.w	8010370 <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 800fb44:	1d3b      	adds	r3, r7, #4
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fd ff7e 	bl	800da48 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800fb4c:	f107 0214 	add.w	r2, r7, #20
 800fb50:	1d3b      	adds	r3, r7, #4
 800fb52:	4619      	mov	r1, r3
 800fb54:	20ff      	movs	r0, #255	@ 0xff
 800fb56:	f006 f835 	bl	8015bc4 <LoRaMacCryptoHandleJoinAccept>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800fb60:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f040 80cc 	bne.w	800fd02 <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800fb6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fb6e:	f003 030f 	and.w	r3, r3, #15
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	2b0f      	cmp	r3, #15
 800fb76:	d031      	beq.n	800fbdc <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fb7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	b25b      	sxtb	r3, r3
 800fb84:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fb86:	4b10      	ldr	r3, [pc, #64]	@ (800fbc8 <ProcessRadioRxDone+0x298>)
 800fb88:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fb8c:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 800fb8e:	4b0e      	ldr	r3, [pc, #56]	@ (800fbc8 <ProcessRadioRxDone+0x298>)
 800fb90:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fb94:	4639      	mov	r1, r7
 800fb96:	2207      	movs	r2, #7
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f006 fdc7 	bl	801672c <RegionVerify>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	f083 0301 	eor.w	r3, r3, #1
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d018      	beq.n	800fbdc <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fbaa:	2001      	movs	r0, #1
 800fbac:	f005 fb14 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f000 83b4 	beq.w	8010320 <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fbb8:	2101      	movs	r1, #1
 800fbba:	2007      	movs	r0, #7
 800fbbc:	f005 fa80 	bl	80150c0 <LoRaMacConfirmQueueSetStatus>
 800fbc0:	e3b1      	b.n	8010326 <ProcessRadioRxDone+0x9f6>
 800fbc2:	bf00      	nop
 800fbc4:	20001824 	.word	0x20001824
 800fbc8:	20000c14 	.word	0x20000c14
 800fbcc:	2000181c 	.word	0x2000181c
 800fbd0:	200006e0 	.word	0x200006e0
 800fbd4:	0801e614 	.word	0x0801e614
 800fbd8:	20000a78 	.word	0x20000a78
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fbdc:	7f7b      	ldrb	r3, [r7, #29]
 800fbde:	461a      	mov	r2, r3
 800fbe0:	4ba5      	ldr	r3, [pc, #660]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fbe2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fbe6:	4ba4      	ldr	r3, [pc, #656]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fbe8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800fbec:	7fbb      	ldrb	r3, [r7, #30]
 800fbee:	021b      	lsls	r3, r3, #8
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	4aa1      	ldr	r2, [pc, #644]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fbf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fbf8:	4b9f      	ldr	r3, [pc, #636]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fbfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800fbfe:	7ffb      	ldrb	r3, [r7, #31]
 800fc00:	041b      	lsls	r3, r3, #16
 800fc02:	4313      	orrs	r3, r2
 800fc04:	4a9c      	ldr	r2, [pc, #624]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800fc0a:	6a3b      	ldr	r3, [r7, #32]
 800fc0c:	4a9a      	ldr	r2, [pc, #616]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800fc12:	4b99      	ldr	r3, [pc, #612]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fc18:	4619      	mov	r1, r3
 800fc1a:	2002      	movs	r0, #2
 800fc1c:	f7fd ff2c 	bl	800da78 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fc20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc24:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	4b92      	ldr	r3, [pc, #584]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc2e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800fc32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc36:	f003 030f 	and.w	r3, r3, #15
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	2b0f      	cmp	r3, #15
 800fc3e:	d011      	beq.n	800fc64 <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fc40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	4b8a      	ldr	r3, [pc, #552]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc4e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fc52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc56:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	4b86      	ldr	r3, [pc, #536]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fc64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc68:	461a      	mov	r2, r3
 800fc6a:	4b83      	ldr	r3, [pc, #524]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc6c:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800fc6e:	4b82      	ldr	r3, [pc, #520]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d102      	bne.n	800fc7c <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800fc76:	4b80      	ldr	r3, [pc, #512]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc78:	2201      	movs	r2, #1
 800fc7a:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800fc7c:	4b7e      	ldr	r3, [pc, #504]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fc84:	fb02 f303 	mul.w	r3, r2, r3
 800fc88:	4a7b      	ldr	r2, [pc, #492]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc8a:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fc8c:	4b7a      	ldr	r3, [pc, #488]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc90:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fc94:	4a78      	ldr	r2, [pc, #480]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc96:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800fc98:	4b77      	ldr	r3, [pc, #476]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800fca0:	4b75      	ldr	r3, [pc, #468]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fca2:	2200      	movs	r2, #0
 800fca4:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fca8:	f107 0314 	add.w	r3, r7, #20
 800fcac:	3312      	adds	r3, #18
 800fcae:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fcb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	3b11      	subs	r3, #17
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800fcbe:	4b6f      	ldr	r3, [pc, #444]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fcc0:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800fcc4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800fcc8:	4b6b      	ldr	r3, [pc, #428]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fcca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fcce:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800fcd2:	4611      	mov	r1, r2
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f006 fd40 	bl	801675a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fcda:	4b67      	ldr	r3, [pc, #412]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fcdc:	2202      	movs	r2, #2
 800fcde:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800fce2:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fce6:	4618      	mov	r0, r3
 800fce8:	f005 fa76 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 8318 	beq.w	8010324 <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800fcf4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	2000      	movs	r0, #0
 800fcfc:	f005 f9e0 	bl	80150c0 <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 800fd00:	e310      	b.n	8010324 <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fd02:	2001      	movs	r0, #1
 800fd04:	f005 fa68 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f000 830a 	beq.w	8010324 <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fd10:	2101      	movs	r1, #1
 800fd12:	2007      	movs	r0, #7
 800fd14:	f005 f9d4 	bl	80150c0 <LoRaMacConfirmQueueSetStatus>
            break;
 800fd18:	e304      	b.n	8010324 <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fd1a:	4b58      	ldr	r3, [pc, #352]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fd22:	4b55      	ldr	r3, [pc, #340]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fd24:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fd28:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fd2c:	4b53      	ldr	r3, [pc, #332]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fd2e:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800fd32:	b25b      	sxtb	r3, r3
 800fd34:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fd38:	230d      	movs	r3, #13
 800fd3a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fd3e:	4b4e      	ldr	r3, [pc, #312]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fd40:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d002      	beq.n	800fd4e <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fd48:	230e      	movs	r3, #14
 800fd4a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd4e:	4b4a      	ldr	r3, [pc, #296]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fd50:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fd54:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800fd58:	4611      	mov	r1, r2
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f006 fcab 	bl	80166b6 <RegionGetPhyParam>
 800fd60:	4603      	mov	r3, r0
 800fd62:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800fd64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fd68:	3b0d      	subs	r3, #13
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	b21b      	sxth	r3, r3
 800fd6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fd72:	b21a      	sxth	r2, r3
 800fd74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd76:	b21b      	sxth	r3, r3
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	dc03      	bgt.n	800fd84 <ProcessRadioRxDone+0x454>
 800fd7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fd80:	2b0b      	cmp	r3, #11
 800fd82:	d806      	bhi.n	800fd92 <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd84:	4b3d      	ldr	r3, [pc, #244]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fd86:	2201      	movs	r2, #1
 800fd88:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fd8c:	f7ff fdaa 	bl	800f8e4 <PrepareRxDoneAbort>
                return;
 800fd90:	e2ee      	b.n	8010370 <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 800fd92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800fd98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fda2:	4b37      	ldr	r3, [pc, #220]	@ (800fe80 <ProcessRadioRxDone+0x550>)
 800fda4:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fda6:	23ff      	movs	r3, #255	@ 0xff
 800fda8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fdac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f006 fa07 	bl	80161c4 <LoRaMacParserData>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d006      	beq.n	800fdca <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fdbc:	4b2f      	ldr	r3, [pc, #188]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fdc4:	f7ff fd8e 	bl	800f8e4 <PrepareRxDoneAbort>
                return;
 800fdc8:	e2d2      	b.n	8010370 <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fdca:	4b2b      	ldr	r3, [pc, #172]	@ (800fe78 <ProcessRadioRxDone+0x548>)
 800fdcc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d132      	bne.n	800fe3a <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800fdd4:	f004 fcfd 	bl	80147d2 <LoRaMacClassBIsPingExpected>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d014      	beq.n	800fe08 <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fdde:	2000      	movs	r0, #0
 800fde0:	f004 fcae 	bl	8014740 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800fde4:	2000      	movs	r0, #0
 800fde6:	f004 fccf 	bl	8014788 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fdea:	4b24      	ldr	r3, [pc, #144]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fdec:	2204      	movs	r2, #4
 800fdee:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fdf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fdf4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fdf8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	4619      	mov	r1, r3
 800fe00:	4610      	mov	r0, r2
 800fe02:	f004 fd6f 	bl	80148e4 <LoRaMacClassBSetFPendingBit>
 800fe06:	e018      	b.n	800fe3a <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe08:	f004 fcea 	bl	80147e0 <LoRaMacClassBIsMulticastExpected>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d013      	beq.n	800fe3a <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fe12:	2000      	movs	r0, #0
 800fe14:	f004 fc9e 	bl	8014754 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fe18:	2000      	movs	r0, #0
 800fe1a:	f004 fcbe 	bl	801479a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fe1e:	4b17      	ldr	r3, [pc, #92]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fe20:	2205      	movs	r2, #5
 800fe22:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fe26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe28:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fe2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	4619      	mov	r1, r3
 800fe34:	4610      	mov	r0, r2
 800fe36:	f004 fd55 	bl	80148e4 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fe3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe3c:	4a0f      	ldr	r2, [pc, #60]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fe3e:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fe42:	f107 020e 	add.w	r2, r7, #14
 800fe46:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f002 fd9f 	bl	8012990 <DetermineFrameType>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d006      	beq.n	800fe66 <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe58:	4b08      	ldr	r3, [pc, #32]	@ (800fe7c <ProcessRadioRxDone+0x54c>)
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fe60:	f7ff fd40 	bl	800f8e4 <PrepareRxDoneAbort>
                return;
 800fe64:	e284      	b.n	8010370 <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fe66:	2300      	movs	r3, #0
 800fe68:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fe70:	2300      	movs	r3, #0
 800fe72:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800fe76:	e055      	b.n	800ff24 <ProcessRadioRxDone+0x5f4>
 800fe78:	20000c14 	.word	0x20000c14
 800fe7c:	200006e0 	.word	0x200006e0
 800fe80:	20000918 	.word	0x20000918
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fe84:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800fe88:	499f      	ldr	r1, [pc, #636]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	005b      	lsls	r3, r3, #1
 800fe8e:	4413      	add	r3, r2
 800fe90:	011b      	lsls	r3, r3, #4
 800fe92:	440b      	add	r3, r1
 800fe94:	33ec      	adds	r3, #236	@ 0xec
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d13d      	bne.n	800ff1a <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fe9e:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800fea2:	4999      	ldr	r1, [pc, #612]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 800fea4:	4613      	mov	r3, r2
 800fea6:	005b      	lsls	r3, r3, #1
 800fea8:	4413      	add	r3, r2
 800feaa:	011b      	lsls	r3, r3, #4
 800feac:	440b      	add	r3, r1
 800feae:	33e9      	adds	r3, #233	@ 0xe9
 800feb0:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d031      	beq.n	800ff1a <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 800feb6:	2301      	movs	r3, #1
 800feb8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800febc:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800fec0:	4991      	ldr	r1, [pc, #580]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 800fec2:	4613      	mov	r3, r2
 800fec4:	005b      	lsls	r3, r3, #1
 800fec6:	4413      	add	r3, r2
 800fec8:	011b      	lsls	r3, r3, #4
 800feca:	440b      	add	r3, r1
 800fecc:	33ea      	adds	r3, #234	@ 0xea
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800fed4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800fed8:	498b      	ldr	r1, [pc, #556]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 800feda:	4613      	mov	r3, r2
 800fedc:	005b      	lsls	r3, r3, #1
 800fede:	4413      	add	r3, r2
 800fee0:	011b      	lsls	r3, r3, #4
 800fee2:	440b      	add	r3, r1
 800fee4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800feee:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800fef2:	4985      	ldr	r1, [pc, #532]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 800fef4:	4613      	mov	r3, r2
 800fef6:	005b      	lsls	r3, r3, #1
 800fef8:	4413      	add	r3, r2
 800fefa:	011b      	lsls	r3, r3, #4
 800fefc:	440b      	add	r3, r1
 800fefe:	33ec      	adds	r3, #236	@ 0xec
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ff06:	4b80      	ldr	r3, [pc, #512]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 800ff08:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ff0c:	2b02      	cmp	r3, #2
 800ff0e:	d10e      	bne.n	800ff2e <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ff10:	4b7e      	ldr	r3, [pc, #504]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 800ff12:	2203      	movs	r2, #3
 800ff14:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800ff18:	e009      	b.n	800ff2e <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff1a:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800ff1e:	3301      	adds	r3, #1
 800ff20:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800ff24:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d0ab      	beq.n	800fe84 <ProcessRadioRxDone+0x554>
 800ff2c:	e000      	b.n	800ff30 <ProcessRadioRxDone+0x600>
                    break;
 800ff2e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ff30:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d117      	bne.n	800ff68 <ProcessRadioRxDone+0x638>
 800ff38:	7bbb      	ldrb	r3, [r7, #14]
 800ff3a:	2b03      	cmp	r3, #3
 800ff3c:	d10d      	bne.n	800ff5a <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ff3e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ff42:	f003 0320 	and.w	r3, r3, #32
 800ff46:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d106      	bne.n	800ff5a <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ff4c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ff50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff54:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d006      	beq.n	800ff68 <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff5a:	4b6c      	ldr	r3, [pc, #432]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ff62:	f7ff fcbf 	bl	800f8e4 <PrepareRxDoneAbort>
                return;
 800ff66:	e203      	b.n	8010370 <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ff68:	7bb9      	ldrb	r1, [r7, #14]
 800ff6a:	4c67      	ldr	r4, [pc, #412]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 800ff6c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800ff70:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800ff74:	f107 0310 	add.w	r3, r7, #16
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	f107 030f 	add.w	r3, r7, #15
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800ff84:	f000 feec 	bl	8010d60 <GetFCntDown>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ff8e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d017      	beq.n	800ffc6 <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ff96:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ff9a:	2b07      	cmp	r3, #7
 800ff9c:	d104      	bne.n	800ffa8 <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ff9e:	4b5b      	ldr	r3, [pc, #364]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 800ffa0:	2208      	movs	r2, #8
 800ffa2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800ffa6:	e003      	b.n	800ffb0 <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ffa8:	4b58      	ldr	r3, [pc, #352]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	4a56      	ldr	r2, [pc, #344]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 800ffb4:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	4a54      	ldr	r2, [pc, #336]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 800ffbc:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800ffc0:	f7ff fc90 	bl	800f8e4 <PrepareRxDoneAbort>
                return;
 800ffc4:	e1d4      	b.n	8010370 <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ffc6:	7bfa      	ldrb	r2, [r7, #15]
 800ffc8:	6939      	ldr	r1, [r7, #16]
 800ffca:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800ffce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	460b      	mov	r3, r1
 800ffd6:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800ffda:	f005 ff55 	bl	8015e88 <LoRaMacCryptoUnsecureMessage>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ffe4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00f      	beq.n	801000c <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ffec:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800fff0:	2b02      	cmp	r3, #2
 800fff2:	d104      	bne.n	800fffe <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fff4:	4b45      	ldr	r3, [pc, #276]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 800fff6:	220a      	movs	r2, #10
 800fff8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800fffc:	e003      	b.n	8010006 <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fffe:	4b43      	ldr	r3, [pc, #268]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010000:	220b      	movs	r2, #11
 8010002:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 8010006:	f7ff fc6d 	bl	800f8e4 <PrepareRxDoneAbort>
                return;
 801000a:	e1b1      	b.n	8010370 <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801000c:	4b3f      	ldr	r3, [pc, #252]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 801000e:	2200      	movs	r2, #0
 8010010:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8010014:	4a3d      	ldr	r2, [pc, #244]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010016:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 801001a:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 801001e:	4b3b      	ldr	r3, [pc, #236]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010020:	2200      	movs	r2, #0
 8010022:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8010026:	4b39      	ldr	r3, [pc, #228]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010028:	2200      	movs	r2, #0
 801002a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	4a36      	ldr	r2, [pc, #216]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010032:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	4a34      	ldr	r2, [pc, #208]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 801003a:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801003e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010042:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010046:	b2db      	uxtb	r3, r3
 8010048:	2b00      	cmp	r3, #0
 801004a:	bf14      	ite	ne
 801004c:	2301      	movne	r3, #1
 801004e:	2300      	moveq	r3, #0
 8010050:	b2da      	uxtb	r2, r3
 8010052:	4b2e      	ldr	r3, [pc, #184]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010054:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010058:	4b2c      	ldr	r3, [pc, #176]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 801005a:	2200      	movs	r2, #0
 801005c:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010060:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010064:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010068:	b2db      	uxtb	r3, r3
 801006a:	2b00      	cmp	r3, #0
 801006c:	bf14      	ite	ne
 801006e:	2301      	movne	r3, #1
 8010070:	2300      	moveq	r3, #0
 8010072:	b2da      	uxtb	r2, r3
 8010074:	4b25      	ldr	r3, [pc, #148]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010076:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801007a:	4b24      	ldr	r3, [pc, #144]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 801007c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010080:	2b00      	cmp	r3, #0
 8010082:	d004      	beq.n	801008e <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010084:	4b21      	ldr	r3, [pc, #132]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010086:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801008a:	2b01      	cmp	r3, #1
 801008c:	d106      	bne.n	801009c <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801008e:	4b1e      	ldr	r3, [pc, #120]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 8010090:	2200      	movs	r2, #0
 8010092:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8010094:	4b1c      	ldr	r3, [pc, #112]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 8010096:	2201      	movs	r2, #1
 8010098:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 801009c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d104      	bne.n	80100ae <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80100a4:	4b19      	ldr	r3, [pc, #100]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 80100a6:	2202      	movs	r2, #2
 80100a8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 80100ac:	e03a      	b.n	8010124 <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80100ae:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80100b2:	f023 031f 	bic.w	r3, r3, #31
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80100ba:	d12b      	bne.n	8010114 <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 80100bc:	4b12      	ldr	r3, [pc, #72]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 80100be:	2201      	movs	r2, #1
 80100c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80100c4:	4b10      	ldr	r3, [pc, #64]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 80100c6:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d102      	bne.n	80100d4 <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80100ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80100d0:	4a0d      	ldr	r2, [pc, #52]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 80100d2:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80100d4:	4b0d      	ldr	r3, [pc, #52]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 80100d6:	2201      	movs	r2, #1
 80100d8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80100dc:	4b0b      	ldr	r3, [pc, #44]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 80100de:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d01e      	beq.n	8010124 <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 80100e6:	4b09      	ldr	r3, [pc, #36]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 80100e8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d019      	beq.n	8010124 <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80100f0:	4b05      	ldr	r3, [pc, #20]	@ (8010108 <ProcessRadioRxDone+0x7d8>)
 80100f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100f6:	4a05      	ldr	r2, [pc, #20]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 80100f8:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80100fc:	4b04      	ldr	r3, [pc, #16]	@ (8010110 <ProcessRadioRxDone+0x7e0>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4a02      	ldr	r2, [pc, #8]	@ (801010c <ProcessRadioRxDone+0x7dc>)
 8010102:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 8010106:	e00d      	b.n	8010124 <ProcessRadioRxDone+0x7f4>
 8010108:	20000c14 	.word	0x20000c14
 801010c:	200006e0 	.word	0x200006e0
 8010110:	20001824 	.word	0x20001824
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8010114:	4b98      	ldr	r3, [pc, #608]	@ (8010378 <ProcessRadioRxDone+0xa48>)
 8010116:	2200      	movs	r2, #0
 8010118:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801011c:	4b97      	ldr	r3, [pc, #604]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 801011e:	2200      	movs	r2, #0
 8010120:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 8010124:	4b94      	ldr	r3, [pc, #592]	@ (8010378 <ProcessRadioRxDone+0xa48>)
 8010126:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801012a:	2b00      	cmp	r3, #0
 801012c:	d106      	bne.n	801013c <ProcessRadioRxDone+0x80c>
 801012e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010132:	f003 0310 	and.w	r3, r3, #16
 8010136:	b2db      	uxtb	r3, r3
 8010138:	2b00      	cmp	r3, #0
 801013a:	d004      	beq.n	8010146 <ProcessRadioRxDone+0x816>
 801013c:	4b8e      	ldr	r3, [pc, #568]	@ (8010378 <ProcessRadioRxDone+0xa48>)
 801013e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010142:	2b00      	cmp	r3, #0
 8010144:	d004      	beq.n	8010150 <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 8010146:	4b8d      	ldr	r3, [pc, #564]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010148:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 801014c:	2b00      	cmp	r3, #0
 801014e:	d003      	beq.n	8010158 <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8010150:	4b8a      	ldr	r3, [pc, #552]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010152:	2201      	movs	r2, #1
 8010154:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8010158:	4b88      	ldr	r3, [pc, #544]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 801015a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801015e:	4a87      	ldr	r2, [pc, #540]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010160:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 8010164:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8010168:	4618      	mov	r0, r3
 801016a:	f001 ffa5 	bl	80120b8 <RemoveMacCommands>

            switch( fType )
 801016e:	7bbb      	ldrb	r3, [r7, #14]
 8010170:	2b03      	cmp	r3, #3
 8010172:	d874      	bhi.n	801025e <ProcessRadioRxDone+0x92e>
 8010174:	a201      	add	r2, pc, #4	@ (adr r2, 801017c <ProcessRadioRxDone+0x84c>)
 8010176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801017a:	bf00      	nop
 801017c:	0801018d 	.word	0x0801018d
 8010180:	080101dd 	.word	0x080101dd
 8010184:	08010213 	.word	0x08010213
 8010188:	08010239 	.word	0x08010239
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801018c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010190:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010194:	b2db      	uxtb	r3, r3
 8010196:	461c      	mov	r4, r3
 8010198:	4b78      	ldr	r3, [pc, #480]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 801019a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801019e:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 80101a2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80101a6:	f102 0010 	add.w	r0, r2, #16
 80101aa:	9300      	str	r3, [sp, #0]
 80101ac:	460b      	mov	r3, r1
 80101ae:	4622      	mov	r2, r4
 80101b0:	2100      	movs	r1, #0
 80101b2:	f000 ff51 	bl	8011058 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80101b6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80101ba:	4b70      	ldr	r3, [pc, #448]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80101bc:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80101c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101c2:	4a6e      	ldr	r2, [pc, #440]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80101c4:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80101c8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80101cc:	4b6b      	ldr	r3, [pc, #428]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80101ce:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80101d2:	4b6a      	ldr	r3, [pc, #424]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80101d4:	2201      	movs	r2, #1
 80101d6:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 80101da:	e047      	b.n	801026c <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80101dc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80101e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	461c      	mov	r4, r3
 80101e8:	4b64      	ldr	r3, [pc, #400]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80101ea:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80101ee:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 80101f2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80101f6:	f102 0010 	add.w	r0, r2, #16
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	460b      	mov	r3, r1
 80101fe:	4622      	mov	r2, r4
 8010200:	2100      	movs	r1, #0
 8010202:	f000 ff29 	bl	8011058 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010206:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 801020a:	4b5c      	ldr	r3, [pc, #368]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 801020c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 8010210:	e02c      	b.n	801026c <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8010212:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8010214:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8010218:	4b58      	ldr	r3, [pc, #352]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 801021a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801021e:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 8010222:	9300      	str	r3, [sp, #0]
 8010224:	460b      	mov	r3, r1
 8010226:	2100      	movs	r1, #0
 8010228:	f000 ff16 	bl	8011058 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801022c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010230:	4b52      	ldr	r3, [pc, #328]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010232:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 8010236:	e019      	b.n	801026c <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010238:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 801023c:	4b4f      	ldr	r3, [pc, #316]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 801023e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010244:	4a4d      	ldr	r2, [pc, #308]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010246:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801024a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 801024e:	4b4b      	ldr	r3, [pc, #300]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010250:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8010254:	4b49      	ldr	r3, [pc, #292]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010256:	2201      	movs	r2, #1
 8010258:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 801025c:	e006      	b.n	801026c <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801025e:	4b47      	ldr	r3, [pc, #284]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010260:	2201      	movs	r2, #1
 8010262:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 8010266:	f7ff fb3d 	bl	800f8e4 <PrepareRxDoneAbort>
                    break;
 801026a:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 801026c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8010270:	2be0      	cmp	r3, #224	@ 0xe0
 8010272:	d118      	bne.n	80102a6 <ProcessRadioRxDone+0x976>
 8010274:	4b40      	ldr	r3, [pc, #256]	@ (8010378 <ProcessRadioRxDone+0xa48>)
 8010276:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 801027a:	f083 0301 	eor.w	r3, r3, #1
 801027e:	b2db      	uxtb	r3, r3
 8010280:	2b00      	cmp	r3, #0
 8010282:	d010      	beq.n	80102a6 <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010284:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010288:	4b3c      	ldr	r3, [pc, #240]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 801028a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 801028e:	4b3b      	ldr	r3, [pc, #236]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010290:	2200      	movs	r2, #0
 8010292:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8010296:	4b39      	ldr	r3, [pc, #228]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010298:	2200      	movs	r2, #0
 801029a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 801029e:	4b37      	ldr	r3, [pc, #220]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80102a6:	4a35      	ldr	r2, [pc, #212]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80102a8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80102ac:	f043 0302 	orr.w	r3, r3, #2
 80102b0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 80102b4:	e037      	b.n	8010326 <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80102b6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80102ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80102be:	18d1      	adds	r1, r2, r3
 80102c0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	461a      	mov	r2, r3
 80102d0:	482b      	ldr	r0, [pc, #172]	@ (8010380 <ProcessRadioRxDone+0xa50>)
 80102d2:	f008 fc1c 	bl	8018b0e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80102d6:	4b29      	ldr	r3, [pc, #164]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80102d8:	2203      	movs	r2, #3
 80102da:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80102de:	4b27      	ldr	r3, [pc, #156]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80102e0:	2200      	movs	r2, #0
 80102e2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80102e6:	4b25      	ldr	r3, [pc, #148]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80102e8:	4a25      	ldr	r2, [pc, #148]	@ (8010380 <ProcessRadioRxDone+0xa50>)
 80102ea:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80102ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80102f2:	b2da      	uxtb	r2, r3
 80102f4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	b2da      	uxtb	r2, r3
 80102fc:	4b1f      	ldr	r3, [pc, #124]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 80102fe:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010302:	4a1e      	ldr	r2, [pc, #120]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010304:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010308:	f043 0302 	orr.w	r3, r3, #2
 801030c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 8010310:	e009      	b.n	8010326 <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010312:	4b1a      	ldr	r3, [pc, #104]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010314:	2201      	movs	r2, #1
 8010316:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 801031a:	f7ff fae3 	bl	800f8e4 <PrepareRxDoneAbort>
            break;
 801031e:	e002      	b.n	8010326 <ProcessRadioRxDone+0x9f6>
                        break;
 8010320:	bf00      	nop
 8010322:	e000      	b.n	8010326 <ProcessRadioRxDone+0x9f6>
            break;
 8010324:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010326:	4b15      	ldr	r3, [pc, #84]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010328:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801032c:	2b00      	cmp	r3, #0
 801032e:	d004      	beq.n	801033a <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010330:	4b12      	ldr	r3, [pc, #72]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010332:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010336:	2b01      	cmp	r3, #1
 8010338:	d10c      	bne.n	8010354 <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 801033a:	4b10      	ldr	r3, [pc, #64]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 801033c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010340:	2b00      	cmp	r3, #0
 8010342:	d007      	beq.n	8010354 <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8010344:	4b0d      	ldr	r3, [pc, #52]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010346:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 801034a:	2b00      	cmp	r3, #0
 801034c:	d002      	beq.n	8010354 <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 801034e:	2000      	movs	r0, #0
 8010350:	f000 fcec 	bl	8010d2c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8010354:	4b09      	ldr	r3, [pc, #36]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010356:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801035a:	2b02      	cmp	r3, #2
 801035c:	d006      	beq.n	801036c <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 801035e:	4a07      	ldr	r2, [pc, #28]	@ (801037c <ProcessRadioRxDone+0xa4c>)
 8010360:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010364:	f043 0310 	orr.w	r3, r3, #16
 8010368:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 801036c:	f7ff f9fc 	bl	800f768 <UpdateRxSlotIdleState>
}
 8010370:	379c      	adds	r7, #156	@ 0x9c
 8010372:	46bd      	mov	sp, r7
 8010374:	bd90      	pop	{r4, r7, pc}
 8010376:	bf00      	nop
 8010378:	20000c14 	.word	0x20000c14
 801037c:	200006e0 	.word	0x200006e0
 8010380:	20000918 	.word	0x20000918

08010384 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010384:	b580      	push	{r7, lr}
 8010386:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010388:	4b11      	ldr	r3, [pc, #68]	@ (80103d0 <ProcessRadioTxTimeout+0x4c>)
 801038a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801038e:	2b02      	cmp	r3, #2
 8010390:	d002      	beq.n	8010398 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8010392:	4b10      	ldr	r3, [pc, #64]	@ (80103d4 <ProcessRadioTxTimeout+0x50>)
 8010394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010396:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010398:	f7ff f9e6 	bl	800f768 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 801039c:	4b0e      	ldr	r3, [pc, #56]	@ (80103d8 <ProcessRadioTxTimeout+0x54>)
 801039e:	2202      	movs	r2, #2
 80103a0:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80103a4:	2002      	movs	r0, #2
 80103a6:	f004 fee3 	bl	8015170 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80103aa:	4b0b      	ldr	r3, [pc, #44]	@ (80103d8 <ProcessRadioTxTimeout+0x54>)
 80103ac:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d003      	beq.n	80103bc <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 80103b4:	4b08      	ldr	r3, [pc, #32]	@ (80103d8 <ProcessRadioTxTimeout+0x54>)
 80103b6:	2201      	movs	r2, #1
 80103b8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80103bc:	4a06      	ldr	r2, [pc, #24]	@ (80103d8 <ProcessRadioTxTimeout+0x54>)
 80103be:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80103c2:	f043 0310 	orr.w	r3, r3, #16
 80103c6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 80103ca:	bf00      	nop
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	20000c14 	.word	0x20000c14
 80103d4:	0801e614 	.word	0x0801e614
 80103d8:	200006e0 	.word	0x200006e0

080103dc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	460a      	mov	r2, r1
 80103e6:	71fb      	strb	r3, [r7, #7]
 80103e8:	4613      	mov	r3, r2
 80103ea:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80103ec:	2300      	movs	r3, #0
 80103ee:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80103f0:	4b3d      	ldr	r3, [pc, #244]	@ (80104e8 <HandleRadioRxErrorTimeout+0x10c>)
 80103f2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80103f6:	2b02      	cmp	r3, #2
 80103f8:	d002      	beq.n	8010400 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80103fa:	4b3c      	ldr	r3, [pc, #240]	@ (80104ec <HandleRadioRxErrorTimeout+0x110>)
 80103fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103fe:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010400:	f004 f9e0 	bl	80147c4 <LoRaMacClassBIsBeaconExpected>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d007      	beq.n	801041a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801040a:	2002      	movs	r0, #2
 801040c:	f004 f98e 	bl	801472c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8010410:	2000      	movs	r0, #0
 8010412:	f004 f9b0 	bl	8014776 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8010416:	2301      	movs	r3, #1
 8010418:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801041a:	4b33      	ldr	r3, [pc, #204]	@ (80104e8 <HandleRadioRxErrorTimeout+0x10c>)
 801041c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010420:	2b01      	cmp	r3, #1
 8010422:	d119      	bne.n	8010458 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010424:	f004 f9d5 	bl	80147d2 <LoRaMacClassBIsPingExpected>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	d007      	beq.n	801043e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801042e:	2000      	movs	r0, #0
 8010430:	f004 f986 	bl	8014740 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010434:	2000      	movs	r0, #0
 8010436:	f004 f9a7 	bl	8014788 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801043a:	2301      	movs	r3, #1
 801043c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801043e:	f004 f9cf 	bl	80147e0 <LoRaMacClassBIsMulticastExpected>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d007      	beq.n	8010458 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010448:	2000      	movs	r0, #0
 801044a:	f004 f983 	bl	8014754 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801044e:	2000      	movs	r0, #0
 8010450:	f004 f9a3 	bl	801479a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010454:	2301      	movs	r3, #1
 8010456:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010458:	7bfb      	ldrb	r3, [r7, #15]
 801045a:	f083 0301 	eor.w	r3, r3, #1
 801045e:	b2db      	uxtb	r3, r3
 8010460:	2b00      	cmp	r3, #0
 8010462:	d03b      	beq.n	80104dc <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010464:	4b22      	ldr	r3, [pc, #136]	@ (80104f0 <HandleRadioRxErrorTimeout+0x114>)
 8010466:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 801046a:	2b00      	cmp	r3, #0
 801046c:	d122      	bne.n	80104b4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 801046e:	4b20      	ldr	r3, [pc, #128]	@ (80104f0 <HandleRadioRxErrorTimeout+0x114>)
 8010470:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010474:	2b00      	cmp	r3, #0
 8010476:	d003      	beq.n	8010480 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010478:	4a1d      	ldr	r2, [pc, #116]	@ (80104f0 <HandleRadioRxErrorTimeout+0x114>)
 801047a:	79fb      	ldrb	r3, [r7, #7]
 801047c:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010480:	79fb      	ldrb	r3, [r7, #7]
 8010482:	4618      	mov	r0, r3
 8010484:	f004 fe74 	bl	8015170 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010488:	4b17      	ldr	r3, [pc, #92]	@ (80104e8 <HandleRadioRxErrorTimeout+0x10c>)
 801048a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801048c:	4618      	mov	r0, r3
 801048e:	f00c fdb7 	bl	801d000 <UTIL_TIMER_GetElapsedTime>
 8010492:	4602      	mov	r2, r0
 8010494:	4b16      	ldr	r3, [pc, #88]	@ (80104f0 <HandleRadioRxErrorTimeout+0x114>)
 8010496:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 801049a:	429a      	cmp	r2, r3
 801049c:	d31e      	bcc.n	80104dc <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801049e:	4815      	ldr	r0, [pc, #84]	@ (80104f4 <HandleRadioRxErrorTimeout+0x118>)
 80104a0:	f00c fc82 	bl	801cda8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80104a4:	4a12      	ldr	r2, [pc, #72]	@ (80104f0 <HandleRadioRxErrorTimeout+0x114>)
 80104a6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80104aa:	f043 0310 	orr.w	r3, r3, #16
 80104ae:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80104b2:	e013      	b.n	80104dc <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80104b4:	4b0e      	ldr	r3, [pc, #56]	@ (80104f0 <HandleRadioRxErrorTimeout+0x114>)
 80104b6:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d003      	beq.n	80104c6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80104be:	4a0c      	ldr	r2, [pc, #48]	@ (80104f0 <HandleRadioRxErrorTimeout+0x114>)
 80104c0:	79bb      	ldrb	r3, [r7, #6]
 80104c2:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80104c6:	79bb      	ldrb	r3, [r7, #6]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f004 fe51 	bl	8015170 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 80104ce:	4a08      	ldr	r2, [pc, #32]	@ (80104f0 <HandleRadioRxErrorTimeout+0x114>)
 80104d0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80104d4:	f043 0310 	orr.w	r3, r3, #16
 80104d8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80104dc:	f7ff f944 	bl	800f768 <UpdateRxSlotIdleState>
}
 80104e0:	bf00      	nop
 80104e2:	3710      	adds	r7, #16
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	20000c14 	.word	0x20000c14
 80104ec:	0801e614 	.word	0x0801e614
 80104f0:	200006e0 	.word	0x200006e0
 80104f4:	20000a78 	.word	0x20000a78

080104f8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80104fc:	2106      	movs	r1, #6
 80104fe:	2005      	movs	r0, #5
 8010500:	f7ff ff6c 	bl	80103dc <HandleRadioRxErrorTimeout>
}
 8010504:	bf00      	nop
 8010506:	bd80      	pop	{r7, pc}

08010508 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 801050c:	2104      	movs	r1, #4
 801050e:	2003      	movs	r0, #3
 8010510:	f7ff ff64 	bl	80103dc <HandleRadioRxErrorTimeout>
}
 8010514:	bf00      	nop
 8010516:	bd80      	pop	{r7, pc}

08010518 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801051e:	f3ef 8310 	mrs	r3, PRIMASK
 8010522:	607b      	str	r3, [r7, #4]
  return(result);
 8010524:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010526:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010528:	b672      	cpsid	i
}
 801052a:	bf00      	nop
    events = LoRaMacRadioEvents;
 801052c:	4b1d      	ldr	r3, [pc, #116]	@ (80105a4 <LoRaMacHandleIrqEvents+0x8c>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010532:	4b1c      	ldr	r3, [pc, #112]	@ (80105a4 <LoRaMacHandleIrqEvents+0x8c>)
 8010534:	2200      	movs	r2, #0
 8010536:	601a      	str	r2, [r3, #0]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	f383 8810 	msr	PRIMASK, r3
}
 8010542:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d027      	beq.n	801059a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 801054a:	783b      	ldrb	r3, [r7, #0]
 801054c:	f003 0320 	and.w	r3, r3, #32
 8010550:	b2db      	uxtb	r3, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	d001      	beq.n	801055a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8010556:	f7ff f91f 	bl	800f798 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 801055a:	783b      	ldrb	r3, [r7, #0]
 801055c:	f003 0310 	and.w	r3, r3, #16
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b00      	cmp	r3, #0
 8010564:	d001      	beq.n	801056a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8010566:	f7ff f9e3 	bl	800f930 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801056a:	783b      	ldrb	r3, [r7, #0]
 801056c:	f003 0308 	and.w	r3, r3, #8
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8010576:	f7ff ff05 	bl	8010384 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801057a:	783b      	ldrb	r3, [r7, #0]
 801057c:	f003 0304 	and.w	r3, r3, #4
 8010580:	b2db      	uxtb	r3, r3
 8010582:	2b00      	cmp	r3, #0
 8010584:	d001      	beq.n	801058a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8010586:	f7ff ffb7 	bl	80104f8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 801058a:	783b      	ldrb	r3, [r7, #0]
 801058c:	f003 0302 	and.w	r3, r3, #2
 8010590:	b2db      	uxtb	r3, r3
 8010592:	2b00      	cmp	r3, #0
 8010594:	d001      	beq.n	801059a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8010596:	f7ff ffb7 	bl	8010508 <ProcessRadioRxTimeout>
        }
    }
}
 801059a:	bf00      	nop
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	2000181c 	.word	0x2000181c

080105a8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 80105a8:	b480      	push	{r7}
 80105aa:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80105ac:	4b10      	ldr	r3, [pc, #64]	@ (80105f0 <LoRaMacIsBusy+0x48>)
 80105ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d101      	bne.n	80105ba <LoRaMacIsBusy+0x12>
    {
        return false;
 80105b6:	2300      	movs	r3, #0
 80105b8:	e015      	b.n	80105e6 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 80105ba:	4b0e      	ldr	r3, [pc, #56]	@ (80105f4 <LoRaMacIsBusy+0x4c>)
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	f003 0301 	and.w	r3, r3, #1
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d001      	beq.n	80105cc <LoRaMacIsBusy+0x24>
    {
        return true;
 80105c8:	2301      	movs	r3, #1
 80105ca:	e00c      	b.n	80105e6 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80105cc:	4b08      	ldr	r3, [pc, #32]	@ (80105f0 <LoRaMacIsBusy+0x48>)
 80105ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d106      	bne.n	80105e4 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80105d6:	4b06      	ldr	r3, [pc, #24]	@ (80105f0 <LoRaMacIsBusy+0x48>)
 80105d8:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d101      	bne.n	80105e4 <LoRaMacIsBusy+0x3c>
    {
        return false;
 80105e0:	2300      	movs	r3, #0
 80105e2:	e000      	b.n	80105e6 <LoRaMacIsBusy+0x3e>
    }
    return true;
 80105e4:	2301      	movs	r3, #1
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bc80      	pop	{r7}
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	200006e0 	.word	0x200006e0
 80105f4:	2000181c 	.word	0x2000181c

080105f8 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80105f8:	b480      	push	{r7}
 80105fa:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80105fc:	4b05      	ldr	r3, [pc, #20]	@ (8010614 <LoRaMacIsStopped+0x1c>)
 80105fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010602:	2b01      	cmp	r3, #1
 8010604:	d101      	bne.n	801060a <LoRaMacIsStopped+0x12>
    {
        return true;
 8010606:	2301      	movs	r3, #1
 8010608:	e000      	b.n	801060c <LoRaMacIsStopped+0x14>
    }
    return false;
 801060a:	2300      	movs	r3, #0
}
 801060c:	4618      	mov	r0, r3
 801060e:	46bd      	mov	sp, r7
 8010610:	bc80      	pop	{r7}
 8010612:	4770      	bx	lr
 8010614:	200006e0 	.word	0x200006e0

08010618 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	4603      	mov	r3, r0
 8010620:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8010622:	4a04      	ldr	r2, [pc, #16]	@ (8010634 <LoRaMacEnableRequests+0x1c>)
 8010624:	79fb      	ldrb	r3, [r7, #7]
 8010626:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 801062a:	bf00      	nop
 801062c:	370c      	adds	r7, #12
 801062e:	46bd      	mov	sp, r7
 8010630:	bc80      	pop	{r7}
 8010632:	4770      	bx	lr
 8010634:	200006e0 	.word	0x200006e0

08010638 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801063e:	4b2c      	ldr	r3, [pc, #176]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 8010640:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010644:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010646:	4b2a      	ldr	r3, [pc, #168]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 8010648:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801064c:	2b00      	cmp	r3, #0
 801064e:	d14a      	bne.n	80106e6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010650:	4b27      	ldr	r3, [pc, #156]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 8010652:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010656:	f003 0301 	and.w	r3, r3, #1
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b00      	cmp	r3, #0
 801065e:	d006      	beq.n	801066e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010660:	4a23      	ldr	r2, [pc, #140]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 8010662:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010666:	f36f 0300 	bfc	r3, #0, #1
 801066a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801066e:	4b20      	ldr	r3, [pc, #128]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 8010670:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010674:	f003 0304 	and.w	r3, r3, #4
 8010678:	b2db      	uxtb	r3, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	d006      	beq.n	801068c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801067e:	4a1c      	ldr	r2, [pc, #112]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 8010680:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010684:	f36f 0382 	bfc	r3, #2, #1
 8010688:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801068c:	2001      	movs	r0, #1
 801068e:	f7ff ffc3 	bl	8010618 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010692:	793b      	ldrb	r3, [r7, #4]
 8010694:	f003 0301 	and.w	r3, r3, #1
 8010698:	b2db      	uxtb	r3, r3
 801069a:	2b00      	cmp	r3, #0
 801069c:	d005      	beq.n	80106aa <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801069e:	4b14      	ldr	r3, [pc, #80]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 80106a0:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4813      	ldr	r0, [pc, #76]	@ (80106f4 <LoRaMacHandleRequestEvents+0xbc>)
 80106a8:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80106aa:	793b      	ldrb	r3, [r7, #4]
 80106ac:	f003 0304 	and.w	r3, r3, #4
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00e      	beq.n	80106d4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80106b6:	4810      	ldr	r0, [pc, #64]	@ (80106f8 <LoRaMacHandleRequestEvents+0xc0>)
 80106b8:	f004 fda8 	bl	801520c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80106bc:	f004 fdf8 	bl	80152b0 <LoRaMacConfirmQueueGetCnt>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d006      	beq.n	80106d4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80106c6:	4a0a      	ldr	r2, [pc, #40]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 80106c8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80106cc:	f043 0304 	orr.w	r3, r3, #4
 80106d0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80106d4:	f004 f8a2 	bl	801481c <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80106d8:	4a05      	ldr	r2, [pc, #20]	@ (80106f0 <LoRaMacHandleRequestEvents+0xb8>)
 80106da:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80106de:	f36f 1304 	bfc	r3, #4, #1
 80106e2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 80106e6:	bf00      	nop
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	200006e0 	.word	0x200006e0
 80106f4:	20000b20 	.word	0x20000b20
 80106f8:	20000b34 	.word	0x20000b34

080106fc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010700:	4b16      	ldr	r3, [pc, #88]	@ (801075c <LoRaMacHandleIndicationEvents+0x60>)
 8010702:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010706:	f003 0308 	and.w	r3, r3, #8
 801070a:	b2db      	uxtb	r3, r3
 801070c:	2b00      	cmp	r3, #0
 801070e:	d00d      	beq.n	801072c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010710:	4a12      	ldr	r2, [pc, #72]	@ (801075c <LoRaMacHandleIndicationEvents+0x60>)
 8010712:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010716:	f36f 03c3 	bfc	r3, #3, #1
 801071a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801071e:	4b0f      	ldr	r3, [pc, #60]	@ (801075c <LoRaMacHandleIndicationEvents+0x60>)
 8010720:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	490e      	ldr	r1, [pc, #56]	@ (8010760 <LoRaMacHandleIndicationEvents+0x64>)
 8010728:	480e      	ldr	r0, [pc, #56]	@ (8010764 <LoRaMacHandleIndicationEvents+0x68>)
 801072a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801072c:	4b0b      	ldr	r3, [pc, #44]	@ (801075c <LoRaMacHandleIndicationEvents+0x60>)
 801072e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010732:	f003 0302 	and.w	r3, r3, #2
 8010736:	b2db      	uxtb	r3, r3
 8010738:	2b00      	cmp	r3, #0
 801073a:	d00d      	beq.n	8010758 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801073c:	4a07      	ldr	r2, [pc, #28]	@ (801075c <LoRaMacHandleIndicationEvents+0x60>)
 801073e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010742:	f36f 0341 	bfc	r3, #1, #1
 8010746:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801074a:	4b04      	ldr	r3, [pc, #16]	@ (801075c <LoRaMacHandleIndicationEvents+0x60>)
 801074c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	4903      	ldr	r1, [pc, #12]	@ (8010760 <LoRaMacHandleIndicationEvents+0x64>)
 8010754:	4804      	ldr	r0, [pc, #16]	@ (8010768 <LoRaMacHandleIndicationEvents+0x6c>)
 8010756:	4798      	blx	r3
    }
}
 8010758:	bf00      	nop
 801075a:	bd80      	pop	{r7, pc}
 801075c:	200006e0 	.word	0x200006e0
 8010760:	20000b6c 	.word	0x20000b6c
 8010764:	20000b48 	.word	0x20000b48
 8010768:	20000b00 	.word	0x20000b00

0801076c <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010772:	4b2a      	ldr	r3, [pc, #168]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 8010774:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010778:	f003 0301 	and.w	r3, r3, #1
 801077c:	b2db      	uxtb	r3, r3
 801077e:	2b00      	cmp	r3, #0
 8010780:	d048      	beq.n	8010814 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8010782:	2300      	movs	r3, #0
 8010784:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010786:	2300      	movs	r3, #0
 8010788:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801078a:	4b24      	ldr	r3, [pc, #144]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 801078c:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8010790:	2b00      	cmp	r3, #0
 8010792:	d004      	beq.n	801079e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010794:	4b21      	ldr	r3, [pc, #132]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 8010796:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801079a:	2b03      	cmp	r3, #3
 801079c:	d104      	bne.n	80107a8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801079e:	f002 f959 	bl	8012a54 <CheckRetransUnconfirmedUplink>
 80107a2:	4603      	mov	r3, r0
 80107a4:	71fb      	strb	r3, [r7, #7]
 80107a6:	e010      	b.n	80107ca <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80107a8:	4b1c      	ldr	r3, [pc, #112]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 80107aa:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d10b      	bne.n	80107ca <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 80107b2:	4b1a      	ldr	r3, [pc, #104]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 80107b4:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d004      	beq.n	80107c6 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80107bc:	f002 f976 	bl	8012aac <CheckRetransConfirmedUplink>
 80107c0:	4603      	mov	r3, r0
 80107c2:	71fb      	strb	r3, [r7, #7]
 80107c4:	e001      	b.n	80107ca <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 80107c6:	2301      	movs	r3, #1
 80107c8:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80107ca:	79fb      	ldrb	r3, [r7, #7]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00d      	beq.n	80107ec <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80107d0:	4813      	ldr	r0, [pc, #76]	@ (8010820 <LoRaMacHandleMcpsRequest+0xb4>)
 80107d2:	f00c fae9 	bl	801cda8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80107d6:	4b11      	ldr	r3, [pc, #68]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 80107d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80107dc:	f023 0320 	bic.w	r3, r3, #32
 80107e0:	4a0e      	ldr	r2, [pc, #56]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 80107e2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 80107e6:	f002 f99b 	bl	8012b20 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80107ea:	e013      	b.n	8010814 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 80107ec:	79bb      	ldrb	r3, [r7, #6]
 80107ee:	f083 0301 	eor.w	r3, r3, #1
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00d      	beq.n	8010814 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80107f8:	4a08      	ldr	r2, [pc, #32]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 80107fa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80107fe:	f36f 1304 	bfc	r3, #4, #1
 8010802:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8010806:	4b05      	ldr	r3, [pc, #20]	@ (801081c <LoRaMacHandleMcpsRequest+0xb0>)
 8010808:	2200      	movs	r2, #0
 801080a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 801080e:	2000      	movs	r0, #0
 8010810:	f000 f9c8 	bl	8010ba4 <OnTxDelayedTimerEvent>
}
 8010814:	bf00      	nop
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	200006e0 	.word	0x200006e0
 8010820:	20000a48 	.word	0x20000a48

08010824 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010824:	b580      	push	{r7, lr}
 8010826:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010828:	4b18      	ldr	r3, [pc, #96]	@ (801088c <LoRaMacHandleMlmeRequest+0x68>)
 801082a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801082e:	f003 0304 	and.w	r3, r3, #4
 8010832:	b2db      	uxtb	r3, r3
 8010834:	2b00      	cmp	r3, #0
 8010836:	d026      	beq.n	8010886 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010838:	2001      	movs	r0, #1
 801083a:	f004 fccd 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d012      	beq.n	801086a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010844:	2001      	movs	r0, #1
 8010846:	f004 fc69 	bl	801511c <LoRaMacConfirmQueueGetStatus>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d103      	bne.n	8010858 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010850:	4b0e      	ldr	r3, [pc, #56]	@ (801088c <LoRaMacHandleMlmeRequest+0x68>)
 8010852:	2200      	movs	r2, #0
 8010854:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010858:	4b0c      	ldr	r3, [pc, #48]	@ (801088c <LoRaMacHandleMlmeRequest+0x68>)
 801085a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801085e:	f023 0302 	bic.w	r3, r3, #2
 8010862:	4a0a      	ldr	r2, [pc, #40]	@ (801088c <LoRaMacHandleMlmeRequest+0x68>)
 8010864:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010868:	e00d      	b.n	8010886 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 801086a:	2006      	movs	r0, #6
 801086c:	f004 fcb4 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 8010870:	4603      	mov	r3, r0
 8010872:	2b00      	cmp	r3, #0
 8010874:	d007      	beq.n	8010886 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010876:	4b05      	ldr	r3, [pc, #20]	@ (801088c <LoRaMacHandleMlmeRequest+0x68>)
 8010878:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801087c:	f023 0302 	bic.w	r3, r3, #2
 8010880:	4a02      	ldr	r2, [pc, #8]	@ (801088c <LoRaMacHandleMlmeRequest+0x68>)
 8010882:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8010886:	bf00      	nop
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	200006e0 	.word	0x200006e0

08010890 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010894:	200b      	movs	r0, #11
 8010896:	f004 fc9f 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 801089a:	4603      	mov	r3, r0
 801089c:	2b00      	cmp	r3, #0
 801089e:	d019      	beq.n	80108d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80108a0:	4b0e      	ldr	r3, [pc, #56]	@ (80108dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108a2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80108a6:	f003 0301 	and.w	r3, r3, #1
 80108aa:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d111      	bne.n	80108d4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80108b0:	4b0a      	ldr	r3, [pc, #40]	@ (80108dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108b2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80108b6:	f003 0304 	and.w	r3, r3, #4
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d009      	beq.n	80108d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80108c0:	4b06      	ldr	r3, [pc, #24]	@ (80108dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80108c6:	f023 0302 	bic.w	r3, r3, #2
 80108ca:	4a04      	ldr	r2, [pc, #16]	@ (80108dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108cc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 80108d0:	2301      	movs	r3, #1
 80108d2:	e000      	b.n	80108d6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	200006e0 	.word	0x200006e0

080108e0 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	4603      	mov	r3, r0
 80108e8:	71fb      	strb	r3, [r7, #7]
 80108ea:	460b      	mov	r3, r1
 80108ec:	71bb      	strb	r3, [r7, #6]
 80108ee:	4613      	mov	r3, r2
 80108f0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80108f2:	79fb      	ldrb	r3, [r7, #7]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00a      	beq.n	801090e <CheckForMinimumAbpDatarate+0x2e>
 80108f8:	79bb      	ldrb	r3, [r7, #6]
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	d107      	bne.n	801090e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80108fe:	797b      	ldrb	r3, [r7, #5]
 8010900:	f083 0301 	eor.w	r3, r3, #1
 8010904:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 801090a:	2301      	movs	r3, #1
 801090c:	e000      	b.n	8010910 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	bc80      	pop	{r7}
 8010918:	4770      	bx	lr
	...

0801091c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 801091c:	b480      	push	{r7}
 801091e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010920:	4b0d      	ldr	r3, [pc, #52]	@ (8010958 <LoRaMacCheckForRxAbort+0x3c>)
 8010922:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00f      	beq.n	801094e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801092e:	4b0a      	ldr	r3, [pc, #40]	@ (8010958 <LoRaMacCheckForRxAbort+0x3c>)
 8010930:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010938:	4a07      	ldr	r2, [pc, #28]	@ (8010958 <LoRaMacCheckForRxAbort+0x3c>)
 801093a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801093e:	4b06      	ldr	r3, [pc, #24]	@ (8010958 <LoRaMacCheckForRxAbort+0x3c>)
 8010940:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010944:	f023 0302 	bic.w	r3, r3, #2
 8010948:	4a03      	ldr	r2, [pc, #12]	@ (8010958 <LoRaMacCheckForRxAbort+0x3c>)
 801094a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 801094e:	bf00      	nop
 8010950:	46bd      	mov	sp, r7
 8010952:	bc80      	pop	{r7}
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop
 8010958:	200006e0 	.word	0x200006e0

0801095c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010964:	2300      	movs	r3, #0
 8010966:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010968:	2300      	movs	r3, #0
 801096a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801096c:	4b51      	ldr	r3, [pc, #324]	@ (8010ab4 <LoRaMacHandleNvm+0x158>)
 801096e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010972:	2b00      	cmp	r3, #0
 8010974:	f040 8099 	bne.w	8010aaa <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2124      	movs	r1, #36	@ 0x24
 801097c:	4618      	mov	r0, r3
 801097e:	f008 f91b 	bl	8018bb8 <Crc32>
 8010982:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010988:	68ba      	ldr	r2, [r7, #8]
 801098a:	429a      	cmp	r2, r3
 801098c:	d006      	beq.n	801099c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010994:	89fb      	ldrh	r3, [r7, #14]
 8010996:	f043 0301 	orr.w	r3, r3, #1
 801099a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	3328      	adds	r3, #40	@ 0x28
 80109a0:	211c      	movs	r1, #28
 80109a2:	4618      	mov	r0, r3
 80109a4:	f008 f908 	bl	8018bb8 <Crc32>
 80109a8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d006      	beq.n	80109c2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	68ba      	ldr	r2, [r7, #8]
 80109b8:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80109ba:	89fb      	ldrh	r3, [r7, #14]
 80109bc:	f043 0302 	orr.w	r3, r3, #2
 80109c0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	3348      	adds	r3, #72	@ 0x48
 80109c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80109ca:	4618      	mov	r0, r3
 80109cc:	f008 f8f4 	bl	8018bb8 <Crc32>
 80109d0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d007      	beq.n	80109ee <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	68ba      	ldr	r2, [r7, #8]
 80109e2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80109e6:	89fb      	ldrh	r3, [r7, #14]
 80109e8:	f043 0304 	orr.w	r3, r3, #4
 80109ec:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80109f4:	21d4      	movs	r1, #212	@ 0xd4
 80109f6:	4618      	mov	r0, r3
 80109f8:	f008 f8de 	bl	8018bb8 <Crc32>
 80109fc:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010a04:	68ba      	ldr	r2, [r7, #8]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d007      	beq.n	8010a1a <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	68ba      	ldr	r2, [r7, #8]
 8010a0e:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8010a12:	89fb      	ldrh	r3, [r7, #14]
 8010a14:	f043 0308 	orr.w	r3, r3, #8
 8010a18:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8010a20:	2100      	movs	r1, #0
 8010a22:	4618      	mov	r0, r3
 8010a24:	f008 f8c8 	bl	8018bb8 <Crc32>
 8010a28:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010a30:	68ba      	ldr	r2, [r7, #8]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d007      	beq.n	8010a46 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	68ba      	ldr	r2, [r7, #8]
 8010a3a:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010a3e:	89fb      	ldrh	r3, [r7, #14]
 8010a40:	f043 0310 	orr.w	r3, r3, #16
 8010a44:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8010a4c:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8010a50:	4618      	mov	r0, r3
 8010a52:	f008 f8b1 	bl	8018bb8 <Crc32>
 8010a56:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 8010a5e:	68ba      	ldr	r2, [r7, #8]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d007      	beq.n	8010a74 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	68ba      	ldr	r2, [r7, #8]
 8010a68:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010a6c:	89fb      	ldrh	r3, [r7, #14]
 8010a6e:	f043 0320 	orr.w	r3, r3, #32
 8010a72:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 8010a7a:	2114      	movs	r1, #20
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f008 f89b 	bl	8018bb8 <Crc32>
 8010a82:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 8010a8a:	68ba      	ldr	r2, [r7, #8]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d007      	beq.n	8010aa0 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	68ba      	ldr	r2, [r7, #8]
 8010a94:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010a98:	89fb      	ldrh	r3, [r7, #14]
 8010a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a9e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010aa0:	89fb      	ldrh	r3, [r7, #14]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f002 f88e 	bl	8012bc4 <CallNvmDataChangeCallback>
 8010aa8:	e000      	b.n	8010aac <LoRaMacHandleNvm+0x150>
        return;
 8010aaa:	bf00      	nop
}
 8010aac:	3710      	adds	r7, #16
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	200006e0 	.word	0x200006e0

08010ab8 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00d      	beq.n	8010ae4 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8010ac8:	6838      	ldr	r0, [r7, #0]
 8010aca:	f00c fa99 	bl	801d000 <UTIL_TIMER_GetElapsedTime>
 8010ace:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8010ad0:	68fa      	ldr	r2, [r7, #12]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d905      	bls.n	8010ae4 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8010ad8:	4b05      	ldr	r3, [pc, #20]	@ (8010af0 <LoRaMacHandleResponseTimeout+0x38>)
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e000      	b.n	8010ae6 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8010ae4:	2300      	movs	r3, #0
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop
 8010af0:	20000c14 	.word	0x20000c14

08010af4 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010afa:	2300      	movs	r3, #0
 8010afc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8010afe:	f7ff fd0b 	bl	8010518 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010b02:	f003 fefa 	bl	80148fa <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010b06:	4b25      	ldr	r3, [pc, #148]	@ (8010b9c <LoRaMacProcess+0xa8>)
 8010b08:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010b0c:	f003 0310 	and.w	r3, r3, #16
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d023      	beq.n	8010b5e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010b16:	2000      	movs	r0, #0
 8010b18:	f7ff fd7e 	bl	8010618 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010b1c:	f7ff fefe 	bl	801091c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010b20:	f002 f86e 	bl	8012c00 <IsRequestPending>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d006      	beq.n	8010b38 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010b2a:	f7ff feb1 	bl	8010890 <LoRaMacCheckForBeaconAcquisition>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	461a      	mov	r2, r3
 8010b32:	79fb      	ldrb	r3, [r7, #7]
 8010b34:	4313      	orrs	r3, r2
 8010b36:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010b38:	79fb      	ldrb	r3, [r7, #7]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d103      	bne.n	8010b46 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010b3e:	f7ff fe71 	bl	8010824 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010b42:	f7ff fe13 	bl	801076c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010b46:	f7ff fd77 	bl	8010638 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010b4a:	2001      	movs	r0, #1
 8010b4c:	f7ff fd64 	bl	8010618 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010b50:	4a12      	ldr	r2, [pc, #72]	@ (8010b9c <LoRaMacProcess+0xa8>)
 8010b52:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010b56:	f043 0320 	orr.w	r3, r3, #32
 8010b5a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8010b5e:	f7ff fdcd 	bl	80106fc <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010b62:	4b0e      	ldr	r3, [pc, #56]	@ (8010b9c <LoRaMacProcess+0xa8>)
 8010b64:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	d101      	bne.n	8010b70 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010b6c:	f001 fc32 	bl	80123d4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010b70:	4b0a      	ldr	r3, [pc, #40]	@ (8010b9c <LoRaMacProcess+0xa8>)
 8010b72:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010b76:	f003 0320 	and.w	r3, r3, #32
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d009      	beq.n	8010b94 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010b80:	4a06      	ldr	r2, [pc, #24]	@ (8010b9c <LoRaMacProcess+0xa8>)
 8010b82:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010b86:	f36f 1345 	bfc	r3, #5, #1
 8010b8a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 8010b8e:	4804      	ldr	r0, [pc, #16]	@ (8010ba0 <LoRaMacProcess+0xac>)
 8010b90:	f7ff fee4 	bl	801095c <LoRaMacHandleNvm>
    }
}
 8010b94:	bf00      	nop
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	200006e0 	.word	0x200006e0
 8010ba0:	20000c14 	.word	0x20000c14

08010ba4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010bac:	481e      	ldr	r0, [pc, #120]	@ (8010c28 <OnTxDelayedTimerEvent+0x84>)
 8010bae:	f00c f8fb 	bl	801cda8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8010c2c <OnTxDelayedTimerEvent+0x88>)
 8010bb4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010bb8:	f023 0320 	bic.w	r3, r3, #32
 8010bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8010c2c <OnTxDelayedTimerEvent+0x88>)
 8010bbe:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8010c30 <OnTxDelayedTimerEvent+0x8c>)
 8010bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bc8:	4a18      	ldr	r2, [pc, #96]	@ (8010c2c <OnTxDelayedTimerEvent+0x88>)
 8010bca:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8010bce:	4611      	mov	r1, r2
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7ff ff71 	bl	8010ab8 <LoRaMacHandleResponseTimeout>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d11e      	bne.n	8010c1a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010bdc:	2001      	movs	r0, #1
 8010bde:	f001 f943 	bl	8011e68 <ScheduleTx>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d01a      	beq.n	8010c1e <OnTxDelayedTimerEvent+0x7a>
 8010be8:	2b0b      	cmp	r3, #11
 8010bea:	d018      	beq.n	8010c1e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010bec:	4b10      	ldr	r3, [pc, #64]	@ (8010c30 <OnTxDelayedTimerEvent+0x8c>)
 8010bee:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010bf2:	b2da      	uxtb	r2, r3
 8010bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8010c2c <OnTxDelayedTimerEvent+0x88>)
 8010bf6:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8010c2c <OnTxDelayedTimerEvent+0x88>)
 8010bfc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010c00:	4b0a      	ldr	r3, [pc, #40]	@ (8010c2c <OnTxDelayedTimerEvent+0x88>)
 8010c02:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010c06:	4b09      	ldr	r3, [pc, #36]	@ (8010c2c <OnTxDelayedTimerEvent+0x88>)
 8010c08:	2209      	movs	r2, #9
 8010c0a:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010c0e:	2009      	movs	r0, #9
 8010c10:	f004 faae 	bl	8015170 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010c14:	f001 ff84 	bl	8012b20 <StopRetransmission>
            break;
 8010c18:	e002      	b.n	8010c20 <OnTxDelayedTimerEvent+0x7c>
        return;
 8010c1a:	bf00      	nop
 8010c1c:	e000      	b.n	8010c20 <OnTxDelayedTimerEvent+0x7c>
            break;
 8010c1e:	bf00      	nop
        }
    }
}
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	20000a48 	.word	0x20000a48
 8010c2c:	200006e0 	.word	0x200006e0
 8010c30:	20000c14 	.word	0x20000c14

08010c34 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010c3c:	4b17      	ldr	r3, [pc, #92]	@ (8010c9c <OnRxWindow1TimerEvent+0x68>)
 8010c3e:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010c42:	4b16      	ldr	r3, [pc, #88]	@ (8010c9c <OnRxWindow1TimerEvent+0x68>)
 8010c44:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010c48:	4b15      	ldr	r3, [pc, #84]	@ (8010ca0 <OnRxWindow1TimerEvent+0x6c>)
 8010c4a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010c4e:	b25a      	sxtb	r2, r3
 8010c50:	4b12      	ldr	r3, [pc, #72]	@ (8010c9c <OnRxWindow1TimerEvent+0x68>)
 8010c52:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010c56:	4b12      	ldr	r3, [pc, #72]	@ (8010ca0 <OnRxWindow1TimerEvent+0x6c>)
 8010c58:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8010c9c <OnRxWindow1TimerEvent+0x68>)
 8010c5e:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010c62:	4b0f      	ldr	r3, [pc, #60]	@ (8010ca0 <OnRxWindow1TimerEvent+0x6c>)
 8010c64:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010c68:	4b0c      	ldr	r3, [pc, #48]	@ (8010c9c <OnRxWindow1TimerEvent+0x68>)
 8010c6a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8010c9c <OnRxWindow1TimerEvent+0x68>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010c76:	4b09      	ldr	r3, [pc, #36]	@ (8010c9c <OnRxWindow1TimerEvent+0x68>)
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010c7e:	4b08      	ldr	r3, [pc, #32]	@ (8010ca0 <OnRxWindow1TimerEvent+0x6c>)
 8010c80:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010c84:	4b05      	ldr	r3, [pc, #20]	@ (8010c9c <OnRxWindow1TimerEvent+0x68>)
 8010c86:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010c8a:	4906      	ldr	r1, [pc, #24]	@ (8010ca4 <OnRxWindow1TimerEvent+0x70>)
 8010c8c:	4806      	ldr	r0, [pc, #24]	@ (8010ca8 <OnRxWindow1TimerEvent+0x74>)
 8010c8e:	f001 fb6d 	bl	801236c <RxWindowSetup>
}
 8010c92:	bf00      	nop
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	200006e0 	.word	0x200006e0
 8010ca0:	20000c14 	.word	0x20000c14
 8010ca4:	20000a98 	.word	0x20000a98
 8010ca8:	20000a60 	.word	0x20000a60

08010cac <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010cb4:	4b19      	ldr	r3, [pc, #100]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010cb6:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d029      	beq.n	8010d12 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010cbe:	4b17      	ldr	r3, [pc, #92]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010cc0:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010cc4:	4b15      	ldr	r3, [pc, #84]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010cc6:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010cca:	4b15      	ldr	r3, [pc, #84]	@ (8010d20 <OnRxWindow2TimerEvent+0x74>)
 8010ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cce:	4a13      	ldr	r2, [pc, #76]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010cd0:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010cd4:	4b12      	ldr	r3, [pc, #72]	@ (8010d20 <OnRxWindow2TimerEvent+0x74>)
 8010cd6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010cda:	4b10      	ldr	r3, [pc, #64]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010cdc:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8010d20 <OnRxWindow2TimerEvent+0x74>)
 8010ce2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010ce8:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010cec:	4b0b      	ldr	r3, [pc, #44]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010cf4:	4b09      	ldr	r3, [pc, #36]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010cfc:	4b08      	ldr	r3, [pc, #32]	@ (8010d20 <OnRxWindow2TimerEvent+0x74>)
 8010cfe:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010d02:	4b06      	ldr	r3, [pc, #24]	@ (8010d1c <OnRxWindow2TimerEvent+0x70>)
 8010d04:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010d08:	4906      	ldr	r1, [pc, #24]	@ (8010d24 <OnRxWindow2TimerEvent+0x78>)
 8010d0a:	4807      	ldr	r0, [pc, #28]	@ (8010d28 <OnRxWindow2TimerEvent+0x7c>)
 8010d0c:	f001 fb2e 	bl	801236c <RxWindowSetup>
 8010d10:	e000      	b.n	8010d14 <OnRxWindow2TimerEvent+0x68>
        return;
 8010d12:	bf00      	nop
}
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	200006e0 	.word	0x200006e0
 8010d20:	20000c14 	.word	0x20000c14
 8010d24:	20000ab0 	.word	0x20000ab0
 8010d28:	20000a78 	.word	0x20000a78

08010d2c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010d34:	4808      	ldr	r0, [pc, #32]	@ (8010d58 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8010d36:	f00c f837 	bl	801cda8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010d3a:	4b08      	ldr	r3, [pc, #32]	@ (8010d5c <OnRetransmitTimeoutTimerEvent+0x30>)
 8010d3c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d003      	beq.n	8010d4c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010d44:	4b05      	ldr	r3, [pc, #20]	@ (8010d5c <OnRetransmitTimeoutTimerEvent+0x30>)
 8010d46:	2201      	movs	r2, #1
 8010d48:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 8010d4c:	f001 ff24 	bl	8012b98 <OnMacProcessNotify>
}
 8010d50:	bf00      	nop
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	20000ae0 	.word	0x20000ae0
 8010d5c:	200006e0 	.word	0x200006e0

08010d60 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	60ba      	str	r2, [r7, #8]
 8010d68:	607b      	str	r3, [r7, #4]
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	73fb      	strb	r3, [r7, #15]
 8010d6e:	460b      	mov	r3, r1
 8010d70:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d005      	beq.n	8010d84 <GetFCntDown+0x24>
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d002      	beq.n	8010d84 <GetFCntDown+0x24>
 8010d7e:	69fb      	ldr	r3, [r7, #28]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d101      	bne.n	8010d88 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010d84:	2309      	movs	r3, #9
 8010d86:	e028      	b.n	8010dda <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010d88:	7bfb      	ldrb	r3, [r7, #15]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d016      	beq.n	8010dbc <GetFCntDown+0x5c>
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d118      	bne.n	8010dc4 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010d92:	79bb      	ldrb	r3, [r7, #6]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d10d      	bne.n	8010db4 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010d98:	7bbb      	ldrb	r3, [r7, #14]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d002      	beq.n	8010da4 <GetFCntDown+0x44>
 8010d9e:	7bbb      	ldrb	r3, [r7, #14]
 8010da0:	2b03      	cmp	r3, #3
 8010da2:	d103      	bne.n	8010dac <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	2202      	movs	r2, #2
 8010da8:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010daa:	e00d      	b.n	8010dc8 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	2201      	movs	r2, #1
 8010db0:	701a      	strb	r2, [r3, #0]
            break;
 8010db2:	e009      	b.n	8010dc8 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	2203      	movs	r2, #3
 8010db8:	701a      	strb	r2, [r3, #0]
            break;
 8010dba:	e005      	b.n	8010dc8 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010dbc:	69bb      	ldr	r3, [r7, #24]
 8010dbe:	2204      	movs	r2, #4
 8010dc0:	701a      	strb	r2, [r3, #0]
            break;
 8010dc2:	e001      	b.n	8010dc8 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010dc4:	2305      	movs	r3, #5
 8010dc6:	e008      	b.n	8010dda <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	7818      	ldrb	r0, [r3, #0]
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	89db      	ldrh	r3, [r3, #14]
 8010dd0:	69fa      	ldr	r2, [r7, #28]
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	f004 fe0a 	bl	80159ec <LoRaMacCryptoGetFCntDown>
 8010dd8:	4603      	mov	r3, r0
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010de4:	b5b0      	push	{r4, r5, r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010dee:	2303      	movs	r3, #3
 8010df0:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010df2:	4b6e      	ldr	r3, [pc, #440]	@ (8010fac <SwitchClass+0x1c8>)
 8010df4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	f000 80bb 	beq.w	8010f74 <SwitchClass+0x190>
 8010dfe:	2b02      	cmp	r3, #2
 8010e00:	f300 80ce 	bgt.w	8010fa0 <SwitchClass+0x1bc>
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d003      	beq.n	8010e10 <SwitchClass+0x2c>
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	f000 80a5 	beq.w	8010f58 <SwitchClass+0x174>
 8010e0e:	e0c7      	b.n	8010fa0 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010e10:	79fb      	ldrb	r3, [r7, #7]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d109      	bne.n	8010e2a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010e16:	4b65      	ldr	r3, [pc, #404]	@ (8010fac <SwitchClass+0x1c8>)
 8010e18:	4a64      	ldr	r2, [pc, #400]	@ (8010fac <SwitchClass+0x1c8>)
 8010e1a:	3374      	adds	r3, #116	@ 0x74
 8010e1c:	326c      	adds	r2, #108	@ 0x6c
 8010e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e22:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8010e2a:	79fb      	ldrb	r3, [r7, #7]
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d10c      	bne.n	8010e4a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010e30:	79fb      	ldrb	r3, [r7, #7]
 8010e32:	4618      	mov	r0, r3
 8010e34:	f003 fcf8 	bl	8014828 <LoRaMacClassBSwitchClass>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010e3c:	7bfb      	ldrb	r3, [r7, #15]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d103      	bne.n	8010e4a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010e42:	4a5a      	ldr	r2, [pc, #360]	@ (8010fac <SwitchClass+0x1c8>)
 8010e44:	79fb      	ldrb	r3, [r7, #7]
 8010e46:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8010e4a:	79fb      	ldrb	r3, [r7, #7]
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	f040 80a2 	bne.w	8010f96 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010e52:	4a56      	ldr	r2, [pc, #344]	@ (8010fac <SwitchClass+0x1c8>)
 8010e54:	79fb      	ldrb	r3, [r7, #7]
 8010e56:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010e5a:	4a55      	ldr	r2, [pc, #340]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010e5c:	4b54      	ldr	r3, [pc, #336]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010e5e:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010e62:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010e6e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010e72:	4b4f      	ldr	r3, [pc, #316]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010e74:	2202      	movs	r2, #2
 8010e76:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	73bb      	strb	r3, [r7, #14]
 8010e7e:	e05b      	b.n	8010f38 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010e80:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010e84:	4949      	ldr	r1, [pc, #292]	@ (8010fac <SwitchClass+0x1c8>)
 8010e86:	4613      	mov	r3, r2
 8010e88:	005b      	lsls	r3, r3, #1
 8010e8a:	4413      	add	r3, r2
 8010e8c:	011b      	lsls	r3, r3, #4
 8010e8e:	440b      	add	r3, r1
 8010e90:	33e9      	adds	r3, #233	@ 0xe9
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d049      	beq.n	8010f2c <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8010e98:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010e9c:	4943      	ldr	r1, [pc, #268]	@ (8010fac <SwitchClass+0x1c8>)
 8010e9e:	4613      	mov	r3, r2
 8010ea0:	005b      	lsls	r3, r3, #1
 8010ea2:	4413      	add	r3, r2
 8010ea4:	011b      	lsls	r3, r3, #4
 8010ea6:	440b      	add	r3, r1
 8010ea8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010eac:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d13c      	bne.n	8010f2c <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8010eb2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010eb6:	493d      	ldr	r1, [pc, #244]	@ (8010fac <SwitchClass+0x1c8>)
 8010eb8:	4613      	mov	r3, r2
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	011b      	lsls	r3, r3, #4
 8010ec0:	440b      	add	r3, r1
 8010ec2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4a38      	ldr	r2, [pc, #224]	@ (8010fac <SwitchClass+0x1c8>)
 8010eca:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8010ecc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010ed0:	4936      	ldr	r1, [pc, #216]	@ (8010fac <SwitchClass+0x1c8>)
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	4413      	add	r3, r2
 8010ed8:	011b      	lsls	r3, r3, #4
 8010eda:	440b      	add	r3, r1
 8010edc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8010ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	4b31      	ldr	r3, [pc, #196]	@ (8010fac <SwitchClass+0x1c8>)
 8010ee8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010eec:	4b30      	ldr	r3, [pc, #192]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010eee:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010ef4:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8010fac <SwitchClass+0x1c8>)
 8010efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010efc:	4a2c      	ldr	r2, [pc, #176]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010efe:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010f02:	4b2a      	ldr	r3, [pc, #168]	@ (8010fac <SwitchClass+0x1c8>)
 8010f04:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010f08:	4b29      	ldr	r3, [pc, #164]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010f0a:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010f0e:	4b27      	ldr	r3, [pc, #156]	@ (8010fac <SwitchClass+0x1c8>)
 8010f10:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010f14:	4b26      	ldr	r3, [pc, #152]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010f16:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010f1a:	4b25      	ldr	r3, [pc, #148]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010f1c:	2203      	movs	r2, #3
 8010f1e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010f22:	4b23      	ldr	r3, [pc, #140]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010f24:	2201      	movs	r2, #1
 8010f26:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 8010f2a:	e009      	b.n	8010f40 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	3301      	adds	r3, #1
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	73bb      	strb	r3, [r7, #14]
 8010f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	dd9f      	ble.n	8010e80 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010f40:	4b1b      	ldr	r3, [pc, #108]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010f48:	4b1a      	ldr	r3, [pc, #104]	@ (8010fb4 <SwitchClass+0x1d0>)
 8010f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f4c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010f4e:	f001 fa41 	bl	80123d4 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010f56:	e01e      	b.n	8010f96 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010f58:	79fb      	ldrb	r3, [r7, #7]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f003 fc64 	bl	8014828 <LoRaMacClassBSwitchClass>
 8010f60:	4603      	mov	r3, r0
 8010f62:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010f64:	7bfb      	ldrb	r3, [r7, #15]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d117      	bne.n	8010f9a <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010f6a:	4a10      	ldr	r2, [pc, #64]	@ (8010fac <SwitchClass+0x1c8>)
 8010f6c:	79fb      	ldrb	r3, [r7, #7]
 8010f6e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 8010f72:	e012      	b.n	8010f9a <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010f74:	79fb      	ldrb	r3, [r7, #7]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d111      	bne.n	8010f9e <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8010f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010fb0 <SwitchClass+0x1cc>)
 8010f7c:	2206      	movs	r2, #6
 8010f7e:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010f82:	4a0a      	ldr	r2, [pc, #40]	@ (8010fac <SwitchClass+0x1c8>)
 8010f84:	79fb      	ldrb	r3, [r7, #7]
 8010f86:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8010fb4 <SwitchClass+0x1d0>)
 8010f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f8e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010f90:	2300      	movs	r3, #0
 8010f92:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8010f94:	e003      	b.n	8010f9e <SwitchClass+0x1ba>
            break;
 8010f96:	bf00      	nop
 8010f98:	e002      	b.n	8010fa0 <SwitchClass+0x1bc>
            break;
 8010f9a:	bf00      	nop
 8010f9c:	e000      	b.n	8010fa0 <SwitchClass+0x1bc>
            break;
 8010f9e:	bf00      	nop
        }
    }

    return status;
 8010fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3710      	adds	r7, #16
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8010faa:	bf00      	nop
 8010fac:	20000c14 	.word	0x20000c14
 8010fb0:	200006e0 	.word	0x200006e0
 8010fb4:	0801e614 	.word	0x0801e614

08010fb8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b086      	sub	sp, #24
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010fc2:	4b10      	ldr	r3, [pc, #64]	@ (8011004 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010fc4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010fc8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010fca:	79fb      	ldrb	r3, [r7, #7]
 8010fcc:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010fce:	230d      	movs	r3, #13
 8010fd0:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8011004 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010fd4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d001      	beq.n	8010fe0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010fdc:	230e      	movs	r3, #14
 8010fde:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fe0:	4b08      	ldr	r3, [pc, #32]	@ (8011004 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010fe2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010fe6:	f107 0210 	add.w	r2, r7, #16
 8010fea:	4611      	mov	r1, r2
 8010fec:	4618      	mov	r0, r3
 8010fee:	f005 fb62 	bl	80166b6 <RegionGetPhyParam>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	b2db      	uxtb	r3, r3
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3718      	adds	r7, #24
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	20000c14 	.word	0x20000c14

08011008 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	4603      	mov	r3, r0
 8011010:	71fb      	strb	r3, [r7, #7]
 8011012:	460b      	mov	r3, r1
 8011014:	71bb      	strb	r3, [r7, #6]
 8011016:	4613      	mov	r3, r2
 8011018:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801101e:	2300      	movs	r3, #0
 8011020:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011022:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011026:	4618      	mov	r0, r3
 8011028:	f7ff ffc6 	bl	8010fb8 <GetMaxAppPayloadWithoutFOptsLength>
 801102c:	4603      	mov	r3, r0
 801102e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011030:	79fb      	ldrb	r3, [r7, #7]
 8011032:	b29a      	uxth	r2, r3
 8011034:	797b      	ldrb	r3, [r7, #5]
 8011036:	b29b      	uxth	r3, r3
 8011038:	4413      	add	r3, r2
 801103a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 801103c:	89ba      	ldrh	r2, [r7, #12]
 801103e:	89fb      	ldrh	r3, [r7, #14]
 8011040:	429a      	cmp	r2, r3
 8011042:	d804      	bhi.n	801104e <ValidatePayloadLength+0x46>
 8011044:	89bb      	ldrh	r3, [r7, #12]
 8011046:	2bff      	cmp	r3, #255	@ 0xff
 8011048:	d801      	bhi.n	801104e <ValidatePayloadLength+0x46>
    {
        return true;
 801104a:	2301      	movs	r3, #1
 801104c:	e000      	b.n	8011050 <ValidatePayloadLength+0x48>
    }
    return false;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8011058:	b590      	push	{r4, r7, lr}
 801105a:	b0a5      	sub	sp, #148	@ 0x94
 801105c:	af02      	add	r7, sp, #8
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	4608      	mov	r0, r1
 8011062:	4611      	mov	r1, r2
 8011064:	461a      	mov	r2, r3
 8011066:	4603      	mov	r3, r0
 8011068:	70fb      	strb	r3, [r7, #3]
 801106a:	460b      	mov	r3, r1
 801106c:	70bb      	strb	r3, [r7, #2]
 801106e:	4613      	mov	r3, r2
 8011070:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8011072:	2300      	movs	r3, #0
 8011074:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8011078:	2300      	movs	r3, #0
 801107a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801107e:	2300      	movs	r3, #0
 8011080:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8011084:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8011088:	2b00      	cmp	r3, #0
 801108a:	f000 84c3 	beq.w	8011a14 <ProcessMacCommands+0x9bc>
 801108e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8011092:	2b01      	cmp	r3, #1
 8011094:	f040 84c4 	bne.w	8011a20 <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8011098:	f000 bcbc 	b.w	8011a14 <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801109c:	78fb      	ldrb	r3, [r7, #3]
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	4413      	add	r3, r2
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f003 febf 	bl	8014e28 <LoRaMacCommandsGetCmdSize>
 80110aa:	4603      	mov	r3, r0
 80110ac:	461a      	mov	r2, r3
 80110ae:	78fb      	ldrb	r3, [r7, #3]
 80110b0:	441a      	add	r2, r3
 80110b2:	78bb      	ldrb	r3, [r7, #2]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	f300 84b5 	bgt.w	8011a24 <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80110ba:	78fb      	ldrb	r3, [r7, #3]
 80110bc:	1c5a      	adds	r2, r3, #1
 80110be:	70fa      	strb	r2, [r7, #3]
 80110c0:	461a      	mov	r2, r3
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	4413      	add	r3, r2
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	3b02      	subs	r3, #2
 80110ca:	2b11      	cmp	r3, #17
 80110cc:	f200 84ac 	bhi.w	8011a28 <ProcessMacCommands+0x9d0>
 80110d0:	a201      	add	r2, pc, #4	@ (adr r2, 80110d8 <ProcessMacCommands+0x80>)
 80110d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d6:	bf00      	nop
 80110d8:	08011121 	.word	0x08011121
 80110dc:	08011163 	.word	0x08011163
 80110e0:	080112df 	.word	0x080112df
 80110e4:	0801131d 	.word	0x0801131d
 80110e8:	08011429 	.word	0x08011429
 80110ec:	08011479 	.word	0x08011479
 80110f0:	08011535 	.word	0x08011535
 80110f4:	0801158b 	.word	0x0801158b
 80110f8:	08011671 	.word	0x08011671
 80110fc:	08011a29 	.word	0x08011a29
 8011100:	08011a29 	.word	0x08011a29
 8011104:	08011719 	.word	0x08011719
 8011108:	08011a29 	.word	0x08011a29
 801110c:	08011a29 	.word	0x08011a29
 8011110:	08011839 	.word	0x08011839
 8011114:	0801186d 	.word	0x0801186d
 8011118:	080118fd 	.word	0x080118fd
 801111c:	08011975 	.word	0x08011975
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8011120:	2005      	movs	r0, #5
 8011122:	f004 f859 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	f000 8466 	beq.w	80119fa <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801112e:	2105      	movs	r1, #5
 8011130:	2000      	movs	r0, #0
 8011132:	f003 ffc5 	bl	80150c0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011136:	78fb      	ldrb	r3, [r7, #3]
 8011138:	1c5a      	adds	r2, r3, #1
 801113a:	70fa      	strb	r2, [r7, #3]
 801113c:	461a      	mov	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	4413      	add	r3, r2
 8011142:	781a      	ldrb	r2, [r3, #0]
 8011144:	4bb5      	ldr	r3, [pc, #724]	@ (801141c <ProcessMacCommands+0x3c4>)
 8011146:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801114a:	78fb      	ldrb	r3, [r7, #3]
 801114c:	1c5a      	adds	r2, r3, #1
 801114e:	70fa      	strb	r2, [r7, #3]
 8011150:	461a      	mov	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	4413      	add	r3, r2
 8011156:	781a      	ldrb	r2, [r3, #0]
 8011158:	4bb0      	ldr	r3, [pc, #704]	@ (801141c <ProcessMacCommands+0x3c4>)
 801115a:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 801115e:	f000 bc4c 	b.w	80119fa <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8011162:	2300      	movs	r3, #0
 8011164:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8011168:	2300      	movs	r3, #0
 801116a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8011174:	2300      	movs	r3, #0
 8011176:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 801117a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801117e:	f083 0301 	eor.w	r3, r3, #1
 8011182:	b2db      	uxtb	r3, r3
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 80a6 	beq.w	80112d6 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 801118a:	2301      	movs	r3, #1
 801118c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8011190:	78fb      	ldrb	r3, [r7, #3]
 8011192:	3b01      	subs	r3, #1
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	4413      	add	r3, r2
 8011198:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801119a:	4ba1      	ldr	r3, [pc, #644]	@ (8011420 <ProcessMacCommands+0x3c8>)
 801119c:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80111a0:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111a4:	4b9e      	ldr	r3, [pc, #632]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80111a6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80111aa:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80111ae:	4b9c      	ldr	r3, [pc, #624]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80111b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80111b4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111b8:	4b99      	ldr	r3, [pc, #612]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80111ba:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80111be:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80111c2:	4b97      	ldr	r3, [pc, #604]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80111c4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80111c8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80111cc:	4b94      	ldr	r3, [pc, #592]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80111ce:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80111d2:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80111d4:	4b92      	ldr	r3, [pc, #584]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80111d6:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d008      	beq.n	80111f0 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80111de:	78ba      	ldrb	r2, [r7, #2]
 80111e0:	78fb      	ldrb	r3, [r7, #3]
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	3301      	adds	r3, #1
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80111ee:	e002      	b.n	80111f6 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80111f0:	2305      	movs	r3, #5
 80111f2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80111f6:	4b8a      	ldr	r3, [pc, #552]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80111f8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80111fc:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 8011200:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 8011204:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011208:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801120c:	9301      	str	r3, [sp, #4]
 801120e:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8011212:	9300      	str	r3, [sp, #0]
 8011214:	4623      	mov	r3, r4
 8011216:	f005 fb0b 	bl	8016830 <RegionLinkAdrReq>
 801121a:	4603      	mov	r3, r0
 801121c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8011220:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011224:	f003 0307 	and.w	r3, r3, #7
 8011228:	2b07      	cmp	r3, #7
 801122a:	d119      	bne.n	8011260 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 801122c:	4b7c      	ldr	r3, [pc, #496]	@ (8011420 <ProcessMacCommands+0x3c8>)
 801122e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011232:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8011236:	429a      	cmp	r2, r3
 8011238:	da03      	bge.n	8011242 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 801123a:	4b79      	ldr	r3, [pc, #484]	@ (8011420 <ProcessMacCommands+0x3c8>)
 801123c:	2201      	movs	r2, #1
 801123e:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8011242:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8011246:	4b76      	ldr	r3, [pc, #472]	@ (8011420 <ProcessMacCommands+0x3c8>)
 8011248:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801124c:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8011250:	4b73      	ldr	r3, [pc, #460]	@ (8011420 <ProcessMacCommands+0x3c8>)
 8011252:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8011256:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 801125a:	4b71      	ldr	r3, [pc, #452]	@ (8011420 <ProcessMacCommands+0x3c8>)
 801125c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011260:	2300      	movs	r3, #0
 8011262:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8011266:	e00b      	b.n	8011280 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8011268:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 801126c:	2201      	movs	r2, #1
 801126e:	4619      	mov	r1, r3
 8011270:	2003      	movs	r0, #3
 8011272:	f003 fc79 	bl	8014b68 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011276:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801127a:	3301      	adds	r3, #1
 801127c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8011280:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8011284:	4a67      	ldr	r2, [pc, #412]	@ (8011424 <ProcessMacCommands+0x3cc>)
 8011286:	fba2 2303 	umull	r2, r3, r2, r3
 801128a:	089b      	lsrs	r3, r3, #2
 801128c:	b2db      	uxtb	r3, r3
 801128e:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8011292:	429a      	cmp	r2, r3
 8011294:	d3e8      	bcc.n	8011268 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8011296:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801129a:	78fb      	ldrb	r3, [r7, #3]
 801129c:	4413      	add	r3, r2
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	3b01      	subs	r3, #1
 80112a2:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 80112a4:	78fa      	ldrb	r2, [r7, #3]
 80112a6:	78bb      	ldrb	r3, [r7, #2]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d20a      	bcs.n	80112c2 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80112ac:	78fb      	ldrb	r3, [r7, #3]
 80112ae:	1c5a      	adds	r2, r3, #1
 80112b0:	70fa      	strb	r2, [r7, #3]
 80112b2:	461a      	mov	r2, r3
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	4413      	add	r3, r2
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	f43f af68 	beq.w	8011190 <ProcessMacCommands+0x138>
 80112c0:	e000      	b.n	80112c4 <ProcessMacCommands+0x26c>
                            break;
 80112c2:	bf00      	nop

                    if( macIndex < commandsSize )
 80112c4:	78fa      	ldrb	r2, [r7, #3]
 80112c6:	78bb      	ldrb	r3, [r7, #2]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	f080 8398 	bcs.w	80119fe <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80112ce:	78fb      	ldrb	r3, [r7, #3]
 80112d0:	3b01      	subs	r3, #1
 80112d2:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80112d4:	e393      	b.n	80119fe <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 80112d6:	78fb      	ldrb	r3, [r7, #3]
 80112d8:	3304      	adds	r3, #4
 80112da:	70fb      	strb	r3, [r7, #3]
                break;
 80112dc:	e38f      	b.n	80119fe <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80112de:	78fb      	ldrb	r3, [r7, #3]
 80112e0:	1c5a      	adds	r2, r3, #1
 80112e2:	70fa      	strb	r2, [r7, #3]
 80112e4:	461a      	mov	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4413      	add	r3, r2
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	f003 030f 	and.w	r3, r3, #15
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	4b4b      	ldr	r3, [pc, #300]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80112f4:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80112f8:	4b49      	ldr	r3, [pc, #292]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80112fa:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80112fe:	461a      	mov	r2, r3
 8011300:	2301      	movs	r3, #1
 8011302:	4093      	lsls	r3, r2
 8011304:	b29a      	uxth	r2, r3
 8011306:	4b46      	ldr	r3, [pc, #280]	@ (8011420 <ProcessMacCommands+0x3c8>)
 8011308:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801130c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011310:	2200      	movs	r2, #0
 8011312:	4619      	mov	r1, r3
 8011314:	2004      	movs	r0, #4
 8011316:	f003 fc27 	bl	8014b68 <LoRaMacCommandsAddCmd>
                break;
 801131a:	e37b      	b.n	8011a14 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801131c:	2307      	movs	r3, #7
 801131e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8011322:	78fb      	ldrb	r3, [r7, #3]
 8011324:	687a      	ldr	r2, [r7, #4]
 8011326:	4413      	add	r3, r2
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	091b      	lsrs	r3, r3, #4
 801132c:	b2db      	uxtb	r3, r3
 801132e:	b25b      	sxtb	r3, r3
 8011330:	f003 0307 	and.w	r3, r3, #7
 8011334:	b25b      	sxtb	r3, r3
 8011336:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801133a:	78fb      	ldrb	r3, [r7, #3]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	4413      	add	r3, r2
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	b25b      	sxtb	r3, r3
 8011344:	f003 030f 	and.w	r3, r3, #15
 8011348:	b25b      	sxtb	r3, r3
 801134a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 801134e:	78fb      	ldrb	r3, [r7, #3]
 8011350:	3301      	adds	r3, #1
 8011352:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 8011354:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8011358:	2b0f      	cmp	r3, #15
 801135a:	d105      	bne.n	8011368 <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 801135c:	4b30      	ldr	r3, [pc, #192]	@ (8011420 <ProcessMacCommands+0x3c8>)
 801135e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011362:	b25b      	sxtb	r3, r3
 8011364:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011368:	78fb      	ldrb	r3, [r7, #3]
 801136a:	1c5a      	adds	r2, r3, #1
 801136c:	70fa      	strb	r2, [r7, #3]
 801136e:	461a      	mov	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	4413      	add	r3, r2
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011378:	78fb      	ldrb	r3, [r7, #3]
 801137a:	1c5a      	adds	r2, r3, #1
 801137c:	70fa      	strb	r2, [r7, #3]
 801137e:	461a      	mov	r2, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	4413      	add	r3, r2
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	021a      	lsls	r2, r3, #8
 8011388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801138a:	4313      	orrs	r3, r2
 801138c:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801138e:	78fb      	ldrb	r3, [r7, #3]
 8011390:	1c5a      	adds	r2, r3, #1
 8011392:	70fa      	strb	r2, [r7, #3]
 8011394:	461a      	mov	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	4413      	add	r3, r2
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	041a      	lsls	r2, r3, #16
 801139e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113a0:	4313      	orrs	r3, r2
 80113a2:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 80113a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113a6:	2264      	movs	r2, #100	@ 0x64
 80113a8:	fb02 f303 	mul.w	r3, r2, r3
 80113ac:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80113ae:	4b1c      	ldr	r3, [pc, #112]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80113b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80113b4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80113b8:	4611      	mov	r1, r2
 80113ba:	4618      	mov	r0, r3
 80113bc:	f005 fa52 	bl	8016864 <RegionRxParamSetupReq>
 80113c0:	4603      	mov	r3, r0
 80113c2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80113c6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80113ca:	f003 0307 	and.w	r3, r3, #7
 80113ce:	2b07      	cmp	r3, #7
 80113d0:	d117      	bne.n	8011402 <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80113d2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	4b11      	ldr	r3, [pc, #68]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80113da:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80113de:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80113e2:	b2da      	uxtb	r2, r3
 80113e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80113e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80113ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113ec:	4a0c      	ldr	r2, [pc, #48]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80113ee:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80113f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113f2:	4a0b      	ldr	r2, [pc, #44]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80113f4:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80113f6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	4b08      	ldr	r3, [pc, #32]	@ (8011420 <ProcessMacCommands+0x3c8>)
 80113fe:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 8011402:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011406:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801140a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801140e:	2201      	movs	r2, #1
 8011410:	4619      	mov	r1, r3
 8011412:	2005      	movs	r0, #5
 8011414:	f003 fba8 	bl	8014b68 <LoRaMacCommandsAddCmd>
                break;
 8011418:	e2fc      	b.n	8011a14 <ProcessMacCommands+0x9bc>
 801141a:	bf00      	nop
 801141c:	200006e0 	.word	0x200006e0
 8011420:	20000c14 	.word	0x20000c14
 8011424:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8011428:	23ff      	movs	r3, #255	@ 0xff
 801142a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801142e:	4bb7      	ldr	r3, [pc, #732]	@ (801170c <ProcessMacCommands+0x6b4>)
 8011430:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00d      	beq.n	8011454 <ProcessMacCommands+0x3fc>
 8011438:	4bb4      	ldr	r3, [pc, #720]	@ (801170c <ProcessMacCommands+0x6b4>)
 801143a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d007      	beq.n	8011454 <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011444:	4bb1      	ldr	r3, [pc, #708]	@ (801170c <ProcessMacCommands+0x6b4>)
 8011446:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4798      	blx	r3
 801144e:	4603      	mov	r3, r0
 8011450:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011454:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8011458:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801145c:	787b      	ldrb	r3, [r7, #1]
 801145e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011462:	b2db      	uxtb	r3, r3
 8011464:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011468:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801146c:	2202      	movs	r2, #2
 801146e:	4619      	mov	r1, r3
 8011470:	2006      	movs	r0, #6
 8011472:	f003 fb79 	bl	8014b68 <LoRaMacCommandsAddCmd>
                break;
 8011476:	e2cd      	b.n	8011a14 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011478:	2303      	movs	r3, #3
 801147a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801147e:	78fb      	ldrb	r3, [r7, #3]
 8011480:	1c5a      	adds	r2, r3, #1
 8011482:	70fa      	strb	r2, [r7, #3]
 8011484:	461a      	mov	r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4413      	add	r3, r2
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	b25b      	sxtb	r3, r3
 801148e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8011492:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011496:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011498:	78fb      	ldrb	r3, [r7, #3]
 801149a:	1c5a      	adds	r2, r3, #1
 801149c:	70fa      	strb	r2, [r7, #3]
 801149e:	461a      	mov	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	4413      	add	r3, r2
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80114a8:	78fb      	ldrb	r3, [r7, #3]
 80114aa:	1c5a      	adds	r2, r3, #1
 80114ac:	70fa      	strb	r2, [r7, #3]
 80114ae:	461a      	mov	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	4413      	add	r3, r2
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	021a      	lsls	r2, r3, #8
 80114b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ba:	4313      	orrs	r3, r2
 80114bc:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80114be:	78fb      	ldrb	r3, [r7, #3]
 80114c0:	1c5a      	adds	r2, r3, #1
 80114c2:	70fa      	strb	r2, [r7, #3]
 80114c4:	461a      	mov	r2, r3
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	4413      	add	r3, r2
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	041a      	lsls	r2, r3, #16
 80114ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d0:	4313      	orrs	r3, r2
 80114d2:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 80114d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d6:	2264      	movs	r2, #100	@ 0x64
 80114d8:	fb02 f303 	mul.w	r3, r2, r3
 80114dc:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 80114de:	2300      	movs	r3, #0
 80114e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80114e2:	78fb      	ldrb	r3, [r7, #3]
 80114e4:	1c5a      	adds	r2, r3, #1
 80114e6:	70fa      	strb	r2, [r7, #3]
 80114e8:	461a      	mov	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4413      	add	r3, r2
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	b25b      	sxtb	r3, r3
 80114f2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80114f6:	4b86      	ldr	r3, [pc, #536]	@ (8011710 <ProcessMacCommands+0x6b8>)
 80114f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80114fc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8011500:	4611      	mov	r1, r2
 8011502:	4618      	mov	r0, r3
 8011504:	f005 f9c1 	bl	801688a <RegionNewChannelReq>
 8011508:	4603      	mov	r3, r0
 801150a:	b2db      	uxtb	r3, r3
 801150c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8011510:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011514:	b25b      	sxtb	r3, r3
 8011516:	2b00      	cmp	r3, #0
 8011518:	f2c0 8273 	blt.w	8011a02 <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 801151c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011520:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011524:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011528:	2201      	movs	r2, #1
 801152a:	4619      	mov	r1, r3
 801152c:	2007      	movs	r0, #7
 801152e:	f003 fb1b 	bl	8014b68 <LoRaMacCommandsAddCmd>
                }
                break;
 8011532:	e266      	b.n	8011a02 <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011534:	78fb      	ldrb	r3, [r7, #3]
 8011536:	1c5a      	adds	r2, r3, #1
 8011538:	70fa      	strb	r2, [r7, #3]
 801153a:	461a      	mov	r2, r3
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4413      	add	r3, r2
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	f003 030f 	and.w	r3, r3, #15
 8011546:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 801154a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801154e:	2b00      	cmp	r3, #0
 8011550:	d104      	bne.n	801155c <ProcessMacCommands+0x504>
                {
                    delay++;
 8011552:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011556:	3301      	adds	r3, #1
 8011558:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 801155c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011560:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011564:	fb02 f303 	mul.w	r3, r2, r3
 8011568:	461a      	mov	r2, r3
 801156a:	4b69      	ldr	r3, [pc, #420]	@ (8011710 <ProcessMacCommands+0x6b8>)
 801156c:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801156e:	4b68      	ldr	r3, [pc, #416]	@ (8011710 <ProcessMacCommands+0x6b8>)
 8011570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011572:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8011576:	4a66      	ldr	r2, [pc, #408]	@ (8011710 <ProcessMacCommands+0x6b8>)
 8011578:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801157a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801157e:	2200      	movs	r2, #0
 8011580:	4619      	mov	r1, r3
 8011582:	2008      	movs	r0, #8
 8011584:	f003 faf0 	bl	8014b68 <LoRaMacCommandsAddCmd>
                break;
 8011588:	e244      	b.n	8011a14 <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801158a:	78fb      	ldrb	r3, [r7, #3]
 801158c:	1c5a      	adds	r2, r3, #1
 801158e:	70fa      	strb	r2, [r7, #3]
 8011590:	461a      	mov	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	4413      	add	r3, r2
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 801159c:	2300      	movs	r3, #0
 801159e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80115a2:	2300      	movs	r3, #0
 80115a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80115a8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80115ac:	f003 0320 	and.w	r3, r3, #32
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80115b4:	2301      	movs	r3, #1
 80115b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80115ba:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80115be:	f003 0310 	and.w	r3, r3, #16
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d002      	beq.n	80115cc <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80115c6:	2301      	movs	r3, #1
 80115c8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80115cc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80115d0:	f003 030f 	and.w	r3, r3, #15
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80115da:	4b4d      	ldr	r3, [pc, #308]	@ (8011710 <ProcessMacCommands+0x6b8>)
 80115dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115e0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80115e4:	4611      	mov	r1, r2
 80115e6:	4618      	mov	r0, r3
 80115e8:	f005 f962 	bl	80168b0 <RegionTxParamSetupReq>
 80115ec:	4603      	mov	r3, r0
 80115ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f2:	f000 8208 	beq.w	8011a06 <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80115f6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80115fa:	4b45      	ldr	r3, [pc, #276]	@ (8011710 <ProcessMacCommands+0x6b8>)
 80115fc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011600:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8011604:	4b42      	ldr	r3, [pc, #264]	@ (8011710 <ProcessMacCommands+0x6b8>)
 8011606:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801160a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801160e:	461a      	mov	r2, r3
 8011610:	4b40      	ldr	r3, [pc, #256]	@ (8011714 <ProcessMacCommands+0x6bc>)
 8011612:	5c9b      	ldrb	r3, [r3, r2]
 8011614:	4618      	mov	r0, r3
 8011616:	f7ef fb3b 	bl	8000c90 <__aeabi_ui2f>
 801161a:	4603      	mov	r3, r0
 801161c:	4a3c      	ldr	r2, [pc, #240]	@ (8011710 <ProcessMacCommands+0x6b8>)
 801161e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011622:	2302      	movs	r3, #2
 8011624:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011628:	4b39      	ldr	r3, [pc, #228]	@ (8011710 <ProcessMacCommands+0x6b8>)
 801162a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801162e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011632:	4b37      	ldr	r3, [pc, #220]	@ (8011710 <ProcessMacCommands+0x6b8>)
 8011634:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011638:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801163c:	4611      	mov	r1, r2
 801163e:	4618      	mov	r0, r3
 8011640:	f005 f839 	bl	80166b6 <RegionGetPhyParam>
 8011644:	4603      	mov	r3, r0
 8011646:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801164a:	b25a      	sxtb	r2, r3
 801164c:	4b30      	ldr	r3, [pc, #192]	@ (8011710 <ProcessMacCommands+0x6b8>)
 801164e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011652:	4293      	cmp	r3, r2
 8011654:	bfb8      	it	lt
 8011656:	4613      	movlt	r3, r2
 8011658:	b25a      	sxtb	r2, r3
 801165a:	4b2d      	ldr	r3, [pc, #180]	@ (8011710 <ProcessMacCommands+0x6b8>)
 801165c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011660:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011664:	2200      	movs	r2, #0
 8011666:	4619      	mov	r1, r3
 8011668:	2009      	movs	r0, #9
 801166a:	f003 fa7d 	bl	8014b68 <LoRaMacCommandsAddCmd>
                }
                break;
 801166e:	e1ca      	b.n	8011a06 <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011670:	2303      	movs	r3, #3
 8011672:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011676:	78fb      	ldrb	r3, [r7, #3]
 8011678:	1c5a      	adds	r2, r3, #1
 801167a:	70fa      	strb	r2, [r7, #3]
 801167c:	461a      	mov	r2, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4413      	add	r3, r2
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011688:	78fb      	ldrb	r3, [r7, #3]
 801168a:	1c5a      	adds	r2, r3, #1
 801168c:	70fa      	strb	r2, [r7, #3]
 801168e:	461a      	mov	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4413      	add	r3, r2
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011698:	78fb      	ldrb	r3, [r7, #3]
 801169a:	1c5a      	adds	r2, r3, #1
 801169c:	70fa      	strb	r2, [r7, #3]
 801169e:	461a      	mov	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	4413      	add	r3, r2
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	021a      	lsls	r2, r3, #8
 80116a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116aa:	4313      	orrs	r3, r2
 80116ac:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80116ae:	78fb      	ldrb	r3, [r7, #3]
 80116b0:	1c5a      	adds	r2, r3, #1
 80116b2:	70fa      	strb	r2, [r7, #3]
 80116b4:	461a      	mov	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4413      	add	r3, r2
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	041a      	lsls	r2, r3, #16
 80116be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c0:	4313      	orrs	r3, r2
 80116c2:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80116c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c6:	2264      	movs	r2, #100	@ 0x64
 80116c8:	fb02 f303 	mul.w	r3, r2, r3
 80116cc:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80116ce:	4b10      	ldr	r3, [pc, #64]	@ (8011710 <ProcessMacCommands+0x6b8>)
 80116d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116d4:	f107 0220 	add.w	r2, r7, #32
 80116d8:	4611      	mov	r1, r2
 80116da:	4618      	mov	r0, r3
 80116dc:	f005 f8fb 	bl	80168d6 <RegionDlChannelReq>
 80116e0:	4603      	mov	r3, r0
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80116e8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80116ec:	b25b      	sxtb	r3, r3
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f2c0 818b 	blt.w	8011a0a <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 80116f4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80116f8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80116fc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011700:	2201      	movs	r2, #1
 8011702:	4619      	mov	r1, r3
 8011704:	200a      	movs	r0, #10
 8011706:	f003 fa2f 	bl	8014b68 <LoRaMacCommandsAddCmd>
                }
                break;
 801170a:	e17e      	b.n	8011a0a <ProcessMacCommands+0x9b2>
 801170c:	200006e0 	.word	0x200006e0
 8011710:	20000c14 	.word	0x20000c14
 8011714:	0801e5cc 	.word	0x0801e5cc
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011718:	2009      	movs	r0, #9
 801171a:	f003 fd5d 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	f000 8084 	beq.w	801182e <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011726:	2109      	movs	r1, #9
 8011728:	2000      	movs	r0, #0
 801172a:	f003 fcc9 	bl	80150c0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801172e:	f107 0318 	add.w	r3, r7, #24
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011738:	f107 0310 	add.w	r3, r7, #16
 801173c:	2200      	movs	r2, #0
 801173e:	601a      	str	r2, [r3, #0]
 8011740:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011742:	f107 0308 	add.w	r3, r7, #8
 8011746:	2200      	movs	r2, #0
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801174c:	78fb      	ldrb	r3, [r7, #3]
 801174e:	1c5a      	adds	r2, r3, #1
 8011750:	70fa      	strb	r2, [r7, #3]
 8011752:	461a      	mov	r2, r3
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	4413      	add	r3, r2
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 801175c:	78fb      	ldrb	r3, [r7, #3]
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	70fa      	strb	r2, [r7, #3]
 8011762:	461a      	mov	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	4413      	add	r3, r2
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	021a      	lsls	r2, r3, #8
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	4313      	orrs	r3, r2
 8011770:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011772:	78fb      	ldrb	r3, [r7, #3]
 8011774:	1c5a      	adds	r2, r3, #1
 8011776:	70fa      	strb	r2, [r7, #3]
 8011778:	461a      	mov	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4413      	add	r3, r2
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	041a      	lsls	r2, r3, #16
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	4313      	orrs	r3, r2
 8011786:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011788:	78fb      	ldrb	r3, [r7, #3]
 801178a:	1c5a      	adds	r2, r3, #1
 801178c:	70fa      	strb	r2, [r7, #3]
 801178e:	461a      	mov	r2, r3
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	4413      	add	r3, r2
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	061a      	lsls	r2, r3, #24
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	4313      	orrs	r3, r2
 801179c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801179e:	78fb      	ldrb	r3, [r7, #3]
 80117a0:	1c5a      	adds	r2, r3, #1
 80117a2:	70fa      	strb	r2, [r7, #3]
 80117a4:	461a      	mov	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4413      	add	r3, r2
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	b21b      	sxth	r3, r3
 80117ae:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80117b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80117b4:	461a      	mov	r2, r3
 80117b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80117ba:	fb02 f303 	mul.w	r3, r2, r3
 80117be:	121b      	asrs	r3, r3, #8
 80117c0:	b21b      	sxth	r3, r3
 80117c2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80117c4:	f107 0310 	add.w	r3, r7, #16
 80117c8:	f107 0218 	add.w	r2, r7, #24
 80117cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117d0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80117d4:	693a      	ldr	r2, [r7, #16]
 80117d6:	4b96      	ldr	r3, [pc, #600]	@ (8011a30 <ProcessMacCommands+0x9d8>)
 80117d8:	4413      	add	r3, r2
 80117da:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80117dc:	f107 0308 	add.w	r3, r7, #8
 80117e0:	4618      	mov	r0, r3
 80117e2:	f00a fde1 	bl	801c3a8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80117e6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80117ea:	4b92      	ldr	r3, [pc, #584]	@ (8011a34 <ProcessMacCommands+0x9dc>)
 80117ec:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 80117f0:	9200      	str	r2, [sp, #0]
 80117f2:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 80117f6:	f107 0210 	add.w	r2, r7, #16
 80117fa:	ca06      	ldmia	r2, {r1, r2}
 80117fc:	f00a fd6d 	bl	801c2da <SysTimeSub>
 8011800:	f107 0010 	add.w	r0, r7, #16
 8011804:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801180a:	f107 0208 	add.w	r2, r7, #8
 801180e:	ca06      	ldmia	r2, {r1, r2}
 8011810:	f00a fd2a 	bl	801c268 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011814:	f107 0310 	add.w	r3, r7, #16
 8011818:	e893 0003 	ldmia.w	r3, {r0, r1}
 801181c:	f00a fd96 	bl	801c34c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011820:	f003 f840 	bl	80148a4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011824:	4b83      	ldr	r3, [pc, #524]	@ (8011a34 <ProcessMacCommands+0x9dc>)
 8011826:	2201      	movs	r2, #1
 8011828:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 801182c:	e0f2      	b.n	8011a14 <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801182e:	4b81      	ldr	r3, [pc, #516]	@ (8011a34 <ProcessMacCommands+0x9dc>)
 8011830:	2200      	movs	r2, #0
 8011832:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 8011836:	e0ed      	b.n	8011a14 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011838:	200c      	movs	r0, #12
 801183a:	f003 fccd 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 801183e:	4603      	mov	r3, r0
 8011840:	2b00      	cmp	r3, #0
 8011842:	f000 80e4 	beq.w	8011a0e <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011846:	210c      	movs	r1, #12
 8011848:	2000      	movs	r0, #0
 801184a:	f003 fc39 	bl	80150c0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801184e:	4b79      	ldr	r3, [pc, #484]	@ (8011a34 <ProcessMacCommands+0x9dc>)
 8011850:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011854:	2b04      	cmp	r3, #4
 8011856:	f000 80da 	beq.w	8011a0e <ProcessMacCommands+0x9b6>
 801185a:	4b76      	ldr	r3, [pc, #472]	@ (8011a34 <ProcessMacCommands+0x9dc>)
 801185c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011860:	2b05      	cmp	r3, #5
 8011862:	f000 80d4 	beq.w	8011a0e <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011866:	f002 fffe 	bl	8014866 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801186a:	e0d0      	b.n	8011a0e <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801186c:	2303      	movs	r3, #3
 801186e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8011872:	2300      	movs	r3, #0
 8011874:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011876:	78fb      	ldrb	r3, [r7, #3]
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	70fa      	strb	r2, [r7, #3]
 801187c:	461a      	mov	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	4413      	add	r3, r2
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011886:	78fb      	ldrb	r3, [r7, #3]
 8011888:	1c5a      	adds	r2, r3, #1
 801188a:	70fa      	strb	r2, [r7, #3]
 801188c:	461a      	mov	r2, r3
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	4413      	add	r3, r2
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	021b      	lsls	r3, r3, #8
 8011896:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011898:	4313      	orrs	r3, r2
 801189a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801189c:	78fb      	ldrb	r3, [r7, #3]
 801189e:	1c5a      	adds	r2, r3, #1
 80118a0:	70fa      	strb	r2, [r7, #3]
 80118a2:	461a      	mov	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	4413      	add	r3, r2
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	041b      	lsls	r3, r3, #16
 80118ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80118ae:	4313      	orrs	r3, r2
 80118b0:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 80118b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118b4:	2264      	movs	r2, #100	@ 0x64
 80118b6:	fb02 f303 	mul.w	r3, r2, r3
 80118ba:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 80118bc:	78fb      	ldrb	r3, [r7, #3]
 80118be:	1c5a      	adds	r2, r3, #1
 80118c0:	70fa      	strb	r2, [r7, #3]
 80118c2:	461a      	mov	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4413      	add	r3, r2
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	f003 030f 	and.w	r3, r3, #15
 80118ce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80118d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80118d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80118d8:	4618      	mov	r0, r3
 80118da:	f002 ffca 	bl	8014872 <LoRaMacClassBPingSlotChannelReq>
 80118de:	4603      	mov	r3, r0
 80118e0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 80118e4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80118e8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80118ec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80118f0:	2201      	movs	r2, #1
 80118f2:	4619      	mov	r1, r3
 80118f4:	2011      	movs	r0, #17
 80118f6:	f003 f937 	bl	8014b68 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80118fa:	e08b      	b.n	8011a14 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80118fc:	200d      	movs	r0, #13
 80118fe:	f003 fc6b 	bl	80151d8 <LoRaMacConfirmQueueIsCmdActive>
 8011902:	4603      	mov	r3, r0
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 8084 	beq.w	8011a12 <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801190a:	210d      	movs	r1, #13
 801190c:	2000      	movs	r0, #0
 801190e:	f003 fbd7 	bl	80150c0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011912:	2300      	movs	r3, #0
 8011914:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8011918:	2300      	movs	r3, #0
 801191a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801191e:	78fb      	ldrb	r3, [r7, #3]
 8011920:	1c5a      	adds	r2, r3, #1
 8011922:	70fa      	strb	r2, [r7, #3]
 8011924:	461a      	mov	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	4413      	add	r3, r2
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011930:	78fb      	ldrb	r3, [r7, #3]
 8011932:	1c5a      	adds	r2, r3, #1
 8011934:	70fa      	strb	r2, [r7, #3]
 8011936:	461a      	mov	r2, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4413      	add	r3, r2
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	021b      	lsls	r3, r3, #8
 8011940:	b21a      	sxth	r2, r3
 8011942:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8011946:	4313      	orrs	r3, r2
 8011948:	b21b      	sxth	r3, r3
 801194a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801194e:	78fb      	ldrb	r3, [r7, #3]
 8011950:	1c5a      	adds	r2, r3, #1
 8011952:	70fa      	strb	r2, [r7, #3]
 8011954:	461a      	mov	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	4413      	add	r3, r2
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011960:	4b35      	ldr	r3, [pc, #212]	@ (8011a38 <ProcessMacCommands+0x9e0>)
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8011968:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 801196c:	4618      	mov	r0, r3
 801196e:	f002 ff8c 	bl	801488a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011972:	e04e      	b.n	8011a12 <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011974:	2300      	movs	r3, #0
 8011976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801197a:	78fb      	ldrb	r3, [r7, #3]
 801197c:	1c5a      	adds	r2, r3, #1
 801197e:	70fa      	strb	r2, [r7, #3]
 8011980:	461a      	mov	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4413      	add	r3, r2
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801198c:	78fb      	ldrb	r3, [r7, #3]
 801198e:	1c5a      	adds	r2, r3, #1
 8011990:	70fa      	strb	r2, [r7, #3]
 8011992:	461a      	mov	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	4413      	add	r3, r2
 8011998:	781b      	ldrb	r3, [r3, #0]
 801199a:	021b      	lsls	r3, r3, #8
 801199c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80119a0:	4313      	orrs	r3, r2
 80119a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80119a6:	78fb      	ldrb	r3, [r7, #3]
 80119a8:	1c5a      	adds	r2, r3, #1
 80119aa:	70fa      	strb	r2, [r7, #3]
 80119ac:	461a      	mov	r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	4413      	add	r3, r2
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	041b      	lsls	r3, r3, #16
 80119b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80119ba:	4313      	orrs	r3, r2
 80119bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 80119c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80119c4:	2264      	movs	r2, #100	@ 0x64
 80119c6:	fb02 f303 	mul.w	r3, r2, r3
 80119ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80119ce:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80119d2:	f002 ff6d 	bl	80148b0 <LoRaMacClassBBeaconFreqReq>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d003      	beq.n	80119e4 <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 80119dc:	2301      	movs	r3, #1
 80119de:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80119e2:	e002      	b.n	80119ea <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80119e4:	2300      	movs	r3, #0
 80119e6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80119ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80119ee:	2201      	movs	r2, #1
 80119f0:	4619      	mov	r1, r3
 80119f2:	2013      	movs	r0, #19
 80119f4:	f003 f8b8 	bl	8014b68 <LoRaMacCommandsAddCmd>
                }
                break;
 80119f8:	e00c      	b.n	8011a14 <ProcessMacCommands+0x9bc>
                break;
 80119fa:	bf00      	nop
 80119fc:	e00a      	b.n	8011a14 <ProcessMacCommands+0x9bc>
                break;
 80119fe:	bf00      	nop
 8011a00:	e008      	b.n	8011a14 <ProcessMacCommands+0x9bc>
                break;
 8011a02:	bf00      	nop
 8011a04:	e006      	b.n	8011a14 <ProcessMacCommands+0x9bc>
                break;
 8011a06:	bf00      	nop
 8011a08:	e004      	b.n	8011a14 <ProcessMacCommands+0x9bc>
                break;
 8011a0a:	bf00      	nop
 8011a0c:	e002      	b.n	8011a14 <ProcessMacCommands+0x9bc>
                break;
 8011a0e:	bf00      	nop
 8011a10:	e000      	b.n	8011a14 <ProcessMacCommands+0x9bc>
                break;
 8011a12:	bf00      	nop
    while( macIndex < commandsSize )
 8011a14:	78fa      	ldrb	r2, [r7, #3]
 8011a16:	78bb      	ldrb	r3, [r7, #2]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	f4ff ab3f 	bcc.w	801109c <ProcessMacCommands+0x44>
 8011a1e:	e004      	b.n	8011a2a <ProcessMacCommands+0x9d2>
        return;
 8011a20:	bf00      	nop
 8011a22:	e002      	b.n	8011a2a <ProcessMacCommands+0x9d2>
            return;
 8011a24:	bf00      	nop
 8011a26:	e000      	b.n	8011a2a <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011a28:	bf00      	nop
        }
    }
}
 8011a2a:	378c      	adds	r7, #140	@ 0x8c
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd90      	pop	{r4, r7, pc}
 8011a30:	12d53d80 	.word	0x12d53d80
 8011a34:	200006e0 	.word	0x200006e0
 8011a38:	20001824 	.word	0x20001824

08011a3c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b08e      	sub	sp, #56	@ 0x38
 8011a40:	af02      	add	r7, sp, #8
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	607a      	str	r2, [r7, #4]
 8011a46:	461a      	mov	r2, r3
 8011a48:	460b      	mov	r3, r1
 8011a4a:	72fb      	strb	r3, [r7, #11]
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a50:	2303      	movs	r3, #3
 8011a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011a56:	4b66      	ldr	r3, [pc, #408]	@ (8011bf0 <Send+0x1b4>)
 8011a58:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8011a5c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011a60:	4b63      	ldr	r3, [pc, #396]	@ (8011bf0 <Send+0x1b4>)
 8011a62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011a66:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011a6a:	4b61      	ldr	r3, [pc, #388]	@ (8011bf0 <Send+0x1b4>)
 8011a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011a70:	4b5f      	ldr	r3, [pc, #380]	@ (8011bf0 <Send+0x1b4>)
 8011a72:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d101      	bne.n	8011a7e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011a7a:	2307      	movs	r3, #7
 8011a7c:	e0b4      	b.n	8011be8 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8011bf0 <Send+0x1b4>)
 8011a80:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d102      	bne.n	8011a8e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011a88:	4b59      	ldr	r3, [pc, #356]	@ (8011bf0 <Send+0x1b4>)
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011a94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011a98:	f36f 0303 	bfc	r3, #0, #4
 8011a9c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011aa0:	4b53      	ldr	r3, [pc, #332]	@ (8011bf0 <Send+0x1b4>)
 8011aa2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8011aa6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011aaa:	f362 13c7 	bfi	r3, r2, #7, #1
 8011aae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8011bf0 <Send+0x1b4>)
 8011ab4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	d106      	bne.n	8011aca <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011abc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011ac0:	f043 0310 	orr.w	r3, r3, #16
 8011ac4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8011ac8:	e005      	b.n	8011ad6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011aca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011ace:	f36f 1304 	bfc	r3, #4, #1
 8011ad2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8011ad6:	4b46      	ldr	r3, [pc, #280]	@ (8011bf0 <Send+0x1b4>)
 8011ad8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d005      	beq.n	8011aec <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011ae4:	f043 0320 	orr.w	r3, r3, #32
 8011ae8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8011aec:	2301      	movs	r3, #1
 8011aee:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011af0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011af4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	bf14      	ite	ne
 8011afe:	2301      	movne	r3, #1
 8011b00:	2300      	moveq	r3, #0
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011b06:	4b3a      	ldr	r3, [pc, #232]	@ (8011bf0 <Send+0x1b4>)
 8011b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b0a:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011b0c:	4b38      	ldr	r3, [pc, #224]	@ (8011bf0 <Send+0x1b4>)
 8011b0e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8011b12:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011b14:	4b36      	ldr	r3, [pc, #216]	@ (8011bf0 <Send+0x1b4>)
 8011b16:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8011b1a:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011b1c:	4b34      	ldr	r3, [pc, #208]	@ (8011bf0 <Send+0x1b4>)
 8011b1e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011b22:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011b26:	4b32      	ldr	r3, [pc, #200]	@ (8011bf0 <Send+0x1b4>)
 8011b28:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011b2c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b30:	4b2f      	ldr	r3, [pc, #188]	@ (8011bf0 <Send+0x1b4>)
 8011b32:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8011bf0 <Send+0x1b4>)
 8011b3c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b40:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011b44:	4b2a      	ldr	r3, [pc, #168]	@ (8011bf0 <Send+0x1b4>)
 8011b46:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011b4a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011b4e:	f107 0014 	add.w	r0, r7, #20
 8011b52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011b56:	9300      	str	r3, [sp, #0]
 8011b58:	4b26      	ldr	r3, [pc, #152]	@ (8011bf4 <Send+0x1b8>)
 8011b5a:	4a27      	ldr	r2, [pc, #156]	@ (8011bf8 <Send+0x1bc>)
 8011b5c:	4927      	ldr	r1, [pc, #156]	@ (8011bfc <Send+0x1c0>)
 8011b5e:	f002 fd21 	bl	80145a4 <LoRaMacAdrCalcNext>
 8011b62:	4603      	mov	r3, r0
 8011b64:	461a      	mov	r2, r3
 8011b66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011b6a:	f362 1386 	bfi	r3, r2, #6, #1
 8011b6e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011b72:	7afa      	ldrb	r2, [r7, #11]
 8011b74:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011b78:	893b      	ldrh	r3, [r7, #8]
 8011b7a:	9300      	str	r3, [sp, #0]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	68f8      	ldr	r0, [r7, #12]
 8011b80:	f000 fc72 	bl	8012468 <PrepareFrame>
 8011b84:	4603      	mov	r3, r0
 8011b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d003      	beq.n	8011b9a <Send+0x15e>
 8011b92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b96:	2b0a      	cmp	r3, #10
 8011b98:	d107      	bne.n	8011baa <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011b9a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f000 f962 	bl	8011e68 <ScheduleTx>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011baa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d00a      	beq.n	8011bc8 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8011bf0 <Send+0x1b4>)
 8011bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011bb8:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8011bf0 <Send+0x1b4>)
 8011bbe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011bc2:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8011bc6:	e00d      	b.n	8011be4 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011bc8:	4b09      	ldr	r3, [pc, #36]	@ (8011bf0 <Send+0x1b4>)
 8011bca:	2200      	movs	r2, #0
 8011bcc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd2:	4a07      	ldr	r2, [pc, #28]	@ (8011bf0 <Send+0x1b4>)
 8011bd4:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011bd6:	f003 f86d 	bl	8014cb4 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d001      	beq.n	8011be4 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011be0:	2313      	movs	r3, #19
 8011be2:	e001      	b.n	8011be8 <Send+0x1ac>
        }
    }
    return status;
 8011be4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3730      	adds	r7, #48	@ 0x30
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	20000c14 	.word	0x20000c14
 8011bf4:	20000c7c 	.word	0x20000c7c
 8011bf8:	20000c4c 	.word	0x20000c4c
 8011bfc:	20000c4d 	.word	0x20000c4d

08011c00 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	4603      	mov	r3, r0
 8011c08:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011c12:	2301      	movs	r3, #1
 8011c14:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011c16:	79fb      	ldrb	r3, [r7, #7]
 8011c18:	2bff      	cmp	r3, #255	@ 0xff
 8011c1a:	d11f      	bne.n	8011c5c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011c1c:	2000      	movs	r0, #0
 8011c1e:	f7ff f8e1 	bl	8010de4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011c22:	4b15      	ldr	r3, [pc, #84]	@ (8011c78 <SendReJoinReq+0x78>)
 8011c24:	2200      	movs	r2, #0
 8011c26:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011c2a:	4b13      	ldr	r3, [pc, #76]	@ (8011c78 <SendReJoinReq+0x78>)
 8011c2c:	4a13      	ldr	r2, [pc, #76]	@ (8011c7c <SendReJoinReq+0x7c>)
 8011c2e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011c32:	4b11      	ldr	r3, [pc, #68]	@ (8011c78 <SendReJoinReq+0x78>)
 8011c34:	22ff      	movs	r2, #255	@ 0xff
 8011c36:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011c3a:	7b3b      	ldrb	r3, [r7, #12]
 8011c3c:	f36f 1347 	bfc	r3, #5, #3
 8011c40:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011c42:	7b3a      	ldrb	r2, [r7, #12]
 8011c44:	4b0c      	ldr	r3, [pc, #48]	@ (8011c78 <SendReJoinReq+0x78>)
 8011c46:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8011c4a:	480d      	ldr	r0, [pc, #52]	@ (8011c80 <SendReJoinReq+0x80>)
 8011c4c:	f7fb fefc 	bl	800da48 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8011c50:	480c      	ldr	r0, [pc, #48]	@ (8011c84 <SendReJoinReq+0x84>)
 8011c52:	f7fb fec9 	bl	800d9e8 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011c56:	2300      	movs	r3, #0
 8011c58:	73fb      	strb	r3, [r7, #15]

            break;
 8011c5a:	e002      	b.n	8011c62 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011c5c:	2302      	movs	r3, #2
 8011c5e:	73bb      	strb	r3, [r7, #14]
            break;
 8011c60:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011c62:	7bfb      	ldrb	r3, [r7, #15]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f000 f8ff 	bl	8011e68 <ScheduleTx>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	73bb      	strb	r3, [r7, #14]
    return status;
 8011c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3710      	adds	r7, #16
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	200006e0 	.word	0x200006e0
 8011c7c:	200006e2 	.word	0x200006e2
 8011c80:	200007ee 	.word	0x200007ee
 8011c84:	200007f6 	.word	0x200007f6

08011c88 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011c8c:	f002 fd9a 	bl	80147c4 <LoRaMacClassBIsBeaconExpected>
 8011c90:	4603      	mov	r3, r0
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d001      	beq.n	8011c9a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011c96:	230e      	movs	r3, #14
 8011c98:	e013      	b.n	8011cc2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8011cc8 <CheckForClassBCollision+0x40>)
 8011c9c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d10d      	bne.n	8011cc0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011ca4:	f002 fd95 	bl	80147d2 <LoRaMacClassBIsPingExpected>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d001      	beq.n	8011cb2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011cae:	230f      	movs	r3, #15
 8011cb0:	e007      	b.n	8011cc2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011cb2:	f002 fd95 	bl	80147e0 <LoRaMacClassBIsMulticastExpected>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d001      	beq.n	8011cc0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011cbc:	230f      	movs	r3, #15
 8011cbe:	e000      	b.n	8011cc2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011cc0:	2300      	movs	r3, #0
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	20000c14 	.word	0x20000c14

08011ccc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011ccc:	b590      	push	{r4, r7, lr}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011cd4:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011cda:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011cde:	4b2a      	ldr	r3, [pc, #168]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011ce0:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 8011ce4:	4b28      	ldr	r3, [pc, #160]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011ce6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011cea:	4b27      	ldr	r3, [pc, #156]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011cec:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011cf0:	b25b      	sxtb	r3, r3
 8011cf2:	f004 fe35 	bl	8016960 <RegionApplyDrOffset>
 8011cf6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011cf8:	b259      	sxtb	r1, r3
 8011cfa:	4b23      	ldr	r3, [pc, #140]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011cfc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011d00:	4b21      	ldr	r3, [pc, #132]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d04:	4821      	ldr	r0, [pc, #132]	@ (8011d8c <ComputeRxWindowParameters+0xc0>)
 8011d06:	9000      	str	r0, [sp, #0]
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f004 fd4b 	bl	80167a4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d10:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011d14:	4b1c      	ldr	r3, [pc, #112]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d16:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011d1a:	b259      	sxtb	r1, r3
 8011d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d1e:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011d22:	4b19      	ldr	r3, [pc, #100]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d26:	4c1a      	ldr	r4, [pc, #104]	@ (8011d90 <ComputeRxWindowParameters+0xc4>)
 8011d28:	9400      	str	r4, [sp, #0]
 8011d2a:	f004 fd3b 	bl	80167a4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011d2e:	4b16      	ldr	r3, [pc, #88]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d32:	4a18      	ldr	r2, [pc, #96]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d34:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011d38:	4413      	add	r3, r2
 8011d3a:	4a16      	ldr	r2, [pc, #88]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d3c:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011d40:	4b11      	ldr	r3, [pc, #68]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011d44:	4a13      	ldr	r2, [pc, #76]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d46:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011d4a:	4413      	add	r3, r2
 8011d4c:	4a11      	ldr	r2, [pc, #68]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d4e:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8011d52:	4b10      	ldr	r3, [pc, #64]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d54:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011d58:	2b04      	cmp	r3, #4
 8011d5a:	d011      	beq.n	8011d80 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d60:	4a0c      	ldr	r2, [pc, #48]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d62:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011d66:	4413      	add	r3, r2
 8011d68:	4a0a      	ldr	r2, [pc, #40]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d6a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011d6e:	4b06      	ldr	r3, [pc, #24]	@ (8011d88 <ComputeRxWindowParameters+0xbc>)
 8011d70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d72:	4a08      	ldr	r2, [pc, #32]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d74:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011d78:	4413      	add	r3, r2
 8011d7a:	4a06      	ldr	r2, [pc, #24]	@ (8011d94 <ComputeRxWindowParameters+0xc8>)
 8011d7c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8011d80:	bf00      	nop
 8011d82:	3704      	adds	r7, #4
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd90      	pop	{r4, r7, pc}
 8011d88:	20000c14 	.word	0x20000c14
 8011d8c:	20000a98 	.word	0x20000a98
 8011d90:	20000ab0 	.word	0x20000ab0
 8011d94:	200006e0 	.word	0x200006e0

08011d98 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011da2:	4b13      	ldr	r3, [pc, #76]	@ (8011df0 <VerifyTxFrame+0x58>)
 8011da4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d01b      	beq.n	8011de4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011dac:	1d3b      	adds	r3, r7, #4
 8011dae:	4618      	mov	r0, r3
 8011db0:	f002 ffd0 	bl	8014d54 <LoRaMacCommandsGetSizeSerializedCmds>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d001      	beq.n	8011dbe <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011dba:	2313      	movs	r3, #19
 8011dbc:	e013      	b.n	8011de6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8011df4 <VerifyTxFrame+0x5c>)
 8011dc0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8011df0 <VerifyTxFrame+0x58>)
 8011dc6:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	b2d2      	uxtb	r2, r2
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7ff f91a 	bl	8011008 <ValidatePayloadLength>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	f083 0301 	eor.w	r3, r3, #1
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d001      	beq.n	8011de4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011de0:	2308      	movs	r3, #8
 8011de2:	e000      	b.n	8011de6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011de4:	2300      	movs	r3, #0
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	20000c14 	.word	0x20000c14
 8011df4:	200006e0 	.word	0x200006e0

08011df8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011dfe:	4b18      	ldr	r3, [pc, #96]	@ (8011e60 <SerializeTxFrame+0x68>)
 8011e00:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d002      	beq.n	8011e0e <SerializeTxFrame+0x16>
 8011e08:	2b04      	cmp	r3, #4
 8011e0a:	d011      	beq.n	8011e30 <SerializeTxFrame+0x38>
 8011e0c:	e021      	b.n	8011e52 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011e0e:	4815      	ldr	r0, [pc, #84]	@ (8011e64 <SerializeTxFrame+0x6c>)
 8011e10:	f004 faca 	bl	80163a8 <LoRaMacSerializerJoinRequest>
 8011e14:	4603      	mov	r3, r0
 8011e16:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011e18:	79fb      	ldrb	r3, [r7, #7]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e1e:	2311      	movs	r3, #17
 8011e20:	e01a      	b.n	8011e58 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011e22:	4b0f      	ldr	r3, [pc, #60]	@ (8011e60 <SerializeTxFrame+0x68>)
 8011e24:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011e28:	461a      	mov	r2, r3
 8011e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011e60 <SerializeTxFrame+0x68>)
 8011e2c:	801a      	strh	r2, [r3, #0]
            break;
 8011e2e:	e012      	b.n	8011e56 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011e30:	480c      	ldr	r0, [pc, #48]	@ (8011e64 <SerializeTxFrame+0x6c>)
 8011e32:	f004 fb3b 	bl	80164ac <LoRaMacSerializerData>
 8011e36:	4603      	mov	r3, r0
 8011e38:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011e3a:	79fb      	ldrb	r3, [r7, #7]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d001      	beq.n	8011e44 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e40:	2311      	movs	r3, #17
 8011e42:	e009      	b.n	8011e58 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011e44:	4b06      	ldr	r3, [pc, #24]	@ (8011e60 <SerializeTxFrame+0x68>)
 8011e46:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	4b04      	ldr	r3, [pc, #16]	@ (8011e60 <SerializeTxFrame+0x68>)
 8011e4e:	801a      	strh	r2, [r3, #0]
            break;
 8011e50:	e001      	b.n	8011e56 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e52:	2303      	movs	r3, #3
 8011e54:	e000      	b.n	8011e58 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011e56:	2300      	movs	r3, #0
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	200006e0 	.word	0x200006e0
 8011e64:	200007e8 	.word	0x200007e8

08011e68 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b090      	sub	sp, #64	@ 0x40
 8011e6c:	af02      	add	r7, sp, #8
 8011e6e:	4603      	mov	r3, r0
 8011e70:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e72:	2303      	movs	r3, #3
 8011e74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011e78:	f7ff ff06 	bl	8011c88 <CheckForClassBCollision>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d002      	beq.n	8011e90 <ScheduleTx+0x28>
    {
        return status;
 8011e8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e8e:	e092      	b.n	8011fb6 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8011e90:	f000 f8f8 	bl	8012084 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011e94:	f7ff ffb0 	bl	8011df8 <SerializeTxFrame>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d002      	beq.n	8011eac <ScheduleTx+0x44>
    {
        return status;
 8011ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011eaa:	e084      	b.n	8011fb6 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011eac:	4b44      	ldr	r3, [pc, #272]	@ (8011fc0 <ScheduleTx+0x158>)
 8011eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eb0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011eb2:	4b43      	ldr	r3, [pc, #268]	@ (8011fc0 <ScheduleTx+0x158>)
 8011eb4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011eb8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8011eba:	4b41      	ldr	r3, [pc, #260]	@ (8011fc0 <ScheduleTx+0x158>)
 8011ebc:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011ec0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011ec2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f00a faa6 	bl	801c418 <SysTimeGetMcuTime>
 8011ecc:	4638      	mov	r0, r7
 8011ece:	4b3c      	ldr	r3, [pc, #240]	@ (8011fc0 <ScheduleTx+0x158>)
 8011ed0:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8011ed4:	9200      	str	r2, [sp, #0]
 8011ed6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8011eda:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011ede:	ca06      	ldmia	r2, {r1, r2}
 8011ee0:	f00a f9fb 	bl	801c2da <SysTimeSub>
 8011ee4:	f107 0320 	add.w	r3, r7, #32
 8011ee8:	463a      	mov	r2, r7
 8011eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011eee:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011ef2:	4b33      	ldr	r3, [pc, #204]	@ (8011fc0 <ScheduleTx+0x158>)
 8011ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ef6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 8011efe:	2301      	movs	r3, #1
 8011f00:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011f02:	4b30      	ldr	r3, [pc, #192]	@ (8011fc4 <ScheduleTx+0x15c>)
 8011f04:	881b      	ldrh	r3, [r3, #0]
 8011f06:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011f08:	4b2d      	ldr	r3, [pc, #180]	@ (8011fc0 <ScheduleTx+0x158>)
 8011f0a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d104      	bne.n	8011f1c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011f12:	2301      	movs	r3, #1
 8011f14:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011f1c:	4b28      	ldr	r3, [pc, #160]	@ (8011fc0 <ScheduleTx+0x158>)
 8011f1e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011f22:	f107 0114 	add.w	r1, r7, #20
 8011f26:	4b28      	ldr	r3, [pc, #160]	@ (8011fc8 <ScheduleTx+0x160>)
 8011f28:	9300      	str	r3, [sp, #0]
 8011f2a:	4b28      	ldr	r3, [pc, #160]	@ (8011fcc <ScheduleTx+0x164>)
 8011f2c:	4a28      	ldr	r2, [pc, #160]	@ (8011fd0 <ScheduleTx+0x168>)
 8011f2e:	f004 fcff 	bl	8016930 <RegionNextChannel>
 8011f32:	4603      	mov	r3, r0
 8011f34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8011f38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d025      	beq.n	8011f8c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8011f40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f44:	2b0b      	cmp	r3, #11
 8011f46:	d11e      	bne.n	8011f86 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011f48:	4b1e      	ldr	r3, [pc, #120]	@ (8011fc4 <ScheduleTx+0x15c>)
 8011f4a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d01c      	beq.n	8011f8c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8011f52:	7bfb      	ldrb	r3, [r7, #15]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d013      	beq.n	8011f80 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011f58:	4b1a      	ldr	r3, [pc, #104]	@ (8011fc4 <ScheduleTx+0x15c>)
 8011f5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011f5e:	f043 0320 	orr.w	r3, r3, #32
 8011f62:	4a18      	ldr	r2, [pc, #96]	@ (8011fc4 <ScheduleTx+0x15c>)
 8011f64:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011f68:	4b16      	ldr	r3, [pc, #88]	@ (8011fc4 <ScheduleTx+0x15c>)
 8011f6a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8011f6e:	4619      	mov	r1, r3
 8011f70:	4818      	ldr	r0, [pc, #96]	@ (8011fd4 <ScheduleTx+0x16c>)
 8011f72:	f00a ff89 	bl	801ce88 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8011f76:	4817      	ldr	r0, [pc, #92]	@ (8011fd4 <ScheduleTx+0x16c>)
 8011f78:	f00a fea8 	bl	801cccc <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	e01a      	b.n	8011fb6 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8011f80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f84:	e017      	b.n	8011fb6 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011f86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f8a:	e014      	b.n	8011fb6 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011f8c:	f7ff fe9e 	bl	8011ccc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011f90:	f7ff ff02 	bl	8011d98 <VerifyTxFrame>
 8011f94:	4603      	mov	r3, r0
 8011f96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011f9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d002      	beq.n	8011fa8 <ScheduleTx+0x140>
    {
        return status;
 8011fa2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011fa6:	e006      	b.n	8011fb6 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011fa8:	4b06      	ldr	r3, [pc, #24]	@ (8011fc4 <ScheduleTx+0x15c>)
 8011faa:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f000 fb74 	bl	801269c <SendFrameOnChannel>
 8011fb4:	4603      	mov	r3, r0
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3738      	adds	r7, #56	@ 0x38
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	20000c14 	.word	0x20000c14
 8011fc4:	200006e0 	.word	0x200006e0
 8011fc8:	20000c44 	.word	0x20000c44
 8011fcc:	20000b74 	.word	0x20000b74
 8011fd0:	20000afb 	.word	0x20000afb
 8011fd4:	20000a48 	.word	0x20000a48

08011fd8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b084      	sub	sp, #16
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	4603      	mov	r3, r0
 8011fe0:	460a      	mov	r2, r1
 8011fe2:	71fb      	strb	r3, [r7, #7]
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011fe8:	2312      	movs	r3, #18
 8011fea:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011fec:	2300      	movs	r3, #0
 8011fee:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011ff0:	4b22      	ldr	r3, [pc, #136]	@ (801207c <SecureFrame+0xa4>)
 8011ff2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d002      	beq.n	8012000 <SecureFrame+0x28>
 8011ffa:	2b04      	cmp	r3, #4
 8011ffc:	d011      	beq.n	8012022 <SecureFrame+0x4a>
 8011ffe:	e036      	b.n	801206e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012000:	481f      	ldr	r0, [pc, #124]	@ (8012080 <SecureFrame+0xa8>)
 8012002:	f003 fda1 	bl	8015b48 <LoRaMacCryptoPrepareJoinRequest>
 8012006:	4603      	mov	r3, r0
 8012008:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801200a:	7bfb      	ldrb	r3, [r7, #15]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d001      	beq.n	8012014 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012010:	2311      	movs	r3, #17
 8012012:	e02f      	b.n	8012074 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012014:	4b19      	ldr	r3, [pc, #100]	@ (801207c <SecureFrame+0xa4>)
 8012016:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801201a:	461a      	mov	r2, r3
 801201c:	4b17      	ldr	r3, [pc, #92]	@ (801207c <SecureFrame+0xa4>)
 801201e:	801a      	strh	r2, [r3, #0]
            break;
 8012020:	e027      	b.n	8012072 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012022:	f107 0308 	add.w	r3, r7, #8
 8012026:	4618      	mov	r0, r3
 8012028:	f003 fcc8 	bl	80159bc <LoRaMacCryptoGetFCntUp>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012032:	2312      	movs	r3, #18
 8012034:	e01e      	b.n	8012074 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8012036:	4b11      	ldr	r3, [pc, #68]	@ (801207c <SecureFrame+0xa4>)
 8012038:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801203c:	2b00      	cmp	r3, #0
 801203e:	d002      	beq.n	8012046 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	3b01      	subs	r3, #1
 8012044:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012046:	68b8      	ldr	r0, [r7, #8]
 8012048:	79ba      	ldrb	r2, [r7, #6]
 801204a:	79f9      	ldrb	r1, [r7, #7]
 801204c:	4b0c      	ldr	r3, [pc, #48]	@ (8012080 <SecureFrame+0xa8>)
 801204e:	f003 fea3 	bl	8015d98 <LoRaMacCryptoSecureMessage>
 8012052:	4603      	mov	r3, r0
 8012054:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012056:	7bfb      	ldrb	r3, [r7, #15]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d001      	beq.n	8012060 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801205c:	2311      	movs	r3, #17
 801205e:	e009      	b.n	8012074 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012060:	4b06      	ldr	r3, [pc, #24]	@ (801207c <SecureFrame+0xa4>)
 8012062:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8012066:	461a      	mov	r2, r3
 8012068:	4b04      	ldr	r3, [pc, #16]	@ (801207c <SecureFrame+0xa4>)
 801206a:	801a      	strh	r2, [r3, #0]
            break;
 801206c:	e001      	b.n	8012072 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801206e:	2303      	movs	r3, #3
 8012070:	e000      	b.n	8012074 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8012072:	2300      	movs	r3, #0
}
 8012074:	4618      	mov	r0, r3
 8012076:	3710      	adds	r7, #16
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	200006e0 	.word	0x200006e0
 8012080:	200007e8 	.word	0x200007e8

08012084 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012084:	b480      	push	{r7}
 8012086:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012088:	4b09      	ldr	r3, [pc, #36]	@ (80120b0 <CalculateBackOff+0x2c>)
 801208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801208c:	2b00      	cmp	r3, #0
 801208e:	d10a      	bne.n	80120a6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012090:	4b07      	ldr	r3, [pc, #28]	@ (80120b0 <CalculateBackOff+0x2c>)
 8012092:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8012096:	3b01      	subs	r3, #1
 8012098:	4a06      	ldr	r2, [pc, #24]	@ (80120b4 <CalculateBackOff+0x30>)
 801209a:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 801209e:	fb02 f303 	mul.w	r3, r2, r3
 80120a2:	4a03      	ldr	r2, [pc, #12]	@ (80120b0 <CalculateBackOff+0x2c>)
 80120a4:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 80120a6:	bf00      	nop
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bc80      	pop	{r7}
 80120ac:	4770      	bx	lr
 80120ae:	bf00      	nop
 80120b0:	20000c14 	.word	0x20000c14
 80120b4:	200006e0 	.word	0x200006e0

080120b8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	4603      	mov	r3, r0
 80120c0:	7139      	strb	r1, [r7, #4]
 80120c2:	71fb      	strb	r3, [r7, #7]
 80120c4:	4613      	mov	r3, r2
 80120c6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80120c8:	79fb      	ldrb	r3, [r7, #7]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d002      	beq.n	80120d4 <RemoveMacCommands+0x1c>
 80120ce:	79fb      	ldrb	r3, [r7, #7]
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d10d      	bne.n	80120f0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80120d4:	79bb      	ldrb	r3, [r7, #6]
 80120d6:	2b01      	cmp	r3, #1
 80120d8:	d108      	bne.n	80120ec <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80120da:	793b      	ldrb	r3, [r7, #4]
 80120dc:	f003 0320 	and.w	r3, r3, #32
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d004      	beq.n	80120f0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80120e6:	f002 fe09 	bl	8014cfc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80120ea:	e001      	b.n	80120f0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80120ec:	f002 fe06 	bl	8014cfc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80120f0:	bf00      	nop
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80120f8:	b5b0      	push	{r4, r5, r7, lr}
 80120fa:	b092      	sub	sp, #72	@ 0x48
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	4603      	mov	r3, r0
 8012100:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8012102:	79fb      	ldrb	r3, [r7, #7]
 8012104:	f083 0301 	eor.w	r3, r3, #1
 8012108:	b2db      	uxtb	r3, r3
 801210a:	2b00      	cmp	r3, #0
 801210c:	d003      	beq.n	8012116 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801210e:	4b88      	ldr	r3, [pc, #544]	@ (8012330 <ResetMacParameters+0x238>)
 8012110:	2200      	movs	r2, #0
 8012112:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8012116:	4b86      	ldr	r3, [pc, #536]	@ (8012330 <ResetMacParameters+0x238>)
 8012118:	2200      	movs	r2, #0
 801211a:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801211c:	4b85      	ldr	r3, [pc, #532]	@ (8012334 <ResetMacParameters+0x23c>)
 801211e:	2200      	movs	r2, #0
 8012120:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012124:	4b83      	ldr	r3, [pc, #524]	@ (8012334 <ResetMacParameters+0x23c>)
 8012126:	2200      	movs	r2, #0
 8012128:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 801212c:	4b81      	ldr	r3, [pc, #516]	@ (8012334 <ResetMacParameters+0x23c>)
 801212e:	2200      	movs	r2, #0
 8012130:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8012134:	4b7e      	ldr	r3, [pc, #504]	@ (8012330 <ResetMacParameters+0x238>)
 8012136:	2200      	movs	r2, #0
 8012138:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801213c:	4b7c      	ldr	r3, [pc, #496]	@ (8012330 <ResetMacParameters+0x238>)
 801213e:	2201      	movs	r2, #1
 8012140:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012144:	4b7a      	ldr	r3, [pc, #488]	@ (8012330 <ResetMacParameters+0x238>)
 8012146:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801214a:	4b79      	ldr	r3, [pc, #484]	@ (8012330 <ResetMacParameters+0x238>)
 801214c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012150:	4b77      	ldr	r3, [pc, #476]	@ (8012330 <ResetMacParameters+0x238>)
 8012152:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8012156:	4b76      	ldr	r3, [pc, #472]	@ (8012330 <ResetMacParameters+0x238>)
 8012158:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801215c:	4b74      	ldr	r3, [pc, #464]	@ (8012330 <ResetMacParameters+0x238>)
 801215e:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8012162:	4b73      	ldr	r3, [pc, #460]	@ (8012330 <ResetMacParameters+0x238>)
 8012164:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012168:	4b71      	ldr	r3, [pc, #452]	@ (8012330 <ResetMacParameters+0x238>)
 801216a:	4a71      	ldr	r2, [pc, #452]	@ (8012330 <ResetMacParameters+0x238>)
 801216c:	336c      	adds	r3, #108	@ 0x6c
 801216e:	32b4      	adds	r2, #180	@ 0xb4
 8012170:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012174:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012178:	4b6d      	ldr	r3, [pc, #436]	@ (8012330 <ResetMacParameters+0x238>)
 801217a:	4a6d      	ldr	r2, [pc, #436]	@ (8012330 <ResetMacParameters+0x238>)
 801217c:	3374      	adds	r3, #116	@ 0x74
 801217e:	32bc      	adds	r2, #188	@ 0xbc
 8012180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012184:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8012188:	4b69      	ldr	r3, [pc, #420]	@ (8012330 <ResetMacParameters+0x238>)
 801218a:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 801218e:	4b68      	ldr	r3, [pc, #416]	@ (8012330 <ResetMacParameters+0x238>)
 8012190:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012194:	4b66      	ldr	r3, [pc, #408]	@ (8012330 <ResetMacParameters+0x238>)
 8012196:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 801219a:	4b65      	ldr	r3, [pc, #404]	@ (8012330 <ResetMacParameters+0x238>)
 801219c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80121a0:	4b63      	ldr	r3, [pc, #396]	@ (8012330 <ResetMacParameters+0x238>)
 80121a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80121a6:	4a62      	ldr	r2, [pc, #392]	@ (8012330 <ResetMacParameters+0x238>)
 80121a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80121ac:	4b60      	ldr	r3, [pc, #384]	@ (8012330 <ResetMacParameters+0x238>)
 80121ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80121b2:	4a5f      	ldr	r2, [pc, #380]	@ (8012330 <ResetMacParameters+0x238>)
 80121b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80121b8:	4b5d      	ldr	r3, [pc, #372]	@ (8012330 <ResetMacParameters+0x238>)
 80121ba:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 80121be:	4b5c      	ldr	r3, [pc, #368]	@ (8012330 <ResetMacParameters+0x238>)
 80121c0:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80121c4:	4b5a      	ldr	r3, [pc, #360]	@ (8012330 <ResetMacParameters+0x238>)
 80121c6:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 80121ca:	4b59      	ldr	r3, [pc, #356]	@ (8012330 <ResetMacParameters+0x238>)
 80121cc:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 80121d0:	4b58      	ldr	r3, [pc, #352]	@ (8012334 <ResetMacParameters+0x23c>)
 80121d2:	2200      	movs	r2, #0
 80121d4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 80121d8:	4b55      	ldr	r3, [pc, #340]	@ (8012330 <ResetMacParameters+0x238>)
 80121da:	2200      	movs	r2, #0
 80121dc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80121e0:	4b53      	ldr	r3, [pc, #332]	@ (8012330 <ResetMacParameters+0x238>)
 80121e2:	2200      	movs	r2, #0
 80121e4:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 80121e8:	4b51      	ldr	r3, [pc, #324]	@ (8012330 <ResetMacParameters+0x238>)
 80121ea:	2200      	movs	r2, #0
 80121ec:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80121f0:	4b4f      	ldr	r3, [pc, #316]	@ (8012330 <ResetMacParameters+0x238>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80121f8:	4b4d      	ldr	r3, [pc, #308]	@ (8012330 <ResetMacParameters+0x238>)
 80121fa:	2200      	movs	r2, #0
 80121fc:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8012200:	4b4b      	ldr	r3, [pc, #300]	@ (8012330 <ResetMacParameters+0x238>)
 8012202:	2200      	movs	r2, #0
 8012204:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8012208:	4b49      	ldr	r3, [pc, #292]	@ (8012330 <ResetMacParameters+0x238>)
 801220a:	2200      	movs	r2, #0
 801220c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8012210:	4b47      	ldr	r3, [pc, #284]	@ (8012330 <ResetMacParameters+0x238>)
 8012212:	2200      	movs	r2, #0
 8012214:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8012218:	4b45      	ldr	r3, [pc, #276]	@ (8012330 <ResetMacParameters+0x238>)
 801221a:	2200      	movs	r2, #0
 801221c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8012220:	4b43      	ldr	r3, [pc, #268]	@ (8012330 <ResetMacParameters+0x238>)
 8012222:	2200      	movs	r2, #0
 8012224:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8012228:	4b41      	ldr	r3, [pc, #260]	@ (8012330 <ResetMacParameters+0x238>)
 801222a:	2200      	movs	r2, #0
 801222c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012230:	2301      	movs	r3, #1
 8012232:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012234:	4b40      	ldr	r3, [pc, #256]	@ (8012338 <ResetMacParameters+0x240>)
 8012236:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012238:	4b40      	ldr	r3, [pc, #256]	@ (801233c <ResetMacParameters+0x244>)
 801223a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 801223c:	4b40      	ldr	r3, [pc, #256]	@ (8012340 <ResetMacParameters+0x248>)
 801223e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012240:	4b3b      	ldr	r3, [pc, #236]	@ (8012330 <ResetMacParameters+0x238>)
 8012242:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012246:	f107 020c 	add.w	r2, r7, #12
 801224a:	4611      	mov	r1, r2
 801224c:	4618      	mov	r0, r3
 801224e:	f004 fa5b 	bl	8016708 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012252:	4b38      	ldr	r3, [pc, #224]	@ (8012334 <ResetMacParameters+0x23c>)
 8012254:	2200      	movs	r2, #0
 8012256:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801225a:	4b36      	ldr	r3, [pc, #216]	@ (8012334 <ResetMacParameters+0x23c>)
 801225c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012260:	4b34      	ldr	r3, [pc, #208]	@ (8012334 <ResetMacParameters+0x23c>)
 8012262:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012266:	4b32      	ldr	r3, [pc, #200]	@ (8012330 <ResetMacParameters+0x238>)
 8012268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801226a:	4a32      	ldr	r2, [pc, #200]	@ (8012334 <ResetMacParameters+0x23c>)
 801226c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012270:	4b2f      	ldr	r3, [pc, #188]	@ (8012330 <ResetMacParameters+0x238>)
 8012272:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8012276:	4b2f      	ldr	r3, [pc, #188]	@ (8012334 <ResetMacParameters+0x23c>)
 8012278:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801227c:	4b2c      	ldr	r3, [pc, #176]	@ (8012330 <ResetMacParameters+0x238>)
 801227e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012282:	4b2c      	ldr	r3, [pc, #176]	@ (8012334 <ResetMacParameters+0x23c>)
 8012284:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012288:	4b2a      	ldr	r3, [pc, #168]	@ (8012334 <ResetMacParameters+0x23c>)
 801228a:	2200      	movs	r2, #0
 801228c:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012290:	4b28      	ldr	r3, [pc, #160]	@ (8012334 <ResetMacParameters+0x23c>)
 8012292:	2201      	movs	r2, #1
 8012294:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012298:	4b25      	ldr	r3, [pc, #148]	@ (8012330 <ResetMacParameters+0x238>)
 801229a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801229e:	4b25      	ldr	r3, [pc, #148]	@ (8012334 <ResetMacParameters+0x23c>)
 80122a0:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80122a4:	4a23      	ldr	r2, [pc, #140]	@ (8012334 <ResetMacParameters+0x23c>)
 80122a6:	4b23      	ldr	r3, [pc, #140]	@ (8012334 <ResetMacParameters+0x23c>)
 80122a8:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 80122ac:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 80122b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80122b8:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80122bc:	4b1d      	ldr	r3, [pc, #116]	@ (8012334 <ResetMacParameters+0x23c>)
 80122be:	2201      	movs	r2, #1
 80122c0:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80122c4:	4b1b      	ldr	r3, [pc, #108]	@ (8012334 <ResetMacParameters+0x23c>)
 80122c6:	2202      	movs	r2, #2
 80122c8:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80122cc:	2300      	movs	r3, #0
 80122ce:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 80122d0:	2300      	movs	r3, #0
 80122d2:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 80122d4:	4b17      	ldr	r3, [pc, #92]	@ (8012334 <ResetMacParameters+0x23c>)
 80122d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d009      	beq.n	80122f2 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80122de:	4b15      	ldr	r3, [pc, #84]	@ (8012334 <ResetMacParameters+0x23c>)
 80122e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80122e8:	4b12      	ldr	r3, [pc, #72]	@ (8012334 <ResetMacParameters+0x23c>)
 80122ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122ee:	695b      	ldr	r3, [r3, #20]
 80122f0:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80122f2:	4b14      	ldr	r3, [pc, #80]	@ (8012344 <ResetMacParameters+0x24c>)
 80122f4:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80122f6:	4b14      	ldr	r3, [pc, #80]	@ (8012348 <ResetMacParameters+0x250>)
 80122f8:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80122fa:	4b14      	ldr	r3, [pc, #80]	@ (801234c <ResetMacParameters+0x254>)
 80122fc:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80122fe:	4b14      	ldr	r3, [pc, #80]	@ (8012350 <ResetMacParameters+0x258>)
 8012300:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8012302:	4b14      	ldr	r3, [pc, #80]	@ (8012354 <ResetMacParameters+0x25c>)
 8012304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8012306:	4b14      	ldr	r3, [pc, #80]	@ (8012358 <ResetMacParameters+0x260>)
 8012308:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801230a:	4b14      	ldr	r3, [pc, #80]	@ (801235c <ResetMacParameters+0x264>)
 801230c:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801230e:	4b14      	ldr	r3, [pc, #80]	@ (8012360 <ResetMacParameters+0x268>)
 8012310:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8012312:	4b14      	ldr	r3, [pc, #80]	@ (8012364 <ResetMacParameters+0x26c>)
 8012314:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8012316:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801231a:	f107 031c 	add.w	r3, r7, #28
 801231e:	4a12      	ldr	r2, [pc, #72]	@ (8012368 <ResetMacParameters+0x270>)
 8012320:	4618      	mov	r0, r3
 8012322:	f002 f9f8 	bl	8014716 <LoRaMacClassBInit>
}
 8012326:	bf00      	nop
 8012328:	3748      	adds	r7, #72	@ 0x48
 801232a:	46bd      	mov	sp, r7
 801232c:	bdb0      	pop	{r4, r5, r7, pc}
 801232e:	bf00      	nop
 8012330:	20000c14 	.word	0x20000c14
 8012334:	200006e0 	.word	0x200006e0
 8012338:	20000e38 	.word	0x20000e38
 801233c:	20000e3c 	.word	0x20000e3c
 8012340:	2000178c 	.word	0x2000178c
 8012344:	20000b48 	.word	0x20000b48
 8012348:	20000b00 	.word	0x20000b00
 801234c:	20000b34 	.word	0x20000b34
 8012350:	20000b71 	.word	0x20000b71
 8012354:	20000cf8 	.word	0x20000cf8
 8012358:	20000c5c 	.word	0x20000c5c
 801235c:	20000c60 	.word	0x20000c60
 8012360:	20000cfc 	.word	0x20000cfc
 8012364:	20000d44 	.word	0x20000d44
 8012368:	200011b8 	.word	0x200011b8

0801236c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f00a fd16 	bl	801cda8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 801237c:	4b11      	ldr	r3, [pc, #68]	@ (80123c4 <RxWindowSetup+0x58>)
 801237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012380:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012382:	4b11      	ldr	r3, [pc, #68]	@ (80123c8 <RxWindowSetup+0x5c>)
 8012384:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012388:	4a10      	ldr	r2, [pc, #64]	@ (80123cc <RxWindowSetup+0x60>)
 801238a:	6839      	ldr	r1, [r7, #0]
 801238c:	4618      	mov	r0, r3
 801238e:	f004 fa23 	bl	80167d8 <RegionRxConfig>
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d010      	beq.n	80123ba <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012398:	4b0d      	ldr	r3, [pc, #52]	@ (80123d0 <RxWindowSetup+0x64>)
 801239a:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 801239e:	4b0c      	ldr	r3, [pc, #48]	@ (80123d0 <RxWindowSetup+0x64>)
 80123a0:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80123a4:	4b07      	ldr	r3, [pc, #28]	@ (80123c4 <RxWindowSetup+0x58>)
 80123a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123a8:	4a07      	ldr	r2, [pc, #28]	@ (80123c8 <RxWindowSetup+0x5c>)
 80123aa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80123ac:	4610      	mov	r0, r2
 80123ae:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	7cda      	ldrb	r2, [r3, #19]
 80123b4:	4b06      	ldr	r3, [pc, #24]	@ (80123d0 <RxWindowSetup+0x64>)
 80123b6:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 80123ba:	bf00      	nop
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	0801e614 	.word	0x0801e614
 80123c8:	20000c14 	.word	0x20000c14
 80123cc:	20000b04 	.word	0x20000b04
 80123d0:	200006e0 	.word	0x200006e0

080123d4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80123d4:	b590      	push	{r4, r7, lr}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80123da:	4b1e      	ldr	r3, [pc, #120]	@ (8012454 <OpenContinuousRxCWindow+0x80>)
 80123dc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80123e0:	4b1c      	ldr	r3, [pc, #112]	@ (8012454 <OpenContinuousRxCWindow+0x80>)
 80123e2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80123e6:	b259      	sxtb	r1, r3
 80123e8:	4b1a      	ldr	r3, [pc, #104]	@ (8012454 <OpenContinuousRxCWindow+0x80>)
 80123ea:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80123ee:	4b19      	ldr	r3, [pc, #100]	@ (8012454 <OpenContinuousRxCWindow+0x80>)
 80123f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123f2:	4c19      	ldr	r4, [pc, #100]	@ (8012458 <OpenContinuousRxCWindow+0x84>)
 80123f4:	9400      	str	r4, [sp, #0]
 80123f6:	f004 f9d5 	bl	80167a4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80123fa:	4b18      	ldr	r3, [pc, #96]	@ (801245c <OpenContinuousRxCWindow+0x88>)
 80123fc:	2202      	movs	r2, #2
 80123fe:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012402:	4b14      	ldr	r3, [pc, #80]	@ (8012454 <OpenContinuousRxCWindow+0x80>)
 8012404:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012408:	4b14      	ldr	r3, [pc, #80]	@ (801245c <OpenContinuousRxCWindow+0x88>)
 801240a:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801240e:	4b13      	ldr	r3, [pc, #76]	@ (801245c <OpenContinuousRxCWindow+0x88>)
 8012410:	2201      	movs	r2, #1
 8012412:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012416:	4b0f      	ldr	r3, [pc, #60]	@ (8012454 <OpenContinuousRxCWindow+0x80>)
 8012418:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801241c:	4a10      	ldr	r2, [pc, #64]	@ (8012460 <OpenContinuousRxCWindow+0x8c>)
 801241e:	490e      	ldr	r1, [pc, #56]	@ (8012458 <OpenContinuousRxCWindow+0x84>)
 8012420:	4618      	mov	r0, r3
 8012422:	f004 f9d9 	bl	80167d8 <RegionRxConfig>
 8012426:	4603      	mov	r3, r0
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00f      	beq.n	801244c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801242c:	4b0b      	ldr	r3, [pc, #44]	@ (801245c <OpenContinuousRxCWindow+0x88>)
 801242e:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8012432:	4b0a      	ldr	r3, [pc, #40]	@ (801245c <OpenContinuousRxCWindow+0x88>)
 8012434:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8012438:	4b0a      	ldr	r3, [pc, #40]	@ (8012464 <OpenContinuousRxCWindow+0x90>)
 801243a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801243c:	2000      	movs	r0, #0
 801243e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012440:	4b06      	ldr	r3, [pc, #24]	@ (801245c <OpenContinuousRxCWindow+0x88>)
 8012442:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8012446:	4b05      	ldr	r3, [pc, #20]	@ (801245c <OpenContinuousRxCWindow+0x88>)
 8012448:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 801244c:	bf00      	nop
 801244e:	3704      	adds	r7, #4
 8012450:	46bd      	mov	sp, r7
 8012452:	bd90      	pop	{r4, r7, pc}
 8012454:	20000c14 	.word	0x20000c14
 8012458:	20000ac8 	.word	0x20000ac8
 801245c:	200006e0 	.word	0x200006e0
 8012460:	20000b04 	.word	0x20000b04
 8012464:	0801e614 	.word	0x0801e614

08012468 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b088      	sub	sp, #32
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	603b      	str	r3, [r7, #0]
 8012474:	4613      	mov	r3, r2
 8012476:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012478:	4b81      	ldr	r3, [pc, #516]	@ (8012680 <PrepareFrame+0x218>)
 801247a:	2200      	movs	r2, #0
 801247c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801247e:	4b80      	ldr	r3, [pc, #512]	@ (8012680 <PrepareFrame+0x218>)
 8012480:	2200      	movs	r2, #0
 8012482:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801248a:	2300      	movs	r3, #0
 801248c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801248e:	2300      	movs	r3, #0
 8012490:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d101      	bne.n	801249c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012498:	2300      	movs	r3, #0
 801249a:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801249c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801249e:	461a      	mov	r2, r3
 80124a0:	6839      	ldr	r1, [r7, #0]
 80124a2:	4878      	ldr	r0, [pc, #480]	@ (8012684 <PrepareFrame+0x21c>)
 80124a4:	f006 fb33 	bl	8018b0e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80124a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124aa:	b2da      	uxtb	r2, r3
 80124ac:	4b74      	ldr	r3, [pc, #464]	@ (8012680 <PrepareFrame+0x218>)
 80124ae:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	781a      	ldrb	r2, [r3, #0]
 80124b6:	4b72      	ldr	r3, [pc, #456]	@ (8012680 <PrepareFrame+0x218>)
 80124b8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	2b07      	cmp	r3, #7
 80124c6:	f000 80b9 	beq.w	801263c <PrepareFrame+0x1d4>
 80124ca:	2b07      	cmp	r3, #7
 80124cc:	f300 80ce 	bgt.w	801266c <PrepareFrame+0x204>
 80124d0:	2b02      	cmp	r3, #2
 80124d2:	d006      	beq.n	80124e2 <PrepareFrame+0x7a>
 80124d4:	2b04      	cmp	r3, #4
 80124d6:	f040 80c9 	bne.w	801266c <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80124da:	4b69      	ldr	r3, [pc, #420]	@ (8012680 <PrepareFrame+0x218>)
 80124dc:	2201      	movs	r2, #1
 80124de:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80124e2:	4b67      	ldr	r3, [pc, #412]	@ (8012680 <PrepareFrame+0x218>)
 80124e4:	2204      	movs	r2, #4
 80124e6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80124ea:	4b65      	ldr	r3, [pc, #404]	@ (8012680 <PrepareFrame+0x218>)
 80124ec:	4a66      	ldr	r2, [pc, #408]	@ (8012688 <PrepareFrame+0x220>)
 80124ee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80124f2:	4b63      	ldr	r3, [pc, #396]	@ (8012680 <PrepareFrame+0x218>)
 80124f4:	22ff      	movs	r2, #255	@ 0xff
 80124f6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	781a      	ldrb	r2, [r3, #0]
 80124fe:	4b60      	ldr	r3, [pc, #384]	@ (8012680 <PrepareFrame+0x218>)
 8012500:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012504:	4a5e      	ldr	r2, [pc, #376]	@ (8012680 <PrepareFrame+0x218>)
 8012506:	79fb      	ldrb	r3, [r7, #7]
 8012508:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801250c:	4b5f      	ldr	r3, [pc, #380]	@ (801268c <PrepareFrame+0x224>)
 801250e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8012512:	4a5b      	ldr	r2, [pc, #364]	@ (8012680 <PrepareFrame+0x218>)
 8012514:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	781a      	ldrb	r2, [r3, #0]
 801251c:	4b58      	ldr	r3, [pc, #352]	@ (8012680 <PrepareFrame+0x218>)
 801251e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012522:	4b57      	ldr	r3, [pc, #348]	@ (8012680 <PrepareFrame+0x218>)
 8012524:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8012528:	4b55      	ldr	r3, [pc, #340]	@ (8012680 <PrepareFrame+0x218>)
 801252a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801252e:	4b54      	ldr	r3, [pc, #336]	@ (8012680 <PrepareFrame+0x218>)
 8012530:	4a54      	ldr	r2, [pc, #336]	@ (8012684 <PrepareFrame+0x21c>)
 8012532:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012536:	f107 0318 	add.w	r3, r7, #24
 801253a:	4618      	mov	r0, r3
 801253c:	f003 fa3e 	bl	80159bc <LoRaMacCryptoGetFCntUp>
 8012540:	4603      	mov	r3, r0
 8012542:	2b00      	cmp	r3, #0
 8012544:	d001      	beq.n	801254a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012546:	2312      	movs	r3, #18
 8012548:	e096      	b.n	8012678 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801254a:	69bb      	ldr	r3, [r7, #24]
 801254c:	b29a      	uxth	r2, r3
 801254e:	4b4c      	ldr	r3, [pc, #304]	@ (8012680 <PrepareFrame+0x218>)
 8012550:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8012554:	4b4a      	ldr	r3, [pc, #296]	@ (8012680 <PrepareFrame+0x218>)
 8012556:	2200      	movs	r2, #0
 8012558:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801255c:	4b48      	ldr	r3, [pc, #288]	@ (8012680 <PrepareFrame+0x218>)
 801255e:	2200      	movs	r2, #0
 8012560:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	4a46      	ldr	r2, [pc, #280]	@ (8012680 <PrepareFrame+0x218>)
 8012568:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801256c:	f107 0314 	add.w	r3, r7, #20
 8012570:	4618      	mov	r0, r3
 8012572:	f002 fbef 	bl	8014d54 <LoRaMacCommandsGetSizeSerializedCmds>
 8012576:	4603      	mov	r3, r0
 8012578:	2b00      	cmp	r3, #0
 801257a:	d001      	beq.n	8012580 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801257c:	2313      	movs	r3, #19
 801257e:	e07b      	b.n	8012678 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d074      	beq.n	8012670 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8012586:	4b41      	ldr	r3, [pc, #260]	@ (801268c <PrepareFrame+0x224>)
 8012588:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801258c:	4618      	mov	r0, r3
 801258e:	f7fe fd13 	bl	8010fb8 <GetMaxAppPayloadWithoutFOptsLength>
 8012592:	4603      	mov	r3, r0
 8012594:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012596:	4b3a      	ldr	r3, [pc, #232]	@ (8012680 <PrepareFrame+0x218>)
 8012598:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801259c:	2b00      	cmp	r3, #0
 801259e:	d01d      	beq.n	80125dc <PrepareFrame+0x174>
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	2b0f      	cmp	r3, #15
 80125a4:	d81a      	bhi.n	80125dc <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80125a6:	f107 0314 	add.w	r3, r7, #20
 80125aa:	4a39      	ldr	r2, [pc, #228]	@ (8012690 <PrepareFrame+0x228>)
 80125ac:	4619      	mov	r1, r3
 80125ae:	200f      	movs	r0, #15
 80125b0:	f002 fbe6 	bl	8014d80 <LoRaMacCommandsSerializeCmds>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d001      	beq.n	80125be <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80125ba:	2313      	movs	r3, #19
 80125bc:	e05c      	b.n	8012678 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	f003 030f 	and.w	r3, r3, #15
 80125c4:	b2d9      	uxtb	r1, r3
 80125c6:	68ba      	ldr	r2, [r7, #8]
 80125c8:	7813      	ldrb	r3, [r2, #0]
 80125ca:	f361 0303 	bfi	r3, r1, #0, #4
 80125ce:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	781a      	ldrb	r2, [r3, #0]
 80125d4:	4b2a      	ldr	r3, [pc, #168]	@ (8012680 <PrepareFrame+0x218>)
 80125d6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80125da:	e049      	b.n	8012670 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80125dc:	4b28      	ldr	r3, [pc, #160]	@ (8012680 <PrepareFrame+0x218>)
 80125de:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d010      	beq.n	8012608 <PrepareFrame+0x1a0>
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	2b0f      	cmp	r3, #15
 80125ea:	d90d      	bls.n	8012608 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80125ec:	7ffb      	ldrb	r3, [r7, #31]
 80125ee:	f107 0114 	add.w	r1, r7, #20
 80125f2:	4a28      	ldr	r2, [pc, #160]	@ (8012694 <PrepareFrame+0x22c>)
 80125f4:	4618      	mov	r0, r3
 80125f6:	f002 fbc3 	bl	8014d80 <LoRaMacCommandsSerializeCmds>
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d001      	beq.n	8012604 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012600:	2313      	movs	r3, #19
 8012602:	e039      	b.n	8012678 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012604:	230a      	movs	r3, #10
 8012606:	e037      	b.n	8012678 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012608:	7ffb      	ldrb	r3, [r7, #31]
 801260a:	f107 0114 	add.w	r1, r7, #20
 801260e:	4a21      	ldr	r2, [pc, #132]	@ (8012694 <PrepareFrame+0x22c>)
 8012610:	4618      	mov	r0, r3
 8012612:	f002 fbb5 	bl	8014d80 <LoRaMacCommandsSerializeCmds>
 8012616:	4603      	mov	r3, r0
 8012618:	2b00      	cmp	r3, #0
 801261a:	d001      	beq.n	8012620 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801261c:	2313      	movs	r3, #19
 801261e:	e02b      	b.n	8012678 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012620:	4b17      	ldr	r3, [pc, #92]	@ (8012680 <PrepareFrame+0x218>)
 8012622:	2200      	movs	r2, #0
 8012624:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8012628:	4b15      	ldr	r3, [pc, #84]	@ (8012680 <PrepareFrame+0x218>)
 801262a:	4a1a      	ldr	r2, [pc, #104]	@ (8012694 <PrepareFrame+0x22c>)
 801262c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012630:	697b      	ldr	r3, [r7, #20]
 8012632:	b2da      	uxtb	r2, r3
 8012634:	4b12      	ldr	r3, [pc, #72]	@ (8012680 <PrepareFrame+0x218>)
 8012636:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 801263a:	e019      	b.n	8012670 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d018      	beq.n	8012674 <PrepareFrame+0x20c>
 8012642:	4b0f      	ldr	r3, [pc, #60]	@ (8012680 <PrepareFrame+0x218>)
 8012644:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012648:	2b00      	cmp	r3, #0
 801264a:	d013      	beq.n	8012674 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801264c:	4812      	ldr	r0, [pc, #72]	@ (8012698 <PrepareFrame+0x230>)
 801264e:	4b0c      	ldr	r3, [pc, #48]	@ (8012680 <PrepareFrame+0x218>)
 8012650:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012654:	461a      	mov	r2, r3
 8012656:	6839      	ldr	r1, [r7, #0]
 8012658:	f006 fa59 	bl	8018b0e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801265c:	4b08      	ldr	r3, [pc, #32]	@ (8012680 <PrepareFrame+0x218>)
 801265e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012662:	3301      	adds	r3, #1
 8012664:	b29a      	uxth	r2, r3
 8012666:	4b06      	ldr	r3, [pc, #24]	@ (8012680 <PrepareFrame+0x218>)
 8012668:	801a      	strh	r2, [r3, #0]
            }
            break;
 801266a:	e003      	b.n	8012674 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801266c:	2302      	movs	r3, #2
 801266e:	e003      	b.n	8012678 <PrepareFrame+0x210>
            break;
 8012670:	bf00      	nop
 8012672:	e000      	b.n	8012676 <PrepareFrame+0x20e>
            break;
 8012674:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012676:	2300      	movs	r3, #0
}
 8012678:	4618      	mov	r0, r3
 801267a:	3720      	adds	r7, #32
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	200006e0 	.word	0x200006e0
 8012684:	20000818 	.word	0x20000818
 8012688:	200006e2 	.word	0x200006e2
 801268c:	20000c14 	.word	0x20000c14
 8012690:	200007f8 	.word	0x200007f8
 8012694:	20000b94 	.word	0x20000b94
 8012698:	200006e3 	.word	0x200006e3

0801269c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b08a      	sub	sp, #40	@ 0x28
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	4603      	mov	r3, r0
 80126a4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126a6:	2303      	movs	r3, #3
 80126a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80126ac:	2300      	movs	r3, #0
 80126ae:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80126b0:	79fb      	ldrb	r3, [r7, #7]
 80126b2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80126b4:	4b4b      	ldr	r3, [pc, #300]	@ (80127e4 <SendFrameOnChannel+0x148>)
 80126b6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80126ba:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80126bc:	4b49      	ldr	r3, [pc, #292]	@ (80127e4 <SendFrameOnChannel+0x148>)
 80126be:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80126c2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80126c4:	4b47      	ldr	r3, [pc, #284]	@ (80127e4 <SendFrameOnChannel+0x148>)
 80126c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126ca:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80126cc:	4b45      	ldr	r3, [pc, #276]	@ (80127e4 <SendFrameOnChannel+0x148>)
 80126ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80126d2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80126d4:	4b44      	ldr	r3, [pc, #272]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80126d6:	881b      	ldrh	r3, [r3, #0]
 80126d8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80126da:	4b42      	ldr	r3, [pc, #264]	@ (80127e4 <SendFrameOnChannel+0x148>)
 80126dc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80126e0:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80126e2:	4b40      	ldr	r3, [pc, #256]	@ (80127e4 <SendFrameOnChannel+0x148>)
 80126e4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80126e8:	f107 020f 	add.w	r2, r7, #15
 80126ec:	f107 0110 	add.w	r1, r7, #16
 80126f0:	4b3e      	ldr	r3, [pc, #248]	@ (80127ec <SendFrameOnChannel+0x150>)
 80126f2:	f004 f886 	bl	8016802 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80126f6:	4b3c      	ldr	r3, [pc, #240]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80126f8:	2201      	movs	r2, #1
 80126fa:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80126fe:	4b39      	ldr	r3, [pc, #228]	@ (80127e4 <SendFrameOnChannel+0x148>)
 8012700:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012704:	b2da      	uxtb	r2, r3
 8012706:	4b38      	ldr	r3, [pc, #224]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 8012708:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 801270c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012710:	4b35      	ldr	r3, [pc, #212]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 8012712:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8012716:	79fb      	ldrb	r3, [r7, #7]
 8012718:	4a33      	ldr	r2, [pc, #204]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 801271a:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801271e:	4b32      	ldr	r3, [pc, #200]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 8012720:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012724:	4a30      	ldr	r2, [pc, #192]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 8012726:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801272a:	4b2f      	ldr	r3, [pc, #188]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 801272c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012730:	4a2d      	ldr	r2, [pc, #180]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 8012732:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012736:	f002 f85a 	bl	80147ee <LoRaMacClassBIsBeaconModeActive>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d00b      	beq.n	8012758 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012740:	4b29      	ldr	r3, [pc, #164]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 8012742:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012746:	4618      	mov	r0, r3
 8012748:	f002 f8bc 	bl	80148c4 <LoRaMacClassBIsUplinkCollision>
 801274c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801274e:	6a3b      	ldr	r3, [r7, #32]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d001      	beq.n	8012758 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012754:	2310      	movs	r3, #16
 8012756:	e040      	b.n	80127da <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012758:	4b22      	ldr	r3, [pc, #136]	@ (80127e4 <SendFrameOnChannel+0x148>)
 801275a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801275e:	2b01      	cmp	r3, #1
 8012760:	d101      	bne.n	8012766 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8012762:	f002 f8b9 	bl	80148d8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012766:	f002 f853 	bl	8014810 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801276a:	4b1e      	ldr	r3, [pc, #120]	@ (80127e4 <SendFrameOnChannel+0x148>)
 801276c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012770:	b2db      	uxtb	r3, r3
 8012772:	4a1d      	ldr	r2, [pc, #116]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 8012774:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8012778:	4611      	mov	r1, r2
 801277a:	4618      	mov	r0, r3
 801277c:	f7ff fc2c 	bl	8011fd8 <SecureFrame>
 8012780:	4603      	mov	r3, r0
 8012782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8012786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801278a:	2b00      	cmp	r3, #0
 801278c:	d002      	beq.n	8012794 <SendFrameOnChannel+0xf8>
    {
        return status;
 801278e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012792:	e022      	b.n	80127da <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012794:	4b14      	ldr	r3, [pc, #80]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 8012796:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801279a:	f043 0302 	orr.w	r3, r3, #2
 801279e:	4a12      	ldr	r2, [pc, #72]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80127a0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 80127a4:	4b10      	ldr	r3, [pc, #64]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80127a6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80127aa:	3301      	adds	r3, #1
 80127ac:	b2da      	uxtb	r2, r3
 80127ae:	4b0e      	ldr	r3, [pc, #56]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80127b0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80127b4:	4b0c      	ldr	r3, [pc, #48]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80127b6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80127ba:	4b0b      	ldr	r3, [pc, #44]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80127bc:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80127c0:	4b09      	ldr	r3, [pc, #36]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80127c8:	4b09      	ldr	r3, [pc, #36]	@ (80127f0 <SendFrameOnChannel+0x154>)
 80127ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127cc:	4a06      	ldr	r2, [pc, #24]	@ (80127e8 <SendFrameOnChannel+0x14c>)
 80127ce:	8812      	ldrh	r2, [r2, #0]
 80127d0:	b2d2      	uxtb	r2, r2
 80127d2:	4611      	mov	r1, r2
 80127d4:	4807      	ldr	r0, [pc, #28]	@ (80127f4 <SendFrameOnChannel+0x158>)
 80127d6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80127d8:	2300      	movs	r3, #0
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3728      	adds	r7, #40	@ 0x28
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	20000c14 	.word	0x20000c14
 80127e8:	200006e0 	.word	0x200006e0
 80127ec:	20000afc 	.word	0x20000afc
 80127f0:	0801e614 	.word	0x0801e614
 80127f4:	200006e2 	.word	0x200006e2

080127f8 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	4603      	mov	r3, r0
 8012800:	6039      	str	r1, [r7, #0]
 8012802:	80fb      	strh	r3, [r7, #6]
 8012804:	4613      	mov	r3, r2
 8012806:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012808:	4b09      	ldr	r3, [pc, #36]	@ (8012830 <SetTxContinuousWave+0x38>)
 801280a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801280c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012810:	88fa      	ldrh	r2, [r7, #6]
 8012812:	6838      	ldr	r0, [r7, #0]
 8012814:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012816:	4b07      	ldr	r3, [pc, #28]	@ (8012834 <SetTxContinuousWave+0x3c>)
 8012818:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801281c:	f043 0302 	orr.w	r3, r3, #2
 8012820:	4a04      	ldr	r2, [pc, #16]	@ (8012834 <SetTxContinuousWave+0x3c>)
 8012822:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012826:	2300      	movs	r3, #0
}
 8012828:	4618      	mov	r0, r3
 801282a:	3708      	adds	r7, #8
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	0801e614 	.word	0x0801e614
 8012834:	200006e0 	.word	0x200006e0

08012838 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 801283e:	2300      	movs	r3, #0
 8012840:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012842:	4b49      	ldr	r3, [pc, #292]	@ (8012968 <RestoreNvmData+0x130>)
 8012844:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012848:	2b01      	cmp	r3, #1
 801284a:	d001      	beq.n	8012850 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 801284c:	2301      	movs	r3, #1
 801284e:	e087      	b.n	8012960 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8012850:	2124      	movs	r1, #36	@ 0x24
 8012852:	4846      	ldr	r0, [pc, #280]	@ (801296c <RestoreNvmData+0x134>)
 8012854:	f006 f9b0 	bl	8018bb8 <Crc32>
 8012858:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801285a:	4b44      	ldr	r3, [pc, #272]	@ (801296c <RestoreNvmData+0x134>)
 801285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	429a      	cmp	r2, r3
 8012862:	d001      	beq.n	8012868 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012864:	2317      	movs	r3, #23
 8012866:	e07b      	b.n	8012960 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012868:	211c      	movs	r1, #28
 801286a:	4841      	ldr	r0, [pc, #260]	@ (8012970 <RestoreNvmData+0x138>)
 801286c:	f006 f9a4 	bl	8018bb8 <Crc32>
 8012870:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8012872:	4b3e      	ldr	r3, [pc, #248]	@ (801296c <RestoreNvmData+0x134>)
 8012874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	429a      	cmp	r2, r3
 801287a:	d001      	beq.n	8012880 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801287c:	2317      	movs	r3, #23
 801287e:	e06f      	b.n	8012960 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8012880:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012884:	483b      	ldr	r0, [pc, #236]	@ (8012974 <RestoreNvmData+0x13c>)
 8012886:	f006 f997 	bl	8018bb8 <Crc32>
 801288a:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801288c:	4b37      	ldr	r3, [pc, #220]	@ (801296c <RestoreNvmData+0x134>)
 801288e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	429a      	cmp	r2, r3
 8012896:	d001      	beq.n	801289c <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012898:	2317      	movs	r3, #23
 801289a:	e061      	b.n	8012960 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801289c:	21d4      	movs	r1, #212	@ 0xd4
 801289e:	4836      	ldr	r0, [pc, #216]	@ (8012978 <RestoreNvmData+0x140>)
 80128a0:	f006 f98a 	bl	8018bb8 <Crc32>
 80128a4:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80128a6:	4b31      	ldr	r3, [pc, #196]	@ (801296c <RestoreNvmData+0x134>)
 80128a8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d001      	beq.n	80128b6 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80128b2:	2317      	movs	r3, #23
 80128b4:	e054      	b.n	8012960 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80128b6:	2100      	movs	r1, #0
 80128b8:	4830      	ldr	r0, [pc, #192]	@ (801297c <RestoreNvmData+0x144>)
 80128ba:	f006 f97d 	bl	8018bb8 <Crc32>
 80128be:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80128c0:	4b2a      	ldr	r3, [pc, #168]	@ (801296c <RestoreNvmData+0x134>)
 80128c2:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80128c6:	687a      	ldr	r2, [r7, #4]
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d001      	beq.n	80128d0 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80128cc:	2317      	movs	r3, #23
 80128ce:	e047      	b.n	8012960 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 80128d0:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80128d4:	482a      	ldr	r0, [pc, #168]	@ (8012980 <RestoreNvmData+0x148>)
 80128d6:	f006 f96f 	bl	8018bb8 <Crc32>
 80128da:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80128dc:	4b23      	ldr	r3, [pc, #140]	@ (801296c <RestoreNvmData+0x134>)
 80128de:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d001      	beq.n	80128ec <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80128e8:	2317      	movs	r3, #23
 80128ea:	e039      	b.n	8012960 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80128ec:	2114      	movs	r1, #20
 80128ee:	4825      	ldr	r0, [pc, #148]	@ (8012984 <RestoreNvmData+0x14c>)
 80128f0:	f006 f962 	bl	8018bb8 <Crc32>
 80128f4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80128f6:	4b1d      	ldr	r3, [pc, #116]	@ (801296c <RestoreNvmData+0x134>)
 80128f8:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 80128fc:	687a      	ldr	r2, [r7, #4]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d001      	beq.n	8012906 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012902:	2317      	movs	r3, #23
 8012904:	e02c      	b.n	8012960 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8012906:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 801290a:	4918      	ldr	r1, [pc, #96]	@ (801296c <RestoreNvmData+0x134>)
 801290c:	481e      	ldr	r0, [pc, #120]	@ (8012988 <RestoreNvmData+0x150>)
 801290e:	f006 f8fe 	bl	8018b0e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8012912:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012916:	2100      	movs	r1, #0
 8012918:	4814      	ldr	r0, [pc, #80]	@ (801296c <RestoreNvmData+0x134>)
 801291a:	f006 f933 	bl	8018b84 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801291e:	4b12      	ldr	r3, [pc, #72]	@ (8012968 <RestoreNvmData+0x130>)
 8012920:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012924:	4b10      	ldr	r3, [pc, #64]	@ (8012968 <RestoreNvmData+0x130>)
 8012926:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801292a:	4b17      	ldr	r3, [pc, #92]	@ (8012988 <RestoreNvmData+0x150>)
 801292c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801292e:	4a0e      	ldr	r2, [pc, #56]	@ (8012968 <RestoreNvmData+0x130>)
 8012930:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012934:	4b14      	ldr	r3, [pc, #80]	@ (8012988 <RestoreNvmData+0x150>)
 8012936:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801293a:	4b0b      	ldr	r3, [pc, #44]	@ (8012968 <RestoreNvmData+0x130>)
 801293c:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012940:	4b09      	ldr	r3, [pc, #36]	@ (8012968 <RestoreNvmData+0x130>)
 8012942:	2201      	movs	r2, #1
 8012944:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012948:	4b07      	ldr	r3, [pc, #28]	@ (8012968 <RestoreNvmData+0x130>)
 801294a:	2202      	movs	r2, #2
 801294c:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012950:	4b0e      	ldr	r3, [pc, #56]	@ (801298c <RestoreNvmData+0x154>)
 8012952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012954:	4a0c      	ldr	r2, [pc, #48]	@ (8012988 <RestoreNvmData+0x150>)
 8012956:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801295a:	4610      	mov	r0, r2
 801295c:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	200006e0 	.word	0x200006e0
 801296c:	200011d0 	.word	0x200011d0
 8012970:	200011f8 	.word	0x200011f8
 8012974:	20001218 	.word	0x20001218
 8012978:	2000131c 	.word	0x2000131c
 801297c:	200013f4 	.word	0x200013f4
 8012980:	200013f8 	.word	0x200013f8
 8012984:	20001774 	.word	0x20001774
 8012988:	20000c14 	.word	0x20000c14
 801298c:	0801e614 	.word	0x0801e614

08012990 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <DetermineFrameType+0x16>
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d101      	bne.n	80129aa <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80129a6:	2303      	movs	r3, #3
 80129a8:	e03b      	b.n	8012a22 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	7b1b      	ldrb	r3, [r3, #12]
 80129ae:	f003 030f 	and.w	r3, r3, #15
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d008      	beq.n	80129ca <DetermineFrameType+0x3a>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d003      	beq.n	80129ca <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	2200      	movs	r2, #0
 80129c6:	701a      	strb	r2, [r3, #0]
 80129c8:	e02a      	b.n	8012a20 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d103      	bne.n	80129dc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	2201      	movs	r2, #1
 80129d8:	701a      	strb	r2, [r3, #0]
 80129da:	e021      	b.n	8012a20 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	7b1b      	ldrb	r3, [r3, #12]
 80129e0:	f003 030f 	and.w	r3, r3, #15
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d108      	bne.n	80129fc <DetermineFrameType+0x6c>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d103      	bne.n	80129fc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	2202      	movs	r2, #2
 80129f8:	701a      	strb	r2, [r3, #0]
 80129fa:	e011      	b.n	8012a20 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	7b1b      	ldrb	r3, [r3, #12]
 8012a00:	f003 030f 	and.w	r3, r3, #15
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d108      	bne.n	8012a1c <DetermineFrameType+0x8c>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d003      	beq.n	8012a1c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2203      	movs	r2, #3
 8012a18:	701a      	strb	r2, [r3, #0]
 8012a1a:	e001      	b.n	8012a20 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012a1c:	2318      	movs	r3, #24
 8012a1e:	e000      	b.n	8012a22 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	370c      	adds	r7, #12
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bc80      	pop	{r7}
 8012a2a:	4770      	bx	lr

08012a2c <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b083      	sub	sp, #12
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	4603      	mov	r3, r0
 8012a34:	460a      	mov	r2, r1
 8012a36:	71fb      	strb	r3, [r7, #7]
 8012a38:	4613      	mov	r3, r2
 8012a3a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8012a3c:	79fa      	ldrb	r2, [r7, #7]
 8012a3e:	79bb      	ldrb	r3, [r7, #6]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d301      	bcc.n	8012a48 <CheckRetrans+0x1c>
    {
        return true;
 8012a44:	2301      	movs	r3, #1
 8012a46:	e000      	b.n	8012a4a <CheckRetrans+0x1e>
    }
    return false;
 8012a48:	2300      	movs	r3, #0
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	370c      	adds	r7, #12
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bc80      	pop	{r7}
 8012a52:	4770      	bx	lr

08012a54 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012a58:	4b12      	ldr	r3, [pc, #72]	@ (8012aa4 <CheckRetransUnconfirmedUplink+0x50>)
 8012a5a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012a5e:	4a12      	ldr	r2, [pc, #72]	@ (8012aa8 <CheckRetransUnconfirmedUplink+0x54>)
 8012a60:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012a64:	4611      	mov	r1, r2
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7ff ffe0 	bl	8012a2c <CheckRetrans>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d001      	beq.n	8012a76 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012a72:	2301      	movs	r3, #1
 8012a74:	e014      	b.n	8012aa0 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012a76:	4b0b      	ldr	r3, [pc, #44]	@ (8012aa4 <CheckRetransUnconfirmedUplink+0x50>)
 8012a78:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012a7c:	f003 0302 	and.w	r3, r3, #2
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d00b      	beq.n	8012a9e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012a86:	4b07      	ldr	r3, [pc, #28]	@ (8012aa4 <CheckRetransUnconfirmedUplink+0x50>)
 8012a88:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d004      	beq.n	8012a9a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012a90:	4b04      	ldr	r3, [pc, #16]	@ (8012aa4 <CheckRetransUnconfirmedUplink+0x50>)
 8012a92:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d101      	bne.n	8012a9e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e000      	b.n	8012aa0 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8012a9e:	2300      	movs	r3, #0
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	200006e0 	.word	0x200006e0
 8012aa8:	20000c14 	.word	0x20000c14

08012aac <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012ab0:	4b10      	ldr	r3, [pc, #64]	@ (8012af4 <CheckRetransConfirmedUplink+0x48>)
 8012ab2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012ab6:	4a10      	ldr	r2, [pc, #64]	@ (8012af8 <CheckRetransConfirmedUplink+0x4c>)
 8012ab8:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012abc:	4611      	mov	r1, r2
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7ff ffb4 	bl	8012a2c <CheckRetrans>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d001      	beq.n	8012ace <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012aca:	2301      	movs	r3, #1
 8012acc:	e00f      	b.n	8012aee <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012ace:	4b09      	ldr	r3, [pc, #36]	@ (8012af4 <CheckRetransConfirmedUplink+0x48>)
 8012ad0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012ad4:	f003 0302 	and.w	r3, r3, #2
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d006      	beq.n	8012aec <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012ade:	4b05      	ldr	r3, [pc, #20]	@ (8012af4 <CheckRetransConfirmedUplink+0x48>)
 8012ae0:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d001      	beq.n	8012aec <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	e000      	b.n	8012aee <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8012aec:	2300      	movs	r3, #0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	bd80      	pop	{r7, pc}
 8012af2:	bf00      	nop
 8012af4:	200006e0 	.word	0x200006e0
 8012af8:	20000c14 	.word	0x20000c14

08012afc <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b0a:	d002      	beq.n	8012b12 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8012b12:	687b      	ldr	r3, [r7, #4]
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	370c      	adds	r7, #12
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bc80      	pop	{r7}
 8012b1c:	4770      	bx	lr
	...

08012b20 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012b24:	4b1a      	ldr	r3, [pc, #104]	@ (8012b90 <StopRetransmission+0x70>)
 8012b26:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012b2a:	f003 0302 	and.w	r3, r3, #2
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d009      	beq.n	8012b48 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012b34:	4b16      	ldr	r3, [pc, #88]	@ (8012b90 <StopRetransmission+0x70>)
 8012b36:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d011      	beq.n	8012b62 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012b3e:	4b14      	ldr	r3, [pc, #80]	@ (8012b90 <StopRetransmission+0x70>)
 8012b40:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d00c      	beq.n	8012b62 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012b48:	4b12      	ldr	r3, [pc, #72]	@ (8012b94 <StopRetransmission+0x74>)
 8012b4a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d007      	beq.n	8012b62 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8012b52:	4b10      	ldr	r3, [pc, #64]	@ (8012b94 <StopRetransmission+0x74>)
 8012b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7ff ffd0 	bl	8012afc <IncreaseAdrAckCounter>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8012b94 <StopRetransmission+0x74>)
 8012b60:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012b62:	4b0b      	ldr	r3, [pc, #44]	@ (8012b90 <StopRetransmission+0x70>)
 8012b64:	2200      	movs	r2, #0
 8012b66:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8012b6a:	4b09      	ldr	r3, [pc, #36]	@ (8012b90 <StopRetransmission+0x70>)
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012b72:	4b07      	ldr	r3, [pc, #28]	@ (8012b90 <StopRetransmission+0x70>)
 8012b74:	2200      	movs	r2, #0
 8012b76:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012b7a:	4b05      	ldr	r3, [pc, #20]	@ (8012b90 <StopRetransmission+0x70>)
 8012b7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012b80:	f023 0302 	bic.w	r3, r3, #2
 8012b84:	4a02      	ldr	r2, [pc, #8]	@ (8012b90 <StopRetransmission+0x70>)
 8012b86:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8012b8a:	2301      	movs	r3, #1
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	200006e0 	.word	0x200006e0
 8012b94:	20000c14 	.word	0x20000c14

08012b98 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012b9c:	4b08      	ldr	r3, [pc, #32]	@ (8012bc0 <OnMacProcessNotify+0x28>)
 8012b9e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00a      	beq.n	8012bbc <OnMacProcessNotify+0x24>
 8012ba6:	4b06      	ldr	r3, [pc, #24]	@ (8012bc0 <OnMacProcessNotify+0x28>)
 8012ba8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012bac:	695b      	ldr	r3, [r3, #20]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d004      	beq.n	8012bbc <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8012bb2:	4b03      	ldr	r3, [pc, #12]	@ (8012bc0 <OnMacProcessNotify+0x28>)
 8012bb4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012bb8:	695b      	ldr	r3, [r3, #20]
 8012bba:	4798      	blx	r3
    }
}
 8012bbc:	bf00      	nop
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	200006e0 	.word	0x200006e0

08012bc4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	4603      	mov	r3, r0
 8012bcc:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012bce:	4b0b      	ldr	r3, [pc, #44]	@ (8012bfc <CallNvmDataChangeCallback+0x38>)
 8012bd0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00c      	beq.n	8012bf2 <CallNvmDataChangeCallback+0x2e>
 8012bd8:	4b08      	ldr	r3, [pc, #32]	@ (8012bfc <CallNvmDataChangeCallback+0x38>)
 8012bda:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012bde:	691b      	ldr	r3, [r3, #16]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d006      	beq.n	8012bf2 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012be4:	4b05      	ldr	r3, [pc, #20]	@ (8012bfc <CallNvmDataChangeCallback+0x38>)
 8012be6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	88fa      	ldrh	r2, [r7, #6]
 8012bee:	4610      	mov	r0, r2
 8012bf0:	4798      	blx	r3
    }
}
 8012bf2:	bf00      	nop
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	200006e0 	.word	0x200006e0

08012c00 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012c00:	b480      	push	{r7}
 8012c02:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012c04:	4b0b      	ldr	r3, [pc, #44]	@ (8012c34 <IsRequestPending+0x34>)
 8012c06:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012c0a:	f003 0304 	and.w	r3, r3, #4
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d107      	bne.n	8012c24 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012c14:	4b07      	ldr	r3, [pc, #28]	@ (8012c34 <IsRequestPending+0x34>)
 8012c16:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012c1a:	f003 0301 	and.w	r3, r3, #1
 8012c1e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d001      	beq.n	8012c28 <IsRequestPending+0x28>
    {
        return 1;
 8012c24:	2301      	movs	r3, #1
 8012c26:	e000      	b.n	8012c2a <IsRequestPending+0x2a>
    }
    return 0;
 8012c28:	2300      	movs	r3, #0
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bc80      	pop	{r7}
 8012c30:	4770      	bx	lr
 8012c32:	bf00      	nop
 8012c34:	200006e0 	.word	0x200006e0

08012c38 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012c38:	b590      	push	{r4, r7, lr}
 8012c3a:	b091      	sub	sp, #68	@ 0x44
 8012c3c:	af02      	add	r7, sp, #8
 8012c3e:	6178      	str	r0, [r7, #20]
 8012c40:	6139      	str	r1, [r7, #16]
 8012c42:	4613      	mov	r3, r2
 8012c44:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d002      	beq.n	8012c52 <LoRaMacInitialization+0x1a>
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d101      	bne.n	8012c56 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c52:	2303      	movs	r3, #3
 8012c54:	e27a      	b.n	801314c <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00b      	beq.n	8012c76 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d007      	beq.n	8012c76 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d003      	beq.n	8012c76 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012c6e:	697b      	ldr	r3, [r7, #20]
 8012c70:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d101      	bne.n	8012c7a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c76:	2303      	movs	r3, #3
 8012c78:	e268      	b.n	801314c <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012c7a:	7bfb      	ldrb	r3, [r7, #15]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f003 fd0a 	bl	8016696 <RegionIsActive>
 8012c82:	4603      	mov	r3, r0
 8012c84:	f083 0301 	eor.w	r3, r3, #1
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d001      	beq.n	8012c92 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012c8e:	2309      	movs	r3, #9
 8012c90:	e25c      	b.n	801314c <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012c92:	6978      	ldr	r0, [r7, #20]
 8012c94:	f002 f996 	bl	8014fc4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012c98:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012c9c:	2100      	movs	r1, #0
 8012c9e:	48c7      	ldr	r0, [pc, #796]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012ca0:	f005 ff70 	bl	8018b84 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012ca4:	f240 5234 	movw	r2, #1332	@ 0x534
 8012ca8:	2100      	movs	r1, #0
 8012caa:	48c5      	ldr	r0, [pc, #788]	@ (8012fc0 <LoRaMacInitialization+0x388>)
 8012cac:	f005 ff6a 	bl	8018b84 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012cb0:	4ac2      	ldr	r2, [pc, #776]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012cb2:	7bfb      	ldrb	r3, [r7, #15]
 8012cb4:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012cb8:	4bc0      	ldr	r3, [pc, #768]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8012cc0:	4bbe      	ldr	r3, [pc, #760]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012cc8:	4bbc      	ldr	r3, [pc, #752]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012cca:	4abe      	ldr	r2, [pc, #760]	@ (8012fc4 <LoRaMacInitialization+0x38c>)
 8012ccc:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012cd6:	4bbc      	ldr	r3, [pc, #752]	@ (8012fc8 <LoRaMacInitialization+0x390>)
 8012cd8:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012cda:	4bbc      	ldr	r3, [pc, #752]	@ (8012fcc <LoRaMacInitialization+0x394>)
 8012cdc:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8012cde:	4bbc      	ldr	r3, [pc, #752]	@ (8012fd0 <LoRaMacInitialization+0x398>)
 8012ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012ce2:	4bb6      	ldr	r3, [pc, #728]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012ce4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ce8:	f107 021c 	add.w	r2, r7, #28
 8012cec:	4611      	mov	r1, r2
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f003 fd0a 	bl	8016708 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012cf4:	230f      	movs	r3, #15
 8012cf6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cfa:	4bb0      	ldr	r3, [pc, #704]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012cfc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d00:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d04:	4611      	mov	r1, r2
 8012d06:	4618      	mov	r0, r3
 8012d08:	f003 fcd5 	bl	80166b6 <RegionGetPhyParam>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	bf14      	ite	ne
 8012d16:	2301      	movne	r3, #1
 8012d18:	2300      	moveq	r3, #0
 8012d1a:	b2da      	uxtb	r2, r3
 8012d1c:	4ba7      	ldr	r3, [pc, #668]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012d1e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012d22:	230a      	movs	r3, #10
 8012d24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d28:	4ba4      	ldr	r3, [pc, #656]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012d2a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d2e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d32:	4611      	mov	r1, r2
 8012d34:	4618      	mov	r0, r3
 8012d36:	f003 fcbe 	bl	80166b6 <RegionGetPhyParam>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d40:	b25a      	sxtb	r2, r3
 8012d42:	4b9e      	ldr	r3, [pc, #632]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012d44:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012d48:	2306      	movs	r3, #6
 8012d4a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d4e:	4b9b      	ldr	r3, [pc, #620]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012d50:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d58:	4611      	mov	r1, r2
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f003 fcab 	bl	80166b6 <RegionGetPhyParam>
 8012d60:	4603      	mov	r3, r0
 8012d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d66:	b25a      	sxtb	r2, r3
 8012d68:	4b94      	ldr	r3, [pc, #592]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012d6a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012d6e:	2310      	movs	r3, #16
 8012d70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d74:	4b91      	ldr	r3, [pc, #580]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012d76:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d7a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d7e:	4611      	mov	r1, r2
 8012d80:	4618      	mov	r0, r3
 8012d82:	f003 fc98 	bl	80166b6 <RegionGetPhyParam>
 8012d86:	4603      	mov	r3, r0
 8012d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d8c:	4a8b      	ldr	r2, [pc, #556]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012d8e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012d92:	2311      	movs	r3, #17
 8012d94:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d98:	4b88      	ldr	r3, [pc, #544]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012d9a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012da2:	4611      	mov	r1, r2
 8012da4:	4618      	mov	r0, r3
 8012da6:	f003 fc86 	bl	80166b6 <RegionGetPhyParam>
 8012daa:	4603      	mov	r3, r0
 8012dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012db0:	4a82      	ldr	r2, [pc, #520]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012db2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012db6:	2312      	movs	r3, #18
 8012db8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012dbc:	4b7f      	ldr	r3, [pc, #508]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012dbe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012dc2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f003 fc74 	bl	80166b6 <RegionGetPhyParam>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dd4:	4a79      	ldr	r2, [pc, #484]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012dd6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012dda:	2313      	movs	r3, #19
 8012ddc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012de0:	4b76      	ldr	r3, [pc, #472]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012de2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012de6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012dea:	4611      	mov	r1, r2
 8012dec:	4618      	mov	r0, r3
 8012dee:	f003 fc62 	bl	80166b6 <RegionGetPhyParam>
 8012df2:	4603      	mov	r3, r0
 8012df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012df8:	4a70      	ldr	r2, [pc, #448]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012dfa:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012dfe:	2314      	movs	r3, #20
 8012e00:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e04:	4b6d      	ldr	r3, [pc, #436]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e06:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e0a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e0e:	4611      	mov	r1, r2
 8012e10:	4618      	mov	r0, r3
 8012e12:	f003 fc50 	bl	80166b6 <RegionGetPhyParam>
 8012e16:	4603      	mov	r3, r0
 8012e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e1c:	4a67      	ldr	r2, [pc, #412]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e1e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012e22:	2316      	movs	r3, #22
 8012e24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e28:	4b64      	ldr	r3, [pc, #400]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e2a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e2e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e32:	4611      	mov	r1, r2
 8012e34:	4618      	mov	r0, r3
 8012e36:	f003 fc3e 	bl	80166b6 <RegionGetPhyParam>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	4b5e      	ldr	r3, [pc, #376]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e44:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012e48:	2317      	movs	r3, #23
 8012e4a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e50:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e58:	4611      	mov	r1, r2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f003 fc2b 	bl	80166b6 <RegionGetPhyParam>
 8012e60:	4603      	mov	r3, r0
 8012e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e66:	4a55      	ldr	r2, [pc, #340]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e68:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e6e:	4a53      	ldr	r2, [pc, #332]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e70:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012e74:	2318      	movs	r3, #24
 8012e76:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e7a:	4b50      	ldr	r3, [pc, #320]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e7c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e80:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e84:	4611      	mov	r1, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f003 fc15 	bl	80166b6 <RegionGetPhyParam>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e92:	b2da      	uxtb	r2, r3
 8012e94:	4b49      	ldr	r3, [pc, #292]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012e96:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e9c:	b2da      	uxtb	r2, r3
 8012e9e:	4b47      	ldr	r3, [pc, #284]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012ea0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012ea4:	231d      	movs	r3, #29
 8012ea6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012eaa:	4b44      	ldr	r3, [pc, #272]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012eac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012eb0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012eb4:	4611      	mov	r1, r2
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f003 fbfd 	bl	80166b6 <RegionGetPhyParam>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec2:	b2da      	uxtb	r2, r3
 8012ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012ec6:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012eca:	231e      	movs	r3, #30
 8012ecc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012ed2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ed6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012eda:	4611      	mov	r1, r2
 8012edc:	4618      	mov	r0, r3
 8012ede:	f003 fbea 	bl	80166b6 <RegionGetPhyParam>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	4b34      	ldr	r3, [pc, #208]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012eec:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012ef0:	231f      	movs	r3, #31
 8012ef2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ef6:	4b31      	ldr	r3, [pc, #196]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012ef8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012efc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012f00:	4611      	mov	r1, r2
 8012f02:	4618      	mov	r0, r3
 8012f04:	f003 fbd7 	bl	80166b6 <RegionGetPhyParam>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f10:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012f14:	2320      	movs	r3, #32
 8012f16:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f1a:	4b28      	ldr	r3, [pc, #160]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f20:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012f24:	4611      	mov	r1, r2
 8012f26:	4618      	mov	r0, r3
 8012f28:	f003 fbc5 	bl	80166b6 <RegionGetPhyParam>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f32:	4a22      	ldr	r2, [pc, #136]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f34:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012f38:	230b      	movs	r3, #11
 8012f3a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f40:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f44:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012f48:	4611      	mov	r1, r2
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f003 fbb3 	bl	80166b6 <RegionGetPhyParam>
 8012f50:	4603      	mov	r3, r0
 8012f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8012f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f56:	b29a      	uxth	r2, r3
 8012f58:	4b18      	ldr	r3, [pc, #96]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f5a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012f5e:	230c      	movs	r3, #12
 8012f60:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f64:	4b15      	ldr	r3, [pc, #84]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f66:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f6a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012f6e:	4611      	mov	r1, r2
 8012f70:	4618      	mov	r0, r3
 8012f72:	f003 fba0 	bl	80166b6 <RegionGetPhyParam>
 8012f76:	4603      	mov	r3, r0
 8012f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8012f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f80:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012f84:	4b0d      	ldr	r3, [pc, #52]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f86:	2201      	movs	r2, #1
 8012f88:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f8e:	220a      	movs	r2, #10
 8012f90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012f94:	4b09      	ldr	r3, [pc, #36]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f96:	2206      	movs	r2, #6
 8012f98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012f9c:	4b07      	ldr	r3, [pc, #28]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012fa2:	4a06      	ldr	r2, [pc, #24]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012fa6:	4b05      	ldr	r3, [pc, #20]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012fa8:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8012fac:	4b03      	ldr	r3, [pc, #12]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012fb2:	4b02      	ldr	r3, [pc, #8]	@ (8012fbc <LoRaMacInitialization+0x384>)
 8012fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012fb8:	e00c      	b.n	8012fd4 <LoRaMacInitialization+0x39c>
 8012fba:	bf00      	nop
 8012fbc:	20000c14 	.word	0x20000c14
 8012fc0:	200006e0 	.word	0x200006e0
 8012fc4:	01000400 	.word	0x01000400
 8012fc8:	20000e38 	.word	0x20000e38
 8012fcc:	20000e3c 	.word	0x20000e3c
 8012fd0:	2000178c 	.word	0x2000178c
 8012fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012fd6:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012fde:	4a5d      	ldr	r2, [pc, #372]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012fe0:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012fea:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012fec:	4b59      	ldr	r3, [pc, #356]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012fee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012ff2:	4a58      	ldr	r2, [pc, #352]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012ff4:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012ff6:	4b57      	ldr	r3, [pc, #348]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012ff8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012ffc:	4a55      	ldr	r2, [pc, #340]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8012ffe:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8013000:	4b54      	ldr	r3, [pc, #336]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8013002:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8013006:	4b53      	ldr	r3, [pc, #332]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8013008:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 801300c:	4b51      	ldr	r3, [pc, #324]	@ (8013154 <LoRaMacInitialization+0x51c>)
 801300e:	2201      	movs	r2, #1
 8013010:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013014:	4a50      	ldr	r2, [pc, #320]	@ (8013158 <LoRaMacInitialization+0x520>)
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 801301c:	2000      	movs	r0, #0
 801301e:	f7ff f86b 	bl	80120f8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8013022:	4b4c      	ldr	r3, [pc, #304]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8013024:	2201      	movs	r2, #1
 8013026:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 801302a:	4a4b      	ldr	r2, [pc, #300]	@ (8013158 <LoRaMacInitialization+0x520>)
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8013032:	4b49      	ldr	r3, [pc, #292]	@ (8013158 <LoRaMacInitialization+0x520>)
 8013034:	2200      	movs	r2, #0
 8013036:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 801303a:	4b47      	ldr	r3, [pc, #284]	@ (8013158 <LoRaMacInitialization+0x520>)
 801303c:	2201      	movs	r2, #1
 801303e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013042:	4b44      	ldr	r3, [pc, #272]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8013044:	2200      	movs	r2, #0
 8013046:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013048:	4b42      	ldr	r3, [pc, #264]	@ (8013154 <LoRaMacInitialization+0x51c>)
 801304a:	2200      	movs	r2, #0
 801304c:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801304e:	2300      	movs	r3, #0
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	4b42      	ldr	r3, [pc, #264]	@ (801315c <LoRaMacInitialization+0x524>)
 8013054:	2200      	movs	r2, #0
 8013056:	f04f 31ff 	mov.w	r1, #4294967295
 801305a:	4841      	ldr	r0, [pc, #260]	@ (8013160 <LoRaMacInitialization+0x528>)
 801305c:	f009 fe00 	bl	801cc60 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013060:	2300      	movs	r3, #0
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	4b3f      	ldr	r3, [pc, #252]	@ (8013164 <LoRaMacInitialization+0x52c>)
 8013066:	2200      	movs	r2, #0
 8013068:	f04f 31ff 	mov.w	r1, #4294967295
 801306c:	483e      	ldr	r0, [pc, #248]	@ (8013168 <LoRaMacInitialization+0x530>)
 801306e:	f009 fdf7 	bl	801cc60 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013072:	2300      	movs	r3, #0
 8013074:	9300      	str	r3, [sp, #0]
 8013076:	4b3d      	ldr	r3, [pc, #244]	@ (801316c <LoRaMacInitialization+0x534>)
 8013078:	2200      	movs	r2, #0
 801307a:	f04f 31ff 	mov.w	r1, #4294967295
 801307e:	483c      	ldr	r0, [pc, #240]	@ (8013170 <LoRaMacInitialization+0x538>)
 8013080:	f009 fdee 	bl	801cc60 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8013084:	2300      	movs	r3, #0
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	4b3a      	ldr	r3, [pc, #232]	@ (8013174 <LoRaMacInitialization+0x53c>)
 801308a:	2200      	movs	r2, #0
 801308c:	f04f 31ff 	mov.w	r1, #4294967295
 8013090:	4839      	ldr	r0, [pc, #228]	@ (8013178 <LoRaMacInitialization+0x540>)
 8013092:	f009 fde5 	bl	801cc60 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8013096:	4c2f      	ldr	r4, [pc, #188]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8013098:	463b      	mov	r3, r7
 801309a:	4618      	mov	r0, r3
 801309c:	f009 f9bc 	bl	801c418 <SysTimeGetMcuTime>
 80130a0:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 80130a4:	463a      	mov	r2, r7
 80130a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80130aa:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80130ae:	4b33      	ldr	r3, [pc, #204]	@ (801317c <LoRaMacInitialization+0x544>)
 80130b0:	2200      	movs	r2, #0
 80130b2:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80130b4:	4b28      	ldr	r3, [pc, #160]	@ (8013158 <LoRaMacInitialization+0x520>)
 80130b6:	4a32      	ldr	r2, [pc, #200]	@ (8013180 <LoRaMacInitialization+0x548>)
 80130b8:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80130bc:	4b26      	ldr	r3, [pc, #152]	@ (8013158 <LoRaMacInitialization+0x520>)
 80130be:	4a31      	ldr	r2, [pc, #196]	@ (8013184 <LoRaMacInitialization+0x54c>)
 80130c0:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80130c4:	4b24      	ldr	r3, [pc, #144]	@ (8013158 <LoRaMacInitialization+0x520>)
 80130c6:	4a30      	ldr	r2, [pc, #192]	@ (8013188 <LoRaMacInitialization+0x550>)
 80130c8:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80130cc:	4b22      	ldr	r3, [pc, #136]	@ (8013158 <LoRaMacInitialization+0x520>)
 80130ce:	4a2f      	ldr	r2, [pc, #188]	@ (801318c <LoRaMacInitialization+0x554>)
 80130d0:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80130d4:	4b20      	ldr	r3, [pc, #128]	@ (8013158 <LoRaMacInitialization+0x520>)
 80130d6:	4a2e      	ldr	r2, [pc, #184]	@ (8013190 <LoRaMacInitialization+0x558>)
 80130d8:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80130dc:	4b2d      	ldr	r3, [pc, #180]	@ (8013194 <LoRaMacInitialization+0x55c>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	482d      	ldr	r0, [pc, #180]	@ (8013198 <LoRaMacInitialization+0x560>)
 80130e2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80130e4:	482d      	ldr	r0, [pc, #180]	@ (801319c <LoRaMacInitialization+0x564>)
 80130e6:	f7fa f9bf 	bl	800d468 <SecureElementInit>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d001      	beq.n	80130f4 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80130f0:	2311      	movs	r3, #17
 80130f2:	e02b      	b.n	801314c <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80130f4:	4817      	ldr	r0, [pc, #92]	@ (8013154 <LoRaMacInitialization+0x51c>)
 80130f6:	f002 fc25 	bl	8015944 <LoRaMacCryptoInit>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013100:	2311      	movs	r3, #17
 8013102:	e023      	b.n	801314c <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8013104:	f001 fd20 	bl	8014b48 <LoRaMacCommandsInit>
 8013108:	4603      	mov	r3, r0
 801310a:	2b00      	cmp	r3, #0
 801310c:	d001      	beq.n	8013112 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801310e:	2313      	movs	r3, #19
 8013110:	e01c      	b.n	801314c <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013112:	4823      	ldr	r0, [pc, #140]	@ (80131a0 <LoRaMacInitialization+0x568>)
 8013114:	f002 fcb6 	bl	8015a84 <LoRaMacCryptoSetMulticastReference>
 8013118:	4603      	mov	r3, r0
 801311a:	2b00      	cmp	r3, #0
 801311c:	d001      	beq.n	8013122 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801311e:	2311      	movs	r3, #17
 8013120:	e014      	b.n	801314c <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013122:	4b1c      	ldr	r3, [pc, #112]	@ (8013194 <LoRaMacInitialization+0x55c>)
 8013124:	695b      	ldr	r3, [r3, #20]
 8013126:	4798      	blx	r3
 8013128:	4603      	mov	r3, r0
 801312a:	4618      	mov	r0, r3
 801312c:	f005 fcca 	bl	8018ac4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013130:	4b18      	ldr	r3, [pc, #96]	@ (8013194 <LoRaMacInitialization+0x55c>)
 8013132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013134:	4a07      	ldr	r2, [pc, #28]	@ (8013154 <LoRaMacInitialization+0x51c>)
 8013136:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801313a:	4610      	mov	r0, r2
 801313c:	4798      	blx	r3
    Radio.Sleep( );
 801313e:	4b15      	ldr	r3, [pc, #84]	@ (8013194 <LoRaMacInitialization+0x55c>)
 8013140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013142:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013144:	2001      	movs	r0, #1
 8013146:	f7fd fa67 	bl	8010618 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801314a:	2300      	movs	r3, #0
}
 801314c:	4618      	mov	r0, r3
 801314e:	373c      	adds	r7, #60	@ 0x3c
 8013150:	46bd      	mov	sp, r7
 8013152:	bd90      	pop	{r4, r7, pc}
 8013154:	20000c14 	.word	0x20000c14
 8013158:	200006e0 	.word	0x200006e0
 801315c:	08010ba5 	.word	0x08010ba5
 8013160:	20000a48 	.word	0x20000a48
 8013164:	08010c35 	.word	0x08010c35
 8013168:	20000a60 	.word	0x20000a60
 801316c:	08010cad 	.word	0x08010cad
 8013170:	20000a78 	.word	0x20000a78
 8013174:	08010d2d 	.word	0x08010d2d
 8013178:	20000ae0 	.word	0x20000ae0
 801317c:	2000181c 	.word	0x2000181c
 8013180:	0800f625 	.word	0x0800f625
 8013184:	0800f681 	.word	0x0800f681
 8013188:	0800f721 	.word	0x0800f721
 801318c:	0800f6f5 	.word	0x0800f6f5
 8013190:	0800f73d 	.word	0x0800f73d
 8013194:	0801e614 	.word	0x0801e614
 8013198:	20000a2c 	.word	0x20000a2c
 801319c:	20000d60 	.word	0x20000d60
 80131a0:	20000cfc 	.word	0x20000cfc

080131a4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80131a8:	4b04      	ldr	r3, [pc, #16]	@ (80131bc <LoRaMacStart+0x18>)
 80131aa:	2200      	movs	r2, #0
 80131ac:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 80131b0:	f7fc fada 	bl	800f768 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80131b4:	2300      	movs	r3, #0
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	200006e0 	.word	0x200006e0

080131c0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80131c4:	f7fd f9f0 	bl	80105a8 <LoRaMacIsBusy>
 80131c8:	4603      	mov	r3, r0
 80131ca:	f083 0301 	eor.w	r3, r3, #1
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d00d      	beq.n	80131f0 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80131d4:	4b0b      	ldr	r3, [pc, #44]	@ (8013204 <LoRaMacStop+0x44>)
 80131d6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80131da:	2b02      	cmp	r3, #2
 80131dc:	d102      	bne.n	80131e4 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80131de:	4b0a      	ldr	r3, [pc, #40]	@ (8013208 <LoRaMacStop+0x48>)
 80131e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131e2:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80131e4:	4b09      	ldr	r3, [pc, #36]	@ (801320c <LoRaMacStop+0x4c>)
 80131e6:	2201      	movs	r2, #1
 80131e8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80131ec:	2300      	movs	r3, #0
 80131ee:	e007      	b.n	8013200 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80131f0:	4b06      	ldr	r3, [pc, #24]	@ (801320c <LoRaMacStop+0x4c>)
 80131f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d101      	bne.n	80131fe <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80131fa:	2300      	movs	r3, #0
 80131fc:	e000      	b.n	8013200 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80131fe:	2301      	movs	r3, #1
}
 8013200:	4618      	mov	r0, r3
 8013202:	bd80      	pop	{r7, pc}
 8013204:	20000c14 	.word	0x20000c14
 8013208:	0801e614 	.word	0x0801e614
 801320c:	200006e0 	.word	0x200006e0

08013210 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8013210:	b580      	push	{r7, lr}
 8013212:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8013214:	4812      	ldr	r0, [pc, #72]	@ (8013260 <LoRaMacHalt+0x50>)
 8013216:	f009 fdc7 	bl	801cda8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801321a:	4812      	ldr	r0, [pc, #72]	@ (8013264 <LoRaMacHalt+0x54>)
 801321c:	f009 fdc4 	bl	801cda8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8013220:	4811      	ldr	r0, [pc, #68]	@ (8013268 <LoRaMacHalt+0x58>)
 8013222:	f009 fdc1 	bl	801cda8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8013226:	4811      	ldr	r0, [pc, #68]	@ (801326c <LoRaMacHalt+0x5c>)
 8013228:	f009 fdbe 	bl	801cda8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 801322c:	f001 faf0 	bl	8014810 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8013230:	4b0f      	ldr	r3, [pc, #60]	@ (8013270 <LoRaMacHalt+0x60>)
 8013232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013234:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8013236:	4b0f      	ldr	r3, [pc, #60]	@ (8013274 <LoRaMacHalt+0x64>)
 8013238:	2200      	movs	r2, #0
 801323a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 801323e:	480e      	ldr	r0, [pc, #56]	@ (8013278 <LoRaMacHalt+0x68>)
 8013240:	f7fd fb8c 	bl	801095c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8013244:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8013248:	490b      	ldr	r1, [pc, #44]	@ (8013278 <LoRaMacHalt+0x68>)
 801324a:	480c      	ldr	r0, [pc, #48]	@ (801327c <LoRaMacHalt+0x6c>)
 801324c:	f005 fc5f 	bl	8018b0e <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8013250:	4b08      	ldr	r3, [pc, #32]	@ (8013274 <LoRaMacHalt+0x64>)
 8013252:	2201      	movs	r2, #1
 8013254:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	20000a48 	.word	0x20000a48
 8013264:	20000a60 	.word	0x20000a60
 8013268:	20000a78 	.word	0x20000a78
 801326c:	20000ae0 	.word	0x20000ae0
 8013270:	0801e614 	.word	0x0801e614
 8013274:	200006e0 	.word	0x200006e0
 8013278:	20000c14 	.word	0x20000c14
 801327c:	200011d0 	.word	0x200011d0

08013280 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013280:	b590      	push	{r4, r7, lr}
 8013282:	b08d      	sub	sp, #52	@ 0x34
 8013284:	af02      	add	r7, sp, #8
 8013286:	4603      	mov	r3, r0
 8013288:	6039      	str	r1, [r7, #0]
 801328a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801328c:	4b42      	ldr	r3, [pc, #264]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 801328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013290:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013292:	4b41      	ldr	r3, [pc, #260]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 8013294:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8013298:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801329a:	4b3f      	ldr	r3, [pc, #252]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 801329c:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 80132a0:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80132a2:	4b3e      	ldr	r3, [pc, #248]	@ (801339c <LoRaMacQueryTxPossible+0x11c>)
 80132a4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80132a8:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80132aa:	2300      	movs	r3, #0
 80132ac:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d101      	bne.n	80132b8 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80132b4:	2303      	movs	r3, #3
 80132b6:	e06b      	b.n	8013390 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80132b8:	2300      	movs	r3, #0
 80132ba:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80132bc:	4b36      	ldr	r3, [pc, #216]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 80132be:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80132c2:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80132c4:	4b34      	ldr	r3, [pc, #208]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 80132c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132c8:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80132ca:	4b33      	ldr	r3, [pc, #204]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 80132cc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80132d0:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80132d2:	4b31      	ldr	r3, [pc, #196]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 80132d4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80132d8:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80132da:	4b2f      	ldr	r3, [pc, #188]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 80132dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80132e0:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80132e4:	4b2c      	ldr	r3, [pc, #176]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 80132e6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80132ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80132ee:	4b2b      	ldr	r3, [pc, #172]	@ (801339c <LoRaMacQueryTxPossible+0x11c>)
 80132f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80132f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80132f8:	4b27      	ldr	r3, [pc, #156]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 80132fa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80132fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8013302:	4b25      	ldr	r3, [pc, #148]	@ (8013398 <LoRaMacQueryTxPossible+0x118>)
 8013304:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013308:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 801330c:	f107 040d 	add.w	r4, r7, #13
 8013310:	f107 020e 	add.w	r2, r7, #14
 8013314:	f107 010f 	add.w	r1, r7, #15
 8013318:	f107 0014 	add.w	r0, r7, #20
 801331c:	f107 0310 	add.w	r3, r7, #16
 8013320:	9300      	str	r3, [sp, #0]
 8013322:	4623      	mov	r3, r4
 8013324:	f001 f93e 	bl	80145a4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801332c:	4618      	mov	r0, r3
 801332e:	f7fd fe43 	bl	8010fb8 <GetMaxAppPayloadWithoutFOptsLength>
 8013332:	4603      	mov	r3, r0
 8013334:	461a      	mov	r2, r3
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801333a:	f107 0308 	add.w	r3, r7, #8
 801333e:	4618      	mov	r0, r3
 8013340:	f001 fd08 	bl	8014d54 <LoRaMacCommandsGetSizeSerializedCmds>
 8013344:	4603      	mov	r3, r0
 8013346:	2b00      	cmp	r3, #0
 8013348:	d001      	beq.n	801334e <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801334a:	2313      	movs	r3, #19
 801334c:	e020      	b.n	8013390 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	2b0f      	cmp	r3, #15
 8013352:	d819      	bhi.n	8013388 <LoRaMacQueryTxPossible+0x108>
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	785b      	ldrb	r3, [r3, #1]
 8013358:	461a      	mov	r2, r3
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	429a      	cmp	r2, r3
 801335e:	d313      	bcc.n	8013388 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	785a      	ldrb	r2, [r3, #1]
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	b2db      	uxtb	r3, r3
 8013368:	1ad3      	subs	r3, r2, r3
 801336a:	b2da      	uxtb	r2, r3
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	785b      	ldrb	r3, [r3, #1]
 8013374:	4619      	mov	r1, r3
 8013376:	79fa      	ldrb	r2, [r7, #7]
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	4413      	add	r3, r2
 801337c:	4299      	cmp	r1, r3
 801337e:	d301      	bcc.n	8013384 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8013380:	2300      	movs	r3, #0
 8013382:	e005      	b.n	8013390 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013384:	2308      	movs	r3, #8
 8013386:	e003      	b.n	8013390 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	2200      	movs	r2, #0
 801338c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801338e:	2308      	movs	r3, #8
    }
}
 8013390:	4618      	mov	r0, r3
 8013392:	372c      	adds	r7, #44	@ 0x2c
 8013394:	46bd      	mov	sp, r7
 8013396:	bd90      	pop	{r4, r7, pc}
 8013398:	20000c14 	.word	0x20000c14
 801339c:	200006e0 	.word	0x200006e0

080133a0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80133a0:	b590      	push	{r4, r7, lr}
 80133a2:	b087      	sub	sp, #28
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80133a8:	2300      	movs	r3, #0
 80133aa:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d101      	bne.n	80133b6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80133b2:	2303      	movs	r3, #3
 80133b4:	e1c4      	b.n	8013740 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	2b41      	cmp	r3, #65	@ 0x41
 80133bc:	f200 81b9 	bhi.w	8013732 <LoRaMacMibGetRequestConfirm+0x392>
 80133c0:	a201      	add	r2, pc, #4	@ (adr r2, 80133c8 <LoRaMacMibGetRequestConfirm+0x28>)
 80133c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c6:	bf00      	nop
 80133c8:	080134d1 	.word	0x080134d1
 80133cc:	080134dd 	.word	0x080134dd
 80133d0:	080134e9 	.word	0x080134e9
 80133d4:	080134f5 	.word	0x080134f5
 80133d8:	08013501 	.word	0x08013501
 80133dc:	0801350d 	.word	0x0801350d
 80133e0:	08013519 	.word	0x08013519
 80133e4:	08013733 	.word	0x08013733
 80133e8:	08013733 	.word	0x08013733
 80133ec:	08013733 	.word	0x08013733
 80133f0:	08013733 	.word	0x08013733
 80133f4:	08013733 	.word	0x08013733
 80133f8:	08013733 	.word	0x08013733
 80133fc:	08013733 	.word	0x08013733
 8013400:	08013733 	.word	0x08013733
 8013404:	0801352d 	.word	0x0801352d
 8013408:	08013539 	.word	0x08013539
 801340c:	08013545 	.word	0x08013545
 8013410:	08013567 	.word	0x08013567
 8013414:	08013579 	.word	0x08013579
 8013418:	0801358b 	.word	0x0801358b
 801341c:	0801359d 	.word	0x0801359d
 8013420:	080135d1 	.word	0x080135d1
 8013424:	080135af 	.word	0x080135af
 8013428:	080135f3 	.word	0x080135f3
 801342c:	080135ff 	.word	0x080135ff
 8013430:	08013609 	.word	0x08013609
 8013434:	08013613 	.word	0x08013613
 8013438:	0801361d 	.word	0x0801361d
 801343c:	08013627 	.word	0x08013627
 8013440:	08013631 	.word	0x08013631
 8013444:	0801365d 	.word	0x0801365d
 8013448:	08013669 	.word	0x08013669
 801344c:	08013681 	.word	0x08013681
 8013450:	08013675 	.word	0x08013675
 8013454:	0801368d 	.word	0x0801368d
 8013458:	08013697 	.word	0x08013697
 801345c:	080136a3 	.word	0x080136a3
 8013460:	080136bf 	.word	0x080136bf
 8013464:	080136af 	.word	0x080136af
 8013468:	080136b7 	.word	0x080136b7
 801346c:	08013733 	.word	0x08013733
 8013470:	080136cb 	.word	0x080136cb
 8013474:	08013733 	.word	0x08013733
 8013478:	08013733 	.word	0x08013733
 801347c:	08013733 	.word	0x08013733
 8013480:	08013733 	.word	0x08013733
 8013484:	08013733 	.word	0x08013733
 8013488:	08013733 	.word	0x08013733
 801348c:	08013733 	.word	0x08013733
 8013490:	08013733 	.word	0x08013733
 8013494:	08013733 	.word	0x08013733
 8013498:	08013733 	.word	0x08013733
 801349c:	08013733 	.word	0x08013733
 80134a0:	08013733 	.word	0x08013733
 80134a4:	08013733 	.word	0x08013733
 80134a8:	08013733 	.word	0x08013733
 80134ac:	08013733 	.word	0x08013733
 80134b0:	080136df 	.word	0x080136df
 80134b4:	080136eb 	.word	0x080136eb
 80134b8:	080136f7 	.word	0x080136f7
 80134bc:	08013703 	.word	0x08013703
 80134c0:	0801370f 	.word	0x0801370f
 80134c4:	0801371b 	.word	0x0801371b
 80134c8:	08013727 	.word	0x08013727
 80134cc:	0801372d 	.word	0x0801372d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80134d0:	4b9d      	ldr	r3, [pc, #628]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134d2:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	711a      	strb	r2, [r3, #4]
            break;
 80134da:	e130      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80134dc:	4b9a      	ldr	r3, [pc, #616]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134de:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	711a      	strb	r2, [r3, #4]
            break;
 80134e6:	e12a      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fa fa7b 	bl	800d9e8 <SecureElementGetDevEui>
            break;
 80134f2:	e124      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fa faa5 	bl	800da48 <SecureElementGetJoinEui>
            break;
 80134fe:	e11e      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8013500:	4b91      	ldr	r3, [pc, #580]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013502:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	711a      	strb	r2, [r3, #4]
            break;
 801350a:	e118      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801350c:	4b8e      	ldr	r3, [pc, #568]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801350e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	605a      	str	r2, [r3, #4]
            break;
 8013516:	e112      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8013518:	4b8b      	ldr	r3, [pc, #556]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801351a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	3304      	adds	r3, #4
 8013522:	4619      	mov	r1, r3
 8013524:	4610      	mov	r0, r2
 8013526:	f7fa fac1 	bl	800daac <SecureElementGetDevAddr>
            break;
 801352a:	e108      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801352c:	4b86      	ldr	r3, [pc, #536]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801352e:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	711a      	strb	r2, [r3, #4]
            break;
 8013536:	e102      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013538:	4b83      	ldr	r3, [pc, #524]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801353a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	711a      	strb	r2, [r3, #4]
            break;
 8013542:	e0fc      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013544:	231c      	movs	r3, #28
 8013546:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013548:	4b7f      	ldr	r3, [pc, #508]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801354a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801354e:	f107 0210 	add.w	r2, r7, #16
 8013552:	4611      	mov	r1, r2
 8013554:	4618      	mov	r0, r3
 8013556:	f003 f8ae 	bl	80166b6 <RegionGetPhyParam>
 801355a:	4603      	mov	r3, r0
 801355c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	605a      	str	r2, [r3, #4]
            break;
 8013564:	e0eb      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	4a77      	ldr	r2, [pc, #476]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801356a:	3304      	adds	r3, #4
 801356c:	326c      	adds	r2, #108	@ 0x6c
 801356e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013572:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013576:	e0e2      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4a73      	ldr	r2, [pc, #460]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801357c:	3304      	adds	r3, #4
 801357e:	32b4      	adds	r2, #180	@ 0xb4
 8013580:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013584:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013588:	e0d9      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	4a6e      	ldr	r2, [pc, #440]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801358e:	3304      	adds	r3, #4
 8013590:	3274      	adds	r2, #116	@ 0x74
 8013592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013596:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801359a:	e0d0      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	4a6a      	ldr	r2, [pc, #424]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135a0:	3304      	adds	r3, #4
 80135a2:	32bc      	adds	r2, #188	@ 0xbc
 80135a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135a8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80135ac:	e0c7      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80135ae:	231a      	movs	r3, #26
 80135b0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135b2:	4b65      	ldr	r3, [pc, #404]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135b4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135b8:	f107 0210 	add.w	r2, r7, #16
 80135bc:	4611      	mov	r1, r2
 80135be:	4618      	mov	r0, r3
 80135c0:	f003 f879 	bl	80166b6 <RegionGetPhyParam>
 80135c4:	4603      	mov	r3, r0
 80135c6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	605a      	str	r2, [r3, #4]
            break;
 80135ce:	e0b6      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80135d0:	2319      	movs	r3, #25
 80135d2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135d4:	4b5c      	ldr	r3, [pc, #368]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135da:	f107 0210 	add.w	r2, r7, #16
 80135de:	4611      	mov	r1, r2
 80135e0:	4618      	mov	r0, r3
 80135e2:	f003 f868 	bl	80166b6 <RegionGetPhyParam>
 80135e6:	4603      	mov	r3, r0
 80135e8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80135ea:	68fa      	ldr	r2, [r7, #12]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	605a      	str	r2, [r3, #4]
            break;
 80135f0:	e0a5      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80135f2:	4b55      	ldr	r3, [pc, #340]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135f4:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	711a      	strb	r2, [r3, #4]
            break;
 80135fc:	e09f      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80135fe:	4b52      	ldr	r3, [pc, #328]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	605a      	str	r2, [r3, #4]
            break;
 8013606:	e09a      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8013608:	4b4f      	ldr	r3, [pc, #316]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801360a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	605a      	str	r2, [r3, #4]
            break;
 8013610:	e095      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8013612:	4b4d      	ldr	r3, [pc, #308]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013614:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	605a      	str	r2, [r3, #4]
            break;
 801361a:	e090      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801361c:	4b4a      	ldr	r3, [pc, #296]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801361e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	605a      	str	r2, [r3, #4]
            break;
 8013624:	e08b      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8013626:	4b48      	ldr	r3, [pc, #288]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013628:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	605a      	str	r2, [r3, #4]
            break;
 801362e:	e086      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8013630:	2302      	movs	r3, #2
 8013632:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013634:	4b44      	ldr	r3, [pc, #272]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013636:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801363a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801363c:	4b42      	ldr	r3, [pc, #264]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801363e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013642:	f107 0210 	add.w	r2, r7, #16
 8013646:	4611      	mov	r1, r2
 8013648:	4618      	mov	r0, r3
 801364a:	f003 f834 	bl	80166b6 <RegionGetPhyParam>
 801364e:	4603      	mov	r3, r0
 8013650:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	b25a      	sxtb	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	711a      	strb	r2, [r3, #4]
            break;
 801365a:	e070      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801365c:	4b3a      	ldr	r3, [pc, #232]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801365e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	711a      	strb	r2, [r3, #4]
            break;
 8013666:	e06a      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013668:	4b37      	ldr	r3, [pc, #220]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801366a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	711a      	strb	r2, [r3, #4]
            break;
 8013672:	e064      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013674:	4b34      	ldr	r3, [pc, #208]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013676:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	711a      	strb	r2, [r3, #4]
            break;
 801367e:	e05e      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013680:	4b31      	ldr	r3, [pc, #196]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013682:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	711a      	strb	r2, [r3, #4]
            break;
 801368a:	e058      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801368c:	4b2e      	ldr	r3, [pc, #184]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801368e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	605a      	str	r2, [r3, #4]
            break;
 8013694:	e053      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8013696:	4b2c      	ldr	r3, [pc, #176]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013698:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	711a      	strb	r2, [r3, #4]
            break;
 80136a0:	e04d      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80136a2:	4b29      	ldr	r3, [pc, #164]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	605a      	str	r2, [r3, #4]
            break;
 80136ac:	e047      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	4a25      	ldr	r2, [pc, #148]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136b2:	605a      	str	r2, [r3, #4]
            break;
 80136b4:	e043      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	4a24      	ldr	r2, [pc, #144]	@ (801374c <LoRaMacMibGetRequestConfirm+0x3ac>)
 80136ba:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80136bc:	e03f      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80136be:	4b22      	ldr	r3, [pc, #136]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136c0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	605a      	str	r2, [r3, #4]
            break;
 80136c8:	e039      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	4a1e      	ldr	r2, [pc, #120]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136ce:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80136d2:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80136d4:	687c      	ldr	r4, [r7, #4]
 80136d6:	f003 f965 	bl	80169a4 <RegionGetVersion>
 80136da:	60a0      	str	r0, [r4, #8]
            break;
 80136dc:	e02f      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80136de:	4b1a      	ldr	r3, [pc, #104]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	605a      	str	r2, [r3, #4]
            break;
 80136e8:	e029      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80136ea:	4b17      	ldr	r3, [pc, #92]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136ec:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	711a      	strb	r2, [r3, #4]
            break;
 80136f4:	e023      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80136f6:	4b14      	ldr	r3, [pc, #80]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80136f8:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	809a      	strh	r2, [r3, #4]
            break;
 8013700:	e01d      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013702:	4b11      	ldr	r3, [pc, #68]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013704:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	809a      	strh	r2, [r3, #4]
            break;
 801370c:	e017      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801370e:	4b0e      	ldr	r3, [pc, #56]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013710:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	809a      	strh	r2, [r3, #4]
            break;
 8013718:	e011      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801371a:	4b0b      	ldr	r3, [pc, #44]	@ (8013748 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801371c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	809a      	strh	r2, [r3, #4]
            break;
 8013724:	e00b      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013726:	2318      	movs	r3, #24
 8013728:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801372a:	e008      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801372c:	2318      	movs	r3, #24
 801372e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013730:	e005      	b.n	801373e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f001 f883 	bl	801483e <LoRaMacClassBMibGetRequestConfirm>
 8013738:	4603      	mov	r3, r0
 801373a:	75fb      	strb	r3, [r7, #23]
            break;
 801373c:	bf00      	nop
        }
    }
    return status;
 801373e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013740:	4618      	mov	r0, r3
 8013742:	371c      	adds	r7, #28
 8013744:	46bd      	mov	sp, r7
 8013746:	bd90      	pop	{r4, r7, pc}
 8013748:	20000c14 	.word	0x20000c14
 801374c:	200011d0 	.word	0x200011d0

08013750 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b086      	sub	sp, #24
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013758:	2300      	movs	r3, #0
 801375a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d101      	bne.n	8013766 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013762:	2303      	movs	r3, #3
 8013764:	e39e      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013766:	4bbd      	ldr	r3, [pc, #756]	@ (8013a5c <LoRaMacMibSetRequestConfirm+0x30c>)
 8013768:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801376c:	f003 0302 	and.w	r3, r3, #2
 8013770:	2b00      	cmp	r3, #0
 8013772:	d001      	beq.n	8013778 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013774:	2301      	movs	r3, #1
 8013776:	e395      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	2b41      	cmp	r3, #65	@ 0x41
 801377e:	f200 8365 	bhi.w	8013e4c <LoRaMacMibSetRequestConfirm+0x6fc>
 8013782:	a201      	add	r2, pc, #4	@ (adr r2, 8013788 <LoRaMacMibSetRequestConfirm+0x38>)
 8013784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013788:	08013891 	.word	0x08013891
 801378c:	080138a1 	.word	0x080138a1
 8013790:	080138bb 	.word	0x080138bb
 8013794:	080138d3 	.word	0x080138d3
 8013798:	080138eb 	.word	0x080138eb
 801379c:	080138f7 	.word	0x080138f7
 80137a0:	08013903 	.word	0x08013903
 80137a4:	0801392d 	.word	0x0801392d
 80137a8:	08013953 	.word	0x08013953
 80137ac:	08013979 	.word	0x08013979
 80137b0:	0801399f 	.word	0x0801399f
 80137b4:	080139c5 	.word	0x080139c5
 80137b8:	080139eb 	.word	0x080139eb
 80137bc:	08013a11 	.word	0x08013a11
 80137c0:	08013a37 	.word	0x08013a37
 80137c4:	08013a65 	.word	0x08013a65
 80137c8:	08013a85 	.word	0x08013a85
 80137cc:	08013e4d 	.word	0x08013e4d
 80137d0:	08013a91 	.word	0x08013a91
 80137d4:	08013b01 	.word	0x08013b01
 80137d8:	08013b41 	.word	0x08013b41
 80137dc:	08013ba3 	.word	0x08013ba3
 80137e0:	08013c13 	.word	0x08013c13
 80137e4:	08013be3 	.word	0x08013be3
 80137e8:	08013c43 	.word	0x08013c43
 80137ec:	08013c65 	.word	0x08013c65
 80137f0:	08013c6f 	.word	0x08013c6f
 80137f4:	08013c79 	.word	0x08013c79
 80137f8:	08013c83 	.word	0x08013c83
 80137fc:	08013c8d 	.word	0x08013c8d
 8013800:	08013e4d 	.word	0x08013e4d
 8013804:	08013c97 	.word	0x08013c97
 8013808:	08013cc9 	.word	0x08013cc9
 801380c:	08013d3d 	.word	0x08013d3d
 8013810:	08013d03 	.word	0x08013d03
 8013814:	08013d6f 	.word	0x08013d6f
 8013818:	08013d95 	.word	0x08013d95
 801381c:	08013dad 	.word	0x08013dad
 8013820:	08013db9 	.word	0x08013db9
 8013824:	08013dc5 	.word	0x08013dc5
 8013828:	08013e4d 	.word	0x08013e4d
 801382c:	08013dcf 	.word	0x08013dcf
 8013830:	08013e4d 	.word	0x08013e4d
 8013834:	08013e4d 	.word	0x08013e4d
 8013838:	08013e4d 	.word	0x08013e4d
 801383c:	08013e4d 	.word	0x08013e4d
 8013840:	08013e4d 	.word	0x08013e4d
 8013844:	08013e4d 	.word	0x08013e4d
 8013848:	08013e4d 	.word	0x08013e4d
 801384c:	08013e4d 	.word	0x08013e4d
 8013850:	08013e4d 	.word	0x08013e4d
 8013854:	08013e4d 	.word	0x08013e4d
 8013858:	08013e4d 	.word	0x08013e4d
 801385c:	08013e4d 	.word	0x08013e4d
 8013860:	08013e4d 	.word	0x08013e4d
 8013864:	08013e4d 	.word	0x08013e4d
 8013868:	08013e4d 	.word	0x08013e4d
 801386c:	08013e4d 	.word	0x08013e4d
 8013870:	08013df9 	.word	0x08013df9
 8013874:	08013e05 	.word	0x08013e05
 8013878:	08013e11 	.word	0x08013e11
 801387c:	08013e1d 	.word	0x08013e1d
 8013880:	08013e29 	.word	0x08013e29
 8013884:	08013e35 	.word	0x08013e35
 8013888:	08013e41 	.word	0x08013e41
 801388c:	08013e47 	.word	0x08013e47
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	791b      	ldrb	r3, [r3, #4]
 8013894:	4618      	mov	r0, r3
 8013896:	f7fd faa5 	bl	8010de4 <SwitchClass>
 801389a:	4603      	mov	r3, r0
 801389c:	75fb      	strb	r3, [r7, #23]
            break;
 801389e:	e2f6      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	791b      	ldrb	r3, [r3, #4]
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	d005      	beq.n	80138b4 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	791a      	ldrb	r2, [r3, #4]
 80138ac:	4b6c      	ldr	r3, [pc, #432]	@ (8013a60 <LoRaMacMibSetRequestConfirm+0x310>)
 80138ae:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80138b2:	e2ec      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138b4:	2303      	movs	r3, #3
 80138b6:	75fb      	strb	r3, [r7, #23]
            break;
 80138b8:	e2e9      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	685b      	ldr	r3, [r3, #4]
 80138be:	4618      	mov	r0, r3
 80138c0:	f7fa f87a 	bl	800d9b8 <SecureElementSetDevEui>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	f000 82c6 	beq.w	8013e58 <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138cc:	2303      	movs	r3, #3
 80138ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138d0:	e2c2      	b.n	8013e58 <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7fa f89e 	bl	800da18 <SecureElementSetJoinEui>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	f000 82bc 	beq.w	8013e5c <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138e4:	2303      	movs	r3, #3
 80138e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138e8:	e2b8      	b.n	8013e5c <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	791a      	ldrb	r2, [r3, #4]
 80138ee:	4b5c      	ldr	r3, [pc, #368]	@ (8013a60 <LoRaMacMibSetRequestConfirm+0x310>)
 80138f0:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 80138f4:	e2cb      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	685b      	ldr	r3, [r3, #4]
 80138fa:	4a59      	ldr	r2, [pc, #356]	@ (8013a60 <LoRaMacMibSetRequestConfirm+0x310>)
 80138fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8013900:	e2c5      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8013902:	4b57      	ldr	r3, [pc, #348]	@ (8013a60 <LoRaMacMibSetRequestConfirm+0x310>)
 8013904:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	4619      	mov	r1, r3
 801390e:	4610      	mov	r0, r2
 8013910:	f7fa f8b2 	bl	800da78 <SecureElementSetDevAddr>
 8013914:	4603      	mov	r3, r0
 8013916:	2b00      	cmp	r3, #0
 8013918:	d002      	beq.n	8013920 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801391a:	2303      	movs	r3, #3
 801391c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801391e:	e2b6      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	4a4e      	ldr	r2, [pc, #312]	@ (8013a60 <LoRaMacMibSetRequestConfirm+0x310>)
 8013926:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 801392a:	e2b0      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d00b      	beq.n	801394c <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	4619      	mov	r1, r3
 801393a:	2000      	movs	r0, #0
 801393c:	f002 f8cc 	bl	8015ad8 <LoRaMacCryptoSetKey>
 8013940:	4603      	mov	r3, r0
 8013942:	2b00      	cmp	r3, #0
 8013944:	f000 828c 	beq.w	8013e60 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013948:	2311      	movs	r3, #17
 801394a:	e2ab      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801394c:	2303      	movs	r3, #3
 801394e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013950:	e286      	b.n	8013e60 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00b      	beq.n	8013972 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	685b      	ldr	r3, [r3, #4]
 801395e:	4619      	mov	r1, r3
 8013960:	2001      	movs	r0, #1
 8013962:	f002 f8b9 	bl	8015ad8 <LoRaMacCryptoSetKey>
 8013966:	4603      	mov	r3, r0
 8013968:	2b00      	cmp	r3, #0
 801396a:	f000 827b 	beq.w	8013e64 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801396e:	2311      	movs	r3, #17
 8013970:	e298      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013972:	2303      	movs	r3, #3
 8013974:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013976:	e275      	b.n	8013e64 <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00b      	beq.n	8013998 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	4619      	mov	r1, r3
 8013986:	2008      	movs	r0, #8
 8013988:	f002 f8a6 	bl	8015ad8 <LoRaMacCryptoSetKey>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	f000 826a 	beq.w	8013e68 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013994:	2311      	movs	r3, #17
 8013996:	e285      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013998:	2303      	movs	r3, #3
 801399a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801399c:	e264      	b.n	8013e68 <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d00b      	beq.n	80139be <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	4619      	mov	r1, r3
 80139ac:	2009      	movs	r0, #9
 80139ae:	f002 f893 	bl	8015ad8 <LoRaMacCryptoSetKey>
 80139b2:	4603      	mov	r3, r0
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f000 8259 	beq.w	8013e6c <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80139ba:	2311      	movs	r3, #17
 80139bc:	e272      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139be:	2303      	movs	r3, #3
 80139c0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80139c2:	e253      	b.n	8013e6c <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	685b      	ldr	r3, [r3, #4]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d00b      	beq.n	80139e4 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	4619      	mov	r1, r3
 80139d2:	200c      	movs	r0, #12
 80139d4:	f002 f880 	bl	8015ad8 <LoRaMacCryptoSetKey>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	f000 8248 	beq.w	8013e70 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80139e0:	2311      	movs	r3, #17
 80139e2:	e25f      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139e4:	2303      	movs	r3, #3
 80139e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80139e8:	e242      	b.n	8013e70 <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d00b      	beq.n	8013a0a <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	685b      	ldr	r3, [r3, #4]
 80139f6:	4619      	mov	r1, r3
 80139f8:	200d      	movs	r0, #13
 80139fa:	f002 f86d 	bl	8015ad8 <LoRaMacCryptoSetKey>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f000 8237 	beq.w	8013e74 <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a06:	2311      	movs	r3, #17
 8013a08:	e24c      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a0a:	2303      	movs	r3, #3
 8013a0c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013a0e:	e231      	b.n	8013e74 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d00b      	beq.n	8013a30 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	200e      	movs	r0, #14
 8013a20:	f002 f85a 	bl	8015ad8 <LoRaMacCryptoSetKey>
 8013a24:	4603      	mov	r3, r0
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	f000 8226 	beq.w	8013e78 <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a2c:	2311      	movs	r3, #17
 8013a2e:	e239      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a30:	2303      	movs	r3, #3
 8013a32:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013a34:	e220      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	685b      	ldr	r3, [r3, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d00b      	beq.n	8013a56 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	685b      	ldr	r3, [r3, #4]
 8013a42:	4619      	mov	r1, r3
 8013a44:	200f      	movs	r0, #15
 8013a46:	f002 f847 	bl	8015ad8 <LoRaMacCryptoSetKey>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	f000 8215 	beq.w	8013e7c <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a52:	2311      	movs	r3, #17
 8013a54:	e226      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a56:	2303      	movs	r3, #3
 8013a58:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013a5a:	e20f      	b.n	8013e7c <LoRaMacMibSetRequestConfirm+0x72c>
 8013a5c:	200006e0 	.word	0x200006e0
 8013a60:	20000c14 	.word	0x20000c14
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	791a      	ldrb	r2, [r3, #4]
 8013a68:	4bb2      	ldr	r3, [pc, #712]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a6a:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013a6e:	4bb2      	ldr	r3, [pc, #712]	@ (8013d38 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a72:	4ab0      	ldr	r2, [pc, #704]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a74:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8013a78:	4610      	mov	r0, r2
 8013a7a:	4798      	blx	r3
            Radio.Sleep( );
 8013a7c:	4bae      	ldr	r3, [pc, #696]	@ (8013d38 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a80:	4798      	blx	r3
            break;
 8013a82:	e204      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	791a      	ldrb	r2, [r3, #4]
 8013a88:	4baa      	ldr	r3, [pc, #680]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a8a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8013a8e:	e1fe      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	7a1b      	ldrb	r3, [r3, #8]
 8013a94:	b25b      	sxtb	r3, r3
 8013a96:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013a98:	4ba6      	ldr	r3, [pc, #664]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a9a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013a9e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8013aa0:	4ba4      	ldr	r3, [pc, #656]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013aa2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013aa6:	f107 0108 	add.w	r1, r7, #8
 8013aaa:	2207      	movs	r2, #7
 8013aac:	4618      	mov	r0, r3
 8013aae:	f002 fe3d 	bl	801672c <RegionVerify>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	f083 0301 	eor.w	r3, r3, #1
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d002      	beq.n	8013ac4 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013abe:	2303      	movs	r3, #3
 8013ac0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8013ac2:	e1e4      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013aca:	4b9a      	ldr	r3, [pc, #616]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013acc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013ad0:	f107 0108 	add.w	r1, r7, #8
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f002 fe28 	bl	801672c <RegionVerify>
 8013adc:	4603      	mov	r3, r0
 8013ade:	f083 0301 	eor.w	r3, r3, #1
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d002      	beq.n	8013aee <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ae8:	2303      	movs	r3, #3
 8013aea:	75fb      	strb	r3, [r7, #23]
            break;
 8013aec:	e1cf      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013aee:	4b91      	ldr	r3, [pc, #580]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	336c      	adds	r3, #108	@ 0x6c
 8013af4:	3204      	adds	r2, #4
 8013af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013afa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013afe:	e1c6      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	7a1b      	ldrb	r3, [r3, #8]
 8013b04:	b25b      	sxtb	r3, r3
 8013b06:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013b08:	4b8a      	ldr	r3, [pc, #552]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b0a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013b0e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013b10:	4b88      	ldr	r3, [pc, #544]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b12:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013b16:	f107 0108 	add.w	r1, r7, #8
 8013b1a:	2207      	movs	r2, #7
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f002 fe05 	bl	801672c <RegionVerify>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d008      	beq.n	8013b3a <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013b28:	4b82      	ldr	r3, [pc, #520]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b2a:	687a      	ldr	r2, [r7, #4]
 8013b2c:	33b4      	adds	r3, #180	@ 0xb4
 8013b2e:	3204      	adds	r2, #4
 8013b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b34:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b38:	e1a9      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b3a:	2303      	movs	r3, #3
 8013b3c:	75fb      	strb	r3, [r7, #23]
            break;
 8013b3e:	e1a6      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	7a1b      	ldrb	r3, [r3, #8]
 8013b44:	b25b      	sxtb	r3, r3
 8013b46:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013b48:	4b7a      	ldr	r3, [pc, #488]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b4a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013b4e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013b50:	4b78      	ldr	r3, [pc, #480]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b52:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013b56:	f107 0108 	add.w	r1, r7, #8
 8013b5a:	2207      	movs	r2, #7
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f002 fde5 	bl	801672c <RegionVerify>
 8013b62:	4603      	mov	r3, r0
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d019      	beq.n	8013b9c <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013b68:	4b72      	ldr	r3, [pc, #456]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b6a:	687a      	ldr	r2, [r7, #4]
 8013b6c:	3374      	adds	r3, #116	@ 0x74
 8013b6e:	3204      	adds	r2, #4
 8013b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b74:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013b78:	4b6e      	ldr	r3, [pc, #440]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b7a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	f040 817e 	bne.w	8013e80 <LoRaMacMibSetRequestConfirm+0x730>
 8013b84:	4b6b      	ldr	r3, [pc, #428]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b86:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	f000 8178 	beq.w	8013e80 <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013b90:	4b69      	ldr	r3, [pc, #420]	@ (8013d38 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b94:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013b96:	f7fe fc1d 	bl	80123d4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b9a:	e171      	b.n	8013e80 <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b9c:	2303      	movs	r3, #3
 8013b9e:	75fb      	strb	r3, [r7, #23]
            break;
 8013ba0:	e16e      	b.n	8013e80 <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	7a1b      	ldrb	r3, [r3, #8]
 8013ba6:	b25b      	sxtb	r3, r3
 8013ba8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013baa:	4b62      	ldr	r3, [pc, #392]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013bb0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013bb2:	4b60      	ldr	r3, [pc, #384]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bb4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013bb8:	f107 0108 	add.w	r1, r7, #8
 8013bbc:	2207      	movs	r2, #7
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f002 fdb4 	bl	801672c <RegionVerify>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d008      	beq.n	8013bdc <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013bca:	4b5a      	ldr	r3, [pc, #360]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	33bc      	adds	r3, #188	@ 0xbc
 8013bd0:	3204      	adds	r2, #4
 8013bd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bd6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013bda:	e158      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bdc:	2303      	movs	r3, #3
 8013bde:	75fb      	strb	r3, [r7, #23]
            break;
 8013be0:	e155      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013be8:	2301      	movs	r3, #1
 8013bea:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013bec:	4b51      	ldr	r3, [pc, #324]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bee:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013bf2:	f107 020c 	add.w	r2, r7, #12
 8013bf6:	4611      	mov	r1, r2
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f002 fdc0 	bl	801677e <RegionChanMaskSet>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	f083 0301 	eor.w	r3, r3, #1
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f000 813c 	beq.w	8013e84 <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c0c:	2303      	movs	r3, #3
 8013c0e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013c10:	e138      	b.n	8013e84 <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013c1c:	4b45      	ldr	r3, [pc, #276]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c1e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013c22:	f107 020c 	add.w	r2, r7, #12
 8013c26:	4611      	mov	r1, r2
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f002 fda8 	bl	801677e <RegionChanMaskSet>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	f083 0301 	eor.w	r3, r3, #1
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	f000 8126 	beq.w	8013e88 <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c3c:	2303      	movs	r3, #3
 8013c3e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013c40:	e122      	b.n	8013e88 <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	791b      	ldrb	r3, [r3, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d009      	beq.n	8013c5e <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013c4e:	2b0f      	cmp	r3, #15
 8013c50:	d805      	bhi.n	8013c5e <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	791a      	ldrb	r2, [r3, #4]
 8013c56:	4b37      	ldr	r3, [pc, #220]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c58:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c5c:	e117      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c5e:	2303      	movs	r3, #3
 8013c60:	75fb      	strb	r3, [r7, #23]
            break;
 8013c62:	e114      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	4a32      	ldr	r2, [pc, #200]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c6a:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8013c6c:	e10f      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	4a30      	ldr	r2, [pc, #192]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c74:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8013c76:	e10a      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8013c80:	e105      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	4a2b      	ldr	r2, [pc, #172]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c88:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8013c8a:	e100      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	4a28      	ldr	r2, [pc, #160]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013c92:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8013c94:	e0fb      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013c9c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8013c9e:	4b25      	ldr	r3, [pc, #148]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013ca0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013ca4:	f107 0108 	add.w	r1, r7, #8
 8013ca8:	2206      	movs	r2, #6
 8013caa:	4618      	mov	r0, r3
 8013cac:	f002 fd3e 	bl	801672c <RegionVerify>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d005      	beq.n	8013cc2 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013cb6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013cba:	4b1e      	ldr	r3, [pc, #120]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013cbc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013cc0:	e0e5      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cc2:	2303      	movs	r3, #3
 8013cc4:	75fb      	strb	r3, [r7, #23]
            break;
 8013cc6:	e0e2      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013cce:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013cd0:	4b18      	ldr	r3, [pc, #96]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013cd2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013cd6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013cd8:	4b16      	ldr	r3, [pc, #88]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013cda:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013cde:	f107 0108 	add.w	r1, r7, #8
 8013ce2:	2205      	movs	r2, #5
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f002 fd21 	bl	801672c <RegionVerify>
 8013cea:	4603      	mov	r3, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d005      	beq.n	8013cfc <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013cf0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013cf6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013cfa:	e0c8      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cfc:	2303      	movs	r3, #3
 8013cfe:	75fb      	strb	r3, [r7, #23]
            break;
 8013d00:	e0c5      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013d08:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013d0c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013d10:	f107 0108 	add.w	r1, r7, #8
 8013d14:	220a      	movs	r2, #10
 8013d16:	4618      	mov	r0, r3
 8013d18:	f002 fd08 	bl	801672c <RegionVerify>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d005      	beq.n	8013d2e <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013d22:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013d26:	4b03      	ldr	r3, [pc, #12]	@ (8013d34 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013d28:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d2c:	e0af      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d2e:	2303      	movs	r3, #3
 8013d30:	75fb      	strb	r3, [r7, #23]
            break;
 8013d32:	e0ac      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
 8013d34:	20000c14 	.word	0x20000c14
 8013d38:	0801e614 	.word	0x0801e614
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013d42:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013d44:	4b59      	ldr	r3, [pc, #356]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d46:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013d4a:	f107 0108 	add.w	r1, r7, #8
 8013d4e:	2209      	movs	r2, #9
 8013d50:	4618      	mov	r0, r3
 8013d52:	f002 fceb 	bl	801672c <RegionVerify>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d005      	beq.n	8013d68 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013d5c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013d60:	4b52      	ldr	r3, [pc, #328]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d66:	e092      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d68:	2303      	movs	r3, #3
 8013d6a:	75fb      	strb	r3, [r7, #23]
            break;
 8013d6c:	e08f      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	685b      	ldr	r3, [r3, #4]
 8013d72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8013d76:	d80a      	bhi.n	8013d8e <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	685b      	ldr	r3, [r3, #4]
 8013d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8013d82:	4b4a      	ldr	r3, [pc, #296]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013d88:	4a48      	ldr	r2, [pc, #288]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 8013d8c:	e07f      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d8e:	2303      	movs	r3, #3
 8013d90:	75fb      	strb	r3, [r7, #23]
            break;
 8013d92:	e07c      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	791a      	ldrb	r2, [r3, #4]
 8013d98:	4b44      	ldr	r3, [pc, #272]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013d9a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8013d9e:	4b43      	ldr	r3, [pc, #268]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013da0:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8013da4:	4b41      	ldr	r3, [pc, #260]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8013daa:	e070      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	685b      	ldr	r3, [r3, #4]
 8013db0:	4a3e      	ldr	r2, [pc, #248]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013db2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8013db6:	e06a      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013dbe:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8013dc2:	e064      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013dc4:	f7fe fd38 	bl	8012838 <RestoreNvmData>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	75fb      	strb	r3, [r7, #23]
            break;
 8013dcc:	e05f      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	799b      	ldrb	r3, [r3, #6]
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d80d      	bhi.n	8013df2 <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013dd6:	4a35      	ldr	r2, [pc, #212]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6858      	ldr	r0, [r3, #4]
 8013de4:	f001 fdda 	bl	801599c <LoRaMacCryptoSetLrWanVersion>
 8013de8:	4603      	mov	r3, r0
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d04e      	beq.n	8013e8c <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013dee:	2311      	movs	r3, #17
 8013df0:	e058      	b.n	8013ea4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013df2:	2303      	movs	r3, #3
 8013df4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013df6:	e049      	b.n	8013e8c <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	685b      	ldr	r3, [r3, #4]
 8013dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013dfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8013e02:	e044      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	791a      	ldrb	r2, [r3, #4]
 8013e08:	4b28      	ldr	r3, [pc, #160]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e0a:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 8013e0e:	e03e      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	889a      	ldrh	r2, [r3, #4]
 8013e14:	4b25      	ldr	r3, [pc, #148]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e16:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8013e1a:	e038      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	889a      	ldrh	r2, [r3, #4]
 8013e20:	4b22      	ldr	r3, [pc, #136]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e22:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8013e26:	e032      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	889a      	ldrh	r2, [r3, #4]
 8013e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e2e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8013e32:	e02c      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	889a      	ldrh	r2, [r3, #4]
 8013e38:	4b1c      	ldr	r3, [pc, #112]	@ (8013eac <LoRaMacMibSetRequestConfirm+0x75c>)
 8013e3a:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 8013e3e:	e026      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013e40:	2318      	movs	r3, #24
 8013e42:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013e44:	e023      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013e46:	2318      	movs	r3, #24
 8013e48:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013e4a:	e020      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f000 fd00 	bl	8014852 <LoRaMacMibClassBSetRequestConfirm>
 8013e52:	4603      	mov	r3, r0
 8013e54:	75fb      	strb	r3, [r7, #23]
            break;
 8013e56:	e01a      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e58:	bf00      	nop
 8013e5a:	e018      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e5c:	bf00      	nop
 8013e5e:	e016      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e60:	bf00      	nop
 8013e62:	e014      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e64:	bf00      	nop
 8013e66:	e012      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e68:	bf00      	nop
 8013e6a:	e010      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e6c:	bf00      	nop
 8013e6e:	e00e      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e70:	bf00      	nop
 8013e72:	e00c      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e74:	bf00      	nop
 8013e76:	e00a      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e78:	bf00      	nop
 8013e7a:	e008      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e7c:	bf00      	nop
 8013e7e:	e006      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e80:	bf00      	nop
 8013e82:	e004      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e84:	bf00      	nop
 8013e86:	e002      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e88:	bf00      	nop
 8013e8a:	e000      	b.n	8013e8e <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013e8c:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8013e8e:	7dfb      	ldrb	r3, [r7, #23]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d106      	bne.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013e94:	4a06      	ldr	r2, [pc, #24]	@ (8013eb0 <LoRaMacMibSetRequestConfirm+0x760>)
 8013e96:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013e9a:	f043 0320 	orr.w	r3, r3, #32
 8013e9e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8013ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3718      	adds	r7, #24
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	20000c14 	.word	0x20000c14
 8013eb0:	200006e0 	.word	0x200006e0

08013eb4 <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 8013ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8013ee8 <OnAbpJoinPendingTimerEvent+0x34>)
 8013ebe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013ec2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013ec6:	4a08      	ldr	r2, [pc, #32]	@ (8013ee8 <OnAbpJoinPendingTimerEvent+0x34>)
 8013ec8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 8013ecc:	4a06      	ldr	r2, [pc, #24]	@ (8013ee8 <OnAbpJoinPendingTimerEvent+0x34>)
 8013ece:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013ed2:	f043 0310 	orr.w	r3, r3, #16
 8013ed6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 8013eda:	f7fe fe5d 	bl	8012b98 <OnMacProcessNotify>
}
 8013ede:	bf00      	nop
 8013ee0:	3708      	adds	r7, #8
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	200006e0 	.word	0x200006e0

08013eec <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 8013ef2:	4b14      	ldr	r3, [pc, #80]	@ (8013f44 <AbpJoinPendingStart+0x58>)
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	f083 0301 	eor.w	r3, r3, #1
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d00b      	beq.n	8013f18 <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 8013f00:	4b10      	ldr	r3, [pc, #64]	@ (8013f44 <AbpJoinPendingStart+0x58>)
 8013f02:	2201      	movs	r2, #1
 8013f04:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 8013f06:	2300      	movs	r3, #0
 8013f08:	9300      	str	r3, [sp, #0]
 8013f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8013f48 <AbpJoinPendingStart+0x5c>)
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8013f12:	480e      	ldr	r0, [pc, #56]	@ (8013f4c <AbpJoinPendingStart+0x60>)
 8013f14:	f008 fea4 	bl	801cc60 <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 8013f18:	4b0d      	ldr	r3, [pc, #52]	@ (8013f50 <AbpJoinPendingStart+0x64>)
 8013f1a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013f22:	4a0b      	ldr	r2, [pc, #44]	@ (8013f50 <AbpJoinPendingStart+0x64>)
 8013f24:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 8013f28:	4808      	ldr	r0, [pc, #32]	@ (8013f4c <AbpJoinPendingStart+0x60>)
 8013f2a:	f008 ff3d 	bl	801cda8 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 8013f2e:	210a      	movs	r1, #10
 8013f30:	4806      	ldr	r0, [pc, #24]	@ (8013f4c <AbpJoinPendingStart+0x60>)
 8013f32:	f008 ffa9 	bl	801ce88 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 8013f36:	4805      	ldr	r0, [pc, #20]	@ (8013f4c <AbpJoinPendingStart+0x60>)
 8013f38:	f008 fec8 	bl	801cccc <UTIL_TIMER_Start>
}
 8013f3c:	bf00      	nop
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	20001834 	.word	0x20001834
 8013f48:	08013eb5 	.word	0x08013eb5
 8013f4c:	20000b7c 	.word	0x20000b7c
 8013f50:	200006e0 	.word	0x200006e0

08013f54 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08a      	sub	sp, #40	@ 0x28
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013f5c:	2302      	movs	r3, #2
 8013f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 8013f62:	2300      	movs	r3, #0
 8013f64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013f68:	2300      	movs	r3, #0
 8013f6a:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d101      	bne.n	8013f76 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f72:	2303      	movs	r3, #3
 8013f74:	e188      	b.n	8014288 <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013f7c:	f7fc fb14 	bl	80105a8 <LoRaMacIsBusy>
 8013f80:	4603      	mov	r3, r0
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d001      	beq.n	8013f8a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8013f86:	2301      	movs	r3, #1
 8013f88:	e17e      	b.n	8014288 <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013f8a:	f001 f99d 	bl	80152c8 <LoRaMacConfirmQueueIsFull>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d001      	beq.n	8013f98 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8013f94:	2301      	movs	r3, #1
 8013f96:	e177      	b.n	8014288 <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013f98:	f001 f98a 	bl	80152b0 <LoRaMacConfirmQueueGetCnt>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d104      	bne.n	8013fac <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013fa2:	2214      	movs	r2, #20
 8013fa4:	2100      	movs	r1, #0
 8013fa6:	48ba      	ldr	r0, [pc, #744]	@ (8014290 <LoRaMacMlmeRequest+0x33c>)
 8013fa8:	f004 fdec 	bl	8018b84 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013fac:	4bb9      	ldr	r3, [pc, #740]	@ (8014294 <LoRaMacMlmeRequest+0x340>)
 8013fae:	2201      	movs	r2, #1
 8013fb0:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013fb4:	4ab7      	ldr	r2, [pc, #732]	@ (8014294 <LoRaMacMlmeRequest+0x340>)
 8013fb6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013fba:	f043 0304 	orr.w	r3, r3, #4
 8013fbe:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013fca:	2301      	movs	r3, #1
 8013fcc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	3b01      	subs	r3, #1
 8013fe2:	2b0c      	cmp	r3, #12
 8013fe4:	f200 811e 	bhi.w	8014224 <LoRaMacMlmeRequest+0x2d0>
 8013fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8013ff0 <LoRaMacMlmeRequest+0x9c>)
 8013fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fee:	bf00      	nop
 8013ff0:	08014025 	.word	0x08014025
 8013ff4:	08014225 	.word	0x08014225
 8013ff8:	08014225 	.word	0x08014225
 8013ffc:	08014225 	.word	0x08014225
 8014000:	08014109 	.word	0x08014109
 8014004:	0801412d 	.word	0x0801412d
 8014008:	08014225 	.word	0x08014225
 801400c:	08014225 	.word	0x08014225
 8014010:	0801414b 	.word	0x0801414b
 8014014:	08014225 	.word	0x08014225
 8014018:	080141f3 	.word	0x080141f3
 801401c:	08014187 	.word	0x08014187
 8014020:	080141d1 	.word	0x080141d1
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014024:	4b9b      	ldr	r3, [pc, #620]	@ (8014294 <LoRaMacMlmeRequest+0x340>)
 8014026:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801402a:	f003 0320 	and.w	r3, r3, #32
 801402e:	2b00      	cmp	r3, #0
 8014030:	d001      	beq.n	8014036 <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 8014032:	2301      	movs	r3, #1
 8014034:	e128      	b.n	8014288 <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	791b      	ldrb	r3, [r3, #4]
 801403a:	2b02      	cmp	r3, #2
 801403c:	d135      	bne.n	80140aa <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 801403e:	2000      	movs	r0, #0
 8014040:	f7fe f85a 	bl	80120f8 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014044:	4b94      	ldr	r3, [pc, #592]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 8014046:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	795b      	ldrb	r3, [r3, #5]
 801404e:	b25b      	sxtb	r3, r3
 8014050:	2200      	movs	r2, #0
 8014052:	4619      	mov	r1, r3
 8014054:	f002 fc52 	bl	80168fc <RegionAlternateDr>
 8014058:	4603      	mov	r3, r0
 801405a:	461a      	mov	r2, r3
 801405c:	4b8e      	ldr	r3, [pc, #568]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 801405e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014068:	4b8b      	ldr	r3, [pc, #556]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 801406a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801406e:	2307      	movs	r3, #7
 8014070:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8014074:	20ff      	movs	r0, #255	@ 0xff
 8014076:	f7fd fdc3 	bl	8011c00 <SendReJoinReq>
 801407a:	4603      	mov	r3, r0
 801407c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8014080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 80cf 	beq.w	8014228 <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801408a:	4b83      	ldr	r3, [pc, #524]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 801408c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	795b      	ldrb	r3, [r3, #5]
 8014094:	b25b      	sxtb	r3, r3
 8014096:	2201      	movs	r2, #1
 8014098:	4619      	mov	r1, r3
 801409a:	f002 fc2f 	bl	80168fc <RegionAlternateDr>
 801409e:	4603      	mov	r3, r0
 80140a0:	461a      	mov	r2, r3
 80140a2:	4b7d      	ldr	r3, [pc, #500]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 80140a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80140a8:	e0be      	b.n	8014228 <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	791b      	ldrb	r3, [r3, #4]
 80140ae:	2b01      	cmp	r3, #1
 80140b0:	f040 80ba 	bne.w	8014228 <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80140b4:	4b78      	ldr	r3, [pc, #480]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 80140b6:	2200      	movs	r2, #0
 80140b8:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80140bc:	2302      	movs	r3, #2
 80140be:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80140c0:	4b75      	ldr	r3, [pc, #468]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 80140c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80140c6:	f107 020c 	add.w	r2, r7, #12
 80140ca:	4611      	mov	r1, r2
 80140cc:	4618      	mov	r0, r3
 80140ce:	f002 fb1b 	bl	8016708 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	791a      	ldrb	r2, [r3, #4]
 80140d6:	4b70      	ldr	r3, [pc, #448]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 80140d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80140dc:	2300      	movs	r3, #0
 80140de:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80140e2:	2301      	movs	r3, #1
 80140e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 80140e8:	f7fe fd56 	bl	8012b98 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80140ec:	4a69      	ldr	r2, [pc, #420]	@ (8014294 <LoRaMacMlmeRequest+0x340>)
 80140ee:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80140f2:	f043 0310 	orr.w	r3, r3, #16
 80140f6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 80140fa:	2301      	movs	r3, #1
 80140fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 8014100:	2300      	movs	r3, #0
 8014102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014106:	e08f      	b.n	8014228 <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014108:	2300      	movs	r3, #0
 801410a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801410e:	f107 031c 	add.w	r3, r7, #28
 8014112:	2200      	movs	r2, #0
 8014114:	4619      	mov	r1, r3
 8014116:	2002      	movs	r0, #2
 8014118:	f000 fd26 	bl	8014b68 <LoRaMacCommandsAddCmd>
 801411c:	4603      	mov	r3, r0
 801411e:	2b00      	cmp	r3, #0
 8014120:	f000 8084 	beq.w	801422c <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014124:	2313      	movs	r3, #19
 8014126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801412a:	e07f      	b.n	801422c <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	8898      	ldrh	r0, [r3, #4]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6899      	ldr	r1, [r3, #8]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801413a:	b2db      	uxtb	r3, r3
 801413c:	461a      	mov	r2, r3
 801413e:	f7fe fb5b 	bl	80127f8 <SetTxContinuousWave>
 8014142:	4603      	mov	r3, r0
 8014144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014148:	e077      	b.n	801423a <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801414a:	2300      	movs	r3, #0
 801414c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8014150:	f107 0308 	add.w	r3, r7, #8
 8014154:	4619      	mov	r1, r3
 8014156:	200d      	movs	r0, #13
 8014158:	f000 fd86 	bl	8014c68 <LoRaMacCommandsGetCmd>
 801415c:	4603      	mov	r3, r0
 801415e:	2b00      	cmp	r3, #0
 8014160:	d103      	bne.n	801416a <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 8014162:	2300      	movs	r3, #0
 8014164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8014168:	e062      	b.n	8014230 <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801416a:	f107 031c 	add.w	r3, r7, #28
 801416e:	2200      	movs	r2, #0
 8014170:	4619      	mov	r1, r3
 8014172:	200d      	movs	r0, #13
 8014174:	f000 fcf8 	bl	8014b68 <LoRaMacCommandsAddCmd>
 8014178:	4603      	mov	r3, r0
 801417a:	2b00      	cmp	r3, #0
 801417c:	d058      	beq.n	8014230 <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801417e:	2313      	movs	r3, #19
 8014180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014184:	e054      	b.n	8014230 <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014186:	4b44      	ldr	r3, [pc, #272]	@ (8014298 <LoRaMacMlmeRequest+0x344>)
 8014188:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801418c:	2b00      	cmp	r3, #0
 801418e:	d151      	bne.n	8014234 <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	791b      	ldrb	r3, [r3, #4]
 8014194:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	791b      	ldrb	r3, [r3, #4]
 801419c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80141a0:	b2db      	uxtb	r3, r3
 80141a2:	4618      	mov	r0, r3
 80141a4:	f000 fb2a 	bl	80147fc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80141a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80141ac:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80141ae:	2300      	movs	r3, #0
 80141b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80141b4:	f107 031c 	add.w	r3, r7, #28
 80141b8:	2201      	movs	r2, #1
 80141ba:	4619      	mov	r1, r3
 80141bc:	2010      	movs	r0, #16
 80141be:	f000 fcd3 	bl	8014b68 <LoRaMacCommandsAddCmd>
 80141c2:	4603      	mov	r3, r0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d035      	beq.n	8014234 <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141c8:	2313      	movs	r3, #19
 80141ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80141ce:	e031      	b.n	8014234 <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80141d0:	2300      	movs	r3, #0
 80141d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80141d6:	f107 031c 	add.w	r3, r7, #28
 80141da:	2200      	movs	r2, #0
 80141dc:	4619      	mov	r1, r3
 80141de:	2012      	movs	r0, #18
 80141e0:	f000 fcc2 	bl	8014b68 <LoRaMacCommandsAddCmd>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d026      	beq.n	8014238 <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141ea:	2313      	movs	r3, #19
 80141ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80141f0:	e022      	b.n	8014238 <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80141f2:	2301      	movs	r3, #1
 80141f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80141f8:	f000 fab6 	bl	8014768 <LoRaMacClassBIsAcquisitionInProgress>
 80141fc:	4603      	mov	r3, r0
 80141fe:	f083 0301 	eor.w	r3, r3, #1
 8014202:	b2db      	uxtb	r3, r3
 8014204:	2b00      	cmp	r3, #0
 8014206:	d009      	beq.n	801421c <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014208:	2000      	movs	r0, #0
 801420a:	f000 fa8f 	bl	801472c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801420e:	2000      	movs	r0, #0
 8014210:	f000 fab1 	bl	8014776 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014214:	2300      	movs	r3, #0
 8014216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801421a:	e00e      	b.n	801423a <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 801421c:	2301      	movs	r3, #1
 801421e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014222:	e00a      	b.n	801423a <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 8014224:	bf00      	nop
 8014226:	e008      	b.n	801423a <LoRaMacMlmeRequest+0x2e6>
            break;
 8014228:	bf00      	nop
 801422a:	e006      	b.n	801423a <LoRaMacMlmeRequest+0x2e6>
            break;
 801422c:	bf00      	nop
 801422e:	e004      	b.n	801423a <LoRaMacMlmeRequest+0x2e6>
            break;
 8014230:	bf00      	nop
 8014232:	e002      	b.n	801423a <LoRaMacMlmeRequest+0x2e6>
            break;
 8014234:	bf00      	nop
 8014236:	e000      	b.n	801423a <LoRaMacMlmeRequest+0x2e6>
            break;
 8014238:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801423a:	4b16      	ldr	r3, [pc, #88]	@ (8014294 <LoRaMacMlmeRequest+0x340>)
 801423c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014248:	2b00      	cmp	r3, #0
 801424a:	d010      	beq.n	801426e <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801424c:	f001 f830 	bl	80152b0 <LoRaMacConfirmQueueGetCnt>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d116      	bne.n	8014284 <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 8014256:	4b0f      	ldr	r3, [pc, #60]	@ (8014294 <LoRaMacMlmeRequest+0x340>)
 8014258:	2200      	movs	r2, #0
 801425a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801425e:	4a0d      	ldr	r2, [pc, #52]	@ (8014294 <LoRaMacMlmeRequest+0x340>)
 8014260:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014264:	f36f 0382 	bfc	r3, #2, #1
 8014268:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 801426c:	e00a      	b.n	8014284 <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801426e:	f107 0320 	add.w	r3, r7, #32
 8014272:	4618      	mov	r0, r3
 8014274:	f000 fec8 	bl	8015008 <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 8014278:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801427c:	2b00      	cmp	r3, #0
 801427e:	d001      	beq.n	8014284 <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 8014280:	f7ff fe34 	bl	8013eec <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 8014284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8014288:	4618      	mov	r0, r3
 801428a:	3728      	adds	r7, #40	@ 0x28
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}
 8014290:	20000b34 	.word	0x20000b34
 8014294:	200006e0 	.word	0x200006e0
 8014298:	20000c14 	.word	0x20000c14

0801429c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801429c:	b5b0      	push	{r4, r5, r7, lr}
 801429e:	b092      	sub	sp, #72	@ 0x48
 80142a0:	af02      	add	r7, sp, #8
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	460b      	mov	r3, r1
 80142a6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80142a8:	2302      	movs	r3, #2
 80142aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80142ae:	2300      	movs	r3, #0
 80142b0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 80142b4:	2300      	movs	r3, #0
 80142b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80142b8:	2300      	movs	r3, #0
 80142ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80142be:	2300      	movs	r3, #0
 80142c0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d101      	bne.n	80142ce <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80142ca:	2303      	movs	r3, #3
 80142cc:	e113      	b.n	80144f6 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	2200      	movs	r2, #0
 80142d2:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80142d4:	f7fc f968 	bl	80105a8 <LoRaMacIsBusy>
 80142d8:	4603      	mov	r3, r0
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d001      	beq.n	80142e2 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80142de:	2301      	movs	r3, #1
 80142e0:	e109      	b.n	80144f6 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f107 040c 	add.w	r4, r7, #12
 80142e8:	461d      	mov	r5, r3
 80142ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142ee:	682b      	ldr	r3, [r5, #0]
 80142f0:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80142f2:	2300      	movs	r3, #0
 80142f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80142f8:	2214      	movs	r2, #20
 80142fa:	2100      	movs	r1, #0
 80142fc:	4880      	ldr	r0, [pc, #512]	@ (8014500 <LoRaMacMcpsRequest+0x264>)
 80142fe:	f004 fc41 	bl	8018b84 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014302:	4b80      	ldr	r3, [pc, #512]	@ (8014504 <LoRaMacMcpsRequest+0x268>)
 8014304:	2201      	movs	r2, #1
 8014306:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801430a:	4b7f      	ldr	r3, [pc, #508]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 801430c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8014310:	2b02      	cmp	r3, #2
 8014312:	d111      	bne.n	8014338 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8014314:	4b7c      	ldr	r3, [pc, #496]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 8014316:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801431a:	2b02      	cmp	r3, #2
 801431c:	d10c      	bne.n	8014338 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801431e:	4b7a      	ldr	r3, [pc, #488]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 8014320:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8014324:	f083 0301 	eor.w	r3, r3, #1
 8014328:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801432a:	2b00      	cmp	r3, #0
 801432c:	d004      	beq.n	8014338 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801432e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8014330:	2b00      	cmp	r3, #0
 8014332:	d101      	bne.n	8014338 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8014334:	2301      	movs	r3, #1
 8014336:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8014338:	7b3b      	ldrb	r3, [r7, #12]
 801433a:	2b03      	cmp	r3, #3
 801433c:	d030      	beq.n	80143a0 <LoRaMacMcpsRequest+0x104>
 801433e:	2b03      	cmp	r3, #3
 8014340:	dc3f      	bgt.n	80143c2 <LoRaMacMcpsRequest+0x126>
 8014342:	2b00      	cmp	r3, #0
 8014344:	d002      	beq.n	801434c <LoRaMacMcpsRequest+0xb0>
 8014346:	2b01      	cmp	r3, #1
 8014348:	d015      	beq.n	8014376 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801434a:	e03a      	b.n	80143c2 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 801434c:	2301      	movs	r3, #1
 801434e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014352:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014356:	2202      	movs	r2, #2
 8014358:	f362 1347 	bfi	r3, r2, #5, #3
 801435c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8014360:	7c3b      	ldrb	r3, [r7, #16]
 8014362:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801436a:	8b3b      	ldrh	r3, [r7, #24]
 801436c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801436e:	7ebb      	ldrb	r3, [r7, #26]
 8014370:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014374:	e026      	b.n	80143c4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014376:	2301      	movs	r3, #1
 8014378:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801437c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014380:	2204      	movs	r2, #4
 8014382:	f362 1347 	bfi	r3, r2, #5, #3
 8014386:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 801438a:	7c3b      	ldrb	r3, [r7, #16]
 801438c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8014394:	8b3b      	ldrh	r3, [r7, #24]
 8014396:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8014398:	7ebb      	ldrb	r3, [r7, #26]
 801439a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801439e:	e011      	b.n	80143c4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80143a0:	2301      	movs	r3, #1
 80143a2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80143a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80143aa:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80143ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80143b6:	8abb      	ldrh	r3, [r7, #20]
 80143b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80143ba:	7dbb      	ldrb	r3, [r7, #22]
 80143bc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80143c0:	e000      	b.n	80143c4 <LoRaMacMcpsRequest+0x128>
            break;
 80143c2:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80143c4:	2302      	movs	r3, #2
 80143c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80143ca:	4b4f      	ldr	r3, [pc, #316]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 80143cc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80143d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143d4:	4b4c      	ldr	r3, [pc, #304]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 80143d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80143da:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80143de:	4611      	mov	r1, r2
 80143e0:	4618      	mov	r0, r3
 80143e2:	f002 f968 	bl	80166b6 <RegionGetPhyParam>
 80143e6:	4603      	mov	r3, r0
 80143e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80143ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143ec:	b25b      	sxtb	r3, r3
 80143ee:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80143f2:	4293      	cmp	r3, r2
 80143f4:	bfb8      	it	lt
 80143f6:	4613      	movlt	r3, r2
 80143f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80143fc:	4b42      	ldr	r3, [pc, #264]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 80143fe:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8014402:	4a41      	ldr	r2, [pc, #260]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 8014404:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8014408:	4a3f      	ldr	r2, [pc, #252]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 801440a:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801440e:	4618      	mov	r0, r3
 8014410:	f7fc fa66 	bl	80108e0 <CheckForMinimumAbpDatarate>
 8014414:	4603      	mov	r3, r0
 8014416:	2b00      	cmp	r3, #0
 8014418:	d002      	beq.n	8014420 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801441c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8014420:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8014424:	2b00      	cmp	r3, #0
 8014426:	d05f      	beq.n	80144e8 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014428:	4b37      	ldr	r3, [pc, #220]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 801442a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801442e:	f083 0301 	eor.w	r3, r3, #1
 8014432:	b2db      	uxtb	r3, r3
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10e      	bne.n	8014456 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014438:	4b33      	ldr	r3, [pc, #204]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 801443a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801443e:	4a32      	ldr	r2, [pc, #200]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 8014440:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8014444:	4a30      	ldr	r2, [pc, #192]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 8014446:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801444a:	4618      	mov	r0, r3
 801444c:	f7fc fa48 	bl	80108e0 <CheckForMinimumAbpDatarate>
 8014450:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014452:	2b00      	cmp	r3, #0
 8014454:	d01c      	beq.n	8014490 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8014456:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801445a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801445e:	4b2a      	ldr	r3, [pc, #168]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 8014460:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014464:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014468:	4b27      	ldr	r3, [pc, #156]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 801446a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801446e:	f107 0120 	add.w	r1, r7, #32
 8014472:	2205      	movs	r2, #5
 8014474:	4618      	mov	r0, r3
 8014476:	f002 f959 	bl	801672c <RegionVerify>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d005      	beq.n	801448c <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014480:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8014484:	4b20      	ldr	r3, [pc, #128]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 8014486:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801448a:	e001      	b.n	8014490 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801448c:	2303      	movs	r3, #3
 801448e:	e032      	b.n	80144f6 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8014490:	4b1d      	ldr	r3, [pc, #116]	@ (8014508 <LoRaMacMcpsRequest+0x26c>)
 8014492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014496:	4a1b      	ldr	r2, [pc, #108]	@ (8014504 <LoRaMacMcpsRequest+0x268>)
 8014498:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 801449c:	4611      	mov	r1, r2
 801449e:	4618      	mov	r0, r3
 80144a0:	f7fc fb0a 	bl	8010ab8 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80144a4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80144a6:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80144aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80144ae:	78fb      	ldrb	r3, [r7, #3]
 80144b0:	9300      	str	r3, [sp, #0]
 80144b2:	4613      	mov	r3, r2
 80144b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80144b6:	f7fd fac1 	bl	8011a3c <Send>
 80144ba:	4603      	mov	r3, r0
 80144bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80144c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d10b      	bne.n	80144e0 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80144c8:	7b3a      	ldrb	r2, [r7, #12]
 80144ca:	4b0e      	ldr	r3, [pc, #56]	@ (8014504 <LoRaMacMcpsRequest+0x268>)
 80144cc:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80144d0:	4a0c      	ldr	r2, [pc, #48]	@ (8014504 <LoRaMacMcpsRequest+0x268>)
 80144d2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80144d6:	f043 0301 	orr.w	r3, r3, #1
 80144da:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80144de:	e003      	b.n	80144e8 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80144e0:	4b08      	ldr	r3, [pc, #32]	@ (8014504 <LoRaMacMcpsRequest+0x268>)
 80144e2:	2200      	movs	r2, #0
 80144e4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80144e8:	4b06      	ldr	r3, [pc, #24]	@ (8014504 <LoRaMacMcpsRequest+0x268>)
 80144ea:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	611a      	str	r2, [r3, #16]

    return status;
 80144f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3740      	adds	r7, #64	@ 0x40
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bdb0      	pop	{r4, r5, r7, pc}
 80144fe:	bf00      	nop
 8014500:	20000b20 	.word	0x20000b20
 8014504:	200006e0 	.word	0x200006e0
 8014508:	20000c14 	.word	0x20000c14

0801450c <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b084      	sub	sp, #16
 8014510:	af00      	add	r7, sp, #0
 8014512:	4603      	mov	r3, r0
 8014514:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014516:	79fb      	ldrb	r3, [r7, #7]
 8014518:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801451a:	4b0d      	ldr	r3, [pc, #52]	@ (8014550 <LoRaMacTestSetDutyCycleOn+0x44>)
 801451c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014520:	f107 010c 	add.w	r1, r7, #12
 8014524:	220f      	movs	r2, #15
 8014526:	4618      	mov	r0, r3
 8014528:	f002 f900 	bl	801672c <RegionVerify>
 801452c:	4603      	mov	r3, r0
 801452e:	2b00      	cmp	r3, #0
 8014530:	d00a      	beq.n	8014548 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8014532:	4a07      	ldr	r2, [pc, #28]	@ (8014550 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014534:	79fb      	ldrb	r3, [r7, #7]
 8014536:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801453a:	4a06      	ldr	r2, [pc, #24]	@ (8014554 <LoRaMacTestSetDutyCycleOn+0x48>)
 801453c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014540:	f043 0320 	orr.w	r3, r3, #32
 8014544:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8014548:	bf00      	nop
 801454a:	3710      	adds	r7, #16
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	20000c14 	.word	0x20000c14
 8014554:	200006e0 	.word	0x200006e0

08014558 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8014558:	b580      	push	{r7, lr}
 801455a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 801455c:	f7fe fe30 	bl	80131c0 <LoRaMacStop>
 8014560:	4603      	mov	r3, r0
 8014562:	2b00      	cmp	r3, #0
 8014564:	d112      	bne.n	801458c <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8014566:	480b      	ldr	r0, [pc, #44]	@ (8014594 <LoRaMacDeInitialization+0x3c>)
 8014568:	f008 fc1e 	bl	801cda8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801456c:	480a      	ldr	r0, [pc, #40]	@ (8014598 <LoRaMacDeInitialization+0x40>)
 801456e:	f008 fc1b 	bl	801cda8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014572:	480a      	ldr	r0, [pc, #40]	@ (801459c <LoRaMacDeInitialization+0x44>)
 8014574:	f008 fc18 	bl	801cda8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014578:	f000 f94a 	bl	8014810 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 801457c:	2000      	movs	r0, #0
 801457e:	f7fd fdbb 	bl	80120f8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014582:	4b07      	ldr	r3, [pc, #28]	@ (80145a0 <LoRaMacDeInitialization+0x48>)
 8014584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014586:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8014588:	2300      	movs	r3, #0
 801458a:	e000      	b.n	801458e <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801458c:	2301      	movs	r3, #1
    }
}
 801458e:	4618      	mov	r0, r3
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	20000a48 	.word	0x20000a48
 8014598:	20000a60 	.word	0x20000a60
 801459c:	20000a78 	.word	0x20000a78
 80145a0:	0801e614 	.word	0x0801e614

080145a4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b08c      	sub	sp, #48	@ 0x30
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	60b9      	str	r1, [r7, #8]
 80145ae:	607a      	str	r2, [r7, #4]
 80145b0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80145b2:	2300      	movs	r3, #0
 80145b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	7b1b      	ldrb	r3, [r3, #12]
 80145bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	7b5b      	ldrb	r3, [r3, #13]
 80145c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	7b9b      	ldrb	r3, [r3, #14]
 80145cc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	685a      	ldr	r2, [r3, #4]
 80145d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145d6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	785b      	ldrb	r3, [r3, #1]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	f000 8088 	beq.w	80146f2 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80145e2:	2302      	movs	r3, #2
 80145e4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	7bdb      	ldrb	r3, [r3, #15]
 80145ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	7c1b      	ldrb	r3, [r3, #16]
 80145f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80145f8:	4611      	mov	r1, r2
 80145fa:	4618      	mov	r0, r3
 80145fc:	f002 f85b 	bl	80166b6 <RegionGetPhyParam>
 8014600:	4603      	mov	r3, r0
 8014602:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8014604:	6a3b      	ldr	r3, [r7, #32]
 8014606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 801460a:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 801460e:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8014612:	4293      	cmp	r3, r2
 8014614:	bfb8      	it	lt
 8014616:	4613      	movlt	r3, r2
 8014618:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	68fa      	ldr	r2, [r7, #12]
 8014622:	8912      	ldrh	r2, [r2, #8]
 8014624:	4293      	cmp	r3, r2
 8014626:	d302      	bcc.n	801462e <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8014628:	2301      	movs	r3, #1
 801462a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	685b      	ldr	r3, [r3, #4]
 8014632:	68fa      	ldr	r2, [r7, #12]
 8014634:	8912      	ldrh	r2, [r2, #8]
 8014636:	4611      	mov	r1, r2
 8014638:	68fa      	ldr	r2, [r7, #12]
 801463a:	8952      	ldrh	r2, [r2, #10]
 801463c:	440a      	add	r2, r1
 801463e:	4293      	cmp	r3, r2
 8014640:	d30f      	bcc.n	8014662 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8014642:	230a      	movs	r3, #10
 8014644:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	7c1b      	ldrb	r3, [r3, #16]
 801464c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014650:	4611      	mov	r1, r2
 8014652:	4618      	mov	r0, r3
 8014654:	f002 f82f 	bl	80166b6 <RegionGetPhyParam>
 8014658:	4603      	mov	r3, r0
 801465a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 801465c:	6a3b      	ldr	r3, [r7, #32]
 801465e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	68fa      	ldr	r2, [r7, #12]
 8014668:	8912      	ldrh	r2, [r2, #8]
 801466a:	4611      	mov	r1, r2
 801466c:	68fa      	ldr	r2, [r7, #12]
 801466e:	8952      	ldrh	r2, [r2, #10]
 8014670:	0052      	lsls	r2, r2, #1
 8014672:	440a      	add	r2, r1
 8014674:	4293      	cmp	r3, r2
 8014676:	d33c      	bcc.n	80146f2 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	685b      	ldr	r3, [r3, #4]
 801467c:	68fa      	ldr	r2, [r7, #12]
 801467e:	8912      	ldrh	r2, [r2, #8]
 8014680:	1a9b      	subs	r3, r3, r2
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	8952      	ldrh	r2, [r2, #10]
 8014686:	fbb3 f1f2 	udiv	r1, r3, r2
 801468a:	fb01 f202 	mul.w	r2, r1, r2
 801468e:	1a9b      	subs	r3, r3, r2
 8014690:	2b00      	cmp	r3, #0
 8014692:	d12e      	bne.n	80146f2 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8014694:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8014698:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801469c:	429a      	cmp	r2, r3
 801469e:	d110      	bne.n	80146c2 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d009      	beq.n	80146bc <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80146a8:	2302      	movs	r3, #2
 80146aa:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	7c1b      	ldrb	r3, [r3, #16]
 80146b0:	f107 0210 	add.w	r2, r7, #16
 80146b4:	4611      	mov	r1, r2
 80146b6:	4618      	mov	r0, r3
 80146b8:	f002 f826 	bl	8016708 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80146bc:	2301      	movs	r3, #1
 80146be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80146c2:	2321      	movs	r3, #33	@ 0x21
 80146c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80146c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80146cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	7bdb      	ldrb	r3, [r3, #15]
 80146d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	7c1b      	ldrb	r3, [r3, #16]
 80146dc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80146e0:	4611      	mov	r1, r2
 80146e2:	4618      	mov	r0, r3
 80146e4:	f001 ffe7 	bl	80166b6 <RegionGetPhyParam>
 80146e8:	4603      	mov	r3, r0
 80146ea:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80146ec:	6a3b      	ldr	r3, [r7, #32]
 80146ee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80146f8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8014700:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014708:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801470a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801470e:	4618      	mov	r0, r3
 8014710:	3730      	adds	r7, #48	@ 0x30
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014716:	b480      	push	{r7}
 8014718:	b085      	sub	sp, #20
 801471a:	af00      	add	r7, sp, #0
 801471c:	60f8      	str	r0, [r7, #12]
 801471e:	60b9      	str	r1, [r7, #8]
 8014720:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014722:	bf00      	nop
 8014724:	3714      	adds	r7, #20
 8014726:	46bd      	mov	sp, r7
 8014728:	bc80      	pop	{r7}
 801472a:	4770      	bx	lr

0801472c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
 8014732:	4603      	mov	r3, r0
 8014734:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014736:	bf00      	nop
 8014738:	370c      	adds	r7, #12
 801473a:	46bd      	mov	sp, r7
 801473c:	bc80      	pop	{r7}
 801473e:	4770      	bx	lr

08014740 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
 8014746:	4603      	mov	r3, r0
 8014748:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801474a:	bf00      	nop
 801474c:	370c      	adds	r7, #12
 801474e:	46bd      	mov	sp, r7
 8014750:	bc80      	pop	{r7}
 8014752:	4770      	bx	lr

08014754 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014754:	b480      	push	{r7}
 8014756:	b083      	sub	sp, #12
 8014758:	af00      	add	r7, sp, #0
 801475a:	4603      	mov	r3, r0
 801475c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801475e:	bf00      	nop
 8014760:	370c      	adds	r7, #12
 8014762:	46bd      	mov	sp, r7
 8014764:	bc80      	pop	{r7}
 8014766:	4770      	bx	lr

08014768 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014768:	b480      	push	{r7}
 801476a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801476c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801476e:	4618      	mov	r0, r3
 8014770:	46bd      	mov	sp, r7
 8014772:	bc80      	pop	{r7}
 8014774:	4770      	bx	lr

08014776 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014776:	b480      	push	{r7}
 8014778:	b083      	sub	sp, #12
 801477a:	af00      	add	r7, sp, #0
 801477c:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801477e:	bf00      	nop
 8014780:	370c      	adds	r7, #12
 8014782:	46bd      	mov	sp, r7
 8014784:	bc80      	pop	{r7}
 8014786:	4770      	bx	lr

08014788 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014790:	bf00      	nop
 8014792:	370c      	adds	r7, #12
 8014794:	46bd      	mov	sp, r7
 8014796:	bc80      	pop	{r7}
 8014798:	4770      	bx	lr

0801479a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801479a:	b480      	push	{r7}
 801479c:	b083      	sub	sp, #12
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147a2:	bf00      	nop
 80147a4:	370c      	adds	r7, #12
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bc80      	pop	{r7}
 80147aa:	4770      	bx	lr

080147ac <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80147ac:	b480      	push	{r7}
 80147ae:	b083      	sub	sp, #12
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
 80147b4:	460b      	mov	r3, r1
 80147b6:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80147b8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	370c      	adds	r7, #12
 80147be:	46bd      	mov	sp, r7
 80147c0:	bc80      	pop	{r7}
 80147c2:	4770      	bx	lr

080147c4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80147c4:	b480      	push	{r7}
 80147c6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147c8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bc80      	pop	{r7}
 80147d0:	4770      	bx	lr

080147d2 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80147d2:	b480      	push	{r7}
 80147d4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147d6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147d8:	4618      	mov	r0, r3
 80147da:	46bd      	mov	sp, r7
 80147dc:	bc80      	pop	{r7}
 80147de:	4770      	bx	lr

080147e0 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80147e0:	b480      	push	{r7}
 80147e2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bc80      	pop	{r7}
 80147ec:	4770      	bx	lr

080147ee <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80147ee:	b480      	push	{r7}
 80147f0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80147f2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bc80      	pop	{r7}
 80147fa:	4770      	bx	lr

080147fc <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80147fc:	b480      	push	{r7}
 80147fe:	b083      	sub	sp, #12
 8014800:	af00      	add	r7, sp, #0
 8014802:	4603      	mov	r3, r0
 8014804:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014806:	bf00      	nop
 8014808:	370c      	adds	r7, #12
 801480a:	46bd      	mov	sp, r7
 801480c:	bc80      	pop	{r7}
 801480e:	4770      	bx	lr

08014810 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014810:	b480      	push	{r7}
 8014812:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014814:	bf00      	nop
 8014816:	46bd      	mov	sp, r7
 8014818:	bc80      	pop	{r7}
 801481a:	4770      	bx	lr

0801481c <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801481c:	b480      	push	{r7}
 801481e:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014820:	bf00      	nop
 8014822:	46bd      	mov	sp, r7
 8014824:	bc80      	pop	{r7}
 8014826:	4770      	bx	lr

08014828 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
 801482e:	4603      	mov	r3, r0
 8014830:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014832:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014834:	4618      	mov	r0, r3
 8014836:	370c      	adds	r7, #12
 8014838:	46bd      	mov	sp, r7
 801483a:	bc80      	pop	{r7}
 801483c:	4770      	bx	lr

0801483e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801483e:	b480      	push	{r7}
 8014840:	b083      	sub	sp, #12
 8014842:	af00      	add	r7, sp, #0
 8014844:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014846:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014848:	4618      	mov	r0, r3
 801484a:	370c      	adds	r7, #12
 801484c:	46bd      	mov	sp, r7
 801484e:	bc80      	pop	{r7}
 8014850:	4770      	bx	lr

08014852 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014852:	b480      	push	{r7}
 8014854:	b083      	sub	sp, #12
 8014856:	af00      	add	r7, sp, #0
 8014858:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801485a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801485c:	4618      	mov	r0, r3
 801485e:	370c      	adds	r7, #12
 8014860:	46bd      	mov	sp, r7
 8014862:	bc80      	pop	{r7}
 8014864:	4770      	bx	lr

08014866 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014866:	b480      	push	{r7}
 8014868:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801486a:	bf00      	nop
 801486c:	46bd      	mov	sp, r7
 801486e:	bc80      	pop	{r7}
 8014870:	4770      	bx	lr

08014872 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014872:	b480      	push	{r7}
 8014874:	b083      	sub	sp, #12
 8014876:	af00      	add	r7, sp, #0
 8014878:	4603      	mov	r3, r0
 801487a:	6039      	str	r1, [r7, #0]
 801487c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801487e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014880:	4618      	mov	r0, r3
 8014882:	370c      	adds	r7, #12
 8014884:	46bd      	mov	sp, r7
 8014886:	bc80      	pop	{r7}
 8014888:	4770      	bx	lr

0801488a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801488a:	b480      	push	{r7}
 801488c:	b083      	sub	sp, #12
 801488e:	af00      	add	r7, sp, #0
 8014890:	4603      	mov	r3, r0
 8014892:	603a      	str	r2, [r7, #0]
 8014894:	80fb      	strh	r3, [r7, #6]
 8014896:	460b      	mov	r3, r1
 8014898:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801489a:	bf00      	nop
 801489c:	370c      	adds	r7, #12
 801489e:	46bd      	mov	sp, r7
 80148a0:	bc80      	pop	{r7}
 80148a2:	4770      	bx	lr

080148a4 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80148a4:	b480      	push	{r7}
 80148a6:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148a8:	bf00      	nop
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bc80      	pop	{r7}
 80148ae:	4770      	bx	lr

080148b0 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80148b0:	b480      	push	{r7}
 80148b2:	b083      	sub	sp, #12
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80148b8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	370c      	adds	r7, #12
 80148be:	46bd      	mov	sp, r7
 80148c0:	bc80      	pop	{r7}
 80148c2:	4770      	bx	lr

080148c4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80148c4:	b480      	push	{r7}
 80148c6:	b083      	sub	sp, #12
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80148cc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	370c      	adds	r7, #12
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bc80      	pop	{r7}
 80148d6:	4770      	bx	lr

080148d8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80148d8:	b480      	push	{r7}
 80148da:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148dc:	bf00      	nop
 80148de:	46bd      	mov	sp, r7
 80148e0:	bc80      	pop	{r7}
 80148e2:	4770      	bx	lr

080148e4 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	460b      	mov	r3, r1
 80148ee:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148f0:	bf00      	nop
 80148f2:	370c      	adds	r7, #12
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bc80      	pop	{r7}
 80148f8:	4770      	bx	lr

080148fa <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80148fa:	b480      	push	{r7}
 80148fc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80148fe:	bf00      	nop
 8014900:	46bd      	mov	sp, r7
 8014902:	bc80      	pop	{r7}
 8014904:	4770      	bx	lr

08014906 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014906:	b480      	push	{r7}
 8014908:	b085      	sub	sp, #20
 801490a:	af00      	add	r7, sp, #0
 801490c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014912:	2300      	movs	r3, #0
 8014914:	81fb      	strh	r3, [r7, #14]
 8014916:	e00a      	b.n	801492e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8014918:	89fb      	ldrh	r3, [r7, #14]
 801491a:	68ba      	ldr	r2, [r7, #8]
 801491c:	4413      	add	r3, r2
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d001      	beq.n	8014928 <IsSlotFree+0x22>
        {
            return false;
 8014924:	2300      	movs	r3, #0
 8014926:	e006      	b.n	8014936 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014928:	89fb      	ldrh	r3, [r7, #14]
 801492a:	3301      	adds	r3, #1
 801492c:	81fb      	strh	r3, [r7, #14]
 801492e:	89fb      	ldrh	r3, [r7, #14]
 8014930:	2b0f      	cmp	r3, #15
 8014932:	d9f1      	bls.n	8014918 <IsSlotFree+0x12>
        }
    }
    return true;
 8014934:	2301      	movs	r3, #1
}
 8014936:	4618      	mov	r0, r3
 8014938:	3714      	adds	r7, #20
 801493a:	46bd      	mov	sp, r7
 801493c:	bc80      	pop	{r7}
 801493e:	4770      	bx	lr

08014940 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014946:	2300      	movs	r3, #0
 8014948:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801494a:	e007      	b.n	801495c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801494c:	79fb      	ldrb	r3, [r7, #7]
 801494e:	3301      	adds	r3, #1
 8014950:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014952:	79fb      	ldrb	r3, [r7, #7]
 8014954:	2b20      	cmp	r3, #32
 8014956:	d101      	bne.n	801495c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014958:	2300      	movs	r3, #0
 801495a:	e012      	b.n	8014982 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801495c:	79fb      	ldrb	r3, [r7, #7]
 801495e:	011b      	lsls	r3, r3, #4
 8014960:	3308      	adds	r3, #8
 8014962:	4a0a      	ldr	r2, [pc, #40]	@ (801498c <MallocNewMacCommandSlot+0x4c>)
 8014964:	4413      	add	r3, r2
 8014966:	4618      	mov	r0, r3
 8014968:	f7ff ffcd 	bl	8014906 <IsSlotFree>
 801496c:	4603      	mov	r3, r0
 801496e:	f083 0301 	eor.w	r3, r3, #1
 8014972:	b2db      	uxtb	r3, r3
 8014974:	2b00      	cmp	r3, #0
 8014976:	d1e9      	bne.n	801494c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014978:	79fb      	ldrb	r3, [r7, #7]
 801497a:	011b      	lsls	r3, r3, #4
 801497c:	3308      	adds	r3, #8
 801497e:	4a03      	ldr	r2, [pc, #12]	@ (801498c <MallocNewMacCommandSlot+0x4c>)
 8014980:	4413      	add	r3, r2
}
 8014982:	4618      	mov	r0, r3
 8014984:	3708      	adds	r7, #8
 8014986:	46bd      	mov	sp, r7
 8014988:	bd80      	pop	{r7, pc}
 801498a:	bf00      	nop
 801498c:	20001838 	.word	0x20001838

08014990 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d101      	bne.n	80149a2 <FreeMacCommandSlot+0x12>
    {
        return false;
 801499e:	2300      	movs	r3, #0
 80149a0:	e005      	b.n	80149ae <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80149a2:	2210      	movs	r2, #16
 80149a4:	2100      	movs	r1, #0
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f004 f8ec 	bl	8018b84 <memset1>

    return true;
 80149ac:	2301      	movs	r3, #1
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3708      	adds	r7, #8
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}

080149b6 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80149b6:	b480      	push	{r7}
 80149b8:	b083      	sub	sp, #12
 80149ba:	af00      	add	r7, sp, #0
 80149bc:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d101      	bne.n	80149c8 <LinkedListInit+0x12>
    {
        return false;
 80149c4:	2300      	movs	r3, #0
 80149c6:	e006      	b.n	80149d6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2200      	movs	r2, #0
 80149cc:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2200      	movs	r2, #0
 80149d2:	605a      	str	r2, [r3, #4]

    return true;
 80149d4:	2301      	movs	r3, #1
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	370c      	adds	r7, #12
 80149da:	46bd      	mov	sp, r7
 80149dc:	bc80      	pop	{r7}
 80149de:	4770      	bx	lr

080149e0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d002      	beq.n	80149f6 <LinkedListAdd+0x16>
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d101      	bne.n	80149fa <LinkedListAdd+0x1a>
    {
        return false;
 80149f6:	2300      	movs	r3, #0
 80149f8:	e015      	b.n	8014a26 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d102      	bne.n	8014a08 <LinkedListAdd+0x28>
    {
        list->First = element;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	683a      	ldr	r2, [r7, #0]
 8014a06:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d003      	beq.n	8014a18 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	685b      	ldr	r3, [r3, #4]
 8014a14:	683a      	ldr	r2, [r7, #0]
 8014a16:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	683a      	ldr	r2, [r7, #0]
 8014a22:	605a      	str	r2, [r3, #4]

    return true;
 8014a24:	2301      	movs	r3, #1
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	370c      	adds	r7, #12
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bc80      	pop	{r7}
 8014a2e:	4770      	bx	lr

08014a30 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014a30:	b480      	push	{r7}
 8014a32:	b085      	sub	sp, #20
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d002      	beq.n	8014a46 <LinkedListGetPrevious+0x16>
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d101      	bne.n	8014a4a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014a46:	2300      	movs	r3, #0
 8014a48:	e016      	b.n	8014a78 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014a50:	683a      	ldr	r2, [r7, #0]
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d00c      	beq.n	8014a72 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014a58:	e002      	b.n	8014a60 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d007      	beq.n	8014a76 <LinkedListGetPrevious+0x46>
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	683a      	ldr	r2, [r7, #0]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d1f4      	bne.n	8014a5a <LinkedListGetPrevious+0x2a>
 8014a70:	e001      	b.n	8014a76 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014a72:	2300      	movs	r3, #0
 8014a74:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014a76:	68fb      	ldr	r3, [r7, #12]
}
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3714      	adds	r7, #20
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bc80      	pop	{r7}
 8014a80:	4770      	bx	lr

08014a82 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014a82:	b580      	push	{r7, lr}
 8014a84:	b084      	sub	sp, #16
 8014a86:	af00      	add	r7, sp, #0
 8014a88:	6078      	str	r0, [r7, #4]
 8014a8a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d002      	beq.n	8014a98 <LinkedListRemove+0x16>
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d101      	bne.n	8014a9c <LinkedListRemove+0x1a>
    {
        return false;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	e020      	b.n	8014ade <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014a9c:	6839      	ldr	r1, [r7, #0]
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f7ff ffc6 	bl	8014a30 <LinkedListGetPrevious>
 8014aa4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	683a      	ldr	r2, [r7, #0]
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d103      	bne.n	8014ab8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	681a      	ldr	r2, [r3, #0]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	685b      	ldr	r3, [r3, #4]
 8014abc:	683a      	ldr	r2, [r7, #0]
 8014abe:	429a      	cmp	r2, r3
 8014ac0:	d102      	bne.n	8014ac8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	601a      	str	r2, [r3, #0]

    return true;
 8014adc:	2301      	movs	r3, #1
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3710      	adds	r7, #16
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
	...

08014ae8 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	4603      	mov	r3, r0
 8014af0:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8014af2:	79fb      	ldrb	r3, [r7, #7]
 8014af4:	2b11      	cmp	r3, #17
 8014af6:	bf8c      	ite	hi
 8014af8:	2201      	movhi	r2, #1
 8014afa:	2200      	movls	r2, #0
 8014afc:	b2d2      	uxtb	r2, r2
 8014afe:	2a00      	cmp	r2, #0
 8014b00:	d10d      	bne.n	8014b1e <IsSticky+0x36>
 8014b02:	4a0a      	ldr	r2, [pc, #40]	@ (8014b2c <IsSticky+0x44>)
 8014b04:	fa22 f303 	lsr.w	r3, r2, r3
 8014b08:	f003 0301 	and.w	r3, r3, #1
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	bf14      	ite	ne
 8014b10:	2301      	movne	r3, #1
 8014b12:	2300      	moveq	r3, #0
 8014b14:	b2db      	uxtb	r3, r3
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d001      	beq.n	8014b1e <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8014b1a:	2301      	movs	r3, #1
 8014b1c:	e000      	b.n	8014b20 <IsSticky+0x38>
        default:
            return false;
 8014b1e:	2300      	movs	r3, #0
    }
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	370c      	adds	r7, #12
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bc80      	pop	{r7}
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	00020720 	.word	0x00020720

08014b30 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8014b30:	b480      	push	{r7}
 8014b32:	b083      	sub	sp, #12
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	4603      	mov	r3, r0
 8014b38:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8014b3a:	2300      	movs	r3, #0
    }
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	370c      	adds	r7, #12
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bc80      	pop	{r7}
 8014b44:	4770      	bx	lr
	...

08014b48 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8014b4c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8014b50:	2100      	movs	r1, #0
 8014b52:	4804      	ldr	r0, [pc, #16]	@ (8014b64 <LoRaMacCommandsInit+0x1c>)
 8014b54:	f004 f816 	bl	8018b84 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014b58:	4802      	ldr	r0, [pc, #8]	@ (8014b64 <LoRaMacCommandsInit+0x1c>)
 8014b5a:	f7ff ff2c 	bl	80149b6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8014b5e:	2300      	movs	r3, #0
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	bd80      	pop	{r7, pc}
 8014b64:	20001838 	.word	0x20001838

08014b68 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b086      	sub	sp, #24
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	4603      	mov	r3, r0
 8014b70:	60b9      	str	r1, [r7, #8]
 8014b72:	607a      	str	r2, [r7, #4]
 8014b74:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d101      	bne.n	8014b80 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	e03b      	b.n	8014bf8 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014b80:	f7ff fede 	bl	8014940 <MallocNewMacCommandSlot>
 8014b84:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d101      	bne.n	8014b90 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014b8c:	2302      	movs	r3, #2
 8014b8e:	e033      	b.n	8014bf8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014b90:	6979      	ldr	r1, [r7, #20]
 8014b92:	481b      	ldr	r0, [pc, #108]	@ (8014c00 <LoRaMacCommandsAddCmd+0x98>)
 8014b94:	f7ff ff24 	bl	80149e0 <LinkedListAdd>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	f083 0301 	eor.w	r3, r3, #1
 8014b9e:	b2db      	uxtb	r3, r3
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d001      	beq.n	8014ba8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014ba4:	2305      	movs	r3, #5
 8014ba6:	e027      	b.n	8014bf8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	7bfa      	ldrb	r2, [r7, #15]
 8014bac:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	3305      	adds	r3, #5
 8014bb8:	687a      	ldr	r2, [r7, #4]
 8014bba:	b292      	uxth	r2, r2
 8014bbc:	68b9      	ldr	r1, [r7, #8]
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f003 ffa5 	bl	8018b0e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014bc4:	7bfb      	ldrb	r3, [r7, #15]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7ff ff8e 	bl	8014ae8 <IsSticky>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	461a      	mov	r2, r3
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8014bd4:	7bfb      	ldrb	r3, [r7, #15]
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7ff ffaa 	bl	8014b30 <IsConfirmationRequired>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	461a      	mov	r2, r3
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014be4:	4b06      	ldr	r3, [pc, #24]	@ (8014c00 <LoRaMacCommandsAddCmd+0x98>)
 8014be6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	4413      	add	r3, r2
 8014bee:	3301      	adds	r3, #1
 8014bf0:	4a03      	ldr	r2, [pc, #12]	@ (8014c00 <LoRaMacCommandsAddCmd+0x98>)
 8014bf2:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8014bf6:	2300      	movs	r3, #0
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3718      	adds	r7, #24
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	20001838 	.word	0x20001838

08014c04 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d101      	bne.n	8014c16 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014c12:	2301      	movs	r3, #1
 8014c14:	e021      	b.n	8014c5a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014c16:	6879      	ldr	r1, [r7, #4]
 8014c18:	4812      	ldr	r0, [pc, #72]	@ (8014c64 <LoRaMacCommandsRemoveCmd+0x60>)
 8014c1a:	f7ff ff32 	bl	8014a82 <LinkedListRemove>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	f083 0301 	eor.w	r3, r3, #1
 8014c24:	b2db      	uxtb	r3, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d001      	beq.n	8014c2e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014c2a:	2303      	movs	r3, #3
 8014c2c:	e015      	b.n	8014c5a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8014c64 <LoRaMacCommandsRemoveCmd+0x60>)
 8014c30:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	689b      	ldr	r3, [r3, #8]
 8014c38:	1ad3      	subs	r3, r2, r3
 8014c3a:	3b01      	subs	r3, #1
 8014c3c:	4a09      	ldr	r2, [pc, #36]	@ (8014c64 <LoRaMacCommandsRemoveCmd+0x60>)
 8014c3e:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f7ff fea4 	bl	8014990 <FreeMacCommandSlot>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	f083 0301 	eor.w	r3, r3, #1
 8014c4e:	b2db      	uxtb	r3, r3
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d001      	beq.n	8014c58 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014c54:	2305      	movs	r3, #5
 8014c56:	e000      	b.n	8014c5a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014c58:	2300      	movs	r3, #0
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3708      	adds	r7, #8
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	20001838 	.word	0x20001838

08014c68 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b085      	sub	sp, #20
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	4603      	mov	r3, r0
 8014c70:	6039      	str	r1, [r7, #0]
 8014c72:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014c74:	4b0e      	ldr	r3, [pc, #56]	@ (8014cb0 <LoRaMacCommandsGetCmd+0x48>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014c7a:	e002      	b.n	8014c82 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d004      	beq.n	8014c92 <LoRaMacCommandsGetCmd+0x2a>
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	791b      	ldrb	r3, [r3, #4]
 8014c8c:	79fa      	ldrb	r2, [r7, #7]
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d1f4      	bne.n	8014c7c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	68fa      	ldr	r2, [r7, #12]
 8014c96:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d101      	bne.n	8014ca2 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014c9e:	2303      	movs	r3, #3
 8014ca0:	e000      	b.n	8014ca4 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8014ca2:	2300      	movs	r3, #0
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3714      	adds	r7, #20
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bc80      	pop	{r7}
 8014cac:	4770      	bx	lr
 8014cae:	bf00      	nop
 8014cb0:	20001838 	.word	0x20001838

08014cb4 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b082      	sub	sp, #8
 8014cb8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014cba:	4b0f      	ldr	r3, [pc, #60]	@ (8014cf8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014cc0:	e012      	b.n	8014ce8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	7b1b      	ldrb	r3, [r3, #12]
 8014cc6:	f083 0301 	eor.w	r3, r3, #1
 8014cca:	b2db      	uxtb	r3, r3
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d008      	beq.n	8014ce2 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f7ff ff94 	bl	8014c04 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	607b      	str	r3, [r7, #4]
 8014ce0:	e002      	b.n	8014ce8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d1e9      	bne.n	8014cc2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014cee:	2300      	movs	r3, #0
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3708      	adds	r7, #8
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	20001838 	.word	0x20001838

08014cfc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b082      	sub	sp, #8
 8014d00:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014d02:	4b13      	ldr	r3, [pc, #76]	@ (8014d50 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014d08:	e01a      	b.n	8014d40 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	791b      	ldrb	r3, [r3, #4]
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7ff fee7 	bl	8014ae8 <IsSticky>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d00d      	beq.n	8014d3c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	791b      	ldrb	r3, [r3, #4]
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7ff ff03 	bl	8014b30 <IsConfirmationRequired>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	f083 0301 	eor.w	r3, r3, #1
 8014d30:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d002      	beq.n	8014d3c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f7ff ff64 	bl	8014c04 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d1e1      	bne.n	8014d0a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014d46:	2300      	movs	r3, #0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	20001838 	.word	0x20001838

08014d54 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014d54:	b480      	push	{r7}
 8014d56:	b083      	sub	sp, #12
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d101      	bne.n	8014d66 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d62:	2301      	movs	r3, #1
 8014d64:	e005      	b.n	8014d72 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014d66:	4b05      	ldr	r3, [pc, #20]	@ (8014d7c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014d68:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014d70:	2300      	movs	r3, #0
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	370c      	adds	r7, #12
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bc80      	pop	{r7}
 8014d7a:	4770      	bx	lr
 8014d7c:	20001838 	.word	0x20001838

08014d80 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b088      	sub	sp, #32
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	60f8      	str	r0, [r7, #12]
 8014d88:	60b9      	str	r1, [r7, #8]
 8014d8a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8014d8c:	4b25      	ldr	r3, [pc, #148]	@ (8014e24 <LoRaMacCommandsSerializeCmds+0xa4>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014d92:	2300      	movs	r3, #0
 8014d94:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d002      	beq.n	8014da2 <LoRaMacCommandsSerializeCmds+0x22>
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d126      	bne.n	8014df0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014da2:	2301      	movs	r3, #1
 8014da4:	e039      	b.n	8014e1a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014da6:	7efb      	ldrb	r3, [r7, #27]
 8014da8:	68fa      	ldr	r2, [r7, #12]
 8014daa:	1ad2      	subs	r2, r2, r3
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	689b      	ldr	r3, [r3, #8]
 8014db0:	3301      	adds	r3, #1
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d320      	bcc.n	8014df8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014db6:	7efb      	ldrb	r3, [r7, #27]
 8014db8:	1c5a      	adds	r2, r3, #1
 8014dba:	76fa      	strb	r2, [r7, #27]
 8014dbc:	461a      	mov	r2, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	69fa      	ldr	r2, [r7, #28]
 8014dc4:	7912      	ldrb	r2, [r2, #4]
 8014dc6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014dc8:	7efb      	ldrb	r3, [r7, #27]
 8014dca:	687a      	ldr	r2, [r7, #4]
 8014dcc:	18d0      	adds	r0, r2, r3
 8014dce:	69fb      	ldr	r3, [r7, #28]
 8014dd0:	1d59      	adds	r1, r3, #5
 8014dd2:	69fb      	ldr	r3, [r7, #28]
 8014dd4:	689b      	ldr	r3, [r3, #8]
 8014dd6:	b29b      	uxth	r3, r3
 8014dd8:	461a      	mov	r2, r3
 8014dda:	f003 fe98 	bl	8018b0e <memcpy1>
            itr += curElement->PayloadSize;
 8014dde:	69fb      	ldr	r3, [r7, #28]
 8014de0:	689b      	ldr	r3, [r3, #8]
 8014de2:	b2da      	uxtb	r2, r3
 8014de4:	7efb      	ldrb	r3, [r7, #27]
 8014de6:	4413      	add	r3, r2
 8014de8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014dea:	69fb      	ldr	r3, [r7, #28]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014df0:	69fb      	ldr	r3, [r7, #28]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d1d7      	bne.n	8014da6 <LoRaMacCommandsSerializeCmds+0x26>
 8014df6:	e009      	b.n	8014e0c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014df8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014dfa:	e007      	b.n	8014e0c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014e02:	69f8      	ldr	r0, [r7, #28]
 8014e04:	f7ff fefe 	bl	8014c04 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d1f4      	bne.n	8014dfc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014e12:	68b8      	ldr	r0, [r7, #8]
 8014e14:	f7ff ff9e 	bl	8014d54 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014e18:	2300      	movs	r3, #0
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3720      	adds	r7, #32
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	20001838 	.word	0x20001838

08014e28 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014e28:	b480      	push	{r7}
 8014e2a:	b085      	sub	sp, #20
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	4603      	mov	r3, r0
 8014e30:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014e32:	2300      	movs	r3, #0
 8014e34:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014e36:	79fb      	ldrb	r3, [r7, #7]
 8014e38:	3b02      	subs	r3, #2
 8014e3a:	2b11      	cmp	r3, #17
 8014e3c:	d850      	bhi.n	8014ee0 <LoRaMacCommandsGetCmdSize+0xb8>
 8014e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8014e44 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e44:	08014e8d 	.word	0x08014e8d
 8014e48:	08014e93 	.word	0x08014e93
 8014e4c:	08014e99 	.word	0x08014e99
 8014e50:	08014e9f 	.word	0x08014e9f
 8014e54:	08014ea5 	.word	0x08014ea5
 8014e58:	08014eab 	.word	0x08014eab
 8014e5c:	08014eb1 	.word	0x08014eb1
 8014e60:	08014eb7 	.word	0x08014eb7
 8014e64:	08014ebd 	.word	0x08014ebd
 8014e68:	08014ee1 	.word	0x08014ee1
 8014e6c:	08014ee1 	.word	0x08014ee1
 8014e70:	08014ec3 	.word	0x08014ec3
 8014e74:	08014ee1 	.word	0x08014ee1
 8014e78:	08014ee1 	.word	0x08014ee1
 8014e7c:	08014ec9 	.word	0x08014ec9
 8014e80:	08014ecf 	.word	0x08014ecf
 8014e84:	08014ed5 	.word	0x08014ed5
 8014e88:	08014edb 	.word	0x08014edb
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014e8c:	2303      	movs	r3, #3
 8014e8e:	73fb      	strb	r3, [r7, #15]
            break;
 8014e90:	e027      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014e92:	2305      	movs	r3, #5
 8014e94:	73fb      	strb	r3, [r7, #15]
            break;
 8014e96:	e024      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014e98:	2302      	movs	r3, #2
 8014e9a:	73fb      	strb	r3, [r7, #15]
            break;
 8014e9c:	e021      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014e9e:	2305      	movs	r3, #5
 8014ea0:	73fb      	strb	r3, [r7, #15]
            break;
 8014ea2:	e01e      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	73fb      	strb	r3, [r7, #15]
            break;
 8014ea8:	e01b      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014eaa:	2306      	movs	r3, #6
 8014eac:	73fb      	strb	r3, [r7, #15]
            break;
 8014eae:	e018      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014eb0:	2302      	movs	r3, #2
 8014eb2:	73fb      	strb	r3, [r7, #15]
            break;
 8014eb4:	e015      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014eb6:	2302      	movs	r3, #2
 8014eb8:	73fb      	strb	r3, [r7, #15]
            break;
 8014eba:	e012      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014ebc:	2305      	movs	r3, #5
 8014ebe:	73fb      	strb	r3, [r7, #15]
            break;
 8014ec0:	e00f      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014ec2:	2306      	movs	r3, #6
 8014ec4:	73fb      	strb	r3, [r7, #15]
            break;
 8014ec6:	e00c      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014ec8:	2301      	movs	r3, #1
 8014eca:	73fb      	strb	r3, [r7, #15]
            break;
 8014ecc:	e009      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014ece:	2305      	movs	r3, #5
 8014ed0:	73fb      	strb	r3, [r7, #15]
            break;
 8014ed2:	e006      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014ed4:	2304      	movs	r3, #4
 8014ed6:	73fb      	strb	r3, [r7, #15]
            break;
 8014ed8:	e003      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014eda:	2304      	movs	r3, #4
 8014edc:	73fb      	strb	r3, [r7, #15]
            break;
 8014ede:	e000      	b.n	8014ee2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014ee0:	bf00      	nop
        }
    }
    return cidSize;
 8014ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3714      	adds	r7, #20
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bc80      	pop	{r7}
 8014eec:	4770      	bx	lr
 8014eee:	bf00      	nop

08014ef0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b083      	sub	sp, #12
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	4a07      	ldr	r2, [pc, #28]	@ (8014f18 <IncreaseBufferPointer+0x28>)
 8014efc:	4293      	cmp	r3, r2
 8014efe:	d102      	bne.n	8014f06 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014f00:	4b06      	ldr	r3, [pc, #24]	@ (8014f1c <IncreaseBufferPointer+0x2c>)
 8014f02:	607b      	str	r3, [r7, #4]
 8014f04:	e002      	b.n	8014f0c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	3304      	adds	r3, #4
 8014f0a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014f0c:	687b      	ldr	r3, [r7, #4]
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	370c      	adds	r7, #12
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bc80      	pop	{r7}
 8014f16:	4770      	bx	lr
 8014f18:	20001a60 	.word	0x20001a60
 8014f1c:	20001a50 	.word	0x20001a50

08014f20 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	4603      	mov	r3, r0
 8014f28:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8014f2a:	79fb      	ldrb	r3, [r7, #7]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d101      	bne.n	8014f34 <IsListEmpty+0x14>
    {
        return true;
 8014f30:	2301      	movs	r3, #1
 8014f32:	e000      	b.n	8014f36 <IsListEmpty+0x16>
    }
    return false;
 8014f34:	2300      	movs	r3, #0
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	370c      	adds	r7, #12
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bc80      	pop	{r7}
 8014f3e:	4770      	bx	lr

08014f40 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014f40:	b480      	push	{r7}
 8014f42:	b083      	sub	sp, #12
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	4603      	mov	r3, r0
 8014f48:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014f4a:	79fb      	ldrb	r3, [r7, #7]
 8014f4c:	2b04      	cmp	r3, #4
 8014f4e:	d901      	bls.n	8014f54 <IsListFull+0x14>
    {
        return true;
 8014f50:	2301      	movs	r3, #1
 8014f52:	e000      	b.n	8014f56 <IsListFull+0x16>
    }
    return false;
 8014f54:	2300      	movs	r3, #0
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	370c      	adds	r7, #12
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bc80      	pop	{r7}
 8014f5e:	4770      	bx	lr

08014f60 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	4603      	mov	r3, r0
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	607a      	str	r2, [r7, #4]
 8014f6c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014f72:	4b13      	ldr	r3, [pc, #76]	@ (8014fc0 <GetElement+0x60>)
 8014f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f7ff ffd1 	bl	8014f20 <IsListEmpty>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d001      	beq.n	8014f88 <GetElement+0x28>
    {
        return NULL;
 8014f84:	2300      	movs	r3, #0
 8014f86:	e017      	b.n	8014fb8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014f88:	2300      	movs	r3, #0
 8014f8a:	74fb      	strb	r3, [r7, #19]
 8014f8c:	e00d      	b.n	8014faa <GetElement+0x4a>
    {
        if( element->Request == request )
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	7bfa      	ldrb	r2, [r7, #15]
 8014f94:	429a      	cmp	r2, r3
 8014f96:	d101      	bne.n	8014f9c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	e00d      	b.n	8014fb8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014f9c:	6978      	ldr	r0, [r7, #20]
 8014f9e:	f7ff ffa7 	bl	8014ef0 <IncreaseBufferPointer>
 8014fa2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014fa4:	7cfb      	ldrb	r3, [r7, #19]
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	74fb      	strb	r3, [r7, #19]
 8014faa:	4b05      	ldr	r3, [pc, #20]	@ (8014fc0 <GetElement+0x60>)
 8014fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014fb0:	7cfa      	ldrb	r2, [r7, #19]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d3eb      	bcc.n	8014f8e <GetElement+0x2e>
    }

    return NULL;
 8014fb6:	2300      	movs	r3, #0
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3718      	adds	r7, #24
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	20001a44 	.word	0x20001a44

08014fc4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8015000 <LoRaMacConfirmQueueInit+0x3c>)
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8015000 <LoRaMacConfirmQueueInit+0x3c>)
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014fda:	4b09      	ldr	r3, [pc, #36]	@ (8015000 <LoRaMacConfirmQueueInit+0x3c>)
 8014fdc:	4a09      	ldr	r2, [pc, #36]	@ (8015004 <LoRaMacConfirmQueueInit+0x40>)
 8014fde:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014fe0:	4b07      	ldr	r3, [pc, #28]	@ (8015000 <LoRaMacConfirmQueueInit+0x3c>)
 8014fe2:	4a08      	ldr	r2, [pc, #32]	@ (8015004 <LoRaMacConfirmQueueInit+0x40>)
 8014fe4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014fe6:	2214      	movs	r2, #20
 8014fe8:	21ff      	movs	r1, #255	@ 0xff
 8014fea:	4806      	ldr	r0, [pc, #24]	@ (8015004 <LoRaMacConfirmQueueInit+0x40>)
 8014fec:	f003 fdca 	bl	8018b84 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014ff0:	4b03      	ldr	r3, [pc, #12]	@ (8015000 <LoRaMacConfirmQueueInit+0x3c>)
 8014ff2:	2201      	movs	r2, #1
 8014ff4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8014ff8:	bf00      	nop
 8014ffa:	3708      	adds	r7, #8
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}
 8015000:	20001a44 	.word	0x20001a44
 8015004:	20001a50 	.word	0x20001a50

08015008 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015010:	4b19      	ldr	r3, [pc, #100]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 8015012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015016:	4618      	mov	r0, r3
 8015018:	f7ff ff92 	bl	8014f40 <IsListFull>
 801501c:	4603      	mov	r3, r0
 801501e:	2b00      	cmp	r3, #0
 8015020:	d001      	beq.n	8015026 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8015022:	2300      	movs	r3, #0
 8015024:	e024      	b.n	8015070 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015026:	4b14      	ldr	r3, [pc, #80]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	687a      	ldr	r2, [r7, #4]
 801502c:	7812      	ldrb	r2, [r2, #0]
 801502e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015030:	4b11      	ldr	r3, [pc, #68]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 8015032:	689b      	ldr	r3, [r3, #8]
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	7852      	ldrb	r2, [r2, #1]
 8015038:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801503a:	4b0f      	ldr	r3, [pc, #60]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	687a      	ldr	r2, [r7, #4]
 8015040:	78d2      	ldrb	r2, [r2, #3]
 8015042:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8015044:	4b0c      	ldr	r3, [pc, #48]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 8015046:	689b      	ldr	r3, [r3, #8]
 8015048:	687a      	ldr	r2, [r7, #4]
 801504a:	7892      	ldrb	r2, [r2, #2]
 801504c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801504e:	4b0a      	ldr	r3, [pc, #40]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 8015050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015054:	3301      	adds	r3, #1
 8015056:	b2da      	uxtb	r2, r3
 8015058:	4b07      	ldr	r3, [pc, #28]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 801505a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801505e:	4b06      	ldr	r3, [pc, #24]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 8015060:	689b      	ldr	r3, [r3, #8]
 8015062:	4618      	mov	r0, r3
 8015064:	f7ff ff44 	bl	8014ef0 <IncreaseBufferPointer>
 8015068:	4603      	mov	r3, r0
 801506a:	4a03      	ldr	r2, [pc, #12]	@ (8015078 <LoRaMacConfirmQueueAdd+0x70>)
 801506c:	6093      	str	r3, [r2, #8]

    return true;
 801506e:	2301      	movs	r3, #1
}
 8015070:	4618      	mov	r0, r3
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}
 8015078:	20001a44 	.word	0x20001a44

0801507c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801507c:	b580      	push	{r7, lr}
 801507e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015080:	4b0e      	ldr	r3, [pc, #56]	@ (80150bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015086:	4618      	mov	r0, r3
 8015088:	f7ff ff4a 	bl	8014f20 <IsListEmpty>
 801508c:	4603      	mov	r3, r0
 801508e:	2b00      	cmp	r3, #0
 8015090:	d001      	beq.n	8015096 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8015092:	2300      	movs	r3, #0
 8015094:	e010      	b.n	80150b8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015096:	4b09      	ldr	r3, [pc, #36]	@ (80150bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015098:	f893 3020 	ldrb.w	r3, [r3, #32]
 801509c:	3b01      	subs	r3, #1
 801509e:	b2da      	uxtb	r2, r3
 80150a0:	4b06      	ldr	r3, [pc, #24]	@ (80150bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80150a2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80150a6:	4b05      	ldr	r3, [pc, #20]	@ (80150bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7ff ff20 	bl	8014ef0 <IncreaseBufferPointer>
 80150b0:	4603      	mov	r3, r0
 80150b2:	4a02      	ldr	r2, [pc, #8]	@ (80150bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80150b4:	6053      	str	r3, [r2, #4]

    return true;
 80150b6:	2301      	movs	r3, #1
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	bd80      	pop	{r7, pc}
 80150bc:	20001a44 	.word	0x20001a44

080150c0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b084      	sub	sp, #16
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	4603      	mov	r3, r0
 80150c8:	460a      	mov	r2, r1
 80150ca:	71fb      	strb	r3, [r7, #7]
 80150cc:	4613      	mov	r3, r2
 80150ce:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80150d0:	2300      	movs	r3, #0
 80150d2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80150d4:	4b10      	ldr	r3, [pc, #64]	@ (8015118 <LoRaMacConfirmQueueSetStatus+0x58>)
 80150d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80150da:	4618      	mov	r0, r3
 80150dc:	f7ff ff20 	bl	8014f20 <IsListEmpty>
 80150e0:	4603      	mov	r3, r0
 80150e2:	f083 0301 	eor.w	r3, r3, #1
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d011      	beq.n	8015110 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80150ec:	4b0a      	ldr	r3, [pc, #40]	@ (8015118 <LoRaMacConfirmQueueSetStatus+0x58>)
 80150ee:	6859      	ldr	r1, [r3, #4]
 80150f0:	4b09      	ldr	r3, [pc, #36]	@ (8015118 <LoRaMacConfirmQueueSetStatus+0x58>)
 80150f2:	689a      	ldr	r2, [r3, #8]
 80150f4:	79bb      	ldrb	r3, [r7, #6]
 80150f6:	4618      	mov	r0, r3
 80150f8:	f7ff ff32 	bl	8014f60 <GetElement>
 80150fc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d005      	beq.n	8015110 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	79fa      	ldrb	r2, [r7, #7]
 8015108:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	2201      	movs	r2, #1
 801510e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015110:	bf00      	nop
 8015112:	3710      	adds	r7, #16
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	20001a44 	.word	0x20001a44

0801511c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b084      	sub	sp, #16
 8015120:	af00      	add	r7, sp, #0
 8015122:	4603      	mov	r3, r0
 8015124:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8015126:	2300      	movs	r3, #0
 8015128:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801512a:	4b10      	ldr	r3, [pc, #64]	@ (801516c <LoRaMacConfirmQueueGetStatus+0x50>)
 801512c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015130:	4618      	mov	r0, r3
 8015132:	f7ff fef5 	bl	8014f20 <IsListEmpty>
 8015136:	4603      	mov	r3, r0
 8015138:	f083 0301 	eor.w	r3, r3, #1
 801513c:	b2db      	uxtb	r3, r3
 801513e:	2b00      	cmp	r3, #0
 8015140:	d00e      	beq.n	8015160 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015142:	4b0a      	ldr	r3, [pc, #40]	@ (801516c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015144:	6859      	ldr	r1, [r3, #4]
 8015146:	4b09      	ldr	r3, [pc, #36]	@ (801516c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015148:	689a      	ldr	r2, [r3, #8]
 801514a:	79fb      	ldrb	r3, [r7, #7]
 801514c:	4618      	mov	r0, r3
 801514e:	f7ff ff07 	bl	8014f60 <GetElement>
 8015152:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d002      	beq.n	8015160 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	785b      	ldrb	r3, [r3, #1]
 801515e:	e000      	b.n	8015162 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015160:	2301      	movs	r3, #1
}
 8015162:	4618      	mov	r0, r3
 8015164:	3710      	adds	r7, #16
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	20001a44 	.word	0x20001a44

08015170 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b084      	sub	sp, #16
 8015174:	af00      	add	r7, sp, #0
 8015176:	4603      	mov	r3, r0
 8015178:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801517a:	4b16      	ldr	r3, [pc, #88]	@ (80151d4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801517c:	685b      	ldr	r3, [r3, #4]
 801517e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015180:	4a14      	ldr	r2, [pc, #80]	@ (80151d4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015182:	79fb      	ldrb	r3, [r7, #7]
 8015184:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015188:	4b12      	ldr	r3, [pc, #72]	@ (80151d4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801518a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801518e:	4618      	mov	r0, r3
 8015190:	f7ff fec6 	bl	8014f20 <IsListEmpty>
 8015194:	4603      	mov	r3, r0
 8015196:	f083 0301 	eor.w	r3, r3, #1
 801519a:	b2db      	uxtb	r3, r3
 801519c:	2b00      	cmp	r3, #0
 801519e:	d015      	beq.n	80151cc <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	79fa      	ldrb	r2, [r7, #7]
 80151a4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	78db      	ldrb	r3, [r3, #3]
 80151aa:	f083 0301 	eor.w	r3, r3, #1
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d002      	beq.n	80151ba <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	2201      	movs	r2, #1
 80151b8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80151ba:	68f8      	ldr	r0, [r7, #12]
 80151bc:	f7ff fe98 	bl	8014ef0 <IncreaseBufferPointer>
 80151c0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80151c2:	4b04      	ldr	r3, [pc, #16]	@ (80151d4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80151c4:	689b      	ldr	r3, [r3, #8]
 80151c6:	68fa      	ldr	r2, [r7, #12]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d1e9      	bne.n	80151a0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80151cc:	bf00      	nop
 80151ce:	3710      	adds	r7, #16
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	20001a44 	.word	0x20001a44

080151d8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b082      	sub	sp, #8
 80151dc:	af00      	add	r7, sp, #0
 80151de:	4603      	mov	r3, r0
 80151e0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80151e2:	4b09      	ldr	r3, [pc, #36]	@ (8015208 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80151e4:	6859      	ldr	r1, [r3, #4]
 80151e6:	4b08      	ldr	r3, [pc, #32]	@ (8015208 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80151e8:	689a      	ldr	r2, [r3, #8]
 80151ea:	79fb      	ldrb	r3, [r7, #7]
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7ff feb7 	bl	8014f60 <GetElement>
 80151f2:	4603      	mov	r3, r0
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d001      	beq.n	80151fc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80151f8:	2301      	movs	r3, #1
 80151fa:	e000      	b.n	80151fe <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80151fc:	2300      	movs	r3, #0
}
 80151fe:	4618      	mov	r0, r3
 8015200:	3708      	adds	r7, #8
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}
 8015206:	bf00      	nop
 8015208:	20001a44 	.word	0x20001a44

0801520c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b084      	sub	sp, #16
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015214:	4b25      	ldr	r3, [pc, #148]	@ (80152ac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015216:	f893 3020 	ldrb.w	r3, [r3, #32]
 801521a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801521c:	2300      	movs	r3, #0
 801521e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8015220:	f107 0308 	add.w	r3, r7, #8
 8015224:	2204      	movs	r2, #4
 8015226:	2100      	movs	r1, #0
 8015228:	4618      	mov	r0, r3
 801522a:	f003 fcab 	bl	8018b84 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801522e:	2300      	movs	r3, #0
 8015230:	73fb      	strb	r3, [r7, #15]
 8015232:	e032      	b.n	801529a <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015234:	4b1d      	ldr	r3, [pc, #116]	@ (80152ac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	781a      	ldrb	r2, [r3, #0]
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801523e:	4b1b      	ldr	r3, [pc, #108]	@ (80152ac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	785a      	ldrb	r2, [r3, #1]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015248:	4b18      	ldr	r3, [pc, #96]	@ (80152ac <LoRaMacConfirmQueueHandleCb+0xa0>)
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	789b      	ldrb	r3, [r3, #2]
 801524e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015250:	7b7b      	ldrb	r3, [r7, #13]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d005      	beq.n	8015262 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015256:	4b15      	ldr	r3, [pc, #84]	@ (80152ac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	689b      	ldr	r3, [r3, #8]
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	4798      	blx	r3
 8015260:	e00b      	b.n	801527a <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015262:	4b12      	ldr	r3, [pc, #72]	@ (80152ac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801526a:	4b10      	ldr	r3, [pc, #64]	@ (80152ac <LoRaMacConfirmQueueHandleCb+0xa0>)
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	785b      	ldrb	r3, [r3, #1]
 8015270:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015272:	4b0e      	ldr	r3, [pc, #56]	@ (80152ac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	78db      	ldrb	r3, [r3, #3]
 8015278:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801527a:	f7ff feff 	bl	801507c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801527e:	7b7b      	ldrb	r3, [r7, #13]
 8015280:	f083 0301 	eor.w	r3, r3, #1
 8015284:	b2db      	uxtb	r3, r3
 8015286:	2b00      	cmp	r3, #0
 8015288:	d004      	beq.n	8015294 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801528a:	f107 0308 	add.w	r3, r7, #8
 801528e:	4618      	mov	r0, r3
 8015290:	f7ff feba 	bl	8015008 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015294:	7bfb      	ldrb	r3, [r7, #15]
 8015296:	3301      	adds	r3, #1
 8015298:	73fb      	strb	r3, [r7, #15]
 801529a:	7bfa      	ldrb	r2, [r7, #15]
 801529c:	7bbb      	ldrb	r3, [r7, #14]
 801529e:	429a      	cmp	r2, r3
 80152a0:	d3c8      	bcc.n	8015234 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 80152a2:	bf00      	nop
 80152a4:	bf00      	nop
 80152a6:	3710      	adds	r7, #16
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	20001a44 	.word	0x20001a44

080152b0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80152b0:	b480      	push	{r7}
 80152b2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80152b4:	4b03      	ldr	r3, [pc, #12]	@ (80152c4 <LoRaMacConfirmQueueGetCnt+0x14>)
 80152b6:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	46bd      	mov	sp, r7
 80152be:	bc80      	pop	{r7}
 80152c0:	4770      	bx	lr
 80152c2:	bf00      	nop
 80152c4:	20001a44 	.word	0x20001a44

080152c8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80152cc:	4b06      	ldr	r3, [pc, #24]	@ (80152e8 <LoRaMacConfirmQueueIsFull+0x20>)
 80152ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7ff fe34 	bl	8014f40 <IsListFull>
 80152d8:	4603      	mov	r3, r0
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d001      	beq.n	80152e2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80152de:	2301      	movs	r3, #1
 80152e0:	e000      	b.n	80152e4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80152e2:	2300      	movs	r3, #0
    }
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	bd80      	pop	{r7, pc}
 80152e8:	20001a44 	.word	0x20001a44

080152ec <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b08e      	sub	sp, #56	@ 0x38
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	607b      	str	r3, [r7, #4]
 80152f6:	460b      	mov	r3, r1
 80152f8:	817b      	strh	r3, [r7, #10]
 80152fa:	4613      	mov	r3, r2
 80152fc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d101      	bne.n	8015308 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015304:	2309      	movs	r3, #9
 8015306:	e086      	b.n	8015416 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8015308:	2300      	movs	r3, #0
 801530a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 801530e:	2301      	movs	r3, #1
 8015310:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8015312:	2300      	movs	r3, #0
 8015314:	623b      	str	r3, [r7, #32]
 8015316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801531a:	2200      	movs	r2, #0
 801531c:	601a      	str	r2, [r3, #0]
 801531e:	605a      	str	r2, [r3, #4]
 8015320:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8015322:	2300      	movs	r3, #0
 8015324:	613b      	str	r3, [r7, #16]
 8015326:	f107 0314 	add.w	r3, r7, #20
 801532a:	2200      	movs	r2, #0
 801532c:	601a      	str	r2, [r3, #0]
 801532e:	605a      	str	r2, [r3, #4]
 8015330:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015332:	2301      	movs	r3, #1
 8015334:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8015336:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801533a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	b2db      	uxtb	r3, r3
 8015340:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	0a1b      	lsrs	r3, r3, #8
 8015346:	b2db      	uxtb	r3, r3
 8015348:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	0c1b      	lsrs	r3, r3, #16
 801534e:	b2db      	uxtb	r3, r3
 8015350:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	0e1b      	lsrs	r3, r3, #24
 8015356:	b2db      	uxtb	r3, r3
 8015358:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801535a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801535c:	b2db      	uxtb	r3, r3
 801535e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015362:	0a1b      	lsrs	r3, r3, #8
 8015364:	b2db      	uxtb	r3, r3
 8015366:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801536a:	0c1b      	lsrs	r3, r3, #16
 801536c:	b2db      	uxtb	r3, r3
 801536e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015372:	0e1b      	lsrs	r3, r3, #24
 8015374:	b2db      	uxtb	r3, r3
 8015376:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015378:	e048      	b.n	801540c <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801537a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801537c:	b2db      	uxtb	r3, r3
 801537e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015380:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015382:	3301      	adds	r3, #1
 8015384:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015386:	f107 0320 	add.w	r3, r7, #32
 801538a:	7a7a      	ldrb	r2, [r7, #9]
 801538c:	f107 0010 	add.w	r0, r7, #16
 8015390:	2110      	movs	r1, #16
 8015392:	f7f8 f9db 	bl	800d74c <SecureElementAesEncrypt>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	d001      	beq.n	80153a0 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801539c:	230e      	movs	r3, #14
 801539e:	e03a      	b.n	8015416 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80153a0:	2300      	movs	r3, #0
 80153a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80153a6:	e01e      	b.n	80153e6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80153a8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80153ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153b0:	4413      	add	r3, r2
 80153b2:	461a      	mov	r2, r3
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	4413      	add	r3, r2
 80153b8:	7819      	ldrb	r1, [r3, #0]
 80153ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153be:	3338      	adds	r3, #56	@ 0x38
 80153c0:	443b      	add	r3, r7
 80153c2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80153c6:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80153ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153ce:	4403      	add	r3, r0
 80153d0:	4618      	mov	r0, r3
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	4403      	add	r3, r0
 80153d6:	404a      	eors	r2, r1
 80153d8:	b2d2      	uxtb	r2, r2
 80153da:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80153dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153e0:	3301      	adds	r3, #1
 80153e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80153e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153ea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80153ee:	2a10      	cmp	r2, #16
 80153f0:	bfa8      	it	ge
 80153f2:	2210      	movge	r2, #16
 80153f4:	b212      	sxth	r2, r2
 80153f6:	4293      	cmp	r3, r2
 80153f8:	dbd6      	blt.n	80153a8 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80153fa:	897b      	ldrh	r3, [r7, #10]
 80153fc:	3b10      	subs	r3, #16
 80153fe:	b29b      	uxth	r3, r3
 8015400:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8015402:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015406:	3310      	adds	r3, #16
 8015408:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 801540c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015410:	2b00      	cmp	r3, #0
 8015412:	dcb2      	bgt.n	801537a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015414:	2300      	movs	r3, #0
}
 8015416:	4618      	mov	r0, r3
 8015418:	3738      	adds	r7, #56	@ 0x38
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}

0801541e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801541e:	b490      	push	{r4, r7}
 8015420:	b082      	sub	sp, #8
 8015422:	af00      	add	r7, sp, #0
 8015424:	4604      	mov	r4, r0
 8015426:	4608      	mov	r0, r1
 8015428:	4611      	mov	r1, r2
 801542a:	461a      	mov	r2, r3
 801542c:	4623      	mov	r3, r4
 801542e:	80fb      	strh	r3, [r7, #6]
 8015430:	4603      	mov	r3, r0
 8015432:	717b      	strb	r3, [r7, #5]
 8015434:	460b      	mov	r3, r1
 8015436:	713b      	strb	r3, [r7, #4]
 8015438:	4613      	mov	r3, r2
 801543a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801543c:	69bb      	ldr	r3, [r7, #24]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d101      	bne.n	8015446 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015442:	2309      	movs	r3, #9
 8015444:	e04e      	b.n	80154e4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8015446:	69bb      	ldr	r3, [r7, #24]
 8015448:	2249      	movs	r2, #73	@ 0x49
 801544a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	3301      	adds	r3, #1
 8015450:	2200      	movs	r2, #0
 8015452:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	3302      	adds	r3, #2
 8015458:	2200      	movs	r2, #0
 801545a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	3303      	adds	r3, #3
 8015460:	2200      	movs	r2, #0
 8015462:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015464:	69bb      	ldr	r3, [r7, #24]
 8015466:	3304      	adds	r3, #4
 8015468:	2200      	movs	r2, #0
 801546a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801546c:	69bb      	ldr	r3, [r7, #24]
 801546e:	3305      	adds	r3, #5
 8015470:	78fa      	ldrb	r2, [r7, #3]
 8015472:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015474:	69bb      	ldr	r3, [r7, #24]
 8015476:	3306      	adds	r3, #6
 8015478:	693a      	ldr	r2, [r7, #16]
 801547a:	b2d2      	uxtb	r2, r2
 801547c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	0a1a      	lsrs	r2, r3, #8
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	3307      	adds	r3, #7
 8015486:	b2d2      	uxtb	r2, r2
 8015488:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	0c1a      	lsrs	r2, r3, #16
 801548e:	69bb      	ldr	r3, [r7, #24]
 8015490:	3308      	adds	r3, #8
 8015492:	b2d2      	uxtb	r2, r2
 8015494:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	0e1a      	lsrs	r2, r3, #24
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	3309      	adds	r3, #9
 801549e:	b2d2      	uxtb	r2, r2
 80154a0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	330a      	adds	r3, #10
 80154a6:	697a      	ldr	r2, [r7, #20]
 80154a8:	b2d2      	uxtb	r2, r2
 80154aa:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	0a1a      	lsrs	r2, r3, #8
 80154b0:	69bb      	ldr	r3, [r7, #24]
 80154b2:	330b      	adds	r3, #11
 80154b4:	b2d2      	uxtb	r2, r2
 80154b6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	0c1a      	lsrs	r2, r3, #16
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	330c      	adds	r3, #12
 80154c0:	b2d2      	uxtb	r2, r2
 80154c2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	0e1a      	lsrs	r2, r3, #24
 80154c8:	69bb      	ldr	r3, [r7, #24]
 80154ca:	330d      	adds	r3, #13
 80154cc:	b2d2      	uxtb	r2, r2
 80154ce:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80154d0:	69bb      	ldr	r3, [r7, #24]
 80154d2:	330e      	adds	r3, #14
 80154d4:	2200      	movs	r2, #0
 80154d6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80154d8:	69bb      	ldr	r3, [r7, #24]
 80154da:	330f      	adds	r3, #15
 80154dc:	88fa      	ldrh	r2, [r7, #6]
 80154de:	b2d2      	uxtb	r2, r2
 80154e0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80154e2:	2300      	movs	r3, #0
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bc90      	pop	{r4, r7}
 80154ec:	4770      	bx	lr

080154ee <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80154ee:	b590      	push	{r4, r7, lr}
 80154f0:	b08b      	sub	sp, #44	@ 0x2c
 80154f2:	af04      	add	r7, sp, #16
 80154f4:	6078      	str	r0, [r7, #4]
 80154f6:	4608      	mov	r0, r1
 80154f8:	4611      	mov	r1, r2
 80154fa:	461a      	mov	r2, r3
 80154fc:	4603      	mov	r3, r0
 80154fe:	807b      	strh	r3, [r7, #2]
 8015500:	460b      	mov	r3, r1
 8015502:	707b      	strb	r3, [r7, #1]
 8015504:	4613      	mov	r3, r2
 8015506:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d002      	beq.n	8015514 <ComputeCmacB0+0x26>
 801550e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015510:	2b00      	cmp	r3, #0
 8015512:	d101      	bne.n	8015518 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015514:	2309      	movs	r3, #9
 8015516:	e024      	b.n	8015562 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015518:	887b      	ldrh	r3, [r7, #2]
 801551a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801551e:	d901      	bls.n	8015524 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015520:	230d      	movs	r3, #13
 8015522:	e01e      	b.n	8015562 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015524:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8015528:	783a      	ldrb	r2, [r7, #0]
 801552a:	7879      	ldrb	r1, [r7, #1]
 801552c:	8878      	ldrh	r0, [r7, #2]
 801552e:	f107 0308 	add.w	r3, r7, #8
 8015532:	9302      	str	r3, [sp, #8]
 8015534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015536:	9301      	str	r3, [sp, #4]
 8015538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801553a:	9300      	str	r3, [sp, #0]
 801553c:	4623      	mov	r3, r4
 801553e:	f7ff ff6e 	bl	801541e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015542:	887a      	ldrh	r2, [r7, #2]
 8015544:	7879      	ldrb	r1, [r7, #1]
 8015546:	f107 0008 	add.w	r0, r7, #8
 801554a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801554c:	9300      	str	r3, [sp, #0]
 801554e:	460b      	mov	r3, r1
 8015550:	6879      	ldr	r1, [r7, #4]
 8015552:	f7f8 f8b5 	bl	800d6c0 <SecureElementComputeAesCmac>
 8015556:	4603      	mov	r3, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d001      	beq.n	8015560 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801555c:	230e      	movs	r3, #14
 801555e:	e000      	b.n	8015562 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015560:	2300      	movs	r3, #0
}
 8015562:	4618      	mov	r0, r3
 8015564:	371c      	adds	r7, #28
 8015566:	46bd      	mov	sp, r7
 8015568:	bd90      	pop	{r4, r7, pc}

0801556a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801556a:	b590      	push	{r4, r7, lr}
 801556c:	b0cd      	sub	sp, #308	@ 0x134
 801556e:	af04      	add	r7, sp, #16
 8015570:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8015574:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8015578:	6020      	str	r0, [r4, #0]
 801557a:	460c      	mov	r4, r1
 801557c:	4610      	mov	r0, r2
 801557e:	4619      	mov	r1, r3
 8015580:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015584:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015588:	4622      	mov	r2, r4
 801558a:	801a      	strh	r2, [r3, #0]
 801558c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015590:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015594:	4602      	mov	r2, r0
 8015596:	701a      	strb	r2, [r3, #0]
 8015598:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801559c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80155a0:	460a      	mov	r2, r1
 80155a2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80155a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d101      	bne.n	80155b6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80155b2:	2309      	movs	r3, #9
 80155b4:	e063      	b.n	801567e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80155b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155ba:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80155be:	881b      	ldrh	r3, [r3, #0]
 80155c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80155c4:	d901      	bls.n	80155ca <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80155c6:	230d      	movs	r3, #13
 80155c8:	e059      	b.n	801567e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80155ca:	f107 030c 	add.w	r3, r7, #12
 80155ce:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80155d2:	2100      	movs	r1, #0
 80155d4:	4618      	mov	r0, r3
 80155d6:	f003 fad5 	bl	8018b84 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80155da:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80155de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80155e6:	781a      	ldrb	r2, [r3, #0]
 80155e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155ec:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80155f0:	7819      	ldrb	r1, [r3, #0]
 80155f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155f6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80155fa:	8818      	ldrh	r0, [r3, #0]
 80155fc:	f107 030c 	add.w	r3, r7, #12
 8015600:	9302      	str	r3, [sp, #8]
 8015602:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015606:	9301      	str	r3, [sp, #4]
 8015608:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801560c:	9300      	str	r3, [sp, #0]
 801560e:	4623      	mov	r3, r4
 8015610:	f7ff ff05 	bl	801541e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015614:	f107 030c 	add.w	r3, r7, #12
 8015618:	3310      	adds	r3, #16
 801561a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801561e:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8015622:	8812      	ldrh	r2, [r2, #0]
 8015624:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8015628:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801562c:	6809      	ldr	r1, [r1, #0]
 801562e:	4618      	mov	r0, r3
 8015630:	f003 fa6d 	bl	8018b0e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015634:	2306      	movs	r3, #6
 8015636:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801563a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801563e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015642:	881b      	ldrh	r3, [r3, #0]
 8015644:	3310      	adds	r3, #16
 8015646:	4619      	mov	r1, r3
 8015648:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801564c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	f107 000c 	add.w	r0, r7, #12
 8015656:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801565a:	f7f8 f84b 	bl	800d6f4 <SecureElementVerifyAesCmac>
 801565e:	4603      	mov	r3, r0
 8015660:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015664:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015668:	2b00      	cmp	r3, #0
 801566a:	d101      	bne.n	8015670 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801566c:	2300      	movs	r3, #0
 801566e:	e006      	b.n	801567e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015670:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015674:	2b01      	cmp	r3, #1
 8015676:	d101      	bne.n	801567c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015678:	2301      	movs	r3, #1
 801567a:	e000      	b.n	801567e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801567c:	230e      	movs	r3, #14
}
 801567e:	4618      	mov	r0, r3
 8015680:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8015684:	46bd      	mov	sp, r7
 8015686:	bd90      	pop	{r4, r7, pc}

08015688 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015688:	b480      	push	{r7}
 801568a:	b085      	sub	sp, #20
 801568c:	af00      	add	r7, sp, #0
 801568e:	4603      	mov	r3, r0
 8015690:	6039      	str	r1, [r7, #0]
 8015692:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015694:	2300      	movs	r3, #0
 8015696:	73fb      	strb	r3, [r7, #15]
 8015698:	e011      	b.n	80156be <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801569a:	7bfb      	ldrb	r3, [r7, #15]
 801569c:	4a0c      	ldr	r2, [pc, #48]	@ (80156d0 <GetKeyAddrItem+0x48>)
 801569e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80156a2:	79fa      	ldrb	r2, [r7, #7]
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d107      	bne.n	80156b8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80156a8:	7bfb      	ldrb	r3, [r7, #15]
 80156aa:	009b      	lsls	r3, r3, #2
 80156ac:	4a08      	ldr	r2, [pc, #32]	@ (80156d0 <GetKeyAddrItem+0x48>)
 80156ae:	441a      	add	r2, r3
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80156b4:	2300      	movs	r3, #0
 80156b6:	e006      	b.n	80156c6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80156b8:	7bfb      	ldrb	r3, [r7, #15]
 80156ba:	3301      	adds	r3, #1
 80156bc:	73fb      	strb	r3, [r7, #15]
 80156be:	7bfb      	ldrb	r3, [r7, #15]
 80156c0:	2b01      	cmp	r3, #1
 80156c2:	d9ea      	bls.n	801569a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80156c4:	230b      	movs	r3, #11
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3714      	adds	r7, #20
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bc80      	pop	{r7}
 80156ce:	4770      	bx	lr
 80156d0:	20000114 	.word	0x20000114

080156d4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b088      	sub	sp, #32
 80156d8:	af00      	add	r7, sp, #0
 80156da:	60b9      	str	r1, [r7, #8]
 80156dc:	607a      	str	r2, [r7, #4]
 80156de:	461a      	mov	r2, r3
 80156e0:	4603      	mov	r3, r0
 80156e2:	73fb      	strb	r3, [r7, #15]
 80156e4:	4613      	mov	r3, r2
 80156e6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80156e8:	2300      	movs	r3, #0
 80156ea:	613b      	str	r3, [r7, #16]
 80156ec:	f107 0314 	add.w	r3, r7, #20
 80156f0:	2200      	movs	r2, #0
 80156f2:	601a      	str	r2, [r3, #0]
 80156f4:	605a      	str	r2, [r3, #4]
 80156f6:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80156f8:	7bfb      	ldrb	r3, [r7, #15]
 80156fa:	2b08      	cmp	r3, #8
 80156fc:	d002      	beq.n	8015704 <DeriveSessionKey10x+0x30>
 80156fe:	2b09      	cmp	r3, #9
 8015700:	d003      	beq.n	801570a <DeriveSessionKey10x+0x36>
 8015702:	e005      	b.n	8015710 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8015704:	2301      	movs	r3, #1
 8015706:	743b      	strb	r3, [r7, #16]
            break;
 8015708:	e004      	b.n	8015714 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801570a:	2302      	movs	r3, #2
 801570c:	743b      	strb	r3, [r7, #16]
            break;
 801570e:	e001      	b.n	8015714 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015710:	230a      	movs	r3, #10
 8015712:	e02a      	b.n	801576a <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	b2db      	uxtb	r3, r3
 8015718:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	0a1b      	lsrs	r3, r3, #8
 801571e:	b2db      	uxtb	r3, r3
 8015720:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	0c1b      	lsrs	r3, r3, #16
 8015726:	b2db      	uxtb	r3, r3
 8015728:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	b2db      	uxtb	r3, r3
 801572e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	0a1b      	lsrs	r3, r3, #8
 8015734:	b2db      	uxtb	r3, r3
 8015736:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	0c1b      	lsrs	r3, r3, #16
 801573c:	b2db      	uxtb	r3, r3
 801573e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015740:	89bb      	ldrh	r3, [r7, #12]
 8015742:	b2db      	uxtb	r3, r3
 8015744:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8015746:	89bb      	ldrh	r3, [r7, #12]
 8015748:	0a1b      	lsrs	r3, r3, #8
 801574a:	b29b      	uxth	r3, r3
 801574c:	b2db      	uxtb	r3, r3
 801574e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015750:	7bfa      	ldrb	r2, [r7, #15]
 8015752:	f107 0310 	add.w	r3, r7, #16
 8015756:	2101      	movs	r1, #1
 8015758:	4618      	mov	r0, r3
 801575a:	f7f8 f877 	bl	800d84c <SecureElementDeriveAndStoreKey>
 801575e:	4603      	mov	r3, r0
 8015760:	2b00      	cmp	r3, #0
 8015762:	d001      	beq.n	8015768 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015764:	230e      	movs	r3, #14
 8015766:	e000      	b.n	801576a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015768:	2300      	movs	r3, #0
}
 801576a:	4618      	mov	r0, r3
 801576c:	3720      	adds	r7, #32
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}
	...

08015774 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015774:	b480      	push	{r7}
 8015776:	b083      	sub	sp, #12
 8015778:	af00      	add	r7, sp, #0
 801577a:	4603      	mov	r3, r0
 801577c:	6039      	str	r1, [r7, #0]
 801577e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d101      	bne.n	801578a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015786:	2309      	movs	r3, #9
 8015788:	e029      	b.n	80157de <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801578a:	79fb      	ldrb	r3, [r7, #7]
 801578c:	3b01      	subs	r3, #1
 801578e:	2b03      	cmp	r3, #3
 8015790:	d822      	bhi.n	80157d8 <GetLastFcntDown+0x64>
 8015792:	a201      	add	r2, pc, #4	@ (adr r2, 8015798 <GetLastFcntDown+0x24>)
 8015794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015798:	080157a9 	.word	0x080157a9
 801579c:	080157b5 	.word	0x080157b5
 80157a0:	080157c1 	.word	0x080157c1
 80157a4:	080157cd 	.word	0x080157cd
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80157a8:	4b0f      	ldr	r3, [pc, #60]	@ (80157e8 <GetLastFcntDown+0x74>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	691a      	ldr	r2, [r3, #16]
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	601a      	str	r2, [r3, #0]
            break;
 80157b2:	e013      	b.n	80157dc <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80157b4:	4b0c      	ldr	r3, [pc, #48]	@ (80157e8 <GetLastFcntDown+0x74>)
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	695a      	ldr	r2, [r3, #20]
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	601a      	str	r2, [r3, #0]
            break;
 80157be:	e00d      	b.n	80157dc <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80157c0:	4b09      	ldr	r3, [pc, #36]	@ (80157e8 <GetLastFcntDown+0x74>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	699a      	ldr	r2, [r3, #24]
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	601a      	str	r2, [r3, #0]
            break;
 80157ca:	e007      	b.n	80157dc <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80157cc:	4b06      	ldr	r3, [pc, #24]	@ (80157e8 <GetLastFcntDown+0x74>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	69da      	ldr	r2, [r3, #28]
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	601a      	str	r2, [r3, #0]
            break;
 80157d6:	e001      	b.n	80157dc <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80157d8:	2305      	movs	r3, #5
 80157da:	e000      	b.n	80157de <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80157dc:	2300      	movs	r3, #0
}
 80157de:	4618      	mov	r0, r3
 80157e0:	370c      	adds	r7, #12
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bc80      	pop	{r7}
 80157e6:	4770      	bx	lr
 80157e8:	20001a68 	.word	0x20001a68

080157ec <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	4603      	mov	r3, r0
 80157f4:	6039      	str	r1, [r7, #0]
 80157f6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80157f8:	2300      	movs	r3, #0
 80157fa:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80157fc:	f107 020c 	add.w	r2, r7, #12
 8015800:	79fb      	ldrb	r3, [r7, #7]
 8015802:	4611      	mov	r1, r2
 8015804:	4618      	mov	r0, r3
 8015806:	f7ff ffb5 	bl	8015774 <GetLastFcntDown>
 801580a:	4603      	mov	r3, r0
 801580c:	2b00      	cmp	r3, #0
 801580e:	d001      	beq.n	8015814 <CheckFCntDown+0x28>
    {
        return false;
 8015810:	2300      	movs	r3, #0
 8015812:	e00a      	b.n	801582a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	683a      	ldr	r2, [r7, #0]
 8015818:	429a      	cmp	r2, r3
 801581a:	d803      	bhi.n	8015824 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 801581c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015822:	d101      	bne.n	8015828 <CheckFCntDown+0x3c>
    {
        return true;
 8015824:	2301      	movs	r3, #1
 8015826:	e000      	b.n	801582a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015828:	2300      	movs	r3, #0
    }
}
 801582a:	4618      	mov	r0, r3
 801582c:	3710      	adds	r7, #16
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
	...

08015834 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015834:	b480      	push	{r7}
 8015836:	b083      	sub	sp, #12
 8015838:	af00      	add	r7, sp, #0
 801583a:	4603      	mov	r3, r0
 801583c:	6039      	str	r1, [r7, #0]
 801583e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015840:	79fb      	ldrb	r3, [r7, #7]
 8015842:	3b01      	subs	r3, #1
 8015844:	2b03      	cmp	r3, #3
 8015846:	d82b      	bhi.n	80158a0 <UpdateFCntDown+0x6c>
 8015848:	a201      	add	r2, pc, #4	@ (adr r2, 8015850 <UpdateFCntDown+0x1c>)
 801584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801584e:	bf00      	nop
 8015850:	08015861 	.word	0x08015861
 8015854:	08015873 	.word	0x08015873
 8015858:	08015885 	.word	0x08015885
 801585c:	08015897 	.word	0x08015897
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015860:	4b12      	ldr	r3, [pc, #72]	@ (80158ac <UpdateFCntDown+0x78>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	683a      	ldr	r2, [r7, #0]
 8015866:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8015868:	4b10      	ldr	r3, [pc, #64]	@ (80158ac <UpdateFCntDown+0x78>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	683a      	ldr	r2, [r7, #0]
 801586e:	621a      	str	r2, [r3, #32]
            break;
 8015870:	e017      	b.n	80158a2 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015872:	4b0e      	ldr	r3, [pc, #56]	@ (80158ac <UpdateFCntDown+0x78>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	683a      	ldr	r2, [r7, #0]
 8015878:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801587a:	4b0c      	ldr	r3, [pc, #48]	@ (80158ac <UpdateFCntDown+0x78>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	683a      	ldr	r2, [r7, #0]
 8015880:	621a      	str	r2, [r3, #32]
            break;
 8015882:	e00e      	b.n	80158a2 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015884:	4b09      	ldr	r3, [pc, #36]	@ (80158ac <UpdateFCntDown+0x78>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	683a      	ldr	r2, [r7, #0]
 801588a:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 801588c:	4b07      	ldr	r3, [pc, #28]	@ (80158ac <UpdateFCntDown+0x78>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	621a      	str	r2, [r3, #32]
            break;
 8015894:	e005      	b.n	80158a2 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8015896:	4b05      	ldr	r3, [pc, #20]	@ (80158ac <UpdateFCntDown+0x78>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	683a      	ldr	r2, [r7, #0]
 801589c:	61da      	str	r2, [r3, #28]
            break;
 801589e:	e000      	b.n	80158a2 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80158a0:	bf00      	nop
    }
}
 80158a2:	bf00      	nop
 80158a4:	370c      	adds	r7, #12
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bc80      	pop	{r7}
 80158aa:	4770      	bx	lr
 80158ac:	20001a68 	.word	0x20001a68

080158b0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80158b0:	b480      	push	{r7}
 80158b2:	b083      	sub	sp, #12
 80158b4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80158b6:	4b18      	ldr	r3, [pc, #96]	@ (8015918 <ResetFCnts+0x68>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	2200      	movs	r2, #0
 80158bc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80158be:	4b16      	ldr	r3, [pc, #88]	@ (8015918 <ResetFCnts+0x68>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	f04f 32ff 	mov.w	r2, #4294967295
 80158c6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80158c8:	4b13      	ldr	r3, [pc, #76]	@ (8015918 <ResetFCnts+0x68>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	f04f 32ff 	mov.w	r2, #4294967295
 80158d0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80158d2:	4b11      	ldr	r3, [pc, #68]	@ (8015918 <ResetFCnts+0x68>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	f04f 32ff 	mov.w	r2, #4294967295
 80158da:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80158dc:	4b0e      	ldr	r3, [pc, #56]	@ (8015918 <ResetFCnts+0x68>)
 80158de:	681a      	ldr	r2, [r3, #0]
 80158e0:	4b0d      	ldr	r3, [pc, #52]	@ (8015918 <ResetFCnts+0x68>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	6992      	ldr	r2, [r2, #24]
 80158e6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80158e8:	2300      	movs	r3, #0
 80158ea:	607b      	str	r3, [r7, #4]
 80158ec:	e00b      	b.n	8015906 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80158ee:	4b0a      	ldr	r3, [pc, #40]	@ (8015918 <ResetFCnts+0x68>)
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	3306      	adds	r3, #6
 80158f6:	009b      	lsls	r3, r3, #2
 80158f8:	4413      	add	r3, r2
 80158fa:	f04f 32ff 	mov.w	r2, #4294967295
 80158fe:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	3301      	adds	r3, #1
 8015904:	607b      	str	r3, [r7, #4]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	2b00      	cmp	r3, #0
 801590a:	ddf0      	ble.n	80158ee <ResetFCnts+0x3e>
    }
}
 801590c:	bf00      	nop
 801590e:	bf00      	nop
 8015910:	370c      	adds	r7, #12
 8015912:	46bd      	mov	sp, r7
 8015914:	bc80      	pop	{r7}
 8015916:	4770      	bx	lr
 8015918:	20001a68 	.word	0x20001a68

0801591c <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 801591c:	b480      	push	{r7}
 801591e:	b083      	sub	sp, #12
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8015924:	4b06      	ldr	r3, [pc, #24]	@ (8015940 <IsJoinNonce10xOk+0x24>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	689b      	ldr	r3, [r3, #8]
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	429a      	cmp	r2, r3
 801592e:	bf8c      	ite	hi
 8015930:	2301      	movhi	r3, #1
 8015932:	2300      	movls	r3, #0
 8015934:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8015936:	4618      	mov	r0, r3
 8015938:	370c      	adds	r7, #12
 801593a:	46bd      	mov	sp, r7
 801593c:	bc80      	pop	{r7}
 801593e:	4770      	bx	lr
 8015940:	20001a68 	.word	0x20001a68

08015944 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b082      	sub	sp, #8
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d101      	bne.n	8015956 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8015952:	2308      	movs	r3, #8
 8015954:	e01c      	b.n	8015990 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8015956:	4a10      	ldr	r2, [pc, #64]	@ (8015998 <LoRaMacCryptoInit+0x54>)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801595c:	4b0e      	ldr	r3, [pc, #56]	@ (8015998 <LoRaMacCryptoInit+0x54>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	2228      	movs	r2, #40	@ 0x28
 8015962:	2100      	movs	r1, #0
 8015964:	4618      	mov	r0, r3
 8015966:	f003 f90d 	bl	8018b84 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801596a:	4b0b      	ldr	r3, [pc, #44]	@ (8015998 <LoRaMacCryptoInit+0x54>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2201      	movs	r2, #1
 8015970:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8015972:	4b09      	ldr	r3, [pc, #36]	@ (8015998 <LoRaMacCryptoInit+0x54>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	2201      	movs	r2, #1
 8015978:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801597a:	4b07      	ldr	r3, [pc, #28]	@ (8015998 <LoRaMacCryptoInit+0x54>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	2201      	movs	r2, #1
 8015980:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8015982:	4b05      	ldr	r3, [pc, #20]	@ (8015998 <LoRaMacCryptoInit+0x54>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2200      	movs	r2, #0
 8015988:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801598a:	f7ff ff91 	bl	80158b0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801598e:	2300      	movs	r3, #0
}
 8015990:	4618      	mov	r0, r3
 8015992:	3708      	adds	r7, #8
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}
 8015998:	20001a68 	.word	0x20001a68

0801599c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801599c:	b480      	push	{r7}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80159a4:	4b04      	ldr	r3, [pc, #16]	@ (80159b8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80159ac:	2300      	movs	r3, #0
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	370c      	adds	r7, #12
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bc80      	pop	{r7}
 80159b6:	4770      	bx	lr
 80159b8:	20001a68 	.word	0x20001a68

080159bc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80159bc:	b480      	push	{r7}
 80159be:	b083      	sub	sp, #12
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d101      	bne.n	80159ce <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80159ca:	2309      	movs	r3, #9
 80159cc:	e006      	b.n	80159dc <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80159ce:	4b06      	ldr	r3, [pc, #24]	@ (80159e8 <LoRaMacCryptoGetFCntUp+0x2c>)
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	1c5a      	adds	r2, r3, #1
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80159da:	2300      	movs	r3, #0
}
 80159dc:	4618      	mov	r0, r3
 80159de:	370c      	adds	r7, #12
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bc80      	pop	{r7}
 80159e4:	4770      	bx	lr
 80159e6:	bf00      	nop
 80159e8:	20001a68 	.word	0x20001a68

080159ec <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b088      	sub	sp, #32
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	4603      	mov	r3, r0
 80159f4:	60b9      	str	r1, [r7, #8]
 80159f6:	607a      	str	r2, [r7, #4]
 80159f8:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80159fa:	2300      	movs	r3, #0
 80159fc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80159fe:	2300      	movs	r3, #0
 8015a00:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015a02:	2312      	movs	r3, #18
 8015a04:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d101      	bne.n	8015a10 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a0c:	2309      	movs	r3, #9
 8015a0e:	e035      	b.n	8015a7c <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015a10:	f107 0214 	add.w	r2, r7, #20
 8015a14:	7bfb      	ldrb	r3, [r7, #15]
 8015a16:	4611      	mov	r1, r2
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7ff feab 	bl	8015774 <GetLastFcntDown>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015a22:	7efb      	ldrb	r3, [r7, #27]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d001      	beq.n	8015a2c <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8015a28:	7efb      	ldrb	r3, [r7, #27]
 8015a2a:	e027      	b.n	8015a7c <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a32:	d103      	bne.n	8015a3c <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	68ba      	ldr	r2, [r7, #8]
 8015a38:	601a      	str	r2, [r3, #0]
 8015a3a:	e01e      	b.n	8015a7a <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	68ba      	ldr	r2, [r7, #8]
 8015a42:	1ad3      	subs	r3, r2, r3
 8015a44:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8015a46:	69fb      	ldr	r3, [r7, #28]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	dd05      	ble.n	8015a58 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015a4c:	697a      	ldr	r2, [r7, #20]
 8015a4e:	69fb      	ldr	r3, [r7, #28]
 8015a50:	441a      	add	r2, r3
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	601a      	str	r2, [r3, #0]
 8015a56:	e010      	b.n	8015a7a <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8015a58:	69fb      	ldr	r3, [r7, #28]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d104      	bne.n	8015a68 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015a5e:	697a      	ldr	r2, [r7, #20]
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015a64:	2307      	movs	r3, #7
 8015a66:	e009      	b.n	8015a7c <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	0c1b      	lsrs	r3, r3, #16
 8015a6c:	041b      	lsls	r3, r3, #16
 8015a6e:	68ba      	ldr	r2, [r7, #8]
 8015a70:	4413      	add	r3, r2
 8015a72:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015a7a:	2300      	movs	r3, #0
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3720      	adds	r7, #32
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}

08015a84 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015a84:	b480      	push	{r7}
 8015a86:	b085      	sub	sp, #20
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d101      	bne.n	8015a96 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a92:	2309      	movs	r3, #9
 8015a94:	e019      	b.n	8015aca <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015a96:	2300      	movs	r3, #0
 8015a98:	60fb      	str	r3, [r7, #12]
 8015a9a:	e012      	b.n	8015ac2 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8015a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8015ad4 <LoRaMacCryptoSetMulticastReference+0x50>)
 8015a9e:	6819      	ldr	r1, [r3, #0]
 8015aa0:	68fa      	ldr	r2, [r7, #12]
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	005b      	lsls	r3, r3, #1
 8015aa6:	4413      	add	r3, r2
 8015aa8:	011b      	lsls	r3, r3, #4
 8015aaa:	461a      	mov	r2, r3
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	4413      	add	r3, r2
 8015ab0:	68fa      	ldr	r2, [r7, #12]
 8015ab2:	3206      	adds	r2, #6
 8015ab4:	0092      	lsls	r2, r2, #2
 8015ab6:	440a      	add	r2, r1
 8015ab8:	3204      	adds	r2, #4
 8015aba:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	3301      	adds	r3, #1
 8015ac0:	60fb      	str	r3, [r7, #12]
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	dde9      	ble.n	8015a9c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015ac8:	2300      	movs	r3, #0
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	3714      	adds	r7, #20
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bc80      	pop	{r7}
 8015ad2:	4770      	bx	lr
 8015ad4:	20001a68 	.word	0x20001a68

08015ad8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	4603      	mov	r3, r0
 8015ae0:	6039      	str	r1, [r7, #0]
 8015ae2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015ae4:	79fb      	ldrb	r3, [r7, #7]
 8015ae6:	6839      	ldr	r1, [r7, #0]
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f7f7 fd8b 	bl	800d604 <SecureElementSetKey>
 8015aee:	4603      	mov	r3, r0
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d001      	beq.n	8015af8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015af4:	230e      	movs	r3, #14
 8015af6:	e021      	b.n	8015b3c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8015af8:	79fb      	ldrb	r3, [r7, #7]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d11d      	bne.n	8015b3a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015afe:	4b11      	ldr	r3, [pc, #68]	@ (8015b44 <LoRaMacCryptoSetKey+0x6c>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	789b      	ldrb	r3, [r3, #2]
 8015b04:	210b      	movs	r1, #11
 8015b06:	4618      	mov	r0, r3
 8015b08:	f000 fa56 	bl	8015fb8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d001      	beq.n	8015b16 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b12:	230e      	movs	r3, #14
 8015b14:	e012      	b.n	8015b3c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015b16:	210c      	movs	r1, #12
 8015b18:	2000      	movs	r0, #0
 8015b1a:	f000 fa4d 	bl	8015fb8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d001      	beq.n	8015b28 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b24:	230e      	movs	r3, #14
 8015b26:	e009      	b.n	8015b3c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015b28:	210a      	movs	r1, #10
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	f000 fa44 	bl	8015fb8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015b30:	4603      	mov	r3, r0
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d001      	beq.n	8015b3a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b36:	230e      	movs	r3, #14
 8015b38:	e000      	b.n	8015b3c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015b3a:	2300      	movs	r3, #0
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	3708      	adds	r7, #8
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	20001a68 	.word	0x20001a68

08015b48 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b086      	sub	sp, #24
 8015b4c:	af02      	add	r7, sp, #8
 8015b4e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d101      	bne.n	8015b5a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b56:	2309      	movs	r3, #9
 8015b58:	e02d      	b.n	8015bb6 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8015b5e:	4b18      	ldr	r3, [pc, #96]	@ (8015bc0 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	889a      	ldrh	r2, [r3, #4]
 8015b64:	3201      	adds	r2, #1
 8015b66:	b292      	uxth	r2, r2
 8015b68:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8015b6a:	4b15      	ldr	r3, [pc, #84]	@ (8015bc0 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	889a      	ldrh	r2, [r3, #4]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	f000 fc17 	bl	80163a8 <LoRaMacSerializerJoinRequest>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d001      	beq.n	8015b84 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015b80:	2310      	movs	r3, #16
 8015b82:	e018      	b.n	8015bb6 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6819      	ldr	r1, [r3, #0]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	3318      	adds	r3, #24
 8015b8c:	7bfa      	ldrb	r2, [r7, #15]
 8015b8e:	9300      	str	r3, [sp, #0]
 8015b90:	4613      	mov	r3, r2
 8015b92:	2213      	movs	r2, #19
 8015b94:	2000      	movs	r0, #0
 8015b96:	f7f7 fd93 	bl	800d6c0 <SecureElementComputeAesCmac>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d001      	beq.n	8015ba4 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ba0:	230e      	movs	r3, #14
 8015ba2:	e008      	b.n	8015bb6 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f000 fbff 	bl	80163a8 <LoRaMacSerializerJoinRequest>
 8015baa:	4603      	mov	r3, r0
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d001      	beq.n	8015bb4 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015bb0:	2310      	movs	r3, #16
 8015bb2:	e000      	b.n	8015bb6 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015bb4:	2300      	movs	r3, #0
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3710      	adds	r7, #16
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	20001a68 	.word	0x20001a68

08015bc4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015bc4:	b590      	push	{r4, r7, lr}
 8015bc6:	b097      	sub	sp, #92	@ 0x5c
 8015bc8:	af04      	add	r7, sp, #16
 8015bca:	4603      	mov	r3, r0
 8015bcc:	60b9      	str	r1, [r7, #8]
 8015bce:	607a      	str	r2, [r7, #4]
 8015bd0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d002      	beq.n	8015bde <LoRaMacCryptoHandleJoinAccept+0x1a>
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d101      	bne.n	8015be2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015bde:	2309      	movs	r3, #9
 8015be0:	e0d3      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015be2:	2312      	movs	r3, #18
 8015be4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015be8:	2300      	movs	r3, #0
 8015bea:	617b      	str	r3, [r7, #20]
 8015bec:	f107 0318 	add.w	r3, r7, #24
 8015bf0:	221d      	movs	r2, #29
 8015bf2:	2100      	movs	r1, #0
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f007 fd59 	bl	801d6ac <memset>
    uint8_t versionMinor         = 0;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015bfe:	4b65      	ldr	r3, [pc, #404]	@ (8015d94 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	889b      	ldrh	r3, [r3, #4]
 8015c04:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	681c      	ldr	r4, [r3, #0]
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	791b      	ldrb	r3, [r3, #4]
 8015c10:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8015c14:	7bf8      	ldrb	r0, [r7, #15]
 8015c16:	f107 0213 	add.w	r2, r7, #19
 8015c1a:	9202      	str	r2, [sp, #8]
 8015c1c:	f107 0214 	add.w	r2, r7, #20
 8015c20:	9201      	str	r2, [sp, #4]
 8015c22:	9300      	str	r3, [sp, #0]
 8015c24:	4623      	mov	r3, r4
 8015c26:	460a      	mov	r2, r1
 8015c28:	68b9      	ldr	r1, [r7, #8]
 8015c2a:	f7f7 fe4f 	bl	800d8cc <SecureElementProcessJoinAccept>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d001      	beq.n	8015c38 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015c34:	230e      	movs	r3, #14
 8015c36:	e0a8      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6818      	ldr	r0, [r3, #0]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	791b      	ldrb	r3, [r3, #4]
 8015c40:	461a      	mov	r2, r3
 8015c42:	f107 0314 	add.w	r3, r7, #20
 8015c46:	4619      	mov	r1, r3
 8015c48:	f002 ff61 	bl	8018b0e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	f000 f9ee 	bl	801602e <LoRaMacParserJoinAccept>
 8015c52:	4603      	mov	r3, r0
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d001      	beq.n	8015c5c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015c58:	230f      	movs	r3, #15
 8015c5a:	e096      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	799b      	ldrb	r3, [r3, #6]
 8015c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	79db      	ldrb	r3, [r3, #7]
 8015c6c:	021b      	lsls	r3, r3, #8
 8015c6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015c70:	4313      	orrs	r3, r2
 8015c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	7a1b      	ldrb	r3, [r3, #8]
 8015c78:	041b      	lsls	r3, r3, #16
 8015c7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015c7c:	4313      	orrs	r3, r2
 8015c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8015c80:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015c82:	f7ff fe4b 	bl	801591c <IsJoinNonce10xOk>
 8015c86:	4603      	mov	r3, r0
 8015c88:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8015c8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d010      	beq.n	8015cb6 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8015c94:	4b3f      	ldr	r3, [pc, #252]	@ (8015d94 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015c9a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8015c9c:	7cfb      	ldrb	r3, [r7, #19]
 8015c9e:	210b      	movs	r1, #11
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f000 f989 	bl	8015fb8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d005      	beq.n	8015cc0 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8015cb4:	e001      	b.n	8015cba <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8015cb6:	2303      	movs	r3, #3
 8015cb8:	e067      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8015cba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cbe:	e064      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8015cc0:	210c      	movs	r1, #12
 8015cc2:	2000      	movs	r0, #0
 8015cc4:	f000 f978 	bl	8015fb8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d002      	beq.n	8015cdc <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8015cd6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cda:	e056      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8015cdc:	210a      	movs	r1, #10
 8015cde:	2000      	movs	r0, #0
 8015ce0:	f000 f96a 	bl	8015fb8 <LoRaMacCryptoDeriveLifeTimeKey>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015cea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d002      	beq.n	8015cf8 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8015cf2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cf6:	e048      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	7a5b      	ldrb	r3, [r3, #9]
 8015cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	7a9b      	ldrb	r3, [r3, #10]
 8015d02:	021b      	lsls	r3, r3, #8
 8015d04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d06:	4313      	orrs	r3, r2
 8015d08:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	7adb      	ldrb	r3, [r3, #11]
 8015d0e:	041b      	lsls	r3, r3, #16
 8015d10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d12:	4313      	orrs	r3, r2
 8015d14:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8015d16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015d1e:	2009      	movs	r0, #9
 8015d20:	f7ff fcd8 	bl	80156d4 <DeriveSessionKey10x>
 8015d24:	4603      	mov	r3, r0
 8015d26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d002      	beq.n	8015d38 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8015d32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d36:	e028      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015d38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015d3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015d3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015d40:	2008      	movs	r0, #8
 8015d42:	f7ff fcc7 	bl	80156d4 <DeriveSessionKey10x>
 8015d46:	4603      	mov	r3, r0
 8015d48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d002      	beq.n	8015d5a <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8015d54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d58:	e017      	b.n	8015d8a <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8015d94 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	7cfa      	ldrb	r2, [r7, #19]
 8015d60:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8015d62:	4b0c      	ldr	r3, [pc, #48]	@ (8015d94 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2200      	movs	r2, #0
 8015d68:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8015d94 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d72:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d74:	4b07      	ldr	r3, [pc, #28]	@ (8015d94 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	f04f 32ff 	mov.w	r2, #4294967295
 8015d7c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015d7e:	4b05      	ldr	r3, [pc, #20]	@ (8015d94 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	f04f 32ff 	mov.w	r2, #4294967295
 8015d86:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015d88:	2300      	movs	r3, #0
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	374c      	adds	r7, #76	@ 0x4c
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd90      	pop	{r4, r7, pc}
 8015d92:	bf00      	nop
 8015d94:	20001a68 	.word	0x20001a68

08015d98 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015d98:	b590      	push	{r4, r7, lr}
 8015d9a:	b08b      	sub	sp, #44	@ 0x2c
 8015d9c:	af04      	add	r7, sp, #16
 8015d9e:	60f8      	str	r0, [r7, #12]
 8015da0:	607b      	str	r3, [r7, #4]
 8015da2:	460b      	mov	r3, r1
 8015da4:	72fb      	strb	r3, [r7, #11]
 8015da6:	4613      	mov	r3, r2
 8015da8:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015daa:	2312      	movs	r3, #18
 8015dac:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015dae:	2309      	movs	r3, #9
 8015db0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d101      	bne.n	8015dbc <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015db8:	2309      	movs	r3, #9
 8015dba:	e05e      	b.n	8015e7a <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015dbc:	4b31      	ldr	r3, [pc, #196]	@ (8015e84 <LoRaMacCryptoSecureMessage+0xec>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	68db      	ldr	r3, [r3, #12]
 8015dc2:	68fa      	ldr	r2, [r7, #12]
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d201      	bcs.n	8015dcc <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015dc8:	2306      	movs	r3, #6
 8015dca:	e056      	b.n	8015e7a <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d101      	bne.n	8015dda <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015dd6:	2308      	movs	r3, #8
 8015dd8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015dda:	4b2a      	ldr	r3, [pc, #168]	@ (8015e84 <LoRaMacCryptoSecureMessage+0xec>)
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	68fa      	ldr	r2, [r7, #12]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d916      	bls.n	8015e14 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015df0:	b219      	sxth	r1, r3
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	689c      	ldr	r4, [r3, #8]
 8015df6:	7dfa      	ldrb	r2, [r7, #23]
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	9301      	str	r3, [sp, #4]
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	9300      	str	r3, [sp, #0]
 8015e00:	4623      	mov	r3, r4
 8015e02:	f7ff fa73 	bl	80152ec <PayloadEncrypt>
 8015e06:	4603      	mov	r3, r0
 8015e08:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e0a:	7dbb      	ldrb	r3, [r7, #22]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d001      	beq.n	8015e14 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015e10:	7dbb      	ldrb	r3, [r7, #22]
 8015e12:	e032      	b.n	8015e7a <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f000 fb49 	bl	80164ac <LoRaMacSerializerData>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d001      	beq.n	8015e24 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015e20:	2310      	movs	r3, #16
 8015e22:	e02a      	b.n	8015e7a <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015e24:	2308      	movs	r3, #8
 8015e26:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	6818      	ldr	r0, [r3, #0]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	791b      	ldrb	r3, [r3, #4]
 8015e30:	3b04      	subs	r3, #4
 8015e32:	b299      	uxth	r1, r3
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	689b      	ldr	r3, [r3, #8]
 8015e38:	687a      	ldr	r2, [r7, #4]
 8015e3a:	322c      	adds	r2, #44	@ 0x2c
 8015e3c:	7dfc      	ldrb	r4, [r7, #23]
 8015e3e:	9203      	str	r2, [sp, #12]
 8015e40:	68fa      	ldr	r2, [r7, #12]
 8015e42:	9202      	str	r2, [sp, #8]
 8015e44:	9301      	str	r3, [sp, #4]
 8015e46:	2300      	movs	r3, #0
 8015e48:	9300      	str	r3, [sp, #0]
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	4622      	mov	r2, r4
 8015e4e:	f7ff fb4e 	bl	80154ee <ComputeCmacB0>
 8015e52:	4603      	mov	r3, r0
 8015e54:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e56:	7dbb      	ldrb	r3, [r7, #22]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d001      	beq.n	8015e60 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8015e5c:	7dbb      	ldrb	r3, [r7, #22]
 8015e5e:	e00c      	b.n	8015e7a <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f000 fb23 	bl	80164ac <LoRaMacSerializerData>
 8015e66:	4603      	mov	r3, r0
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d001      	beq.n	8015e70 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015e6c:	2310      	movs	r3, #16
 8015e6e:	e004      	b.n	8015e7a <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8015e70:	4b04      	ldr	r3, [pc, #16]	@ (8015e84 <LoRaMacCryptoSecureMessage+0xec>)
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	68fa      	ldr	r2, [r7, #12]
 8015e76:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015e78:	2300      	movs	r3, #0
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	371c      	adds	r7, #28
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd90      	pop	{r4, r7, pc}
 8015e82:	bf00      	nop
 8015e84:	20001a68 	.word	0x20001a68

08015e88 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015e88:	b590      	push	{r4, r7, lr}
 8015e8a:	b08b      	sub	sp, #44	@ 0x2c
 8015e8c:	af04      	add	r7, sp, #16
 8015e8e:	60b9      	str	r1, [r7, #8]
 8015e90:	607b      	str	r3, [r7, #4]
 8015e92:	4603      	mov	r3, r0
 8015e94:	73fb      	strb	r3, [r7, #15]
 8015e96:	4613      	mov	r3, r2
 8015e98:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d101      	bne.n	8015ea4 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ea0:	2309      	movs	r3, #9
 8015ea2:	e083      	b.n	8015fac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015ea4:	7bbb      	ldrb	r3, [r7, #14]
 8015ea6:	6879      	ldr	r1, [r7, #4]
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7ff fc9f 	bl	80157ec <CheckFCntDown>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	f083 0301 	eor.w	r3, r3, #1
 8015eb4:	b2db      	uxtb	r3, r3
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d001      	beq.n	8015ebe <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015eba:	2306      	movs	r3, #6
 8015ebc:	e076      	b.n	8015fac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015ebe:	2312      	movs	r3, #18
 8015ec0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015ec2:	2309      	movs	r3, #9
 8015ec4:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015ec6:	2308      	movs	r3, #8
 8015ec8:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ecc:	f000 f97a 	bl	80161c4 <LoRaMacParserData>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d001      	beq.n	8015eda <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015ed6:	230f      	movs	r3, #15
 8015ed8:	e068      	b.n	8015fac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015eda:	f107 0210 	add.w	r2, r7, #16
 8015ede:	7bfb      	ldrb	r3, [r7, #15]
 8015ee0:	4611      	mov	r1, r2
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f7ff fbd0 	bl	8015688 <GetKeyAddrItem>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015eec:	7d7b      	ldrb	r3, [r7, #21]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d001      	beq.n	8015ef6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8015ef2:	7d7b      	ldrb	r3, [r7, #21]
 8015ef4:	e05a      	b.n	8015fac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	785b      	ldrb	r3, [r3, #1]
 8015efa:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015efc:	693b      	ldr	r3, [r7, #16]
 8015efe:	789b      	ldrb	r3, [r3, #2]
 8015f00:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f04:	689b      	ldr	r3, [r3, #8]
 8015f06:	68ba      	ldr	r2, [r7, #8]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d001      	beq.n	8015f10 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015f0c:	2302      	movs	r3, #2
 8015f0e:	e04d      	b.n	8015fac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f12:	7b1b      	ldrb	r3, [r3, #12]
 8015f14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015f18:	b2db      	uxtb	r3, r3
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	bf14      	ite	ne
 8015f1e:	2301      	movne	r3, #1
 8015f20:	2300      	moveq	r3, #0
 8015f22:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015f24:	4b23      	ldr	r3, [pc, #140]	@ (8015fb4 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	789b      	ldrb	r3, [r3, #2]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d101      	bne.n	8015f32 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f34:	6818      	ldr	r0, [r3, #0]
 8015f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f38:	791b      	ldrb	r3, [r3, #4]
 8015f3a:	3b04      	subs	r3, #4
 8015f3c:	b299      	uxth	r1, r3
 8015f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f42:	7dbc      	ldrb	r4, [r7, #22]
 8015f44:	7d3a      	ldrb	r2, [r7, #20]
 8015f46:	9303      	str	r3, [sp, #12]
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	9302      	str	r3, [sp, #8]
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	9301      	str	r3, [sp, #4]
 8015f50:	2301      	movs	r3, #1
 8015f52:	9300      	str	r3, [sp, #0]
 8015f54:	4623      	mov	r3, r4
 8015f56:	f7ff fb08 	bl	801556a <VerifyCmacB0>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015f5e:	7d7b      	ldrb	r3, [r7, #21]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d001      	beq.n	8015f68 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8015f64:	7d7b      	ldrb	r3, [r7, #21]
 8015f66:	e021      	b.n	8015fac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d101      	bne.n	8015f76 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015f72:	2308      	movs	r3, #8
 8015f74:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f78:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f80:	b219      	sxth	r1, r3
 8015f82:	7dfa      	ldrb	r2, [r7, #23]
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	9301      	str	r3, [sp, #4]
 8015f88:	2301      	movs	r3, #1
 8015f8a:	9300      	str	r3, [sp, #0]
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	f7ff f9ad 	bl	80152ec <PayloadEncrypt>
 8015f92:	4603      	mov	r3, r0
 8015f94:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015f96:	7d7b      	ldrb	r3, [r7, #21]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d001      	beq.n	8015fa0 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8015f9c:	7d7b      	ldrb	r3, [r7, #21]
 8015f9e:	e005      	b.n	8015fac <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8015fa0:	7bbb      	ldrb	r3, [r7, #14]
 8015fa2:	6879      	ldr	r1, [r7, #4]
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7ff fc45 	bl	8015834 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015faa:	2300      	movs	r3, #0
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	371c      	adds	r7, #28
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd90      	pop	{r4, r7, pc}
 8015fb4:	20001a68 	.word	0x20001a68

08015fb8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b088      	sub	sp, #32
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	460a      	mov	r2, r1
 8015fc2:	71fb      	strb	r3, [r7, #7]
 8015fc4:	4613      	mov	r3, r2
 8015fc6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8015fc8:	2300      	movs	r3, #0
 8015fca:	60fb      	str	r3, [r7, #12]
 8015fcc:	f107 0310 	add.w	r3, r7, #16
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	601a      	str	r2, [r3, #0]
 8015fd4:	605a      	str	r2, [r3, #4]
 8015fd6:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8015fdc:	79bb      	ldrb	r3, [r7, #6]
 8015fde:	2b0c      	cmp	r3, #12
 8015fe0:	d00b      	beq.n	8015ffa <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8015fe2:	2b0c      	cmp	r3, #12
 8015fe4:	dc0f      	bgt.n	8016006 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8015fe6:	2b0a      	cmp	r3, #10
 8015fe8:	d00a      	beq.n	8016000 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8015fea:	2b0b      	cmp	r3, #11
 8015fec:	d10b      	bne.n	8016006 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8015fee:	79fb      	ldrb	r3, [r7, #7]
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d10a      	bne.n	801600a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8015ff4:	2320      	movs	r3, #32
 8015ff6:	733b      	strb	r3, [r7, #12]
            }
            break;
 8015ff8:	e007      	b.n	801600a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8015ffa:	230b      	movs	r3, #11
 8015ffc:	77fb      	strb	r3, [r7, #31]
            break;
 8015ffe:	e005      	b.n	801600c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8016000:	2330      	movs	r3, #48	@ 0x30
 8016002:	733b      	strb	r3, [r7, #12]
            break;
 8016004:	e002      	b.n	801600c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016006:	230a      	movs	r3, #10
 8016008:	e00d      	b.n	8016026 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801600a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801600c:	79ba      	ldrb	r2, [r7, #6]
 801600e:	7ff9      	ldrb	r1, [r7, #31]
 8016010:	f107 030c 	add.w	r3, r7, #12
 8016014:	4618      	mov	r0, r3
 8016016:	f7f7 fc19 	bl	800d84c <SecureElementDeriveAndStoreKey>
 801601a:	4603      	mov	r3, r0
 801601c:	2b00      	cmp	r3, #0
 801601e:	d001      	beq.n	8016024 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016020:	230e      	movs	r3, #14
 8016022:	e000      	b.n	8016026 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016024:	2300      	movs	r3, #0
}
 8016026:	4618      	mov	r0, r3
 8016028:	3720      	adds	r7, #32
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}

0801602e <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801602e:	b580      	push	{r7, lr}
 8016030:	b084      	sub	sp, #16
 8016032:	af00      	add	r7, sp, #0
 8016034:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d003      	beq.n	8016044 <LoRaMacParserJoinAccept+0x16>
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d101      	bne.n	8016048 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016044:	2302      	movs	r3, #2
 8016046:	e0b9      	b.n	80161bc <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8016048:	2300      	movs	r3, #0
 801604a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681a      	ldr	r2, [r3, #0]
 8016050:	89fb      	ldrh	r3, [r7, #14]
 8016052:	1c59      	adds	r1, r3, #1
 8016054:	81f9      	strh	r1, [r7, #14]
 8016056:	4413      	add	r3, r2
 8016058:	781a      	ldrb	r2, [r3, #0]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	1d98      	adds	r0, r3, #6
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681a      	ldr	r2, [r3, #0]
 8016066:	89fb      	ldrh	r3, [r7, #14]
 8016068:	4413      	add	r3, r2
 801606a:	2203      	movs	r2, #3
 801606c:	4619      	mov	r1, r3
 801606e:	f002 fd4e 	bl	8018b0e <memcpy1>
    bufItr = bufItr + 3;
 8016072:	89fb      	ldrh	r3, [r7, #14]
 8016074:	3303      	adds	r3, #3
 8016076:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f103 0009 	add.w	r0, r3, #9
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681a      	ldr	r2, [r3, #0]
 8016082:	89fb      	ldrh	r3, [r7, #14]
 8016084:	4413      	add	r3, r2
 8016086:	2203      	movs	r2, #3
 8016088:	4619      	mov	r1, r3
 801608a:	f002 fd40 	bl	8018b0e <memcpy1>
    bufItr = bufItr + 3;
 801608e:	89fb      	ldrh	r3, [r7, #14]
 8016090:	3303      	adds	r3, #3
 8016092:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	681a      	ldr	r2, [r3, #0]
 8016098:	89fb      	ldrh	r3, [r7, #14]
 801609a:	1c59      	adds	r1, r3, #1
 801609c:	81f9      	strh	r1, [r7, #14]
 801609e:	4413      	add	r3, r2
 80160a0:	781b      	ldrb	r3, [r3, #0]
 80160a2:	461a      	mov	r2, r3
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681a      	ldr	r2, [r3, #0]
 80160ac:	89fb      	ldrh	r3, [r7, #14]
 80160ae:	1c59      	adds	r1, r3, #1
 80160b0:	81f9      	strh	r1, [r7, #14]
 80160b2:	4413      	add	r3, r2
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	021a      	lsls	r2, r3, #8
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	68db      	ldr	r3, [r3, #12]
 80160bc:	431a      	orrs	r2, r3
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	681a      	ldr	r2, [r3, #0]
 80160c6:	89fb      	ldrh	r3, [r7, #14]
 80160c8:	1c59      	adds	r1, r3, #1
 80160ca:	81f9      	strh	r1, [r7, #14]
 80160cc:	4413      	add	r3, r2
 80160ce:	781b      	ldrb	r3, [r3, #0]
 80160d0:	041a      	lsls	r2, r3, #16
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	68db      	ldr	r3, [r3, #12]
 80160d6:	431a      	orrs	r2, r3
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	89fb      	ldrh	r3, [r7, #14]
 80160e2:	1c59      	adds	r1, r3, #1
 80160e4:	81f9      	strh	r1, [r7, #14]
 80160e6:	4413      	add	r3, r2
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	061a      	lsls	r2, r3, #24
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	68db      	ldr	r3, [r3, #12]
 80160f0:	431a      	orrs	r2, r3
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	681a      	ldr	r2, [r3, #0]
 80160fa:	89fb      	ldrh	r3, [r7, #14]
 80160fc:	1c59      	adds	r1, r3, #1
 80160fe:	81f9      	strh	r1, [r7, #14]
 8016100:	4413      	add	r3, r2
 8016102:	781a      	ldrb	r2, [r3, #0]
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681a      	ldr	r2, [r3, #0]
 801610c:	89fb      	ldrh	r3, [r7, #14]
 801610e:	1c59      	adds	r1, r3, #1
 8016110:	81f9      	strh	r1, [r7, #14]
 8016112:	4413      	add	r3, r2
 8016114:	781a      	ldrb	r2, [r3, #0]
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	791b      	ldrb	r3, [r3, #4]
 801611e:	1f1a      	subs	r2, r3, #4
 8016120:	89fb      	ldrh	r3, [r7, #14]
 8016122:	1ad3      	subs	r3, r2, r3
 8016124:	2b10      	cmp	r3, #16
 8016126:	d10e      	bne.n	8016146 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f103 0012 	add.w	r0, r3, #18
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681a      	ldr	r2, [r3, #0]
 8016132:	89fb      	ldrh	r3, [r7, #14]
 8016134:	4413      	add	r3, r2
 8016136:	2210      	movs	r2, #16
 8016138:	4619      	mov	r1, r3
 801613a:	f002 fce8 	bl	8018b0e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801613e:	89fb      	ldrh	r3, [r7, #14]
 8016140:	3310      	adds	r3, #16
 8016142:	81fb      	strh	r3, [r7, #14]
 8016144:	e008      	b.n	8016158 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	791b      	ldrb	r3, [r3, #4]
 801614a:	1f1a      	subs	r2, r3, #4
 801614c:	89fb      	ldrh	r3, [r7, #14]
 801614e:	1ad3      	subs	r3, r2, r3
 8016150:	2b00      	cmp	r3, #0
 8016152:	dd01      	ble.n	8016158 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016154:	2301      	movs	r3, #1
 8016156:	e031      	b.n	80161bc <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681a      	ldr	r2, [r3, #0]
 801615c:	89fb      	ldrh	r3, [r7, #14]
 801615e:	1c59      	adds	r1, r3, #1
 8016160:	81f9      	strh	r1, [r7, #14]
 8016162:	4413      	add	r3, r2
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	461a      	mov	r2, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681a      	ldr	r2, [r3, #0]
 8016170:	89fb      	ldrh	r3, [r7, #14]
 8016172:	1c59      	adds	r1, r3, #1
 8016174:	81f9      	strh	r1, [r7, #14]
 8016176:	4413      	add	r3, r2
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	021a      	lsls	r2, r3, #8
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016180:	431a      	orrs	r2, r3
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	681a      	ldr	r2, [r3, #0]
 801618a:	89fb      	ldrh	r3, [r7, #14]
 801618c:	1c59      	adds	r1, r3, #1
 801618e:	81f9      	strh	r1, [r7, #14]
 8016190:	4413      	add	r3, r2
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	041a      	lsls	r2, r3, #16
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801619a:	431a      	orrs	r2, r3
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681a      	ldr	r2, [r3, #0]
 80161a4:	89fb      	ldrh	r3, [r7, #14]
 80161a6:	1c59      	adds	r1, r3, #1
 80161a8:	81f9      	strh	r1, [r7, #14]
 80161aa:	4413      	add	r3, r2
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	061a      	lsls	r2, r3, #24
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161b4:	431a      	orrs	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80161ba:	2300      	movs	r3, #0
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3710      	adds	r7, #16
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b084      	sub	sp, #16
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d003      	beq.n	80161da <LoRaMacParserData+0x16>
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d101      	bne.n	80161de <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80161da:	2302      	movs	r3, #2
 80161dc:	e0e0      	b.n	80163a0 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 80161de:	2300      	movs	r3, #0
 80161e0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681a      	ldr	r2, [r3, #0]
 80161e6:	89fb      	ldrh	r3, [r7, #14]
 80161e8:	1c59      	adds	r1, r3, #1
 80161ea:	81f9      	strh	r1, [r7, #14]
 80161ec:	4413      	add	r3, r2
 80161ee:	781a      	ldrb	r2, [r3, #0]
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	681a      	ldr	r2, [r3, #0]
 80161f8:	89fb      	ldrh	r3, [r7, #14]
 80161fa:	1c59      	adds	r1, r3, #1
 80161fc:	81f9      	strh	r1, [r7, #14]
 80161fe:	4413      	add	r3, r2
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	461a      	mov	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681a      	ldr	r2, [r3, #0]
 801620c:	89fb      	ldrh	r3, [r7, #14]
 801620e:	1c59      	adds	r1, r3, #1
 8016210:	81f9      	strh	r1, [r7, #14]
 8016212:	4413      	add	r3, r2
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	021a      	lsls	r2, r3, #8
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	689b      	ldr	r3, [r3, #8]
 801621c:	431a      	orrs	r2, r3
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	681a      	ldr	r2, [r3, #0]
 8016226:	89fb      	ldrh	r3, [r7, #14]
 8016228:	1c59      	adds	r1, r3, #1
 801622a:	81f9      	strh	r1, [r7, #14]
 801622c:	4413      	add	r3, r2
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	041a      	lsls	r2, r3, #16
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	689b      	ldr	r3, [r3, #8]
 8016236:	431a      	orrs	r2, r3
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681a      	ldr	r2, [r3, #0]
 8016240:	89fb      	ldrh	r3, [r7, #14]
 8016242:	1c59      	adds	r1, r3, #1
 8016244:	81f9      	strh	r1, [r7, #14]
 8016246:	4413      	add	r3, r2
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	061a      	lsls	r2, r3, #24
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	689b      	ldr	r3, [r3, #8]
 8016250:	431a      	orrs	r2, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	89fb      	ldrh	r3, [r7, #14]
 801625c:	1c59      	adds	r1, r3, #1
 801625e:	81f9      	strh	r1, [r7, #14]
 8016260:	4413      	add	r3, r2
 8016262:	781a      	ldrb	r2, [r3, #0]
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681a      	ldr	r2, [r3, #0]
 801626c:	89fb      	ldrh	r3, [r7, #14]
 801626e:	1c59      	adds	r1, r3, #1
 8016270:	81f9      	strh	r1, [r7, #14]
 8016272:	4413      	add	r3, r2
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	461a      	mov	r2, r3
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	681a      	ldr	r2, [r3, #0]
 8016280:	89fb      	ldrh	r3, [r7, #14]
 8016282:	1c59      	adds	r1, r3, #1
 8016284:	81f9      	strh	r1, [r7, #14]
 8016286:	4413      	add	r3, r2
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	0219      	lsls	r1, r3, #8
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	89db      	ldrh	r3, [r3, #14]
 8016290:	b21a      	sxth	r2, r3
 8016292:	b20b      	sxth	r3, r1
 8016294:	4313      	orrs	r3, r2
 8016296:	b21b      	sxth	r3, r3
 8016298:	b29a      	uxth	r2, r3
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f103 0010 	add.w	r0, r3, #16
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681a      	ldr	r2, [r3, #0]
 80162a8:	89fb      	ldrh	r3, [r7, #14]
 80162aa:	18d1      	adds	r1, r2, r3
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	7b1b      	ldrb	r3, [r3, #12]
 80162b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80162b4:	b2db      	uxtb	r3, r3
 80162b6:	461a      	mov	r2, r3
 80162b8:	f002 fc29 	bl	8018b0e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	7b1b      	ldrb	r3, [r3, #12]
 80162c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	461a      	mov	r2, r3
 80162c8:	89fb      	ldrh	r3, [r7, #14]
 80162ca:	4413      	add	r3, r2
 80162cc:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	2200      	movs	r2, #0
 80162d2:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2200      	movs	r2, #0
 80162da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	791b      	ldrb	r3, [r3, #4]
 80162e2:	461a      	mov	r2, r3
 80162e4:	89fb      	ldrh	r3, [r7, #14]
 80162e6:	1ad3      	subs	r3, r2, r3
 80162e8:	2b04      	cmp	r3, #4
 80162ea:	dd27      	ble.n	801633c <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	681a      	ldr	r2, [r3, #0]
 80162f0:	89fb      	ldrh	r3, [r7, #14]
 80162f2:	1c59      	adds	r1, r3, #1
 80162f4:	81f9      	strh	r1, [r7, #14]
 80162f6:	4413      	add	r3, r2
 80162f8:	781a      	ldrb	r2, [r3, #0]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	791a      	ldrb	r2, [r3, #4]
 8016304:	89fb      	ldrh	r3, [r7, #14]
 8016306:	b2db      	uxtb	r3, r3
 8016308:	1ad3      	subs	r3, r2, r3
 801630a:	b2db      	uxtb	r3, r3
 801630c:	3b04      	subs	r3, #4
 801630e:	b2da      	uxtb	r2, r3
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681a      	ldr	r2, [r3, #0]
 801631e:	89fb      	ldrh	r3, [r7, #14]
 8016320:	18d1      	adds	r1, r2, r3
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016328:	461a      	mov	r2, r3
 801632a:	f002 fbf0 	bl	8018b0e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016334:	461a      	mov	r2, r3
 8016336:	89fb      	ldrh	r3, [r7, #14]
 8016338:	4413      	add	r3, r2
 801633a:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681a      	ldr	r2, [r3, #0]
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	791b      	ldrb	r3, [r3, #4]
 8016344:	3b04      	subs	r3, #4
 8016346:	4413      	add	r3, r2
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	461a      	mov	r2, r3
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	6819      	ldr	r1, [r3, #0]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	791b      	ldrb	r3, [r3, #4]
 801635c:	3b03      	subs	r3, #3
 801635e:	440b      	add	r3, r1
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	021b      	lsls	r3, r3, #8
 8016364:	431a      	orrs	r2, r3
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	6819      	ldr	r1, [r3, #0]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	791b      	ldrb	r3, [r3, #4]
 8016376:	3b02      	subs	r3, #2
 8016378:	440b      	add	r3, r1
 801637a:	781b      	ldrb	r3, [r3, #0]
 801637c:	041b      	lsls	r3, r3, #16
 801637e:	431a      	orrs	r2, r3
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	6819      	ldr	r1, [r3, #0]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	791b      	ldrb	r3, [r3, #4]
 8016390:	3b01      	subs	r3, #1
 8016392:	440b      	add	r3, r1
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	061b      	lsls	r3, r3, #24
 8016398:	431a      	orrs	r2, r3
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801639e:	2300      	movs	r3, #0
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3710      	adds	r7, #16
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}

080163a8 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b084      	sub	sp, #16
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d003      	beq.n	80163be <LoRaMacSerializerJoinRequest+0x16>
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d101      	bne.n	80163c2 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80163be:	2301      	movs	r3, #1
 80163c0:	e070      	b.n	80164a4 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80163c2:	2300      	movs	r3, #0
 80163c4:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	791b      	ldrb	r3, [r3, #4]
 80163ca:	2b16      	cmp	r3, #22
 80163cc:	d801      	bhi.n	80163d2 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80163ce:	2302      	movs	r3, #2
 80163d0:	e068      	b.n	80164a4 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681a      	ldr	r2, [r3, #0]
 80163d6:	89fb      	ldrh	r3, [r7, #14]
 80163d8:	1c59      	adds	r1, r3, #1
 80163da:	81f9      	strh	r1, [r7, #14]
 80163dc:	4413      	add	r3, r2
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	7952      	ldrb	r2, [r2, #5]
 80163e2:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681a      	ldr	r2, [r3, #0]
 80163e8:	89fb      	ldrh	r3, [r7, #14]
 80163ea:	18d0      	adds	r0, r2, r3
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	3306      	adds	r3, #6
 80163f0:	2208      	movs	r2, #8
 80163f2:	4619      	mov	r1, r3
 80163f4:	f002 fba6 	bl	8018b44 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80163f8:	89fb      	ldrh	r3, [r7, #14]
 80163fa:	3308      	adds	r3, #8
 80163fc:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681a      	ldr	r2, [r3, #0]
 8016402:	89fb      	ldrh	r3, [r7, #14]
 8016404:	18d0      	adds	r0, r2, r3
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	330e      	adds	r3, #14
 801640a:	2208      	movs	r2, #8
 801640c:	4619      	mov	r1, r3
 801640e:	f002 fb99 	bl	8018b44 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016412:	89fb      	ldrh	r3, [r7, #14]
 8016414:	3308      	adds	r3, #8
 8016416:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	8ad9      	ldrh	r1, [r3, #22]
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681a      	ldr	r2, [r3, #0]
 8016420:	89fb      	ldrh	r3, [r7, #14]
 8016422:	1c58      	adds	r0, r3, #1
 8016424:	81f8      	strh	r0, [r7, #14]
 8016426:	4413      	add	r3, r2
 8016428:	b2ca      	uxtb	r2, r1
 801642a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	8adb      	ldrh	r3, [r3, #22]
 8016430:	0a1b      	lsrs	r3, r3, #8
 8016432:	b299      	uxth	r1, r3
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681a      	ldr	r2, [r3, #0]
 8016438:	89fb      	ldrh	r3, [r7, #14]
 801643a:	1c58      	adds	r0, r3, #1
 801643c:	81f8      	strh	r0, [r7, #14]
 801643e:	4413      	add	r3, r2
 8016440:	b2ca      	uxtb	r2, r1
 8016442:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6999      	ldr	r1, [r3, #24]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	89fb      	ldrh	r3, [r7, #14]
 801644e:	1c58      	adds	r0, r3, #1
 8016450:	81f8      	strh	r0, [r7, #14]
 8016452:	4413      	add	r3, r2
 8016454:	b2ca      	uxtb	r2, r1
 8016456:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	699b      	ldr	r3, [r3, #24]
 801645c:	0a19      	lsrs	r1, r3, #8
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681a      	ldr	r2, [r3, #0]
 8016462:	89fb      	ldrh	r3, [r7, #14]
 8016464:	1c58      	adds	r0, r3, #1
 8016466:	81f8      	strh	r0, [r7, #14]
 8016468:	4413      	add	r3, r2
 801646a:	b2ca      	uxtb	r2, r1
 801646c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	699b      	ldr	r3, [r3, #24]
 8016472:	0c19      	lsrs	r1, r3, #16
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681a      	ldr	r2, [r3, #0]
 8016478:	89fb      	ldrh	r3, [r7, #14]
 801647a:	1c58      	adds	r0, r3, #1
 801647c:	81f8      	strh	r0, [r7, #14]
 801647e:	4413      	add	r3, r2
 8016480:	b2ca      	uxtb	r2, r1
 8016482:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	699b      	ldr	r3, [r3, #24]
 8016488:	0e19      	lsrs	r1, r3, #24
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681a      	ldr	r2, [r3, #0]
 801648e:	89fb      	ldrh	r3, [r7, #14]
 8016490:	1c58      	adds	r0, r3, #1
 8016492:	81f8      	strh	r0, [r7, #14]
 8016494:	4413      	add	r3, r2
 8016496:	b2ca      	uxtb	r2, r1
 8016498:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801649a:	89fb      	ldrh	r3, [r7, #14]
 801649c:	b2da      	uxtb	r2, r3
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80164a2:	2300      	movs	r3, #0
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	3710      	adds	r7, #16
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}

080164ac <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b084      	sub	sp, #16
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d003      	beq.n	80164c2 <LoRaMacSerializerData+0x16>
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d101      	bne.n	80164c6 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80164c2:	2301      	movs	r3, #1
 80164c4:	e0e3      	b.n	801668e <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 80164c6:	2300      	movs	r3, #0
 80164c8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80164ca:	2308      	movs	r3, #8
 80164cc:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	7b1b      	ldrb	r3, [r3, #12]
 80164d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80164d6:	b2db      	uxtb	r3, r3
 80164d8:	461a      	mov	r2, r3
 80164da:	89bb      	ldrh	r3, [r7, #12]
 80164dc:	4413      	add	r3, r2
 80164de:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d002      	beq.n	80164f0 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80164ea:	89bb      	ldrh	r3, [r7, #12]
 80164ec:	3301      	adds	r3, #1
 80164ee:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80164f6:	461a      	mov	r2, r3
 80164f8:	89bb      	ldrh	r3, [r7, #12]
 80164fa:	4413      	add	r3, r2
 80164fc:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80164fe:	89bb      	ldrh	r3, [r7, #12]
 8016500:	3304      	adds	r3, #4
 8016502:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	791b      	ldrb	r3, [r3, #4]
 8016508:	461a      	mov	r2, r3
 801650a:	89bb      	ldrh	r3, [r7, #12]
 801650c:	4293      	cmp	r3, r2
 801650e:	d901      	bls.n	8016514 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016510:	2302      	movs	r3, #2
 8016512:	e0bc      	b.n	801668e <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	681a      	ldr	r2, [r3, #0]
 8016518:	89fb      	ldrh	r3, [r7, #14]
 801651a:	1c59      	adds	r1, r3, #1
 801651c:	81f9      	strh	r1, [r7, #14]
 801651e:	4413      	add	r3, r2
 8016520:	687a      	ldr	r2, [r7, #4]
 8016522:	7952      	ldrb	r2, [r2, #5]
 8016524:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	6899      	ldr	r1, [r3, #8]
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	89fb      	ldrh	r3, [r7, #14]
 8016530:	1c58      	adds	r0, r3, #1
 8016532:	81f8      	strh	r0, [r7, #14]
 8016534:	4413      	add	r3, r2
 8016536:	b2ca      	uxtb	r2, r1
 8016538:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	689b      	ldr	r3, [r3, #8]
 801653e:	0a19      	lsrs	r1, r3, #8
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681a      	ldr	r2, [r3, #0]
 8016544:	89fb      	ldrh	r3, [r7, #14]
 8016546:	1c58      	adds	r0, r3, #1
 8016548:	81f8      	strh	r0, [r7, #14]
 801654a:	4413      	add	r3, r2
 801654c:	b2ca      	uxtb	r2, r1
 801654e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	689b      	ldr	r3, [r3, #8]
 8016554:	0c19      	lsrs	r1, r3, #16
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	89fb      	ldrh	r3, [r7, #14]
 801655c:	1c58      	adds	r0, r3, #1
 801655e:	81f8      	strh	r0, [r7, #14]
 8016560:	4413      	add	r3, r2
 8016562:	b2ca      	uxtb	r2, r1
 8016564:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	689b      	ldr	r3, [r3, #8]
 801656a:	0e19      	lsrs	r1, r3, #24
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681a      	ldr	r2, [r3, #0]
 8016570:	89fb      	ldrh	r3, [r7, #14]
 8016572:	1c58      	adds	r0, r3, #1
 8016574:	81f8      	strh	r0, [r7, #14]
 8016576:	4413      	add	r3, r2
 8016578:	b2ca      	uxtb	r2, r1
 801657a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681a      	ldr	r2, [r3, #0]
 8016580:	89fb      	ldrh	r3, [r7, #14]
 8016582:	1c59      	adds	r1, r3, #1
 8016584:	81f9      	strh	r1, [r7, #14]
 8016586:	4413      	add	r3, r2
 8016588:	687a      	ldr	r2, [r7, #4]
 801658a:	7b12      	ldrb	r2, [r2, #12]
 801658c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	89d9      	ldrh	r1, [r3, #14]
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	681a      	ldr	r2, [r3, #0]
 8016596:	89fb      	ldrh	r3, [r7, #14]
 8016598:	1c58      	adds	r0, r3, #1
 801659a:	81f8      	strh	r0, [r7, #14]
 801659c:	4413      	add	r3, r2
 801659e:	b2ca      	uxtb	r2, r1
 80165a0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	89db      	ldrh	r3, [r3, #14]
 80165a6:	0a1b      	lsrs	r3, r3, #8
 80165a8:	b299      	uxth	r1, r3
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681a      	ldr	r2, [r3, #0]
 80165ae:	89fb      	ldrh	r3, [r7, #14]
 80165b0:	1c58      	adds	r0, r3, #1
 80165b2:	81f8      	strh	r0, [r7, #14]
 80165b4:	4413      	add	r3, r2
 80165b6:	b2ca      	uxtb	r2, r1
 80165b8:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681a      	ldr	r2, [r3, #0]
 80165be:	89fb      	ldrh	r3, [r7, #14]
 80165c0:	18d0      	adds	r0, r2, r3
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	f103 0110 	add.w	r1, r3, #16
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	7b1b      	ldrb	r3, [r3, #12]
 80165cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80165d0:	b2db      	uxtb	r3, r3
 80165d2:	461a      	mov	r2, r3
 80165d4:	f002 fa9b 	bl	8018b0e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	7b1b      	ldrb	r3, [r3, #12]
 80165dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80165e0:	b2db      	uxtb	r3, r3
 80165e2:	461a      	mov	r2, r3
 80165e4:	89fb      	ldrh	r3, [r7, #14]
 80165e6:	4413      	add	r3, r2
 80165e8:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d009      	beq.n	8016608 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681a      	ldr	r2, [r3, #0]
 80165f8:	89fb      	ldrh	r3, [r7, #14]
 80165fa:	1c59      	adds	r1, r3, #1
 80165fc:	81f9      	strh	r1, [r7, #14]
 80165fe:	4413      	add	r3, r2
 8016600:	687a      	ldr	r2, [r7, #4]
 8016602:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016606:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	89fb      	ldrh	r3, [r7, #14]
 801660e:	18d0      	adds	r0, r2, r3
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801661a:	461a      	mov	r2, r3
 801661c:	f002 fa77 	bl	8018b0e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016626:	461a      	mov	r2, r3
 8016628:	89fb      	ldrh	r3, [r7, #14]
 801662a:	4413      	add	r3, r2
 801662c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681a      	ldr	r2, [r3, #0]
 8016636:	89fb      	ldrh	r3, [r7, #14]
 8016638:	1c58      	adds	r0, r3, #1
 801663a:	81f8      	strh	r0, [r7, #14]
 801663c:	4413      	add	r3, r2
 801663e:	b2ca      	uxtb	r2, r1
 8016640:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016646:	0a19      	lsrs	r1, r3, #8
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681a      	ldr	r2, [r3, #0]
 801664c:	89fb      	ldrh	r3, [r7, #14]
 801664e:	1c58      	adds	r0, r3, #1
 8016650:	81f8      	strh	r0, [r7, #14]
 8016652:	4413      	add	r3, r2
 8016654:	b2ca      	uxtb	r2, r1
 8016656:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801665c:	0c19      	lsrs	r1, r3, #16
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681a      	ldr	r2, [r3, #0]
 8016662:	89fb      	ldrh	r3, [r7, #14]
 8016664:	1c58      	adds	r0, r3, #1
 8016666:	81f8      	strh	r0, [r7, #14]
 8016668:	4413      	add	r3, r2
 801666a:	b2ca      	uxtb	r2, r1
 801666c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016672:	0e19      	lsrs	r1, r3, #24
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	681a      	ldr	r2, [r3, #0]
 8016678:	89fb      	ldrh	r3, [r7, #14]
 801667a:	1c58      	adds	r0, r3, #1
 801667c:	81f8      	strh	r0, [r7, #14]
 801667e:	4413      	add	r3, r2
 8016680:	b2ca      	uxtb	r2, r1
 8016682:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016684:	89fb      	ldrh	r3, [r7, #14]
 8016686:	b2da      	uxtb	r2, r3
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801668c:	2300      	movs	r3, #0
}
 801668e:	4618      	mov	r0, r3
 8016690:	3710      	adds	r7, #16
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}

08016696 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016696:	b480      	push	{r7}
 8016698:	b083      	sub	sp, #12
 801669a:	af00      	add	r7, sp, #0
 801669c:	4603      	mov	r3, r0
 801669e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80166a0:	79fb      	ldrb	r3, [r7, #7]
 80166a2:	2b05      	cmp	r3, #5
 80166a4:	d101      	bne.n	80166aa <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80166a6:	2301      	movs	r3, #1
 80166a8:	e000      	b.n	80166ac <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80166aa:	2300      	movs	r3, #0
        }
    }
}
 80166ac:	4618      	mov	r0, r3
 80166ae:	370c      	adds	r7, #12
 80166b0:	46bd      	mov	sp, r7
 80166b2:	bc80      	pop	{r7}
 80166b4:	4770      	bx	lr

080166b6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80166b6:	b580      	push	{r7, lr}
 80166b8:	b084      	sub	sp, #16
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	4603      	mov	r3, r0
 80166be:	6039      	str	r1, [r7, #0]
 80166c0:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80166c2:	2300      	movs	r3, #0
 80166c4:	60bb      	str	r3, [r7, #8]
    switch( region )
 80166c6:	79fb      	ldrb	r3, [r7, #7]
 80166c8:	2b05      	cmp	r3, #5
 80166ca:	d105      	bne.n	80166d8 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80166cc:	6838      	ldr	r0, [r7, #0]
 80166ce:	f001 f8fb 	bl	80178c8 <RegionEU868GetPhyParam>
 80166d2:	4603      	mov	r3, r0
 80166d4:	60fb      	str	r3, [r7, #12]
 80166d6:	e001      	b.n	80166dc <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	4618      	mov	r0, r3
 80166e0:	3710      	adds	r7, #16
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}

080166e6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80166e6:	b580      	push	{r7, lr}
 80166e8:	b082      	sub	sp, #8
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	4603      	mov	r3, r0
 80166ee:	6039      	str	r1, [r7, #0]
 80166f0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80166f2:	79fb      	ldrb	r3, [r7, #7]
 80166f4:	2b05      	cmp	r3, #5
 80166f6:	d103      	bne.n	8016700 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80166f8:	6838      	ldr	r0, [r7, #0]
 80166fa:	f001 fa2b 	bl	8017b54 <RegionEU868SetBandTxDone>
 80166fe:	e000      	b.n	8016702 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016700:	bf00      	nop
        }
    }
}
 8016702:	3708      	adds	r7, #8
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}

08016708 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	4603      	mov	r3, r0
 8016710:	6039      	str	r1, [r7, #0]
 8016712:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016714:	79fb      	ldrb	r3, [r7, #7]
 8016716:	2b05      	cmp	r3, #5
 8016718:	d103      	bne.n	8016722 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 801671a:	6838      	ldr	r0, [r7, #0]
 801671c:	f001 fa46 	bl	8017bac <RegionEU868InitDefaults>
 8016720:	e000      	b.n	8016724 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016722:	bf00      	nop
        }
    }
}
 8016724:	bf00      	nop
 8016726:	3708      	adds	r7, #8
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}

0801672c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	4603      	mov	r3, r0
 8016734:	6039      	str	r1, [r7, #0]
 8016736:	71fb      	strb	r3, [r7, #7]
 8016738:	4613      	mov	r3, r2
 801673a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801673c:	79fb      	ldrb	r3, [r7, #7]
 801673e:	2b05      	cmp	r3, #5
 8016740:	d106      	bne.n	8016750 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016742:	79bb      	ldrb	r3, [r7, #6]
 8016744:	4619      	mov	r1, r3
 8016746:	6838      	ldr	r0, [r7, #0]
 8016748:	f001 face 	bl	8017ce8 <RegionEU868Verify>
 801674c:	4603      	mov	r3, r0
 801674e:	e000      	b.n	8016752 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016750:	2300      	movs	r3, #0
        }
    }
}
 8016752:	4618      	mov	r0, r3
 8016754:	3708      	adds	r7, #8
 8016756:	46bd      	mov	sp, r7
 8016758:	bd80      	pop	{r7, pc}

0801675a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801675a:	b580      	push	{r7, lr}
 801675c:	b082      	sub	sp, #8
 801675e:	af00      	add	r7, sp, #0
 8016760:	4603      	mov	r3, r0
 8016762:	6039      	str	r1, [r7, #0]
 8016764:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016766:	79fb      	ldrb	r3, [r7, #7]
 8016768:	2b05      	cmp	r3, #5
 801676a:	d103      	bne.n	8016774 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801676c:	6838      	ldr	r0, [r7, #0]
 801676e:	f001 fb37 	bl	8017de0 <RegionEU868ApplyCFList>
 8016772:	e000      	b.n	8016776 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016774:	bf00      	nop
        }
    }
}
 8016776:	bf00      	nop
 8016778:	3708      	adds	r7, #8
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}

0801677e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801677e:	b580      	push	{r7, lr}
 8016780:	b082      	sub	sp, #8
 8016782:	af00      	add	r7, sp, #0
 8016784:	4603      	mov	r3, r0
 8016786:	6039      	str	r1, [r7, #0]
 8016788:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801678a:	79fb      	ldrb	r3, [r7, #7]
 801678c:	2b05      	cmp	r3, #5
 801678e:	d104      	bne.n	801679a <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016790:	6838      	ldr	r0, [r7, #0]
 8016792:	f001 fb99 	bl	8017ec8 <RegionEU868ChanMaskSet>
 8016796:	4603      	mov	r3, r0
 8016798:	e000      	b.n	801679c <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801679a:	2300      	movs	r3, #0
        }
    }
}
 801679c:	4618      	mov	r0, r3
 801679e:	3708      	adds	r7, #8
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	603b      	str	r3, [r7, #0]
 80167ac:	4603      	mov	r3, r0
 80167ae:	71fb      	strb	r3, [r7, #7]
 80167b0:	460b      	mov	r3, r1
 80167b2:	71bb      	strb	r3, [r7, #6]
 80167b4:	4613      	mov	r3, r2
 80167b6:	717b      	strb	r3, [r7, #5]
    switch( region )
 80167b8:	79fb      	ldrb	r3, [r7, #7]
 80167ba:	2b05      	cmp	r3, #5
 80167bc:	d107      	bne.n	80167ce <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80167be:	7979      	ldrb	r1, [r7, #5]
 80167c0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	683a      	ldr	r2, [r7, #0]
 80167c8:	f001 fba8 	bl	8017f1c <RegionEU868ComputeRxWindowParameters>
 80167cc:	e000      	b.n	80167d0 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80167ce:	bf00      	nop
        }
    }
}
 80167d0:	bf00      	nop
 80167d2:	3708      	adds	r7, #8
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	4603      	mov	r3, r0
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	607a      	str	r2, [r7, #4]
 80167e4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80167e6:	7bfb      	ldrb	r3, [r7, #15]
 80167e8:	2b05      	cmp	r3, #5
 80167ea:	d105      	bne.n	80167f8 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80167ec:	6879      	ldr	r1, [r7, #4]
 80167ee:	68b8      	ldr	r0, [r7, #8]
 80167f0:	f001 fbee 	bl	8017fd0 <RegionEU868RxConfig>
 80167f4:	4603      	mov	r3, r0
 80167f6:	e000      	b.n	80167fa <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80167f8:	2300      	movs	r3, #0
        }
    }
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3710      	adds	r7, #16
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}

08016802 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016802:	b580      	push	{r7, lr}
 8016804:	b084      	sub	sp, #16
 8016806:	af00      	add	r7, sp, #0
 8016808:	60b9      	str	r1, [r7, #8]
 801680a:	607a      	str	r2, [r7, #4]
 801680c:	603b      	str	r3, [r7, #0]
 801680e:	4603      	mov	r3, r0
 8016810:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016812:	7bfb      	ldrb	r3, [r7, #15]
 8016814:	2b05      	cmp	r3, #5
 8016816:	d106      	bne.n	8016826 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016818:	683a      	ldr	r2, [r7, #0]
 801681a:	6879      	ldr	r1, [r7, #4]
 801681c:	68b8      	ldr	r0, [r7, #8]
 801681e:	f001 fca7 	bl	8018170 <RegionEU868TxConfig>
 8016822:	4603      	mov	r3, r0
 8016824:	e000      	b.n	8016828 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016826:	2300      	movs	r3, #0
        }
    }
}
 8016828:	4618      	mov	r0, r3
 801682a:	3710      	adds	r7, #16
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}

08016830 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b086      	sub	sp, #24
 8016834:	af02      	add	r7, sp, #8
 8016836:	60b9      	str	r1, [r7, #8]
 8016838:	607a      	str	r2, [r7, #4]
 801683a:	603b      	str	r3, [r7, #0]
 801683c:	4603      	mov	r3, r0
 801683e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016840:	7bfb      	ldrb	r3, [r7, #15]
 8016842:	2b05      	cmp	r3, #5
 8016844:	d109      	bne.n	801685a <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016846:	69fb      	ldr	r3, [r7, #28]
 8016848:	9300      	str	r3, [sp, #0]
 801684a:	69bb      	ldr	r3, [r7, #24]
 801684c:	683a      	ldr	r2, [r7, #0]
 801684e:	6879      	ldr	r1, [r7, #4]
 8016850:	68b8      	ldr	r0, [r7, #8]
 8016852:	f001 fd5d 	bl	8018310 <RegionEU868LinkAdrReq>
 8016856:	4603      	mov	r3, r0
 8016858:	e000      	b.n	801685c <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801685a:	2300      	movs	r3, #0
        }
    }
}
 801685c:	4618      	mov	r0, r3
 801685e:	3710      	adds	r7, #16
 8016860:	46bd      	mov	sp, r7
 8016862:	bd80      	pop	{r7, pc}

08016864 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b082      	sub	sp, #8
 8016868:	af00      	add	r7, sp, #0
 801686a:	4603      	mov	r3, r0
 801686c:	6039      	str	r1, [r7, #0]
 801686e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016870:	79fb      	ldrb	r3, [r7, #7]
 8016872:	2b05      	cmp	r3, #5
 8016874:	d104      	bne.n	8016880 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016876:	6838      	ldr	r0, [r7, #0]
 8016878:	f001 fe6c 	bl	8018554 <RegionEU868RxParamSetupReq>
 801687c:	4603      	mov	r3, r0
 801687e:	e000      	b.n	8016882 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016880:	2300      	movs	r3, #0
        }
    }
}
 8016882:	4618      	mov	r0, r3
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}

0801688a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801688a:	b580      	push	{r7, lr}
 801688c:	b082      	sub	sp, #8
 801688e:	af00      	add	r7, sp, #0
 8016890:	4603      	mov	r3, r0
 8016892:	6039      	str	r1, [r7, #0]
 8016894:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016896:	79fb      	ldrb	r3, [r7, #7]
 8016898:	2b05      	cmp	r3, #5
 801689a:	d104      	bne.n	80168a6 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801689c:	6838      	ldr	r0, [r7, #0]
 801689e:	f001 fe97 	bl	80185d0 <RegionEU868NewChannelReq>
 80168a2:	4603      	mov	r3, r0
 80168a4:	e000      	b.n	80168a8 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80168a6:	2300      	movs	r3, #0
        }
    }
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3708      	adds	r7, #8
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}

080168b0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	4603      	mov	r3, r0
 80168b8:	6039      	str	r1, [r7, #0]
 80168ba:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80168bc:	79fb      	ldrb	r3, [r7, #7]
 80168be:	2b05      	cmp	r3, #5
 80168c0:	d104      	bne.n	80168cc <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80168c2:	6838      	ldr	r0, [r7, #0]
 80168c4:	f001 fee2 	bl	801868c <RegionEU868TxParamSetupReq>
 80168c8:	4603      	mov	r3, r0
 80168ca:	e000      	b.n	80168ce <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80168cc:	2300      	movs	r3, #0
        }
    }
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	3708      	adds	r7, #8
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}

080168d6 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80168d6:	b580      	push	{r7, lr}
 80168d8:	b082      	sub	sp, #8
 80168da:	af00      	add	r7, sp, #0
 80168dc:	4603      	mov	r3, r0
 80168de:	6039      	str	r1, [r7, #0]
 80168e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80168e2:	79fb      	ldrb	r3, [r7, #7]
 80168e4:	2b05      	cmp	r3, #5
 80168e6:	d104      	bne.n	80168f2 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80168e8:	6838      	ldr	r0, [r7, #0]
 80168ea:	f001 fedb 	bl	80186a4 <RegionEU868DlChannelReq>
 80168ee:	4603      	mov	r3, r0
 80168f0:	e000      	b.n	80168f4 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80168f2:	2300      	movs	r3, #0
        }
    }
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	3708      	adds	r7, #8
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}

080168fc <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	4603      	mov	r3, r0
 8016904:	71fb      	strb	r3, [r7, #7]
 8016906:	460b      	mov	r3, r1
 8016908:	71bb      	strb	r3, [r7, #6]
 801690a:	4613      	mov	r3, r2
 801690c:	717b      	strb	r3, [r7, #5]
    switch( region )
 801690e:	79fb      	ldrb	r3, [r7, #7]
 8016910:	2b05      	cmp	r3, #5
 8016912:	d108      	bne.n	8016926 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016914:	797a      	ldrb	r2, [r7, #5]
 8016916:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801691a:	4611      	mov	r1, r2
 801691c:	4618      	mov	r0, r3
 801691e:	f001 ff0b 	bl	8018738 <RegionEU868AlternateDr>
 8016922:	4603      	mov	r3, r0
 8016924:	e000      	b.n	8016928 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016926:	2300      	movs	r3, #0
        }
    }
}
 8016928:	4618      	mov	r0, r3
 801692a:	3708      	adds	r7, #8
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}

08016930 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b084      	sub	sp, #16
 8016934:	af00      	add	r7, sp, #0
 8016936:	60b9      	str	r1, [r7, #8]
 8016938:	607a      	str	r2, [r7, #4]
 801693a:	603b      	str	r3, [r7, #0]
 801693c:	4603      	mov	r3, r0
 801693e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016940:	7bfb      	ldrb	r3, [r7, #15]
 8016942:	2b05      	cmp	r3, #5
 8016944:	d107      	bne.n	8016956 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016946:	69bb      	ldr	r3, [r7, #24]
 8016948:	683a      	ldr	r2, [r7, #0]
 801694a:	6879      	ldr	r1, [r7, #4]
 801694c:	68b8      	ldr	r0, [r7, #8]
 801694e:	f001 ff03 	bl	8018758 <RegionEU868NextChannel>
 8016952:	4603      	mov	r3, r0
 8016954:	e000      	b.n	8016958 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016956:	2309      	movs	r3, #9
        }
    }
}
 8016958:	4618      	mov	r0, r3
 801695a:	3710      	adds	r7, #16
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}

08016960 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016960:	b590      	push	{r4, r7, lr}
 8016962:	b083      	sub	sp, #12
 8016964:	af00      	add	r7, sp, #0
 8016966:	4604      	mov	r4, r0
 8016968:	4608      	mov	r0, r1
 801696a:	4611      	mov	r1, r2
 801696c:	461a      	mov	r2, r3
 801696e:	4623      	mov	r3, r4
 8016970:	71fb      	strb	r3, [r7, #7]
 8016972:	4603      	mov	r3, r0
 8016974:	71bb      	strb	r3, [r7, #6]
 8016976:	460b      	mov	r3, r1
 8016978:	717b      	strb	r3, [r7, #5]
 801697a:	4613      	mov	r3, r2
 801697c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801697e:	79fb      	ldrb	r3, [r7, #7]
 8016980:	2b05      	cmp	r3, #5
 8016982:	d109      	bne.n	8016998 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016984:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8016988:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801698c:	79bb      	ldrb	r3, [r7, #6]
 801698e:	4618      	mov	r0, r3
 8016990:	f002 f85c 	bl	8018a4c <RegionEU868ApplyDrOffset>
 8016994:	4603      	mov	r3, r0
 8016996:	e000      	b.n	801699a <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016998:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801699a:	4618      	mov	r0, r3
 801699c:	370c      	adds	r7, #12
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd90      	pop	{r4, r7, pc}
	...

080169a4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80169a4:	b480      	push	{r7}
 80169a6:	b083      	sub	sp, #12
 80169a8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80169aa:	4b04      	ldr	r3, [pc, #16]	@ (80169bc <RegionGetVersion+0x18>)
 80169ac:	607b      	str	r3, [r7, #4]

    return version;
 80169ae:	687b      	ldr	r3, [r7, #4]
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	370c      	adds	r7, #12
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bc80      	pop	{r7}
 80169b8:	4770      	bx	lr
 80169ba:	bf00      	nop
 80169bc:	02010003 	.word	0x02010003

080169c0 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80169c0:	b480      	push	{r7}
 80169c2:	b087      	sub	sp, #28
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	60f8      	str	r0, [r7, #12]
 80169c8:	4608      	mov	r0, r1
 80169ca:	4639      	mov	r1, r7
 80169cc:	e881 000c 	stmia.w	r1, {r2, r3}
 80169d0:	4603      	mov	r3, r0
 80169d2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	881b      	ldrh	r3, [r3, #0]
 80169d8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80169da:	7afb      	ldrb	r3, [r7, #11]
 80169dc:	f083 0301 	eor.w	r3, r3, #1
 80169e0:	b2db      	uxtb	r3, r3
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d007      	beq.n	80169f6 <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 80169e6:	2364      	movs	r3, #100	@ 0x64
 80169e8:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80169ea:	8aba      	ldrh	r2, [r7, #20]
 80169ec:	8afb      	ldrh	r3, [r7, #22]
 80169ee:	4293      	cmp	r3, r2
 80169f0:	bf38      	it	cc
 80169f2:	4613      	movcc	r3, r2
 80169f4:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80169f6:	8afb      	ldrh	r3, [r7, #22]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d101      	bne.n	8016a00 <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 80169fc:	2301      	movs	r3, #1
 80169fe:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016a00:	8afb      	ldrh	r3, [r7, #22]
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	371c      	adds	r7, #28
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bc80      	pop	{r7}
 8016a0a:	4770      	bx	lr

08016a0c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b086      	sub	sp, #24
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	60f8      	str	r0, [r7, #12]
 8016a14:	4608      	mov	r0, r1
 8016a16:	4639      	mov	r1, r7
 8016a18:	e881 000c 	stmia.w	r1, {r2, r3}
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	881b      	ldrh	r3, [r3, #0]
 8016a24:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016a26:	4b1a      	ldr	r3, [pc, #104]	@ (8016a90 <SetMaxTimeCredits+0x84>)
 8016a28:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016a2a:	7af9      	ldrb	r1, [r7, #11]
 8016a2c:	463b      	mov	r3, r7
 8016a2e:	cb0c      	ldmia	r3, {r2, r3}
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	f7ff ffc5 	bl	80169c0 <GetDutyCycle>
 8016a36:	4603      	mov	r3, r0
 8016a38:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 8016a3a:	7afb      	ldrb	r3, [r7, #11]
 8016a3c:	f083 0301 	eor.w	r3, r3, #1
 8016a40:	b2db      	uxtb	r3, r3
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d011      	beq.n	8016a6a <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016a4c:	d202      	bcs.n	8016a54 <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016a4e:	4b10      	ldr	r3, [pc, #64]	@ (8016a90 <SetMaxTimeCredits+0x84>)
 8016a50:	617b      	str	r3, [r7, #20]
 8016a52:	e014      	b.n	8016a7e <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016a5a:	4293      	cmp	r3, r2
 8016a5c:	d802      	bhi.n	8016a64 <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8016a90 <SetMaxTimeCredits+0x84>)
 8016a60:	617b      	str	r3, [r7, #20]
 8016a62:	e00c      	b.n	8016a7e <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 8016a64:	4b0b      	ldr	r3, [pc, #44]	@ (8016a94 <SetMaxTimeCredits+0x88>)
 8016a66:	617b      	str	r3, [r7, #20]
 8016a68:	e009      	b.n	8016a7e <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 8016a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016a6e:	f083 0301 	eor.w	r3, r3, #1
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d002      	beq.n	8016a7e <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	697a      	ldr	r2, [r7, #20]
 8016a7c:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	697a      	ldr	r2, [r7, #20]
 8016a82:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016a84:	8a7b      	ldrh	r3, [r7, #18]
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3718      	adds	r7, #24
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}
 8016a8e:	bf00      	nop
 8016a90:	0036ee80 	.word	0x0036ee80
 8016a94:	000d4670 	.word	0x000d4670

08016a98 <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b086      	sub	sp, #24
 8016a9c:	af02      	add	r7, sp, #8
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	4608      	mov	r0, r1
 8016aa2:	4611      	mov	r1, r2
 8016aa4:	461a      	mov	r2, r3
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	70fb      	strb	r3, [r7, #3]
 8016aaa:	460b      	mov	r3, r1
 8016aac:	70bb      	strb	r3, [r7, #2]
 8016aae:	4613      	mov	r3, r2
 8016ab0:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016ab2:	78f9      	ldrb	r1, [r7, #3]
 8016ab4:	787b      	ldrb	r3, [r7, #1]
 8016ab6:	9301      	str	r3, [sp, #4]
 8016ab8:	78bb      	ldrb	r3, [r7, #2]
 8016aba:	9300      	str	r3, [sp, #0]
 8016abc:	f107 0318 	add.w	r3, r7, #24
 8016ac0:	cb0c      	ldmia	r3, {r2, r3}
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f7ff ffa2 	bl	8016a0c <SetMaxTimeCredits>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 8016acc:	4b1a      	ldr	r3, [pc, #104]	@ (8016b38 <UpdateTimeCredits+0xa0>)
 8016ace:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 8016ad0:	78fb      	ldrb	r3, [r7, #3]
 8016ad2:	f083 0301 	eor.w	r3, r3, #1
 8016ad6:	b2db      	uxtb	r3, r3
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d010      	beq.n	8016afe <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016adc:	69bb      	ldr	r3, [r7, #24]
 8016ade:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016ae2:	d202      	bcs.n	8016aea <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 8016ae4:	4b14      	ldr	r3, [pc, #80]	@ (8016b38 <UpdateTimeCredits+0xa0>)
 8016ae6:	60fb      	str	r3, [r7, #12]
 8016ae8:	e009      	b.n	8016afe <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016aea:	69bb      	ldr	r3, [r7, #24]
 8016aec:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016af0:	4293      	cmp	r3, r2
 8016af2:	d802      	bhi.n	8016afa <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 8016af4:	4b11      	ldr	r3, [pc, #68]	@ (8016b3c <UpdateTimeCredits+0xa4>)
 8016af6:	60fb      	str	r3, [r7, #12]
 8016af8:	e001      	b.n	8016afe <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 8016afa:	4b11      	ldr	r3, [pc, #68]	@ (8016b40 <UpdateTimeCredits+0xa8>)
 8016afc:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 8016afe:	68fa      	ldr	r2, [r7, #12]
 8016b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d908      	bls.n	8016b18 <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 8016b0a:	68fa      	ldr	r2, [r7, #12]
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d103      	bne.n	8016b18 <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d109      	bne.n	8016b2c <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	691a      	ldr	r2, [r3, #16]
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6a3a      	ldr	r2, [r7, #32]
 8016b24:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	68fa      	ldr	r2, [r7, #12]
 8016b2a:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 8016b2c:	897b      	ldrh	r3, [r7, #10]
}
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3710      	adds	r7, #16
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}
 8016b36:	bf00      	nop
 8016b38:	0036ee80 	.word	0x0036ee80
 8016b3c:	025c3f80 	.word	0x025c3f80
 8016b40:	07829b80 	.word	0x07829b80

08016b44 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016b44:	b480      	push	{r7}
 8016b46:	b085      	sub	sp, #20
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	460a      	mov	r2, r1
 8016b4e:	80fb      	strh	r3, [r7, #6]
 8016b50:	4613      	mov	r3, r2
 8016b52:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016b54:	2300      	movs	r3, #0
 8016b56:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016b58:	2300      	movs	r3, #0
 8016b5a:	73bb      	strb	r3, [r7, #14]
 8016b5c:	e011      	b.n	8016b82 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016b5e:	88fa      	ldrh	r2, [r7, #6]
 8016b60:	7bbb      	ldrb	r3, [r7, #14]
 8016b62:	2101      	movs	r1, #1
 8016b64:	fa01 f303 	lsl.w	r3, r1, r3
 8016b68:	401a      	ands	r2, r3
 8016b6a:	7bbb      	ldrb	r3, [r7, #14]
 8016b6c:	2101      	movs	r1, #1
 8016b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d102      	bne.n	8016b7c <CountChannels+0x38>
        {
            nbActiveBits++;
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	3301      	adds	r3, #1
 8016b7a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016b7c:	7bbb      	ldrb	r3, [r7, #14]
 8016b7e:	3301      	adds	r3, #1
 8016b80:	73bb      	strb	r3, [r7, #14]
 8016b82:	7bba      	ldrb	r2, [r7, #14]
 8016b84:	797b      	ldrb	r3, [r7, #5]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d3e9      	bcc.n	8016b5e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	3714      	adds	r7, #20
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bc80      	pop	{r7}
 8016b94:	4770      	bx	lr

08016b96 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016b96:	b580      	push	{r7, lr}
 8016b98:	b084      	sub	sp, #16
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6039      	str	r1, [r7, #0]
 8016b9e:	4611      	mov	r1, r2
 8016ba0:	461a      	mov	r2, r3
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	71fb      	strb	r3, [r7, #7]
 8016ba6:	460b      	mov	r3, r1
 8016ba8:	71bb      	strb	r3, [r7, #6]
 8016baa:	4613      	mov	r3, r2
 8016bac:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016bae:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016bb2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016bb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f000 f85d 	bl	8016c7a <RegionCommonValueInRange>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d101      	bne.n	8016bca <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	e053      	b.n	8016c72 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016bca:	2300      	movs	r3, #0
 8016bcc:	73fb      	strb	r3, [r7, #15]
 8016bce:	2300      	movs	r3, #0
 8016bd0:	73bb      	strb	r3, [r7, #14]
 8016bd2:	e049      	b.n	8016c68 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	737b      	strb	r3, [r7, #13]
 8016bd8:	e03d      	b.n	8016c56 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016bda:	7bbb      	ldrb	r3, [r7, #14]
 8016bdc:	005b      	lsls	r3, r3, #1
 8016bde:	683a      	ldr	r2, [r7, #0]
 8016be0:	4413      	add	r3, r2
 8016be2:	881b      	ldrh	r3, [r3, #0]
 8016be4:	461a      	mov	r2, r3
 8016be6:	7b7b      	ldrb	r3, [r7, #13]
 8016be8:	fa42 f303 	asr.w	r3, r2, r3
 8016bec:	f003 0301 	and.w	r3, r3, #1
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d02d      	beq.n	8016c50 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016bf4:	7bfa      	ldrb	r2, [r7, #15]
 8016bf6:	7b7b      	ldrb	r3, [r7, #13]
 8016bf8:	4413      	add	r3, r2
 8016bfa:	461a      	mov	r2, r3
 8016bfc:	4613      	mov	r3, r2
 8016bfe:	005b      	lsls	r3, r3, #1
 8016c00:	4413      	add	r3, r2
 8016c02:	009b      	lsls	r3, r3, #2
 8016c04:	461a      	mov	r2, r3
 8016c06:	69fb      	ldr	r3, [r7, #28]
 8016c08:	4413      	add	r3, r2
 8016c0a:	7a1b      	ldrb	r3, [r3, #8]
 8016c0c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016c10:	b25b      	sxtb	r3, r3
 8016c12:	f003 030f 	and.w	r3, r3, #15
 8016c16:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016c18:	7bfa      	ldrb	r2, [r7, #15]
 8016c1a:	7b7b      	ldrb	r3, [r7, #13]
 8016c1c:	4413      	add	r3, r2
 8016c1e:	461a      	mov	r2, r3
 8016c20:	4613      	mov	r3, r2
 8016c22:	005b      	lsls	r3, r3, #1
 8016c24:	4413      	add	r3, r2
 8016c26:	009b      	lsls	r3, r3, #2
 8016c28:	461a      	mov	r2, r3
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	4413      	add	r3, r2
 8016c2e:	7a1b      	ldrb	r3, [r3, #8]
 8016c30:	f343 1303 	sbfx	r3, r3, #4, #4
 8016c34:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016c36:	f003 030f 	and.w	r3, r3, #15
 8016c3a:	b25a      	sxtb	r2, r3
 8016c3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016c40:	4618      	mov	r0, r3
 8016c42:	f000 f81a 	bl	8016c7a <RegionCommonValueInRange>
 8016c46:	4603      	mov	r3, r0
 8016c48:	2b01      	cmp	r3, #1
 8016c4a:	d101      	bne.n	8016c50 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	e010      	b.n	8016c72 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016c50:	7b7b      	ldrb	r3, [r7, #13]
 8016c52:	3301      	adds	r3, #1
 8016c54:	737b      	strb	r3, [r7, #13]
 8016c56:	7b7b      	ldrb	r3, [r7, #13]
 8016c58:	2b0f      	cmp	r3, #15
 8016c5a:	d9be      	bls.n	8016bda <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016c5c:	7bfb      	ldrb	r3, [r7, #15]
 8016c5e:	3310      	adds	r3, #16
 8016c60:	73fb      	strb	r3, [r7, #15]
 8016c62:	7bbb      	ldrb	r3, [r7, #14]
 8016c64:	3301      	adds	r3, #1
 8016c66:	73bb      	strb	r3, [r7, #14]
 8016c68:	7bfa      	ldrb	r2, [r7, #15]
 8016c6a:	79fb      	ldrb	r3, [r7, #7]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d3b1      	bcc.n	8016bd4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016c70:	2300      	movs	r3, #0
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3710      	adds	r7, #16
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}

08016c7a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016c7a:	b480      	push	{r7}
 8016c7c:	b083      	sub	sp, #12
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	4603      	mov	r3, r0
 8016c82:	71fb      	strb	r3, [r7, #7]
 8016c84:	460b      	mov	r3, r1
 8016c86:	71bb      	strb	r3, [r7, #6]
 8016c88:	4613      	mov	r3, r2
 8016c8a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016c8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016c90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016c94:	429a      	cmp	r2, r3
 8016c96:	db07      	blt.n	8016ca8 <RegionCommonValueInRange+0x2e>
 8016c98:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016c9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	dc01      	bgt.n	8016ca8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016ca4:	2301      	movs	r3, #1
 8016ca6:	e000      	b.n	8016caa <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016ca8:	2300      	movs	r3, #0
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	370c      	adds	r7, #12
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bc80      	pop	{r7}
 8016cb2:	4770      	bx	lr

08016cb4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016cb4:	b480      	push	{r7}
 8016cb6:	b085      	sub	sp, #20
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
 8016cbc:	460b      	mov	r3, r1
 8016cbe:	70fb      	strb	r3, [r7, #3]
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016cc4:	78fb      	ldrb	r3, [r7, #3]
 8016cc6:	091b      	lsrs	r3, r3, #4
 8016cc8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016cca:	78bb      	ldrb	r3, [r7, #2]
 8016ccc:	091b      	lsrs	r3, r3, #4
 8016cce:	b2db      	uxtb	r3, r3
 8016cd0:	7bfa      	ldrb	r2, [r7, #15]
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d803      	bhi.n	8016cde <RegionCommonChanDisable+0x2a>
 8016cd6:	78fa      	ldrb	r2, [r7, #3]
 8016cd8:	78bb      	ldrb	r3, [r7, #2]
 8016cda:	429a      	cmp	r2, r3
 8016cdc:	d301      	bcc.n	8016ce2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	e017      	b.n	8016d12 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016ce2:	7bfb      	ldrb	r3, [r7, #15]
 8016ce4:	005b      	lsls	r3, r3, #1
 8016ce6:	687a      	ldr	r2, [r7, #4]
 8016ce8:	4413      	add	r3, r2
 8016cea:	881b      	ldrh	r3, [r3, #0]
 8016cec:	b21a      	sxth	r2, r3
 8016cee:	78fb      	ldrb	r3, [r7, #3]
 8016cf0:	f003 030f 	and.w	r3, r3, #15
 8016cf4:	2101      	movs	r1, #1
 8016cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8016cfa:	b21b      	sxth	r3, r3
 8016cfc:	43db      	mvns	r3, r3
 8016cfe:	b21b      	sxth	r3, r3
 8016d00:	4013      	ands	r3, r2
 8016d02:	b219      	sxth	r1, r3
 8016d04:	7bfb      	ldrb	r3, [r7, #15]
 8016d06:	005b      	lsls	r3, r3, #1
 8016d08:	687a      	ldr	r2, [r7, #4]
 8016d0a:	4413      	add	r3, r2
 8016d0c:	b28a      	uxth	r2, r1
 8016d0e:	801a      	strh	r2, [r3, #0]

    return true;
 8016d10:	2301      	movs	r3, #1
}
 8016d12:	4618      	mov	r0, r3
 8016d14:	3714      	adds	r7, #20
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bc80      	pop	{r7}
 8016d1a:	4770      	bx	lr

08016d1c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b084      	sub	sp, #16
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
 8016d24:	460b      	mov	r3, r1
 8016d26:	70fb      	strb	r3, [r7, #3]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d101      	bne.n	8016d3a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016d36:	2300      	movs	r3, #0
 8016d38:	e018      	b.n	8016d6c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016d3a:	78fb      	ldrb	r3, [r7, #3]
 8016d3c:	73bb      	strb	r3, [r7, #14]
 8016d3e:	e010      	b.n	8016d62 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016d40:	7bbb      	ldrb	r3, [r7, #14]
 8016d42:	005b      	lsls	r3, r3, #1
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	4413      	add	r3, r2
 8016d48:	881b      	ldrh	r3, [r3, #0]
 8016d4a:	2110      	movs	r1, #16
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7ff fef9 	bl	8016b44 <CountChannels>
 8016d52:	4603      	mov	r3, r0
 8016d54:	461a      	mov	r2, r3
 8016d56:	7bfb      	ldrb	r3, [r7, #15]
 8016d58:	4413      	add	r3, r2
 8016d5a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016d5c:	7bbb      	ldrb	r3, [r7, #14]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	73bb      	strb	r3, [r7, #14]
 8016d62:	7bba      	ldrb	r2, [r7, #14]
 8016d64:	78bb      	ldrb	r3, [r7, #2]
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d3ea      	bcc.n	8016d40 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3710      	adds	r7, #16
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}

08016d74 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016d74:	b480      	push	{r7}
 8016d76:	b087      	sub	sp, #28
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	60f8      	str	r0, [r7, #12]
 8016d7c:	60b9      	str	r1, [r7, #8]
 8016d7e:	4613      	mov	r3, r2
 8016d80:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d016      	beq.n	8016db6 <RegionCommonChanMaskCopy+0x42>
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d013      	beq.n	8016db6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016d8e:	2300      	movs	r3, #0
 8016d90:	75fb      	strb	r3, [r7, #23]
 8016d92:	e00c      	b.n	8016dae <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016d94:	7dfb      	ldrb	r3, [r7, #23]
 8016d96:	005b      	lsls	r3, r3, #1
 8016d98:	68ba      	ldr	r2, [r7, #8]
 8016d9a:	441a      	add	r2, r3
 8016d9c:	7dfb      	ldrb	r3, [r7, #23]
 8016d9e:	005b      	lsls	r3, r3, #1
 8016da0:	68f9      	ldr	r1, [r7, #12]
 8016da2:	440b      	add	r3, r1
 8016da4:	8812      	ldrh	r2, [r2, #0]
 8016da6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016da8:	7dfb      	ldrb	r3, [r7, #23]
 8016daa:	3301      	adds	r3, #1
 8016dac:	75fb      	strb	r3, [r7, #23]
 8016dae:	7dfa      	ldrb	r2, [r7, #23]
 8016db0:	79fb      	ldrb	r3, [r7, #7]
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d3ee      	bcc.n	8016d94 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016db6:	bf00      	nop
 8016db8:	371c      	adds	r7, #28
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bc80      	pop	{r7}
 8016dbe:	4770      	bx	lr

08016dc0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016dc0:	b082      	sub	sp, #8
 8016dc2:	b580      	push	{r7, lr}
 8016dc4:	b086      	sub	sp, #24
 8016dc6:	af00      	add	r7, sp, #0
 8016dc8:	60f8      	str	r0, [r7, #12]
 8016dca:	60b9      	str	r1, [r7, #8]
 8016dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8016dce:	4613      	mov	r3, r2
 8016dd0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016dd2:	79f9      	ldrb	r1, [r7, #7]
 8016dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016dd8:	cb0c      	ldmia	r3, {r2, r3}
 8016dda:	68f8      	ldr	r0, [r7, #12]
 8016ddc:	f7ff fdf0 	bl	80169c0 <GetDutyCycle>
 8016de0:	4603      	mov	r3, r0
 8016de2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	68da      	ldr	r2, [r3, #12]
 8016de8:	8afb      	ldrh	r3, [r7, #22]
 8016dea:	68b9      	ldr	r1, [r7, #8]
 8016dec:	fb01 f303 	mul.w	r3, r1, r3
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d909      	bls.n	8016e08 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	68da      	ldr	r2, [r3, #12]
 8016df8:	8afb      	ldrh	r3, [r7, #22]
 8016dfa:	68b9      	ldr	r1, [r7, #8]
 8016dfc:	fb01 f303 	mul.w	r3, r1, r3
 8016e00:	1ad2      	subs	r2, r2, r3
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016e06:	e002      	b.n	8016e0e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	60da      	str	r2, [r3, #12]
}
 8016e0e:	bf00      	nop
 8016e10:	3718      	adds	r7, #24
 8016e12:	46bd      	mov	sp, r7
 8016e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016e18:	b002      	add	sp, #8
 8016e1a:	4770      	bx	lr

08016e1c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e1e:	b08f      	sub	sp, #60	@ 0x3c
 8016e20:	af04      	add	r7, sp, #16
 8016e22:	6039      	str	r1, [r7, #0]
 8016e24:	4611      	mov	r1, r2
 8016e26:	461a      	mov	r2, r3
 8016e28:	4603      	mov	r3, r0
 8016e2a:	71fb      	strb	r3, [r7, #7]
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	71bb      	strb	r3, [r7, #6]
 8016e30:	4613      	mov	r3, r2
 8016e32:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016e34:	f04f 33ff 	mov.w	r3, #4294967295
 8016e38:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016e3a:	f006 f8cf 	bl	801cfdc <UTIL_TIMER_GetCurrentTime>
 8016e3e:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 8016e40:	2300      	movs	r3, #0
 8016e42:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 8016e44:	2301      	movs	r3, #1
 8016e46:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016e4e:	2300      	movs	r3, #0
 8016e50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016e54:	e09c      	b.n	8016f90 <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 8016e56:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016e5a:	4613      	mov	r3, r2
 8016e5c:	005b      	lsls	r3, r3, #1
 8016e5e:	4413      	add	r3, r2
 8016e60:	00db      	lsls	r3, r3, #3
 8016e62:	461a      	mov	r2, r3
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	4413      	add	r3, r2
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f006 f8c8 	bl	801d000 <UTIL_TIMER_GetElapsedTime>
 8016e70:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016e72:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016e76:	4613      	mov	r3, r2
 8016e78:	005b      	lsls	r3, r3, #1
 8016e7a:	4413      	add	r3, r2
 8016e7c:	00db      	lsls	r3, r3, #3
 8016e7e:	461a      	mov	r2, r3
 8016e80:	683b      	ldr	r3, [r7, #0]
 8016e82:	189c      	adds	r4, r3, r2
 8016e84:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8016e88:	797a      	ldrb	r2, [r7, #5]
 8016e8a:	79fd      	ldrb	r5, [r7, #7]
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	9303      	str	r3, [sp, #12]
 8016e90:	69bb      	ldr	r3, [r7, #24]
 8016e92:	9302      	str	r3, [sp, #8]
 8016e94:	46ec      	mov	ip, sp
 8016e96:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016e9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016e9e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ea2:	4633      	mov	r3, r6
 8016ea4:	4629      	mov	r1, r5
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f7ff fdf6 	bl	8016a98 <UpdateTimeCredits>
 8016eac:	4603      	mov	r3, r0
 8016eae:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016eb0:	8a7a      	ldrh	r2, [r7, #18]
 8016eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016eb4:	fb02 f303 	mul.w	r3, r2, r3
 8016eb8:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016eba:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	005b      	lsls	r3, r3, #1
 8016ec2:	4413      	add	r3, r2
 8016ec4:	00db      	lsls	r3, r3, #3
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	683b      	ldr	r3, [r7, #0]
 8016eca:	4413      	add	r3, r2
 8016ecc:	68db      	ldr	r3, [r3, #12]
 8016ece:	697a      	ldr	r2, [r7, #20]
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d308      	bcc.n	8016ee6 <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016ed4:	797b      	ldrb	r3, [r7, #5]
 8016ed6:	f083 0301 	eor.w	r3, r3, #1
 8016eda:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d013      	beq.n	8016f08 <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016ee0:	79fb      	ldrb	r3, [r7, #7]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d010      	beq.n	8016f08 <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 8016ee6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016eea:	4613      	mov	r3, r2
 8016eec:	005b      	lsls	r3, r3, #1
 8016eee:	4413      	add	r3, r2
 8016ef0:	00db      	lsls	r3, r3, #3
 8016ef2:	461a      	mov	r2, r3
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	4413      	add	r3, r2
 8016ef8:	2201      	movs	r2, #1
 8016efa:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016efc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f00:	3301      	adds	r3, #1
 8016f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016f06:	e03e      	b.n	8016f86 <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016f08:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	005b      	lsls	r3, r3, #1
 8016f10:	4413      	add	r3, r2
 8016f12:	00db      	lsls	r3, r3, #3
 8016f14:	461a      	mov	r2, r3
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	4413      	add	r3, r2
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016f1e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f22:	4613      	mov	r3, r2
 8016f24:	005b      	lsls	r3, r3, #1
 8016f26:	4413      	add	r3, r2
 8016f28:	00db      	lsls	r3, r3, #3
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	4413      	add	r3, r2
 8016f30:	691b      	ldr	r3, [r3, #16]
 8016f32:	697a      	ldr	r2, [r7, #20]
 8016f34:	429a      	cmp	r2, r3
 8016f36:	d226      	bcs.n	8016f86 <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 8016f3c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f40:	4613      	mov	r3, r2
 8016f42:	005b      	lsls	r3, r3, #1
 8016f44:	4413      	add	r3, r2
 8016f46:	00db      	lsls	r3, r3, #3
 8016f48:	461a      	mov	r2, r3
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	4413      	add	r3, r2
 8016f4e:	689b      	ldr	r3, [r3, #8]
 8016f50:	68fa      	ldr	r2, [r7, #12]
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d80c      	bhi.n	8016f70 <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 8016f56:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f5a:	4613      	mov	r3, r2
 8016f5c:	005b      	lsls	r3, r3, #1
 8016f5e:	4413      	add	r3, r2
 8016f60:	00db      	lsls	r3, r3, #3
 8016f62:	461a      	mov	r2, r3
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	4413      	add	r3, r2
 8016f68:	689a      	ldr	r2, [r3, #8]
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	1ad3      	subs	r3, r2, r3
 8016f6e:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 8016f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f72:	69fb      	ldr	r3, [r7, #28]
 8016f74:	4293      	cmp	r3, r2
 8016f76:	bf28      	it	cs
 8016f78:	4613      	movcs	r3, r2
 8016f7a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f80:	3301      	adds	r3, #1
 8016f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 8016f86:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016f8a:	3301      	adds	r3, #1
 8016f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016f90:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016f94:	79bb      	ldrb	r3, [r7, #6]
 8016f96:	429a      	cmp	r2, r3
 8016f98:	f4ff af5d 	bcc.w	8016e56 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 8016f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d102      	bne.n	8016faa <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8016fa8:	e000      	b.n	8016fac <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 8016faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	372c      	adds	r7, #44	@ 0x2c
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016fb4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016fb4:	b480      	push	{r7}
 8016fb6:	b085      	sub	sp, #20
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
 8016fbc:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	2b03      	cmp	r3, #3
 8016fc8:	d13f      	bne.n	801704a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	3301      	adds	r3, #1
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	b25a      	sxtb	r2, r3
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fdc:	f003 030f 	and.w	r3, r3, #15
 8016fe0:	b25a      	sxtb	r2, r3
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	091b      	lsrs	r3, r3, #4
 8016ff0:	b2db      	uxtb	r3, r3
 8016ff2:	b25a      	sxtb	r2, r3
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	3302      	adds	r3, #2
 8016ffc:	781b      	ldrb	r3, [r3, #0]
 8016ffe:	461a      	mov	r2, r3
 8017000:	683b      	ldr	r3, [r7, #0]
 8017002:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	889b      	ldrh	r3, [r3, #4]
 8017008:	b21a      	sxth	r2, r3
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	3303      	adds	r3, #3
 801700e:	781b      	ldrb	r3, [r3, #0]
 8017010:	021b      	lsls	r3, r3, #8
 8017012:	b21b      	sxth	r3, r3
 8017014:	4313      	orrs	r3, r2
 8017016:	b21b      	sxth	r3, r3
 8017018:	b29a      	uxth	r2, r3
 801701a:	683b      	ldr	r3, [r7, #0]
 801701c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	791a      	ldrb	r2, [r3, #4]
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	781b      	ldrb	r3, [r3, #0]
 801702a:	091b      	lsrs	r3, r3, #4
 801702c:	b2db      	uxtb	r3, r3
 801702e:	f003 0307 	and.w	r3, r3, #7
 8017032:	b2da      	uxtb	r2, r3
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	781b      	ldrb	r3, [r3, #0]
 801703c:	f003 030f 	and.w	r3, r3, #15
 8017040:	b2da      	uxtb	r2, r3
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017046:	2305      	movs	r3, #5
 8017048:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801704a:	7bfb      	ldrb	r3, [r7, #15]
}
 801704c:	4618      	mov	r0, r3
 801704e:	3714      	adds	r7, #20
 8017050:	46bd      	mov	sp, r7
 8017052:	bc80      	pop	{r7}
 8017054:	4770      	bx	lr

08017056 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017056:	b5b0      	push	{r4, r5, r7, lr}
 8017058:	b088      	sub	sp, #32
 801705a:	af02      	add	r7, sp, #8
 801705c:	60f8      	str	r0, [r7, #12]
 801705e:	60b9      	str	r1, [r7, #8]
 8017060:	607a      	str	r2, [r7, #4]
 8017062:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	791b      	ldrb	r3, [r3, #4]
 8017068:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	799b      	ldrb	r3, [r3, #6]
 801706e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	79db      	ldrb	r3, [r3, #7]
 8017074:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	7a1b      	ldrb	r3, [r3, #8]
 801707a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	795b      	ldrb	r3, [r3, #5]
 8017080:	f083 0301 	eor.w	r3, r3, #1
 8017084:	b2db      	uxtb	r3, r3
 8017086:	2b00      	cmp	r3, #0
 8017088:	d008      	beq.n	801709c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	7adb      	ldrb	r3, [r3, #11]
 801708e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	7a5b      	ldrb	r3, [r3, #9]
 8017094:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	7a9b      	ldrb	r3, [r3, #10]
 801709a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801709c:	7dfb      	ldrb	r3, [r7, #23]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d04a      	beq.n	8017138 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80170a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80170a6:	2b0f      	cmp	r3, #15
 80170a8:	d103      	bne.n	80170b2 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	7a5b      	ldrb	r3, [r3, #9]
 80170ae:	75bb      	strb	r3, [r7, #22]
 80170b0:	e01d      	b.n	80170ee <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	7b18      	ldrb	r0, [r3, #12]
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	6919      	ldr	r1, [r3, #16]
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80170c6:	68fa      	ldr	r2, [r7, #12]
 80170c8:	6992      	ldr	r2, [r2, #24]
 80170ca:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80170ce:	9201      	str	r2, [sp, #4]
 80170d0:	9300      	str	r3, [sp, #0]
 80170d2:	462b      	mov	r3, r5
 80170d4:	4622      	mov	r2, r4
 80170d6:	f7ff fd5e 	bl	8016b96 <RegionCommonChanVerifyDr>
 80170da:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80170dc:	f083 0301 	eor.w	r3, r3, #1
 80170e0:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d003      	beq.n	80170ee <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80170e6:	7dfb      	ldrb	r3, [r7, #23]
 80170e8:	f023 0302 	bic.w	r3, r3, #2
 80170ec:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80170ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80170f2:	2b0f      	cmp	r3, #15
 80170f4:	d103      	bne.n	80170fe <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	7a9b      	ldrb	r3, [r3, #10]
 80170fa:	757b      	strb	r3, [r7, #21]
 80170fc:	e01c      	b.n	8017138 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801710a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801710e:	4618      	mov	r0, r3
 8017110:	f7ff fdb3 	bl	8016c7a <RegionCommonValueInRange>
 8017114:	4603      	mov	r3, r0
 8017116:	2b00      	cmp	r3, #0
 8017118:	d10e      	bne.n	8017138 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017120:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017124:	429a      	cmp	r2, r3
 8017126:	da03      	bge.n	8017130 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	7f5b      	ldrb	r3, [r3, #29]
 801712c:	757b      	strb	r3, [r7, #21]
 801712e:	e003      	b.n	8017138 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017130:	7dfb      	ldrb	r3, [r7, #23]
 8017132:	f023 0304 	bic.w	r3, r3, #4
 8017136:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017138:	7dfb      	ldrb	r3, [r7, #23]
 801713a:	2b07      	cmp	r3, #7
 801713c:	d105      	bne.n	801714a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801713e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d101      	bne.n	801714a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017146:	2301      	movs	r3, #1
 8017148:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	7dba      	ldrb	r2, [r7, #22]
 801714e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	7d7a      	ldrb	r2, [r7, #21]
 8017154:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017156:	7d3a      	ldrb	r2, [r7, #20]
 8017158:	683b      	ldr	r3, [r7, #0]
 801715a:	701a      	strb	r2, [r3, #0]

    return status;
 801715c:	7dfb      	ldrb	r3, [r7, #23]
}
 801715e:	4618      	mov	r0, r3
 8017160:	3718      	adds	r7, #24
 8017162:	46bd      	mov	sp, r7
 8017164:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017168 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017168:	b480      	push	{r7}
 801716a:	b083      	sub	sp, #12
 801716c:	af00      	add	r7, sp, #0
 801716e:	4603      	mov	r3, r0
 8017170:	6039      	str	r1, [r7, #0]
 8017172:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017174:	79fb      	ldrb	r3, [r7, #7]
 8017176:	4a06      	ldr	r2, [pc, #24]	@ (8017190 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017178:	fa02 f303 	lsl.w	r3, r2, r3
 801717c:	461a      	mov	r2, r3
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017184:	4618      	mov	r0, r3
 8017186:	370c      	adds	r7, #12
 8017188:	46bd      	mov	sp, r7
 801718a:	bc80      	pop	{r7}
 801718c:	4770      	bx	lr
 801718e:	bf00      	nop
 8017190:	000f4240 	.word	0x000f4240

08017194 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017194:	b480      	push	{r7}
 8017196:	b083      	sub	sp, #12
 8017198:	af00      	add	r7, sp, #0
 801719a:	4603      	mov	r3, r0
 801719c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801719e:	79fb      	ldrb	r3, [r7, #7]
 80171a0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80171a4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	370c      	adds	r7, #12
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bc80      	pop	{r7}
 80171b0:	4770      	bx	lr
	...

080171b4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80171b4:	b480      	push	{r7}
 80171b6:	b085      	sub	sp, #20
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	60f8      	str	r0, [r7, #12]
 80171bc:	607a      	str	r2, [r7, #4]
 80171be:	603b      	str	r3, [r7, #0]
 80171c0:	460b      	mov	r3, r1
 80171c2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80171c4:	7afa      	ldrb	r2, [r7, #11]
 80171c6:	7afb      	ldrb	r3, [r7, #11]
 80171c8:	3b04      	subs	r3, #4
 80171ca:	4619      	mov	r1, r3
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	fb03 f101 	mul.w	r1, r3, r1
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80171d8:	fb00 f303 	mul.w	r3, r0, r3
 80171dc:	440b      	add	r3, r1
 80171de:	005b      	lsls	r3, r3, #1
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d013      	beq.n	801720c <RegionCommonComputeRxWindowParameters+0x58>
 80171e4:	7afb      	ldrb	r3, [r7, #11]
 80171e6:	3b04      	subs	r3, #4
 80171e8:	4619      	mov	r1, r3
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	fb03 f101 	mul.w	r1, r3, r1
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80171f6:	fb00 f303 	mul.w	r3, r0, r3
 80171fa:	440b      	add	r3, r1
 80171fc:	0059      	lsls	r1, r3, #1
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	440b      	add	r3, r1
 8017202:	1e59      	subs	r1, r3, #1
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	fbb1 f3f3 	udiv	r3, r1, r3
 801720a:	e00f      	b.n	801722c <RegionCommonComputeRxWindowParameters+0x78>
 801720c:	7afb      	ldrb	r3, [r7, #11]
 801720e:	3b04      	subs	r3, #4
 8017210:	4619      	mov	r1, r3
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	fb03 f101 	mul.w	r1, r3, r1
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801721e:	fb00 f303 	mul.w	r3, r0, r3
 8017222:	440b      	add	r3, r1
 8017224:	0059      	lsls	r1, r3, #1
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	fbb1 f3f3 	udiv	r3, r1, r3
 801722c:	429a      	cmp	r2, r3
 801722e:	bf38      	it	cc
 8017230:	461a      	movcc	r2, r3
 8017232:	69bb      	ldr	r3, [r7, #24]
 8017234:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	009b      	lsls	r3, r3, #2
 801723a:	4619      	mov	r1, r3
 801723c:	69bb      	ldr	r3, [r7, #24]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	68fa      	ldr	r2, [r7, #12]
 8017242:	fb02 f303 	mul.w	r3, r2, r3
 8017246:	2b00      	cmp	r3, #0
 8017248:	d007      	beq.n	801725a <RegionCommonComputeRxWindowParameters+0xa6>
 801724a:	69bb      	ldr	r3, [r7, #24]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	68fa      	ldr	r2, [r7, #12]
 8017250:	fb02 f303 	mul.w	r3, r2, r3
 8017254:	3301      	adds	r3, #1
 8017256:	085b      	lsrs	r3, r3, #1
 8017258:	e005      	b.n	8017266 <RegionCommonComputeRxWindowParameters+0xb2>
 801725a:	69bb      	ldr	r3, [r7, #24]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	68fa      	ldr	r2, [r7, #12]
 8017260:	fb02 f303 	mul.w	r3, r2, r3
 8017264:	085b      	lsrs	r3, r3, #1
 8017266:	1acb      	subs	r3, r1, r3
 8017268:	683a      	ldr	r2, [r7, #0]
 801726a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801726e:	fb01 f202 	mul.w	r2, r1, r2
 8017272:	1a9b      	subs	r3, r3, r2
 8017274:	2b00      	cmp	r3, #0
 8017276:	dd27      	ble.n	80172c8 <RegionCommonComputeRxWindowParameters+0x114>
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	009b      	lsls	r3, r3, #2
 801727c:	4619      	mov	r1, r3
 801727e:	69bb      	ldr	r3, [r7, #24]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	68fa      	ldr	r2, [r7, #12]
 8017284:	fb02 f303 	mul.w	r3, r2, r3
 8017288:	2b00      	cmp	r3, #0
 801728a:	d007      	beq.n	801729c <RegionCommonComputeRxWindowParameters+0xe8>
 801728c:	69bb      	ldr	r3, [r7, #24]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	68fa      	ldr	r2, [r7, #12]
 8017292:	fb02 f303 	mul.w	r3, r2, r3
 8017296:	3301      	adds	r3, #1
 8017298:	085b      	lsrs	r3, r3, #1
 801729a:	e005      	b.n	80172a8 <RegionCommonComputeRxWindowParameters+0xf4>
 801729c:	69bb      	ldr	r3, [r7, #24]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	68fa      	ldr	r2, [r7, #12]
 80172a2:	fb02 f303 	mul.w	r3, r2, r3
 80172a6:	085b      	lsrs	r3, r3, #1
 80172a8:	1acb      	subs	r3, r1, r3
 80172aa:	683a      	ldr	r2, [r7, #0]
 80172ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80172b0:	fb01 f202 	mul.w	r2, r1, r2
 80172b4:	1a9b      	subs	r3, r3, r2
 80172b6:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80172ba:	4a19      	ldr	r2, [pc, #100]	@ (8017320 <RegionCommonComputeRxWindowParameters+0x16c>)
 80172bc:	fb82 1203 	smull	r1, r2, r2, r3
 80172c0:	1192      	asrs	r2, r2, #6
 80172c2:	17db      	asrs	r3, r3, #31
 80172c4:	1ad3      	subs	r3, r2, r3
 80172c6:	e024      	b.n	8017312 <RegionCommonComputeRxWindowParameters+0x15e>
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	009b      	lsls	r3, r3, #2
 80172cc:	4619      	mov	r1, r3
 80172ce:	69bb      	ldr	r3, [r7, #24]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	68fa      	ldr	r2, [r7, #12]
 80172d4:	fb02 f303 	mul.w	r3, r2, r3
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d007      	beq.n	80172ec <RegionCommonComputeRxWindowParameters+0x138>
 80172dc:	69bb      	ldr	r3, [r7, #24]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	68fa      	ldr	r2, [r7, #12]
 80172e2:	fb02 f303 	mul.w	r3, r2, r3
 80172e6:	3301      	adds	r3, #1
 80172e8:	085b      	lsrs	r3, r3, #1
 80172ea:	e005      	b.n	80172f8 <RegionCommonComputeRxWindowParameters+0x144>
 80172ec:	69bb      	ldr	r3, [r7, #24]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	68fa      	ldr	r2, [r7, #12]
 80172f2:	fb02 f303 	mul.w	r3, r2, r3
 80172f6:	085b      	lsrs	r3, r3, #1
 80172f8:	1acb      	subs	r3, r1, r3
 80172fa:	683a      	ldr	r2, [r7, #0]
 80172fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017300:	fb01 f202 	mul.w	r2, r1, r2
 8017304:	1a9b      	subs	r3, r3, r2
 8017306:	4a06      	ldr	r2, [pc, #24]	@ (8017320 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017308:	fb82 1203 	smull	r1, r2, r2, r3
 801730c:	1192      	asrs	r2, r2, #6
 801730e:	17db      	asrs	r3, r3, #31
 8017310:	1ad3      	subs	r3, r2, r3
 8017312:	69fa      	ldr	r2, [r7, #28]
 8017314:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017316:	bf00      	nop
 8017318:	3714      	adds	r7, #20
 801731a:	46bd      	mov	sp, r7
 801731c:	bc80      	pop	{r7}
 801731e:	4770      	bx	lr
 8017320:	10624dd3 	.word	0x10624dd3

08017324 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b086      	sub	sp, #24
 8017328:	af00      	add	r7, sp, #0
 801732a:	4603      	mov	r3, r0
 801732c:	60b9      	str	r1, [r7, #8]
 801732e:	607a      	str	r2, [r7, #4]
 8017330:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017332:	2300      	movs	r3, #0
 8017334:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801733a:	005b      	lsls	r3, r3, #1
 801733c:	4618      	mov	r0, r3
 801733e:	f7e9 fca7 	bl	8000c90 <__aeabi_ui2f>
 8017342:	4603      	mov	r3, r0
 8017344:	4619      	mov	r1, r3
 8017346:	68b8      	ldr	r0, [r7, #8]
 8017348:	f7e9 fbf0 	bl	8000b2c <__aeabi_fsub>
 801734c:	4603      	mov	r3, r0
 801734e:	6879      	ldr	r1, [r7, #4]
 8017350:	4618      	mov	r0, r3
 8017352:	f7e9 fbeb 	bl	8000b2c <__aeabi_fsub>
 8017356:	4603      	mov	r3, r0
 8017358:	4618      	mov	r0, r3
 801735a:	f7e9 f879 	bl	8000450 <__aeabi_f2d>
 801735e:	4602      	mov	r2, r0
 8017360:	460b      	mov	r3, r1
 8017362:	4610      	mov	r0, r2
 8017364:	4619      	mov	r1, r3
 8017366:	f006 f9cf 	bl	801d708 <floor>
 801736a:	4602      	mov	r2, r0
 801736c:	460b      	mov	r3, r1
 801736e:	4610      	mov	r0, r2
 8017370:	4619      	mov	r1, r3
 8017372:	f7e9 fb5f 	bl	8000a34 <__aeabi_d2iz>
 8017376:	4603      	mov	r3, r0
 8017378:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801737a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801737e:	4618      	mov	r0, r3
 8017380:	3718      	adds	r7, #24
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}

08017386 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017386:	b590      	push	{r4, r7, lr}
 8017388:	b087      	sub	sp, #28
 801738a:	af00      	add	r7, sp, #0
 801738c:	60f8      	str	r0, [r7, #12]
 801738e:	60b9      	str	r1, [r7, #8]
 8017390:	607a      	str	r2, [r7, #4]
 8017392:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017394:	2300      	movs	r3, #0
 8017396:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017398:	2300      	movs	r3, #0
 801739a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801739c:	2300      	movs	r3, #0
 801739e:	757b      	strb	r3, [r7, #21]
 80173a0:	2300      	movs	r3, #0
 80173a2:	753b      	strb	r3, [r7, #20]
 80173a4:	e09c      	b.n	80174e0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80173a6:	2300      	movs	r3, #0
 80173a8:	74fb      	strb	r3, [r7, #19]
 80173aa:	e08f      	b.n	80174cc <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	685a      	ldr	r2, [r3, #4]
 80173b0:	7d3b      	ldrb	r3, [r7, #20]
 80173b2:	005b      	lsls	r3, r3, #1
 80173b4:	4413      	add	r3, r2
 80173b6:	881b      	ldrh	r3, [r3, #0]
 80173b8:	461a      	mov	r2, r3
 80173ba:	7cfb      	ldrb	r3, [r7, #19]
 80173bc:	fa42 f303 	asr.w	r3, r2, r3
 80173c0:	f003 0301 	and.w	r3, r3, #1
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d07e      	beq.n	80174c6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	689a      	ldr	r2, [r3, #8]
 80173cc:	7d79      	ldrb	r1, [r7, #21]
 80173ce:	7cfb      	ldrb	r3, [r7, #19]
 80173d0:	440b      	add	r3, r1
 80173d2:	4619      	mov	r1, r3
 80173d4:	460b      	mov	r3, r1
 80173d6:	005b      	lsls	r3, r3, #1
 80173d8:	440b      	add	r3, r1
 80173da:	009b      	lsls	r3, r3, #2
 80173dc:	4413      	add	r3, r2
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d06b      	beq.n	80174bc <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	781b      	ldrb	r3, [r3, #0]
 80173e8:	f083 0301 	eor.w	r3, r3, #1
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d011      	beq.n	8017416 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d00d      	beq.n	8017416 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	695a      	ldr	r2, [r3, #20]
 80173fe:	7d3b      	ldrb	r3, [r7, #20]
 8017400:	005b      	lsls	r3, r3, #1
 8017402:	4413      	add	r3, r2
 8017404:	881b      	ldrh	r3, [r3, #0]
 8017406:	461a      	mov	r2, r3
 8017408:	7cfb      	ldrb	r3, [r7, #19]
 801740a:	fa42 f303 	asr.w	r3, r2, r3
 801740e:	f003 0301 	and.w	r3, r3, #1
 8017412:	2b00      	cmp	r3, #0
 8017414:	d054      	beq.n	80174c0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	785b      	ldrb	r3, [r3, #1]
 801741a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	689a      	ldr	r2, [r3, #8]
 8017420:	7d79      	ldrb	r1, [r7, #21]
 8017422:	7cfb      	ldrb	r3, [r7, #19]
 8017424:	440b      	add	r3, r1
 8017426:	4619      	mov	r1, r3
 8017428:	460b      	mov	r3, r1
 801742a:	005b      	lsls	r3, r3, #1
 801742c:	440b      	add	r3, r1
 801742e:	009b      	lsls	r3, r3, #2
 8017430:	4413      	add	r3, r2
 8017432:	7a1b      	ldrb	r3, [r3, #8]
 8017434:	f343 0303 	sbfx	r3, r3, #0, #4
 8017438:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801743a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	689a      	ldr	r2, [r3, #8]
 8017440:	7d79      	ldrb	r1, [r7, #21]
 8017442:	7cfb      	ldrb	r3, [r7, #19]
 8017444:	440b      	add	r3, r1
 8017446:	4619      	mov	r1, r3
 8017448:	460b      	mov	r3, r1
 801744a:	005b      	lsls	r3, r3, #1
 801744c:	440b      	add	r3, r1
 801744e:	009b      	lsls	r3, r3, #2
 8017450:	4413      	add	r3, r2
 8017452:	7a1b      	ldrb	r3, [r3, #8]
 8017454:	f343 1303 	sbfx	r3, r3, #4, #4
 8017458:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801745a:	461a      	mov	r2, r3
 801745c:	4621      	mov	r1, r4
 801745e:	f7ff fc0c 	bl	8016c7a <RegionCommonValueInRange>
 8017462:	4603      	mov	r3, r0
 8017464:	2b00      	cmp	r3, #0
 8017466:	d02d      	beq.n	80174c4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	68da      	ldr	r2, [r3, #12]
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	6899      	ldr	r1, [r3, #8]
 8017470:	7d78      	ldrb	r0, [r7, #21]
 8017472:	7cfb      	ldrb	r3, [r7, #19]
 8017474:	4403      	add	r3, r0
 8017476:	4618      	mov	r0, r3
 8017478:	4603      	mov	r3, r0
 801747a:	005b      	lsls	r3, r3, #1
 801747c:	4403      	add	r3, r0
 801747e:	009b      	lsls	r3, r3, #2
 8017480:	440b      	add	r3, r1
 8017482:	7a5b      	ldrb	r3, [r3, #9]
 8017484:	4619      	mov	r1, r3
 8017486:	460b      	mov	r3, r1
 8017488:	005b      	lsls	r3, r3, #1
 801748a:	440b      	add	r3, r1
 801748c:	00db      	lsls	r3, r3, #3
 801748e:	4413      	add	r3, r2
 8017490:	7d1b      	ldrb	r3, [r3, #20]
 8017492:	f083 0301 	eor.w	r3, r3, #1
 8017496:	b2db      	uxtb	r3, r3
 8017498:	2b00      	cmp	r3, #0
 801749a:	d003      	beq.n	80174a4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801749c:	7dbb      	ldrb	r3, [r7, #22]
 801749e:	3301      	adds	r3, #1
 80174a0:	75bb      	strb	r3, [r7, #22]
                    continue;
 80174a2:	e010      	b.n	80174c6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80174a4:	7dfb      	ldrb	r3, [r7, #23]
 80174a6:	1c5a      	adds	r2, r3, #1
 80174a8:	75fa      	strb	r2, [r7, #23]
 80174aa:	461a      	mov	r2, r3
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	4413      	add	r3, r2
 80174b0:	7d79      	ldrb	r1, [r7, #21]
 80174b2:	7cfa      	ldrb	r2, [r7, #19]
 80174b4:	440a      	add	r2, r1
 80174b6:	b2d2      	uxtb	r2, r2
 80174b8:	701a      	strb	r2, [r3, #0]
 80174ba:	e004      	b.n	80174c6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80174bc:	bf00      	nop
 80174be:	e002      	b.n	80174c6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80174c0:	bf00      	nop
 80174c2:	e000      	b.n	80174c6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80174c4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80174c6:	7cfb      	ldrb	r3, [r7, #19]
 80174c8:	3301      	adds	r3, #1
 80174ca:	74fb      	strb	r3, [r7, #19]
 80174cc:	7cfb      	ldrb	r3, [r7, #19]
 80174ce:	2b0f      	cmp	r3, #15
 80174d0:	f67f af6c 	bls.w	80173ac <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80174d4:	7d7b      	ldrb	r3, [r7, #21]
 80174d6:	3310      	adds	r3, #16
 80174d8:	757b      	strb	r3, [r7, #21]
 80174da:	7d3b      	ldrb	r3, [r7, #20]
 80174dc:	3301      	adds	r3, #1
 80174de:	753b      	strb	r3, [r7, #20]
 80174e0:	7d7b      	ldrb	r3, [r7, #21]
 80174e2:	b29a      	uxth	r2, r3
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	8a1b      	ldrh	r3, [r3, #16]
 80174e8:	429a      	cmp	r2, r3
 80174ea:	f4ff af5c 	bcc.w	80173a6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	7dfa      	ldrb	r2, [r7, #23]
 80174f2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	7dba      	ldrb	r2, [r7, #22]
 80174f8:	701a      	strb	r2, [r3, #0]
}
 80174fa:	bf00      	nop
 80174fc:	371c      	adds	r7, #28
 80174fe:	46bd      	mov	sp, r7
 8017500:	bd90      	pop	{r4, r7, pc}

08017502 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017504:	b08b      	sub	sp, #44	@ 0x2c
 8017506:	af04      	add	r7, sp, #16
 8017508:	60f8      	str	r0, [r7, #12]
 801750a:	60b9      	str	r1, [r7, #8]
 801750c:	607a      	str	r2, [r7, #4]
 801750e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	4618      	mov	r0, r3
 8017516:	f005 fd73 	bl	801d000 <UTIL_TIMER_GetElapsedTime>
 801751a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	681a      	ldr	r2, [r3, #0]
 8017520:	697b      	ldr	r3, [r7, #20]
 8017522:	1ad2      	subs	r2, r2, r3
 8017524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017526:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801752a:	2201      	movs	r2, #1
 801752c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801752e:	683b      	ldr	r3, [r7, #0]
 8017530:	2200      	movs	r2, #0
 8017532:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	685b      	ldr	r3, [r3, #4]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d004      	beq.n	8017546 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017540:	697a      	ldr	r2, [r7, #20]
 8017542:	429a      	cmp	r2, r3
 8017544:	d32b      	bcc.n	801759e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	2200      	movs	r2, #0
 801754a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	69db      	ldr	r3, [r3, #28]
 8017550:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017556:	68dd      	ldr	r5, [r3, #12]
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	7a5e      	ldrb	r6, [r3, #9]
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	7d1b      	ldrb	r3, [r3, #20]
 8017566:	68fa      	ldr	r2, [r7, #12]
 8017568:	6992      	ldr	r2, [r2, #24]
 801756a:	9203      	str	r2, [sp, #12]
 801756c:	68fa      	ldr	r2, [r7, #12]
 801756e:	f10d 0e04 	add.w	lr, sp, #4
 8017572:	320c      	adds	r2, #12
 8017574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017578:	e88e 0003 	stmia.w	lr, {r0, r1}
 801757c:	9300      	str	r3, [sp, #0]
 801757e:	4663      	mov	r3, ip
 8017580:	4632      	mov	r2, r6
 8017582:	4629      	mov	r1, r5
 8017584:	4620      	mov	r0, r4
 8017586:	f7ff fc49 	bl	8016e1c <RegionCommonUpdateBandTimeOff>
 801758a:	4602      	mov	r2, r0
 801758c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801758e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	69d8      	ldr	r0, [r3, #28]
 8017594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017596:	683a      	ldr	r2, [r7, #0]
 8017598:	6879      	ldr	r1, [r7, #4]
 801759a:	f7ff fef4 	bl	8017386 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801759e:	683b      	ldr	r3, [r7, #0]
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d004      	beq.n	80175b0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80175a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175a8:	2200      	movs	r2, #0
 80175aa:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80175ac:	2300      	movs	r3, #0
 80175ae:	e006      	b.n	80175be <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80175b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d001      	beq.n	80175bc <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80175b8:	230b      	movs	r3, #11
 80175ba:	e000      	b.n	80175be <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80175bc:	230c      	movs	r3, #12
    }
}
 80175be:	4618      	mov	r0, r3
 80175c0:	371c      	adds	r7, #28
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175c6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80175c6:	b5b0      	push	{r4, r5, r7, lr}
 80175c8:	b086      	sub	sp, #24
 80175ca:	af02      	add	r7, sp, #8
 80175cc:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	781b      	ldrb	r3, [r3, #0]
 80175d2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f993 2000 	ldrsb.w	r2, [r3]
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80175e0:	429a      	cmp	r2, r3
 80175e2:	d103      	bne.n	80175ec <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80175ea:	e026      	b.n	801763a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
 80175ee:	3b01      	subs	r3, #1
 80175f0:	b2db      	uxtb	r3, r3
 80175f2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80175fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80175fe:	429a      	cmp	r2, r3
 8017600:	d019      	beq.n	8017636 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	78d8      	ldrb	r0, [r3, #3]
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	6859      	ldr	r1, [r3, #4]
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017616:	687a      	ldr	r2, [r7, #4]
 8017618:	6892      	ldr	r2, [r2, #8]
 801761a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801761e:	9201      	str	r2, [sp, #4]
 8017620:	9300      	str	r3, [sp, #0]
 8017622:	462b      	mov	r3, r5
 8017624:	4622      	mov	r2, r4
 8017626:	f7ff fab6 	bl	8016b96 <RegionCommonChanVerifyDr>
 801762a:	4603      	mov	r3, r0
 801762c:	f083 0301 	eor.w	r3, r3, #1
 8017630:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017632:	2b00      	cmp	r3, #0
 8017634:	d1da      	bne.n	80175ec <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017636:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801763a:	4618      	mov	r0, r3
 801763c:	3710      	adds	r7, #16
 801763e:	46bd      	mov	sp, r7
 8017640:	bdb0      	pop	{r4, r5, r7, pc}

08017642 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017642:	b480      	push	{r7}
 8017644:	b083      	sub	sp, #12
 8017646:	af00      	add	r7, sp, #0
 8017648:	4603      	mov	r3, r0
 801764a:	460a      	mov	r2, r1
 801764c:	71fb      	strb	r3, [r7, #7]
 801764e:	4613      	mov	r3, r2
 8017650:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017652:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801765a:	4293      	cmp	r3, r2
 801765c:	bfb8      	it	lt
 801765e:	4613      	movlt	r3, r2
 8017660:	b25b      	sxtb	r3, r3
}
 8017662:	4618      	mov	r0, r3
 8017664:	370c      	adds	r7, #12
 8017666:	46bd      	mov	sp, r7
 8017668:	bc80      	pop	{r7}
 801766a:	4770      	bx	lr

0801766c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801766c:	b480      	push	{r7}
 801766e:	b083      	sub	sp, #12
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	009b      	lsls	r3, r3, #2
 801767a:	683a      	ldr	r2, [r7, #0]
 801767c:	4413      	add	r3, r2
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	4a07      	ldr	r2, [pc, #28]	@ (80176a0 <RegionCommonGetBandwidth+0x34>)
 8017682:	4293      	cmp	r3, r2
 8017684:	d004      	beq.n	8017690 <RegionCommonGetBandwidth+0x24>
 8017686:	4a07      	ldr	r2, [pc, #28]	@ (80176a4 <RegionCommonGetBandwidth+0x38>)
 8017688:	4293      	cmp	r3, r2
 801768a:	d003      	beq.n	8017694 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801768c:	2300      	movs	r3, #0
 801768e:	e002      	b.n	8017696 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017690:	2301      	movs	r3, #1
 8017692:	e000      	b.n	8017696 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017694:	2302      	movs	r3, #2
    }
}
 8017696:	4618      	mov	r0, r3
 8017698:	370c      	adds	r7, #12
 801769a:	46bd      	mov	sp, r7
 801769c:	bc80      	pop	{r7}
 801769e:	4770      	bx	lr
 80176a0:	0003d090 	.word	0x0003d090
 80176a4:	0007a120 	.word	0x0007a120

080176a8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b086      	sub	sp, #24
 80176ac:	af04      	add	r7, sp, #16
 80176ae:	4603      	mov	r3, r0
 80176b0:	6039      	str	r1, [r7, #0]
 80176b2:	71fb      	strb	r3, [r7, #7]
 80176b4:	4613      	mov	r3, r2
 80176b6:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80176b8:	79fb      	ldrb	r3, [r7, #7]
 80176ba:	2b05      	cmp	r3, #5
 80176bc:	d810      	bhi.n	80176e0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80176be:	79fb      	ldrb	r3, [r7, #7]
 80176c0:	4a0f      	ldr	r2, [pc, #60]	@ (8017700 <RegionCommonRxConfigPrint+0x58>)
 80176c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80176c6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80176ca:	9202      	str	r2, [sp, #8]
 80176cc:	683a      	ldr	r2, [r7, #0]
 80176ce:	9201      	str	r2, [sp, #4]
 80176d0:	9300      	str	r3, [sp, #0]
 80176d2:	4b0c      	ldr	r3, [pc, #48]	@ (8017704 <RegionCommonRxConfigPrint+0x5c>)
 80176d4:	2201      	movs	r2, #1
 80176d6:	2100      	movs	r1, #0
 80176d8:	2002      	movs	r0, #2
 80176da:	f005 fd6f 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80176de:	e00a      	b.n	80176f6 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80176e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80176e4:	9301      	str	r3, [sp, #4]
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	9300      	str	r3, [sp, #0]
 80176ea:	4b07      	ldr	r3, [pc, #28]	@ (8017708 <RegionCommonRxConfigPrint+0x60>)
 80176ec:	2201      	movs	r2, #1
 80176ee:	2100      	movs	r1, #0
 80176f0:	2002      	movs	r0, #2
 80176f2:	f005 fd63 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 80176f6:	bf00      	nop
 80176f8:	3708      	adds	r7, #8
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	2000011c 	.word	0x2000011c
 8017704:	0801dfb4 	.word	0x0801dfb4
 8017708:	0801dfd4 	.word	0x0801dfd4

0801770c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b084      	sub	sp, #16
 8017710:	af02      	add	r7, sp, #8
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	460b      	mov	r3, r1
 8017716:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801771c:	9301      	str	r3, [sp, #4]
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	9300      	str	r3, [sp, #0]
 8017722:	4b05      	ldr	r3, [pc, #20]	@ (8017738 <RegionCommonTxConfigPrint+0x2c>)
 8017724:	2201      	movs	r2, #1
 8017726:	2100      	movs	r1, #0
 8017728:	2002      	movs	r0, #2
 801772a:	f005 fd47 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
}
 801772e:	bf00      	nop
 8017730:	3708      	adds	r7, #8
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}
 8017736:	bf00      	nop
 8017738:	0801dff0 	.word	0x0801dff0

0801773c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017746:	4b2d      	ldr	r3, [pc, #180]	@ (80177fc <VerifyRfFreq+0xc0>)
 8017748:	6a1b      	ldr	r3, [r3, #32]
 801774a:	6878      	ldr	r0, [r7, #4]
 801774c:	4798      	blx	r3
 801774e:	4603      	mov	r3, r0
 8017750:	f083 0301 	eor.w	r3, r3, #1
 8017754:	b2db      	uxtb	r3, r3
 8017756:	2b00      	cmp	r3, #0
 8017758:	d001      	beq.n	801775e <VerifyRfFreq+0x22>
    {
        return false;
 801775a:	2300      	movs	r3, #0
 801775c:	e04a      	b.n	80177f4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	4a27      	ldr	r2, [pc, #156]	@ (8017800 <VerifyRfFreq+0xc4>)
 8017762:	4293      	cmp	r3, r2
 8017764:	d307      	bcc.n	8017776 <VerifyRfFreq+0x3a>
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	4a26      	ldr	r2, [pc, #152]	@ (8017804 <VerifyRfFreq+0xc8>)
 801776a:	4293      	cmp	r3, r2
 801776c:	d803      	bhi.n	8017776 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801776e:	683b      	ldr	r3, [r7, #0]
 8017770:	2202      	movs	r2, #2
 8017772:	701a      	strb	r2, [r3, #0]
 8017774:	e03d      	b.n	80177f2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	4a22      	ldr	r2, [pc, #136]	@ (8017804 <VerifyRfFreq+0xc8>)
 801777a:	4293      	cmp	r3, r2
 801777c:	d907      	bls.n	801778e <VerifyRfFreq+0x52>
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	4a21      	ldr	r2, [pc, #132]	@ (8017808 <VerifyRfFreq+0xcc>)
 8017782:	4293      	cmp	r3, r2
 8017784:	d803      	bhi.n	801778e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8017786:	683b      	ldr	r3, [r7, #0]
 8017788:	2200      	movs	r2, #0
 801778a:	701a      	strb	r2, [r3, #0]
 801778c:	e031      	b.n	80177f2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	4a1d      	ldr	r2, [pc, #116]	@ (8017808 <VerifyRfFreq+0xcc>)
 8017792:	4293      	cmp	r3, r2
 8017794:	d907      	bls.n	80177a6 <VerifyRfFreq+0x6a>
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	4a1c      	ldr	r2, [pc, #112]	@ (801780c <VerifyRfFreq+0xd0>)
 801779a:	4293      	cmp	r3, r2
 801779c:	d803      	bhi.n	80177a6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	2201      	movs	r2, #1
 80177a2:	701a      	strb	r2, [r3, #0]
 80177a4:	e025      	b.n	80177f2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	4a19      	ldr	r2, [pc, #100]	@ (8017810 <VerifyRfFreq+0xd4>)
 80177aa:	4293      	cmp	r3, r2
 80177ac:	d907      	bls.n	80177be <VerifyRfFreq+0x82>
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	4a18      	ldr	r2, [pc, #96]	@ (8017814 <VerifyRfFreq+0xd8>)
 80177b2:	4293      	cmp	r3, r2
 80177b4:	d803      	bhi.n	80177be <VerifyRfFreq+0x82>
    {
        *band = 5;
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	2205      	movs	r2, #5
 80177ba:	701a      	strb	r2, [r3, #0]
 80177bc:	e019      	b.n	80177f2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	4a15      	ldr	r2, [pc, #84]	@ (8017818 <VerifyRfFreq+0xdc>)
 80177c2:	4293      	cmp	r3, r2
 80177c4:	d907      	bls.n	80177d6 <VerifyRfFreq+0x9a>
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	4a14      	ldr	r2, [pc, #80]	@ (801781c <VerifyRfFreq+0xe0>)
 80177ca:	4293      	cmp	r3, r2
 80177cc:	d803      	bhi.n	80177d6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	2203      	movs	r2, #3
 80177d2:	701a      	strb	r2, [r3, #0]
 80177d4:	e00d      	b.n	80177f2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	4a11      	ldr	r2, [pc, #68]	@ (8017820 <VerifyRfFreq+0xe4>)
 80177da:	4293      	cmp	r3, r2
 80177dc:	d307      	bcc.n	80177ee <VerifyRfFreq+0xb2>
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	4a10      	ldr	r2, [pc, #64]	@ (8017824 <VerifyRfFreq+0xe8>)
 80177e2:	4293      	cmp	r3, r2
 80177e4:	d803      	bhi.n	80177ee <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	2204      	movs	r2, #4
 80177ea:	701a      	strb	r2, [r3, #0]
 80177ec:	e001      	b.n	80177f2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80177ee:	2300      	movs	r3, #0
 80177f0:	e000      	b.n	80177f4 <VerifyRfFreq+0xb8>
    }
    return true;
 80177f2:	2301      	movs	r3, #1
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3708      	adds	r7, #8
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	0801e614 	.word	0x0801e614
 8017800:	337055c0 	.word	0x337055c0
 8017804:	338eda3f 	.word	0x338eda3f
 8017808:	33bca100 	.word	0x33bca100
 801780c:	33c5c8c0 	.word	0x33c5c8c0
 8017810:	33c74f5f 	.word	0x33c74f5f
 8017814:	33cef080 	.word	0x33cef080
 8017818:	33d1fdbf 	.word	0x33d1fdbf
 801781c:	33d5ce50 	.word	0x33d5ce50
 8017820:	33d691a0 	.word	0x33d691a0
 8017824:	33db2580 	.word	0x33db2580

08017828 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017828:	b590      	push	{r4, r7, lr}
 801782a:	b08b      	sub	sp, #44	@ 0x2c
 801782c:	af04      	add	r7, sp, #16
 801782e:	4603      	mov	r3, r0
 8017830:	460a      	mov	r2, r1
 8017832:	71fb      	strb	r3, [r7, #7]
 8017834:	4613      	mov	r3, r2
 8017836:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801783c:	4a1f      	ldr	r2, [pc, #124]	@ (80178bc <GetTimeOnAir+0x94>)
 801783e:	5cd3      	ldrb	r3, [r2, r3]
 8017840:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8017842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017846:	491e      	ldr	r1, [pc, #120]	@ (80178c0 <GetTimeOnAir+0x98>)
 8017848:	4618      	mov	r0, r3
 801784a:	f7ff ff0f 	bl	801766c <RegionCommonGetBandwidth>
 801784e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017850:	2300      	movs	r3, #0
 8017852:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017858:	2b07      	cmp	r3, #7
 801785a:	d118      	bne.n	801788e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801785c:	4b19      	ldr	r3, [pc, #100]	@ (80178c4 <GetTimeOnAir+0x9c>)
 801785e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017860:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017864:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017868:	fb02 f303 	mul.w	r3, r2, r3
 801786c:	4619      	mov	r1, r3
 801786e:	88bb      	ldrh	r3, [r7, #4]
 8017870:	b2db      	uxtb	r3, r3
 8017872:	2201      	movs	r2, #1
 8017874:	9203      	str	r2, [sp, #12]
 8017876:	9302      	str	r3, [sp, #8]
 8017878:	2300      	movs	r3, #0
 801787a:	9301      	str	r3, [sp, #4]
 801787c:	2305      	movs	r3, #5
 801787e:	9300      	str	r3, [sp, #0]
 8017880:	2300      	movs	r3, #0
 8017882:	460a      	mov	r2, r1
 8017884:	68f9      	ldr	r1, [r7, #12]
 8017886:	2000      	movs	r0, #0
 8017888:	47a0      	blx	r4
 801788a:	6178      	str	r0, [r7, #20]
 801788c:	e011      	b.n	80178b2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801788e:	4b0d      	ldr	r3, [pc, #52]	@ (80178c4 <GetTimeOnAir+0x9c>)
 8017890:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017892:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017896:	88bb      	ldrh	r3, [r7, #4]
 8017898:	b2db      	uxtb	r3, r3
 801789a:	2101      	movs	r1, #1
 801789c:	9103      	str	r1, [sp, #12]
 801789e:	9302      	str	r3, [sp, #8]
 80178a0:	2300      	movs	r3, #0
 80178a2:	9301      	str	r3, [sp, #4]
 80178a4:	2308      	movs	r3, #8
 80178a6:	9300      	str	r3, [sp, #0]
 80178a8:	2301      	movs	r3, #1
 80178aa:	68f9      	ldr	r1, [r7, #12]
 80178ac:	2001      	movs	r0, #1
 80178ae:	47a0      	blx	r4
 80178b0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80178b2:	697b      	ldr	r3, [r7, #20]
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	371c      	adds	r7, #28
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd90      	pop	{r4, r7, pc}
 80178bc:	0801e5dc 	.word	0x0801e5dc
 80178c0:	0801e5e4 	.word	0x0801e5e4
 80178c4:	0801e614 	.word	0x0801e614

080178c8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b088      	sub	sp, #32
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80178d0:	2300      	movs	r3, #0
 80178d2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	781b      	ldrb	r3, [r3, #0]
 80178d8:	3b01      	subs	r3, #1
 80178da:	2b37      	cmp	r3, #55	@ 0x37
 80178dc:	f200 8122 	bhi.w	8017b24 <RegionEU868GetPhyParam+0x25c>
 80178e0:	a201      	add	r2, pc, #4	@ (adr r2, 80178e8 <RegionEU868GetPhyParam+0x20>)
 80178e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178e6:	bf00      	nop
 80178e8:	080179c9 	.word	0x080179c9
 80178ec:	080179cf 	.word	0x080179cf
 80178f0:	08017b25 	.word	0x08017b25
 80178f4:	08017b25 	.word	0x08017b25
 80178f8:	08017b25 	.word	0x08017b25
 80178fc:	080179d5 	.word	0x080179d5
 8017900:	08017b25 	.word	0x08017b25
 8017904:	08017a0f 	.word	0x08017a0f
 8017908:	08017b25 	.word	0x08017b25
 801790c:	08017a15 	.word	0x08017a15
 8017910:	08017a1b 	.word	0x08017a1b
 8017914:	08017a21 	.word	0x08017a21
 8017918:	08017a27 	.word	0x08017a27
 801791c:	08017a37 	.word	0x08017a37
 8017920:	08017a47 	.word	0x08017a47
 8017924:	08017a4d 	.word	0x08017a4d
 8017928:	08017a55 	.word	0x08017a55
 801792c:	08017a5d 	.word	0x08017a5d
 8017930:	08017a65 	.word	0x08017a65
 8017934:	08017a6d 	.word	0x08017a6d
 8017938:	08017a75 	.word	0x08017a75
 801793c:	08017a89 	.word	0x08017a89
 8017940:	08017a8f 	.word	0x08017a8f
 8017944:	08017a95 	.word	0x08017a95
 8017948:	08017a9b 	.word	0x08017a9b
 801794c:	08017aa7 	.word	0x08017aa7
 8017950:	08017ab3 	.word	0x08017ab3
 8017954:	08017ab9 	.word	0x08017ab9
 8017958:	08017ac1 	.word	0x08017ac1
 801795c:	08017ac7 	.word	0x08017ac7
 8017960:	08017acd 	.word	0x08017acd
 8017964:	08017ad5 	.word	0x08017ad5
 8017968:	080179db 	.word	0x080179db
 801796c:	08017b25 	.word	0x08017b25
 8017970:	08017b25 	.word	0x08017b25
 8017974:	08017b25 	.word	0x08017b25
 8017978:	08017b25 	.word	0x08017b25
 801797c:	08017b25 	.word	0x08017b25
 8017980:	08017b25 	.word	0x08017b25
 8017984:	08017b25 	.word	0x08017b25
 8017988:	08017b25 	.word	0x08017b25
 801798c:	08017b25 	.word	0x08017b25
 8017990:	08017b25 	.word	0x08017b25
 8017994:	08017b25 	.word	0x08017b25
 8017998:	08017b25 	.word	0x08017b25
 801799c:	08017b25 	.word	0x08017b25
 80179a0:	08017adb 	.word	0x08017adb
 80179a4:	08017ae1 	.word	0x08017ae1
 80179a8:	08017aef 	.word	0x08017aef
 80179ac:	08017b25 	.word	0x08017b25
 80179b0:	08017b25 	.word	0x08017b25
 80179b4:	08017af5 	.word	0x08017af5
 80179b8:	08017afb 	.word	0x08017afb
 80179bc:	08017b25 	.word	0x08017b25
 80179c0:	08017b01 	.word	0x08017b01
 80179c4:	08017b11 	.word	0x08017b11
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80179c8:	2300      	movs	r3, #0
 80179ca:	61bb      	str	r3, [r7, #24]
            break;
 80179cc:	e0ab      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80179ce:	2300      	movs	r3, #0
 80179d0:	61bb      	str	r3, [r7, #24]
            break;
 80179d2:	e0a8      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80179d4:	2300      	movs	r3, #0
 80179d6:	61bb      	str	r3, [r7, #24]
            break;
 80179d8:	e0a5      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80179e0:	733b      	strb	r3, [r7, #12]
 80179e2:	2307      	movs	r3, #7
 80179e4:	737b      	strb	r3, [r7, #13]
 80179e6:	2300      	movs	r3, #0
 80179e8:	73bb      	strb	r3, [r7, #14]
 80179ea:	2310      	movs	r3, #16
 80179ec:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80179ee:	4b51      	ldr	r3, [pc, #324]	@ (8017b34 <RegionEU868GetPhyParam+0x26c>)
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80179f6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80179f8:	4b4e      	ldr	r3, [pc, #312]	@ (8017b34 <RegionEU868GetPhyParam+0x26c>)
 80179fa:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80179fc:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80179fe:	f107 030c 	add.w	r3, r7, #12
 8017a02:	4618      	mov	r0, r3
 8017a04:	f7ff fddf 	bl	80175c6 <RegionCommonGetNextLowerTxDr>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	61bb      	str	r3, [r7, #24]
            break;
 8017a0c:	e08b      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	61bb      	str	r3, [r7, #24]
            break;
 8017a12:	e088      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017a14:	2300      	movs	r3, #0
 8017a16:	61bb      	str	r3, [r7, #24]
            break;
 8017a18:	e085      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017a1a:	2340      	movs	r3, #64	@ 0x40
 8017a1c:	61bb      	str	r3, [r7, #24]
            break;
 8017a1e:	e082      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017a20:	2320      	movs	r3, #32
 8017a22:	61bb      	str	r3, [r7, #24]
            break;
 8017a24:	e07f      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017a2c:	461a      	mov	r2, r3
 8017a2e:	4b42      	ldr	r3, [pc, #264]	@ (8017b38 <RegionEU868GetPhyParam+0x270>)
 8017a30:	5c9b      	ldrb	r3, [r3, r2]
 8017a32:	61bb      	str	r3, [r7, #24]
            break;
 8017a34:	e077      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017a3c:	461a      	mov	r2, r3
 8017a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8017b3c <RegionEU868GetPhyParam+0x274>)
 8017a40:	5c9b      	ldrb	r3, [r3, r2]
 8017a42:	61bb      	str	r3, [r7, #24]
            break;
 8017a44:	e06f      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017a46:	2301      	movs	r3, #1
 8017a48:	61bb      	str	r3, [r7, #24]
            break;
 8017a4a:	e06c      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017a4c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017a50:	61bb      	str	r3, [r7, #24]
            break;
 8017a52:	e068      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017a54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017a58:	61bb      	str	r3, [r7, #24]
            break;
 8017a5a:	e064      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017a5c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017a60:	61bb      	str	r3, [r7, #24]
            break;
 8017a62:	e060      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017a64:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017a68:	61bb      	str	r3, [r7, #24]
            break;
 8017a6a:	e05c      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017a6c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8017a70:	61bb      	str	r3, [r7, #24]
            break;
 8017a72:	e058      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017a74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017a78:	4831      	ldr	r0, [pc, #196]	@ (8017b40 <RegionEU868GetPhyParam+0x278>)
 8017a7a:	f001 f831 	bl	8018ae0 <randr>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8017a84:	61bb      	str	r3, [r7, #24]
            break;
 8017a86:	e04e      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017a88:	2300      	movs	r3, #0
 8017a8a:	61bb      	str	r3, [r7, #24]
            break;
 8017a8c:	e04b      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8017b44 <RegionEU868GetPhyParam+0x27c>)
 8017a90:	61bb      	str	r3, [r7, #24]
            break;
 8017a92:	e048      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017a94:	2300      	movs	r3, #0
 8017a96:	61bb      	str	r3, [r7, #24]
            break;
 8017a98:	e045      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017a9a:	4b26      	ldr	r3, [pc, #152]	@ (8017b34 <RegionEU868GetPhyParam+0x26c>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017aa2:	61bb      	str	r3, [r7, #24]
            break;
 8017aa4:	e03f      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017aa6:	4b23      	ldr	r3, [pc, #140]	@ (8017b34 <RegionEU868GetPhyParam+0x26c>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017aae:	61bb      	str	r3, [r7, #24]
            break;
 8017ab0:	e039      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017ab2:	2310      	movs	r3, #16
 8017ab4:	61bb      	str	r3, [r7, #24]
            break;
 8017ab6:	e036      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8017b34 <RegionEU868GetPhyParam+0x26c>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	61bb      	str	r3, [r7, #24]
            break;
 8017abe:	e032      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	61bb      	str	r3, [r7, #24]
            break;
 8017ac4:	e02f      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	61bb      	str	r3, [r7, #24]
            break;
 8017aca:	e02c      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017acc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8017ad0:	61bb      	str	r3, [r7, #24]
            break;
 8017ad2:	e028      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8017b48 <RegionEU868GetPhyParam+0x280>)
 8017ad6:	61bb      	str	r3, [r7, #24]
            break;
 8017ad8:	e025      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017ada:	4b1a      	ldr	r3, [pc, #104]	@ (8017b44 <RegionEU868GetPhyParam+0x27c>)
 8017adc:	61bb      	str	r3, [r7, #24]
            break;
 8017ade:	e022      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017ae0:	2311      	movs	r3, #17
 8017ae2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017ae4:	2301      	movs	r3, #1
 8017ae6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017ae8:	2300      	movs	r3, #0
 8017aea:	76bb      	strb	r3, [r7, #26]
            break;
 8017aec:	e01b      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017aee:	2303      	movs	r3, #3
 8017af0:	61bb      	str	r3, [r7, #24]
            break;
 8017af2:	e018      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017af4:	4b13      	ldr	r3, [pc, #76]	@ (8017b44 <RegionEU868GetPhyParam+0x27c>)
 8017af6:	61bb      	str	r3, [r7, #24]
            break;
 8017af8:	e015      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017afa:	2303      	movs	r3, #3
 8017afc:	61bb      	str	r3, [r7, #24]
            break;
 8017afe:	e012      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b06:	461a      	mov	r2, r3
 8017b08:	4b10      	ldr	r3, [pc, #64]	@ (8017b4c <RegionEU868GetPhyParam+0x284>)
 8017b0a:	5c9b      	ldrb	r3, [r3, r2]
 8017b0c:	61bb      	str	r3, [r7, #24]
            break;
 8017b0e:	e00a      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b16:	490e      	ldr	r1, [pc, #56]	@ (8017b50 <RegionEU868GetPhyParam+0x288>)
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f7ff fda7 	bl	801766c <RegionCommonGetBandwidth>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	61bb      	str	r3, [r7, #24]
            break;
 8017b22:	e000      	b.n	8017b26 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8017b24:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017b26:	69bb      	ldr	r3, [r7, #24]
 8017b28:	61fb      	str	r3, [r7, #28]
 8017b2a:	69fb      	ldr	r3, [r7, #28]
}
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	3720      	adds	r7, #32
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bd80      	pop	{r7, pc}
 8017b34:	20001a6c 	.word	0x20001a6c
 8017b38:	0801e604 	.word	0x0801e604
 8017b3c:	0801e60c 	.word	0x0801e60c
 8017b40:	fffffc18 	.word	0xfffffc18
 8017b44:	33d3e608 	.word	0x33d3e608
 8017b48:	4009999a 	.word	0x4009999a
 8017b4c:	0801e5dc 	.word	0x0801e5dc
 8017b50:	0801e5e4 	.word	0x0801e5e4

08017b54 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017b54:	b590      	push	{r4, r7, lr}
 8017b56:	b085      	sub	sp, #20
 8017b58:	af02      	add	r7, sp, #8
 8017b5a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017b5c:	4b11      	ldr	r3, [pc, #68]	@ (8017ba4 <RegionEU868SetBandTxDone+0x50>)
 8017b5e:	681a      	ldr	r2, [r3, #0]
 8017b60:	4b11      	ldr	r3, [pc, #68]	@ (8017ba8 <RegionEU868SetBandTxDone+0x54>)
 8017b62:	6819      	ldr	r1, [r3, #0]
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	781b      	ldrb	r3, [r3, #0]
 8017b68:	4618      	mov	r0, r3
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	005b      	lsls	r3, r3, #1
 8017b6e:	4403      	add	r3, r0
 8017b70:	009b      	lsls	r3, r3, #2
 8017b72:	440b      	add	r3, r1
 8017b74:	3309      	adds	r3, #9
 8017b76:	781b      	ldrb	r3, [r3, #0]
 8017b78:	4619      	mov	r1, r3
 8017b7a:	460b      	mov	r3, r1
 8017b7c:	005b      	lsls	r3, r3, #1
 8017b7e:	440b      	add	r3, r1
 8017b80:	00db      	lsls	r3, r3, #3
 8017b82:	18d0      	adds	r0, r2, r3
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6899      	ldr	r1, [r3, #8]
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	785c      	ldrb	r4, [r3, #1]
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	691a      	ldr	r2, [r3, #16]
 8017b90:	9200      	str	r2, [sp, #0]
 8017b92:	68db      	ldr	r3, [r3, #12]
 8017b94:	4622      	mov	r2, r4
 8017b96:	f7ff f913 	bl	8016dc0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8017b9a:	bf00      	nop
 8017b9c:	370c      	adds	r7, #12
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd90      	pop	{r4, r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	20001a70 	.word	0x20001a70
 8017ba8:	20001a6c 	.word	0x20001a6c

08017bac <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b0b0      	sub	sp, #192	@ 0xc0
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017bb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017bb8:	2290      	movs	r2, #144	@ 0x90
 8017bba:	2100      	movs	r1, #0
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f005 fd75 	bl	801d6ac <memset>
 8017bc2:	2364      	movs	r3, #100	@ 0x64
 8017bc4:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017bc6:	2364      	movs	r3, #100	@ 0x64
 8017bc8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8017bcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017bd0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8017bd4:	230a      	movs	r3, #10
 8017bd6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8017bda:	2364      	movs	r3, #100	@ 0x64
 8017bdc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8017be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017be4:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	7b1b      	ldrb	r3, [r3, #12]
 8017bec:	2b02      	cmp	r3, #2
 8017bee:	d05d      	beq.n	8017cac <RegionEU868InitDefaults+0x100>
 8017bf0:	2b02      	cmp	r3, #2
 8017bf2:	dc6a      	bgt.n	8017cca <RegionEU868InitDefaults+0x11e>
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d002      	beq.n	8017bfe <RegionEU868InitDefaults+0x52>
 8017bf8:	2b01      	cmp	r3, #1
 8017bfa:	d03e      	beq.n	8017c7a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017bfc:	e065      	b.n	8017cca <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d062      	beq.n	8017ccc <RegionEU868InitDefaults+0x120>
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	685b      	ldr	r3, [r3, #4]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d05e      	beq.n	8017ccc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	685b      	ldr	r3, [r3, #4]
 8017c12:	4a30      	ldr	r2, [pc, #192]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c14:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	689b      	ldr	r3, [r3, #8]
 8017c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8017cd8 <RegionEU868InitDefaults+0x12c>)
 8017c1c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8017cd8 <RegionEU868InitDefaults+0x12c>)
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8017c26:	2290      	movs	r2, #144	@ 0x90
 8017c28:	4618      	mov	r0, r3
 8017c2a:	f000 ff70 	bl	8018b0e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017c2e:	4b29      	ldr	r3, [pc, #164]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	4a2a      	ldr	r2, [pc, #168]	@ (8017cdc <RegionEU868InitDefaults+0x130>)
 8017c34:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017c3a:	4b26      	ldr	r3, [pc, #152]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	4a28      	ldr	r2, [pc, #160]	@ (8017ce0 <RegionEU868InitDefaults+0x134>)
 8017c40:	330c      	adds	r3, #12
 8017c42:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017c48:	4b22      	ldr	r3, [pc, #136]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	4a25      	ldr	r2, [pc, #148]	@ (8017ce4 <RegionEU868InitDefaults+0x138>)
 8017c4e:	3318      	adds	r3, #24
 8017c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017c56:	4b1f      	ldr	r3, [pc, #124]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	2207      	movs	r2, #7
 8017c5c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017c60:	4b1c      	ldr	r3, [pc, #112]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017c68:	4b1a      	ldr	r3, [pc, #104]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017c70:	2201      	movs	r2, #1
 8017c72:	4619      	mov	r1, r3
 8017c74:	f7ff f87e 	bl	8016d74 <RegionCommonChanMaskCopy>
 8017c78:	e028      	b.n	8017ccc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8017c7a:	4b16      	ldr	r3, [pc, #88]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8017c82:	4b14      	ldr	r3, [pc, #80]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	2200      	movs	r2, #0
 8017c88:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8017c8a:	4b12      	ldr	r3, [pc, #72]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	2200      	movs	r2, #0
 8017c90:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017c92:	4b10      	ldr	r3, [pc, #64]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017ca2:	2201      	movs	r2, #1
 8017ca4:	4619      	mov	r1, r3
 8017ca6:	f7ff f865 	bl	8016d74 <RegionCommonChanMaskCopy>
            break;
 8017caa:	e00f      	b.n	8017ccc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8017cac:	4b09      	ldr	r3, [pc, #36]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8017cb4:	4b07      	ldr	r3, [pc, #28]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8017cbc:	4b05      	ldr	r3, [pc, #20]	@ (8017cd4 <RegionEU868InitDefaults+0x128>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	430a      	orrs	r2, r1
 8017cc2:	b292      	uxth	r2, r2
 8017cc4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8017cc8:	e000      	b.n	8017ccc <RegionEU868InitDefaults+0x120>
            break;
 8017cca:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017ccc:	37c0      	adds	r7, #192	@ 0xc0
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	bd80      	pop	{r7, pc}
 8017cd2:	bf00      	nop
 8017cd4:	20001a6c 	.word	0x20001a6c
 8017cd8:	20001a70 	.word	0x20001a70
 8017cdc:	0801e00c 	.word	0x0801e00c
 8017ce0:	0801e018 	.word	0x0801e018
 8017ce4:	0801e024 	.word	0x0801e024

08017ce8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b084      	sub	sp, #16
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	460b      	mov	r3, r1
 8017cf2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017cf4:	78fb      	ldrb	r3, [r7, #3]
 8017cf6:	2b0f      	cmp	r3, #15
 8017cf8:	d86c      	bhi.n	8017dd4 <RegionEU868Verify+0xec>
 8017cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8017d00 <RegionEU868Verify+0x18>)
 8017cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d00:	08017d41 	.word	0x08017d41
 8017d04:	08017dd5 	.word	0x08017dd5
 8017d08:	08017dd5 	.word	0x08017dd5
 8017d0c:	08017dd5 	.word	0x08017dd5
 8017d10:	08017dd5 	.word	0x08017dd5
 8017d14:	08017d59 	.word	0x08017d59
 8017d18:	08017d77 	.word	0x08017d77
 8017d1c:	08017d95 	.word	0x08017d95
 8017d20:	08017dd5 	.word	0x08017dd5
 8017d24:	08017db3 	.word	0x08017db3
 8017d28:	08017db3 	.word	0x08017db3
 8017d2c:	08017dd5 	.word	0x08017dd5
 8017d30:	08017dd5 	.word	0x08017dd5
 8017d34:	08017dd5 	.word	0x08017dd5
 8017d38:	08017dd5 	.word	0x08017dd5
 8017d3c:	08017dd1 	.word	0x08017dd1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017d40:	2300      	movs	r3, #0
 8017d42:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	f107 020f 	add.w	r2, r7, #15
 8017d4c:	4611      	mov	r1, r2
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7ff fcf4 	bl	801773c <VerifyRfFreq>
 8017d54:	4603      	mov	r3, r0
 8017d56:	e03e      	b.n	8017dd6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	f993 3000 	ldrsb.w	r3, [r3]
 8017d5e:	2207      	movs	r2, #7
 8017d60:	2100      	movs	r1, #0
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7fe ff89 	bl	8016c7a <RegionCommonValueInRange>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	bf14      	ite	ne
 8017d6e:	2301      	movne	r3, #1
 8017d70:	2300      	moveq	r3, #0
 8017d72:	b2db      	uxtb	r3, r3
 8017d74:	e02f      	b.n	8017dd6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f993 3000 	ldrsb.w	r3, [r3]
 8017d7c:	2205      	movs	r2, #5
 8017d7e:	2100      	movs	r1, #0
 8017d80:	4618      	mov	r0, r3
 8017d82:	f7fe ff7a 	bl	8016c7a <RegionCommonValueInRange>
 8017d86:	4603      	mov	r3, r0
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	bf14      	ite	ne
 8017d8c:	2301      	movne	r3, #1
 8017d8e:	2300      	moveq	r3, #0
 8017d90:	b2db      	uxtb	r3, r3
 8017d92:	e020      	b.n	8017dd6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f993 3000 	ldrsb.w	r3, [r3]
 8017d9a:	2207      	movs	r2, #7
 8017d9c:	2100      	movs	r1, #0
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7fe ff6b 	bl	8016c7a <RegionCommonValueInRange>
 8017da4:	4603      	mov	r3, r0
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	bf14      	ite	ne
 8017daa:	2301      	movne	r3, #1
 8017dac:	2300      	moveq	r3, #0
 8017dae:	b2db      	uxtb	r3, r3
 8017db0:	e011      	b.n	8017dd6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	f993 3000 	ldrsb.w	r3, [r3]
 8017db8:	2207      	movs	r2, #7
 8017dba:	2100      	movs	r1, #0
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7fe ff5c 	bl	8016c7a <RegionCommonValueInRange>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	bf14      	ite	ne
 8017dc8:	2301      	movne	r3, #1
 8017dca:	2300      	moveq	r3, #0
 8017dcc:	b2db      	uxtb	r3, r3
 8017dce:	e002      	b.n	8017dd6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017dd0:	2301      	movs	r3, #1
 8017dd2:	e000      	b.n	8017dd6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8017dd4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	3710      	adds	r7, #16
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bd80      	pop	{r7, pc}
 8017dde:	bf00      	nop

08017de0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b08a      	sub	sp, #40	@ 0x28
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017de8:	2350      	movs	r3, #80	@ 0x50
 8017dea:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	7a1b      	ldrb	r3, [r3, #8]
 8017df2:	2b10      	cmp	r3, #16
 8017df4:	d162      	bne.n	8017ebc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	685b      	ldr	r3, [r3, #4]
 8017dfa:	330f      	adds	r3, #15
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d15e      	bne.n	8017ec0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017e02:	2300      	movs	r3, #0
 8017e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017e08:	2303      	movs	r3, #3
 8017e0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017e0e:	e050      	b.n	8017eb2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017e10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e14:	2b07      	cmp	r3, #7
 8017e16:	d824      	bhi.n	8017e62 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	685a      	ldr	r2, [r3, #4]
 8017e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e20:	4413      	add	r3, r2
 8017e22:	781b      	ldrb	r3, [r3, #0]
 8017e24:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017e26:	69ba      	ldr	r2, [r7, #24]
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	6859      	ldr	r1, [r3, #4]
 8017e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e30:	3301      	adds	r3, #1
 8017e32:	440b      	add	r3, r1
 8017e34:	781b      	ldrb	r3, [r3, #0]
 8017e36:	021b      	lsls	r3, r3, #8
 8017e38:	4313      	orrs	r3, r2
 8017e3a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017e3c:	69ba      	ldr	r2, [r7, #24]
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	6859      	ldr	r1, [r3, #4]
 8017e42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e46:	3302      	adds	r3, #2
 8017e48:	440b      	add	r3, r1
 8017e4a:	781b      	ldrb	r3, [r3, #0]
 8017e4c:	041b      	lsls	r3, r3, #16
 8017e4e:	4313      	orrs	r3, r2
 8017e50:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8017e52:	69bb      	ldr	r3, [r7, #24]
 8017e54:	2264      	movs	r2, #100	@ 0x64
 8017e56:	fb02 f303 	mul.w	r3, r2, r3
 8017e5a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	61fb      	str	r3, [r7, #28]
 8017e60:	e006      	b.n	8017e70 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8017e62:	2300      	movs	r3, #0
 8017e64:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8017e66:	2300      	movs	r3, #0
 8017e68:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8017e70:	69bb      	ldr	r3, [r7, #24]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d00b      	beq.n	8017e8e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8017e76:	f107 0318 	add.w	r3, r7, #24
 8017e7a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8017e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e80:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017e82:	f107 0310 	add.w	r3, r7, #16
 8017e86:	4618      	mov	r0, r3
 8017e88:	f000 fd14 	bl	80188b4 <RegionEU868ChannelAdd>
 8017e8c:	e007      	b.n	8017e9e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017e8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e92:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8017e94:	f107 030c 	add.w	r3, r7, #12
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f000 fdad 	bl	80189f8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ea2:	3303      	adds	r3, #3
 8017ea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017eac:	3301      	adds	r3, #1
 8017eae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017eb6:	2b0f      	cmp	r3, #15
 8017eb8:	d9aa      	bls.n	8017e10 <RegionEU868ApplyCFList+0x30>
 8017eba:	e002      	b.n	8017ec2 <RegionEU868ApplyCFList+0xe2>
        return;
 8017ebc:	bf00      	nop
 8017ebe:	e000      	b.n	8017ec2 <RegionEU868ApplyCFList+0xe2>
        return;
 8017ec0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017ec2:	3728      	adds	r7, #40	@ 0x28
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bd80      	pop	{r7, pc}

08017ec8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b082      	sub	sp, #8
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	791b      	ldrb	r3, [r3, #4]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d002      	beq.n	8017ede <RegionEU868ChanMaskSet+0x16>
 8017ed8:	2b01      	cmp	r3, #1
 8017eda:	d00b      	beq.n	8017ef4 <RegionEU868ChanMaskSet+0x2c>
 8017edc:	e015      	b.n	8017f0a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017ede:	4b0e      	ldr	r3, [pc, #56]	@ (8017f18 <RegionEU868ChanMaskSet+0x50>)
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	2201      	movs	r2, #1
 8017eec:	4619      	mov	r1, r3
 8017eee:	f7fe ff41 	bl	8016d74 <RegionCommonChanMaskCopy>
            break;
 8017ef2:	e00c      	b.n	8017f0e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017ef4:	4b08      	ldr	r3, [pc, #32]	@ (8017f18 <RegionEU868ChanMaskSet+0x50>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	2201      	movs	r2, #1
 8017f02:	4619      	mov	r1, r3
 8017f04:	f7fe ff36 	bl	8016d74 <RegionCommonChanMaskCopy>
            break;
 8017f08:	e001      	b.n	8017f0e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	e000      	b.n	8017f10 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8017f0e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017f10:	4618      	mov	r0, r3
 8017f12:	3708      	adds	r7, #8
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	20001a6c 	.word	0x20001a6c

08017f1c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b088      	sub	sp, #32
 8017f20:	af02      	add	r7, sp, #8
 8017f22:	60ba      	str	r2, [r7, #8]
 8017f24:	607b      	str	r3, [r7, #4]
 8017f26:	4603      	mov	r3, r0
 8017f28:	73fb      	strb	r3, [r7, #15]
 8017f2a:	460b      	mov	r3, r1
 8017f2c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8017f2e:	2300      	movs	r3, #0
 8017f30:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f36:	2b07      	cmp	r3, #7
 8017f38:	bfa8      	it	ge
 8017f3a:	2307      	movge	r3, #7
 8017f3c:	b25a      	sxtb	r2, r3
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f48:	491e      	ldr	r1, [pc, #120]	@ (8017fc4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f7ff fb8e 	bl	801766c <RegionCommonGetBandwidth>
 8017f50:	4603      	mov	r3, r0
 8017f52:	b2da      	uxtb	r2, r3
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f5e:	2b07      	cmp	r3, #7
 8017f60:	d10a      	bne.n	8017f78 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f68:	461a      	mov	r2, r3
 8017f6a:	4b17      	ldr	r3, [pc, #92]	@ (8017fc8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017f6c:	5c9b      	ldrb	r3, [r3, r2]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f7ff f910 	bl	8017194 <RegionCommonComputeSymbolTimeFsk>
 8017f74:	6178      	str	r0, [r7, #20]
 8017f76:	e011      	b.n	8017f9c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f7e:	461a      	mov	r2, r3
 8017f80:	4b11      	ldr	r3, [pc, #68]	@ (8017fc8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017f82:	5c9a      	ldrb	r2, [r3, r2]
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f8a:	4619      	mov	r1, r3
 8017f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8017fc4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017f8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017f92:	4619      	mov	r1, r3
 8017f94:	4610      	mov	r0, r2
 8017f96:	f7ff f8e7 	bl	8017168 <RegionCommonComputeSymbolTimeLoRa>
 8017f9a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8017fcc <RegionEU868ComputeRxWindowParameters+0xb0>)
 8017f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017fa0:	4798      	blx	r3
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	3308      	adds	r3, #8
 8017fa6:	687a      	ldr	r2, [r7, #4]
 8017fa8:	320c      	adds	r2, #12
 8017faa:	7bb9      	ldrb	r1, [r7, #14]
 8017fac:	9201      	str	r2, [sp, #4]
 8017fae:	9300      	str	r3, [sp, #0]
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	68ba      	ldr	r2, [r7, #8]
 8017fb4:	6978      	ldr	r0, [r7, #20]
 8017fb6:	f7ff f8fd 	bl	80171b4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8017fba:	bf00      	nop
 8017fbc:	3718      	adds	r7, #24
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	0801e5e4 	.word	0x0801e5e4
 8017fc8:	0801e5dc 	.word	0x0801e5dc
 8017fcc:	0801e614 	.word	0x0801e614

08017fd0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017fd0:	b5b0      	push	{r4, r5, r7, lr}
 8017fd2:	b090      	sub	sp, #64	@ 0x40
 8017fd4:	af0a      	add	r7, sp, #40	@ 0x28
 8017fd6:	6078      	str	r0, [r7, #4]
 8017fd8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	785b      	ldrb	r3, [r3, #1]
 8017fde:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	685b      	ldr	r3, [r3, #4]
 8017fec:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017fee:	4b5a      	ldr	r3, [pc, #360]	@ (8018158 <RegionEU868RxConfig+0x188>)
 8017ff0:	685b      	ldr	r3, [r3, #4]
 8017ff2:	4798      	blx	r3
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d001      	beq.n	8017ffe <RegionEU868RxConfig+0x2e>
    {
        return false;
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	e0a8      	b.n	8018150 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	7cdb      	ldrb	r3, [r3, #19]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d126      	bne.n	8018054 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8018006:	4b55      	ldr	r3, [pc, #340]	@ (801815c <RegionEU868RxConfig+0x18c>)
 8018008:	681a      	ldr	r2, [r3, #0]
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	781b      	ldrb	r3, [r3, #0]
 801800e:	4619      	mov	r1, r3
 8018010:	460b      	mov	r3, r1
 8018012:	005b      	lsls	r3, r3, #1
 8018014:	440b      	add	r3, r1
 8018016:	009b      	lsls	r3, r3, #2
 8018018:	4413      	add	r3, r2
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801801e:	4b4f      	ldr	r3, [pc, #316]	@ (801815c <RegionEU868RxConfig+0x18c>)
 8018020:	681a      	ldr	r2, [r3, #0]
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	781b      	ldrb	r3, [r3, #0]
 8018026:	4619      	mov	r1, r3
 8018028:	460b      	mov	r3, r1
 801802a:	005b      	lsls	r3, r3, #1
 801802c:	440b      	add	r3, r1
 801802e:	009b      	lsls	r3, r3, #2
 8018030:	4413      	add	r3, r2
 8018032:	3304      	adds	r3, #4
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d00c      	beq.n	8018054 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801803a:	4b48      	ldr	r3, [pc, #288]	@ (801815c <RegionEU868RxConfig+0x18c>)
 801803c:	681a      	ldr	r2, [r3, #0]
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	781b      	ldrb	r3, [r3, #0]
 8018042:	4619      	mov	r1, r3
 8018044:	460b      	mov	r3, r1
 8018046:	005b      	lsls	r3, r3, #1
 8018048:	440b      	add	r3, r1
 801804a:	009b      	lsls	r3, r3, #2
 801804c:	4413      	add	r3, r2
 801804e:	3304      	adds	r3, #4
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018058:	4a41      	ldr	r2, [pc, #260]	@ (8018160 <RegionEU868RxConfig+0x190>)
 801805a:	5cd3      	ldrb	r3, [r2, r3]
 801805c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801805e:	4b3e      	ldr	r3, [pc, #248]	@ (8018158 <RegionEU868RxConfig+0x188>)
 8018060:	68db      	ldr	r3, [r3, #12]
 8018062:	6938      	ldr	r0, [r7, #16]
 8018064:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801806a:	2b07      	cmp	r3, #7
 801806c:	d128      	bne.n	80180c0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801806e:	2300      	movs	r3, #0
 8018070:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018072:	4b39      	ldr	r3, [pc, #228]	@ (8018158 <RegionEU868RxConfig+0x188>)
 8018074:	699c      	ldr	r4, [r3, #24]
 8018076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801807a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801807e:	fb02 f303 	mul.w	r3, r2, r3
 8018082:	4619      	mov	r1, r3
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	689b      	ldr	r3, [r3, #8]
 8018088:	b29b      	uxth	r3, r3
 801808a:	687a      	ldr	r2, [r7, #4]
 801808c:	7c92      	ldrb	r2, [r2, #18]
 801808e:	7df8      	ldrb	r0, [r7, #23]
 8018090:	9209      	str	r2, [sp, #36]	@ 0x24
 8018092:	2200      	movs	r2, #0
 8018094:	9208      	str	r2, [sp, #32]
 8018096:	2200      	movs	r2, #0
 8018098:	9207      	str	r2, [sp, #28]
 801809a:	2200      	movs	r2, #0
 801809c:	9206      	str	r2, [sp, #24]
 801809e:	2201      	movs	r2, #1
 80180a0:	9205      	str	r2, [sp, #20]
 80180a2:	2200      	movs	r2, #0
 80180a4:	9204      	str	r2, [sp, #16]
 80180a6:	2200      	movs	r2, #0
 80180a8:	9203      	str	r2, [sp, #12]
 80180aa:	9302      	str	r3, [sp, #8]
 80180ac:	2305      	movs	r3, #5
 80180ae:	9301      	str	r3, [sp, #4]
 80180b0:	4b2c      	ldr	r3, [pc, #176]	@ (8018164 <RegionEU868RxConfig+0x194>)
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	2300      	movs	r3, #0
 80180b6:	460a      	mov	r2, r1
 80180b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80180bc:	47a0      	blx	r4
 80180be:	e024      	b.n	801810a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80180c0:	2301      	movs	r3, #1
 80180c2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80180c4:	4b24      	ldr	r3, [pc, #144]	@ (8018158 <RegionEU868RxConfig+0x188>)
 80180c6:	699c      	ldr	r4, [r3, #24]
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	789b      	ldrb	r3, [r3, #2]
 80180cc:	461d      	mov	r5, r3
 80180ce:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	689b      	ldr	r3, [r3, #8]
 80180d6:	b29b      	uxth	r3, r3
 80180d8:	687a      	ldr	r2, [r7, #4]
 80180da:	7c92      	ldrb	r2, [r2, #18]
 80180dc:	7df8      	ldrb	r0, [r7, #23]
 80180de:	9209      	str	r2, [sp, #36]	@ 0x24
 80180e0:	2201      	movs	r2, #1
 80180e2:	9208      	str	r2, [sp, #32]
 80180e4:	2200      	movs	r2, #0
 80180e6:	9207      	str	r2, [sp, #28]
 80180e8:	2200      	movs	r2, #0
 80180ea:	9206      	str	r2, [sp, #24]
 80180ec:	2200      	movs	r2, #0
 80180ee:	9205      	str	r2, [sp, #20]
 80180f0:	2200      	movs	r2, #0
 80180f2:	9204      	str	r2, [sp, #16]
 80180f4:	2200      	movs	r2, #0
 80180f6:	9203      	str	r2, [sp, #12]
 80180f8:	9302      	str	r3, [sp, #8]
 80180fa:	2308      	movs	r3, #8
 80180fc:	9301      	str	r3, [sp, #4]
 80180fe:	2300      	movs	r3, #0
 8018100:	9300      	str	r3, [sp, #0]
 8018102:	2301      	movs	r3, #1
 8018104:	460a      	mov	r2, r1
 8018106:	4629      	mov	r1, r5
 8018108:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	7c5b      	ldrb	r3, [r3, #17]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d005      	beq.n	801811e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018116:	4a14      	ldr	r2, [pc, #80]	@ (8018168 <RegionEU868RxConfig+0x198>)
 8018118:	5cd3      	ldrb	r3, [r2, r3]
 801811a:	75bb      	strb	r3, [r7, #22]
 801811c:	e004      	b.n	8018128 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801811e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018122:	4a12      	ldr	r2, [pc, #72]	@ (801816c <RegionEU868RxConfig+0x19c>)
 8018124:	5cd3      	ldrb	r3, [r2, r3]
 8018126:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018128:	4b0b      	ldr	r3, [pc, #44]	@ (8018158 <RegionEU868RxConfig+0x188>)
 801812a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801812c:	7dba      	ldrb	r2, [r7, #22]
 801812e:	320d      	adds	r2, #13
 8018130:	b2d1      	uxtb	r1, r2
 8018132:	7dfa      	ldrb	r2, [r7, #23]
 8018134:	4610      	mov	r0, r2
 8018136:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	7cdb      	ldrb	r3, [r3, #19]
 801813c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018140:	6939      	ldr	r1, [r7, #16]
 8018142:	4618      	mov	r0, r3
 8018144:	f7ff fab0 	bl	80176a8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018148:	683b      	ldr	r3, [r7, #0]
 801814a:	7bfa      	ldrb	r2, [r7, #15]
 801814c:	701a      	strb	r2, [r3, #0]
    return true;
 801814e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018150:	4618      	mov	r0, r3
 8018152:	3718      	adds	r7, #24
 8018154:	46bd      	mov	sp, r7
 8018156:	bdb0      	pop	{r4, r5, r7, pc}
 8018158:	0801e614 	.word	0x0801e614
 801815c:	20001a6c 	.word	0x20001a6c
 8018160:	0801e5dc 	.word	0x0801e5dc
 8018164:	00014585 	.word	0x00014585
 8018168:	0801e60c 	.word	0x0801e60c
 801816c:	0801e604 	.word	0x0801e604

08018170 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018170:	b590      	push	{r4, r7, lr}
 8018172:	b093      	sub	sp, #76	@ 0x4c
 8018174:	af0a      	add	r7, sp, #40	@ 0x28
 8018176:	60f8      	str	r0, [r7, #12]
 8018178:	60b9      	str	r1, [r7, #8]
 801817a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018182:	461a      	mov	r2, r3
 8018184:	4b5d      	ldr	r3, [pc, #372]	@ (80182fc <RegionEU868TxConfig+0x18c>)
 8018186:	5c9b      	ldrb	r3, [r3, r2]
 8018188:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018190:	4b5b      	ldr	r3, [pc, #364]	@ (8018300 <RegionEU868TxConfig+0x190>)
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	4b5b      	ldr	r3, [pc, #364]	@ (8018304 <RegionEU868TxConfig+0x194>)
 8018196:	6819      	ldr	r1, [r3, #0]
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	781b      	ldrb	r3, [r3, #0]
 801819c:	461c      	mov	r4, r3
 801819e:	4623      	mov	r3, r4
 80181a0:	005b      	lsls	r3, r3, #1
 80181a2:	4423      	add	r3, r4
 80181a4:	009b      	lsls	r3, r3, #2
 80181a6:	440b      	add	r3, r1
 80181a8:	3309      	adds	r3, #9
 80181aa:	781b      	ldrb	r3, [r3, #0]
 80181ac:	4619      	mov	r1, r3
 80181ae:	460b      	mov	r3, r1
 80181b0:	005b      	lsls	r3, r3, #1
 80181b2:	440b      	add	r3, r1
 80181b4:	00db      	lsls	r3, r3, #3
 80181b6:	4413      	add	r3, r2
 80181b8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80181bc:	4619      	mov	r1, r3
 80181be:	f7ff fa40 	bl	8017642 <RegionCommonLimitTxPower>
 80181c2:	4603      	mov	r3, r0
 80181c4:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80181cc:	494e      	ldr	r1, [pc, #312]	@ (8018308 <RegionEU868TxConfig+0x198>)
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7ff fa4c 	bl	801766c <RegionCommonGetBandwidth>
 80181d4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80181d6:	2300      	movs	r3, #0
 80181d8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	6859      	ldr	r1, [r3, #4]
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	689a      	ldr	r2, [r3, #8]
 80181e2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80181e6:	4618      	mov	r0, r3
 80181e8:	f7ff f89c 	bl	8017324 <RegionCommonComputeTxPower>
 80181ec:	4603      	mov	r3, r0
 80181ee:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80181f0:	4b46      	ldr	r3, [pc, #280]	@ (801830c <RegionEU868TxConfig+0x19c>)
 80181f2:	68da      	ldr	r2, [r3, #12]
 80181f4:	4b43      	ldr	r3, [pc, #268]	@ (8018304 <RegionEU868TxConfig+0x194>)
 80181f6:	6819      	ldr	r1, [r3, #0]
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	781b      	ldrb	r3, [r3, #0]
 80181fc:	4618      	mov	r0, r3
 80181fe:	4603      	mov	r3, r0
 8018200:	005b      	lsls	r3, r3, #1
 8018202:	4403      	add	r3, r0
 8018204:	009b      	lsls	r3, r3, #2
 8018206:	440b      	add	r3, r1
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	4618      	mov	r0, r3
 801820c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018214:	2b07      	cmp	r3, #7
 8018216:	d124      	bne.n	8018262 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018218:	2300      	movs	r3, #0
 801821a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801821c:	4b3b      	ldr	r3, [pc, #236]	@ (801830c <RegionEU868TxConfig+0x19c>)
 801821e:	69dc      	ldr	r4, [r3, #28]
 8018220:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018224:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018228:	fb02 f303 	mul.w	r3, r2, r3
 801822c:	461a      	mov	r2, r3
 801822e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018232:	7ff8      	ldrb	r0, [r7, #31]
 8018234:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8018238:	9308      	str	r3, [sp, #32]
 801823a:	2300      	movs	r3, #0
 801823c:	9307      	str	r3, [sp, #28]
 801823e:	2300      	movs	r3, #0
 8018240:	9306      	str	r3, [sp, #24]
 8018242:	2300      	movs	r3, #0
 8018244:	9305      	str	r3, [sp, #20]
 8018246:	2301      	movs	r3, #1
 8018248:	9304      	str	r3, [sp, #16]
 801824a:	2300      	movs	r3, #0
 801824c:	9303      	str	r3, [sp, #12]
 801824e:	2305      	movs	r3, #5
 8018250:	9302      	str	r3, [sp, #8]
 8018252:	2300      	movs	r3, #0
 8018254:	9301      	str	r3, [sp, #4]
 8018256:	9200      	str	r2, [sp, #0]
 8018258:	69bb      	ldr	r3, [r7, #24]
 801825a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801825e:	47a0      	blx	r4
 8018260:	e01d      	b.n	801829e <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8018262:	2301      	movs	r3, #1
 8018264:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018266:	4b29      	ldr	r3, [pc, #164]	@ (801830c <RegionEU868TxConfig+0x19c>)
 8018268:	69dc      	ldr	r4, [r3, #28]
 801826a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801826e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018272:	7ff8      	ldrb	r0, [r7, #31]
 8018274:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8018278:	9208      	str	r2, [sp, #32]
 801827a:	2200      	movs	r2, #0
 801827c:	9207      	str	r2, [sp, #28]
 801827e:	2200      	movs	r2, #0
 8018280:	9206      	str	r2, [sp, #24]
 8018282:	2200      	movs	r2, #0
 8018284:	9205      	str	r2, [sp, #20]
 8018286:	2201      	movs	r2, #1
 8018288:	9204      	str	r2, [sp, #16]
 801828a:	2200      	movs	r2, #0
 801828c:	9203      	str	r2, [sp, #12]
 801828e:	2208      	movs	r2, #8
 8018290:	9202      	str	r2, [sp, #8]
 8018292:	2201      	movs	r2, #1
 8018294:	9201      	str	r2, [sp, #4]
 8018296:	9300      	str	r3, [sp, #0]
 8018298:	69bb      	ldr	r3, [r7, #24]
 801829a:	2200      	movs	r2, #0
 801829c:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801829e:	4b19      	ldr	r3, [pc, #100]	@ (8018304 <RegionEU868TxConfig+0x194>)
 80182a0:	681a      	ldr	r2, [r3, #0]
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	781b      	ldrb	r3, [r3, #0]
 80182a6:	4619      	mov	r1, r3
 80182a8:	460b      	mov	r3, r1
 80182aa:	005b      	lsls	r3, r3, #1
 80182ac:	440b      	add	r3, r1
 80182ae:	009b      	lsls	r3, r3, #2
 80182b0:	4413      	add	r3, r2
 80182b2:	681a      	ldr	r2, [r3, #0]
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182ba:	4619      	mov	r1, r3
 80182bc:	4610      	mov	r0, r2
 80182be:	f7ff fa25 	bl	801770c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	899b      	ldrh	r3, [r3, #12]
 80182cc:	4619      	mov	r1, r3
 80182ce:	4610      	mov	r0, r2
 80182d0:	f7ff faaa 	bl	8017828 <GetTimeOnAir>
 80182d4:	4602      	mov	r2, r0
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80182da:	4b0c      	ldr	r3, [pc, #48]	@ (801830c <RegionEU868TxConfig+0x19c>)
 80182dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80182de:	68fa      	ldr	r2, [r7, #12]
 80182e0:	8992      	ldrh	r2, [r2, #12]
 80182e2:	b2d1      	uxtb	r1, r2
 80182e4:	7ffa      	ldrb	r2, [r7, #31]
 80182e6:	4610      	mov	r0, r2
 80182e8:	4798      	blx	r3

    *txPower = txPowerLimited;
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	7f7a      	ldrb	r2, [r7, #29]
 80182ee:	701a      	strb	r2, [r3, #0]
    return true;
 80182f0:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3724      	adds	r7, #36	@ 0x24
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd90      	pop	{r4, r7, pc}
 80182fa:	bf00      	nop
 80182fc:	0801e5dc 	.word	0x0801e5dc
 8018300:	20001a70 	.word	0x20001a70
 8018304:	20001a6c 	.word	0x20001a6c
 8018308:	0801e5e4 	.word	0x0801e5e4
 801830c:	0801e614 	.word	0x0801e614

08018310 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018310:	b590      	push	{r4, r7, lr}
 8018312:	b093      	sub	sp, #76	@ 0x4c
 8018314:	af00      	add	r7, sp, #0
 8018316:	60f8      	str	r0, [r7, #12]
 8018318:	60b9      	str	r1, [r7, #8]
 801831a:	607a      	str	r2, [r7, #4]
 801831c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801831e:	2307      	movs	r3, #7
 8018320:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018324:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018328:	2200      	movs	r2, #0
 801832a:	601a      	str	r2, [r3, #0]
 801832c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801832e:	2300      	movs	r3, #0
 8018330:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8018334:	2300      	movs	r3, #0
 8018336:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801833a:	2300      	movs	r3, #0
 801833c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801833e:	e085      	b.n	801844c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	685a      	ldr	r2, [r3, #4]
 8018344:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8018348:	4413      	add	r3, r2
 801834a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801834e:	4611      	mov	r1, r2
 8018350:	4618      	mov	r0, r3
 8018352:	f7fe fe2f 	bl	8016fb4 <RegionCommonParseLinkAdrReq>
 8018356:	4603      	mov	r3, r0
 8018358:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801835c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018360:	2b00      	cmp	r3, #0
 8018362:	d07b      	beq.n	801845c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018364:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018368:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801836c:	4413      	add	r3, r2
 801836e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018372:	2307      	movs	r3, #7
 8018374:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018378:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801837c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801837e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018382:	2b00      	cmp	r3, #0
 8018384:	d109      	bne.n	801839a <RegionEU868LinkAdrReq+0x8a>
 8018386:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018388:	2b00      	cmp	r3, #0
 801838a:	d106      	bne.n	801839a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801838c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018390:	f023 0301 	bic.w	r3, r3, #1
 8018394:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018398:	e058      	b.n	801844c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801839a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d003      	beq.n	80183aa <RegionEU868LinkAdrReq+0x9a>
 80183a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80183a6:	2b05      	cmp	r3, #5
 80183a8:	d903      	bls.n	80183b2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80183aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80183ae:	2b06      	cmp	r3, #6
 80183b0:	d906      	bls.n	80183c0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80183b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80183b6:	f023 0301 	bic.w	r3, r3, #1
 80183ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80183be:	e045      	b.n	801844c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80183c0:	2300      	movs	r3, #0
 80183c2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80183c6:	e03d      	b.n	8018444 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80183c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80183cc:	2b06      	cmp	r3, #6
 80183ce:	d118      	bne.n	8018402 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80183d0:	4b5f      	ldr	r3, [pc, #380]	@ (8018550 <RegionEU868LinkAdrReq+0x240>)
 80183d2:	6819      	ldr	r1, [r3, #0]
 80183d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80183d8:	4613      	mov	r3, r2
 80183da:	005b      	lsls	r3, r3, #1
 80183dc:	4413      	add	r3, r2
 80183de:	009b      	lsls	r3, r3, #2
 80183e0:	440b      	add	r3, r1
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d028      	beq.n	801843a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80183e8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80183ec:	2201      	movs	r2, #1
 80183ee:	fa02 f303 	lsl.w	r3, r2, r3
 80183f2:	b21a      	sxth	r2, r3
 80183f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80183f6:	b21b      	sxth	r3, r3
 80183f8:	4313      	orrs	r3, r2
 80183fa:	b21b      	sxth	r3, r3
 80183fc:	b29b      	uxth	r3, r3
 80183fe:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8018400:	e01b      	b.n	801843a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018402:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018404:	461a      	mov	r2, r3
 8018406:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801840a:	fa42 f303 	asr.w	r3, r2, r3
 801840e:	f003 0301 	and.w	r3, r3, #1
 8018412:	2b00      	cmp	r3, #0
 8018414:	d011      	beq.n	801843a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8018416:	4b4e      	ldr	r3, [pc, #312]	@ (8018550 <RegionEU868LinkAdrReq+0x240>)
 8018418:	6819      	ldr	r1, [r3, #0]
 801841a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801841e:	4613      	mov	r3, r2
 8018420:	005b      	lsls	r3, r3, #1
 8018422:	4413      	add	r3, r2
 8018424:	009b      	lsls	r3, r3, #2
 8018426:	440b      	add	r3, r1
 8018428:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801842a:	2b00      	cmp	r3, #0
 801842c:	d105      	bne.n	801843a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801842e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018432:	f023 0301 	bic.w	r3, r3, #1
 8018436:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801843a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801843e:	3301      	adds	r3, #1
 8018440:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8018444:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018448:	2b0f      	cmp	r3, #15
 801844a:	d9bd      	bls.n	80183c8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	7a1b      	ldrb	r3, [r3, #8]
 8018450:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018454:	429a      	cmp	r2, r3
 8018456:	f4ff af73 	bcc.w	8018340 <RegionEU868LinkAdrReq+0x30>
 801845a:	e000      	b.n	801845e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801845c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801845e:	2302      	movs	r3, #2
 8018460:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	7a5b      	ldrb	r3, [r3, #9]
 8018468:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801846c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018470:	4618      	mov	r0, r3
 8018472:	f7ff fa29 	bl	80178c8 <RegionEU868GetPhyParam>
 8018476:	4603      	mov	r3, r0
 8018478:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801847a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801847e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	7a9b      	ldrb	r3, [r3, #10]
 8018484:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018486:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801848a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801848c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8018490:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018492:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018496:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801849e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80184a6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	7b5b      	ldrb	r3, [r3, #13]
 80184ac:	b25b      	sxtb	r3, r3
 80184ae:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80184b0:	2310      	movs	r3, #16
 80184b2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80184b4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80184b8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80184ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184bc:	b25b      	sxtb	r3, r3
 80184be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80184c2:	2307      	movs	r3, #7
 80184c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80184c8:	4b21      	ldr	r3, [pc, #132]	@ (8018550 <RegionEU868LinkAdrReq+0x240>)
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80184ce:	2307      	movs	r3, #7
 80184d0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80184d4:	2300      	movs	r3, #0
 80184d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80184e0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80184e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80184e8:	1c9a      	adds	r2, r3, #2
 80184ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80184ee:	1c59      	adds	r1, r3, #1
 80184f0:	f107 0010 	add.w	r0, r7, #16
 80184f4:	4623      	mov	r3, r4
 80184f6:	f7fe fdae 	bl	8017056 <RegionCommonLinkAdrReqVerifyParams>
 80184fa:	4603      	mov	r3, r0
 80184fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018500:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018504:	2b07      	cmp	r3, #7
 8018506:	d10d      	bne.n	8018524 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8018508:	4b11      	ldr	r3, [pc, #68]	@ (8018550 <RegionEU868LinkAdrReq+0x240>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018510:	220c      	movs	r2, #12
 8018512:	2100      	movs	r1, #0
 8018514:	4618      	mov	r0, r3
 8018516:	f000 fb35 	bl	8018b84 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801851a:	4b0d      	ldr	r3, [pc, #52]	@ (8018550 <RegionEU868LinkAdrReq+0x240>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018520:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018524:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8018528:	68bb      	ldr	r3, [r7, #8]
 801852a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801852c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018534:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801853c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801853e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018542:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8018544:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8018548:	4618      	mov	r0, r3
 801854a:	374c      	adds	r7, #76	@ 0x4c
 801854c:	46bd      	mov	sp, r7
 801854e:	bd90      	pop	{r4, r7, pc}
 8018550:	20001a6c 	.word	0x20001a6c

08018554 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b084      	sub	sp, #16
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801855c:	2307      	movs	r3, #7
 801855e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018560:	2300      	movs	r3, #0
 8018562:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	685b      	ldr	r3, [r3, #4]
 8018568:	f107 020e 	add.w	r2, r7, #14
 801856c:	4611      	mov	r1, r2
 801856e:	4618      	mov	r0, r3
 8018570:	f7ff f8e4 	bl	801773c <VerifyRfFreq>
 8018574:	4603      	mov	r3, r0
 8018576:	f083 0301 	eor.w	r3, r3, #1
 801857a:	b2db      	uxtb	r3, r3
 801857c:	2b00      	cmp	r3, #0
 801857e:	d003      	beq.n	8018588 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8018580:	7bfb      	ldrb	r3, [r7, #15]
 8018582:	f023 0301 	bic.w	r3, r3, #1
 8018586:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f993 3000 	ldrsb.w	r3, [r3]
 801858e:	2207      	movs	r2, #7
 8018590:	2100      	movs	r1, #0
 8018592:	4618      	mov	r0, r3
 8018594:	f7fe fb71 	bl	8016c7a <RegionCommonValueInRange>
 8018598:	4603      	mov	r3, r0
 801859a:	2b00      	cmp	r3, #0
 801859c:	d103      	bne.n	80185a6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801859e:	7bfb      	ldrb	r3, [r7, #15]
 80185a0:	f023 0302 	bic.w	r3, r3, #2
 80185a4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80185ac:	2205      	movs	r2, #5
 80185ae:	2100      	movs	r1, #0
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7fe fb62 	bl	8016c7a <RegionCommonValueInRange>
 80185b6:	4603      	mov	r3, r0
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d103      	bne.n	80185c4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80185bc:	7bfb      	ldrb	r3, [r7, #15]
 80185be:	f023 0304 	bic.w	r3, r3, #4
 80185c2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80185c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3710      	adds	r7, #16
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}
	...

080185d0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b086      	sub	sp, #24
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80185d8:	2303      	movs	r3, #3
 80185da:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d114      	bne.n	8018610 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80185ec:	b2db      	uxtb	r3, r3
 80185ee:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80185f0:	f107 0308 	add.w	r3, r7, #8
 80185f4:	4618      	mov	r0, r3
 80185f6:	f000 f9ff 	bl	80189f8 <RegionEU868ChannelsRemove>
 80185fa:	4603      	mov	r3, r0
 80185fc:	f083 0301 	eor.w	r3, r3, #1
 8018600:	b2db      	uxtb	r3, r3
 8018602:	2b00      	cmp	r3, #0
 8018604:	d03b      	beq.n	801867e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8018606:	7dfb      	ldrb	r3, [r7, #23]
 8018608:	f023 0303 	bic.w	r3, r3, #3
 801860c:	75fb      	strb	r3, [r7, #23]
 801860e:	e036      	b.n	801867e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801861c:	b2db      	uxtb	r3, r3
 801861e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018620:	f107 030c 	add.w	r3, r7, #12
 8018624:	4618      	mov	r0, r3
 8018626:	f000 f945 	bl	80188b4 <RegionEU868ChannelAdd>
 801862a:	4603      	mov	r3, r0
 801862c:	2b06      	cmp	r3, #6
 801862e:	d820      	bhi.n	8018672 <RegionEU868NewChannelReq+0xa2>
 8018630:	a201      	add	r2, pc, #4	@ (adr r2, 8018638 <RegionEU868NewChannelReq+0x68>)
 8018632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018636:	bf00      	nop
 8018638:	0801867d 	.word	0x0801867d
 801863c:	08018673 	.word	0x08018673
 8018640:	08018673 	.word	0x08018673
 8018644:	08018673 	.word	0x08018673
 8018648:	08018655 	.word	0x08018655
 801864c:	0801865f 	.word	0x0801865f
 8018650:	08018669 	.word	0x08018669
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018654:	7dfb      	ldrb	r3, [r7, #23]
 8018656:	f023 0301 	bic.w	r3, r3, #1
 801865a:	75fb      	strb	r3, [r7, #23]
                break;
 801865c:	e00f      	b.n	801867e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801865e:	7dfb      	ldrb	r3, [r7, #23]
 8018660:	f023 0302 	bic.w	r3, r3, #2
 8018664:	75fb      	strb	r3, [r7, #23]
                break;
 8018666:	e00a      	b.n	801867e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018668:	7dfb      	ldrb	r3, [r7, #23]
 801866a:	f023 0303 	bic.w	r3, r3, #3
 801866e:	75fb      	strb	r3, [r7, #23]
                break;
 8018670:	e005      	b.n	801867e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8018672:	7dfb      	ldrb	r3, [r7, #23]
 8018674:	f023 0303 	bic.w	r3, r3, #3
 8018678:	75fb      	strb	r3, [r7, #23]
                break;
 801867a:	e000      	b.n	801867e <RegionEU868NewChannelReq+0xae>
                break;
 801867c:	bf00      	nop
            }
        }
    }

    return status;
 801867e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018682:	4618      	mov	r0, r3
 8018684:	3718      	adds	r7, #24
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
 801868a:	bf00      	nop

0801868c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801868c:	b480      	push	{r7}
 801868e:	b083      	sub	sp, #12
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018698:	4618      	mov	r0, r3
 801869a:	370c      	adds	r7, #12
 801869c:	46bd      	mov	sp, r7
 801869e:	bc80      	pop	{r7}
 80186a0:	4770      	bx	lr
	...

080186a4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b084      	sub	sp, #16
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80186ac:	2303      	movs	r3, #3
 80186ae:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80186b0:	2300      	movs	r3, #0
 80186b2:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	781b      	ldrb	r3, [r3, #0]
 80186b8:	2b0f      	cmp	r3, #15
 80186ba:	d901      	bls.n	80186c0 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80186bc:	2300      	movs	r3, #0
 80186be:	e035      	b.n	801872c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	685b      	ldr	r3, [r3, #4]
 80186c4:	f107 020e 	add.w	r2, r7, #14
 80186c8:	4611      	mov	r1, r2
 80186ca:	4618      	mov	r0, r3
 80186cc:	f7ff f836 	bl	801773c <VerifyRfFreq>
 80186d0:	4603      	mov	r3, r0
 80186d2:	f083 0301 	eor.w	r3, r3, #1
 80186d6:	b2db      	uxtb	r3, r3
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d003      	beq.n	80186e4 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80186dc:	7bfb      	ldrb	r3, [r7, #15]
 80186de:	f023 0301 	bic.w	r3, r3, #1
 80186e2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80186e4:	4b13      	ldr	r3, [pc, #76]	@ (8018734 <RegionEU868DlChannelReq+0x90>)
 80186e6:	681a      	ldr	r2, [r3, #0]
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	4619      	mov	r1, r3
 80186ee:	460b      	mov	r3, r1
 80186f0:	005b      	lsls	r3, r3, #1
 80186f2:	440b      	add	r3, r1
 80186f4:	009b      	lsls	r3, r3, #2
 80186f6:	4413      	add	r3, r2
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d103      	bne.n	8018706 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80186fe:	7bfb      	ldrb	r3, [r7, #15]
 8018700:	f023 0302 	bic.w	r3, r3, #2
 8018704:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018706:	7bfb      	ldrb	r3, [r7, #15]
 8018708:	2b03      	cmp	r3, #3
 801870a:	d10d      	bne.n	8018728 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801870c:	4b09      	ldr	r3, [pc, #36]	@ (8018734 <RegionEU868DlChannelReq+0x90>)
 801870e:	6819      	ldr	r1, [r3, #0]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	781b      	ldrb	r3, [r3, #0]
 8018714:	4618      	mov	r0, r3
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	685a      	ldr	r2, [r3, #4]
 801871a:	4603      	mov	r3, r0
 801871c:	005b      	lsls	r3, r3, #1
 801871e:	4403      	add	r3, r0
 8018720:	009b      	lsls	r3, r3, #2
 8018722:	440b      	add	r3, r1
 8018724:	3304      	adds	r3, #4
 8018726:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801872c:	4618      	mov	r0, r3
 801872e:	3710      	adds	r7, #16
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}
 8018734:	20001a6c 	.word	0x20001a6c

08018738 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018738:	b480      	push	{r7}
 801873a:	b083      	sub	sp, #12
 801873c:	af00      	add	r7, sp, #0
 801873e:	4603      	mov	r3, r0
 8018740:	460a      	mov	r2, r1
 8018742:	71fb      	strb	r3, [r7, #7]
 8018744:	4613      	mov	r3, r2
 8018746:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018748:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801874c:	4618      	mov	r0, r3
 801874e:	370c      	adds	r7, #12
 8018750:	46bd      	mov	sp, r7
 8018752:	bc80      	pop	{r7}
 8018754:	4770      	bx	lr
	...

08018758 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b09a      	sub	sp, #104	@ 0x68
 801875c:	af02      	add	r7, sp, #8
 801875e:	60f8      	str	r0, [r7, #12]
 8018760:	60b9      	str	r1, [r7, #8]
 8018762:	607a      	str	r2, [r7, #4]
 8018764:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8018766:	2300      	movs	r3, #0
 8018768:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 801876c:	2300      	movs	r3, #0
 801876e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018772:	2300      	movs	r3, #0
 8018774:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018776:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801877a:	2200      	movs	r2, #0
 801877c:	601a      	str	r2, [r3, #0]
 801877e:	605a      	str	r2, [r3, #4]
 8018780:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018782:	230c      	movs	r3, #12
 8018784:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8018788:	2307      	movs	r3, #7
 801878a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801878c:	4b47      	ldr	r3, [pc, #284]	@ (80188ac <RegionEU868NextChannel+0x154>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018794:	2201      	movs	r2, #1
 8018796:	2100      	movs	r1, #0
 8018798:	4618      	mov	r0, r3
 801879a:	f7fe fabf 	bl	8016d1c <RegionCommonCountChannels>
 801879e:	4603      	mov	r3, r0
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d10a      	bne.n	80187ba <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80187a4:	4b41      	ldr	r3, [pc, #260]	@ (80188ac <RegionEU868NextChannel+0x154>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80187ac:	4b3f      	ldr	r3, [pc, #252]	@ (80188ac <RegionEU868NextChannel+0x154>)
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	f042 0207 	orr.w	r2, r2, #7
 80187b4:	b292      	uxth	r2, r2
 80187b6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	7a5b      	ldrb	r3, [r3, #9]
 80187be:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80187ca:	4b38      	ldr	r3, [pc, #224]	@ (80188ac <RegionEU868NextChannel+0x154>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80187d2:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80187d4:	4b35      	ldr	r3, [pc, #212]	@ (80188ac <RegionEU868NextChannel+0x154>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 80187da:	4b35      	ldr	r3, [pc, #212]	@ (80188b0 <RegionEU868NextChannel+0x158>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80187e0:	2310      	movs	r3, #16
 80187e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80187e4:	f107 0312 	add.w	r3, r7, #18
 80187e8:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	685b      	ldr	r3, [r3, #4]
 80187f4:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	7a9b      	ldrb	r3, [r3, #10]
 80187fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80187fe:	2306      	movs	r3, #6
 8018800:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018804:	68fa      	ldr	r2, [r7, #12]
 8018806:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801880a:	320c      	adds	r2, #12
 801880c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018810:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	7d1b      	ldrb	r3, [r3, #20]
 8018818:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	8adb      	ldrh	r3, [r3, #22]
 8018826:	4619      	mov	r1, r3
 8018828:	4610      	mov	r0, r2
 801882a:	f7fe fffd 	bl	8017828 <GetTimeOnAir>
 801882e:	4603      	mov	r3, r0
 8018830:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018832:	f107 0314 	add.w	r3, r7, #20
 8018836:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018838:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 801883c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8018840:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	9301      	str	r3, [sp, #4]
 8018848:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 801884c:	9300      	str	r3, [sp, #0]
 801884e:	460b      	mov	r3, r1
 8018850:	6839      	ldr	r1, [r7, #0]
 8018852:	f7fe fe56 	bl	8017502 <RegionCommonIdentifyChannels>
 8018856:	4603      	mov	r3, r0
 8018858:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801885c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018860:	2b00      	cmp	r3, #0
 8018862:	d10e      	bne.n	8018882 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018864:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8018868:	3b01      	subs	r3, #1
 801886a:	4619      	mov	r1, r3
 801886c:	2000      	movs	r0, #0
 801886e:	f000 f937 	bl	8018ae0 <randr>
 8018872:	4603      	mov	r3, r0
 8018874:	3360      	adds	r3, #96	@ 0x60
 8018876:	443b      	add	r3, r7
 8018878:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	701a      	strb	r2, [r3, #0]
 8018880:	e00e      	b.n	80188a0 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018882:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018886:	2b0c      	cmp	r3, #12
 8018888:	d10a      	bne.n	80188a0 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801888a:	4b08      	ldr	r3, [pc, #32]	@ (80188ac <RegionEU868NextChannel+0x154>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8018892:	4b06      	ldr	r3, [pc, #24]	@ (80188ac <RegionEU868NextChannel+0x154>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	f042 0207 	orr.w	r2, r2, #7
 801889a:	b292      	uxth	r2, r2
 801889c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 80188a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80188a4:	4618      	mov	r0, r3
 80188a6:	3760      	adds	r7, #96	@ 0x60
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	20001a6c 	.word	0x20001a6c
 80188b0:	20001a70 	.word	0x20001a70

080188b4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b084      	sub	sp, #16
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80188bc:	2300      	movs	r3, #0
 80188be:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80188c0:	2300      	movs	r3, #0
 80188c2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80188c4:	2300      	movs	r3, #0
 80188c6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	791b      	ldrb	r3, [r3, #4]
 80188cc:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80188ce:	7b7b      	ldrb	r3, [r7, #13]
 80188d0:	2b02      	cmp	r3, #2
 80188d2:	d801      	bhi.n	80188d8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80188d4:	2306      	movs	r3, #6
 80188d6:	e089      	b.n	80189ec <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80188d8:	7b7b      	ldrb	r3, [r7, #13]
 80188da:	2b0f      	cmp	r3, #15
 80188dc:	d901      	bls.n	80188e2 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80188de:	2303      	movs	r3, #3
 80188e0:	e084      	b.n	80189ec <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	7a1b      	ldrb	r3, [r3, #8]
 80188e8:	f343 0303 	sbfx	r3, r3, #0, #4
 80188ec:	b25b      	sxtb	r3, r3
 80188ee:	2207      	movs	r2, #7
 80188f0:	2100      	movs	r1, #0
 80188f2:	4618      	mov	r0, r3
 80188f4:	f7fe f9c1 	bl	8016c7a <RegionCommonValueInRange>
 80188f8:	4603      	mov	r3, r0
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d101      	bne.n	8018902 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80188fe:	2301      	movs	r3, #1
 8018900:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	7a1b      	ldrb	r3, [r3, #8]
 8018908:	f343 1303 	sbfx	r3, r3, #4, #4
 801890c:	b25b      	sxtb	r3, r3
 801890e:	2207      	movs	r2, #7
 8018910:	2100      	movs	r1, #0
 8018912:	4618      	mov	r0, r3
 8018914:	f7fe f9b1 	bl	8016c7a <RegionCommonValueInRange>
 8018918:	4603      	mov	r3, r0
 801891a:	2b00      	cmp	r3, #0
 801891c:	d101      	bne.n	8018922 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801891e:	2301      	movs	r3, #1
 8018920:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	7a1b      	ldrb	r3, [r3, #8]
 8018928:	f343 0303 	sbfx	r3, r3, #0, #4
 801892c:	b25a      	sxtb	r2, r3
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	7a1b      	ldrb	r3, [r3, #8]
 8018934:	f343 1303 	sbfx	r3, r3, #4, #4
 8018938:	b25b      	sxtb	r3, r3
 801893a:	429a      	cmp	r2, r3
 801893c:	dd01      	ble.n	8018942 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801893e:	2301      	movs	r3, #1
 8018940:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8018942:	7bbb      	ldrb	r3, [r7, #14]
 8018944:	f083 0301 	eor.w	r3, r3, #1
 8018948:	b2db      	uxtb	r3, r3
 801894a:	2b00      	cmp	r3, #0
 801894c:	d010      	beq.n	8018970 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	f107 020c 	add.w	r2, r7, #12
 8018958:	4611      	mov	r1, r2
 801895a:	4618      	mov	r0, r3
 801895c:	f7fe feee 	bl	801773c <VerifyRfFreq>
 8018960:	4603      	mov	r3, r0
 8018962:	f083 0301 	eor.w	r3, r3, #1
 8018966:	b2db      	uxtb	r3, r3
 8018968:	2b00      	cmp	r3, #0
 801896a:	d001      	beq.n	8018970 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801896c:	2301      	movs	r3, #1
 801896e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018970:	7bfb      	ldrb	r3, [r7, #15]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d004      	beq.n	8018980 <RegionEU868ChannelAdd+0xcc>
 8018976:	7bbb      	ldrb	r3, [r7, #14]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d001      	beq.n	8018980 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801897c:	2306      	movs	r3, #6
 801897e:	e035      	b.n	80189ec <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8018980:	7bfb      	ldrb	r3, [r7, #15]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d001      	beq.n	801898a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018986:	2305      	movs	r3, #5
 8018988:	e030      	b.n	80189ec <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801898a:	7bbb      	ldrb	r3, [r7, #14]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d001      	beq.n	8018994 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018990:	2304      	movs	r3, #4
 8018992:	e02b      	b.n	80189ec <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8018994:	4b17      	ldr	r3, [pc, #92]	@ (80189f4 <RegionEU868ChannelAdd+0x140>)
 8018996:	6819      	ldr	r1, [r3, #0]
 8018998:	7b7a      	ldrb	r2, [r7, #13]
 801899a:	4613      	mov	r3, r2
 801899c:	005b      	lsls	r3, r3, #1
 801899e:	4413      	add	r3, r2
 80189a0:	009b      	lsls	r3, r3, #2
 80189a2:	18c8      	adds	r0, r1, r3
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	220c      	movs	r2, #12
 80189aa:	4619      	mov	r1, r3
 80189ac:	f000 f8af 	bl	8018b0e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80189b0:	4b10      	ldr	r3, [pc, #64]	@ (80189f4 <RegionEU868ChannelAdd+0x140>)
 80189b2:	6819      	ldr	r1, [r3, #0]
 80189b4:	7b7a      	ldrb	r2, [r7, #13]
 80189b6:	7b38      	ldrb	r0, [r7, #12]
 80189b8:	4613      	mov	r3, r2
 80189ba:	005b      	lsls	r3, r3, #1
 80189bc:	4413      	add	r3, r2
 80189be:	009b      	lsls	r3, r3, #2
 80189c0:	440b      	add	r3, r1
 80189c2:	3309      	adds	r3, #9
 80189c4:	4602      	mov	r2, r0
 80189c6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80189c8:	4b0a      	ldr	r3, [pc, #40]	@ (80189f4 <RegionEU868ChannelAdd+0x140>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80189d0:	b21a      	sxth	r2, r3
 80189d2:	7b7b      	ldrb	r3, [r7, #13]
 80189d4:	2101      	movs	r1, #1
 80189d6:	fa01 f303 	lsl.w	r3, r1, r3
 80189da:	b21b      	sxth	r3, r3
 80189dc:	4313      	orrs	r3, r2
 80189de:	b21a      	sxth	r2, r3
 80189e0:	4b04      	ldr	r3, [pc, #16]	@ (80189f4 <RegionEU868ChannelAdd+0x140>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	b292      	uxth	r2, r2
 80189e6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80189ea:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80189ec:	4618      	mov	r0, r3
 80189ee:	3710      	adds	r7, #16
 80189f0:	46bd      	mov	sp, r7
 80189f2:	bd80      	pop	{r7, pc}
 80189f4:	20001a6c 	.word	0x20001a6c

080189f8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b086      	sub	sp, #24
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	781b      	ldrb	r3, [r3, #0]
 8018a04:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018a06:	7dfb      	ldrb	r3, [r7, #23]
 8018a08:	2b02      	cmp	r3, #2
 8018a0a:	d801      	bhi.n	8018a10 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	e016      	b.n	8018a3e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018a10:	4b0d      	ldr	r3, [pc, #52]	@ (8018a48 <RegionEU868ChannelsRemove+0x50>)
 8018a12:	6819      	ldr	r1, [r3, #0]
 8018a14:	7dfa      	ldrb	r2, [r7, #23]
 8018a16:	4613      	mov	r3, r2
 8018a18:	005b      	lsls	r3, r3, #1
 8018a1a:	4413      	add	r3, r2
 8018a1c:	009b      	lsls	r3, r3, #2
 8018a1e:	440b      	add	r3, r1
 8018a20:	461a      	mov	r2, r3
 8018a22:	2300      	movs	r3, #0
 8018a24:	6013      	str	r3, [r2, #0]
 8018a26:	6053      	str	r3, [r2, #4]
 8018a28:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018a2a:	4b07      	ldr	r3, [pc, #28]	@ (8018a48 <RegionEU868ChannelsRemove+0x50>)
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018a32:	7df9      	ldrb	r1, [r7, #23]
 8018a34:	2210      	movs	r2, #16
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7fe f93c 	bl	8016cb4 <RegionCommonChanDisable>
 8018a3c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8018a3e:	4618      	mov	r0, r3
 8018a40:	3718      	adds	r7, #24
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}
 8018a46:	bf00      	nop
 8018a48:	20001a6c 	.word	0x20001a6c

08018a4c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018a4c:	b480      	push	{r7}
 8018a4e:	b085      	sub	sp, #20
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	4603      	mov	r3, r0
 8018a54:	71fb      	strb	r3, [r7, #7]
 8018a56:	460b      	mov	r3, r1
 8018a58:	71bb      	strb	r3, [r7, #6]
 8018a5a:	4613      	mov	r3, r2
 8018a5c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8018a5e:	79ba      	ldrb	r2, [r7, #6]
 8018a60:	797b      	ldrb	r3, [r7, #5]
 8018a62:	1ad3      	subs	r3, r2, r3
 8018a64:	b2db      	uxtb	r3, r3
 8018a66:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	da01      	bge.n	8018a74 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018a70:	2300      	movs	r3, #0
 8018a72:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018a74:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018a76:	4618      	mov	r0, r3
 8018a78:	3714      	adds	r7, #20
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bc80      	pop	{r7}
 8018a7e:	4770      	bx	lr

08018a80 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018a80:	b480      	push	{r7}
 8018a82:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018a84:	4b0d      	ldr	r3, [pc, #52]	@ (8018abc <rand1+0x3c>)
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	4a0d      	ldr	r2, [pc, #52]	@ (8018ac0 <rand1+0x40>)
 8018a8a:	fb02 f303 	mul.w	r3, r2, r3
 8018a8e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018a92:	3339      	adds	r3, #57	@ 0x39
 8018a94:	4a09      	ldr	r2, [pc, #36]	@ (8018abc <rand1+0x3c>)
 8018a96:	6013      	str	r3, [r2, #0]
 8018a98:	4b08      	ldr	r3, [pc, #32]	@ (8018abc <rand1+0x3c>)
 8018a9a:	681a      	ldr	r2, [r3, #0]
 8018a9c:	2303      	movs	r3, #3
 8018a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8018aa2:	1ad1      	subs	r1, r2, r3
 8018aa4:	0849      	lsrs	r1, r1, #1
 8018aa6:	440b      	add	r3, r1
 8018aa8:	0f99      	lsrs	r1, r3, #30
 8018aaa:	460b      	mov	r3, r1
 8018aac:	07db      	lsls	r3, r3, #31
 8018aae:	1a5b      	subs	r3, r3, r1
 8018ab0:	1ad1      	subs	r1, r2, r3
 8018ab2:	460b      	mov	r3, r1
}
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bc80      	pop	{r7}
 8018aba:	4770      	bx	lr
 8018abc:	20000134 	.word	0x20000134
 8018ac0:	41c64e6d 	.word	0x41c64e6d

08018ac4 <srand1>:

void srand1( uint32_t seed )
{
 8018ac4:	b480      	push	{r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
    next = seed;
 8018acc:	4a03      	ldr	r2, [pc, #12]	@ (8018adc <srand1+0x18>)
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	6013      	str	r3, [r2, #0]
}
 8018ad2:	bf00      	nop
 8018ad4:	370c      	adds	r7, #12
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bc80      	pop	{r7}
 8018ada:	4770      	bx	lr
 8018adc:	20000134 	.word	0x20000134

08018ae0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b082      	sub	sp, #8
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	6078      	str	r0, [r7, #4]
 8018ae8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018aea:	f7ff ffc9 	bl	8018a80 <rand1>
 8018aee:	4602      	mov	r2, r0
 8018af0:	6839      	ldr	r1, [r7, #0]
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	1acb      	subs	r3, r1, r3
 8018af6:	3301      	adds	r3, #1
 8018af8:	fb92 f1f3 	sdiv	r1, r2, r3
 8018afc:	fb01 f303 	mul.w	r3, r1, r3
 8018b00:	1ad2      	subs	r2, r2, r3
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	4413      	add	r3, r2
}
 8018b06:	4618      	mov	r0, r3
 8018b08:	3708      	adds	r7, #8
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	bd80      	pop	{r7, pc}

08018b0e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018b0e:	b480      	push	{r7}
 8018b10:	b085      	sub	sp, #20
 8018b12:	af00      	add	r7, sp, #0
 8018b14:	60f8      	str	r0, [r7, #12]
 8018b16:	60b9      	str	r1, [r7, #8]
 8018b18:	4613      	mov	r3, r2
 8018b1a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018b1c:	e007      	b.n	8018b2e <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018b1e:	68ba      	ldr	r2, [r7, #8]
 8018b20:	1c53      	adds	r3, r2, #1
 8018b22:	60bb      	str	r3, [r7, #8]
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	1c59      	adds	r1, r3, #1
 8018b28:	60f9      	str	r1, [r7, #12]
 8018b2a:	7812      	ldrb	r2, [r2, #0]
 8018b2c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018b2e:	88fb      	ldrh	r3, [r7, #6]
 8018b30:	1e5a      	subs	r2, r3, #1
 8018b32:	80fa      	strh	r2, [r7, #6]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d1f2      	bne.n	8018b1e <memcpy1+0x10>
    }
}
 8018b38:	bf00      	nop
 8018b3a:	bf00      	nop
 8018b3c:	3714      	adds	r7, #20
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bc80      	pop	{r7}
 8018b42:	4770      	bx	lr

08018b44 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018b44:	b480      	push	{r7}
 8018b46:	b085      	sub	sp, #20
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	60f8      	str	r0, [r7, #12]
 8018b4c:	60b9      	str	r1, [r7, #8]
 8018b4e:	4613      	mov	r3, r2
 8018b50:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018b52:	88fb      	ldrh	r3, [r7, #6]
 8018b54:	3b01      	subs	r3, #1
 8018b56:	68fa      	ldr	r2, [r7, #12]
 8018b58:	4413      	add	r3, r2
 8018b5a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018b5c:	e007      	b.n	8018b6e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018b5e:	68ba      	ldr	r2, [r7, #8]
 8018b60:	1c53      	adds	r3, r2, #1
 8018b62:	60bb      	str	r3, [r7, #8]
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	1e59      	subs	r1, r3, #1
 8018b68:	60f9      	str	r1, [r7, #12]
 8018b6a:	7812      	ldrb	r2, [r2, #0]
 8018b6c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018b6e:	88fb      	ldrh	r3, [r7, #6]
 8018b70:	1e5a      	subs	r2, r3, #1
 8018b72:	80fa      	strh	r2, [r7, #6]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d1f2      	bne.n	8018b5e <memcpyr+0x1a>
    }
}
 8018b78:	bf00      	nop
 8018b7a:	bf00      	nop
 8018b7c:	3714      	adds	r7, #20
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bc80      	pop	{r7}
 8018b82:	4770      	bx	lr

08018b84 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	460b      	mov	r3, r1
 8018b8e:	70fb      	strb	r3, [r7, #3]
 8018b90:	4613      	mov	r3, r2
 8018b92:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018b94:	e004      	b.n	8018ba0 <memset1+0x1c>
    {
        *dst++ = value;
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	1c5a      	adds	r2, r3, #1
 8018b9a:	607a      	str	r2, [r7, #4]
 8018b9c:	78fa      	ldrb	r2, [r7, #3]
 8018b9e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ba0:	883b      	ldrh	r3, [r7, #0]
 8018ba2:	1e5a      	subs	r2, r3, #1
 8018ba4:	803a      	strh	r2, [r7, #0]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d1f5      	bne.n	8018b96 <memset1+0x12>
    }
}
 8018baa:	bf00      	nop
 8018bac:	bf00      	nop
 8018bae:	370c      	adds	r7, #12
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bc80      	pop	{r7}
 8018bb4:	4770      	bx	lr
	...

08018bb8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018bb8:	b480      	push	{r7}
 8018bba:	b085      	sub	sp, #20
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8018bc8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d101      	bne.n	8018bd4 <Crc32+0x1c>
    {
        return 0;
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	e026      	b.n	8018c22 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	817b      	strh	r3, [r7, #10]
 8018bd8:	e01d      	b.n	8018c16 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018bda:	897b      	ldrh	r3, [r7, #10]
 8018bdc:	687a      	ldr	r2, [r7, #4]
 8018bde:	4413      	add	r3, r2
 8018be0:	781b      	ldrb	r3, [r3, #0]
 8018be2:	461a      	mov	r2, r3
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	4053      	eors	r3, r2
 8018be8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018bea:	2300      	movs	r3, #0
 8018bec:	813b      	strh	r3, [r7, #8]
 8018bee:	e00c      	b.n	8018c0a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	085a      	lsrs	r2, r3, #1
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	f003 0301 	and.w	r3, r3, #1
 8018bfa:	425b      	negs	r3, r3
 8018bfc:	490b      	ldr	r1, [pc, #44]	@ (8018c2c <Crc32+0x74>)
 8018bfe:	400b      	ands	r3, r1
 8018c00:	4053      	eors	r3, r2
 8018c02:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018c04:	893b      	ldrh	r3, [r7, #8]
 8018c06:	3301      	adds	r3, #1
 8018c08:	813b      	strh	r3, [r7, #8]
 8018c0a:	893b      	ldrh	r3, [r7, #8]
 8018c0c:	2b07      	cmp	r3, #7
 8018c0e:	d9ef      	bls.n	8018bf0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018c10:	897b      	ldrh	r3, [r7, #10]
 8018c12:	3301      	adds	r3, #1
 8018c14:	817b      	strh	r3, [r7, #10]
 8018c16:	897a      	ldrh	r2, [r7, #10]
 8018c18:	887b      	ldrh	r3, [r7, #2]
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d3dd      	bcc.n	8018bda <Crc32+0x22>
        }
    }

    return ~crc;
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	43db      	mvns	r3, r3
}
 8018c22:	4618      	mov	r0, r3
 8018c24:	3714      	adds	r7, #20
 8018c26:	46bd      	mov	sp, r7
 8018c28:	bc80      	pop	{r7}
 8018c2a:	4770      	bx	lr
 8018c2c:	edb88320 	.word	0xedb88320

08018c30 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b084      	sub	sp, #16
 8018c34:	af02      	add	r7, sp, #8
 8018c36:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018c38:	4a24      	ldr	r2, [pc, #144]	@ (8018ccc <RadioInit+0x9c>)
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018c3e:	4b24      	ldr	r3, [pc, #144]	@ (8018cd0 <RadioInit+0xa0>)
 8018c40:	2200      	movs	r2, #0
 8018c42:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018c44:	4b22      	ldr	r3, [pc, #136]	@ (8018cd0 <RadioInit+0xa0>)
 8018c46:	2200      	movs	r2, #0
 8018c48:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018c4a:	4b21      	ldr	r3, [pc, #132]	@ (8018cd0 <RadioInit+0xa0>)
 8018c4c:	2200      	movs	r2, #0
 8018c4e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018c50:	4b1f      	ldr	r3, [pc, #124]	@ (8018cd0 <RadioInit+0xa0>)
 8018c52:	2200      	movs	r2, #0
 8018c54:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018c56:	481f      	ldr	r0, [pc, #124]	@ (8018cd4 <RadioInit+0xa4>)
 8018c58:	f001 ffc2 	bl	801abe0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8018cd0 <RadioInit+0xa0>)
 8018c5e:	2200      	movs	r2, #0
 8018c60:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018c62:	4b1b      	ldr	r3, [pc, #108]	@ (8018cd0 <RadioInit+0xa0>)
 8018c64:	2200      	movs	r2, #0
 8018c66:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018c68:	f002 fa56 	bl	801b118 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018c6c:	2100      	movs	r1, #0
 8018c6e:	2000      	movs	r0, #0
 8018c70:	f002 fe22 	bl	801b8b8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018c74:	2204      	movs	r2, #4
 8018c76:	2100      	movs	r1, #0
 8018c78:	2001      	movs	r0, #1
 8018c7a:	f002 fbdf 	bl	801b43c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018c7e:	2300      	movs	r3, #0
 8018c80:	2200      	movs	r2, #0
 8018c82:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018c86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018c8a:	f002 fb0f 	bl	801b2ac <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8018c8e:	f000 fe99 	bl	80199c4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018c92:	2300      	movs	r3, #0
 8018c94:	9300      	str	r3, [sp, #0]
 8018c96:	4b10      	ldr	r3, [pc, #64]	@ (8018cd8 <RadioInit+0xa8>)
 8018c98:	2200      	movs	r2, #0
 8018c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8018c9e:	480f      	ldr	r0, [pc, #60]	@ (8018cdc <RadioInit+0xac>)
 8018ca0:	f003 ffde 	bl	801cc60 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	9300      	str	r3, [sp, #0]
 8018ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8018ce0 <RadioInit+0xb0>)
 8018caa:	2200      	movs	r2, #0
 8018cac:	f04f 31ff 	mov.w	r1, #4294967295
 8018cb0:	480c      	ldr	r0, [pc, #48]	@ (8018ce4 <RadioInit+0xb4>)
 8018cb2:	f003 ffd5 	bl	801cc60 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018cb6:	4809      	ldr	r0, [pc, #36]	@ (8018cdc <RadioInit+0xac>)
 8018cb8:	f004 f876 	bl	801cda8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018cbc:	4809      	ldr	r0, [pc, #36]	@ (8018ce4 <RadioInit+0xb4>)
 8018cbe:	f004 f873 	bl	801cda8 <UTIL_TIMER_Stop>
}
 8018cc2:	bf00      	nop
 8018cc4:	3708      	adds	r7, #8
 8018cc6:	46bd      	mov	sp, r7
 8018cc8:	bd80      	pop	{r7, pc}
 8018cca:	bf00      	nop
 8018ccc:	20001b74 	.word	0x20001b74
 8018cd0:	20001b78 	.word	0x20001b78
 8018cd4:	08019db9 	.word	0x08019db9
 8018cd8:	08019d41 	.word	0x08019d41
 8018cdc:	20001bd4 	.word	0x20001bd4
 8018ce0:	08019d55 	.word	0x08019d55
 8018ce4:	20001bec 	.word	0x20001bec

08018ce8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018cec:	f001 ffc0 	bl	801ac70 <SUBGRF_GetOperatingMode>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	2b07      	cmp	r3, #7
 8018cf4:	d00a      	beq.n	8018d0c <RadioGetStatus+0x24>
 8018cf6:	2b07      	cmp	r3, #7
 8018cf8:	dc0a      	bgt.n	8018d10 <RadioGetStatus+0x28>
 8018cfa:	2b04      	cmp	r3, #4
 8018cfc:	d002      	beq.n	8018d04 <RadioGetStatus+0x1c>
 8018cfe:	2b05      	cmp	r3, #5
 8018d00:	d002      	beq.n	8018d08 <RadioGetStatus+0x20>
 8018d02:	e005      	b.n	8018d10 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018d04:	2302      	movs	r3, #2
 8018d06:	e004      	b.n	8018d12 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018d08:	2301      	movs	r3, #1
 8018d0a:	e002      	b.n	8018d12 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018d0c:	2303      	movs	r3, #3
 8018d0e:	e000      	b.n	8018d12 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018d10:	2300      	movs	r3, #0
    }
}
 8018d12:	4618      	mov	r0, r3
 8018d14:	bd80      	pop	{r7, pc}
	...

08018d18 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b082      	sub	sp, #8
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	4603      	mov	r3, r0
 8018d20:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018d22:	4a2a      	ldr	r2, [pc, #168]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d24:	79fb      	ldrb	r3, [r7, #7]
 8018d26:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018d28:	79fb      	ldrb	r3, [r7, #7]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f003 f9b1 	bl	801c092 <RFW_SetRadioModem>
    switch( modem )
 8018d30:	79fb      	ldrb	r3, [r7, #7]
 8018d32:	2b05      	cmp	r3, #5
 8018d34:	d80e      	bhi.n	8018d54 <RadioSetModem+0x3c>
 8018d36:	a201      	add	r2, pc, #4	@ (adr r2, 8018d3c <RadioSetModem+0x24>)
 8018d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d3c:	08018d63 	.word	0x08018d63
 8018d40:	08018d71 	.word	0x08018d71
 8018d44:	08018d55 	.word	0x08018d55
 8018d48:	08018d97 	.word	0x08018d97
 8018d4c:	08018da5 	.word	0x08018da5
 8018d50:	08018db3 	.word	0x08018db3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018d54:	2003      	movs	r0, #3
 8018d56:	f002 fb4b 	bl	801b3f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	735a      	strb	r2, [r3, #13]
        break;
 8018d60:	e02f      	b.n	8018dc2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018d62:	2000      	movs	r0, #0
 8018d64:	f002 fb44 	bl	801b3f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018d68:	4b18      	ldr	r3, [pc, #96]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	735a      	strb	r2, [r3, #13]
        break;
 8018d6e:	e028      	b.n	8018dc2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018d70:	2001      	movs	r0, #1
 8018d72:	f002 fb3d 	bl	801b3f0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018d76:	4b15      	ldr	r3, [pc, #84]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d78:	7b5a      	ldrb	r2, [r3, #13]
 8018d7a:	4b14      	ldr	r3, [pc, #80]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d7c:	7b1b      	ldrb	r3, [r3, #12]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d01e      	beq.n	8018dc0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018d82:	4b12      	ldr	r3, [pc, #72]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d84:	7b1a      	ldrb	r2, [r3, #12]
 8018d86:	4b11      	ldr	r3, [pc, #68]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d88:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018d8a:	4b10      	ldr	r3, [pc, #64]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d8c:	7b5b      	ldrb	r3, [r3, #13]
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f000 ffa0 	bl	8019cd4 <RadioSetPublicNetwork>
        }
        break;
 8018d94:	e014      	b.n	8018dc0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018d96:	2002      	movs	r0, #2
 8018d98:	f002 fb2a 	bl	801b3f0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8018dcc <RadioSetModem+0xb4>)
 8018d9e:	2200      	movs	r2, #0
 8018da0:	735a      	strb	r2, [r3, #13]
        break;
 8018da2:	e00e      	b.n	8018dc2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018da4:	2002      	movs	r0, #2
 8018da6:	f002 fb23 	bl	801b3f0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018daa:	4b08      	ldr	r3, [pc, #32]	@ (8018dcc <RadioSetModem+0xb4>)
 8018dac:	2200      	movs	r2, #0
 8018dae:	735a      	strb	r2, [r3, #13]
        break;
 8018db0:	e007      	b.n	8018dc2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018db2:	2000      	movs	r0, #0
 8018db4:	f002 fb1c 	bl	801b3f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018db8:	4b04      	ldr	r3, [pc, #16]	@ (8018dcc <RadioSetModem+0xb4>)
 8018dba:	2200      	movs	r2, #0
 8018dbc:	735a      	strb	r2, [r3, #13]
        break;
 8018dbe:	e000      	b.n	8018dc2 <RadioSetModem+0xaa>
        break;
 8018dc0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8018dc2:	bf00      	nop
 8018dc4:	3708      	adds	r7, #8
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	bd80      	pop	{r7, pc}
 8018dca:	bf00      	nop
 8018dcc:	20001b78 	.word	0x20001b78

08018dd0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018dd8:	6878      	ldr	r0, [r7, #4]
 8018dda:	f002 fac3 	bl	801b364 <SUBGRF_SetRfFrequency>
}
 8018dde:	bf00      	nop
 8018de0:	3708      	adds	r7, #8
 8018de2:	46bd      	mov	sp, r7
 8018de4:	bd80      	pop	{r7, pc}

08018de6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018de6:	b580      	push	{r7, lr}
 8018de8:	b090      	sub	sp, #64	@ 0x40
 8018dea:	af0a      	add	r7, sp, #40	@ 0x28
 8018dec:	60f8      	str	r0, [r7, #12]
 8018dee:	60b9      	str	r1, [r7, #8]
 8018df0:	603b      	str	r3, [r7, #0]
 8018df2:	4613      	mov	r3, r2
 8018df4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018df6:	2301      	movs	r3, #1
 8018df8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8018e02:	f000 fdf2 	bl	80199ea <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018e06:	2000      	movs	r0, #0
 8018e08:	f7ff ff86 	bl	8018d18 <RadioSetModem>

    RadioSetChannel( freq );
 8018e0c:	68f8      	ldr	r0, [r7, #12]
 8018e0e:	f7ff ffdf 	bl	8018dd0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018e12:	2301      	movs	r3, #1
 8018e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e16:	2300      	movs	r3, #0
 8018e18:	9308      	str	r3, [sp, #32]
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	9307      	str	r3, [sp, #28]
 8018e1e:	2300      	movs	r3, #0
 8018e20:	9306      	str	r3, [sp, #24]
 8018e22:	2300      	movs	r3, #0
 8018e24:	9305      	str	r3, [sp, #20]
 8018e26:	2300      	movs	r3, #0
 8018e28:	9304      	str	r3, [sp, #16]
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	9303      	str	r3, [sp, #12]
 8018e2e:	2300      	movs	r3, #0
 8018e30:	9302      	str	r3, [sp, #8]
 8018e32:	2303      	movs	r3, #3
 8018e34:	9301      	str	r3, [sp, #4]
 8018e36:	68bb      	ldr	r3, [r7, #8]
 8018e38:	9300      	str	r3, [sp, #0]
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8018e40:	68b9      	ldr	r1, [r7, #8]
 8018e42:	2000      	movs	r0, #0
 8018e44:	f000 f83c 	bl	8018ec0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018e48:	2000      	movs	r0, #0
 8018e4a:	f000 fdd5 	bl	80199f8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018e4e:	f000 ff6f 	bl	8019d30 <RadioGetWakeupTime>
 8018e52:	4603      	mov	r3, r0
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7e9 fd59 	bl	800290c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018e5a:	f004 f8bf 	bl	801cfdc <UTIL_TIMER_GetCurrentTime>
 8018e5e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018e60:	e00d      	b.n	8018e7e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018e62:	2000      	movs	r0, #0
 8018e64:	f000 feb6 	bl	8019bd4 <RadioRssi>
 8018e68:	4603      	mov	r3, r0
 8018e6a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018e6c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018e74:	429a      	cmp	r2, r3
 8018e76:	dd02      	ble.n	8018e7e <RadioIsChannelFree+0x98>
        {
            status = false;
 8018e78:	2300      	movs	r3, #0
 8018e7a:	75fb      	strb	r3, [r7, #23]
            break;
 8018e7c:	e006      	b.n	8018e8c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018e7e:	6938      	ldr	r0, [r7, #16]
 8018e80:	f004 f8be 	bl	801d000 <UTIL_TIMER_GetElapsedTime>
 8018e84:	4602      	mov	r2, r0
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	4293      	cmp	r3, r2
 8018e8a:	d8ea      	bhi.n	8018e62 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8018e8c:	f000 fdad 	bl	80199ea <RadioStandby>

    return status;
 8018e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8018e92:	4618      	mov	r0, r3
 8018e94:	3718      	adds	r7, #24
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}

08018e9a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018e9a:	b580      	push	{r7, lr}
 8018e9c:	b082      	sub	sp, #8
 8018e9e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	2200      	movs	r2, #0
 8018ea8:	2100      	movs	r1, #0
 8018eaa:	2000      	movs	r0, #0
 8018eac:	f002 f9fe 	bl	801b2ac <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018eb0:	f001 ffaf 	bl	801ae12 <SUBGRF_GetRandom>
 8018eb4:	6078      	str	r0, [r7, #4]

    return rnd;
 8018eb6:	687b      	ldr	r3, [r7, #4]
}
 8018eb8:	4618      	mov	r0, r3
 8018eba:	3708      	adds	r7, #8
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	bd80      	pop	{r7, pc}

08018ec0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b08a      	sub	sp, #40	@ 0x28
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	60b9      	str	r1, [r7, #8]
 8018ec8:	607a      	str	r2, [r7, #4]
 8018eca:	461a      	mov	r2, r3
 8018ecc:	4603      	mov	r3, r0
 8018ece:	73fb      	strb	r3, [r7, #15]
 8018ed0:	4613      	mov	r3, r2
 8018ed2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8018ed4:	4ab9      	ldr	r2, [pc, #740]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018ed6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018eda:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8018edc:	f003 f897 	bl	801c00e <RFW_DeInit>
    if( rxContinuous == true )
 8018ee0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d001      	beq.n	8018eec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018ee8:	2300      	movs	r3, #0
 8018eea:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8018eec:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d004      	beq.n	8018efe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018ef4:	4ab2      	ldr	r2, [pc, #712]	@ (80191c0 <RadioSetRxConfig+0x300>)
 8018ef6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8018efa:	7013      	strb	r3, [r2, #0]
 8018efc:	e002      	b.n	8018f04 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8018efe:	4bb0      	ldr	r3, [pc, #704]	@ (80191c0 <RadioSetRxConfig+0x300>)
 8018f00:	22ff      	movs	r2, #255	@ 0xff
 8018f02:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018f04:	7bfb      	ldrb	r3, [r7, #15]
 8018f06:	2b05      	cmp	r3, #5
 8018f08:	d009      	beq.n	8018f1e <RadioSetRxConfig+0x5e>
 8018f0a:	2b05      	cmp	r3, #5
 8018f0c:	f300 81d7 	bgt.w	80192be <RadioSetRxConfig+0x3fe>
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	f000 80bf 	beq.w	8019094 <RadioSetRxConfig+0x1d4>
 8018f16:	2b01      	cmp	r3, #1
 8018f18:	f000 8124 	beq.w	8019164 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018f1c:	e1cf      	b.n	80192be <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8018f1e:	2001      	movs	r0, #1
 8018f20:	f002 f8bc 	bl	801b09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018f24:	4ba5      	ldr	r3, [pc, #660]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f26:	2200      	movs	r2, #0
 8018f28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018f2c:	4aa3      	ldr	r2, [pc, #652]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018f32:	4ba2      	ldr	r3, [pc, #648]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f34:	2209      	movs	r2, #9
 8018f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018f3a:	4ba0      	ldr	r3, [pc, #640]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f3c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018f40:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018f42:	68b8      	ldr	r0, [r7, #8]
 8018f44:	f002 ff96 	bl	801be74 <SUBGRF_GetFskBandwidthRegValue>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	461a      	mov	r2, r3
 8018f4c:	4b9b      	ldr	r3, [pc, #620]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018f52:	4b9a      	ldr	r3, [pc, #616]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f54:	2200      	movs	r2, #0
 8018f56:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018f58:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018f5a:	00db      	lsls	r3, r3, #3
 8018f5c:	b29a      	uxth	r2, r3
 8018f5e:	4b97      	ldr	r3, [pc, #604]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f60:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018f62:	4b96      	ldr	r3, [pc, #600]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f64:	2200      	movs	r2, #0
 8018f66:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018f68:	4b94      	ldr	r3, [pc, #592]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f6a:	2210      	movs	r2, #16
 8018f6c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018f6e:	4b93      	ldr	r3, [pc, #588]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f70:	2200      	movs	r2, #0
 8018f72:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018f74:	4b91      	ldr	r3, [pc, #580]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f76:	2200      	movs	r2, #0
 8018f78:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018f7a:	4b91      	ldr	r3, [pc, #580]	@ (80191c0 <RadioSetRxConfig+0x300>)
 8018f7c:	781a      	ldrb	r2, [r3, #0]
 8018f7e:	4b8f      	ldr	r3, [pc, #572]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f80:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018f82:	4b8e      	ldr	r3, [pc, #568]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f84:	2201      	movs	r2, #1
 8018f86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018f88:	4b8c      	ldr	r3, [pc, #560]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8018f8e:	2005      	movs	r0, #5
 8018f90:	f7ff fec2 	bl	8018d18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f94:	488b      	ldr	r0, [pc, #556]	@ (80191c4 <RadioSetRxConfig+0x304>)
 8018f96:	f002 fb1f 	bl	801b5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f9a:	488b      	ldr	r0, [pc, #556]	@ (80191c8 <RadioSetRxConfig+0x308>)
 8018f9c:	f002 fbee 	bl	801b77c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018fa0:	4a8a      	ldr	r2, [pc, #552]	@ (80191cc <RadioSetRxConfig+0x30c>)
 8018fa2:	f107 031c 	add.w	r3, r7, #28
 8018fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018faa:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fae:	f107 031c 	add.w	r3, r7, #28
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	f001 feab 	bl	801ad0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018fb8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018fbc:	f001 fef6 	bl	801adac <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018fc0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8018fc4:	f000 fe24 	bl	8019c10 <RadioRead>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8018fce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018fd2:	f023 0310 	bic.w	r3, r3, #16
 8018fd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018fde:	4619      	mov	r1, r3
 8018fe0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8018fe4:	f000 fe02 	bl	8019bec <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8018fe8:	2104      	movs	r1, #4
 8018fea:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8018fee:	f000 fdfd 	bl	8019bec <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8018ff2:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018ff6:	f000 fe0b 	bl	8019c10 <RadioRead>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019004:	f023 031c 	bic.w	r3, r3, #28
 8019008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801900c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019010:	f043 0308 	orr.w	r3, r3, #8
 8019014:	b2db      	uxtb	r3, r3
 8019016:	4619      	mov	r1, r3
 8019018:	f640 009b 	movw	r0, #2203	@ 0x89b
 801901c:	f000 fde6 	bl	8019bec <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8019020:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8019024:	f000 fdf4 	bl	8019c10 <RadioRead>
 8019028:	4603      	mov	r3, r0
 801902a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801902e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019032:	f023 0318 	bic.w	r3, r3, #24
 8019036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801903a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801903e:	f043 0318 	orr.w	r3, r3, #24
 8019042:	b2db      	uxtb	r3, r3
 8019044:	4619      	mov	r1, r3
 8019046:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801904a:	f000 fdcf 	bl	8019bec <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801904e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019052:	f000 fddd 	bl	8019c10 <RadioRead>
 8019056:	4603      	mov	r3, r0
 8019058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801905c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8019064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801906c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8019070:	b2db      	uxtb	r3, r3
 8019072:	4619      	mov	r1, r3
 8019074:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019078:	f000 fdb8 	bl	8019bec <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801907c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801907e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019082:	fb02 f303 	mul.w	r3, r2, r3
 8019086:	461a      	mov	r2, r3
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	fbb2 f3f3 	udiv	r3, r2, r3
 801908e:	4a4b      	ldr	r2, [pc, #300]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8019090:	6093      	str	r3, [r2, #8]
            break;
 8019092:	e115      	b.n	80192c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019094:	2000      	movs	r0, #0
 8019096:	f002 f801 	bl	801b09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801909a:	4b48      	ldr	r3, [pc, #288]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 801909c:	2200      	movs	r2, #0
 801909e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80190a2:	4a46      	ldr	r2, [pc, #280]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80190a8:	4b44      	ldr	r3, [pc, #272]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190aa:	220b      	movs	r2, #11
 80190ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80190b0:	68b8      	ldr	r0, [r7, #8]
 80190b2:	f002 fedf 	bl	801be74 <SUBGRF_GetFskBandwidthRegValue>
 80190b6:	4603      	mov	r3, r0
 80190b8:	461a      	mov	r2, r3
 80190ba:	4b40      	ldr	r3, [pc, #256]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80190c0:	4b3e      	ldr	r3, [pc, #248]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190c2:	2200      	movs	r2, #0
 80190c4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80190c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80190c8:	00db      	lsls	r3, r3, #3
 80190ca:	b29a      	uxth	r2, r3
 80190cc:	4b3b      	ldr	r3, [pc, #236]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190ce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80190d0:	4b3a      	ldr	r3, [pc, #232]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190d2:	2204      	movs	r2, #4
 80190d4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80190d6:	4b39      	ldr	r3, [pc, #228]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190d8:	2218      	movs	r2, #24
 80190da:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80190dc:	4b37      	ldr	r3, [pc, #220]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190de:	2200      	movs	r2, #0
 80190e0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80190e2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80190e6:	f083 0301 	eor.w	r3, r3, #1
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	461a      	mov	r2, r3
 80190ee:	4b33      	ldr	r3, [pc, #204]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190f0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80190f2:	4b33      	ldr	r3, [pc, #204]	@ (80191c0 <RadioSetRxConfig+0x300>)
 80190f4:	781a      	ldrb	r2, [r3, #0]
 80190f6:	4b31      	ldr	r3, [pc, #196]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80190f8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80190fa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d003      	beq.n	801910a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019102:	4b2e      	ldr	r3, [pc, #184]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8019104:	22f2      	movs	r2, #242	@ 0xf2
 8019106:	75da      	strb	r2, [r3, #23]
 8019108:	e002      	b.n	8019110 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801910a:	4b2c      	ldr	r3, [pc, #176]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 801910c:	2201      	movs	r2, #1
 801910e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019110:	4b2a      	ldr	r3, [pc, #168]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8019112:	2201      	movs	r2, #1
 8019114:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019116:	f000 fc68 	bl	80199ea <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801911a:	2000      	movs	r0, #0
 801911c:	f7ff fdfc 	bl	8018d18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019120:	4828      	ldr	r0, [pc, #160]	@ (80191c4 <RadioSetRxConfig+0x304>)
 8019122:	f002 fa59 	bl	801b5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019126:	4828      	ldr	r0, [pc, #160]	@ (80191c8 <RadioSetRxConfig+0x308>)
 8019128:	f002 fb28 	bl	801b77c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801912c:	4a28      	ldr	r2, [pc, #160]	@ (80191d0 <RadioSetRxConfig+0x310>)
 801912e:	f107 0314 	add.w	r3, r7, #20
 8019132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019136:	e883 0003 	stmia.w	r3, {r0, r1}
 801913a:	f107 0314 	add.w	r3, r7, #20
 801913e:	4618      	mov	r0, r3
 8019140:	f001 fde5 	bl	801ad0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019144:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8019148:	f001 fe30 	bl	801adac <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801914c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801914e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019152:	fb02 f303 	mul.w	r3, r2, r3
 8019156:	461a      	mov	r2, r3
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	fbb2 f3f3 	udiv	r3, r2, r3
 801915e:	4a17      	ldr	r2, [pc, #92]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8019160:	6093      	str	r3, [r2, #8]
            break;
 8019162:	e0ad      	b.n	80192c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019164:	2000      	movs	r0, #0
 8019166:	f001 ff99 	bl	801b09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801916a:	4b14      	ldr	r3, [pc, #80]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 801916c:	2201      	movs	r2, #1
 801916e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	b2da      	uxtb	r2, r3
 8019176:	4b11      	ldr	r3, [pc, #68]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8019178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801917c:	4a15      	ldr	r2, [pc, #84]	@ (80191d4 <RadioSetRxConfig+0x314>)
 801917e:	68bb      	ldr	r3, [r7, #8]
 8019180:	4413      	add	r3, r2
 8019182:	781a      	ldrb	r2, [r3, #0]
 8019184:	4b0d      	ldr	r3, [pc, #52]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 8019186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801918a:	4a0c      	ldr	r2, [pc, #48]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 801918c:	7bbb      	ldrb	r3, [r7, #14]
 801918e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019192:	68bb      	ldr	r3, [r7, #8]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d105      	bne.n	80191a4 <RadioSetRxConfig+0x2e4>
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	2b0b      	cmp	r3, #11
 801919c:	d008      	beq.n	80191b0 <RadioSetRxConfig+0x2f0>
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	2b0c      	cmp	r3, #12
 80191a2:	d005      	beq.n	80191b0 <RadioSetRxConfig+0x2f0>
 80191a4:	68bb      	ldr	r3, [r7, #8]
 80191a6:	2b01      	cmp	r3, #1
 80191a8:	d116      	bne.n	80191d8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	2b0c      	cmp	r3, #12
 80191ae:	d113      	bne.n	80191d8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80191b0:	4b02      	ldr	r3, [pc, #8]	@ (80191bc <RadioSetRxConfig+0x2fc>)
 80191b2:	2201      	movs	r2, #1
 80191b4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80191b8:	e012      	b.n	80191e0 <RadioSetRxConfig+0x320>
 80191ba:	bf00      	nop
 80191bc:	20001b78 	.word	0x20001b78
 80191c0:	20000138 	.word	0x20000138
 80191c4:	20001bb0 	.word	0x20001bb0
 80191c8:	20001b86 	.word	0x20001b86
 80191cc:	0801e030 	.word	0x0801e030
 80191d0:	0801e038 	.word	0x0801e038
 80191d4:	0801e6a0 	.word	0x0801e6a0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80191d8:	4b3b      	ldr	r3, [pc, #236]	@ (80192c8 <RadioSetRxConfig+0x408>)
 80191da:	2200      	movs	r2, #0
 80191dc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80191e0:	4b39      	ldr	r3, [pc, #228]	@ (80192c8 <RadioSetRxConfig+0x408>)
 80191e2:	2201      	movs	r2, #1
 80191e4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80191e6:	4b38      	ldr	r3, [pc, #224]	@ (80192c8 <RadioSetRxConfig+0x408>)
 80191e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80191ec:	2b05      	cmp	r3, #5
 80191ee:	d004      	beq.n	80191fa <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80191f0:	4b35      	ldr	r3, [pc, #212]	@ (80192c8 <RadioSetRxConfig+0x408>)
 80191f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80191f6:	2b06      	cmp	r3, #6
 80191f8:	d10a      	bne.n	8019210 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80191fa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80191fc:	2b0b      	cmp	r3, #11
 80191fe:	d803      	bhi.n	8019208 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019200:	4b31      	ldr	r3, [pc, #196]	@ (80192c8 <RadioSetRxConfig+0x408>)
 8019202:	220c      	movs	r2, #12
 8019204:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019206:	e006      	b.n	8019216 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019208:	4a2f      	ldr	r2, [pc, #188]	@ (80192c8 <RadioSetRxConfig+0x408>)
 801920a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801920c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801920e:	e002      	b.n	8019216 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019210:	4a2d      	ldr	r2, [pc, #180]	@ (80192c8 <RadioSetRxConfig+0x408>)
 8019212:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019214:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019216:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801921a:	4b2b      	ldr	r3, [pc, #172]	@ (80192c8 <RadioSetRxConfig+0x408>)
 801921c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801921e:	4b2b      	ldr	r3, [pc, #172]	@ (80192cc <RadioSetRxConfig+0x40c>)
 8019220:	781a      	ldrb	r2, [r3, #0]
 8019222:	4b29      	ldr	r3, [pc, #164]	@ (80192c8 <RadioSetRxConfig+0x408>)
 8019224:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019226:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801922a:	4b27      	ldr	r3, [pc, #156]	@ (80192c8 <RadioSetRxConfig+0x408>)
 801922c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019230:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8019234:	4b24      	ldr	r3, [pc, #144]	@ (80192c8 <RadioSetRxConfig+0x408>)
 8019236:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801923a:	f000 fbd6 	bl	80199ea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801923e:	2001      	movs	r0, #1
 8019240:	f7ff fd6a 	bl	8018d18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019244:	4822      	ldr	r0, [pc, #136]	@ (80192d0 <RadioSetRxConfig+0x410>)
 8019246:	f002 f9c7 	bl	801b5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801924a:	4822      	ldr	r0, [pc, #136]	@ (80192d4 <RadioSetRxConfig+0x414>)
 801924c:	f002 fa96 	bl	801b77c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019250:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019252:	b2db      	uxtb	r3, r3
 8019254:	4618      	mov	r0, r3
 8019256:	f001 ff30 	bl	801b0ba <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801925a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801925e:	f002 fbf7 	bl	801ba50 <SUBGRF_ReadRegister>
 8019262:	4603      	mov	r3, r0
 8019264:	f003 0301 	and.w	r3, r3, #1
 8019268:	b2db      	uxtb	r3, r3
 801926a:	4619      	mov	r1, r3
 801926c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8019270:	f002 fbcc 	bl	801ba0c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019274:	4b14      	ldr	r3, [pc, #80]	@ (80192c8 <RadioSetRxConfig+0x408>)
 8019276:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801927a:	2b01      	cmp	r3, #1
 801927c:	d10d      	bne.n	801929a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801927e:	f240 7036 	movw	r0, #1846	@ 0x736
 8019282:	f002 fbe5 	bl	801ba50 <SUBGRF_ReadRegister>
 8019286:	4603      	mov	r3, r0
 8019288:	f023 0304 	bic.w	r3, r3, #4
 801928c:	b2db      	uxtb	r3, r3
 801928e:	4619      	mov	r1, r3
 8019290:	f240 7036 	movw	r0, #1846	@ 0x736
 8019294:	f002 fbba 	bl	801ba0c <SUBGRF_WriteRegister>
 8019298:	e00c      	b.n	80192b4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801929a:	f240 7036 	movw	r0, #1846	@ 0x736
 801929e:	f002 fbd7 	bl	801ba50 <SUBGRF_ReadRegister>
 80192a2:	4603      	mov	r3, r0
 80192a4:	f043 0304 	orr.w	r3, r3, #4
 80192a8:	b2db      	uxtb	r3, r3
 80192aa:	4619      	mov	r1, r3
 80192ac:	f240 7036 	movw	r0, #1846	@ 0x736
 80192b0:	f002 fbac 	bl	801ba0c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80192b4:	4b04      	ldr	r3, [pc, #16]	@ (80192c8 <RadioSetRxConfig+0x408>)
 80192b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80192ba:	609a      	str	r2, [r3, #8]
            break;
 80192bc:	e000      	b.n	80192c0 <RadioSetRxConfig+0x400>
            break;
 80192be:	bf00      	nop
    }
}
 80192c0:	bf00      	nop
 80192c2:	3728      	adds	r7, #40	@ 0x28
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bd80      	pop	{r7, pc}
 80192c8:	20001b78 	.word	0x20001b78
 80192cc:	20000138 	.word	0x20000138
 80192d0:	20001bb0 	.word	0x20001bb0
 80192d4:	20001b86 	.word	0x20001b86

080192d8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80192d8:	b580      	push	{r7, lr}
 80192da:	b086      	sub	sp, #24
 80192dc:	af00      	add	r7, sp, #0
 80192de:	60ba      	str	r2, [r7, #8]
 80192e0:	607b      	str	r3, [r7, #4]
 80192e2:	4603      	mov	r3, r0
 80192e4:	73fb      	strb	r3, [r7, #15]
 80192e6:	460b      	mov	r3, r1
 80192e8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80192ea:	f002 fe90 	bl	801c00e <RFW_DeInit>
    switch( modem )
 80192ee:	7bfb      	ldrb	r3, [r7, #15]
 80192f0:	2b04      	cmp	r3, #4
 80192f2:	f000 80c7 	beq.w	8019484 <RadioSetTxConfig+0x1ac>
 80192f6:	2b04      	cmp	r3, #4
 80192f8:	f300 80d6 	bgt.w	80194a8 <RadioSetTxConfig+0x1d0>
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d002      	beq.n	8019306 <RadioSetTxConfig+0x2e>
 8019300:	2b01      	cmp	r3, #1
 8019302:	d059      	beq.n	80193b8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019304:	e0d0      	b.n	80194a8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019306:	4b77      	ldr	r3, [pc, #476]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019308:	2200      	movs	r2, #0
 801930a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801930e:	4a75      	ldr	r2, [pc, #468]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019310:	6a3b      	ldr	r3, [r7, #32]
 8019312:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019314:	4b73      	ldr	r3, [pc, #460]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019316:	220b      	movs	r2, #11
 8019318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801931c:	6878      	ldr	r0, [r7, #4]
 801931e:	f002 fda9 	bl	801be74 <SUBGRF_GetFskBandwidthRegValue>
 8019322:	4603      	mov	r3, r0
 8019324:	461a      	mov	r2, r3
 8019326:	4b6f      	ldr	r3, [pc, #444]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801932c:	4a6d      	ldr	r2, [pc, #436]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801932e:	68bb      	ldr	r3, [r7, #8]
 8019330:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019332:	4b6c      	ldr	r3, [pc, #432]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019334:	2200      	movs	r2, #0
 8019336:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019338:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801933a:	00db      	lsls	r3, r3, #3
 801933c:	b29a      	uxth	r2, r3
 801933e:	4b69      	ldr	r3, [pc, #420]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019340:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019342:	4b68      	ldr	r3, [pc, #416]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019344:	2204      	movs	r2, #4
 8019346:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019348:	4b66      	ldr	r3, [pc, #408]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801934a:	2218      	movs	r2, #24
 801934c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801934e:	4b65      	ldr	r3, [pc, #404]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019350:	2200      	movs	r2, #0
 8019352:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019354:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019358:	f083 0301 	eor.w	r3, r3, #1
 801935c:	b2db      	uxtb	r3, r3
 801935e:	461a      	mov	r2, r3
 8019360:	4b60      	ldr	r3, [pc, #384]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019362:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019364:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019368:	2b00      	cmp	r3, #0
 801936a:	d003      	beq.n	8019374 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801936c:	4b5d      	ldr	r3, [pc, #372]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801936e:	22f2      	movs	r2, #242	@ 0xf2
 8019370:	75da      	strb	r2, [r3, #23]
 8019372:	e002      	b.n	801937a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019374:	4b5b      	ldr	r3, [pc, #364]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019376:	2201      	movs	r2, #1
 8019378:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801937a:	4b5a      	ldr	r3, [pc, #360]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801937c:	2201      	movs	r2, #1
 801937e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019380:	f000 fb33 	bl	80199ea <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8019384:	2000      	movs	r0, #0
 8019386:	f7ff fcc7 	bl	8018d18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801938a:	4857      	ldr	r0, [pc, #348]	@ (80194e8 <RadioSetTxConfig+0x210>)
 801938c:	f002 f924 	bl	801b5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019390:	4856      	ldr	r0, [pc, #344]	@ (80194ec <RadioSetTxConfig+0x214>)
 8019392:	f002 f9f3 	bl	801b77c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019396:	4a56      	ldr	r2, [pc, #344]	@ (80194f0 <RadioSetTxConfig+0x218>)
 8019398:	f107 0310 	add.w	r3, r7, #16
 801939c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80193a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80193a4:	f107 0310 	add.w	r3, r7, #16
 80193a8:	4618      	mov	r0, r3
 80193aa:	f001 fcb0 	bl	801ad0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80193ae:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80193b2:	f001 fcfb 	bl	801adac <SUBGRF_SetWhiteningSeed>
            break;
 80193b6:	e078      	b.n	80194aa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80193b8:	4b4a      	ldr	r3, [pc, #296]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 80193ba:	2201      	movs	r2, #1
 80193bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80193c0:	6a3b      	ldr	r3, [r7, #32]
 80193c2:	b2da      	uxtb	r2, r3
 80193c4:	4b47      	ldr	r3, [pc, #284]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 80193c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80193ca:	4a4a      	ldr	r2, [pc, #296]	@ (80194f4 <RadioSetTxConfig+0x21c>)
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	4413      	add	r3, r2
 80193d0:	781a      	ldrb	r2, [r3, #0]
 80193d2:	4b44      	ldr	r3, [pc, #272]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 80193d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80193d8:	4a42      	ldr	r2, [pc, #264]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 80193da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80193de:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d105      	bne.n	80193f4 <RadioSetTxConfig+0x11c>
 80193e8:	6a3b      	ldr	r3, [r7, #32]
 80193ea:	2b0b      	cmp	r3, #11
 80193ec:	d008      	beq.n	8019400 <RadioSetTxConfig+0x128>
 80193ee:	6a3b      	ldr	r3, [r7, #32]
 80193f0:	2b0c      	cmp	r3, #12
 80193f2:	d005      	beq.n	8019400 <RadioSetTxConfig+0x128>
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	2b01      	cmp	r3, #1
 80193f8:	d107      	bne.n	801940a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80193fa:	6a3b      	ldr	r3, [r7, #32]
 80193fc:	2b0c      	cmp	r3, #12
 80193fe:	d104      	bne.n	801940a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019400:	4b38      	ldr	r3, [pc, #224]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019402:	2201      	movs	r2, #1
 8019404:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8019408:	e003      	b.n	8019412 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801940a:	4b36      	ldr	r3, [pc, #216]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801940c:	2200      	movs	r2, #0
 801940e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019412:	4b34      	ldr	r3, [pc, #208]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019414:	2201      	movs	r2, #1
 8019416:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019418:	4b32      	ldr	r3, [pc, #200]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801941a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801941e:	2b05      	cmp	r3, #5
 8019420:	d004      	beq.n	801942c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019422:	4b30      	ldr	r3, [pc, #192]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019424:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019428:	2b06      	cmp	r3, #6
 801942a:	d10a      	bne.n	8019442 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801942c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801942e:	2b0b      	cmp	r3, #11
 8019430:	d803      	bhi.n	801943a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019432:	4b2c      	ldr	r3, [pc, #176]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019434:	220c      	movs	r2, #12
 8019436:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019438:	e006      	b.n	8019448 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801943a:	4a2a      	ldr	r2, [pc, #168]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801943c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801943e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019440:	e002      	b.n	8019448 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019442:	4a28      	ldr	r2, [pc, #160]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019444:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019446:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019448:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801944c:	4b25      	ldr	r3, [pc, #148]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801944e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019450:	4b29      	ldr	r3, [pc, #164]	@ (80194f8 <RadioSetTxConfig+0x220>)
 8019452:	781a      	ldrb	r2, [r3, #0]
 8019454:	4b23      	ldr	r3, [pc, #140]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019456:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019458:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801945c:	4b21      	ldr	r3, [pc, #132]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801945e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019462:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8019466:	4b1f      	ldr	r3, [pc, #124]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019468:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801946c:	f000 fabd 	bl	80199ea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019470:	2001      	movs	r0, #1
 8019472:	f7ff fc51 	bl	8018d18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019476:	481c      	ldr	r0, [pc, #112]	@ (80194e8 <RadioSetTxConfig+0x210>)
 8019478:	f002 f8ae 	bl	801b5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801947c:	481b      	ldr	r0, [pc, #108]	@ (80194ec <RadioSetTxConfig+0x214>)
 801947e:	f002 f97d 	bl	801b77c <SUBGRF_SetPacketParams>
            break;
 8019482:	e012      	b.n	80194aa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8019484:	2004      	movs	r0, #4
 8019486:	f7ff fc47 	bl	8018d18 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801948a:	4b16      	ldr	r3, [pc, #88]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801948c:	2202      	movs	r2, #2
 801948e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8019492:	4a14      	ldr	r2, [pc, #80]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 8019494:	6a3b      	ldr	r3, [r7, #32]
 8019496:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019498:	4b12      	ldr	r3, [pc, #72]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 801949a:	2216      	movs	r2, #22
 801949c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80194a0:	4811      	ldr	r0, [pc, #68]	@ (80194e8 <RadioSetTxConfig+0x210>)
 80194a2:	f002 f899 	bl	801b5d8 <SUBGRF_SetModulationParams>
            break;
 80194a6:	e000      	b.n	80194aa <RadioSetTxConfig+0x1d2>
            break;
 80194a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80194aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80194ae:	4618      	mov	r0, r3
 80194b0:	f002 fbe2 	bl	801bc78 <SUBGRF_SetRfTxPower>
 80194b4:	4603      	mov	r3, r0
 80194b6:	461a      	mov	r2, r3
 80194b8:	4b0a      	ldr	r3, [pc, #40]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 80194ba:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80194be:	210e      	movs	r1, #14
 80194c0:	f640 101f 	movw	r0, #2335	@ 0x91f
 80194c4:	f002 faa2 	bl	801ba0c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80194c8:	4b06      	ldr	r3, [pc, #24]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 80194ca:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80194ce:	4618      	mov	r0, r3
 80194d0:	f002 fdb1 	bl	801c036 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80194d4:	4a03      	ldr	r2, [pc, #12]	@ (80194e4 <RadioSetTxConfig+0x20c>)
 80194d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80194d8:	6053      	str	r3, [r2, #4]
}
 80194da:	bf00      	nop
 80194dc:	3718      	adds	r7, #24
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}
 80194e2:	bf00      	nop
 80194e4:	20001b78 	.word	0x20001b78
 80194e8:	20001bb0 	.word	0x20001bb0
 80194ec:	20001b86 	.word	0x20001b86
 80194f0:	0801e038 	.word	0x0801e038
 80194f4:	0801e6a0 	.word	0x0801e6a0
 80194f8:	20000138 	.word	0x20000138

080194fc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80194fc:	b480      	push	{r7}
 80194fe:	b083      	sub	sp, #12
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
    return true;
 8019504:	2301      	movs	r3, #1
}
 8019506:	4618      	mov	r0, r3
 8019508:	370c      	adds	r7, #12
 801950a:	46bd      	mov	sp, r7
 801950c:	bc80      	pop	{r7}
 801950e:	4770      	bx	lr

08019510 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019510:	b480      	push	{r7}
 8019512:	b085      	sub	sp, #20
 8019514:	af00      	add	r7, sp, #0
 8019516:	4603      	mov	r3, r0
 8019518:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801951a:	2300      	movs	r3, #0
 801951c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801951e:	79fb      	ldrb	r3, [r7, #7]
 8019520:	2b0a      	cmp	r3, #10
 8019522:	d83e      	bhi.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
 8019524:	a201      	add	r2, pc, #4	@ (adr r2, 801952c <RadioGetLoRaBandwidthInHz+0x1c>)
 8019526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801952a:	bf00      	nop
 801952c:	08019559 	.word	0x08019559
 8019530:	08019569 	.word	0x08019569
 8019534:	08019579 	.word	0x08019579
 8019538:	08019589 	.word	0x08019589
 801953c:	08019591 	.word	0x08019591
 8019540:	08019597 	.word	0x08019597
 8019544:	0801959d 	.word	0x0801959d
 8019548:	080195a3 	.word	0x080195a3
 801954c:	08019561 	.word	0x08019561
 8019550:	08019571 	.word	0x08019571
 8019554:	08019581 	.word	0x08019581
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019558:	f641 6384 	movw	r3, #7812	@ 0x1e84
 801955c:	60fb      	str	r3, [r7, #12]
        break;
 801955e:	e020      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019560:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8019564:	60fb      	str	r3, [r7, #12]
        break;
 8019566:	e01c      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019568:	f643 5309 	movw	r3, #15625	@ 0x3d09
 801956c:	60fb      	str	r3, [r7, #12]
        break;
 801956e:	e018      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019570:	f245 1361 	movw	r3, #20833	@ 0x5161
 8019574:	60fb      	str	r3, [r7, #12]
        break;
 8019576:	e014      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019578:	f647 2312 	movw	r3, #31250	@ 0x7a12
 801957c:	60fb      	str	r3, [r7, #12]
        break;
 801957e:	e010      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019580:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8019584:	60fb      	str	r3, [r7, #12]
        break;
 8019586:	e00c      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019588:	f24f 4324 	movw	r3, #62500	@ 0xf424
 801958c:	60fb      	str	r3, [r7, #12]
        break;
 801958e:	e008      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019590:	4b07      	ldr	r3, [pc, #28]	@ (80195b0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8019592:	60fb      	str	r3, [r7, #12]
        break;
 8019594:	e005      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8019596:	4b07      	ldr	r3, [pc, #28]	@ (80195b4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8019598:	60fb      	str	r3, [r7, #12]
        break;
 801959a:	e002      	b.n	80195a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801959c:	4b06      	ldr	r3, [pc, #24]	@ (80195b8 <RadioGetLoRaBandwidthInHz+0xa8>)
 801959e:	60fb      	str	r3, [r7, #12]
        break;
 80195a0:	bf00      	nop
    }

    return bandwidthInHz;
 80195a2:	68fb      	ldr	r3, [r7, #12]
}
 80195a4:	4618      	mov	r0, r3
 80195a6:	3714      	adds	r7, #20
 80195a8:	46bd      	mov	sp, r7
 80195aa:	bc80      	pop	{r7}
 80195ac:	4770      	bx	lr
 80195ae:	bf00      	nop
 80195b0:	0001e848 	.word	0x0001e848
 80195b4:	0003d090 	.word	0x0003d090
 80195b8:	0007a120 	.word	0x0007a120

080195bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80195bc:	b480      	push	{r7}
 80195be:	b083      	sub	sp, #12
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
 80195c4:	4608      	mov	r0, r1
 80195c6:	4611      	mov	r1, r2
 80195c8:	461a      	mov	r2, r3
 80195ca:	4603      	mov	r3, r0
 80195cc:	70fb      	strb	r3, [r7, #3]
 80195ce:	460b      	mov	r3, r1
 80195d0:	803b      	strh	r3, [r7, #0]
 80195d2:	4613      	mov	r3, r2
 80195d4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80195d6:	883b      	ldrh	r3, [r7, #0]
 80195d8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80195da:	78ba      	ldrb	r2, [r7, #2]
 80195dc:	f082 0201 	eor.w	r2, r2, #1
 80195e0:	b2d2      	uxtb	r2, r2
 80195e2:	2a00      	cmp	r2, #0
 80195e4:	d001      	beq.n	80195ea <RadioGetGfskTimeOnAirNumerator+0x2e>
 80195e6:	2208      	movs	r2, #8
 80195e8:	e000      	b.n	80195ec <RadioGetGfskTimeOnAirNumerator+0x30>
 80195ea:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80195ec:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80195ee:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80195f2:	7c3b      	ldrb	r3, [r7, #16]
 80195f4:	7d39      	ldrb	r1, [r7, #20]
 80195f6:	2900      	cmp	r1, #0
 80195f8:	d001      	beq.n	80195fe <RadioGetGfskTimeOnAirNumerator+0x42>
 80195fa:	2102      	movs	r1, #2
 80195fc:	e000      	b.n	8019600 <RadioGetGfskTimeOnAirNumerator+0x44>
 80195fe:	2100      	movs	r1, #0
 8019600:	440b      	add	r3, r1
 8019602:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019604:	4413      	add	r3, r2
}
 8019606:	4618      	mov	r0, r3
 8019608:	370c      	adds	r7, #12
 801960a:	46bd      	mov	sp, r7
 801960c:	bc80      	pop	{r7}
 801960e:	4770      	bx	lr

08019610 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019610:	b480      	push	{r7}
 8019612:	b08b      	sub	sp, #44	@ 0x2c
 8019614:	af00      	add	r7, sp, #0
 8019616:	60f8      	str	r0, [r7, #12]
 8019618:	60b9      	str	r1, [r7, #8]
 801961a:	4611      	mov	r1, r2
 801961c:	461a      	mov	r2, r3
 801961e:	460b      	mov	r3, r1
 8019620:	71fb      	strb	r3, [r7, #7]
 8019622:	4613      	mov	r3, r2
 8019624:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019626:	79fb      	ldrb	r3, [r7, #7]
 8019628:	3304      	adds	r3, #4
 801962a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801962c:	2300      	movs	r3, #0
 801962e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019632:	68bb      	ldr	r3, [r7, #8]
 8019634:	2b05      	cmp	r3, #5
 8019636:	d002      	beq.n	801963e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	2b06      	cmp	r3, #6
 801963c:	d104      	bne.n	8019648 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801963e:	88bb      	ldrh	r3, [r7, #4]
 8019640:	2b0b      	cmp	r3, #11
 8019642:	d801      	bhi.n	8019648 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019644:	230c      	movs	r3, #12
 8019646:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d105      	bne.n	801965a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801964e:	68bb      	ldr	r3, [r7, #8]
 8019650:	2b0b      	cmp	r3, #11
 8019652:	d008      	beq.n	8019666 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	2b0c      	cmp	r3, #12
 8019658:	d005      	beq.n	8019666 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	2b01      	cmp	r3, #1
 801965e:	d105      	bne.n	801966c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	2b0c      	cmp	r3, #12
 8019664:	d102      	bne.n	801966c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019666:	2301      	movs	r3, #1
 8019668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801966c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8019670:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019672:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019676:	2a00      	cmp	r2, #0
 8019678:	d001      	beq.n	801967e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801967a:	2210      	movs	r2, #16
 801967c:	e000      	b.n	8019680 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801967e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019680:	4413      	add	r3, r2
 8019682:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019688:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801968a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801968e:	2a00      	cmp	r2, #0
 8019690:	d001      	beq.n	8019696 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019692:	2200      	movs	r2, #0
 8019694:	e000      	b.n	8019698 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019696:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019698:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801969a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801969c:	68bb      	ldr	r3, [r7, #8]
 801969e:	2b06      	cmp	r3, #6
 80196a0:	d803      	bhi.n	80196aa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80196a2:	68bb      	ldr	r3, [r7, #8]
 80196a4:	009b      	lsls	r3, r3, #2
 80196a6:	623b      	str	r3, [r7, #32]
 80196a8:	e00e      	b.n	80196c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80196aa:	69fb      	ldr	r3, [r7, #28]
 80196ac:	3308      	adds	r3, #8
 80196ae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80196b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d004      	beq.n	80196c2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80196b8:	68bb      	ldr	r3, [r7, #8]
 80196ba:	3b02      	subs	r3, #2
 80196bc:	009b      	lsls	r3, r3, #2
 80196be:	623b      	str	r3, [r7, #32]
 80196c0:	e002      	b.n	80196c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80196c2:	68bb      	ldr	r3, [r7, #8]
 80196c4:	009b      	lsls	r3, r3, #2
 80196c6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80196c8:	69fb      	ldr	r3, [r7, #28]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	da01      	bge.n	80196d2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80196ce:	2300      	movs	r3, #0
 80196d0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80196d2:	69fa      	ldr	r2, [r7, #28]
 80196d4:	6a3b      	ldr	r3, [r7, #32]
 80196d6:	4413      	add	r3, r2
 80196d8:	1e5a      	subs	r2, r3, #1
 80196da:	6a3b      	ldr	r3, [r7, #32]
 80196dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80196e0:	697a      	ldr	r2, [r7, #20]
 80196e2:	fb03 f202 	mul.w	r2, r3, r2
 80196e6:	88bb      	ldrh	r3, [r7, #4]
 80196e8:	4413      	add	r3, r2
    int32_t intermediate =
 80196ea:	330c      	adds	r3, #12
 80196ec:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80196ee:	68bb      	ldr	r3, [r7, #8]
 80196f0:	2b06      	cmp	r3, #6
 80196f2:	d802      	bhi.n	80196fa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80196f4:	69bb      	ldr	r3, [r7, #24]
 80196f6:	3302      	adds	r3, #2
 80196f8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80196fa:	69bb      	ldr	r3, [r7, #24]
 80196fc:	009b      	lsls	r3, r3, #2
 80196fe:	1c5a      	adds	r2, r3, #1
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	3b02      	subs	r3, #2
 8019704:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019708:	4618      	mov	r0, r3
 801970a:	372c      	adds	r7, #44	@ 0x2c
 801970c:	46bd      	mov	sp, r7
 801970e:	bc80      	pop	{r7}
 8019710:	4770      	bx	lr
	...

08019714 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b08a      	sub	sp, #40	@ 0x28
 8019718:	af04      	add	r7, sp, #16
 801971a:	60b9      	str	r1, [r7, #8]
 801971c:	607a      	str	r2, [r7, #4]
 801971e:	461a      	mov	r2, r3
 8019720:	4603      	mov	r3, r0
 8019722:	73fb      	strb	r3, [r7, #15]
 8019724:	4613      	mov	r3, r2
 8019726:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019728:	2300      	movs	r3, #0
 801972a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801972c:	2301      	movs	r3, #1
 801972e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019730:	7bfb      	ldrb	r3, [r7, #15]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d002      	beq.n	801973c <RadioTimeOnAir+0x28>
 8019736:	2b01      	cmp	r3, #1
 8019738:	d017      	beq.n	801976a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801973a:	e035      	b.n	80197a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801973c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8019740:	8c3a      	ldrh	r2, [r7, #32]
 8019742:	7bb9      	ldrb	r1, [r7, #14]
 8019744:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019748:	9301      	str	r3, [sp, #4]
 801974a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801974e:	9300      	str	r3, [sp, #0]
 8019750:	4603      	mov	r3, r0
 8019752:	6878      	ldr	r0, [r7, #4]
 8019754:	f7ff ff32 	bl	80195bc <RadioGetGfskTimeOnAirNumerator>
 8019758:	4603      	mov	r3, r0
 801975a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801975e:	fb02 f303 	mul.w	r3, r2, r3
 8019762:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	613b      	str	r3, [r7, #16]
        break;
 8019768:	e01e      	b.n	80197a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801976a:	8c39      	ldrh	r1, [r7, #32]
 801976c:	7bba      	ldrb	r2, [r7, #14]
 801976e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019772:	9302      	str	r3, [sp, #8]
 8019774:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019778:	9301      	str	r3, [sp, #4]
 801977a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801977e:	9300      	str	r3, [sp, #0]
 8019780:	460b      	mov	r3, r1
 8019782:	6879      	ldr	r1, [r7, #4]
 8019784:	68b8      	ldr	r0, [r7, #8]
 8019786:	f7ff ff43 	bl	8019610 <RadioGetLoRaTimeOnAirNumerator>
 801978a:	4603      	mov	r3, r0
 801978c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019790:	fb02 f303 	mul.w	r3, r2, r3
 8019794:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019796:	4a0a      	ldr	r2, [pc, #40]	@ (80197c0 <RadioTimeOnAir+0xac>)
 8019798:	68bb      	ldr	r3, [r7, #8]
 801979a:	4413      	add	r3, r2
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	4618      	mov	r0, r3
 80197a0:	f7ff feb6 	bl	8019510 <RadioGetLoRaBandwidthInHz>
 80197a4:	6138      	str	r0, [r7, #16]
        break;
 80197a6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80197a8:	697a      	ldr	r2, [r7, #20]
 80197aa:	693b      	ldr	r3, [r7, #16]
 80197ac:	4413      	add	r3, r2
 80197ae:	1e5a      	subs	r2, r3, #1
 80197b0:	693b      	ldr	r3, [r7, #16]
 80197b2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80197b6:	4618      	mov	r0, r3
 80197b8:	3718      	adds	r7, #24
 80197ba:	46bd      	mov	sp, r7
 80197bc:	bd80      	pop	{r7, pc}
 80197be:	bf00      	nop
 80197c0:	0801e6a0 	.word	0x0801e6a0

080197c4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80197c4:	b580      	push	{r7, lr}
 80197c6:	b084      	sub	sp, #16
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	6078      	str	r0, [r7, #4]
 80197cc:	460b      	mov	r3, r1
 80197ce:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80197d0:	2300      	movs	r3, #0
 80197d2:	2200      	movs	r2, #0
 80197d4:	f240 2101 	movw	r1, #513	@ 0x201
 80197d8:	f240 2001 	movw	r0, #513	@ 0x201
 80197dc:	f001 fd66 	bl	801b2ac <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80197e0:	4b73      	ldr	r3, [pc, #460]	@ (80199b0 <RadioSend+0x1ec>)
 80197e2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80197e6:	2101      	movs	r1, #1
 80197e8:	4618      	mov	r0, r3
 80197ea:	f002 fa1d 	bl	801bc28 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80197ee:	4b70      	ldr	r3, [pc, #448]	@ (80199b0 <RadioSend+0x1ec>)
 80197f0:	781b      	ldrb	r3, [r3, #0]
 80197f2:	2b01      	cmp	r3, #1
 80197f4:	d112      	bne.n	801981c <RadioSend+0x58>
 80197f6:	4b6e      	ldr	r3, [pc, #440]	@ (80199b0 <RadioSend+0x1ec>)
 80197f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80197fc:	2b06      	cmp	r3, #6
 80197fe:	d10d      	bne.n	801981c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019800:	f640 0089 	movw	r0, #2185	@ 0x889
 8019804:	f002 f924 	bl	801ba50 <SUBGRF_ReadRegister>
 8019808:	4603      	mov	r3, r0
 801980a:	f023 0304 	bic.w	r3, r3, #4
 801980e:	b2db      	uxtb	r3, r3
 8019810:	4619      	mov	r1, r3
 8019812:	f640 0089 	movw	r0, #2185	@ 0x889
 8019816:	f002 f8f9 	bl	801ba0c <SUBGRF_WriteRegister>
 801981a:	e00c      	b.n	8019836 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801981c:	f640 0089 	movw	r0, #2185	@ 0x889
 8019820:	f002 f916 	bl	801ba50 <SUBGRF_ReadRegister>
 8019824:	4603      	mov	r3, r0
 8019826:	f043 0304 	orr.w	r3, r3, #4
 801982a:	b2db      	uxtb	r3, r3
 801982c:	4619      	mov	r1, r3
 801982e:	f640 0089 	movw	r0, #2185	@ 0x889
 8019832:	f002 f8eb 	bl	801ba0c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019836:	4b5e      	ldr	r3, [pc, #376]	@ (80199b0 <RadioSend+0x1ec>)
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	2b04      	cmp	r3, #4
 801983c:	f200 80a8 	bhi.w	8019990 <RadioSend+0x1cc>
 8019840:	a201      	add	r2, pc, #4	@ (adr r2, 8019848 <RadioSend+0x84>)
 8019842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019846:	bf00      	nop
 8019848:	08019877 	.word	0x08019877
 801984c:	0801985d 	.word	0x0801985d
 8019850:	08019877 	.word	0x08019877
 8019854:	080198d9 	.word	0x080198d9
 8019858:	080198f9 	.word	0x080198f9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801985c:	4a54      	ldr	r2, [pc, #336]	@ (80199b0 <RadioSend+0x1ec>)
 801985e:	78fb      	ldrb	r3, [r7, #3]
 8019860:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019862:	4854      	ldr	r0, [pc, #336]	@ (80199b4 <RadioSend+0x1f0>)
 8019864:	f001 ff8a 	bl	801b77c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019868:	78fb      	ldrb	r3, [r7, #3]
 801986a:	2200      	movs	r2, #0
 801986c:	4619      	mov	r1, r3
 801986e:	6878      	ldr	r0, [r7, #4]
 8019870:	f001 fa3a 	bl	801ace8 <SUBGRF_SendPayload>
            break;
 8019874:	e08d      	b.n	8019992 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019876:	f002 fbd0 	bl	801c01a <RFW_Is_Init>
 801987a:	4603      	mov	r3, r0
 801987c:	2b01      	cmp	r3, #1
 801987e:	d11e      	bne.n	80198be <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019880:	f107 020d 	add.w	r2, r7, #13
 8019884:	78fb      	ldrb	r3, [r7, #3]
 8019886:	4619      	mov	r1, r3
 8019888:	6878      	ldr	r0, [r7, #4]
 801988a:	f002 fbde 	bl	801c04a <RFW_TransmitInit>
 801988e:	4603      	mov	r3, r0
 8019890:	2b00      	cmp	r3, #0
 8019892:	d10c      	bne.n	80198ae <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019894:	7b7a      	ldrb	r2, [r7, #13]
 8019896:	4b46      	ldr	r3, [pc, #280]	@ (80199b0 <RadioSend+0x1ec>)
 8019898:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801989a:	4846      	ldr	r0, [pc, #280]	@ (80199b4 <RadioSend+0x1f0>)
 801989c:	f001 ff6e 	bl	801b77c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80198a0:	7b7b      	ldrb	r3, [r7, #13]
 80198a2:	2200      	movs	r2, #0
 80198a4:	4619      	mov	r1, r3
 80198a6:	6878      	ldr	r0, [r7, #4]
 80198a8:	f001 fa1e 	bl	801ace8 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80198ac:	e071      	b.n	8019992 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80198ae:	4b42      	ldr	r3, [pc, #264]	@ (80199b8 <RadioSend+0x1f4>)
 80198b0:	2201      	movs	r2, #1
 80198b2:	2100      	movs	r1, #0
 80198b4:	2002      	movs	r0, #2
 80198b6:	f003 fc81 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80198ba:	2303      	movs	r3, #3
 80198bc:	e073      	b.n	80199a6 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80198be:	4a3c      	ldr	r2, [pc, #240]	@ (80199b0 <RadioSend+0x1ec>)
 80198c0:	78fb      	ldrb	r3, [r7, #3]
 80198c2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80198c4:	483b      	ldr	r0, [pc, #236]	@ (80199b4 <RadioSend+0x1f0>)
 80198c6:	f001 ff59 	bl	801b77c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80198ca:	78fb      	ldrb	r3, [r7, #3]
 80198cc:	2200      	movs	r2, #0
 80198ce:	4619      	mov	r1, r3
 80198d0:	6878      	ldr	r0, [r7, #4]
 80198d2:	f001 fa09 	bl	801ace8 <SUBGRF_SendPayload>
            break;
 80198d6:	e05c      	b.n	8019992 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80198d8:	4b35      	ldr	r3, [pc, #212]	@ (80199b0 <RadioSend+0x1ec>)
 80198da:	2202      	movs	r2, #2
 80198dc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80198de:	4a34      	ldr	r2, [pc, #208]	@ (80199b0 <RadioSend+0x1ec>)
 80198e0:	78fb      	ldrb	r3, [r7, #3]
 80198e2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80198e4:	4833      	ldr	r0, [pc, #204]	@ (80199b4 <RadioSend+0x1f0>)
 80198e6:	f001 ff49 	bl	801b77c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80198ea:	78fb      	ldrb	r3, [r7, #3]
 80198ec:	2200      	movs	r2, #0
 80198ee:	4619      	mov	r1, r3
 80198f0:	6878      	ldr	r0, [r7, #4]
 80198f2:	f001 f9f9 	bl	801ace8 <SUBGRF_SendPayload>
            break;
 80198f6:	e04c      	b.n	8019992 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80198f8:	78fb      	ldrb	r3, [r7, #3]
 80198fa:	461a      	mov	r2, r3
 80198fc:	6879      	ldr	r1, [r7, #4]
 80198fe:	482f      	ldr	r0, [pc, #188]	@ (80199bc <RadioSend+0x1f8>)
 8019900:	f000 fcca 	bl	801a298 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019904:	4b2a      	ldr	r3, [pc, #168]	@ (80199b0 <RadioSend+0x1ec>)
 8019906:	2202      	movs	r2, #2
 8019908:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801990a:	78fb      	ldrb	r3, [r7, #3]
 801990c:	3301      	adds	r3, #1
 801990e:	b2da      	uxtb	r2, r3
 8019910:	4b27      	ldr	r3, [pc, #156]	@ (80199b0 <RadioSend+0x1ec>)
 8019912:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019914:	4827      	ldr	r0, [pc, #156]	@ (80199b4 <RadioSend+0x1f0>)
 8019916:	f001 ff31 	bl	801b77c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801991a:	2100      	movs	r1, #0
 801991c:	20f1      	movs	r0, #241	@ 0xf1
 801991e:	f000 f965 	bl	8019bec <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019922:	2100      	movs	r1, #0
 8019924:	20f0      	movs	r0, #240	@ 0xf0
 8019926:	f000 f961 	bl	8019bec <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801992a:	4b21      	ldr	r3, [pc, #132]	@ (80199b0 <RadioSend+0x1ec>)
 801992c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801992e:	2b64      	cmp	r3, #100	@ 0x64
 8019930:	d108      	bne.n	8019944 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019932:	2170      	movs	r1, #112	@ 0x70
 8019934:	20f3      	movs	r0, #243	@ 0xf3
 8019936:	f000 f959 	bl	8019bec <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801993a:	211d      	movs	r1, #29
 801993c:	20f2      	movs	r0, #242	@ 0xf2
 801993e:	f000 f955 	bl	8019bec <RadioWrite>
 8019942:	e007      	b.n	8019954 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019944:	21e1      	movs	r1, #225	@ 0xe1
 8019946:	20f3      	movs	r0, #243	@ 0xf3
 8019948:	f000 f950 	bl	8019bec <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801994c:	2104      	movs	r1, #4
 801994e:	20f2      	movs	r0, #242	@ 0xf2
 8019950:	f000 f94c 	bl	8019bec <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019954:	78fb      	ldrb	r3, [r7, #3]
 8019956:	b29b      	uxth	r3, r3
 8019958:	00db      	lsls	r3, r3, #3
 801995a:	b29b      	uxth	r3, r3
 801995c:	3302      	adds	r3, #2
 801995e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019960:	89fb      	ldrh	r3, [r7, #14]
 8019962:	0a1b      	lsrs	r3, r3, #8
 8019964:	b29b      	uxth	r3, r3
 8019966:	b2db      	uxtb	r3, r3
 8019968:	4619      	mov	r1, r3
 801996a:	20f4      	movs	r0, #244	@ 0xf4
 801996c:	f000 f93e 	bl	8019bec <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019970:	89fb      	ldrh	r3, [r7, #14]
 8019972:	b2db      	uxtb	r3, r3
 8019974:	4619      	mov	r1, r3
 8019976:	20f5      	movs	r0, #245	@ 0xf5
 8019978:	f000 f938 	bl	8019bec <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801997c:	78fb      	ldrb	r3, [r7, #3]
 801997e:	3301      	adds	r3, #1
 8019980:	b2db      	uxtb	r3, r3
 8019982:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8019986:	4619      	mov	r1, r3
 8019988:	480c      	ldr	r0, [pc, #48]	@ (80199bc <RadioSend+0x1f8>)
 801998a:	f001 f9ad 	bl	801ace8 <SUBGRF_SendPayload>
            break;
 801998e:	e000      	b.n	8019992 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019990:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019992:	4b07      	ldr	r3, [pc, #28]	@ (80199b0 <RadioSend+0x1ec>)
 8019994:	685b      	ldr	r3, [r3, #4]
 8019996:	4619      	mov	r1, r3
 8019998:	4809      	ldr	r0, [pc, #36]	@ (80199c0 <RadioSend+0x1fc>)
 801999a:	f003 fa75 	bl	801ce88 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801999e:	4808      	ldr	r0, [pc, #32]	@ (80199c0 <RadioSend+0x1fc>)
 80199a0:	f003 f994 	bl	801cccc <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80199a4:	2300      	movs	r3, #0
}
 80199a6:	4618      	mov	r0, r3
 80199a8:	3710      	adds	r7, #16
 80199aa:	46bd      	mov	sp, r7
 80199ac:	bd80      	pop	{r7, pc}
 80199ae:	bf00      	nop
 80199b0:	20001b78 	.word	0x20001b78
 80199b4:	20001b86 	.word	0x20001b86
 80199b8:	0801e040 	.word	0x0801e040
 80199bc:	20001a74 	.word	0x20001a74
 80199c0:	20001bd4 	.word	0x20001bd4

080199c4 <RadioSleep>:

static void RadioSleep( void )
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b082      	sub	sp, #8
 80199c8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80199ca:	2300      	movs	r3, #0
 80199cc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80199ce:	793b      	ldrb	r3, [r7, #4]
 80199d0:	f043 0304 	orr.w	r3, r3, #4
 80199d4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80199d6:	7938      	ldrb	r0, [r7, #4]
 80199d8:	f001 fa62 	bl	801aea0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80199dc:	2002      	movs	r0, #2
 80199de:	f7e8 ff95 	bl	800290c <HAL_Delay>
}
 80199e2:	bf00      	nop
 80199e4:	3708      	adds	r7, #8
 80199e6:	46bd      	mov	sp, r7
 80199e8:	bd80      	pop	{r7, pc}

080199ea <RadioStandby>:

static void RadioStandby( void )
{
 80199ea:	b580      	push	{r7, lr}
 80199ec:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80199ee:	2000      	movs	r0, #0
 80199f0:	f001 fa88 	bl	801af04 <SUBGRF_SetStandby>
}
 80199f4:	bf00      	nop
 80199f6:	bd80      	pop	{r7, pc}

080199f8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b082      	sub	sp, #8
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019a00:	f002 fb0b 	bl	801c01a <RFW_Is_Init>
 8019a04:	4603      	mov	r3, r0
 8019a06:	2b01      	cmp	r3, #1
 8019a08:	d102      	bne.n	8019a10 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019a0a:	f002 fb2e 	bl	801c06a <RFW_ReceiveInit>
 8019a0e:	e007      	b.n	8019a20 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019a10:	2300      	movs	r3, #0
 8019a12:	2200      	movs	r2, #0
 8019a14:	f240 2162 	movw	r1, #610	@ 0x262
 8019a18:	f240 2062 	movw	r0, #610	@ 0x262
 8019a1c:	f001 fc46 	bl	801b2ac <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d006      	beq.n	8019a34 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019a26:	6879      	ldr	r1, [r7, #4]
 8019a28:	4811      	ldr	r0, [pc, #68]	@ (8019a70 <RadioRx+0x78>)
 8019a2a:	f003 fa2d 	bl	801ce88 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019a2e:	4810      	ldr	r0, [pc, #64]	@ (8019a70 <RadioRx+0x78>)
 8019a30:	f003 f94c 	bl	801cccc <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019a34:	4b0f      	ldr	r3, [pc, #60]	@ (8019a74 <RadioRx+0x7c>)
 8019a36:	2200      	movs	r2, #0
 8019a38:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8019a74 <RadioRx+0x7c>)
 8019a3c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019a40:	2100      	movs	r1, #0
 8019a42:	4618      	mov	r0, r3
 8019a44:	f002 f8f0 	bl	801bc28 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019a48:	4b0a      	ldr	r3, [pc, #40]	@ (8019a74 <RadioRx+0x7c>)
 8019a4a:	785b      	ldrb	r3, [r3, #1]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d004      	beq.n	8019a5a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019a50:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019a54:	f001 fa92 	bl	801af7c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019a58:	e005      	b.n	8019a66 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019a5a:	4b06      	ldr	r3, [pc, #24]	@ (8019a74 <RadioRx+0x7c>)
 8019a5c:	689b      	ldr	r3, [r3, #8]
 8019a5e:	019b      	lsls	r3, r3, #6
 8019a60:	4618      	mov	r0, r3
 8019a62:	f001 fa8b 	bl	801af7c <SUBGRF_SetRx>
}
 8019a66:	bf00      	nop
 8019a68:	3708      	adds	r7, #8
 8019a6a:	46bd      	mov	sp, r7
 8019a6c:	bd80      	pop	{r7, pc}
 8019a6e:	bf00      	nop
 8019a70:	20001bec 	.word	0x20001bec
 8019a74:	20001b78 	.word	0x20001b78

08019a78 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b082      	sub	sp, #8
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019a80:	f002 facb 	bl	801c01a <RFW_Is_Init>
 8019a84:	4603      	mov	r3, r0
 8019a86:	2b01      	cmp	r3, #1
 8019a88:	d102      	bne.n	8019a90 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019a8a:	f002 faee 	bl	801c06a <RFW_ReceiveInit>
 8019a8e:	e007      	b.n	8019aa0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019a90:	2300      	movs	r3, #0
 8019a92:	2200      	movs	r2, #0
 8019a94:	f240 2162 	movw	r1, #610	@ 0x262
 8019a98:	f240 2062 	movw	r0, #610	@ 0x262
 8019a9c:	f001 fc06 	bl	801b2ac <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d006      	beq.n	8019ab4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019aa6:	6879      	ldr	r1, [r7, #4]
 8019aa8:	4811      	ldr	r0, [pc, #68]	@ (8019af0 <RadioRxBoosted+0x78>)
 8019aaa:	f003 f9ed 	bl	801ce88 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019aae:	4810      	ldr	r0, [pc, #64]	@ (8019af0 <RadioRxBoosted+0x78>)
 8019ab0:	f003 f90c 	bl	801cccc <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8019af4 <RadioRxBoosted+0x7c>)
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019aba:	4b0e      	ldr	r3, [pc, #56]	@ (8019af4 <RadioRxBoosted+0x7c>)
 8019abc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019ac0:	2100      	movs	r1, #0
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	f002 f8b0 	bl	801bc28 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8019af4 <RadioRxBoosted+0x7c>)
 8019aca:	785b      	ldrb	r3, [r3, #1]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d004      	beq.n	8019ada <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019ad0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019ad4:	f001 fa72 	bl	801afbc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019ad8:	e005      	b.n	8019ae6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019ada:	4b06      	ldr	r3, [pc, #24]	@ (8019af4 <RadioRxBoosted+0x7c>)
 8019adc:	689b      	ldr	r3, [r3, #8]
 8019ade:	019b      	lsls	r3, r3, #6
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f001 fa6b 	bl	801afbc <SUBGRF_SetRxBoosted>
}
 8019ae6:	bf00      	nop
 8019ae8:	3708      	adds	r7, #8
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd80      	pop	{r7, pc}
 8019aee:	bf00      	nop
 8019af0:	20001bec 	.word	0x20001bec
 8019af4:	20001b78 	.word	0x20001b78

08019af8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b082      	sub	sp, #8
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]
 8019b00:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	005a      	lsls	r2, r3, #1
 8019b06:	683b      	ldr	r3, [r7, #0]
 8019b08:	4413      	add	r3, r2
 8019b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8019b3c <RadioSetRxDutyCycle+0x44>)
 8019b0c:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019b0e:	2300      	movs	r3, #0
 8019b10:	2200      	movs	r2, #0
 8019b12:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019b16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019b1a:	f001 fbc7 	bl	801b2ac <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019b1e:	4b07      	ldr	r3, [pc, #28]	@ (8019b3c <RadioSetRxDutyCycle+0x44>)
 8019b20:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019b24:	2100      	movs	r1, #0
 8019b26:	4618      	mov	r0, r3
 8019b28:	f002 f87e 	bl	801bc28 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019b2c:	6839      	ldr	r1, [r7, #0]
 8019b2e:	6878      	ldr	r0, [r7, #4]
 8019b30:	f001 fa68 	bl	801b004 <SUBGRF_SetRxDutyCycle>
}
 8019b34:	bf00      	nop
 8019b36:	3708      	adds	r7, #8
 8019b38:	46bd      	mov	sp, r7
 8019b3a:	bd80      	pop	{r7, pc}
 8019b3c:	20001b78 	.word	0x20001b78

08019b40 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019b44:	4b09      	ldr	r3, [pc, #36]	@ (8019b6c <RadioStartCad+0x2c>)
 8019b46:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019b4a:	2100      	movs	r1, #0
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	f002 f86b 	bl	801bc28 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019b52:	2300      	movs	r3, #0
 8019b54:	2200      	movs	r2, #0
 8019b56:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8019b5a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8019b5e:	f001 fba5 	bl	801b2ac <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019b62:	f001 fa7b 	bl	801b05c <SUBGRF_SetCad>
}
 8019b66:	bf00      	nop
 8019b68:	bd80      	pop	{r7, pc}
 8019b6a:	bf00      	nop
 8019b6c:	20001b78 	.word	0x20001b78

08019b70 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b084      	sub	sp, #16
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	460b      	mov	r3, r1
 8019b7a:	70fb      	strb	r3, [r7, #3]
 8019b7c:	4613      	mov	r3, r2
 8019b7e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019b80:	883b      	ldrh	r3, [r7, #0]
 8019b82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019b86:	fb02 f303 	mul.w	r3, r2, r3
 8019b8a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019b8c:	6878      	ldr	r0, [r7, #4]
 8019b8e:	f001 fbe9 	bl	801b364 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019b96:	4618      	mov	r0, r3
 8019b98:	f002 f86e 	bl	801bc78 <SUBGRF_SetRfTxPower>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019ba0:	210e      	movs	r1, #14
 8019ba2:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019ba6:	f001 ff31 	bl	801ba0c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019baa:	7afb      	ldrb	r3, [r7, #11]
 8019bac:	2101      	movs	r1, #1
 8019bae:	4618      	mov	r0, r3
 8019bb0:	f002 f83a 	bl	801bc28 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019bb4:	f001 fa60 	bl	801b078 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019bb8:	68f9      	ldr	r1, [r7, #12]
 8019bba:	4805      	ldr	r0, [pc, #20]	@ (8019bd0 <RadioSetTxContinuousWave+0x60>)
 8019bbc:	f003 f964 	bl	801ce88 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019bc0:	4803      	ldr	r0, [pc, #12]	@ (8019bd0 <RadioSetTxContinuousWave+0x60>)
 8019bc2:	f003 f883 	bl	801cccc <UTIL_TIMER_Start>
}
 8019bc6:	bf00      	nop
 8019bc8:	3710      	adds	r7, #16
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bd80      	pop	{r7, pc}
 8019bce:	bf00      	nop
 8019bd0:	20001bd4 	.word	0x20001bd4

08019bd4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019bd4:	b580      	push	{r7, lr}
 8019bd6:	b082      	sub	sp, #8
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	4603      	mov	r3, r0
 8019bdc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019bde:	f001 fe82 	bl	801b8e6 <SUBGRF_GetRssiInst>
 8019be2:	4603      	mov	r3, r0
}
 8019be4:	4618      	mov	r0, r3
 8019be6:	3708      	adds	r7, #8
 8019be8:	46bd      	mov	sp, r7
 8019bea:	bd80      	pop	{r7, pc}

08019bec <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019bec:	b580      	push	{r7, lr}
 8019bee:	b082      	sub	sp, #8
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	460a      	mov	r2, r1
 8019bf6:	80fb      	strh	r3, [r7, #6]
 8019bf8:	4613      	mov	r3, r2
 8019bfa:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019bfc:	797a      	ldrb	r2, [r7, #5]
 8019bfe:	88fb      	ldrh	r3, [r7, #6]
 8019c00:	4611      	mov	r1, r2
 8019c02:	4618      	mov	r0, r3
 8019c04:	f001 ff02 	bl	801ba0c <SUBGRF_WriteRegister>
}
 8019c08:	bf00      	nop
 8019c0a:	3708      	adds	r7, #8
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bd80      	pop	{r7, pc}

08019c10 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b082      	sub	sp, #8
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	4603      	mov	r3, r0
 8019c18:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019c1a:	88fb      	ldrh	r3, [r7, #6]
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f001 ff17 	bl	801ba50 <SUBGRF_ReadRegister>
 8019c22:	4603      	mov	r3, r0
}
 8019c24:	4618      	mov	r0, r3
 8019c26:	3708      	adds	r7, #8
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	bd80      	pop	{r7, pc}

08019c2c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b082      	sub	sp, #8
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	4603      	mov	r3, r0
 8019c34:	6039      	str	r1, [r7, #0]
 8019c36:	80fb      	strh	r3, [r7, #6]
 8019c38:	4613      	mov	r3, r2
 8019c3a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019c3c:	797b      	ldrb	r3, [r7, #5]
 8019c3e:	b29a      	uxth	r2, r3
 8019c40:	88fb      	ldrh	r3, [r7, #6]
 8019c42:	6839      	ldr	r1, [r7, #0]
 8019c44:	4618      	mov	r0, r3
 8019c46:	f001 ff23 	bl	801ba90 <SUBGRF_WriteRegisters>
}
 8019c4a:	bf00      	nop
 8019c4c:	3708      	adds	r7, #8
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd80      	pop	{r7, pc}

08019c52 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019c52:	b580      	push	{r7, lr}
 8019c54:	b082      	sub	sp, #8
 8019c56:	af00      	add	r7, sp, #0
 8019c58:	4603      	mov	r3, r0
 8019c5a:	6039      	str	r1, [r7, #0]
 8019c5c:	80fb      	strh	r3, [r7, #6]
 8019c5e:	4613      	mov	r3, r2
 8019c60:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019c62:	797b      	ldrb	r3, [r7, #5]
 8019c64:	b29a      	uxth	r2, r3
 8019c66:	88fb      	ldrh	r3, [r7, #6]
 8019c68:	6839      	ldr	r1, [r7, #0]
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	f001 ff32 	bl	801bad4 <SUBGRF_ReadRegisters>
}
 8019c70:	bf00      	nop
 8019c72:	3708      	adds	r7, #8
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}

08019c78 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b082      	sub	sp, #8
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	4603      	mov	r3, r0
 8019c80:	460a      	mov	r2, r1
 8019c82:	71fb      	strb	r3, [r7, #7]
 8019c84:	4613      	mov	r3, r2
 8019c86:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019c88:	79fb      	ldrb	r3, [r7, #7]
 8019c8a:	2b01      	cmp	r3, #1
 8019c8c:	d10a      	bne.n	8019ca4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8019cc8 <RadioSetMaxPayloadLength+0x50>)
 8019c90:	79bb      	ldrb	r3, [r7, #6]
 8019c92:	7013      	strb	r3, [r2, #0]
 8019c94:	4b0c      	ldr	r3, [pc, #48]	@ (8019cc8 <RadioSetMaxPayloadLength+0x50>)
 8019c96:	781a      	ldrb	r2, [r3, #0]
 8019c98:	4b0c      	ldr	r3, [pc, #48]	@ (8019ccc <RadioSetMaxPayloadLength+0x54>)
 8019c9a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c9c:	480c      	ldr	r0, [pc, #48]	@ (8019cd0 <RadioSetMaxPayloadLength+0x58>)
 8019c9e:	f001 fd6d 	bl	801b77c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019ca2:	e00d      	b.n	8019cc0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019ca4:	4b09      	ldr	r3, [pc, #36]	@ (8019ccc <RadioSetMaxPayloadLength+0x54>)
 8019ca6:	7d5b      	ldrb	r3, [r3, #21]
 8019ca8:	2b01      	cmp	r3, #1
 8019caa:	d109      	bne.n	8019cc0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019cac:	4a06      	ldr	r2, [pc, #24]	@ (8019cc8 <RadioSetMaxPayloadLength+0x50>)
 8019cae:	79bb      	ldrb	r3, [r7, #6]
 8019cb0:	7013      	strb	r3, [r2, #0]
 8019cb2:	4b05      	ldr	r3, [pc, #20]	@ (8019cc8 <RadioSetMaxPayloadLength+0x50>)
 8019cb4:	781a      	ldrb	r2, [r3, #0]
 8019cb6:	4b05      	ldr	r3, [pc, #20]	@ (8019ccc <RadioSetMaxPayloadLength+0x54>)
 8019cb8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019cba:	4805      	ldr	r0, [pc, #20]	@ (8019cd0 <RadioSetMaxPayloadLength+0x58>)
 8019cbc:	f001 fd5e 	bl	801b77c <SUBGRF_SetPacketParams>
}
 8019cc0:	bf00      	nop
 8019cc2:	3708      	adds	r7, #8
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	bd80      	pop	{r7, pc}
 8019cc8:	20000138 	.word	0x20000138
 8019ccc:	20001b78 	.word	0x20001b78
 8019cd0:	20001b86 	.word	0x20001b86

08019cd4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b082      	sub	sp, #8
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	4603      	mov	r3, r0
 8019cdc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019cde:	4a13      	ldr	r2, [pc, #76]	@ (8019d2c <RadioSetPublicNetwork+0x58>)
 8019ce0:	79fb      	ldrb	r3, [r7, #7]
 8019ce2:	7313      	strb	r3, [r2, #12]
 8019ce4:	4b11      	ldr	r3, [pc, #68]	@ (8019d2c <RadioSetPublicNetwork+0x58>)
 8019ce6:	7b1a      	ldrb	r2, [r3, #12]
 8019ce8:	4b10      	ldr	r3, [pc, #64]	@ (8019d2c <RadioSetPublicNetwork+0x58>)
 8019cea:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019cec:	2001      	movs	r0, #1
 8019cee:	f7ff f813 	bl	8018d18 <RadioSetModem>
    if( enable == true )
 8019cf2:	79fb      	ldrb	r3, [r7, #7]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d00a      	beq.n	8019d0e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019cf8:	2134      	movs	r1, #52	@ 0x34
 8019cfa:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019cfe:	f001 fe85 	bl	801ba0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019d02:	2144      	movs	r1, #68	@ 0x44
 8019d04:	f240 7041 	movw	r0, #1857	@ 0x741
 8019d08:	f001 fe80 	bl	801ba0c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019d0c:	e009      	b.n	8019d22 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019d0e:	2114      	movs	r1, #20
 8019d10:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019d14:	f001 fe7a 	bl	801ba0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019d18:	2124      	movs	r1, #36	@ 0x24
 8019d1a:	f240 7041 	movw	r0, #1857	@ 0x741
 8019d1e:	f001 fe75 	bl	801ba0c <SUBGRF_WriteRegister>
}
 8019d22:	bf00      	nop
 8019d24:	3708      	adds	r7, #8
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}
 8019d2a:	bf00      	nop
 8019d2c:	20001b78 	.word	0x20001b78

08019d30 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019d34:	f001 ffd4 	bl	801bce0 <SUBGRF_GetRadioWakeUpTime>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	3303      	adds	r3, #3
}
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	bd80      	pop	{r7, pc}

08019d40 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019d40:	b580      	push	{r7, lr}
 8019d42:	b082      	sub	sp, #8
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019d48:	f000 f80e 	bl	8019d68 <RadioOnTxTimeoutProcess>
}
 8019d4c:	bf00      	nop
 8019d4e:	3708      	adds	r7, #8
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}

08019d54 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	b082      	sub	sp, #8
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019d5c:	f000 f818 	bl	8019d90 <RadioOnRxTimeoutProcess>
}
 8019d60:	bf00      	nop
 8019d62:	3708      	adds	r7, #8
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}

08019d68 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019d6c:	4b07      	ldr	r3, [pc, #28]	@ (8019d8c <RadioOnTxTimeoutProcess+0x24>)
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d008      	beq.n	8019d86 <RadioOnTxTimeoutProcess+0x1e>
 8019d74:	4b05      	ldr	r3, [pc, #20]	@ (8019d8c <RadioOnTxTimeoutProcess+0x24>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	685b      	ldr	r3, [r3, #4]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d003      	beq.n	8019d86 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019d7e:	4b03      	ldr	r3, [pc, #12]	@ (8019d8c <RadioOnTxTimeoutProcess+0x24>)
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	685b      	ldr	r3, [r3, #4]
 8019d84:	4798      	blx	r3
    }
}
 8019d86:	bf00      	nop
 8019d88:	bd80      	pop	{r7, pc}
 8019d8a:	bf00      	nop
 8019d8c:	20001b74 	.word	0x20001b74

08019d90 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019d94:	4b07      	ldr	r3, [pc, #28]	@ (8019db4 <RadioOnRxTimeoutProcess+0x24>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d008      	beq.n	8019dae <RadioOnRxTimeoutProcess+0x1e>
 8019d9c:	4b05      	ldr	r3, [pc, #20]	@ (8019db4 <RadioOnRxTimeoutProcess+0x24>)
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	68db      	ldr	r3, [r3, #12]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d003      	beq.n	8019dae <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019da6:	4b03      	ldr	r3, [pc, #12]	@ (8019db4 <RadioOnRxTimeoutProcess+0x24>)
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	68db      	ldr	r3, [r3, #12]
 8019dac:	4798      	blx	r3
    }
}
 8019dae:	bf00      	nop
 8019db0:	bd80      	pop	{r7, pc}
 8019db2:	bf00      	nop
 8019db4:	20001b74 	.word	0x20001b74

08019db8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019dc2:	4a05      	ldr	r2, [pc, #20]	@ (8019dd8 <RadioOnDioIrq+0x20>)
 8019dc4:	88fb      	ldrh	r3, [r7, #6]
 8019dc6:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8019dca:	f000 f807 	bl	8019ddc <RadioIrqProcess>
}
 8019dce:	bf00      	nop
 8019dd0:	3708      	adds	r7, #8
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}
 8019dd6:	bf00      	nop
 8019dd8:	20001b78 	.word	0x20001b78

08019ddc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019ddc:	b5b0      	push	{r4, r5, r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019de2:	2300      	movs	r3, #0
 8019de4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8019de6:	2300      	movs	r3, #0
 8019de8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8019dea:	4ba8      	ldr	r3, [pc, #672]	@ (801a08c <RadioIrqProcess+0x2b0>)
 8019dec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8019df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019df4:	f000 810d 	beq.w	801a012 <RadioIrqProcess+0x236>
 8019df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019dfc:	f300 81e8 	bgt.w	801a1d0 <RadioIrqProcess+0x3f4>
 8019e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019e04:	f000 80f1 	beq.w	8019fea <RadioIrqProcess+0x20e>
 8019e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019e0c:	f300 81e0 	bgt.w	801a1d0 <RadioIrqProcess+0x3f4>
 8019e10:	2b80      	cmp	r3, #128	@ 0x80
 8019e12:	f000 80d6 	beq.w	8019fc2 <RadioIrqProcess+0x1e6>
 8019e16:	2b80      	cmp	r3, #128	@ 0x80
 8019e18:	f300 81da 	bgt.w	801a1d0 <RadioIrqProcess+0x3f4>
 8019e1c:	2b20      	cmp	r3, #32
 8019e1e:	dc49      	bgt.n	8019eb4 <RadioIrqProcess+0xd8>
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	f340 81d5 	ble.w	801a1d0 <RadioIrqProcess+0x3f4>
 8019e26:	3b01      	subs	r3, #1
 8019e28:	2b1f      	cmp	r3, #31
 8019e2a:	f200 81d1 	bhi.w	801a1d0 <RadioIrqProcess+0x3f4>
 8019e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8019e34 <RadioIrqProcess+0x58>)
 8019e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e34:	08019ebd 	.word	0x08019ebd
 8019e38:	08019ef7 	.word	0x08019ef7
 8019e3c:	0801a1d1 	.word	0x0801a1d1
 8019e40:	0801a0ad 	.word	0x0801a0ad
 8019e44:	0801a1d1 	.word	0x0801a1d1
 8019e48:	0801a1d1 	.word	0x0801a1d1
 8019e4c:	0801a1d1 	.word	0x0801a1d1
 8019e50:	0801a129 	.word	0x0801a129
 8019e54:	0801a1d1 	.word	0x0801a1d1
 8019e58:	0801a1d1 	.word	0x0801a1d1
 8019e5c:	0801a1d1 	.word	0x0801a1d1
 8019e60:	0801a1d1 	.word	0x0801a1d1
 8019e64:	0801a1d1 	.word	0x0801a1d1
 8019e68:	0801a1d1 	.word	0x0801a1d1
 8019e6c:	0801a1d1 	.word	0x0801a1d1
 8019e70:	0801a145 	.word	0x0801a145
 8019e74:	0801a1d1 	.word	0x0801a1d1
 8019e78:	0801a1d1 	.word	0x0801a1d1
 8019e7c:	0801a1d1 	.word	0x0801a1d1
 8019e80:	0801a1d1 	.word	0x0801a1d1
 8019e84:	0801a1d1 	.word	0x0801a1d1
 8019e88:	0801a1d1 	.word	0x0801a1d1
 8019e8c:	0801a1d1 	.word	0x0801a1d1
 8019e90:	0801a1d1 	.word	0x0801a1d1
 8019e94:	0801a1d1 	.word	0x0801a1d1
 8019e98:	0801a1d1 	.word	0x0801a1d1
 8019e9c:	0801a1d1 	.word	0x0801a1d1
 8019ea0:	0801a1d1 	.word	0x0801a1d1
 8019ea4:	0801a1d1 	.word	0x0801a1d1
 8019ea8:	0801a1d1 	.word	0x0801a1d1
 8019eac:	0801a1d1 	.word	0x0801a1d1
 8019eb0:	0801a153 	.word	0x0801a153
 8019eb4:	2b40      	cmp	r3, #64	@ 0x40
 8019eb6:	f000 816d 	beq.w	801a194 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8019eba:	e189      	b.n	801a1d0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019ebc:	4874      	ldr	r0, [pc, #464]	@ (801a090 <RadioIrqProcess+0x2b4>)
 8019ebe:	f002 ff73 	bl	801cda8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019ec2:	2000      	movs	r0, #0
 8019ec4:	f001 f81e 	bl	801af04 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8019ec8:	f002 f8ae 	bl	801c028 <RFW_Is_LongPacketModeEnabled>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	2b01      	cmp	r3, #1
 8019ed0:	d101      	bne.n	8019ed6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8019ed2:	f002 f8d2 	bl	801c07a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8019ed6:	4b6f      	ldr	r3, [pc, #444]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	f000 817a 	beq.w	801a1d4 <RadioIrqProcess+0x3f8>
 8019ee0:	4b6c      	ldr	r3, [pc, #432]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f000 8174 	beq.w	801a1d4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8019eec:	4b69      	ldr	r3, [pc, #420]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	4798      	blx	r3
        break;
 8019ef4:	e16e      	b.n	801a1d4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8019ef6:	4868      	ldr	r0, [pc, #416]	@ (801a098 <RadioIrqProcess+0x2bc>)
 8019ef8:	f002 ff56 	bl	801cda8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019efc:	4b63      	ldr	r3, [pc, #396]	@ (801a08c <RadioIrqProcess+0x2b0>)
 8019efe:	785b      	ldrb	r3, [r3, #1]
 8019f00:	f083 0301 	eor.w	r3, r3, #1
 8019f04:	b2db      	uxtb	r3, r3
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d014      	beq.n	8019f34 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8019f0a:	2000      	movs	r0, #0
 8019f0c:	f000 fffa 	bl	801af04 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019f10:	2100      	movs	r1, #0
 8019f12:	f640 1002 	movw	r0, #2306	@ 0x902
 8019f16:	f001 fd79 	bl	801ba0c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8019f1a:	f640 1044 	movw	r0, #2372	@ 0x944
 8019f1e:	f001 fd97 	bl	801ba50 <SUBGRF_ReadRegister>
 8019f22:	4603      	mov	r3, r0
 8019f24:	f043 0302 	orr.w	r3, r3, #2
 8019f28:	b2db      	uxtb	r3, r3
 8019f2a:	4619      	mov	r1, r3
 8019f2c:	f640 1044 	movw	r0, #2372	@ 0x944
 8019f30:	f001 fd6c 	bl	801ba0c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019f34:	1dfb      	adds	r3, r7, #7
 8019f36:	22ff      	movs	r2, #255	@ 0xff
 8019f38:	4619      	mov	r1, r3
 8019f3a:	4858      	ldr	r0, [pc, #352]	@ (801a09c <RadioIrqProcess+0x2c0>)
 8019f3c:	f000 feb2 	bl	801aca4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019f40:	4857      	ldr	r0, [pc, #348]	@ (801a0a0 <RadioIrqProcess+0x2c4>)
 8019f42:	f001 fd11 	bl	801b968 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019f46:	4b53      	ldr	r3, [pc, #332]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	f000 8144 	beq.w	801a1d8 <RadioIrqProcess+0x3fc>
 8019f50:	4b50      	ldr	r3, [pc, #320]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	689b      	ldr	r3, [r3, #8]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	f000 813e 	beq.w	801a1d8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8019f5c:	4b4b      	ldr	r3, [pc, #300]	@ (801a08c <RadioIrqProcess+0x2b0>)
 8019f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019f62:	2b01      	cmp	r3, #1
 8019f64:	d10e      	bne.n	8019f84 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8019f66:	4b4b      	ldr	r3, [pc, #300]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	689c      	ldr	r4, [r3, #8]
 8019f6c:	79fb      	ldrb	r3, [r7, #7]
 8019f6e:	4619      	mov	r1, r3
 8019f70:	4b46      	ldr	r3, [pc, #280]	@ (801a08c <RadioIrqProcess+0x2b0>)
 8019f72:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8019f76:	461a      	mov	r2, r3
 8019f78:	4b44      	ldr	r3, [pc, #272]	@ (801a08c <RadioIrqProcess+0x2b0>)
 8019f7a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8019f7e:	4847      	ldr	r0, [pc, #284]	@ (801a09c <RadioIrqProcess+0x2c0>)
 8019f80:	47a0      	blx	r4
                break;
 8019f82:	e01d      	b.n	8019fc0 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019f84:	4b41      	ldr	r3, [pc, #260]	@ (801a08c <RadioIrqProcess+0x2b0>)
 8019f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f88:	463a      	mov	r2, r7
 8019f8a:	4611      	mov	r1, r2
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f001 ff99 	bl	801bec4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8019f92:	4b40      	ldr	r3, [pc, #256]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	689c      	ldr	r4, [r3, #8]
 8019f98:	79fb      	ldrb	r3, [r7, #7]
 8019f9a:	4619      	mov	r1, r3
 8019f9c:	4b3b      	ldr	r3, [pc, #236]	@ (801a08c <RadioIrqProcess+0x2b0>)
 8019f9e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	683b      	ldr	r3, [r7, #0]
 8019fa6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8019faa:	4a3e      	ldr	r2, [pc, #248]	@ (801a0a4 <RadioIrqProcess+0x2c8>)
 8019fac:	fb82 5203 	smull	r5, r2, r2, r3
 8019fb0:	1192      	asrs	r2, r2, #6
 8019fb2:	17db      	asrs	r3, r3, #31
 8019fb4:	1ad3      	subs	r3, r2, r3
 8019fb6:	b25b      	sxtb	r3, r3
 8019fb8:	4602      	mov	r2, r0
 8019fba:	4838      	ldr	r0, [pc, #224]	@ (801a09c <RadioIrqProcess+0x2c0>)
 8019fbc:	47a0      	blx	r4
                break;
 8019fbe:	bf00      	nop
        break;
 8019fc0:	e10a      	b.n	801a1d8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	f000 ff9e 	bl	801af04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019fc8:	4b32      	ldr	r3, [pc, #200]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	f000 8105 	beq.w	801a1dc <RadioIrqProcess+0x400>
 8019fd2:	4b30      	ldr	r3, [pc, #192]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	699b      	ldr	r3, [r3, #24]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	f000 80ff 	beq.w	801a1dc <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8019fde:	4b2d      	ldr	r3, [pc, #180]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	699b      	ldr	r3, [r3, #24]
 8019fe4:	2000      	movs	r0, #0
 8019fe6:	4798      	blx	r3
        break;
 8019fe8:	e0f8      	b.n	801a1dc <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8019fea:	2000      	movs	r0, #0
 8019fec:	f000 ff8a 	bl	801af04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019ff0:	4b28      	ldr	r3, [pc, #160]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	f000 80f3 	beq.w	801a1e0 <RadioIrqProcess+0x404>
 8019ffa:	4b26      	ldr	r3, [pc, #152]	@ (801a094 <RadioIrqProcess+0x2b8>)
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	699b      	ldr	r3, [r3, #24]
 801a000:	2b00      	cmp	r3, #0
 801a002:	f000 80ed 	beq.w	801a1e0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a006:	4b23      	ldr	r3, [pc, #140]	@ (801a094 <RadioIrqProcess+0x2b8>)
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	699b      	ldr	r3, [r3, #24]
 801a00c:	2001      	movs	r0, #1
 801a00e:	4798      	blx	r3
        break;
 801a010:	e0e6      	b.n	801a1e0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a012:	4b25      	ldr	r3, [pc, #148]	@ (801a0a8 <RadioIrqProcess+0x2cc>)
 801a014:	2201      	movs	r2, #1
 801a016:	2100      	movs	r1, #0
 801a018:	2002      	movs	r0, #2
 801a01a:	f003 f8cf 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a01e:	f000 fe27 	bl	801ac70 <SUBGRF_GetOperatingMode>
 801a022:	4603      	mov	r3, r0
 801a024:	2b04      	cmp	r3, #4
 801a026:	d115      	bne.n	801a054 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a028:	4819      	ldr	r0, [pc, #100]	@ (801a090 <RadioIrqProcess+0x2b4>)
 801a02a:	f002 febd 	bl	801cda8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a02e:	2000      	movs	r0, #0
 801a030:	f000 ff68 	bl	801af04 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a034:	4b17      	ldr	r3, [pc, #92]	@ (801a094 <RadioIrqProcess+0x2b8>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	f000 80d3 	beq.w	801a1e4 <RadioIrqProcess+0x408>
 801a03e:	4b15      	ldr	r3, [pc, #84]	@ (801a094 <RadioIrqProcess+0x2b8>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	685b      	ldr	r3, [r3, #4]
 801a044:	2b00      	cmp	r3, #0
 801a046:	f000 80cd 	beq.w	801a1e4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a04a:	4b12      	ldr	r3, [pc, #72]	@ (801a094 <RadioIrqProcess+0x2b8>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	685b      	ldr	r3, [r3, #4]
 801a050:	4798      	blx	r3
        break;
 801a052:	e0c7      	b.n	801a1e4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a054:	f000 fe0c 	bl	801ac70 <SUBGRF_GetOperatingMode>
 801a058:	4603      	mov	r3, r0
 801a05a:	2b05      	cmp	r3, #5
 801a05c:	f040 80c2 	bne.w	801a1e4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a060:	480d      	ldr	r0, [pc, #52]	@ (801a098 <RadioIrqProcess+0x2bc>)
 801a062:	f002 fea1 	bl	801cda8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a066:	2000      	movs	r0, #0
 801a068:	f000 ff4c 	bl	801af04 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a06c:	4b09      	ldr	r3, [pc, #36]	@ (801a094 <RadioIrqProcess+0x2b8>)
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	2b00      	cmp	r3, #0
 801a072:	f000 80b7 	beq.w	801a1e4 <RadioIrqProcess+0x408>
 801a076:	4b07      	ldr	r3, [pc, #28]	@ (801a094 <RadioIrqProcess+0x2b8>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	68db      	ldr	r3, [r3, #12]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	f000 80b1 	beq.w	801a1e4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a082:	4b04      	ldr	r3, [pc, #16]	@ (801a094 <RadioIrqProcess+0x2b8>)
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	68db      	ldr	r3, [r3, #12]
 801a088:	4798      	blx	r3
        break;
 801a08a:	e0ab      	b.n	801a1e4 <RadioIrqProcess+0x408>
 801a08c:	20001b78 	.word	0x20001b78
 801a090:	20001bd4 	.word	0x20001bd4
 801a094:	20001b74 	.word	0x20001b74
 801a098:	20001bec 	.word	0x20001bec
 801a09c:	20001a74 	.word	0x20001a74
 801a0a0:	20001b9c 	.word	0x20001b9c
 801a0a4:	10624dd3 	.word	0x10624dd3
 801a0a8:	0801e058 	.word	0x0801e058
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a0ac:	4b54      	ldr	r3, [pc, #336]	@ (801a200 <RadioIrqProcess+0x424>)
 801a0ae:	2201      	movs	r2, #1
 801a0b0:	2100      	movs	r1, #0
 801a0b2:	2002      	movs	r0, #2
 801a0b4:	f003 f882 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a0b8:	4b52      	ldr	r3, [pc, #328]	@ (801a204 <RadioIrqProcess+0x428>)
 801a0ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	f000 8093 	beq.w	801a1e8 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a0c2:	4a51      	ldr	r2, [pc, #324]	@ (801a208 <RadioIrqProcess+0x42c>)
 801a0c4:	4b4f      	ldr	r3, [pc, #316]	@ (801a204 <RadioIrqProcess+0x428>)
 801a0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0c8:	0c1b      	lsrs	r3, r3, #16
 801a0ca:	b2db      	uxtb	r3, r3
 801a0cc:	4619      	mov	r1, r3
 801a0ce:	f640 1003 	movw	r0, #2307	@ 0x903
 801a0d2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a0d4:	4a4c      	ldr	r2, [pc, #304]	@ (801a208 <RadioIrqProcess+0x42c>)
 801a0d6:	4b4b      	ldr	r3, [pc, #300]	@ (801a204 <RadioIrqProcess+0x428>)
 801a0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0da:	0a1b      	lsrs	r3, r3, #8
 801a0dc:	b2db      	uxtb	r3, r3
 801a0de:	4619      	mov	r1, r3
 801a0e0:	f640 1004 	movw	r0, #2308	@ 0x904
 801a0e4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a0e6:	4a48      	ldr	r2, [pc, #288]	@ (801a208 <RadioIrqProcess+0x42c>)
 801a0e8:	4b46      	ldr	r3, [pc, #280]	@ (801a204 <RadioIrqProcess+0x428>)
 801a0ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0ec:	b2db      	uxtb	r3, r3
 801a0ee:	4619      	mov	r1, r3
 801a0f0:	f640 1005 	movw	r0, #2309	@ 0x905
 801a0f4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a0f6:	4c44      	ldr	r4, [pc, #272]	@ (801a208 <RadioIrqProcess+0x42c>)
 801a0f8:	4b44      	ldr	r3, [pc, #272]	@ (801a20c <RadioIrqProcess+0x430>)
 801a0fa:	f640 1002 	movw	r0, #2306	@ 0x902
 801a0fe:	4798      	blx	r3
 801a100:	4603      	mov	r3, r0
 801a102:	f043 0301 	orr.w	r3, r3, #1
 801a106:	b2db      	uxtb	r3, r3
 801a108:	4619      	mov	r1, r3
 801a10a:	f640 1002 	movw	r0, #2306	@ 0x902
 801a10e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a110:	4b3c      	ldr	r3, [pc, #240]	@ (801a204 <RadioIrqProcess+0x428>)
 801a112:	2200      	movs	r2, #0
 801a114:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a116:	2300      	movs	r3, #0
 801a118:	2200      	movs	r2, #0
 801a11a:	f240 2162 	movw	r1, #610	@ 0x262
 801a11e:	f240 2062 	movw	r0, #610	@ 0x262
 801a122:	f001 f8c3 	bl	801b2ac <SUBGRF_SetDioIrqParams>
        break;
 801a126:	e05f      	b.n	801a1e8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a128:	4b39      	ldr	r3, [pc, #228]	@ (801a210 <RadioIrqProcess+0x434>)
 801a12a:	2201      	movs	r2, #1
 801a12c:	2100      	movs	r1, #0
 801a12e:	2002      	movs	r0, #2
 801a130:	f003 f844 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a134:	f001 ff71 	bl	801c01a <RFW_Is_Init>
 801a138:	4603      	mov	r3, r0
 801a13a:	2b01      	cmp	r3, #1
 801a13c:	d156      	bne.n	801a1ec <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a13e:	f001 ffa2 	bl	801c086 <RFW_ReceivePayload>
        break;
 801a142:	e053      	b.n	801a1ec <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a144:	4b33      	ldr	r3, [pc, #204]	@ (801a214 <RadioIrqProcess+0x438>)
 801a146:	2201      	movs	r2, #1
 801a148:	2100      	movs	r1, #0
 801a14a:	2002      	movs	r0, #2
 801a14c:	f003 f836 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a150:	e051      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a152:	4831      	ldr	r0, [pc, #196]	@ (801a218 <RadioIrqProcess+0x43c>)
 801a154:	f002 fe28 	bl	801cda8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a158:	4b2a      	ldr	r3, [pc, #168]	@ (801a204 <RadioIrqProcess+0x428>)
 801a15a:	785b      	ldrb	r3, [r3, #1]
 801a15c:	f083 0301 	eor.w	r3, r3, #1
 801a160:	b2db      	uxtb	r3, r3
 801a162:	2b00      	cmp	r3, #0
 801a164:	d002      	beq.n	801a16c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a166:	2000      	movs	r0, #0
 801a168:	f000 fecc 	bl	801af04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a16c:	4b2b      	ldr	r3, [pc, #172]	@ (801a21c <RadioIrqProcess+0x440>)
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d03d      	beq.n	801a1f0 <RadioIrqProcess+0x414>
 801a174:	4b29      	ldr	r3, [pc, #164]	@ (801a21c <RadioIrqProcess+0x440>)
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	68db      	ldr	r3, [r3, #12]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d038      	beq.n	801a1f0 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a17e:	4b27      	ldr	r3, [pc, #156]	@ (801a21c <RadioIrqProcess+0x440>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	68db      	ldr	r3, [r3, #12]
 801a184:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a186:	4b26      	ldr	r3, [pc, #152]	@ (801a220 <RadioIrqProcess+0x444>)
 801a188:	2201      	movs	r2, #1
 801a18a:	2100      	movs	r1, #0
 801a18c:	2002      	movs	r0, #2
 801a18e:	f003 f815 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a192:	e02d      	b.n	801a1f0 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a194:	4b23      	ldr	r3, [pc, #140]	@ (801a224 <RadioIrqProcess+0x448>)
 801a196:	2201      	movs	r2, #1
 801a198:	2100      	movs	r1, #0
 801a19a:	2002      	movs	r0, #2
 801a19c:	f003 f80e 	bl	801d1bc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a1a0:	4b18      	ldr	r3, [pc, #96]	@ (801a204 <RadioIrqProcess+0x428>)
 801a1a2:	785b      	ldrb	r3, [r3, #1]
 801a1a4:	f083 0301 	eor.w	r3, r3, #1
 801a1a8:	b2db      	uxtb	r3, r3
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d002      	beq.n	801a1b4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a1ae:	2000      	movs	r0, #0
 801a1b0:	f000 fea8 	bl	801af04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a1b4:	4b19      	ldr	r3, [pc, #100]	@ (801a21c <RadioIrqProcess+0x440>)
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d01b      	beq.n	801a1f4 <RadioIrqProcess+0x418>
 801a1bc:	4b17      	ldr	r3, [pc, #92]	@ (801a21c <RadioIrqProcess+0x440>)
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	691b      	ldr	r3, [r3, #16]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d016      	beq.n	801a1f4 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a1c6:	4b15      	ldr	r3, [pc, #84]	@ (801a21c <RadioIrqProcess+0x440>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	691b      	ldr	r3, [r3, #16]
 801a1cc:	4798      	blx	r3
        break;
 801a1ce:	e011      	b.n	801a1f4 <RadioIrqProcess+0x418>
        break;
 801a1d0:	bf00      	nop
 801a1d2:	e010      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1d4:	bf00      	nop
 801a1d6:	e00e      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1d8:	bf00      	nop
 801a1da:	e00c      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1dc:	bf00      	nop
 801a1de:	e00a      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1e0:	bf00      	nop
 801a1e2:	e008      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1e4:	bf00      	nop
 801a1e6:	e006      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1e8:	bf00      	nop
 801a1ea:	e004      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1ec:	bf00      	nop
 801a1ee:	e002      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1f0:	bf00      	nop
 801a1f2:	e000      	b.n	801a1f6 <RadioIrqProcess+0x41a>
        break;
 801a1f4:	bf00      	nop
    }
}
 801a1f6:	bf00      	nop
 801a1f8:	3708      	adds	r7, #8
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bdb0      	pop	{r4, r5, r7, pc}
 801a1fe:	bf00      	nop
 801a200:	0801e06c 	.word	0x0801e06c
 801a204:	20001b78 	.word	0x20001b78
 801a208:	08019bed 	.word	0x08019bed
 801a20c:	08019c11 	.word	0x08019c11
 801a210:	0801e078 	.word	0x0801e078
 801a214:	0801e084 	.word	0x0801e084
 801a218:	20001bec 	.word	0x20001bec
 801a21c:	20001b74 	.word	0x20001b74
 801a220:	0801e090 	.word	0x0801e090
 801a224:	0801e09c 	.word	0x0801e09c

0801a228 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a228:	b580      	push	{r7, lr}
 801a22a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a22c:	4b09      	ldr	r3, [pc, #36]	@ (801a254 <RadioTxPrbs+0x2c>)
 801a22e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a232:	2101      	movs	r1, #1
 801a234:	4618      	mov	r0, r3
 801a236:	f001 fcf7 	bl	801bc28 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a23a:	4b07      	ldr	r3, [pc, #28]	@ (801a258 <RadioTxPrbs+0x30>)
 801a23c:	212d      	movs	r1, #45	@ 0x2d
 801a23e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a242:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a244:	f000 ff21 	bl	801b08a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a248:	4804      	ldr	r0, [pc, #16]	@ (801a25c <RadioTxPrbs+0x34>)
 801a24a:	f000 fe77 	bl	801af3c <SUBGRF_SetTx>
}
 801a24e:	bf00      	nop
 801a250:	bd80      	pop	{r7, pc}
 801a252:	bf00      	nop
 801a254:	20001b78 	.word	0x20001b78
 801a258:	08019bed 	.word	0x08019bed
 801a25c:	000fffff 	.word	0x000fffff

0801a260 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b084      	sub	sp, #16
 801a264:	af00      	add	r7, sp, #0
 801a266:	4603      	mov	r3, r0
 801a268:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a26a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a26e:	4618      	mov	r0, r3
 801a270:	f001 fd02 	bl	801bc78 <SUBGRF_SetRfTxPower>
 801a274:	4603      	mov	r3, r0
 801a276:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a278:	210e      	movs	r1, #14
 801a27a:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a27e:	f001 fbc5 	bl	801ba0c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a282:	7bfb      	ldrb	r3, [r7, #15]
 801a284:	2101      	movs	r1, #1
 801a286:	4618      	mov	r0, r3
 801a288:	f001 fcce 	bl	801bc28 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a28c:	f000 fef4 	bl	801b078 <SUBGRF_SetTxContinuousWave>
}
 801a290:	bf00      	nop
 801a292:	3710      	adds	r7, #16
 801a294:	46bd      	mov	sp, r7
 801a296:	bd80      	pop	{r7, pc}

0801a298 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a298:	b480      	push	{r7}
 801a29a:	b089      	sub	sp, #36	@ 0x24
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	60f8      	str	r0, [r7, #12]
 801a2a0:	60b9      	str	r1, [r7, #8]
 801a2a2:	4613      	mov	r3, r2
 801a2a4:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	61bb      	str	r3, [r7, #24]
 801a2b2:	e011      	b.n	801a2d8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a2b4:	69bb      	ldr	r3, [r7, #24]
 801a2b6:	68ba      	ldr	r2, [r7, #8]
 801a2b8:	4413      	add	r3, r2
 801a2ba:	781a      	ldrb	r2, [r3, #0]
 801a2bc:	69bb      	ldr	r3, [r7, #24]
 801a2be:	68b9      	ldr	r1, [r7, #8]
 801a2c0:	440b      	add	r3, r1
 801a2c2:	43d2      	mvns	r2, r2
 801a2c4:	b2d2      	uxtb	r2, r2
 801a2c6:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a2c8:	69bb      	ldr	r3, [r7, #24]
 801a2ca:	68fa      	ldr	r2, [r7, #12]
 801a2cc:	4413      	add	r3, r2
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a2d2:	69bb      	ldr	r3, [r7, #24]
 801a2d4:	3301      	adds	r3, #1
 801a2d6:	61bb      	str	r3, [r7, #24]
 801a2d8:	79fb      	ldrb	r3, [r7, #7]
 801a2da:	69ba      	ldr	r2, [r7, #24]
 801a2dc:	429a      	cmp	r2, r3
 801a2de:	dbe9      	blt.n	801a2b4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	61bb      	str	r3, [r7, #24]
 801a2e4:	e049      	b.n	801a37a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a2e6:	69bb      	ldr	r3, [r7, #24]
 801a2e8:	425a      	negs	r2, r3
 801a2ea:	f003 0307 	and.w	r3, r3, #7
 801a2ee:	f002 0207 	and.w	r2, r2, #7
 801a2f2:	bf58      	it	pl
 801a2f4:	4253      	negpl	r3, r2
 801a2f6:	b2db      	uxtb	r3, r3
 801a2f8:	f1c3 0307 	rsb	r3, r3, #7
 801a2fc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a2fe:	69bb      	ldr	r3, [r7, #24]
 801a300:	2b00      	cmp	r3, #0
 801a302:	da00      	bge.n	801a306 <payload_integration+0x6e>
 801a304:	3307      	adds	r3, #7
 801a306:	10db      	asrs	r3, r3, #3
 801a308:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a30a:	69bb      	ldr	r3, [r7, #24]
 801a30c:	3301      	adds	r3, #1
 801a30e:	425a      	negs	r2, r3
 801a310:	f003 0307 	and.w	r3, r3, #7
 801a314:	f002 0207 	and.w	r2, r2, #7
 801a318:	bf58      	it	pl
 801a31a:	4253      	negpl	r3, r2
 801a31c:	b2db      	uxtb	r3, r3
 801a31e:	f1c3 0307 	rsb	r3, r3, #7
 801a322:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a324:	69bb      	ldr	r3, [r7, #24]
 801a326:	3301      	adds	r3, #1
 801a328:	2b00      	cmp	r3, #0
 801a32a:	da00      	bge.n	801a32e <payload_integration+0x96>
 801a32c:	3307      	adds	r3, #7
 801a32e:	10db      	asrs	r3, r3, #3
 801a330:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a332:	7dbb      	ldrb	r3, [r7, #22]
 801a334:	68ba      	ldr	r2, [r7, #8]
 801a336:	4413      	add	r3, r2
 801a338:	781b      	ldrb	r3, [r3, #0]
 801a33a:	461a      	mov	r2, r3
 801a33c:	7dfb      	ldrb	r3, [r7, #23]
 801a33e:	fa42 f303 	asr.w	r3, r2, r3
 801a342:	b2db      	uxtb	r3, r3
 801a344:	f003 0301 	and.w	r3, r3, #1
 801a348:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a34a:	7ffa      	ldrb	r2, [r7, #31]
 801a34c:	7cfb      	ldrb	r3, [r7, #19]
 801a34e:	4053      	eors	r3, r2
 801a350:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a352:	7d3b      	ldrb	r3, [r7, #20]
 801a354:	68fa      	ldr	r2, [r7, #12]
 801a356:	4413      	add	r3, r2
 801a358:	781b      	ldrb	r3, [r3, #0]
 801a35a:	b25a      	sxtb	r2, r3
 801a35c:	7ff9      	ldrb	r1, [r7, #31]
 801a35e:	7d7b      	ldrb	r3, [r7, #21]
 801a360:	fa01 f303 	lsl.w	r3, r1, r3
 801a364:	b25b      	sxtb	r3, r3
 801a366:	4313      	orrs	r3, r2
 801a368:	b259      	sxtb	r1, r3
 801a36a:	7d3b      	ldrb	r3, [r7, #20]
 801a36c:	68fa      	ldr	r2, [r7, #12]
 801a36e:	4413      	add	r3, r2
 801a370:	b2ca      	uxtb	r2, r1
 801a372:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a374:	69bb      	ldr	r3, [r7, #24]
 801a376:	3301      	adds	r3, #1
 801a378:	61bb      	str	r3, [r7, #24]
 801a37a:	79fb      	ldrb	r3, [r7, #7]
 801a37c:	00db      	lsls	r3, r3, #3
 801a37e:	69ba      	ldr	r2, [r7, #24]
 801a380:	429a      	cmp	r2, r3
 801a382:	dbb0      	blt.n	801a2e6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a384:	7ffb      	ldrb	r3, [r7, #31]
 801a386:	01db      	lsls	r3, r3, #7
 801a388:	b25a      	sxtb	r2, r3
 801a38a:	7ffb      	ldrb	r3, [r7, #31]
 801a38c:	019b      	lsls	r3, r3, #6
 801a38e:	b25b      	sxtb	r3, r3
 801a390:	4313      	orrs	r3, r2
 801a392:	b25b      	sxtb	r3, r3
 801a394:	7ffa      	ldrb	r2, [r7, #31]
 801a396:	2a00      	cmp	r2, #0
 801a398:	d101      	bne.n	801a39e <payload_integration+0x106>
 801a39a:	2220      	movs	r2, #32
 801a39c:	e000      	b.n	801a3a0 <payload_integration+0x108>
 801a39e:	2200      	movs	r2, #0
 801a3a0:	4313      	orrs	r3, r2
 801a3a2:	b259      	sxtb	r1, r3
 801a3a4:	79fb      	ldrb	r3, [r7, #7]
 801a3a6:	68fa      	ldr	r2, [r7, #12]
 801a3a8:	4413      	add	r3, r2
 801a3aa:	b2ca      	uxtb	r2, r1
 801a3ac:	701a      	strb	r2, [r3, #0]
}
 801a3ae:	bf00      	nop
 801a3b0:	3724      	adds	r7, #36	@ 0x24
 801a3b2:	46bd      	mov	sp, r7
 801a3b4:	bc80      	pop	{r7}
 801a3b6:	4770      	bx	lr

0801a3b8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b08c      	sub	sp, #48	@ 0x30
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	60b9      	str	r1, [r7, #8]
 801a3c0:	607a      	str	r2, [r7, #4]
 801a3c2:	603b      	str	r3, [r7, #0]
 801a3c4:	4603      	mov	r3, r0
 801a3c6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	623b      	str	r3, [r7, #32]
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a3d4:	f001 fe1b 	bl	801c00e <RFW_DeInit>

    if( rxContinuous != 0 )
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d001      	beq.n	801a3e2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a3de:	2300      	movs	r3, #0
 801a3e0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	bf14      	ite	ne
 801a3e8:	2301      	movne	r3, #1
 801a3ea:	2300      	moveq	r3, #0
 801a3ec:	b2da      	uxtb	r2, r3
 801a3ee:	4ba4      	ldr	r3, [pc, #656]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a3f0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a3f2:	7bfb      	ldrb	r3, [r7, #15]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d003      	beq.n	801a400 <RadioSetRxGenericConfig+0x48>
 801a3f8:	2b01      	cmp	r3, #1
 801a3fa:	f000 80dc 	beq.w	801a5b6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a3fe:	e196      	b.n	801a72e <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a400:	68bb      	ldr	r3, [r7, #8]
 801a402:	689b      	ldr	r3, [r3, #8]
 801a404:	2b00      	cmp	r3, #0
 801a406:	d003      	beq.n	801a410 <RadioSetRxGenericConfig+0x58>
 801a408:	68bb      	ldr	r3, [r7, #8]
 801a40a:	68db      	ldr	r3, [r3, #12]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d102      	bne.n	801a416 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a410:	f04f 33ff 	mov.w	r3, #4294967295
 801a414:	e18c      	b.n	801a730 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 801a416:	68bb      	ldr	r3, [r7, #8]
 801a418:	7f9b      	ldrb	r3, [r3, #30]
 801a41a:	2b08      	cmp	r3, #8
 801a41c:	d902      	bls.n	801a424 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a41e:	f04f 33ff 	mov.w	r3, #4294967295
 801a422:	e185      	b.n	801a730 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	6919      	ldr	r1, [r3, #16]
 801a428:	68bb      	ldr	r3, [r7, #8]
 801a42a:	7f9b      	ldrb	r3, [r3, #30]
 801a42c:	461a      	mov	r2, r3
 801a42e:	f107 0320 	add.w	r3, r7, #32
 801a432:	4618      	mov	r0, r3
 801a434:	f001 fede 	bl	801c1f4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a438:	68bb      	ldr	r3, [r7, #8]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	bf14      	ite	ne
 801a440:	2301      	movne	r3, #1
 801a442:	2300      	moveq	r3, #0
 801a444:	b2db      	uxtb	r3, r3
 801a446:	4618      	mov	r0, r3
 801a448:	f000 fe28 	bl	801b09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a44c:	4b8c      	ldr	r3, [pc, #560]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a44e:	2200      	movs	r2, #0
 801a450:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a454:	68bb      	ldr	r3, [r7, #8]
 801a456:	689b      	ldr	r3, [r3, #8]
 801a458:	4a89      	ldr	r2, [pc, #548]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a45a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a45c:	68bb      	ldr	r3, [r7, #8]
 801a45e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a462:	4b87      	ldr	r3, [pc, #540]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a468:	68bb      	ldr	r3, [r7, #8]
 801a46a:	685b      	ldr	r3, [r3, #4]
 801a46c:	4618      	mov	r0, r3
 801a46e:	f001 fd01 	bl	801be74 <SUBGRF_GetFskBandwidthRegValue>
 801a472:	4603      	mov	r3, r0
 801a474:	461a      	mov	r2, r3
 801a476:	4b82      	ldr	r3, [pc, #520]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a47c:	4b80      	ldr	r3, [pc, #512]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a47e:	2200      	movs	r2, #0
 801a480:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a482:	68bb      	ldr	r3, [r7, #8]
 801a484:	68db      	ldr	r3, [r3, #12]
 801a486:	b29b      	uxth	r3, r3
 801a488:	00db      	lsls	r3, r3, #3
 801a48a:	b29a      	uxth	r2, r3
 801a48c:	4b7c      	ldr	r3, [pc, #496]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a48e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a490:	68bb      	ldr	r3, [r7, #8]
 801a492:	7fda      	ldrb	r2, [r3, #31]
 801a494:	4b7a      	ldr	r3, [pc, #488]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a496:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	7f9b      	ldrb	r3, [r3, #30]
 801a49c:	00db      	lsls	r3, r3, #3
 801a49e:	b2da      	uxtb	r2, r3
 801a4a0:	4b77      	ldr	r3, [pc, #476]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a4a2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801a4aa:	4b75      	ldr	r3, [pc, #468]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a4ac:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d105      	bne.n	801a4c4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a4b8:	68bb      	ldr	r3, [r7, #8]
 801a4ba:	695b      	ldr	r3, [r3, #20]
 801a4bc:	b2da      	uxtb	r2, r3
 801a4be:	4b70      	ldr	r3, [pc, #448]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a4c0:	759a      	strb	r2, [r3, #22]
 801a4c2:	e00b      	b.n	801a4dc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a4c4:	68bb      	ldr	r3, [r7, #8]
 801a4c6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a4ca:	2b02      	cmp	r3, #2
 801a4cc:	d103      	bne.n	801a4d6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a4ce:	4b6c      	ldr	r3, [pc, #432]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a4d0:	22ff      	movs	r2, #255	@ 0xff
 801a4d2:	759a      	strb	r2, [r3, #22]
 801a4d4:	e002      	b.n	801a4dc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a4d6:	4b6a      	ldr	r3, [pc, #424]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a4d8:	22ff      	movs	r2, #255	@ 0xff
 801a4da:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a4dc:	68bb      	ldr	r3, [r7, #8]
 801a4de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a4e2:	2b02      	cmp	r3, #2
 801a4e4:	d004      	beq.n	801a4f0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a4e6:	68bb      	ldr	r3, [r7, #8]
 801a4e8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a4ec:	2b02      	cmp	r3, #2
 801a4ee:	d12d      	bne.n	801a54c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a4f0:	68bb      	ldr	r3, [r7, #8]
 801a4f2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a4f6:	2bf1      	cmp	r3, #241	@ 0xf1
 801a4f8:	d00c      	beq.n	801a514 <RadioSetRxGenericConfig+0x15c>
 801a4fa:	68bb      	ldr	r3, [r7, #8]
 801a4fc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a500:	2bf2      	cmp	r3, #242	@ 0xf2
 801a502:	d007      	beq.n	801a514 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a504:	68bb      	ldr	r3, [r7, #8]
 801a506:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a50a:	2b01      	cmp	r3, #1
 801a50c:	d002      	beq.n	801a514 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801a50e:	f04f 33ff 	mov.w	r3, #4294967295
 801a512:	e10d      	b.n	801a730 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 801a514:	2300      	movs	r3, #0
 801a516:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a518:	68bb      	ldr	r3, [r7, #8]
 801a51a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a51c:	4b59      	ldr	r3, [pc, #356]	@ (801a684 <RadioSetRxGenericConfig+0x2cc>)
 801a51e:	6819      	ldr	r1, [r3, #0]
 801a520:	f107 0314 	add.w	r3, r7, #20
 801a524:	4a58      	ldr	r2, [pc, #352]	@ (801a688 <RadioSetRxGenericConfig+0x2d0>)
 801a526:	4618      	mov	r0, r3
 801a528:	f001 fd64 	bl	801bff4 <RFW_Init>
 801a52c:	4603      	mov	r3, r0
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d002      	beq.n	801a538 <RadioSetRxGenericConfig+0x180>
                return -1;
 801a532:	f04f 33ff 	mov.w	r3, #4294967295
 801a536:	e0fb      	b.n	801a730 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a538:	4b51      	ldr	r3, [pc, #324]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a53a:	2200      	movs	r2, #0
 801a53c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a53e:	4b50      	ldr	r3, [pc, #320]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a540:	2201      	movs	r2, #1
 801a542:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a544:	4b4e      	ldr	r3, [pc, #312]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a546:	2200      	movs	r2, #0
 801a548:	755a      	strb	r2, [r3, #21]
        {
 801a54a:	e00e      	b.n	801a56a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a54c:	68bb      	ldr	r3, [r7, #8]
 801a54e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801a552:	4b4b      	ldr	r3, [pc, #300]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a554:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a556:	68bb      	ldr	r3, [r7, #8]
 801a558:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801a55c:	4b48      	ldr	r3, [pc, #288]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a55e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801a566:	4b46      	ldr	r3, [pc, #280]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a568:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a56a:	f7ff fa3e 	bl	80199ea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a56e:	2000      	movs	r0, #0
 801a570:	f7fe fbd2 	bl	8018d18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a574:	4845      	ldr	r0, [pc, #276]	@ (801a68c <RadioSetRxGenericConfig+0x2d4>)
 801a576:	f001 f82f 	bl	801b5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a57a:	4845      	ldr	r0, [pc, #276]	@ (801a690 <RadioSetRxGenericConfig+0x2d8>)
 801a57c:	f001 f8fe 	bl	801b77c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a580:	f107 0320 	add.w	r3, r7, #32
 801a584:	4618      	mov	r0, r3
 801a586:	f000 fbc2 	bl	801ad0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a58a:	68bb      	ldr	r3, [r7, #8]
 801a58c:	8b9b      	ldrh	r3, [r3, #28]
 801a58e:	4618      	mov	r0, r3
 801a590:	f000 fc0c 	bl	801adac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a594:	68bb      	ldr	r3, [r7, #8]
 801a596:	8b1b      	ldrh	r3, [r3, #24]
 801a598:	4618      	mov	r0, r3
 801a59a:	f000 fbe7 	bl	801ad6c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a59e:	683b      	ldr	r3, [r7, #0]
 801a5a0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801a5a4:	fb03 f202 	mul.w	r2, r3, r2
 801a5a8:	68bb      	ldr	r3, [r7, #8]
 801a5aa:	689b      	ldr	r3, [r3, #8]
 801a5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 801a5b0:	4a33      	ldr	r2, [pc, #204]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a5b2:	6093      	str	r3, [r2, #8]
        break;
 801a5b4:	e0bb      	b.n	801a72e <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d102      	bne.n	801a5c4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a5be:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c2:	e0b5      	b.n	801a730 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a5c4:	68bb      	ldr	r3, [r7, #8]
 801a5c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801a5ca:	2b01      	cmp	r3, #1
 801a5cc:	d105      	bne.n	801a5da <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 801a5ce:	68bb      	ldr	r3, [r7, #8]
 801a5d0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801a5d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801a5d8:	e002      	b.n	801a5e0 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 801a5da:	23ff      	movs	r3, #255	@ 0xff
 801a5dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a5e0:	68bb      	ldr	r3, [r7, #8]
 801a5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	bf14      	ite	ne
 801a5e8:	2301      	movne	r3, #1
 801a5ea:	2300      	moveq	r3, #0
 801a5ec:	b2db      	uxtb	r3, r3
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f000 fd54 	bl	801b09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a5f4:	683b      	ldr	r3, [r7, #0]
 801a5f6:	b2db      	uxtb	r3, r3
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	f000 fd5e 	bl	801b0ba <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a5fe:	4b20      	ldr	r3, [pc, #128]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a600:	2201      	movs	r2, #1
 801a602:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a606:	68bb      	ldr	r3, [r7, #8]
 801a608:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801a60c:	4b1c      	ldr	r3, [pc, #112]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a60e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a612:	68bb      	ldr	r3, [r7, #8]
 801a614:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801a618:	4b19      	ldr	r3, [pc, #100]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a61a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a61e:	68bb      	ldr	r3, [r7, #8]
 801a620:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801a624:	4b16      	ldr	r3, [pc, #88]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a626:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a62a:	68bb      	ldr	r3, [r7, #8]
 801a62c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a630:	2b02      	cmp	r3, #2
 801a632:	d010      	beq.n	801a656 <RadioSetRxGenericConfig+0x29e>
 801a634:	2b02      	cmp	r3, #2
 801a636:	dc2d      	bgt.n	801a694 <RadioSetRxGenericConfig+0x2dc>
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d002      	beq.n	801a642 <RadioSetRxGenericConfig+0x28a>
 801a63c:	2b01      	cmp	r3, #1
 801a63e:	d005      	beq.n	801a64c <RadioSetRxGenericConfig+0x294>
            break;
 801a640:	e028      	b.n	801a694 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a642:	4b0f      	ldr	r3, [pc, #60]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a644:	2200      	movs	r2, #0
 801a646:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a64a:	e024      	b.n	801a696 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a64c:	4b0c      	ldr	r3, [pc, #48]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a64e:	2201      	movs	r2, #1
 801a650:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a654:	e01f      	b.n	801a696 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a65c:	2b0b      	cmp	r3, #11
 801a65e:	d004      	beq.n	801a66a <RadioSetRxGenericConfig+0x2b2>
 801a660:	68bb      	ldr	r3, [r7, #8]
 801a662:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a666:	2b0c      	cmp	r3, #12
 801a668:	d104      	bne.n	801a674 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a66a:	4b05      	ldr	r3, [pc, #20]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a66c:	2201      	movs	r2, #1
 801a66e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a672:	e010      	b.n	801a696 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a674:	4b02      	ldr	r3, [pc, #8]	@ (801a680 <RadioSetRxGenericConfig+0x2c8>)
 801a676:	2200      	movs	r2, #0
 801a678:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a67c:	e00b      	b.n	801a696 <RadioSetRxGenericConfig+0x2de>
 801a67e:	bf00      	nop
 801a680:	20001b78 	.word	0x20001b78
 801a684:	20001b74 	.word	0x20001b74
 801a688:	20001bec 	.word	0x20001bec
 801a68c:	20001bb0 	.word	0x20001bb0
 801a690:	20001b86 	.word	0x20001b86
            break;
 801a694:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a696:	4b28      	ldr	r3, [pc, #160]	@ (801a738 <RadioSetRxGenericConfig+0x380>)
 801a698:	2201      	movs	r2, #1
 801a69a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a69c:	68bb      	ldr	r3, [r7, #8]
 801a69e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801a6a0:	4b25      	ldr	r3, [pc, #148]	@ (801a738 <RadioSetRxGenericConfig+0x380>)
 801a6a2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801a6aa:	4b23      	ldr	r3, [pc, #140]	@ (801a738 <RadioSetRxGenericConfig+0x380>)
 801a6ac:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a6ae:	4a22      	ldr	r2, [pc, #136]	@ (801a738 <RadioSetRxGenericConfig+0x380>)
 801a6b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a6b4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801a6bc:	4b1e      	ldr	r3, [pc, #120]	@ (801a738 <RadioSetRxGenericConfig+0x380>)
 801a6be:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a6c2:	68bb      	ldr	r3, [r7, #8]
 801a6c4:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 801a6c8:	4b1b      	ldr	r3, [pc, #108]	@ (801a738 <RadioSetRxGenericConfig+0x380>)
 801a6ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801a6ce:	f7ff f98c 	bl	80199ea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a6d2:	2001      	movs	r0, #1
 801a6d4:	f7fe fb20 	bl	8018d18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a6d8:	4818      	ldr	r0, [pc, #96]	@ (801a73c <RadioSetRxGenericConfig+0x384>)
 801a6da:	f000 ff7d 	bl	801b5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a6de:	4818      	ldr	r0, [pc, #96]	@ (801a740 <RadioSetRxGenericConfig+0x388>)
 801a6e0:	f001 f84c 	bl	801b77c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a6e4:	4b14      	ldr	r3, [pc, #80]	@ (801a738 <RadioSetRxGenericConfig+0x380>)
 801a6e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801a6ea:	2b01      	cmp	r3, #1
 801a6ec:	d10d      	bne.n	801a70a <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a6ee:	f240 7036 	movw	r0, #1846	@ 0x736
 801a6f2:	f001 f9ad 	bl	801ba50 <SUBGRF_ReadRegister>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	f023 0304 	bic.w	r3, r3, #4
 801a6fc:	b2db      	uxtb	r3, r3
 801a6fe:	4619      	mov	r1, r3
 801a700:	f240 7036 	movw	r0, #1846	@ 0x736
 801a704:	f001 f982 	bl	801ba0c <SUBGRF_WriteRegister>
 801a708:	e00c      	b.n	801a724 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a70a:	f240 7036 	movw	r0, #1846	@ 0x736
 801a70e:	f001 f99f 	bl	801ba50 <SUBGRF_ReadRegister>
 801a712:	4603      	mov	r3, r0
 801a714:	f043 0304 	orr.w	r3, r3, #4
 801a718:	b2db      	uxtb	r3, r3
 801a71a:	4619      	mov	r1, r3
 801a71c:	f240 7036 	movw	r0, #1846	@ 0x736
 801a720:	f001 f974 	bl	801ba0c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a724:	4b04      	ldr	r3, [pc, #16]	@ (801a738 <RadioSetRxGenericConfig+0x380>)
 801a726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a72a:	609a      	str	r2, [r3, #8]
        break;
 801a72c:	bf00      	nop
    }
    return status;
 801a72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a730:	4618      	mov	r0, r3
 801a732:	3730      	adds	r7, #48	@ 0x30
 801a734:	46bd      	mov	sp, r7
 801a736:	bd80      	pop	{r7, pc}
 801a738:	20001b78 	.word	0x20001b78
 801a73c:	20001bb0 	.word	0x20001bb0
 801a740:	20001b86 	.word	0x20001b86

0801a744 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b08e      	sub	sp, #56	@ 0x38
 801a748:	af00      	add	r7, sp, #0
 801a74a:	60b9      	str	r1, [r7, #8]
 801a74c:	607b      	str	r3, [r7, #4]
 801a74e:	4603      	mov	r3, r0
 801a750:	73fb      	strb	r3, [r7, #15]
 801a752:	4613      	mov	r3, r2
 801a754:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a756:	2300      	movs	r3, #0
 801a758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a75a:	2300      	movs	r3, #0
 801a75c:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a75e:	f001 fc56 	bl	801c00e <RFW_DeInit>
    switch( modem )
 801a762:	7bfb      	ldrb	r3, [r7, #15]
 801a764:	2b03      	cmp	r3, #3
 801a766:	f200 8204 	bhi.w	801ab72 <RadioSetTxGenericConfig+0x42e>
 801a76a:	a201      	add	r2, pc, #4	@ (adr r2, 801a770 <RadioSetTxGenericConfig+0x2c>)
 801a76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a770:	0801a8f5 	.word	0x0801a8f5
 801a774:	0801aa3d 	.word	0x0801aa3d
 801a778:	0801ab35 	.word	0x0801ab35
 801a77c:	0801a781 	.word	0x0801a781
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a780:	68bb      	ldr	r3, [r7, #8]
 801a782:	7c9b      	ldrb	r3, [r3, #18]
 801a784:	2b08      	cmp	r3, #8
 801a786:	d902      	bls.n	801a78e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801a788:	f04f 33ff 	mov.w	r3, #4294967295
 801a78c:	e206      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801a78e:	68bb      	ldr	r3, [r7, #8]
 801a790:	6899      	ldr	r1, [r3, #8]
 801a792:	68bb      	ldr	r3, [r7, #8]
 801a794:	7c9b      	ldrb	r3, [r3, #18]
 801a796:	461a      	mov	r2, r3
 801a798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a79c:	4618      	mov	r0, r3
 801a79e:	f001 fd29 	bl	801c1f4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d102      	bne.n	801a7b0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801a7aa:	f04f 33ff 	mov.w	r3, #4294967295
 801a7ae:	e1f5      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	f242 7210 	movw	r2, #10000	@ 0x2710
 801a7b8:	4293      	cmp	r3, r2
 801a7ba:	d813      	bhi.n	801a7e4 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801a7bc:	2302      	movs	r3, #2
 801a7be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a7c2:	4b99      	ldr	r3, [pc, #612]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a7c4:	2203      	movs	r2, #3
 801a7c6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a7c8:	4b97      	ldr	r3, [pc, #604]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a7ca:	2203      	movs	r2, #3
 801a7cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	4a94      	ldr	r2, [pc, #592]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a7d6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	7cda      	ldrb	r2, [r3, #19]
 801a7dc:	4b92      	ldr	r3, [pc, #584]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a7de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a7e2:	e017      	b.n	801a814 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a7ea:	4b8f      	ldr	r3, [pc, #572]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a7f0:	4b8d      	ldr	r3, [pc, #564]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	4a8a      	ldr	r2, [pc, #552]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a7fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a800:	68bb      	ldr	r3, [r7, #8]
 801a802:	7cda      	ldrb	r2, [r3, #19]
 801a804:	4b88      	ldr	r3, [pc, #544]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a806:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801a80a:	68bb      	ldr	r3, [r7, #8]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	089b      	lsrs	r3, r3, #2
 801a810:	4a85      	ldr	r2, [pc, #532]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a812:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a814:	68bb      	ldr	r3, [r7, #8]
 801a816:	685b      	ldr	r3, [r3, #4]
 801a818:	b29b      	uxth	r3, r3
 801a81a:	00db      	lsls	r3, r3, #3
 801a81c:	b29a      	uxth	r2, r3
 801a81e:	4b82      	ldr	r3, [pc, #520]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a820:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a822:	4b81      	ldr	r3, [pc, #516]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a824:	2204      	movs	r2, #4
 801a826:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a828:	68bb      	ldr	r3, [r7, #8]
 801a82a:	7c9b      	ldrb	r3, [r3, #18]
 801a82c:	00db      	lsls	r3, r3, #3
 801a82e:	b2da      	uxtb	r2, r3
 801a830:	4b7d      	ldr	r3, [pc, #500]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a832:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a834:	4b7c      	ldr	r3, [pc, #496]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a836:	2200      	movs	r2, #0
 801a838:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a83a:	68bb      	ldr	r3, [r7, #8]
 801a83c:	7d9b      	ldrb	r3, [r3, #22]
 801a83e:	2b02      	cmp	r3, #2
 801a840:	d003      	beq.n	801a84a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a842:	68bb      	ldr	r3, [r7, #8]
 801a844:	7d1b      	ldrb	r3, [r3, #20]
 801a846:	2b02      	cmp	r3, #2
 801a848:	d12b      	bne.n	801a8a2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a84a:	68bb      	ldr	r3, [r7, #8]
 801a84c:	7d5b      	ldrb	r3, [r3, #21]
 801a84e:	2bf1      	cmp	r3, #241	@ 0xf1
 801a850:	d00a      	beq.n	801a868 <RadioSetTxGenericConfig+0x124>
 801a852:	68bb      	ldr	r3, [r7, #8]
 801a854:	7d5b      	ldrb	r3, [r3, #21]
 801a856:	2bf2      	cmp	r3, #242	@ 0xf2
 801a858:	d006      	beq.n	801a868 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a85a:	68bb      	ldr	r3, [r7, #8]
 801a85c:	7d5b      	ldrb	r3, [r3, #21]
 801a85e:	2b01      	cmp	r3, #1
 801a860:	d002      	beq.n	801a868 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801a862:	f04f 33ff 	mov.w	r3, #4294967295
 801a866:	e199      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a86c:	2301      	movs	r3, #1
 801a86e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a872:	4b6e      	ldr	r3, [pc, #440]	@ (801aa2c <RadioSetTxGenericConfig+0x2e8>)
 801a874:	6819      	ldr	r1, [r3, #0]
 801a876:	f107 0320 	add.w	r3, r7, #32
 801a87a:	4a6d      	ldr	r2, [pc, #436]	@ (801aa30 <RadioSetTxGenericConfig+0x2ec>)
 801a87c:	4618      	mov	r0, r3
 801a87e:	f001 fbb9 	bl	801bff4 <RFW_Init>
 801a882:	4603      	mov	r3, r0
 801a884:	2b00      	cmp	r3, #0
 801a886:	d002      	beq.n	801a88e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801a888:	f04f 33ff 	mov.w	r3, #4294967295
 801a88c:	e186      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a88e:	4b66      	ldr	r3, [pc, #408]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a890:	2200      	movs	r2, #0
 801a892:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a894:	4b64      	ldr	r3, [pc, #400]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a896:	2201      	movs	r2, #1
 801a898:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a89a:	4b63      	ldr	r3, [pc, #396]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a89c:	2200      	movs	r2, #0
 801a89e:	755a      	strb	r2, [r3, #21]
        {
 801a8a0:	e00b      	b.n	801a8ba <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	7d5a      	ldrb	r2, [r3, #21]
 801a8a6:	4b60      	ldr	r3, [pc, #384]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a8a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a8aa:	68bb      	ldr	r3, [r7, #8]
 801a8ac:	7d9a      	ldrb	r2, [r3, #22]
 801a8ae:	4b5e      	ldr	r3, [pc, #376]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a8b0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	7d1a      	ldrb	r2, [r3, #20]
 801a8b6:	4b5c      	ldr	r3, [pc, #368]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a8b8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a8ba:	f7ff f896 	bl	80199ea <RadioStandby>
        RadioSetModem( radio_modem );
 801a8be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f7fe fa28 	bl	8018d18 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a8c8:	485a      	ldr	r0, [pc, #360]	@ (801aa34 <RadioSetTxGenericConfig+0x2f0>)
 801a8ca:	f000 fe85 	bl	801b5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a8ce:	485a      	ldr	r0, [pc, #360]	@ (801aa38 <RadioSetTxGenericConfig+0x2f4>)
 801a8d0:	f000 ff54 	bl	801b77c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a8d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f000 fa18 	bl	801ad0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a8de:	68bb      	ldr	r3, [r7, #8]
 801a8e0:	8a1b      	ldrh	r3, [r3, #16]
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f000 fa62 	bl	801adac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	899b      	ldrh	r3, [r3, #12]
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	f000 fa3d 	bl	801ad6c <SUBGRF_SetCrcPolynomial>
        break;
 801a8f2:	e13f      	b.n	801ab74 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a8f4:	68bb      	ldr	r3, [r7, #8]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d102      	bne.n	801a902 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801a8fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a900:	e14c      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	7c9b      	ldrb	r3, [r3, #18]
 801a906:	2b08      	cmp	r3, #8
 801a908:	d902      	bls.n	801a910 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801a90a:	f04f 33ff 	mov.w	r3, #4294967295
 801a90e:	e145      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a910:	68bb      	ldr	r3, [r7, #8]
 801a912:	6899      	ldr	r1, [r3, #8]
 801a914:	68bb      	ldr	r3, [r7, #8]
 801a916:	7c9b      	ldrb	r3, [r3, #18]
 801a918:	461a      	mov	r2, r3
 801a91a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a91e:	4618      	mov	r0, r3
 801a920:	f001 fc68 	bl	801c1f4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a924:	4b40      	ldr	r3, [pc, #256]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a926:	2200      	movs	r2, #0
 801a928:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a92c:	68bb      	ldr	r3, [r7, #8]
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	4a3d      	ldr	r2, [pc, #244]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a932:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	7cda      	ldrb	r2, [r3, #19]
 801a938:	4b3b      	ldr	r3, [pc, #236]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a93a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a93e:	68bb      	ldr	r3, [r7, #8]
 801a940:	699b      	ldr	r3, [r3, #24]
 801a942:	4a39      	ldr	r2, [pc, #228]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a944:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a946:	4b38      	ldr	r3, [pc, #224]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a948:	2200      	movs	r2, #0
 801a94a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a94c:	68bb      	ldr	r3, [r7, #8]
 801a94e:	685b      	ldr	r3, [r3, #4]
 801a950:	b29b      	uxth	r3, r3
 801a952:	00db      	lsls	r3, r3, #3
 801a954:	b29a      	uxth	r2, r3
 801a956:	4b34      	ldr	r3, [pc, #208]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a958:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a95a:	4b33      	ldr	r3, [pc, #204]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a95c:	2204      	movs	r2, #4
 801a95e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	7c9b      	ldrb	r3, [r3, #18]
 801a964:	00db      	lsls	r3, r3, #3
 801a966:	b2da      	uxtb	r2, r3
 801a968:	4b2f      	ldr	r3, [pc, #188]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a96a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a96c:	4b2e      	ldr	r3, [pc, #184]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a96e:	2200      	movs	r2, #0
 801a970:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	7d9b      	ldrb	r3, [r3, #22]
 801a976:	2b02      	cmp	r3, #2
 801a978:	d003      	beq.n	801a982 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	7d1b      	ldrb	r3, [r3, #20]
 801a97e:	2b02      	cmp	r3, #2
 801a980:	d12a      	bne.n	801a9d8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a982:	68bb      	ldr	r3, [r7, #8]
 801a984:	7d5b      	ldrb	r3, [r3, #21]
 801a986:	2bf1      	cmp	r3, #241	@ 0xf1
 801a988:	d00a      	beq.n	801a9a0 <RadioSetTxGenericConfig+0x25c>
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	7d5b      	ldrb	r3, [r3, #21]
 801a98e:	2bf2      	cmp	r3, #242	@ 0xf2
 801a990:	d006      	beq.n	801a9a0 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a992:	68bb      	ldr	r3, [r7, #8]
 801a994:	7d5b      	ldrb	r3, [r3, #21]
 801a996:	2b01      	cmp	r3, #1
 801a998:	d002      	beq.n	801a9a0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a99a:	f04f 33ff 	mov.w	r3, #4294967295
 801a99e:	e0fd      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a9a0:	2301      	movs	r3, #1
 801a9a2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a9a8:	4b20      	ldr	r3, [pc, #128]	@ (801aa2c <RadioSetTxGenericConfig+0x2e8>)
 801a9aa:	6819      	ldr	r1, [r3, #0]
 801a9ac:	f107 0314 	add.w	r3, r7, #20
 801a9b0:	4a1f      	ldr	r2, [pc, #124]	@ (801aa30 <RadioSetTxGenericConfig+0x2ec>)
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f001 fb1e 	bl	801bff4 <RFW_Init>
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d002      	beq.n	801a9c4 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801a9be:	f04f 33ff 	mov.w	r3, #4294967295
 801a9c2:	e0eb      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a9c4:	4b18      	ldr	r3, [pc, #96]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a9ca:	4b17      	ldr	r3, [pc, #92]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a9cc:	2201      	movs	r2, #1
 801a9ce:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a9d0:	4b15      	ldr	r3, [pc, #84]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	755a      	strb	r2, [r3, #21]
        {
 801a9d6:	e00b      	b.n	801a9f0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	7d5a      	ldrb	r2, [r3, #21]
 801a9dc:	4b12      	ldr	r3, [pc, #72]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a9de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	7d9a      	ldrb	r2, [r3, #22]
 801a9e4:	4b10      	ldr	r3, [pc, #64]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a9e6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	7d1a      	ldrb	r2, [r3, #20]
 801a9ec:	4b0e      	ldr	r3, [pc, #56]	@ (801aa28 <RadioSetTxGenericConfig+0x2e4>)
 801a9ee:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a9f0:	f7fe fffb 	bl	80199ea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a9f4:	2000      	movs	r0, #0
 801a9f6:	f7fe f98f 	bl	8018d18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a9fa:	480e      	ldr	r0, [pc, #56]	@ (801aa34 <RadioSetTxGenericConfig+0x2f0>)
 801a9fc:	f000 fdec 	bl	801b5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa00:	480d      	ldr	r0, [pc, #52]	@ (801aa38 <RadioSetTxGenericConfig+0x2f4>)
 801aa02:	f000 febb 	bl	801b77c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801aa06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801aa0a:	4618      	mov	r0, r3
 801aa0c:	f000 f97f 	bl	801ad0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801aa10:	68bb      	ldr	r3, [r7, #8]
 801aa12:	8a1b      	ldrh	r3, [r3, #16]
 801aa14:	4618      	mov	r0, r3
 801aa16:	f000 f9c9 	bl	801adac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801aa1a:	68bb      	ldr	r3, [r7, #8]
 801aa1c:	899b      	ldrh	r3, [r3, #12]
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f000 f9a4 	bl	801ad6c <SUBGRF_SetCrcPolynomial>
        break;
 801aa24:	e0a6      	b.n	801ab74 <RadioSetTxGenericConfig+0x430>
 801aa26:	bf00      	nop
 801aa28:	20001b78 	.word	0x20001b78
 801aa2c:	20001b74 	.word	0x20001b74
 801aa30:	20001bd4 	.word	0x20001bd4
 801aa34:	20001bb0 	.word	0x20001bb0
 801aa38:	20001b86 	.word	0x20001b86
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801aa3c:	4b59      	ldr	r3, [pc, #356]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aa3e:	2201      	movs	r2, #1
 801aa40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	781a      	ldrb	r2, [r3, #0]
 801aa48:	4b56      	ldr	r3, [pc, #344]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aa4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	785a      	ldrb	r2, [r3, #1]
 801aa52:	4b54      	ldr	r3, [pc, #336]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aa54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801aa58:	68bb      	ldr	r3, [r7, #8]
 801aa5a:	789a      	ldrb	r2, [r3, #2]
 801aa5c:	4b51      	ldr	r3, [pc, #324]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aa5e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801aa62:	68bb      	ldr	r3, [r7, #8]
 801aa64:	78db      	ldrb	r3, [r3, #3]
 801aa66:	2b02      	cmp	r3, #2
 801aa68:	d010      	beq.n	801aa8c <RadioSetTxGenericConfig+0x348>
 801aa6a:	2b02      	cmp	r3, #2
 801aa6c:	dc20      	bgt.n	801aab0 <RadioSetTxGenericConfig+0x36c>
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d002      	beq.n	801aa78 <RadioSetTxGenericConfig+0x334>
 801aa72:	2b01      	cmp	r3, #1
 801aa74:	d005      	beq.n	801aa82 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801aa76:	e01b      	b.n	801aab0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aa78:	4b4a      	ldr	r3, [pc, #296]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aa80:	e017      	b.n	801aab2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aa82:	4b48      	ldr	r3, [pc, #288]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aa84:	2201      	movs	r2, #1
 801aa86:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aa8a:	e012      	b.n	801aab2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801aa8c:	68bb      	ldr	r3, [r7, #8]
 801aa8e:	781b      	ldrb	r3, [r3, #0]
 801aa90:	2b0b      	cmp	r3, #11
 801aa92:	d003      	beq.n	801aa9c <RadioSetTxGenericConfig+0x358>
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	781b      	ldrb	r3, [r3, #0]
 801aa98:	2b0c      	cmp	r3, #12
 801aa9a:	d104      	bne.n	801aaa6 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aa9c:	4b41      	ldr	r3, [pc, #260]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aa9e:	2201      	movs	r2, #1
 801aaa0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aaa4:	e005      	b.n	801aab2 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aaa6:	4b3f      	ldr	r3, [pc, #252]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aaa8:	2200      	movs	r2, #0
 801aaaa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aaae:	e000      	b.n	801aab2 <RadioSetTxGenericConfig+0x36e>
            break;
 801aab0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801aab2:	4b3c      	ldr	r3, [pc, #240]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aab4:	2201      	movs	r2, #1
 801aab6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801aab8:	68bb      	ldr	r3, [r7, #8]
 801aaba:	889a      	ldrh	r2, [r3, #4]
 801aabc:	4b39      	ldr	r3, [pc, #228]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aabe:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	799a      	ldrb	r2, [r3, #6]
 801aac4:	4b37      	ldr	r3, [pc, #220]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aac6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	79da      	ldrb	r2, [r3, #7]
 801aacc:	4b35      	ldr	r3, [pc, #212]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aace:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801aad2:	68bb      	ldr	r3, [r7, #8]
 801aad4:	7a1a      	ldrb	r2, [r3, #8]
 801aad6:	4b33      	ldr	r3, [pc, #204]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aad8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801aadc:	f7fe ff85 	bl	80199ea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801aae0:	2001      	movs	r0, #1
 801aae2:	f7fe f919 	bl	8018d18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aae6:	4830      	ldr	r0, [pc, #192]	@ (801aba8 <RadioSetTxGenericConfig+0x464>)
 801aae8:	f000 fd76 	bl	801b5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aaec:	482f      	ldr	r0, [pc, #188]	@ (801abac <RadioSetTxGenericConfig+0x468>)
 801aaee:	f000 fe45 	bl	801b77c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801aaf2:	4b2c      	ldr	r3, [pc, #176]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801aaf4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801aaf8:	2b06      	cmp	r3, #6
 801aafa:	d10d      	bne.n	801ab18 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801aafc:	f640 0089 	movw	r0, #2185	@ 0x889
 801ab00:	f000 ffa6 	bl	801ba50 <SUBGRF_ReadRegister>
 801ab04:	4603      	mov	r3, r0
 801ab06:	f023 0304 	bic.w	r3, r3, #4
 801ab0a:	b2db      	uxtb	r3, r3
 801ab0c:	4619      	mov	r1, r3
 801ab0e:	f640 0089 	movw	r0, #2185	@ 0x889
 801ab12:	f000 ff7b 	bl	801ba0c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801ab16:	e02d      	b.n	801ab74 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ab18:	f640 0089 	movw	r0, #2185	@ 0x889
 801ab1c:	f000 ff98 	bl	801ba50 <SUBGRF_ReadRegister>
 801ab20:	4603      	mov	r3, r0
 801ab22:	f043 0304 	orr.w	r3, r3, #4
 801ab26:	b2db      	uxtb	r3, r3
 801ab28:	4619      	mov	r1, r3
 801ab2a:	f640 0089 	movw	r0, #2185	@ 0x889
 801ab2e:	f000 ff6d 	bl	801ba0c <SUBGRF_WriteRegister>
        break;
 801ab32:	e01f      	b.n	801ab74 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801ab34:	68bb      	ldr	r3, [r7, #8]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d004      	beq.n	801ab46 <RadioSetTxGenericConfig+0x402>
 801ab3c:	68bb      	ldr	r3, [r7, #8]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ab44:	d902      	bls.n	801ab4c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801ab46:	f04f 33ff 	mov.w	r3, #4294967295
 801ab4a:	e027      	b.n	801ab9c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801ab4c:	2003      	movs	r0, #3
 801ab4e:	f7fe f8e3 	bl	8018d18 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801ab52:	4b14      	ldr	r3, [pc, #80]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801ab54:	2202      	movs	r2, #2
 801ab56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	4a11      	ldr	r2, [pc, #68]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801ab60:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801ab62:	4b10      	ldr	r3, [pc, #64]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801ab64:	2216      	movs	r2, #22
 801ab66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ab6a:	480f      	ldr	r0, [pc, #60]	@ (801aba8 <RadioSetTxGenericConfig+0x464>)
 801ab6c:	f000 fd34 	bl	801b5d8 <SUBGRF_SetModulationParams>
        break;
 801ab70:	e000      	b.n	801ab74 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801ab72:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801ab74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ab78:	4618      	mov	r0, r3
 801ab7a:	f001 f87d 	bl	801bc78 <SUBGRF_SetRfTxPower>
 801ab7e:	4603      	mov	r3, r0
 801ab80:	461a      	mov	r2, r3
 801ab82:	4b08      	ldr	r3, [pc, #32]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801ab84:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801ab88:	4b06      	ldr	r3, [pc, #24]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801ab8a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801ab8e:	4618      	mov	r0, r3
 801ab90:	f001 fa51 	bl	801c036 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801ab94:	4a03      	ldr	r2, [pc, #12]	@ (801aba4 <RadioSetTxGenericConfig+0x460>)
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	6053      	str	r3, [r2, #4]
    return 0;
 801ab9a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	3738      	adds	r7, #56	@ 0x38
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}
 801aba4:	20001b78 	.word	0x20001b78
 801aba8:	20001bb0 	.word	0x20001bb0
 801abac:	20001b86 	.word	0x20001b86

0801abb0 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801abb0:	b480      	push	{r7}
 801abb2:	b085      	sub	sp, #20
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801abb8:	2301      	movs	r3, #1
 801abba:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801abbc:	7bfb      	ldrb	r3, [r7, #15]
}
 801abbe:	4618      	mov	r0, r3
 801abc0:	3714      	adds	r7, #20
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bc80      	pop	{r7}
 801abc6:	4770      	bx	lr

0801abc8 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801abc8:	b480      	push	{r7}
 801abca:	b083      	sub	sp, #12
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
 801abd0:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801abd2:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801abd4:	4618      	mov	r0, r3
 801abd6:	370c      	adds	r7, #12
 801abd8:	46bd      	mov	sp, r7
 801abda:	bc80      	pop	{r7}
 801abdc:	4770      	bx	lr
	...

0801abe0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b084      	sub	sp, #16
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d002      	beq.n	801abf4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801abee:	4a1d      	ldr	r2, [pc, #116]	@ (801ac64 <SUBGRF_Init+0x84>)
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801abf4:	f7e7 fcbc 	bl	8002570 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801abf8:	2002      	movs	r0, #2
 801abfa:	f001 f919 	bl	801be30 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801abfe:	4b1a      	ldr	r3, [pc, #104]	@ (801ac68 <SUBGRF_Init+0x88>)
 801ac00:	2200      	movs	r2, #0
 801ac02:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801ac04:	2000      	movs	r0, #0
 801ac06:	f000 f97d 	bl	801af04 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801ac0a:	f7f1 fab5 	bl	800c178 <RBI_IsTCXO>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	2b01      	cmp	r3, #1
 801ac12:	d10e      	bne.n	801ac32 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801ac14:	2140      	movs	r1, #64	@ 0x40
 801ac16:	2001      	movs	r0, #1
 801ac18:	f000 fb82 	bl	801b320 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801ac1c:	2100      	movs	r1, #0
 801ac1e:	f640 1011 	movw	r0, #2321	@ 0x911
 801ac22:	f000 fef3 	bl	801ba0c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801ac26:	237f      	movs	r3, #127	@ 0x7f
 801ac28:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801ac2a:	7b38      	ldrb	r0, [r7, #12]
 801ac2c:	f000 fa8b 	bl	801b146 <SUBGRF_Calibrate>
 801ac30:	e009      	b.n	801ac46 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ac32:	2120      	movs	r1, #32
 801ac34:	f640 1011 	movw	r0, #2321	@ 0x911
 801ac38:	f000 fee8 	bl	801ba0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ac3c:	2120      	movs	r1, #32
 801ac3e:	f640 1012 	movw	r0, #2322	@ 0x912
 801ac42:	f000 fee3 	bl	801ba0c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ac46:	210e      	movs	r1, #14
 801ac48:	f640 101f 	movw	r0, #2335	@ 0x91f
 801ac4c:	f000 fede 	bl	801ba0c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801ac50:	f7f1 fa76 	bl	800c140 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801ac54:	4b05      	ldr	r3, [pc, #20]	@ (801ac6c <SUBGRF_Init+0x8c>)
 801ac56:	2201      	movs	r2, #1
 801ac58:	701a      	strb	r2, [r3, #0]
}
 801ac5a:	bf00      	nop
 801ac5c:	3710      	adds	r7, #16
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}
 801ac62:	bf00      	nop
 801ac64:	20001c10 	.word	0x20001c10
 801ac68:	20001c0c 	.word	0x20001c0c
 801ac6c:	20001c04 	.word	0x20001c04

0801ac70 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801ac70:	b480      	push	{r7}
 801ac72:	af00      	add	r7, sp, #0
    return OperatingMode;
 801ac74:	4b02      	ldr	r3, [pc, #8]	@ (801ac80 <SUBGRF_GetOperatingMode+0x10>)
 801ac76:	781b      	ldrb	r3, [r3, #0]
}
 801ac78:	4618      	mov	r0, r3
 801ac7a:	46bd      	mov	sp, r7
 801ac7c:	bc80      	pop	{r7}
 801ac7e:	4770      	bx	lr
 801ac80:	20001c04 	.word	0x20001c04

0801ac84 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b082      	sub	sp, #8
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
 801ac8c:	460b      	mov	r3, r1
 801ac8e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801ac90:	78fb      	ldrb	r3, [r7, #3]
 801ac92:	461a      	mov	r2, r3
 801ac94:	6879      	ldr	r1, [r7, #4]
 801ac96:	2000      	movs	r0, #0
 801ac98:	f000 ff3e 	bl	801bb18 <SUBGRF_WriteBuffer>
}
 801ac9c:	bf00      	nop
 801ac9e:	3708      	adds	r7, #8
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bd80      	pop	{r7, pc}

0801aca4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b086      	sub	sp, #24
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	60f8      	str	r0, [r7, #12]
 801acac:	60b9      	str	r1, [r7, #8]
 801acae:	4613      	mov	r3, r2
 801acb0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801acb2:	2300      	movs	r3, #0
 801acb4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801acb6:	f107 0317 	add.w	r3, r7, #23
 801acba:	4619      	mov	r1, r3
 801acbc:	68b8      	ldr	r0, [r7, #8]
 801acbe:	f000 fe27 	bl	801b910 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801acc2:	68bb      	ldr	r3, [r7, #8]
 801acc4:	781b      	ldrb	r3, [r3, #0]
 801acc6:	79fa      	ldrb	r2, [r7, #7]
 801acc8:	429a      	cmp	r2, r3
 801acca:	d201      	bcs.n	801acd0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801accc:	2301      	movs	r3, #1
 801acce:	e007      	b.n	801ace0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801acd0:	7df8      	ldrb	r0, [r7, #23]
 801acd2:	68bb      	ldr	r3, [r7, #8]
 801acd4:	781b      	ldrb	r3, [r3, #0]
 801acd6:	461a      	mov	r2, r3
 801acd8:	68f9      	ldr	r1, [r7, #12]
 801acda:	f000 ff3f 	bl	801bb5c <SUBGRF_ReadBuffer>

    return 0;
 801acde:	2300      	movs	r3, #0
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3718      	adds	r7, #24
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}

0801ace8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b084      	sub	sp, #16
 801acec:	af00      	add	r7, sp, #0
 801acee:	60f8      	str	r0, [r7, #12]
 801acf0:	460b      	mov	r3, r1
 801acf2:	607a      	str	r2, [r7, #4]
 801acf4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801acf6:	7afb      	ldrb	r3, [r7, #11]
 801acf8:	4619      	mov	r1, r3
 801acfa:	68f8      	ldr	r0, [r7, #12]
 801acfc:	f7ff ffc2 	bl	801ac84 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801ad00:	6878      	ldr	r0, [r7, #4]
 801ad02:	f000 f91b 	bl	801af3c <SUBGRF_SetTx>
}
 801ad06:	bf00      	nop
 801ad08:	3710      	adds	r7, #16
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	bd80      	pop	{r7, pc}

0801ad0e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801ad0e:	b580      	push	{r7, lr}
 801ad10:	b082      	sub	sp, #8
 801ad12:	af00      	add	r7, sp, #0
 801ad14:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801ad16:	2208      	movs	r2, #8
 801ad18:	6879      	ldr	r1, [r7, #4]
 801ad1a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801ad1e:	f000 feb7 	bl	801ba90 <SUBGRF_WriteRegisters>
    return 0;
 801ad22:	2300      	movs	r3, #0
}
 801ad24:	4618      	mov	r0, r3
 801ad26:	3708      	adds	r7, #8
 801ad28:	46bd      	mov	sp, r7
 801ad2a:	bd80      	pop	{r7, pc}

0801ad2c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b084      	sub	sp, #16
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	4603      	mov	r3, r0
 801ad34:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801ad36:	88fb      	ldrh	r3, [r7, #6]
 801ad38:	0a1b      	lsrs	r3, r3, #8
 801ad3a:	b29b      	uxth	r3, r3
 801ad3c:	b2db      	uxtb	r3, r3
 801ad3e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801ad40:	88fb      	ldrh	r3, [r7, #6]
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ad46:	f000 fb6f 	bl	801b428 <SUBGRF_GetPacketType>
 801ad4a:	4603      	mov	r3, r0
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d108      	bne.n	801ad62 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801ad50:	f107 030c 	add.w	r3, r7, #12
 801ad54:	2202      	movs	r2, #2
 801ad56:	4619      	mov	r1, r3
 801ad58:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801ad5c:	f000 fe98 	bl	801ba90 <SUBGRF_WriteRegisters>
            break;
 801ad60:	e000      	b.n	801ad64 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801ad62:	bf00      	nop
    }
}
 801ad64:	bf00      	nop
 801ad66:	3710      	adds	r7, #16
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bd80      	pop	{r7, pc}

0801ad6c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b084      	sub	sp, #16
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	4603      	mov	r3, r0
 801ad74:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801ad76:	88fb      	ldrh	r3, [r7, #6]
 801ad78:	0a1b      	lsrs	r3, r3, #8
 801ad7a:	b29b      	uxth	r3, r3
 801ad7c:	b2db      	uxtb	r3, r3
 801ad7e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801ad80:	88fb      	ldrh	r3, [r7, #6]
 801ad82:	b2db      	uxtb	r3, r3
 801ad84:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ad86:	f000 fb4f 	bl	801b428 <SUBGRF_GetPacketType>
 801ad8a:	4603      	mov	r3, r0
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d108      	bne.n	801ada2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801ad90:	f107 030c 	add.w	r3, r7, #12
 801ad94:	2202      	movs	r2, #2
 801ad96:	4619      	mov	r1, r3
 801ad98:	f240 60be 	movw	r0, #1726	@ 0x6be
 801ad9c:	f000 fe78 	bl	801ba90 <SUBGRF_WriteRegisters>
            break;
 801ada0:	e000      	b.n	801ada4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801ada2:	bf00      	nop
    }
}
 801ada4:	bf00      	nop
 801ada6:	3710      	adds	r7, #16
 801ada8:	46bd      	mov	sp, r7
 801adaa:	bd80      	pop	{r7, pc}

0801adac <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b084      	sub	sp, #16
 801adb0:	af00      	add	r7, sp, #0
 801adb2:	4603      	mov	r3, r0
 801adb4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801adb6:	2300      	movs	r3, #0
 801adb8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801adba:	f000 fb35 	bl	801b428 <SUBGRF_GetPacketType>
 801adbe:	4603      	mov	r3, r0
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d121      	bne.n	801ae08 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801adc4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801adc8:	f000 fe42 	bl	801ba50 <SUBGRF_ReadRegister>
 801adcc:	4603      	mov	r3, r0
 801adce:	f023 0301 	bic.w	r3, r3, #1
 801add2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801add4:	88fb      	ldrh	r3, [r7, #6]
 801add6:	0a1b      	lsrs	r3, r3, #8
 801add8:	b29b      	uxth	r3, r3
 801adda:	b25b      	sxtb	r3, r3
 801addc:	f003 0301 	and.w	r3, r3, #1
 801ade0:	b25a      	sxtb	r2, r3
 801ade2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ade6:	4313      	orrs	r3, r2
 801ade8:	b25b      	sxtb	r3, r3
 801adea:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801adec:	7bfb      	ldrb	r3, [r7, #15]
 801adee:	4619      	mov	r1, r3
 801adf0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801adf4:	f000 fe0a 	bl	801ba0c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801adf8:	88fb      	ldrh	r3, [r7, #6]
 801adfa:	b2db      	uxtb	r3, r3
 801adfc:	4619      	mov	r1, r3
 801adfe:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801ae02:	f000 fe03 	bl	801ba0c <SUBGRF_WriteRegister>
            break;
 801ae06:	e000      	b.n	801ae0a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801ae08:	bf00      	nop
    }
}
 801ae0a:	bf00      	nop
 801ae0c:	3710      	adds	r7, #16
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	bd80      	pop	{r7, pc}

0801ae12 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801ae12:	b580      	push	{r7, lr}
 801ae14:	b082      	sub	sp, #8
 801ae16:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801ae18:	2300      	movs	r3, #0
 801ae1a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801ae20:	2300      	movs	r3, #0
 801ae22:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801ae24:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801ae28:	f000 fe12 	bl	801ba50 <SUBGRF_ReadRegister>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801ae30:	79fb      	ldrb	r3, [r7, #7]
 801ae32:	f023 0301 	bic.w	r3, r3, #1
 801ae36:	b2db      	uxtb	r3, r3
 801ae38:	4619      	mov	r1, r3
 801ae3a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801ae3e:	f000 fde5 	bl	801ba0c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801ae42:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801ae46:	f000 fe03 	bl	801ba50 <SUBGRF_ReadRegister>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801ae4e:	79bb      	ldrb	r3, [r7, #6]
 801ae50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ae54:	b2db      	uxtb	r3, r3
 801ae56:	4619      	mov	r1, r3
 801ae58:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801ae5c:	f000 fdd6 	bl	801ba0c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801ae60:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801ae64:	f000 f88a 	bl	801af7c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801ae68:	463b      	mov	r3, r7
 801ae6a:	2204      	movs	r2, #4
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	f640 0019 	movw	r0, #2073	@ 0x819
 801ae72:	f000 fe2f 	bl	801bad4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801ae76:	2000      	movs	r0, #0
 801ae78:	f000 f844 	bl	801af04 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801ae7c:	79fb      	ldrb	r3, [r7, #7]
 801ae7e:	4619      	mov	r1, r3
 801ae80:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801ae84:	f000 fdc2 	bl	801ba0c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801ae88:	79bb      	ldrb	r3, [r7, #6]
 801ae8a:	4619      	mov	r1, r3
 801ae8c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801ae90:	f000 fdbc 	bl	801ba0c <SUBGRF_WriteRegister>

    return number;
 801ae94:	683b      	ldr	r3, [r7, #0]
}
 801ae96:	4618      	mov	r0, r3
 801ae98:	3708      	adds	r7, #8
 801ae9a:	46bd      	mov	sp, r7
 801ae9c:	bd80      	pop	{r7, pc}
	...

0801aea0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b084      	sub	sp, #16
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801aea8:	2000      	movs	r0, #0
 801aeaa:	f7f1 f950 	bl	800c14e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801aeae:	2002      	movs	r0, #2
 801aeb0:	f000 ffbe 	bl	801be30 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aeb4:	793b      	ldrb	r3, [r7, #4]
 801aeb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801aeba:	b2db      	uxtb	r3, r3
 801aebc:	009b      	lsls	r3, r3, #2
 801aebe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801aec0:	793b      	ldrb	r3, [r7, #4]
 801aec2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801aec6:	b2db      	uxtb	r3, r3
 801aec8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aeca:	b25b      	sxtb	r3, r3
 801aecc:	4313      	orrs	r3, r2
 801aece:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801aed0:	793b      	ldrb	r3, [r7, #4]
 801aed2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801aed6:	b2db      	uxtb	r3, r3
 801aed8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801aeda:	4313      	orrs	r3, r2
 801aedc:	b25b      	sxtb	r3, r3
 801aede:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aee0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801aee2:	f107 030f 	add.w	r3, r7, #15
 801aee6:	2201      	movs	r2, #1
 801aee8:	4619      	mov	r1, r3
 801aeea:	2084      	movs	r0, #132	@ 0x84
 801aeec:	f000 fe58 	bl	801bba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801aef0:	4b03      	ldr	r3, [pc, #12]	@ (801af00 <SUBGRF_SetSleep+0x60>)
 801aef2:	2200      	movs	r2, #0
 801aef4:	701a      	strb	r2, [r3, #0]
}
 801aef6:	bf00      	nop
 801aef8:	3710      	adds	r7, #16
 801aefa:	46bd      	mov	sp, r7
 801aefc:	bd80      	pop	{r7, pc}
 801aefe:	bf00      	nop
 801af00:	20001c04 	.word	0x20001c04

0801af04 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b082      	sub	sp, #8
 801af08:	af00      	add	r7, sp, #0
 801af0a:	4603      	mov	r3, r0
 801af0c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801af0e:	1dfb      	adds	r3, r7, #7
 801af10:	2201      	movs	r2, #1
 801af12:	4619      	mov	r1, r3
 801af14:	2080      	movs	r0, #128	@ 0x80
 801af16:	f000 fe43 	bl	801bba0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801af1a:	79fb      	ldrb	r3, [r7, #7]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d103      	bne.n	801af28 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801af20:	4b05      	ldr	r3, [pc, #20]	@ (801af38 <SUBGRF_SetStandby+0x34>)
 801af22:	2201      	movs	r2, #1
 801af24:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801af26:	e002      	b.n	801af2e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801af28:	4b03      	ldr	r3, [pc, #12]	@ (801af38 <SUBGRF_SetStandby+0x34>)
 801af2a:	2202      	movs	r2, #2
 801af2c:	701a      	strb	r2, [r3, #0]
}
 801af2e:	bf00      	nop
 801af30:	3708      	adds	r7, #8
 801af32:	46bd      	mov	sp, r7
 801af34:	bd80      	pop	{r7, pc}
 801af36:	bf00      	nop
 801af38:	20001c04 	.word	0x20001c04

0801af3c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b084      	sub	sp, #16
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801af44:	4b0c      	ldr	r3, [pc, #48]	@ (801af78 <SUBGRF_SetTx+0x3c>)
 801af46:	2204      	movs	r2, #4
 801af48:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	0c1b      	lsrs	r3, r3, #16
 801af4e:	b2db      	uxtb	r3, r3
 801af50:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	0a1b      	lsrs	r3, r3, #8
 801af56:	b2db      	uxtb	r3, r3
 801af58:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	b2db      	uxtb	r3, r3
 801af5e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801af60:	f107 030c 	add.w	r3, r7, #12
 801af64:	2203      	movs	r2, #3
 801af66:	4619      	mov	r1, r3
 801af68:	2083      	movs	r0, #131	@ 0x83
 801af6a:	f000 fe19 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801af6e:	bf00      	nop
 801af70:	3710      	adds	r7, #16
 801af72:	46bd      	mov	sp, r7
 801af74:	bd80      	pop	{r7, pc}
 801af76:	bf00      	nop
 801af78:	20001c04 	.word	0x20001c04

0801af7c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b084      	sub	sp, #16
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801af84:	4b0c      	ldr	r3, [pc, #48]	@ (801afb8 <SUBGRF_SetRx+0x3c>)
 801af86:	2205      	movs	r2, #5
 801af88:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	0c1b      	lsrs	r3, r3, #16
 801af8e:	b2db      	uxtb	r3, r3
 801af90:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	0a1b      	lsrs	r3, r3, #8
 801af96:	b2db      	uxtb	r3, r3
 801af98:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	b2db      	uxtb	r3, r3
 801af9e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801afa0:	f107 030c 	add.w	r3, r7, #12
 801afa4:	2203      	movs	r2, #3
 801afa6:	4619      	mov	r1, r3
 801afa8:	2082      	movs	r0, #130	@ 0x82
 801afaa:	f000 fdf9 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801afae:	bf00      	nop
 801afb0:	3710      	adds	r7, #16
 801afb2:	46bd      	mov	sp, r7
 801afb4:	bd80      	pop	{r7, pc}
 801afb6:	bf00      	nop
 801afb8:	20001c04 	.word	0x20001c04

0801afbc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	b084      	sub	sp, #16
 801afc0:	af00      	add	r7, sp, #0
 801afc2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801afc4:	4b0e      	ldr	r3, [pc, #56]	@ (801b000 <SUBGRF_SetRxBoosted+0x44>)
 801afc6:	2205      	movs	r2, #5
 801afc8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801afca:	2197      	movs	r1, #151	@ 0x97
 801afcc:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801afd0:	f000 fd1c 	bl	801ba0c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	0c1b      	lsrs	r3, r3, #16
 801afd8:	b2db      	uxtb	r3, r3
 801afda:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	0a1b      	lsrs	r3, r3, #8
 801afe0:	b2db      	uxtb	r3, r3
 801afe2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	b2db      	uxtb	r3, r3
 801afe8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801afea:	f107 030c 	add.w	r3, r7, #12
 801afee:	2203      	movs	r2, #3
 801aff0:	4619      	mov	r1, r3
 801aff2:	2082      	movs	r0, #130	@ 0x82
 801aff4:	f000 fdd4 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801aff8:	bf00      	nop
 801affa:	3710      	adds	r7, #16
 801affc:	46bd      	mov	sp, r7
 801affe:	bd80      	pop	{r7, pc}
 801b000:	20001c04 	.word	0x20001c04

0801b004 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b084      	sub	sp, #16
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
 801b00c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	0c1b      	lsrs	r3, r3, #16
 801b012:	b2db      	uxtb	r3, r3
 801b014:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	0a1b      	lsrs	r3, r3, #8
 801b01a:	b2db      	uxtb	r3, r3
 801b01c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	b2db      	uxtb	r3, r3
 801b022:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	0c1b      	lsrs	r3, r3, #16
 801b028:	b2db      	uxtb	r3, r3
 801b02a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b02c:	683b      	ldr	r3, [r7, #0]
 801b02e:	0a1b      	lsrs	r3, r3, #8
 801b030:	b2db      	uxtb	r3, r3
 801b032:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b034:	683b      	ldr	r3, [r7, #0]
 801b036:	b2db      	uxtb	r3, r3
 801b038:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b03a:	f107 0308 	add.w	r3, r7, #8
 801b03e:	2206      	movs	r2, #6
 801b040:	4619      	mov	r1, r3
 801b042:	2094      	movs	r0, #148	@ 0x94
 801b044:	f000 fdac 	bl	801bba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b048:	4b03      	ldr	r3, [pc, #12]	@ (801b058 <SUBGRF_SetRxDutyCycle+0x54>)
 801b04a:	2206      	movs	r2, #6
 801b04c:	701a      	strb	r2, [r3, #0]
}
 801b04e:	bf00      	nop
 801b050:	3710      	adds	r7, #16
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}
 801b056:	bf00      	nop
 801b058:	20001c04 	.word	0x20001c04

0801b05c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b060:	2200      	movs	r2, #0
 801b062:	2100      	movs	r1, #0
 801b064:	20c5      	movs	r0, #197	@ 0xc5
 801b066:	f000 fd9b 	bl	801bba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b06a:	4b02      	ldr	r3, [pc, #8]	@ (801b074 <SUBGRF_SetCad+0x18>)
 801b06c:	2207      	movs	r2, #7
 801b06e:	701a      	strb	r2, [r3, #0]
}
 801b070:	bf00      	nop
 801b072:	bd80      	pop	{r7, pc}
 801b074:	20001c04 	.word	0x20001c04

0801b078 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b07c:	2200      	movs	r2, #0
 801b07e:	2100      	movs	r1, #0
 801b080:	20d1      	movs	r0, #209	@ 0xd1
 801b082:	f000 fd8d 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b086:	bf00      	nop
 801b088:	bd80      	pop	{r7, pc}

0801b08a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b08a:	b580      	push	{r7, lr}
 801b08c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b08e:	2200      	movs	r2, #0
 801b090:	2100      	movs	r1, #0
 801b092:	20d2      	movs	r0, #210	@ 0xd2
 801b094:	f000 fd84 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b098:	bf00      	nop
 801b09a:	bd80      	pop	{r7, pc}

0801b09c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b082      	sub	sp, #8
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b0a6:	1dfb      	adds	r3, r7, #7
 801b0a8:	2201      	movs	r2, #1
 801b0aa:	4619      	mov	r1, r3
 801b0ac:	209f      	movs	r0, #159	@ 0x9f
 801b0ae:	f000 fd77 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b0b2:	bf00      	nop
 801b0b4:	3708      	adds	r7, #8
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bd80      	pop	{r7, pc}

0801b0ba <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b0ba:	b580      	push	{r7, lr}
 801b0bc:	b084      	sub	sp, #16
 801b0be:	af00      	add	r7, sp, #0
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b0c4:	1dfb      	adds	r3, r7, #7
 801b0c6:	2201      	movs	r2, #1
 801b0c8:	4619      	mov	r1, r3
 801b0ca:	20a0      	movs	r0, #160	@ 0xa0
 801b0cc:	f000 fd68 	bl	801bba0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b0d0:	79fb      	ldrb	r3, [r7, #7]
 801b0d2:	2b3f      	cmp	r3, #63	@ 0x3f
 801b0d4:	d91c      	bls.n	801b110 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b0d6:	79fb      	ldrb	r3, [r7, #7]
 801b0d8:	085b      	lsrs	r3, r3, #1
 801b0da:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b0dc:	2300      	movs	r3, #0
 801b0de:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b0e0:	2300      	movs	r3, #0
 801b0e2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b0e4:	e005      	b.n	801b0f2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b0e6:	7bfb      	ldrb	r3, [r7, #15]
 801b0e8:	089b      	lsrs	r3, r3, #2
 801b0ea:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b0ec:	7bbb      	ldrb	r3, [r7, #14]
 801b0ee:	3301      	adds	r3, #1
 801b0f0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b0f2:	7bfb      	ldrb	r3, [r7, #15]
 801b0f4:	2b1f      	cmp	r3, #31
 801b0f6:	d8f6      	bhi.n	801b0e6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b0f8:	7bfb      	ldrb	r3, [r7, #15]
 801b0fa:	00db      	lsls	r3, r3, #3
 801b0fc:	b2da      	uxtb	r2, r3
 801b0fe:	7bbb      	ldrb	r3, [r7, #14]
 801b100:	4413      	add	r3, r2
 801b102:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b104:	7b7b      	ldrb	r3, [r7, #13]
 801b106:	4619      	mov	r1, r3
 801b108:	f240 7006 	movw	r0, #1798	@ 0x706
 801b10c:	f000 fc7e 	bl	801ba0c <SUBGRF_WriteRegister>
    }
}
 801b110:	bf00      	nop
 801b112:	3710      	adds	r7, #16
 801b114:	46bd      	mov	sp, r7
 801b116:	bd80      	pop	{r7, pc}

0801b118 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b118:	b580      	push	{r7, lr}
 801b11a:	b082      	sub	sp, #8
 801b11c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b11e:	f7f1 f832 	bl	800c186 <RBI_IsDCDC>
 801b122:	4603      	mov	r3, r0
 801b124:	2b01      	cmp	r3, #1
 801b126:	d102      	bne.n	801b12e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b128:	2301      	movs	r3, #1
 801b12a:	71fb      	strb	r3, [r7, #7]
 801b12c:	e001      	b.n	801b132 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b12e:	2300      	movs	r3, #0
 801b130:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b132:	1dfb      	adds	r3, r7, #7
 801b134:	2201      	movs	r2, #1
 801b136:	4619      	mov	r1, r3
 801b138:	2096      	movs	r0, #150	@ 0x96
 801b13a:	f000 fd31 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b13e:	bf00      	nop
 801b140:	3708      	adds	r7, #8
 801b142:	46bd      	mov	sp, r7
 801b144:	bd80      	pop	{r7, pc}

0801b146 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b146:	b580      	push	{r7, lr}
 801b148:	b084      	sub	sp, #16
 801b14a:	af00      	add	r7, sp, #0
 801b14c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b14e:	793b      	ldrb	r3, [r7, #4]
 801b150:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b154:	b2db      	uxtb	r3, r3
 801b156:	019b      	lsls	r3, r3, #6
 801b158:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b15a:	793b      	ldrb	r3, [r7, #4]
 801b15c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b160:	b2db      	uxtb	r3, r3
 801b162:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b164:	b25b      	sxtb	r3, r3
 801b166:	4313      	orrs	r3, r2
 801b168:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b16a:	793b      	ldrb	r3, [r7, #4]
 801b16c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b170:	b2db      	uxtb	r3, r3
 801b172:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b174:	b25b      	sxtb	r3, r3
 801b176:	4313      	orrs	r3, r2
 801b178:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b17a:	793b      	ldrb	r3, [r7, #4]
 801b17c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b180:	b2db      	uxtb	r3, r3
 801b182:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b184:	b25b      	sxtb	r3, r3
 801b186:	4313      	orrs	r3, r2
 801b188:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b18a:	793b      	ldrb	r3, [r7, #4]
 801b18c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b190:	b2db      	uxtb	r3, r3
 801b192:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b194:	b25b      	sxtb	r3, r3
 801b196:	4313      	orrs	r3, r2
 801b198:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b19a:	793b      	ldrb	r3, [r7, #4]
 801b19c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b1a0:	b2db      	uxtb	r3, r3
 801b1a2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b1a4:	b25b      	sxtb	r3, r3
 801b1a6:	4313      	orrs	r3, r2
 801b1a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b1aa:	793b      	ldrb	r3, [r7, #4]
 801b1ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b1b0:	b2db      	uxtb	r3, r3
 801b1b2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b1b4:	4313      	orrs	r3, r2
 801b1b6:	b25b      	sxtb	r3, r3
 801b1b8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b1ba:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b1bc:	f107 030f 	add.w	r3, r7, #15
 801b1c0:	2201      	movs	r2, #1
 801b1c2:	4619      	mov	r1, r3
 801b1c4:	2089      	movs	r0, #137	@ 0x89
 801b1c6:	f000 fceb 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b1ca:	bf00      	nop
 801b1cc:	3710      	adds	r7, #16
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	bd80      	pop	{r7, pc}
	...

0801b1d4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b084      	sub	sp, #16
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	4a1d      	ldr	r2, [pc, #116]	@ (801b254 <SUBGRF_CalibrateImage+0x80>)
 801b1e0:	4293      	cmp	r3, r2
 801b1e2:	d904      	bls.n	801b1ee <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b1e4:	23e1      	movs	r3, #225	@ 0xe1
 801b1e6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b1e8:	23e9      	movs	r3, #233	@ 0xe9
 801b1ea:	737b      	strb	r3, [r7, #13]
 801b1ec:	e027      	b.n	801b23e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	4a19      	ldr	r2, [pc, #100]	@ (801b258 <SUBGRF_CalibrateImage+0x84>)
 801b1f2:	4293      	cmp	r3, r2
 801b1f4:	d904      	bls.n	801b200 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b1f6:	23d7      	movs	r3, #215	@ 0xd7
 801b1f8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b1fa:	23db      	movs	r3, #219	@ 0xdb
 801b1fc:	737b      	strb	r3, [r7, #13]
 801b1fe:	e01e      	b.n	801b23e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	4a16      	ldr	r2, [pc, #88]	@ (801b25c <SUBGRF_CalibrateImage+0x88>)
 801b204:	4293      	cmp	r3, r2
 801b206:	d904      	bls.n	801b212 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b208:	23c1      	movs	r3, #193	@ 0xc1
 801b20a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b20c:	23c5      	movs	r3, #197	@ 0xc5
 801b20e:	737b      	strb	r3, [r7, #13]
 801b210:	e015      	b.n	801b23e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	4a12      	ldr	r2, [pc, #72]	@ (801b260 <SUBGRF_CalibrateImage+0x8c>)
 801b216:	4293      	cmp	r3, r2
 801b218:	d904      	bls.n	801b224 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b21a:	2375      	movs	r3, #117	@ 0x75
 801b21c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b21e:	2381      	movs	r3, #129	@ 0x81
 801b220:	737b      	strb	r3, [r7, #13]
 801b222:	e00c      	b.n	801b23e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	4a0f      	ldr	r2, [pc, #60]	@ (801b264 <SUBGRF_CalibrateImage+0x90>)
 801b228:	4293      	cmp	r3, r2
 801b22a:	d904      	bls.n	801b236 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b22c:	236b      	movs	r3, #107	@ 0x6b
 801b22e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b230:	236f      	movs	r3, #111	@ 0x6f
 801b232:	737b      	strb	r3, [r7, #13]
 801b234:	e003      	b.n	801b23e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b236:	2329      	movs	r3, #41	@ 0x29
 801b238:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b23a:	232b      	movs	r3, #43	@ 0x2b
 801b23c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b23e:	f107 030c 	add.w	r3, r7, #12
 801b242:	2202      	movs	r2, #2
 801b244:	4619      	mov	r1, r3
 801b246:	2098      	movs	r0, #152	@ 0x98
 801b248:	f000 fcaa 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b24c:	bf00      	nop
 801b24e:	3710      	adds	r7, #16
 801b250:	46bd      	mov	sp, r7
 801b252:	bd80      	pop	{r7, pc}
 801b254:	35a4e900 	.word	0x35a4e900
 801b258:	32a9f880 	.word	0x32a9f880
 801b25c:	2de54480 	.word	0x2de54480
 801b260:	1b6b0b00 	.word	0x1b6b0b00
 801b264:	1954fc40 	.word	0x1954fc40

0801b268 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b268:	b590      	push	{r4, r7, lr}
 801b26a:	b085      	sub	sp, #20
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	4604      	mov	r4, r0
 801b270:	4608      	mov	r0, r1
 801b272:	4611      	mov	r1, r2
 801b274:	461a      	mov	r2, r3
 801b276:	4623      	mov	r3, r4
 801b278:	71fb      	strb	r3, [r7, #7]
 801b27a:	4603      	mov	r3, r0
 801b27c:	71bb      	strb	r3, [r7, #6]
 801b27e:	460b      	mov	r3, r1
 801b280:	717b      	strb	r3, [r7, #5]
 801b282:	4613      	mov	r3, r2
 801b284:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b286:	79fb      	ldrb	r3, [r7, #7]
 801b288:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b28a:	79bb      	ldrb	r3, [r7, #6]
 801b28c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b28e:	797b      	ldrb	r3, [r7, #5]
 801b290:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b292:	793b      	ldrb	r3, [r7, #4]
 801b294:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b296:	f107 030c 	add.w	r3, r7, #12
 801b29a:	2204      	movs	r2, #4
 801b29c:	4619      	mov	r1, r3
 801b29e:	2095      	movs	r0, #149	@ 0x95
 801b2a0:	f000 fc7e 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b2a4:	bf00      	nop
 801b2a6:	3714      	adds	r7, #20
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	bd90      	pop	{r4, r7, pc}

0801b2ac <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b2ac:	b590      	push	{r4, r7, lr}
 801b2ae:	b085      	sub	sp, #20
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	4604      	mov	r4, r0
 801b2b4:	4608      	mov	r0, r1
 801b2b6:	4611      	mov	r1, r2
 801b2b8:	461a      	mov	r2, r3
 801b2ba:	4623      	mov	r3, r4
 801b2bc:	80fb      	strh	r3, [r7, #6]
 801b2be:	4603      	mov	r3, r0
 801b2c0:	80bb      	strh	r3, [r7, #4]
 801b2c2:	460b      	mov	r3, r1
 801b2c4:	807b      	strh	r3, [r7, #2]
 801b2c6:	4613      	mov	r3, r2
 801b2c8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b2ca:	88fb      	ldrh	r3, [r7, #6]
 801b2cc:	0a1b      	lsrs	r3, r3, #8
 801b2ce:	b29b      	uxth	r3, r3
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b2d4:	88fb      	ldrh	r3, [r7, #6]
 801b2d6:	b2db      	uxtb	r3, r3
 801b2d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b2da:	88bb      	ldrh	r3, [r7, #4]
 801b2dc:	0a1b      	lsrs	r3, r3, #8
 801b2de:	b29b      	uxth	r3, r3
 801b2e0:	b2db      	uxtb	r3, r3
 801b2e2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b2e4:	88bb      	ldrh	r3, [r7, #4]
 801b2e6:	b2db      	uxtb	r3, r3
 801b2e8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b2ea:	887b      	ldrh	r3, [r7, #2]
 801b2ec:	0a1b      	lsrs	r3, r3, #8
 801b2ee:	b29b      	uxth	r3, r3
 801b2f0:	b2db      	uxtb	r3, r3
 801b2f2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b2f4:	887b      	ldrh	r3, [r7, #2]
 801b2f6:	b2db      	uxtb	r3, r3
 801b2f8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b2fa:	883b      	ldrh	r3, [r7, #0]
 801b2fc:	0a1b      	lsrs	r3, r3, #8
 801b2fe:	b29b      	uxth	r3, r3
 801b300:	b2db      	uxtb	r3, r3
 801b302:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b304:	883b      	ldrh	r3, [r7, #0]
 801b306:	b2db      	uxtb	r3, r3
 801b308:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b30a:	f107 0308 	add.w	r3, r7, #8
 801b30e:	2208      	movs	r2, #8
 801b310:	4619      	mov	r1, r3
 801b312:	2008      	movs	r0, #8
 801b314:	f000 fc44 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b318:	bf00      	nop
 801b31a:	3714      	adds	r7, #20
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bd90      	pop	{r4, r7, pc}

0801b320 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b084      	sub	sp, #16
 801b324:	af00      	add	r7, sp, #0
 801b326:	4603      	mov	r3, r0
 801b328:	6039      	str	r1, [r7, #0]
 801b32a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b32c:	79fb      	ldrb	r3, [r7, #7]
 801b32e:	f003 0307 	and.w	r3, r3, #7
 801b332:	b2db      	uxtb	r3, r3
 801b334:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b336:	683b      	ldr	r3, [r7, #0]
 801b338:	0c1b      	lsrs	r3, r3, #16
 801b33a:	b2db      	uxtb	r3, r3
 801b33c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b33e:	683b      	ldr	r3, [r7, #0]
 801b340:	0a1b      	lsrs	r3, r3, #8
 801b342:	b2db      	uxtb	r3, r3
 801b344:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b346:	683b      	ldr	r3, [r7, #0]
 801b348:	b2db      	uxtb	r3, r3
 801b34a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b34c:	f107 030c 	add.w	r3, r7, #12
 801b350:	2204      	movs	r2, #4
 801b352:	4619      	mov	r1, r3
 801b354:	2097      	movs	r0, #151	@ 0x97
 801b356:	f000 fc23 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b35a:	bf00      	nop
 801b35c:	3710      	adds	r7, #16
 801b35e:	46bd      	mov	sp, r7
 801b360:	bd80      	pop	{r7, pc}
	...

0801b364 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b368:	b084      	sub	sp, #16
 801b36a:	af00      	add	r7, sp, #0
 801b36c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b36e:	2300      	movs	r3, #0
 801b370:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b372:	4b1d      	ldr	r3, [pc, #116]	@ (801b3e8 <SUBGRF_SetRfFrequency+0x84>)
 801b374:	781b      	ldrb	r3, [r3, #0]
 801b376:	f083 0301 	eor.w	r3, r3, #1
 801b37a:	b2db      	uxtb	r3, r3
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d005      	beq.n	801b38c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b380:	6878      	ldr	r0, [r7, #4]
 801b382:	f7ff ff27 	bl	801b1d4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b386:	4b18      	ldr	r3, [pc, #96]	@ (801b3e8 <SUBGRF_SetRfFrequency+0x84>)
 801b388:	2201      	movs	r2, #1
 801b38a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	2200      	movs	r2, #0
 801b390:	461c      	mov	r4, r3
 801b392:	4615      	mov	r5, r2
 801b394:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b398:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b39c:	4a13      	ldr	r2, [pc, #76]	@ (801b3ec <SUBGRF_SetRfFrequency+0x88>)
 801b39e:	f04f 0300 	mov.w	r3, #0
 801b3a2:	4640      	mov	r0, r8
 801b3a4:	4649      	mov	r1, r9
 801b3a6:	f7e5 fed7 	bl	8001158 <__aeabi_uldivmod>
 801b3aa:	4602      	mov	r2, r0
 801b3ac:	460b      	mov	r3, r1
 801b3ae:	4613      	mov	r3, r2
 801b3b0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	0e1b      	lsrs	r3, r3, #24
 801b3b6:	b2db      	uxtb	r3, r3
 801b3b8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	0c1b      	lsrs	r3, r3, #16
 801b3be:	b2db      	uxtb	r3, r3
 801b3c0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b3c2:	68fb      	ldr	r3, [r7, #12]
 801b3c4:	0a1b      	lsrs	r3, r3, #8
 801b3c6:	b2db      	uxtb	r3, r3
 801b3c8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	b2db      	uxtb	r3, r3
 801b3ce:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b3d0:	f107 0308 	add.w	r3, r7, #8
 801b3d4:	2204      	movs	r2, #4
 801b3d6:	4619      	mov	r1, r3
 801b3d8:	2086      	movs	r0, #134	@ 0x86
 801b3da:	f000 fbe1 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b3de:	bf00      	nop
 801b3e0:	3710      	adds	r7, #16
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b3e8:	20001c0c 	.word	0x20001c0c
 801b3ec:	01e84800 	.word	0x01e84800

0801b3f0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b082      	sub	sp, #8
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b3fa:	79fa      	ldrb	r2, [r7, #7]
 801b3fc:	4b09      	ldr	r3, [pc, #36]	@ (801b424 <SUBGRF_SetPacketType+0x34>)
 801b3fe:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b400:	79fb      	ldrb	r3, [r7, #7]
 801b402:	2b00      	cmp	r3, #0
 801b404:	d104      	bne.n	801b410 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b406:	2100      	movs	r1, #0
 801b408:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801b40c:	f000 fafe 	bl	801ba0c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b410:	1dfb      	adds	r3, r7, #7
 801b412:	2201      	movs	r2, #1
 801b414:	4619      	mov	r1, r3
 801b416:	208a      	movs	r0, #138	@ 0x8a
 801b418:	f000 fbc2 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b41c:	bf00      	nop
 801b41e:	3708      	adds	r7, #8
 801b420:	46bd      	mov	sp, r7
 801b422:	bd80      	pop	{r7, pc}
 801b424:	20001c05 	.word	0x20001c05

0801b428 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b428:	b480      	push	{r7}
 801b42a:	af00      	add	r7, sp, #0
    return PacketType;
 801b42c:	4b02      	ldr	r3, [pc, #8]	@ (801b438 <SUBGRF_GetPacketType+0x10>)
 801b42e:	781b      	ldrb	r3, [r3, #0]
}
 801b430:	4618      	mov	r0, r3
 801b432:	46bd      	mov	sp, r7
 801b434:	bc80      	pop	{r7}
 801b436:	4770      	bx	lr
 801b438:	20001c05 	.word	0x20001c05

0801b43c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b084      	sub	sp, #16
 801b440:	af00      	add	r7, sp, #0
 801b442:	4603      	mov	r3, r0
 801b444:	71fb      	strb	r3, [r7, #7]
 801b446:	460b      	mov	r3, r1
 801b448:	71bb      	strb	r3, [r7, #6]
 801b44a:	4613      	mov	r3, r2
 801b44c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b44e:	79fb      	ldrb	r3, [r7, #7]
 801b450:	2b01      	cmp	r3, #1
 801b452:	d149      	bne.n	801b4e8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b454:	2000      	movs	r0, #0
 801b456:	f7f0 fe9d 	bl	800c194 <RBI_GetRFOMaxPowerConfig>
 801b45a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b45c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b460:	68fa      	ldr	r2, [r7, #12]
 801b462:	429a      	cmp	r2, r3
 801b464:	da01      	bge.n	801b46a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	2b0e      	cmp	r3, #14
 801b46e:	d10e      	bne.n	801b48e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b470:	2301      	movs	r3, #1
 801b472:	2201      	movs	r2, #1
 801b474:	2100      	movs	r1, #0
 801b476:	2004      	movs	r0, #4
 801b478:	f7ff fef6 	bl	801b268 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b47c:	79ba      	ldrb	r2, [r7, #6]
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	b2db      	uxtb	r3, r3
 801b482:	1ad3      	subs	r3, r2, r3
 801b484:	b2db      	uxtb	r3, r3
 801b486:	330e      	adds	r3, #14
 801b488:	b2db      	uxtb	r3, r3
 801b48a:	71bb      	strb	r3, [r7, #6]
 801b48c:	e01f      	b.n	801b4ce <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	2b0a      	cmp	r3, #10
 801b492:	d10e      	bne.n	801b4b2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b494:	2301      	movs	r3, #1
 801b496:	2201      	movs	r2, #1
 801b498:	2100      	movs	r1, #0
 801b49a:	2001      	movs	r0, #1
 801b49c:	f7ff fee4 	bl	801b268 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b4a0:	79ba      	ldrb	r2, [r7, #6]
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	b2db      	uxtb	r3, r3
 801b4a6:	1ad3      	subs	r3, r2, r3
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	330d      	adds	r3, #13
 801b4ac:	b2db      	uxtb	r3, r3
 801b4ae:	71bb      	strb	r3, [r7, #6]
 801b4b0:	e00d      	b.n	801b4ce <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b4b2:	2301      	movs	r3, #1
 801b4b4:	2201      	movs	r2, #1
 801b4b6:	2100      	movs	r1, #0
 801b4b8:	2007      	movs	r0, #7
 801b4ba:	f7ff fed5 	bl	801b268 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b4be:	79ba      	ldrb	r2, [r7, #6]
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	b2db      	uxtb	r3, r3
 801b4c4:	1ad3      	subs	r3, r2, r3
 801b4c6:	b2db      	uxtb	r3, r3
 801b4c8:	330e      	adds	r3, #14
 801b4ca:	b2db      	uxtb	r3, r3
 801b4cc:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b4ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b4d2:	f113 0f11 	cmn.w	r3, #17
 801b4d6:	da01      	bge.n	801b4dc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b4d8:	23ef      	movs	r3, #239	@ 0xef
 801b4da:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b4dc:	2118      	movs	r1, #24
 801b4de:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b4e2:	f000 fa93 	bl	801ba0c <SUBGRF_WriteRegister>
 801b4e6:	e067      	b.n	801b5b8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b4e8:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801b4ec:	f000 fab0 	bl	801ba50 <SUBGRF_ReadRegister>
 801b4f0:	4603      	mov	r3, r0
 801b4f2:	f043 031e 	orr.w	r3, r3, #30
 801b4f6:	b2db      	uxtb	r3, r3
 801b4f8:	4619      	mov	r1, r3
 801b4fa:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801b4fe:	f000 fa85 	bl	801ba0c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b502:	2001      	movs	r0, #1
 801b504:	f7f0 fe46 	bl	800c194 <RBI_GetRFOMaxPowerConfig>
 801b508:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b50a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b50e:	68fa      	ldr	r2, [r7, #12]
 801b510:	429a      	cmp	r2, r3
 801b512:	da01      	bge.n	801b518 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	2b14      	cmp	r3, #20
 801b51c:	d10e      	bne.n	801b53c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b51e:	2301      	movs	r3, #1
 801b520:	2200      	movs	r2, #0
 801b522:	2105      	movs	r1, #5
 801b524:	2003      	movs	r0, #3
 801b526:	f7ff fe9f 	bl	801b268 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b52a:	79ba      	ldrb	r2, [r7, #6]
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	b2db      	uxtb	r3, r3
 801b530:	1ad3      	subs	r3, r2, r3
 801b532:	b2db      	uxtb	r3, r3
 801b534:	3316      	adds	r3, #22
 801b536:	b2db      	uxtb	r3, r3
 801b538:	71bb      	strb	r3, [r7, #6]
 801b53a:	e031      	b.n	801b5a0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	2b11      	cmp	r3, #17
 801b540:	d10e      	bne.n	801b560 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b542:	2301      	movs	r3, #1
 801b544:	2200      	movs	r2, #0
 801b546:	2103      	movs	r1, #3
 801b548:	2002      	movs	r0, #2
 801b54a:	f7ff fe8d 	bl	801b268 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b54e:	79ba      	ldrb	r2, [r7, #6]
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	b2db      	uxtb	r3, r3
 801b554:	1ad3      	subs	r3, r2, r3
 801b556:	b2db      	uxtb	r3, r3
 801b558:	3316      	adds	r3, #22
 801b55a:	b2db      	uxtb	r3, r3
 801b55c:	71bb      	strb	r3, [r7, #6]
 801b55e:	e01f      	b.n	801b5a0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	2b0e      	cmp	r3, #14
 801b564:	d10e      	bne.n	801b584 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b566:	2301      	movs	r3, #1
 801b568:	2200      	movs	r2, #0
 801b56a:	2102      	movs	r1, #2
 801b56c:	2002      	movs	r0, #2
 801b56e:	f7ff fe7b 	bl	801b268 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b572:	79ba      	ldrb	r2, [r7, #6]
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	b2db      	uxtb	r3, r3
 801b578:	1ad3      	subs	r3, r2, r3
 801b57a:	b2db      	uxtb	r3, r3
 801b57c:	330e      	adds	r3, #14
 801b57e:	b2db      	uxtb	r3, r3
 801b580:	71bb      	strb	r3, [r7, #6]
 801b582:	e00d      	b.n	801b5a0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b584:	2301      	movs	r3, #1
 801b586:	2200      	movs	r2, #0
 801b588:	2107      	movs	r1, #7
 801b58a:	2004      	movs	r0, #4
 801b58c:	f7ff fe6c 	bl	801b268 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b590:	79ba      	ldrb	r2, [r7, #6]
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	b2db      	uxtb	r3, r3
 801b596:	1ad3      	subs	r3, r2, r3
 801b598:	b2db      	uxtb	r3, r3
 801b59a:	3316      	adds	r3, #22
 801b59c:	b2db      	uxtb	r3, r3
 801b59e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b5a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b5a4:	f113 0f09 	cmn.w	r3, #9
 801b5a8:	da01      	bge.n	801b5ae <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b5aa:	23f7      	movs	r3, #247	@ 0xf7
 801b5ac:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b5ae:	2138      	movs	r1, #56	@ 0x38
 801b5b0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b5b4:	f000 fa2a 	bl	801ba0c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b5b8:	79bb      	ldrb	r3, [r7, #6]
 801b5ba:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b5bc:	797b      	ldrb	r3, [r7, #5]
 801b5be:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b5c0:	f107 0308 	add.w	r3, r7, #8
 801b5c4:	2202      	movs	r2, #2
 801b5c6:	4619      	mov	r1, r3
 801b5c8:	208e      	movs	r0, #142	@ 0x8e
 801b5ca:	f000 fae9 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b5ce:	bf00      	nop
 801b5d0:	3710      	adds	r7, #16
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	bd80      	pop	{r7, pc}
	...

0801b5d8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b5d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b5dc:	b086      	sub	sp, #24
 801b5de:	af00      	add	r7, sp, #0
 801b5e0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b5e6:	4a61      	ldr	r2, [pc, #388]	@ (801b76c <SUBGRF_SetModulationParams+0x194>)
 801b5e8:	f107 0308 	add.w	r3, r7, #8
 801b5ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b5f0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	781a      	ldrb	r2, [r3, #0]
 801b5f8:	4b5d      	ldr	r3, [pc, #372]	@ (801b770 <SUBGRF_SetModulationParams+0x198>)
 801b5fa:	781b      	ldrb	r3, [r3, #0]
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d004      	beq.n	801b60a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	781b      	ldrb	r3, [r3, #0]
 801b604:	4618      	mov	r0, r3
 801b606:	f7ff fef3 	bl	801b3f0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	781b      	ldrb	r3, [r3, #0]
 801b60e:	2b03      	cmp	r3, #3
 801b610:	f200 80a5 	bhi.w	801b75e <SUBGRF_SetModulationParams+0x186>
 801b614:	a201      	add	r2, pc, #4	@ (adr r2, 801b61c <SUBGRF_SetModulationParams+0x44>)
 801b616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b61a:	bf00      	nop
 801b61c:	0801b62d 	.word	0x0801b62d
 801b620:	0801b6ed 	.word	0x0801b6ed
 801b624:	0801b6af 	.word	0x0801b6af
 801b628:	0801b71b 	.word	0x0801b71b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b62c:	2308      	movs	r3, #8
 801b62e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	685b      	ldr	r3, [r3, #4]
 801b634:	4a4f      	ldr	r2, [pc, #316]	@ (801b774 <SUBGRF_SetModulationParams+0x19c>)
 801b636:	fbb2 f3f3 	udiv	r3, r2, r3
 801b63a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	0c1b      	lsrs	r3, r3, #16
 801b640:	b2db      	uxtb	r3, r3
 801b642:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b644:	697b      	ldr	r3, [r7, #20]
 801b646:	0a1b      	lsrs	r3, r3, #8
 801b648:	b2db      	uxtb	r3, r3
 801b64a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b64c:	697b      	ldr	r3, [r7, #20]
 801b64e:	b2db      	uxtb	r3, r3
 801b650:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	7b1b      	ldrb	r3, [r3, #12]
 801b656:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	7b5b      	ldrb	r3, [r3, #13]
 801b65c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	689b      	ldr	r3, [r3, #8]
 801b662:	2200      	movs	r2, #0
 801b664:	461c      	mov	r4, r3
 801b666:	4615      	mov	r5, r2
 801b668:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b66c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b670:	4a41      	ldr	r2, [pc, #260]	@ (801b778 <SUBGRF_SetModulationParams+0x1a0>)
 801b672:	f04f 0300 	mov.w	r3, #0
 801b676:	4640      	mov	r0, r8
 801b678:	4649      	mov	r1, r9
 801b67a:	f7e5 fd6d 	bl	8001158 <__aeabi_uldivmod>
 801b67e:	4602      	mov	r2, r0
 801b680:	460b      	mov	r3, r1
 801b682:	4613      	mov	r3, r2
 801b684:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b686:	697b      	ldr	r3, [r7, #20]
 801b688:	0c1b      	lsrs	r3, r3, #16
 801b68a:	b2db      	uxtb	r3, r3
 801b68c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b68e:	697b      	ldr	r3, [r7, #20]
 801b690:	0a1b      	lsrs	r3, r3, #8
 801b692:	b2db      	uxtb	r3, r3
 801b694:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b696:	697b      	ldr	r3, [r7, #20]
 801b698:	b2db      	uxtb	r3, r3
 801b69a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b69c:	7cfb      	ldrb	r3, [r7, #19]
 801b69e:	b29a      	uxth	r2, r3
 801b6a0:	f107 0308 	add.w	r3, r7, #8
 801b6a4:	4619      	mov	r1, r3
 801b6a6:	208b      	movs	r0, #139	@ 0x8b
 801b6a8:	f000 fa7a 	bl	801bba0 <SUBGRF_WriteCommand>
        break;
 801b6ac:	e058      	b.n	801b760 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b6ae:	2304      	movs	r3, #4
 801b6b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	691b      	ldr	r3, [r3, #16]
 801b6b6:	4a2f      	ldr	r2, [pc, #188]	@ (801b774 <SUBGRF_SetModulationParams+0x19c>)
 801b6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b6be:	697b      	ldr	r3, [r7, #20]
 801b6c0:	0c1b      	lsrs	r3, r3, #16
 801b6c2:	b2db      	uxtb	r3, r3
 801b6c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b6c6:	697b      	ldr	r3, [r7, #20]
 801b6c8:	0a1b      	lsrs	r3, r3, #8
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b6ce:	697b      	ldr	r3, [r7, #20]
 801b6d0:	b2db      	uxtb	r3, r3
 801b6d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	7d1b      	ldrb	r3, [r3, #20]
 801b6d8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b6da:	7cfb      	ldrb	r3, [r7, #19]
 801b6dc:	b29a      	uxth	r2, r3
 801b6de:	f107 0308 	add.w	r3, r7, #8
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	208b      	movs	r0, #139	@ 0x8b
 801b6e6:	f000 fa5b 	bl	801bba0 <SUBGRF_WriteCommand>
        break;
 801b6ea:	e039      	b.n	801b760 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b6ec:	2304      	movs	r3, #4
 801b6ee:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	7e1b      	ldrb	r3, [r3, #24]
 801b6f4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	7e5b      	ldrb	r3, [r3, #25]
 801b6fa:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	7e9b      	ldrb	r3, [r3, #26]
 801b700:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	7edb      	ldrb	r3, [r3, #27]
 801b706:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b708:	7cfb      	ldrb	r3, [r7, #19]
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	f107 0308 	add.w	r3, r7, #8
 801b710:	4619      	mov	r1, r3
 801b712:	208b      	movs	r0, #139	@ 0x8b
 801b714:	f000 fa44 	bl	801bba0 <SUBGRF_WriteCommand>

        break;
 801b718:	e022      	b.n	801b760 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b71a:	2305      	movs	r3, #5
 801b71c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	685b      	ldr	r3, [r3, #4]
 801b722:	4a14      	ldr	r2, [pc, #80]	@ (801b774 <SUBGRF_SetModulationParams+0x19c>)
 801b724:	fbb2 f3f3 	udiv	r3, r2, r3
 801b728:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	0c1b      	lsrs	r3, r3, #16
 801b72e:	b2db      	uxtb	r3, r3
 801b730:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b732:	697b      	ldr	r3, [r7, #20]
 801b734:	0a1b      	lsrs	r3, r3, #8
 801b736:	b2db      	uxtb	r3, r3
 801b738:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b73a:	697b      	ldr	r3, [r7, #20]
 801b73c:	b2db      	uxtb	r3, r3
 801b73e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	7b1b      	ldrb	r3, [r3, #12]
 801b744:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	7b5b      	ldrb	r3, [r3, #13]
 801b74a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b74c:	7cfb      	ldrb	r3, [r7, #19]
 801b74e:	b29a      	uxth	r2, r3
 801b750:	f107 0308 	add.w	r3, r7, #8
 801b754:	4619      	mov	r1, r3
 801b756:	208b      	movs	r0, #139	@ 0x8b
 801b758:	f000 fa22 	bl	801bba0 <SUBGRF_WriteCommand>
        break;
 801b75c:	e000      	b.n	801b760 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b75e:	bf00      	nop
    }
}
 801b760:	bf00      	nop
 801b762:	3718      	adds	r7, #24
 801b764:	46bd      	mov	sp, r7
 801b766:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b76a:	bf00      	nop
 801b76c:	0801e0ac 	.word	0x0801e0ac
 801b770:	20001c05 	.word	0x20001c05
 801b774:	3d090000 	.word	0x3d090000
 801b778:	01e84800 	.word	0x01e84800

0801b77c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b086      	sub	sp, #24
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b784:	2300      	movs	r3, #0
 801b786:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b788:	4a48      	ldr	r2, [pc, #288]	@ (801b8ac <SUBGRF_SetPacketParams+0x130>)
 801b78a:	f107 030c 	add.w	r3, r7, #12
 801b78e:	ca07      	ldmia	r2, {r0, r1, r2}
 801b790:	c303      	stmia	r3!, {r0, r1}
 801b792:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	781a      	ldrb	r2, [r3, #0]
 801b798:	4b45      	ldr	r3, [pc, #276]	@ (801b8b0 <SUBGRF_SetPacketParams+0x134>)
 801b79a:	781b      	ldrb	r3, [r3, #0]
 801b79c:	429a      	cmp	r2, r3
 801b79e:	d004      	beq.n	801b7aa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	781b      	ldrb	r3, [r3, #0]
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f7ff fe23 	bl	801b3f0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	781b      	ldrb	r3, [r3, #0]
 801b7ae:	2b03      	cmp	r3, #3
 801b7b0:	d878      	bhi.n	801b8a4 <SUBGRF_SetPacketParams+0x128>
 801b7b2:	a201      	add	r2, pc, #4	@ (adr r2, 801b7b8 <SUBGRF_SetPacketParams+0x3c>)
 801b7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7b8:	0801b7c9 	.word	0x0801b7c9
 801b7bc:	0801b859 	.word	0x0801b859
 801b7c0:	0801b84d 	.word	0x0801b84d
 801b7c4:	0801b7c9 	.word	0x0801b7c9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	7a5b      	ldrb	r3, [r3, #9]
 801b7cc:	2bf1      	cmp	r3, #241	@ 0xf1
 801b7ce:	d10a      	bne.n	801b7e6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b7d0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b7d4:	f7ff faaa 	bl	801ad2c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b7d8:	f248 0005 	movw	r0, #32773	@ 0x8005
 801b7dc:	f7ff fac6 	bl	801ad6c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b7e0:	2302      	movs	r3, #2
 801b7e2:	75bb      	strb	r3, [r7, #22]
 801b7e4:	e011      	b.n	801b80a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	7a5b      	ldrb	r3, [r3, #9]
 801b7ea:	2bf2      	cmp	r3, #242	@ 0xf2
 801b7ec:	d10a      	bne.n	801b804 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b7ee:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801b7f2:	f7ff fa9b 	bl	801ad2c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b7f6:	f241 0021 	movw	r0, #4129	@ 0x1021
 801b7fa:	f7ff fab7 	bl	801ad6c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b7fe:	2306      	movs	r3, #6
 801b800:	75bb      	strb	r3, [r7, #22]
 801b802:	e002      	b.n	801b80a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	7a5b      	ldrb	r3, [r3, #9]
 801b808:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b80a:	2309      	movs	r3, #9
 801b80c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	885b      	ldrh	r3, [r3, #2]
 801b812:	0a1b      	lsrs	r3, r3, #8
 801b814:	b29b      	uxth	r3, r3
 801b816:	b2db      	uxtb	r3, r3
 801b818:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	885b      	ldrh	r3, [r3, #2]
 801b81e:	b2db      	uxtb	r3, r3
 801b820:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	791b      	ldrb	r3, [r3, #4]
 801b826:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	795b      	ldrb	r3, [r3, #5]
 801b82c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	799b      	ldrb	r3, [r3, #6]
 801b832:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	79db      	ldrb	r3, [r3, #7]
 801b838:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	7a1b      	ldrb	r3, [r3, #8]
 801b83e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b840:	7dbb      	ldrb	r3, [r7, #22]
 801b842:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	7a9b      	ldrb	r3, [r3, #10]
 801b848:	753b      	strb	r3, [r7, #20]
        break;
 801b84a:	e022      	b.n	801b892 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b84c:	2301      	movs	r3, #1
 801b84e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	7b1b      	ldrb	r3, [r3, #12]
 801b854:	733b      	strb	r3, [r7, #12]
        break;
 801b856:	e01c      	b.n	801b892 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b858:	2306      	movs	r3, #6
 801b85a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	89db      	ldrh	r3, [r3, #14]
 801b860:	0a1b      	lsrs	r3, r3, #8
 801b862:	b29b      	uxth	r3, r3
 801b864:	b2db      	uxtb	r3, r3
 801b866:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	89db      	ldrh	r3, [r3, #14]
 801b86c:	b2db      	uxtb	r3, r3
 801b86e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	7c1a      	ldrb	r2, [r3, #16]
 801b874:	4b0f      	ldr	r3, [pc, #60]	@ (801b8b4 <SUBGRF_SetPacketParams+0x138>)
 801b876:	4611      	mov	r1, r2
 801b878:	7019      	strb	r1, [r3, #0]
 801b87a:	4613      	mov	r3, r2
 801b87c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	7c5b      	ldrb	r3, [r3, #17]
 801b882:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	7c9b      	ldrb	r3, [r3, #18]
 801b888:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	7cdb      	ldrb	r3, [r3, #19]
 801b88e:	747b      	strb	r3, [r7, #17]
        break;
 801b890:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b892:	7dfb      	ldrb	r3, [r7, #23]
 801b894:	b29a      	uxth	r2, r3
 801b896:	f107 030c 	add.w	r3, r7, #12
 801b89a:	4619      	mov	r1, r3
 801b89c:	208c      	movs	r0, #140	@ 0x8c
 801b89e:	f000 f97f 	bl	801bba0 <SUBGRF_WriteCommand>
 801b8a2:	e000      	b.n	801b8a6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b8a4:	bf00      	nop
}
 801b8a6:	3718      	adds	r7, #24
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	bd80      	pop	{r7, pc}
 801b8ac:	0801e0b4 	.word	0x0801e0b4
 801b8b0:	20001c05 	.word	0x20001c05
 801b8b4:	20001c06 	.word	0x20001c06

0801b8b8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b084      	sub	sp, #16
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	4603      	mov	r3, r0
 801b8c0:	460a      	mov	r2, r1
 801b8c2:	71fb      	strb	r3, [r7, #7]
 801b8c4:	4613      	mov	r3, r2
 801b8c6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b8c8:	79fb      	ldrb	r3, [r7, #7]
 801b8ca:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b8cc:	79bb      	ldrb	r3, [r7, #6]
 801b8ce:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b8d0:	f107 030c 	add.w	r3, r7, #12
 801b8d4:	2202      	movs	r2, #2
 801b8d6:	4619      	mov	r1, r3
 801b8d8:	208f      	movs	r0, #143	@ 0x8f
 801b8da:	f000 f961 	bl	801bba0 <SUBGRF_WriteCommand>
}
 801b8de:	bf00      	nop
 801b8e0:	3710      	adds	r7, #16
 801b8e2:	46bd      	mov	sp, r7
 801b8e4:	bd80      	pop	{r7, pc}

0801b8e6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b8e6:	b580      	push	{r7, lr}
 801b8e8:	b082      	sub	sp, #8
 801b8ea:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b8f0:	1d3b      	adds	r3, r7, #4
 801b8f2:	2201      	movs	r2, #1
 801b8f4:	4619      	mov	r1, r3
 801b8f6:	2015      	movs	r0, #21
 801b8f8:	f000 f974 	bl	801bbe4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b8fc:	793b      	ldrb	r3, [r7, #4]
 801b8fe:	425b      	negs	r3, r3
 801b900:	105b      	asrs	r3, r3, #1
 801b902:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b904:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b908:	4618      	mov	r0, r3
 801b90a:	3708      	adds	r7, #8
 801b90c:	46bd      	mov	sp, r7
 801b90e:	bd80      	pop	{r7, pc}

0801b910 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b910:	b580      	push	{r7, lr}
 801b912:	b084      	sub	sp, #16
 801b914:	af00      	add	r7, sp, #0
 801b916:	6078      	str	r0, [r7, #4]
 801b918:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b91a:	f107 030c 	add.w	r3, r7, #12
 801b91e:	2202      	movs	r2, #2
 801b920:	4619      	mov	r1, r3
 801b922:	2013      	movs	r0, #19
 801b924:	f000 f95e 	bl	801bbe4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b928:	f7ff fd7e 	bl	801b428 <SUBGRF_GetPacketType>
 801b92c:	4603      	mov	r3, r0
 801b92e:	2b01      	cmp	r3, #1
 801b930:	d10d      	bne.n	801b94e <SUBGRF_GetRxBufferStatus+0x3e>
 801b932:	4b0c      	ldr	r3, [pc, #48]	@ (801b964 <SUBGRF_GetRxBufferStatus+0x54>)
 801b934:	781b      	ldrb	r3, [r3, #0]
 801b936:	b2db      	uxtb	r3, r3
 801b938:	2b01      	cmp	r3, #1
 801b93a:	d108      	bne.n	801b94e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b93c:	f240 7002 	movw	r0, #1794	@ 0x702
 801b940:	f000 f886 	bl	801ba50 <SUBGRF_ReadRegister>
 801b944:	4603      	mov	r3, r0
 801b946:	461a      	mov	r2, r3
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	701a      	strb	r2, [r3, #0]
 801b94c:	e002      	b.n	801b954 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b94e:	7b3a      	ldrb	r2, [r7, #12]
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b954:	7b7a      	ldrb	r2, [r7, #13]
 801b956:	683b      	ldr	r3, [r7, #0]
 801b958:	701a      	strb	r2, [r3, #0]
}
 801b95a:	bf00      	nop
 801b95c:	3710      	adds	r7, #16
 801b95e:	46bd      	mov	sp, r7
 801b960:	bd80      	pop	{r7, pc}
 801b962:	bf00      	nop
 801b964:	20001c06 	.word	0x20001c06

0801b968 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b968:	b580      	push	{r7, lr}
 801b96a:	b084      	sub	sp, #16
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b970:	f107 030c 	add.w	r3, r7, #12
 801b974:	2203      	movs	r2, #3
 801b976:	4619      	mov	r1, r3
 801b978:	2014      	movs	r0, #20
 801b97a:	f000 f933 	bl	801bbe4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b97e:	f7ff fd53 	bl	801b428 <SUBGRF_GetPacketType>
 801b982:	4603      	mov	r3, r0
 801b984:	461a      	mov	r2, r3
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	781b      	ldrb	r3, [r3, #0]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d002      	beq.n	801b998 <SUBGRF_GetPacketStatus+0x30>
 801b992:	2b01      	cmp	r3, #1
 801b994:	d013      	beq.n	801b9be <SUBGRF_GetPacketStatus+0x56>
 801b996:	e02a      	b.n	801b9ee <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b998:	7b3a      	ldrb	r2, [r7, #12]
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b99e:	7b7b      	ldrb	r3, [r7, #13]
 801b9a0:	425b      	negs	r3, r3
 801b9a2:	105b      	asrs	r3, r3, #1
 801b9a4:	b25a      	sxtb	r2, r3
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b9aa:	7bbb      	ldrb	r3, [r7, #14]
 801b9ac:	425b      	negs	r3, r3
 801b9ae:	105b      	asrs	r3, r3, #1
 801b9b0:	b25a      	sxtb	r2, r3
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	2200      	movs	r2, #0
 801b9ba:	609a      	str	r2, [r3, #8]
            break;
 801b9bc:	e020      	b.n	801ba00 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b9be:	7b3b      	ldrb	r3, [r7, #12]
 801b9c0:	425b      	negs	r3, r3
 801b9c2:	105b      	asrs	r3, r3, #1
 801b9c4:	b25a      	sxtb	r2, r3
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b9ca:	7b7b      	ldrb	r3, [r7, #13]
 801b9cc:	b25b      	sxtb	r3, r3
 801b9ce:	3302      	adds	r3, #2
 801b9d0:	109b      	asrs	r3, r3, #2
 801b9d2:	b25a      	sxtb	r2, r3
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b9d8:	7bbb      	ldrb	r3, [r7, #14]
 801b9da:	425b      	negs	r3, r3
 801b9dc:	105b      	asrs	r3, r3, #1
 801b9de:	b25a      	sxtb	r2, r3
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b9e4:	4b08      	ldr	r3, [pc, #32]	@ (801ba08 <SUBGRF_GetPacketStatus+0xa0>)
 801b9e6:	681a      	ldr	r2, [r3, #0]
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	611a      	str	r2, [r3, #16]
            break;
 801b9ec:	e008      	b.n	801ba00 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b9ee:	2214      	movs	r2, #20
 801b9f0:	2100      	movs	r1, #0
 801b9f2:	6878      	ldr	r0, [r7, #4]
 801b9f4:	f000 fc1d 	bl	801c232 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	220f      	movs	r2, #15
 801b9fc:	701a      	strb	r2, [r3, #0]
            break;
 801b9fe:	bf00      	nop
    }
}
 801ba00:	bf00      	nop
 801ba02:	3710      	adds	r7, #16
 801ba04:	46bd      	mov	sp, r7
 801ba06:	bd80      	pop	{r7, pc}
 801ba08:	20001c08 	.word	0x20001c08

0801ba0c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b086      	sub	sp, #24
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	4603      	mov	r3, r0
 801ba14:	460a      	mov	r2, r1
 801ba16:	80fb      	strh	r3, [r7, #6]
 801ba18:	4613      	mov	r3, r2
 801ba1a:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba1c:	f3ef 8310 	mrs	r3, PRIMASK
 801ba20:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba22:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ba24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba26:	b672      	cpsid	i
}
 801ba28:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801ba2a:	1d7a      	adds	r2, r7, #5
 801ba2c:	88f9      	ldrh	r1, [r7, #6]
 801ba2e:	2301      	movs	r3, #1
 801ba30:	4806      	ldr	r0, [pc, #24]	@ (801ba4c <SUBGRF_WriteRegister+0x40>)
 801ba32:	f7ec ff53 	bl	80088dc <HAL_SUBGHZ_WriteRegisters>
 801ba36:	697b      	ldr	r3, [r7, #20]
 801ba38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba3a:	693b      	ldr	r3, [r7, #16]
 801ba3c:	f383 8810 	msr	PRIMASK, r3
}
 801ba40:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ba42:	bf00      	nop
 801ba44:	3718      	adds	r7, #24
 801ba46:	46bd      	mov	sp, r7
 801ba48:	bd80      	pop	{r7, pc}
 801ba4a:	bf00      	nop
 801ba4c:	2000025c 	.word	0x2000025c

0801ba50 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801ba50:	b580      	push	{r7, lr}
 801ba52:	b086      	sub	sp, #24
 801ba54:	af00      	add	r7, sp, #0
 801ba56:	4603      	mov	r3, r0
 801ba58:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba5a:	f3ef 8310 	mrs	r3, PRIMASK
 801ba5e:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba60:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801ba62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba64:	b672      	cpsid	i
}
 801ba66:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801ba68:	f107 020b 	add.w	r2, r7, #11
 801ba6c:	88f9      	ldrh	r1, [r7, #6]
 801ba6e:	2301      	movs	r3, #1
 801ba70:	4806      	ldr	r0, [pc, #24]	@ (801ba8c <SUBGRF_ReadRegister+0x3c>)
 801ba72:	f7ec ff92 	bl	800899a <HAL_SUBGHZ_ReadRegisters>
 801ba76:	697b      	ldr	r3, [r7, #20]
 801ba78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba7a:	693b      	ldr	r3, [r7, #16]
 801ba7c:	f383 8810 	msr	PRIMASK, r3
}
 801ba80:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 801ba82:	7afb      	ldrb	r3, [r7, #11]
}
 801ba84:	4618      	mov	r0, r3
 801ba86:	3718      	adds	r7, #24
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bd80      	pop	{r7, pc}
 801ba8c:	2000025c 	.word	0x2000025c

0801ba90 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b086      	sub	sp, #24
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	4603      	mov	r3, r0
 801ba98:	6039      	str	r1, [r7, #0]
 801ba9a:	80fb      	strh	r3, [r7, #6]
 801ba9c:	4613      	mov	r3, r2
 801ba9e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801baa0:	f3ef 8310 	mrs	r3, PRIMASK
 801baa4:	60fb      	str	r3, [r7, #12]
  return(result);
 801baa6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801baa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801baaa:	b672      	cpsid	i
}
 801baac:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801baae:	88bb      	ldrh	r3, [r7, #4]
 801bab0:	88f9      	ldrh	r1, [r7, #6]
 801bab2:	683a      	ldr	r2, [r7, #0]
 801bab4:	4806      	ldr	r0, [pc, #24]	@ (801bad0 <SUBGRF_WriteRegisters+0x40>)
 801bab6:	f7ec ff11 	bl	80088dc <HAL_SUBGHZ_WriteRegisters>
 801baba:	697b      	ldr	r3, [r7, #20]
 801babc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801babe:	693b      	ldr	r3, [r7, #16]
 801bac0:	f383 8810 	msr	PRIMASK, r3
}
 801bac4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bac6:	bf00      	nop
 801bac8:	3718      	adds	r7, #24
 801baca:	46bd      	mov	sp, r7
 801bacc:	bd80      	pop	{r7, pc}
 801bace:	bf00      	nop
 801bad0:	2000025c 	.word	0x2000025c

0801bad4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b086      	sub	sp, #24
 801bad8:	af00      	add	r7, sp, #0
 801bada:	4603      	mov	r3, r0
 801badc:	6039      	str	r1, [r7, #0]
 801bade:	80fb      	strh	r3, [r7, #6]
 801bae0:	4613      	mov	r3, r2
 801bae2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bae4:	f3ef 8310 	mrs	r3, PRIMASK
 801bae8:	60fb      	str	r3, [r7, #12]
  return(result);
 801baea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801baec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801baee:	b672      	cpsid	i
}
 801baf0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801baf2:	88bb      	ldrh	r3, [r7, #4]
 801baf4:	88f9      	ldrh	r1, [r7, #6]
 801baf6:	683a      	ldr	r2, [r7, #0]
 801baf8:	4806      	ldr	r0, [pc, #24]	@ (801bb14 <SUBGRF_ReadRegisters+0x40>)
 801bafa:	f7ec ff4e 	bl	800899a <HAL_SUBGHZ_ReadRegisters>
 801bafe:	697b      	ldr	r3, [r7, #20]
 801bb00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb02:	693b      	ldr	r3, [r7, #16]
 801bb04:	f383 8810 	msr	PRIMASK, r3
}
 801bb08:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb0a:	bf00      	nop
 801bb0c:	3718      	adds	r7, #24
 801bb0e:	46bd      	mov	sp, r7
 801bb10:	bd80      	pop	{r7, pc}
 801bb12:	bf00      	nop
 801bb14:	2000025c 	.word	0x2000025c

0801bb18 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	b086      	sub	sp, #24
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	4603      	mov	r3, r0
 801bb20:	6039      	str	r1, [r7, #0]
 801bb22:	71fb      	strb	r3, [r7, #7]
 801bb24:	4613      	mov	r3, r2
 801bb26:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb28:	f3ef 8310 	mrs	r3, PRIMASK
 801bb2c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb32:	b672      	cpsid	i
}
 801bb34:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bb36:	79bb      	ldrb	r3, [r7, #6]
 801bb38:	b29b      	uxth	r3, r3
 801bb3a:	79f9      	ldrb	r1, [r7, #7]
 801bb3c:	683a      	ldr	r2, [r7, #0]
 801bb3e:	4806      	ldr	r0, [pc, #24]	@ (801bb58 <SUBGRF_WriteBuffer+0x40>)
 801bb40:	f7ed f83f 	bl	8008bc2 <HAL_SUBGHZ_WriteBuffer>
 801bb44:	697b      	ldr	r3, [r7, #20]
 801bb46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb48:	693b      	ldr	r3, [r7, #16]
 801bb4a:	f383 8810 	msr	PRIMASK, r3
}
 801bb4e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb50:	bf00      	nop
 801bb52:	3718      	adds	r7, #24
 801bb54:	46bd      	mov	sp, r7
 801bb56:	bd80      	pop	{r7, pc}
 801bb58:	2000025c 	.word	0x2000025c

0801bb5c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b086      	sub	sp, #24
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	4603      	mov	r3, r0
 801bb64:	6039      	str	r1, [r7, #0]
 801bb66:	71fb      	strb	r3, [r7, #7]
 801bb68:	4613      	mov	r3, r2
 801bb6a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb6c:	f3ef 8310 	mrs	r3, PRIMASK
 801bb70:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb76:	b672      	cpsid	i
}
 801bb78:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bb7a:	79bb      	ldrb	r3, [r7, #6]
 801bb7c:	b29b      	uxth	r3, r3
 801bb7e:	79f9      	ldrb	r1, [r7, #7]
 801bb80:	683a      	ldr	r2, [r7, #0]
 801bb82:	4806      	ldr	r0, [pc, #24]	@ (801bb9c <SUBGRF_ReadBuffer+0x40>)
 801bb84:	f7ed f870 	bl	8008c68 <HAL_SUBGHZ_ReadBuffer>
 801bb88:	697b      	ldr	r3, [r7, #20]
 801bb8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb8c:	693b      	ldr	r3, [r7, #16]
 801bb8e:	f383 8810 	msr	PRIMASK, r3
}
 801bb92:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb94:	bf00      	nop
 801bb96:	3718      	adds	r7, #24
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	bd80      	pop	{r7, pc}
 801bb9c:	2000025c 	.word	0x2000025c

0801bba0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b086      	sub	sp, #24
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	4603      	mov	r3, r0
 801bba8:	6039      	str	r1, [r7, #0]
 801bbaa:	71fb      	strb	r3, [r7, #7]
 801bbac:	4613      	mov	r3, r2
 801bbae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbb0:	f3ef 8310 	mrs	r3, PRIMASK
 801bbb4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbb6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bbb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbba:	b672      	cpsid	i
}
 801bbbc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bbbe:	88bb      	ldrh	r3, [r7, #4]
 801bbc0:	79f9      	ldrb	r1, [r7, #7]
 801bbc2:	683a      	ldr	r2, [r7, #0]
 801bbc4:	4806      	ldr	r0, [pc, #24]	@ (801bbe0 <SUBGRF_WriteCommand+0x40>)
 801bbc6:	f7ec ff49 	bl	8008a5c <HAL_SUBGHZ_ExecSetCmd>
 801bbca:	697b      	ldr	r3, [r7, #20]
 801bbcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbce:	693b      	ldr	r3, [r7, #16]
 801bbd0:	f383 8810 	msr	PRIMASK, r3
}
 801bbd4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bbd6:	bf00      	nop
 801bbd8:	3718      	adds	r7, #24
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	bd80      	pop	{r7, pc}
 801bbde:	bf00      	nop
 801bbe0:	2000025c 	.word	0x2000025c

0801bbe4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b086      	sub	sp, #24
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	4603      	mov	r3, r0
 801bbec:	6039      	str	r1, [r7, #0]
 801bbee:	71fb      	strb	r3, [r7, #7]
 801bbf0:	4613      	mov	r3, r2
 801bbf2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbf4:	f3ef 8310 	mrs	r3, PRIMASK
 801bbf8:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbfa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bbfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbfe:	b672      	cpsid	i
}
 801bc00:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bc02:	88bb      	ldrh	r3, [r7, #4]
 801bc04:	79f9      	ldrb	r1, [r7, #7]
 801bc06:	683a      	ldr	r2, [r7, #0]
 801bc08:	4806      	ldr	r0, [pc, #24]	@ (801bc24 <SUBGRF_ReadCommand+0x40>)
 801bc0a:	f7ec ff86 	bl	8008b1a <HAL_SUBGHZ_ExecGetCmd>
 801bc0e:	697b      	ldr	r3, [r7, #20]
 801bc10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc12:	693b      	ldr	r3, [r7, #16]
 801bc14:	f383 8810 	msr	PRIMASK, r3
}
 801bc18:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bc1a:	bf00      	nop
 801bc1c:	3718      	adds	r7, #24
 801bc1e:	46bd      	mov	sp, r7
 801bc20:	bd80      	pop	{r7, pc}
 801bc22:	bf00      	nop
 801bc24:	2000025c 	.word	0x2000025c

0801bc28 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b084      	sub	sp, #16
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	4603      	mov	r3, r0
 801bc30:	460a      	mov	r2, r1
 801bc32:	71fb      	strb	r3, [r7, #7]
 801bc34:	4613      	mov	r3, r2
 801bc36:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bc38:	2301      	movs	r3, #1
 801bc3a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bc3c:	79bb      	ldrb	r3, [r7, #6]
 801bc3e:	2b01      	cmp	r3, #1
 801bc40:	d10d      	bne.n	801bc5e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bc42:	79fb      	ldrb	r3, [r7, #7]
 801bc44:	2b01      	cmp	r3, #1
 801bc46:	d104      	bne.n	801bc52 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bc48:	2302      	movs	r3, #2
 801bc4a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bc4c:	2004      	movs	r0, #4
 801bc4e:	f000 f8ef 	bl	801be30 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bc52:	79fb      	ldrb	r3, [r7, #7]
 801bc54:	2b02      	cmp	r3, #2
 801bc56:	d107      	bne.n	801bc68 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bc58:	2303      	movs	r3, #3
 801bc5a:	73fb      	strb	r3, [r7, #15]
 801bc5c:	e004      	b.n	801bc68 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801bc5e:	79bb      	ldrb	r3, [r7, #6]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d101      	bne.n	801bc68 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801bc64:	2301      	movs	r3, #1
 801bc66:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801bc68:	7bfb      	ldrb	r3, [r7, #15]
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	f7f0 fa6f 	bl	800c14e <RBI_ConfigRFSwitch>
}
 801bc70:	bf00      	nop
 801bc72:	3710      	adds	r7, #16
 801bc74:	46bd      	mov	sp, r7
 801bc76:	bd80      	pop	{r7, pc}

0801bc78 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b084      	sub	sp, #16
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	4603      	mov	r3, r0
 801bc80:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801bc82:	2301      	movs	r3, #1
 801bc84:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801bc86:	f7f0 fa70 	bl	800c16a <RBI_GetTxConfig>
 801bc8a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801bc8c:	68bb      	ldr	r3, [r7, #8]
 801bc8e:	2b02      	cmp	r3, #2
 801bc90:	d016      	beq.n	801bcc0 <SUBGRF_SetRfTxPower+0x48>
 801bc92:	68bb      	ldr	r3, [r7, #8]
 801bc94:	2b02      	cmp	r3, #2
 801bc96:	dc16      	bgt.n	801bcc6 <SUBGRF_SetRfTxPower+0x4e>
 801bc98:	68bb      	ldr	r3, [r7, #8]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d003      	beq.n	801bca6 <SUBGRF_SetRfTxPower+0x2e>
 801bc9e:	68bb      	ldr	r3, [r7, #8]
 801bca0:	2b01      	cmp	r3, #1
 801bca2:	d00a      	beq.n	801bcba <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801bca4:	e00f      	b.n	801bcc6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801bca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bcaa:	2b0f      	cmp	r3, #15
 801bcac:	dd02      	ble.n	801bcb4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801bcae:	2302      	movs	r3, #2
 801bcb0:	73fb      	strb	r3, [r7, #15]
            break;
 801bcb2:	e009      	b.n	801bcc8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801bcb4:	2301      	movs	r3, #1
 801bcb6:	73fb      	strb	r3, [r7, #15]
            break;
 801bcb8:	e006      	b.n	801bcc8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801bcba:	2301      	movs	r3, #1
 801bcbc:	73fb      	strb	r3, [r7, #15]
            break;
 801bcbe:	e003      	b.n	801bcc8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801bcc0:	2302      	movs	r3, #2
 801bcc2:	73fb      	strb	r3, [r7, #15]
            break;
 801bcc4:	e000      	b.n	801bcc8 <SUBGRF_SetRfTxPower+0x50>
            break;
 801bcc6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801bcc8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801bccc:	7bfb      	ldrb	r3, [r7, #15]
 801bcce:	2202      	movs	r2, #2
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	f7ff fbb3 	bl	801b43c <SUBGRF_SetTxParams>

    return paSelect;
 801bcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcd8:	4618      	mov	r0, r3
 801bcda:	3710      	adds	r7, #16
 801bcdc:	46bd      	mov	sp, r7
 801bcde:	bd80      	pop	{r7, pc}

0801bce0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801bce0:	b480      	push	{r7}
 801bce2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801bce4:	2301      	movs	r3, #1
}
 801bce6:	4618      	mov	r0, r3
 801bce8:	46bd      	mov	sp, r7
 801bcea:	bc80      	pop	{r7}
 801bcec:	4770      	bx	lr
	...

0801bcf0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b082      	sub	sp, #8
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801bcf8:	4b03      	ldr	r3, [pc, #12]	@ (801bd08 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	2001      	movs	r0, #1
 801bcfe:	4798      	blx	r3
}
 801bd00:	bf00      	nop
 801bd02:	3708      	adds	r7, #8
 801bd04:	46bd      	mov	sp, r7
 801bd06:	bd80      	pop	{r7, pc}
 801bd08:	20001c10 	.word	0x20001c10

0801bd0c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd0c:	b580      	push	{r7, lr}
 801bd0e:	b082      	sub	sp, #8
 801bd10:	af00      	add	r7, sp, #0
 801bd12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801bd14:	4b03      	ldr	r3, [pc, #12]	@ (801bd24 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	2002      	movs	r0, #2
 801bd1a:	4798      	blx	r3
}
 801bd1c:	bf00      	nop
 801bd1e:	3708      	adds	r7, #8
 801bd20:	46bd      	mov	sp, r7
 801bd22:	bd80      	pop	{r7, pc}
 801bd24:	20001c10 	.word	0x20001c10

0801bd28 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b082      	sub	sp, #8
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801bd30:	4b03      	ldr	r3, [pc, #12]	@ (801bd40 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	2040      	movs	r0, #64	@ 0x40
 801bd36:	4798      	blx	r3
}
 801bd38:	bf00      	nop
 801bd3a:	3708      	adds	r7, #8
 801bd3c:	46bd      	mov	sp, r7
 801bd3e:	bd80      	pop	{r7, pc}
 801bd40:	20001c10 	.word	0x20001c10

0801bd44 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b082      	sub	sp, #8
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
 801bd4c:	460b      	mov	r3, r1
 801bd4e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801bd50:	78fb      	ldrb	r3, [r7, #3]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d002      	beq.n	801bd5c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801bd56:	2b01      	cmp	r3, #1
 801bd58:	d005      	beq.n	801bd66 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801bd5a:	e00a      	b.n	801bd72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801bd5c:	4b07      	ldr	r3, [pc, #28]	@ (801bd7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	2080      	movs	r0, #128	@ 0x80
 801bd62:	4798      	blx	r3
            break;
 801bd64:	e005      	b.n	801bd72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801bd66:	4b05      	ldr	r3, [pc, #20]	@ (801bd7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801bd6e:	4798      	blx	r3
            break;
 801bd70:	bf00      	nop
    }
}
 801bd72:	bf00      	nop
 801bd74:	3708      	adds	r7, #8
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}
 801bd7a:	bf00      	nop
 801bd7c:	20001c10 	.word	0x20001c10

0801bd80 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd80:	b580      	push	{r7, lr}
 801bd82:	b082      	sub	sp, #8
 801bd84:	af00      	add	r7, sp, #0
 801bd86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801bd88:	4b04      	ldr	r3, [pc, #16]	@ (801bd9c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801bd90:	4798      	blx	r3
}
 801bd92:	bf00      	nop
 801bd94:	3708      	adds	r7, #8
 801bd96:	46bd      	mov	sp, r7
 801bd98:	bd80      	pop	{r7, pc}
 801bd9a:	bf00      	nop
 801bd9c:	20001c10 	.word	0x20001c10

0801bda0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bda0:	b580      	push	{r7, lr}
 801bda2:	b082      	sub	sp, #8
 801bda4:	af00      	add	r7, sp, #0
 801bda6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801bda8:	4b03      	ldr	r3, [pc, #12]	@ (801bdb8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	2020      	movs	r0, #32
 801bdae:	4798      	blx	r3
}
 801bdb0:	bf00      	nop
 801bdb2:	3708      	adds	r7, #8
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	bd80      	pop	{r7, pc}
 801bdb8:	20001c10 	.word	0x20001c10

0801bdbc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdbc:	b580      	push	{r7, lr}
 801bdbe:	b082      	sub	sp, #8
 801bdc0:	af00      	add	r7, sp, #0
 801bdc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801bdc4:	4b03      	ldr	r3, [pc, #12]	@ (801bdd4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	2004      	movs	r0, #4
 801bdca:	4798      	blx	r3
}
 801bdcc:	bf00      	nop
 801bdce:	3708      	adds	r7, #8
 801bdd0:	46bd      	mov	sp, r7
 801bdd2:	bd80      	pop	{r7, pc}
 801bdd4:	20001c10 	.word	0x20001c10

0801bdd8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b082      	sub	sp, #8
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801bde0:	4b03      	ldr	r3, [pc, #12]	@ (801bdf0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	2008      	movs	r0, #8
 801bde6:	4798      	blx	r3
}
 801bde8:	bf00      	nop
 801bdea:	3708      	adds	r7, #8
 801bdec:	46bd      	mov	sp, r7
 801bdee:	bd80      	pop	{r7, pc}
 801bdf0:	20001c10 	.word	0x20001c10

0801bdf4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	b082      	sub	sp, #8
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801bdfc:	4b03      	ldr	r3, [pc, #12]	@ (801be0c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	2010      	movs	r0, #16
 801be02:	4798      	blx	r3
}
 801be04:	bf00      	nop
 801be06:	3708      	adds	r7, #8
 801be08:	46bd      	mov	sp, r7
 801be0a:	bd80      	pop	{r7, pc}
 801be0c:	20001c10 	.word	0x20001c10

0801be10 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b082      	sub	sp, #8
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801be18:	4b04      	ldr	r3, [pc, #16]	@ (801be2c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801be20:	4798      	blx	r3
}
 801be22:	bf00      	nop
 801be24:	3708      	adds	r7, #8
 801be26:	46bd      	mov	sp, r7
 801be28:	bd80      	pop	{r7, pc}
 801be2a:	bf00      	nop
 801be2c:	20001c10 	.word	0x20001c10

0801be30 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801be30:	b580      	push	{r7, lr}
 801be32:	b084      	sub	sp, #16
 801be34:	af00      	add	r7, sp, #0
 801be36:	4603      	mov	r3, r0
 801be38:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801be3a:	f7f0 f9a4 	bl	800c186 <RBI_IsDCDC>
 801be3e:	4603      	mov	r3, r0
 801be40:	2b01      	cmp	r3, #1
 801be42:	d112      	bne.n	801be6a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801be44:	f640 1023 	movw	r0, #2339	@ 0x923
 801be48:	f7ff fe02 	bl	801ba50 <SUBGRF_ReadRegister>
 801be4c:	4603      	mov	r3, r0
 801be4e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801be50:	7bfb      	ldrb	r3, [r7, #15]
 801be52:	f023 0306 	bic.w	r3, r3, #6
 801be56:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801be58:	7bfa      	ldrb	r2, [r7, #15]
 801be5a:	79fb      	ldrb	r3, [r7, #7]
 801be5c:	4313      	orrs	r3, r2
 801be5e:	b2db      	uxtb	r3, r3
 801be60:	4619      	mov	r1, r3
 801be62:	f640 1023 	movw	r0, #2339	@ 0x923
 801be66:	f7ff fdd1 	bl	801ba0c <SUBGRF_WriteRegister>
  }
}
 801be6a:	bf00      	nop
 801be6c:	3710      	adds	r7, #16
 801be6e:	46bd      	mov	sp, r7
 801be70:	bd80      	pop	{r7, pc}
	...

0801be74 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801be74:	b480      	push	{r7}
 801be76:	b085      	sub	sp, #20
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d101      	bne.n	801be86 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801be82:	231f      	movs	r3, #31
 801be84:	e017      	b.n	801beb6 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801be86:	2300      	movs	r3, #0
 801be88:	73fb      	strb	r3, [r7, #15]
 801be8a:	e00f      	b.n	801beac <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801be8c:	7bfb      	ldrb	r3, [r7, #15]
 801be8e:	4a0c      	ldr	r2, [pc, #48]	@ (801bec0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801be90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801be94:	687a      	ldr	r2, [r7, #4]
 801be96:	429a      	cmp	r2, r3
 801be98:	d205      	bcs.n	801bea6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801be9a:	7bfb      	ldrb	r3, [r7, #15]
 801be9c:	4a08      	ldr	r2, [pc, #32]	@ (801bec0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801be9e:	00db      	lsls	r3, r3, #3
 801bea0:	4413      	add	r3, r2
 801bea2:	791b      	ldrb	r3, [r3, #4]
 801bea4:	e007      	b.n	801beb6 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801bea6:	7bfb      	ldrb	r3, [r7, #15]
 801bea8:	3301      	adds	r3, #1
 801beaa:	73fb      	strb	r3, [r7, #15]
 801beac:	7bfb      	ldrb	r3, [r7, #15]
 801beae:	2b15      	cmp	r3, #21
 801beb0:	d9ec      	bls.n	801be8c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801beb2:	bf00      	nop
 801beb4:	e7fd      	b.n	801beb2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801beb6:	4618      	mov	r0, r3
 801beb8:	3714      	adds	r7, #20
 801beba:	46bd      	mov	sp, r7
 801bebc:	bc80      	pop	{r7}
 801bebe:	4770      	bx	lr
 801bec0:	0801e6a4 	.word	0x0801e6a4

0801bec4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801bec4:	b580      	push	{r7, lr}
 801bec6:	b08a      	sub	sp, #40	@ 0x28
 801bec8:	af00      	add	r7, sp, #0
 801beca:	6078      	str	r0, [r7, #4]
 801becc:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801bece:	4b35      	ldr	r3, [pc, #212]	@ (801bfa4 <SUBGRF_GetCFO+0xe0>)
 801bed0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801bed2:	f640 0007 	movw	r0, #2055	@ 0x807
 801bed6:	f7ff fdbb 	bl	801ba50 <SUBGRF_ReadRegister>
 801beda:	4603      	mov	r3, r0
 801bedc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801bede:	7ffb      	ldrb	r3, [r7, #31]
 801bee0:	08db      	lsrs	r3, r3, #3
 801bee2:	b2db      	uxtb	r3, r3
 801bee4:	f003 0303 	and.w	r3, r3, #3
 801bee8:	3328      	adds	r3, #40	@ 0x28
 801beea:	443b      	add	r3, r7
 801beec:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801bef0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801bef2:	7ffb      	ldrb	r3, [r7, #31]
 801bef4:	f003 0307 	and.w	r3, r3, #7
 801bef8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801befa:	7fba      	ldrb	r2, [r7, #30]
 801befc:	7f7b      	ldrb	r3, [r7, #29]
 801befe:	3301      	adds	r3, #1
 801bf00:	fa02 f303 	lsl.w	r3, r2, r3
 801bf04:	461a      	mov	r2, r3
 801bf06:	4b28      	ldr	r3, [pc, #160]	@ (801bfa8 <SUBGRF_GetCFO+0xe4>)
 801bf08:	fbb3 f3f2 	udiv	r3, r3, r2
 801bf0c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801bf0e:	69ba      	ldr	r2, [r7, #24]
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf16:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801bf18:	2301      	movs	r3, #1
 801bf1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801bf1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bf22:	697a      	ldr	r2, [r7, #20]
 801bf24:	fb02 f303 	mul.w	r3, r2, r3
 801bf28:	2b07      	cmp	r3, #7
 801bf2a:	d802      	bhi.n	801bf32 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801bf2c:	2302      	movs	r3, #2
 801bf2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801bf32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bf36:	697a      	ldr	r2, [r7, #20]
 801bf38:	fb02 f303 	mul.w	r3, r2, r3
 801bf3c:	2b03      	cmp	r3, #3
 801bf3e:	d802      	bhi.n	801bf46 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801bf40:	2304      	movs	r3, #4
 801bf42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801bf46:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801bf4a:	69bb      	ldr	r3, [r7, #24]
 801bf4c:	fb02 f303 	mul.w	r3, r2, r3
 801bf50:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801bf52:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801bf56:	f7ff fd7b 	bl	801ba50 <SUBGRF_ReadRegister>
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	021b      	lsls	r3, r3, #8
 801bf5e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801bf62:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801bf64:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801bf68:	f7ff fd72 	bl	801ba50 <SUBGRF_ReadRegister>
 801bf6c:	4603      	mov	r3, r0
 801bf6e:	461a      	mov	r2, r3
 801bf70:	6a3b      	ldr	r3, [r7, #32]
 801bf72:	4313      	orrs	r3, r2
 801bf74:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801bf76:	6a3b      	ldr	r3, [r7, #32]
 801bf78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d005      	beq.n	801bf8c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801bf80:	6a3b      	ldr	r3, [r7, #32]
 801bf82:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801bf86:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801bf8a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801bf8c:	693b      	ldr	r3, [r7, #16]
 801bf8e:	095b      	lsrs	r3, r3, #5
 801bf90:	6a3a      	ldr	r2, [r7, #32]
 801bf92:	fb02 f303 	mul.w	r3, r2, r3
 801bf96:	11da      	asrs	r2, r3, #7
 801bf98:	683b      	ldr	r3, [r7, #0]
 801bf9a:	601a      	str	r2, [r3, #0]
}
 801bf9c:	bf00      	nop
 801bf9e:	3728      	adds	r7, #40	@ 0x28
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bd80      	pop	{r7, pc}
 801bfa4:	0c0a0804 	.word	0x0c0a0804
 801bfa8:	01e84800 	.word	0x01e84800

0801bfac <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801bfac:	b480      	push	{r7}
 801bfae:	b087      	sub	sp, #28
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	60b9      	str	r1, [r7, #8]
 801bfb6:	607a      	str	r2, [r7, #4]
 801bfb8:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801bfba:	2300      	movs	r3, #0
 801bfbc:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801bfbe:	f04f 33ff 	mov.w	r3, #4294967295
 801bfc2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801bfc4:	697b      	ldr	r3, [r7, #20]
}
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	371c      	adds	r7, #28
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	bc80      	pop	{r7}
 801bfce:	4770      	bx	lr

0801bfd0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801bfd0:	b480      	push	{r7}
 801bfd2:	b087      	sub	sp, #28
 801bfd4:	af00      	add	r7, sp, #0
 801bfd6:	4603      	mov	r3, r0
 801bfd8:	60b9      	str	r1, [r7, #8]
 801bfda:	607a      	str	r2, [r7, #4]
 801bfdc:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801bfde:	2300      	movs	r3, #0
 801bfe0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801bfe2:	f04f 33ff 	mov.w	r3, #4294967295
 801bfe6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801bfe8:	697b      	ldr	r3, [r7, #20]
}
 801bfea:	4618      	mov	r0, r3
 801bfec:	371c      	adds	r7, #28
 801bfee:	46bd      	mov	sp, r7
 801bff0:	bc80      	pop	{r7}
 801bff2:	4770      	bx	lr

0801bff4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801bff4:	b480      	push	{r7}
 801bff6:	b085      	sub	sp, #20
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	60f8      	str	r0, [r7, #12]
 801bffc:	60b9      	str	r1, [r7, #8]
 801bffe:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c000:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c004:	4618      	mov	r0, r3
 801c006:	3714      	adds	r7, #20
 801c008:	46bd      	mov	sp, r7
 801c00a:	bc80      	pop	{r7}
 801c00c:	4770      	bx	lr

0801c00e <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c00e:	b480      	push	{r7}
 801c010:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c012:	bf00      	nop
 801c014:	46bd      	mov	sp, r7
 801c016:	bc80      	pop	{r7}
 801c018:	4770      	bx	lr

0801c01a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c01a:	b480      	push	{r7}
 801c01c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c01e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c020:	4618      	mov	r0, r3
 801c022:	46bd      	mov	sp, r7
 801c024:	bc80      	pop	{r7}
 801c026:	4770      	bx	lr

0801c028 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c028:	b480      	push	{r7}
 801c02a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c02c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c02e:	4618      	mov	r0, r3
 801c030:	46bd      	mov	sp, r7
 801c032:	bc80      	pop	{r7}
 801c034:	4770      	bx	lr

0801c036 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c036:	b480      	push	{r7}
 801c038:	b083      	sub	sp, #12
 801c03a:	af00      	add	r7, sp, #0
 801c03c:	4603      	mov	r3, r0
 801c03e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c040:	bf00      	nop
 801c042:	370c      	adds	r7, #12
 801c044:	46bd      	mov	sp, r7
 801c046:	bc80      	pop	{r7}
 801c048:	4770      	bx	lr

0801c04a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c04a:	b480      	push	{r7}
 801c04c:	b087      	sub	sp, #28
 801c04e:	af00      	add	r7, sp, #0
 801c050:	60f8      	str	r0, [r7, #12]
 801c052:	460b      	mov	r3, r1
 801c054:	607a      	str	r2, [r7, #4]
 801c056:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c058:	f04f 33ff 	mov.w	r3, #4294967295
 801c05c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c05e:	697b      	ldr	r3, [r7, #20]
}
 801c060:	4618      	mov	r0, r3
 801c062:	371c      	adds	r7, #28
 801c064:	46bd      	mov	sp, r7
 801c066:	bc80      	pop	{r7}
 801c068:	4770      	bx	lr

0801c06a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c06a:	b480      	push	{r7}
 801c06c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c06e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c072:	4618      	mov	r0, r3
 801c074:	46bd      	mov	sp, r7
 801c076:	bc80      	pop	{r7}
 801c078:	4770      	bx	lr

0801c07a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c07a:	b480      	push	{r7}
 801c07c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c07e:	bf00      	nop
 801c080:	46bd      	mov	sp, r7
 801c082:	bc80      	pop	{r7}
 801c084:	4770      	bx	lr

0801c086 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c086:	b480      	push	{r7}
 801c088:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c08a:	bf00      	nop
 801c08c:	46bd      	mov	sp, r7
 801c08e:	bc80      	pop	{r7}
 801c090:	4770      	bx	lr

0801c092 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c092:	b480      	push	{r7}
 801c094:	b083      	sub	sp, #12
 801c096:	af00      	add	r7, sp, #0
 801c098:	4603      	mov	r3, r0
 801c09a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c09c:	bf00      	nop
 801c09e:	370c      	adds	r7, #12
 801c0a0:	46bd      	mov	sp, r7
 801c0a2:	bc80      	pop	{r7}
 801c0a4:	4770      	bx	lr
	...

0801c0a8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c0a8:	b480      	push	{r7}
 801c0aa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c0ac:	4b04      	ldr	r3, [pc, #16]	@ (801c0c0 <UTIL_LPM_Init+0x18>)
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c0b2:	4b04      	ldr	r3, [pc, #16]	@ (801c0c4 <UTIL_LPM_Init+0x1c>)
 801c0b4:	2200      	movs	r2, #0
 801c0b6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c0b8:	bf00      	nop
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	bc80      	pop	{r7}
 801c0be:	4770      	bx	lr
 801c0c0:	20001c14 	.word	0x20001c14
 801c0c4:	20001c18 	.word	0x20001c18

0801c0c8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c0c8:	b480      	push	{r7}
 801c0ca:	b087      	sub	sp, #28
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	6078      	str	r0, [r7, #4]
 801c0d0:	460b      	mov	r3, r1
 801c0d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0d4:	f3ef 8310 	mrs	r3, PRIMASK
 801c0d8:	613b      	str	r3, [r7, #16]
  return(result);
 801c0da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c0dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0de:	b672      	cpsid	i
}
 801c0e0:	bf00      	nop
  
  switch( state )
 801c0e2:	78fb      	ldrb	r3, [r7, #3]
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d008      	beq.n	801c0fa <UTIL_LPM_SetStopMode+0x32>
 801c0e8:	2b01      	cmp	r3, #1
 801c0ea:	d10e      	bne.n	801c10a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c0ec:	4b0d      	ldr	r3, [pc, #52]	@ (801c124 <UTIL_LPM_SetStopMode+0x5c>)
 801c0ee:	681a      	ldr	r2, [r3, #0]
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	4313      	orrs	r3, r2
 801c0f4:	4a0b      	ldr	r2, [pc, #44]	@ (801c124 <UTIL_LPM_SetStopMode+0x5c>)
 801c0f6:	6013      	str	r3, [r2, #0]
      break;
 801c0f8:	e008      	b.n	801c10c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	43da      	mvns	r2, r3
 801c0fe:	4b09      	ldr	r3, [pc, #36]	@ (801c124 <UTIL_LPM_SetStopMode+0x5c>)
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	4013      	ands	r3, r2
 801c104:	4a07      	ldr	r2, [pc, #28]	@ (801c124 <UTIL_LPM_SetStopMode+0x5c>)
 801c106:	6013      	str	r3, [r2, #0]
      break;
 801c108:	e000      	b.n	801c10c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c10a:	bf00      	nop
 801c10c:	697b      	ldr	r3, [r7, #20]
 801c10e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	f383 8810 	msr	PRIMASK, r3
}
 801c116:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c118:	bf00      	nop
 801c11a:	371c      	adds	r7, #28
 801c11c:	46bd      	mov	sp, r7
 801c11e:	bc80      	pop	{r7}
 801c120:	4770      	bx	lr
 801c122:	bf00      	nop
 801c124:	20001c14 	.word	0x20001c14

0801c128 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c128:	b480      	push	{r7}
 801c12a:	b087      	sub	sp, #28
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	6078      	str	r0, [r7, #4]
 801c130:	460b      	mov	r3, r1
 801c132:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c134:	f3ef 8310 	mrs	r3, PRIMASK
 801c138:	613b      	str	r3, [r7, #16]
  return(result);
 801c13a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c13c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c13e:	b672      	cpsid	i
}
 801c140:	bf00      	nop
  
  switch(state)
 801c142:	78fb      	ldrb	r3, [r7, #3]
 801c144:	2b00      	cmp	r3, #0
 801c146:	d008      	beq.n	801c15a <UTIL_LPM_SetOffMode+0x32>
 801c148:	2b01      	cmp	r3, #1
 801c14a:	d10e      	bne.n	801c16a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c14c:	4b0d      	ldr	r3, [pc, #52]	@ (801c184 <UTIL_LPM_SetOffMode+0x5c>)
 801c14e:	681a      	ldr	r2, [r3, #0]
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	4313      	orrs	r3, r2
 801c154:	4a0b      	ldr	r2, [pc, #44]	@ (801c184 <UTIL_LPM_SetOffMode+0x5c>)
 801c156:	6013      	str	r3, [r2, #0]
      break;
 801c158:	e008      	b.n	801c16c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	43da      	mvns	r2, r3
 801c15e:	4b09      	ldr	r3, [pc, #36]	@ (801c184 <UTIL_LPM_SetOffMode+0x5c>)
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	4013      	ands	r3, r2
 801c164:	4a07      	ldr	r2, [pc, #28]	@ (801c184 <UTIL_LPM_SetOffMode+0x5c>)
 801c166:	6013      	str	r3, [r2, #0]
      break;
 801c168:	e000      	b.n	801c16c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c16a:	bf00      	nop
 801c16c:	697b      	ldr	r3, [r7, #20]
 801c16e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	f383 8810 	msr	PRIMASK, r3
}
 801c176:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c178:	bf00      	nop
 801c17a:	371c      	adds	r7, #28
 801c17c:	46bd      	mov	sp, r7
 801c17e:	bc80      	pop	{r7}
 801c180:	4770      	bx	lr
 801c182:	bf00      	nop
 801c184:	20001c18 	.word	0x20001c18

0801c188 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b084      	sub	sp, #16
 801c18c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c18e:	f3ef 8310 	mrs	r3, PRIMASK
 801c192:	60bb      	str	r3, [r7, #8]
  return(result);
 801c194:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c196:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c198:	b672      	cpsid	i
}
 801c19a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c19c:	4b12      	ldr	r3, [pc, #72]	@ (801c1e8 <UTIL_LPM_EnterLowPower+0x60>)
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d006      	beq.n	801c1b2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c1a4:	4b11      	ldr	r3, [pc, #68]	@ (801c1ec <UTIL_LPM_EnterLowPower+0x64>)
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c1aa:	4b10      	ldr	r3, [pc, #64]	@ (801c1ec <UTIL_LPM_EnterLowPower+0x64>)
 801c1ac:	685b      	ldr	r3, [r3, #4]
 801c1ae:	4798      	blx	r3
 801c1b0:	e010      	b.n	801c1d4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c1b2:	4b0f      	ldr	r3, [pc, #60]	@ (801c1f0 <UTIL_LPM_EnterLowPower+0x68>)
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d006      	beq.n	801c1c8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c1ba:	4b0c      	ldr	r3, [pc, #48]	@ (801c1ec <UTIL_LPM_EnterLowPower+0x64>)
 801c1bc:	689b      	ldr	r3, [r3, #8]
 801c1be:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c1c0:	4b0a      	ldr	r3, [pc, #40]	@ (801c1ec <UTIL_LPM_EnterLowPower+0x64>)
 801c1c2:	68db      	ldr	r3, [r3, #12]
 801c1c4:	4798      	blx	r3
 801c1c6:	e005      	b.n	801c1d4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c1c8:	4b08      	ldr	r3, [pc, #32]	@ (801c1ec <UTIL_LPM_EnterLowPower+0x64>)
 801c1ca:	691b      	ldr	r3, [r3, #16]
 801c1cc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c1ce:	4b07      	ldr	r3, [pc, #28]	@ (801c1ec <UTIL_LPM_EnterLowPower+0x64>)
 801c1d0:	695b      	ldr	r3, [r3, #20]
 801c1d2:	4798      	blx	r3
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	f383 8810 	msr	PRIMASK, r3
}
 801c1de:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c1e0:	bf00      	nop
 801c1e2:	3710      	adds	r7, #16
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	bd80      	pop	{r7, pc}
 801c1e8:	20001c14 	.word	0x20001c14
 801c1ec:	0801e118 	.word	0x0801e118
 801c1f0:	20001c18 	.word	0x20001c18

0801c1f4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c1f4:	b480      	push	{r7}
 801c1f6:	b087      	sub	sp, #28
 801c1f8:	af00      	add	r7, sp, #0
 801c1fa:	60f8      	str	r0, [r7, #12]
 801c1fc:	60b9      	str	r1, [r7, #8]
 801c1fe:	4613      	mov	r3, r2
 801c200:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c206:	68bb      	ldr	r3, [r7, #8]
 801c208:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c20a:	e007      	b.n	801c21c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c20c:	693a      	ldr	r2, [r7, #16]
 801c20e:	1c53      	adds	r3, r2, #1
 801c210:	613b      	str	r3, [r7, #16]
 801c212:	697b      	ldr	r3, [r7, #20]
 801c214:	1c59      	adds	r1, r3, #1
 801c216:	6179      	str	r1, [r7, #20]
 801c218:	7812      	ldrb	r2, [r2, #0]
 801c21a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c21c:	88fb      	ldrh	r3, [r7, #6]
 801c21e:	1e5a      	subs	r2, r3, #1
 801c220:	80fa      	strh	r2, [r7, #6]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d1f2      	bne.n	801c20c <UTIL_MEM_cpy_8+0x18>
    }
}
 801c226:	bf00      	nop
 801c228:	bf00      	nop
 801c22a:	371c      	adds	r7, #28
 801c22c:	46bd      	mov	sp, r7
 801c22e:	bc80      	pop	{r7}
 801c230:	4770      	bx	lr

0801c232 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c232:	b480      	push	{r7}
 801c234:	b085      	sub	sp, #20
 801c236:	af00      	add	r7, sp, #0
 801c238:	6078      	str	r0, [r7, #4]
 801c23a:	460b      	mov	r3, r1
 801c23c:	70fb      	strb	r3, [r7, #3]
 801c23e:	4613      	mov	r3, r2
 801c240:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c246:	e004      	b.n	801c252 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	1c5a      	adds	r2, r3, #1
 801c24c:	60fa      	str	r2, [r7, #12]
 801c24e:	78fa      	ldrb	r2, [r7, #3]
 801c250:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c252:	883b      	ldrh	r3, [r7, #0]
 801c254:	1e5a      	subs	r2, r3, #1
 801c256:	803a      	strh	r2, [r7, #0]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d1f5      	bne.n	801c248 <UTIL_MEM_set_8+0x16>
  }
}
 801c25c:	bf00      	nop
 801c25e:	bf00      	nop
 801c260:	3714      	adds	r7, #20
 801c262:	46bd      	mov	sp, r7
 801c264:	bc80      	pop	{r7}
 801c266:	4770      	bx	lr

0801c268 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c268:	b082      	sub	sp, #8
 801c26a:	b480      	push	{r7}
 801c26c:	b087      	sub	sp, #28
 801c26e:	af00      	add	r7, sp, #0
 801c270:	60f8      	str	r0, [r7, #12]
 801c272:	1d38      	adds	r0, r7, #4
 801c274:	e880 0006 	stmia.w	r0, {r1, r2}
 801c278:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c27a:	2300      	movs	r3, #0
 801c27c:	613b      	str	r3, [r7, #16]
 801c27e:	2300      	movs	r3, #0
 801c280:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c286:	4413      	add	r3, r2
 801c288:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c28a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c28e:	b29a      	uxth	r2, r3
 801c290:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c294:	b29b      	uxth	r3, r3
 801c296:	4413      	add	r3, r2
 801c298:	b29b      	uxth	r3, r3
 801c29a:	b21b      	sxth	r3, r3
 801c29c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c29e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c2a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c2a6:	db0a      	blt.n	801c2be <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c2a8:	693b      	ldr	r3, [r7, #16]
 801c2aa:	3301      	adds	r3, #1
 801c2ac:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c2ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c2b2:	b29b      	uxth	r3, r3
 801c2b4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801c2b8:	b29b      	uxth	r3, r3
 801c2ba:	b21b      	sxth	r3, r3
 801c2bc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	461a      	mov	r2, r3
 801c2c2:	f107 0310 	add.w	r3, r7, #16
 801c2c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c2ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c2ce:	68f8      	ldr	r0, [r7, #12]
 801c2d0:	371c      	adds	r7, #28
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	bc80      	pop	{r7}
 801c2d6:	b002      	add	sp, #8
 801c2d8:	4770      	bx	lr

0801c2da <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c2da:	b082      	sub	sp, #8
 801c2dc:	b480      	push	{r7}
 801c2de:	b087      	sub	sp, #28
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	60f8      	str	r0, [r7, #12]
 801c2e4:	1d38      	adds	r0, r7, #4
 801c2e6:	e880 0006 	stmia.w	r0, {r1, r2}
 801c2ea:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c2ec:	2300      	movs	r3, #0
 801c2ee:	613b      	str	r3, [r7, #16]
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c2f4:	687a      	ldr	r2, [r7, #4]
 801c2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2f8:	1ad3      	subs	r3, r2, r3
 801c2fa:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c2fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c300:	b29a      	uxth	r2, r3
 801c302:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c306:	b29b      	uxth	r3, r3
 801c308:	1ad3      	subs	r3, r2, r3
 801c30a:	b29b      	uxth	r3, r3
 801c30c:	b21b      	sxth	r3, r3
 801c30e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c310:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c314:	2b00      	cmp	r3, #0
 801c316:	da0a      	bge.n	801c32e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c318:	693b      	ldr	r3, [r7, #16]
 801c31a:	3b01      	subs	r3, #1
 801c31c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c31e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c322:	b29b      	uxth	r3, r3
 801c324:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801c328:	b29b      	uxth	r3, r3
 801c32a:	b21b      	sxth	r3, r3
 801c32c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	461a      	mov	r2, r3
 801c332:	f107 0310 	add.w	r3, r7, #16
 801c336:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c33a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c33e:	68f8      	ldr	r0, [r7, #12]
 801c340:	371c      	adds	r7, #28
 801c342:	46bd      	mov	sp, r7
 801c344:	bc80      	pop	{r7}
 801c346:	b002      	add	sp, #8
 801c348:	4770      	bx	lr
	...

0801c34c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b088      	sub	sp, #32
 801c350:	af02      	add	r7, sp, #8
 801c352:	463b      	mov	r3, r7
 801c354:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c358:	2300      	movs	r3, #0
 801c35a:	60bb      	str	r3, [r7, #8]
 801c35c:	2300      	movs	r3, #0
 801c35e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c360:	4b10      	ldr	r3, [pc, #64]	@ (801c3a4 <SysTimeSet+0x58>)
 801c362:	691b      	ldr	r3, [r3, #16]
 801c364:	f107 0208 	add.w	r2, r7, #8
 801c368:	3204      	adds	r2, #4
 801c36a:	4610      	mov	r0, r2
 801c36c:	4798      	blx	r3
 801c36e:	4603      	mov	r3, r0
 801c370:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c372:	f107 0010 	add.w	r0, r7, #16
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	9300      	str	r3, [sp, #0]
 801c37a:	68bb      	ldr	r3, [r7, #8]
 801c37c:	463a      	mov	r2, r7
 801c37e:	ca06      	ldmia	r2, {r1, r2}
 801c380:	f7ff ffab 	bl	801c2da <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c384:	4b07      	ldr	r3, [pc, #28]	@ (801c3a4 <SysTimeSet+0x58>)
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	693a      	ldr	r2, [r7, #16]
 801c38a:	4610      	mov	r0, r2
 801c38c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c38e:	4b05      	ldr	r3, [pc, #20]	@ (801c3a4 <SysTimeSet+0x58>)
 801c390:	689b      	ldr	r3, [r3, #8]
 801c392:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c396:	4610      	mov	r0, r2
 801c398:	4798      	blx	r3
}
 801c39a:	bf00      	nop
 801c39c:	3718      	adds	r7, #24
 801c39e:	46bd      	mov	sp, r7
 801c3a0:	bd80      	pop	{r7, pc}
 801c3a2:	bf00      	nop
 801c3a4:	0801e1fc 	.word	0x0801e1fc

0801c3a8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c3a8:	b580      	push	{r7, lr}
 801c3aa:	b08a      	sub	sp, #40	@ 0x28
 801c3ac:	af02      	add	r7, sp, #8
 801c3ae:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c3b0:	2300      	movs	r3, #0
 801c3b2:	61bb      	str	r3, [r7, #24]
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	613b      	str	r3, [r7, #16]
 801c3bc:	2300      	movs	r3, #0
 801c3be:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c3c0:	4b14      	ldr	r3, [pc, #80]	@ (801c414 <SysTimeGet+0x6c>)
 801c3c2:	691b      	ldr	r3, [r3, #16]
 801c3c4:	f107 0218 	add.w	r2, r7, #24
 801c3c8:	3204      	adds	r2, #4
 801c3ca:	4610      	mov	r0, r2
 801c3cc:	4798      	blx	r3
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c3d2:	4b10      	ldr	r3, [pc, #64]	@ (801c414 <SysTimeGet+0x6c>)
 801c3d4:	68db      	ldr	r3, [r3, #12]
 801c3d6:	4798      	blx	r3
 801c3d8:	4603      	mov	r3, r0
 801c3da:	b21b      	sxth	r3, r3
 801c3dc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c3de:	4b0d      	ldr	r3, [pc, #52]	@ (801c414 <SysTimeGet+0x6c>)
 801c3e0:	685b      	ldr	r3, [r3, #4]
 801c3e2:	4798      	blx	r3
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c3e8:	f107 0010 	add.w	r0, r7, #16
 801c3ec:	69fb      	ldr	r3, [r7, #28]
 801c3ee:	9300      	str	r3, [sp, #0]
 801c3f0:	69bb      	ldr	r3, [r7, #24]
 801c3f2:	f107 0208 	add.w	r2, r7, #8
 801c3f6:	ca06      	ldmia	r2, {r1, r2}
 801c3f8:	f7ff ff36 	bl	801c268 <SysTimeAdd>

  return sysTime;
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	461a      	mov	r2, r3
 801c400:	f107 0310 	add.w	r3, r7, #16
 801c404:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c408:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c40c:	6878      	ldr	r0, [r7, #4]
 801c40e:	3720      	adds	r7, #32
 801c410:	46bd      	mov	sp, r7
 801c412:	bd80      	pop	{r7, pc}
 801c414:	0801e1fc 	.word	0x0801e1fc

0801c418 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c418:	b580      	push	{r7, lr}
 801c41a:	b084      	sub	sp, #16
 801c41c:	af00      	add	r7, sp, #0
 801c41e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c420:	2300      	movs	r3, #0
 801c422:	60bb      	str	r3, [r7, #8]
 801c424:	2300      	movs	r3, #0
 801c426:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c428:	4b0a      	ldr	r3, [pc, #40]	@ (801c454 <SysTimeGetMcuTime+0x3c>)
 801c42a:	691b      	ldr	r3, [r3, #16]
 801c42c:	f107 0208 	add.w	r2, r7, #8
 801c430:	3204      	adds	r2, #4
 801c432:	4610      	mov	r0, r2
 801c434:	4798      	blx	r3
 801c436:	4603      	mov	r3, r0
 801c438:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	461a      	mov	r2, r3
 801c43e:	f107 0308 	add.w	r3, r7, #8
 801c442:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c446:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c44a:	6878      	ldr	r0, [r7, #4]
 801c44c:	3710      	adds	r7, #16
 801c44e:	46bd      	mov	sp, r7
 801c450:	bd80      	pop	{r7, pc}
 801c452:	bf00      	nop
 801c454:	0801e1fc 	.word	0x0801e1fc

0801c458 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c458:	b480      	push	{r7}
 801c45a:	b085      	sub	sp, #20
 801c45c:	af00      	add	r7, sp, #0
 801c45e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c460:	2300      	movs	r3, #0
 801c462:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c464:	e00e      	b.n	801c484 <ee_skip_atoi+0x2c>
 801c466:	68fa      	ldr	r2, [r7, #12]
 801c468:	4613      	mov	r3, r2
 801c46a:	009b      	lsls	r3, r3, #2
 801c46c:	4413      	add	r3, r2
 801c46e:	005b      	lsls	r3, r3, #1
 801c470:	4618      	mov	r0, r3
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	1c59      	adds	r1, r3, #1
 801c478:	687a      	ldr	r2, [r7, #4]
 801c47a:	6011      	str	r1, [r2, #0]
 801c47c:	781b      	ldrb	r3, [r3, #0]
 801c47e:	4403      	add	r3, r0
 801c480:	3b30      	subs	r3, #48	@ 0x30
 801c482:	60fb      	str	r3, [r7, #12]
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	781b      	ldrb	r3, [r3, #0]
 801c48a:	2b2f      	cmp	r3, #47	@ 0x2f
 801c48c:	d904      	bls.n	801c498 <ee_skip_atoi+0x40>
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	781b      	ldrb	r3, [r3, #0]
 801c494:	2b39      	cmp	r3, #57	@ 0x39
 801c496:	d9e6      	bls.n	801c466 <ee_skip_atoi+0xe>
  return i;
 801c498:	68fb      	ldr	r3, [r7, #12]
}
 801c49a:	4618      	mov	r0, r3
 801c49c:	3714      	adds	r7, #20
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bc80      	pop	{r7}
 801c4a2:	4770      	bx	lr

0801c4a4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c4a4:	b480      	push	{r7}
 801c4a6:	b099      	sub	sp, #100	@ 0x64
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	60f8      	str	r0, [r7, #12]
 801c4ac:	60b9      	str	r1, [r7, #8]
 801c4ae:	607a      	str	r2, [r7, #4]
 801c4b0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c4b2:	4b71      	ldr	r3, [pc, #452]	@ (801c678 <ee_number+0x1d4>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c4b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c4ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d002      	beq.n	801c4c8 <ee_number+0x24>
 801c4c2:	4b6e      	ldr	r3, [pc, #440]	@ (801c67c <ee_number+0x1d8>)
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c4c8:	683b      	ldr	r3, [r7, #0]
 801c4ca:	2b01      	cmp	r3, #1
 801c4cc:	dd02      	ble.n	801c4d4 <ee_number+0x30>
 801c4ce:	683b      	ldr	r3, [r7, #0]
 801c4d0:	2b24      	cmp	r3, #36	@ 0x24
 801c4d2:	dd01      	ble.n	801c4d8 <ee_number+0x34>
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	e0ca      	b.n	801c66e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801c4d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c4da:	f003 0301 	and.w	r3, r3, #1
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d001      	beq.n	801c4e6 <ee_number+0x42>
 801c4e2:	2330      	movs	r3, #48	@ 0x30
 801c4e4:	e000      	b.n	801c4e8 <ee_number+0x44>
 801c4e6:	2320      	movs	r3, #32
 801c4e8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801c4f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c4f4:	f003 0302 	and.w	r3, r3, #2
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d00b      	beq.n	801c514 <ee_number+0x70>
  {
    if (num < 0)
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	da08      	bge.n	801c514 <ee_number+0x70>
    {
      sign = '-';
 801c502:	232d      	movs	r3, #45	@ 0x2d
 801c504:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	425b      	negs	r3, r3
 801c50c:	607b      	str	r3, [r7, #4]
      size--;
 801c50e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c510:	3b01      	subs	r3, #1
 801c512:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801c514:	2300      	movs	r3, #0
 801c516:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d11e      	bne.n	801c55c <ee_number+0xb8>
    tmp[i++] = '0';
 801c51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c520:	1c5a      	adds	r2, r3, #1
 801c522:	657a      	str	r2, [r7, #84]	@ 0x54
 801c524:	3360      	adds	r3, #96	@ 0x60
 801c526:	443b      	add	r3, r7
 801c528:	2230      	movs	r2, #48	@ 0x30
 801c52a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801c52e:	e018      	b.n	801c562 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	683a      	ldr	r2, [r7, #0]
 801c534:	fbb3 f1f2 	udiv	r1, r3, r2
 801c538:	fb01 f202 	mul.w	r2, r1, r2
 801c53c:	1a9b      	subs	r3, r3, r2
 801c53e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801c540:	441a      	add	r2, r3
 801c542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c544:	1c59      	adds	r1, r3, #1
 801c546:	6579      	str	r1, [r7, #84]	@ 0x54
 801c548:	7812      	ldrb	r2, [r2, #0]
 801c54a:	3360      	adds	r3, #96	@ 0x60
 801c54c:	443b      	add	r3, r7
 801c54e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801c552:	687a      	ldr	r2, [r7, #4]
 801c554:	683b      	ldr	r3, [r7, #0]
 801c556:	fbb2 f3f3 	udiv	r3, r2, r3
 801c55a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d1e6      	bne.n	801c530 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801c562:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c566:	429a      	cmp	r2, r3
 801c568:	dd01      	ble.n	801c56e <ee_number+0xca>
 801c56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c56c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801c56e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c572:	1ad3      	subs	r3, r2, r3
 801c574:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c578:	f003 0301 	and.w	r3, r3, #1
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d112      	bne.n	801c5a6 <ee_number+0x102>
 801c580:	e00c      	b.n	801c59c <ee_number+0xf8>
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	1c5a      	adds	r2, r3, #1
 801c586:	60fa      	str	r2, [r7, #12]
 801c588:	2220      	movs	r2, #32
 801c58a:	701a      	strb	r2, [r3, #0]
 801c58c:	68bb      	ldr	r3, [r7, #8]
 801c58e:	3b01      	subs	r3, #1
 801c590:	60bb      	str	r3, [r7, #8]
 801c592:	68bb      	ldr	r3, [r7, #8]
 801c594:	2b00      	cmp	r3, #0
 801c596:	d101      	bne.n	801c59c <ee_number+0xf8>
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	e068      	b.n	801c66e <ee_number+0x1ca>
 801c59c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c59e:	1e5a      	subs	r2, r3, #1
 801c5a0:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	dced      	bgt.n	801c582 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c5a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d01b      	beq.n	801c5e6 <ee_number+0x142>
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	1c5a      	adds	r2, r3, #1
 801c5b2:	60fa      	str	r2, [r7, #12]
 801c5b4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801c5b8:	701a      	strb	r2, [r3, #0]
 801c5ba:	68bb      	ldr	r3, [r7, #8]
 801c5bc:	3b01      	subs	r3, #1
 801c5be:	60bb      	str	r3, [r7, #8]
 801c5c0:	68bb      	ldr	r3, [r7, #8]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d10f      	bne.n	801c5e6 <ee_number+0x142>
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	e051      	b.n	801c66e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	1c5a      	adds	r2, r3, #1
 801c5ce:	60fa      	str	r2, [r7, #12]
 801c5d0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801c5d4:	701a      	strb	r2, [r3, #0]
 801c5d6:	68bb      	ldr	r3, [r7, #8]
 801c5d8:	3b01      	subs	r3, #1
 801c5da:	60bb      	str	r3, [r7, #8]
 801c5dc:	68bb      	ldr	r3, [r7, #8]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d101      	bne.n	801c5e6 <ee_number+0x142>
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	e043      	b.n	801c66e <ee_number+0x1ca>
 801c5e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c5e8:	1e5a      	subs	r2, r3, #1
 801c5ea:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	dcec      	bgt.n	801c5ca <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c5f0:	e00c      	b.n	801c60c <ee_number+0x168>
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	1c5a      	adds	r2, r3, #1
 801c5f6:	60fa      	str	r2, [r7, #12]
 801c5f8:	2230      	movs	r2, #48	@ 0x30
 801c5fa:	701a      	strb	r2, [r3, #0]
 801c5fc:	68bb      	ldr	r3, [r7, #8]
 801c5fe:	3b01      	subs	r3, #1
 801c600:	60bb      	str	r3, [r7, #8]
 801c602:	68bb      	ldr	r3, [r7, #8]
 801c604:	2b00      	cmp	r3, #0
 801c606:	d101      	bne.n	801c60c <ee_number+0x168>
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	e030      	b.n	801c66e <ee_number+0x1ca>
 801c60c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c60e:	1e5a      	subs	r2, r3, #1
 801c610:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801c612:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c614:	429a      	cmp	r2, r3
 801c616:	dbec      	blt.n	801c5f2 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c618:	e010      	b.n	801c63c <ee_number+0x198>
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	1c5a      	adds	r2, r3, #1
 801c61e:	60fa      	str	r2, [r7, #12]
 801c620:	f107 0110 	add.w	r1, r7, #16
 801c624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c626:	440a      	add	r2, r1
 801c628:	7812      	ldrb	r2, [r2, #0]
 801c62a:	701a      	strb	r2, [r3, #0]
 801c62c:	68bb      	ldr	r3, [r7, #8]
 801c62e:	3b01      	subs	r3, #1
 801c630:	60bb      	str	r3, [r7, #8]
 801c632:	68bb      	ldr	r3, [r7, #8]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d101      	bne.n	801c63c <ee_number+0x198>
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	e018      	b.n	801c66e <ee_number+0x1ca>
 801c63c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c63e:	1e5a      	subs	r2, r3, #1
 801c640:	657a      	str	r2, [r7, #84]	@ 0x54
 801c642:	2b00      	cmp	r3, #0
 801c644:	dce9      	bgt.n	801c61a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c646:	e00c      	b.n	801c662 <ee_number+0x1be>
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	1c5a      	adds	r2, r3, #1
 801c64c:	60fa      	str	r2, [r7, #12]
 801c64e:	2220      	movs	r2, #32
 801c650:	701a      	strb	r2, [r3, #0]
 801c652:	68bb      	ldr	r3, [r7, #8]
 801c654:	3b01      	subs	r3, #1
 801c656:	60bb      	str	r3, [r7, #8]
 801c658:	68bb      	ldr	r3, [r7, #8]
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d101      	bne.n	801c662 <ee_number+0x1be>
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	e005      	b.n	801c66e <ee_number+0x1ca>
 801c662:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c664:	1e5a      	subs	r2, r3, #1
 801c666:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c668:	2b00      	cmp	r3, #0
 801c66a:	dced      	bgt.n	801c648 <ee_number+0x1a4>

  return str;
 801c66c:	68fb      	ldr	r3, [r7, #12]
}
 801c66e:	4618      	mov	r0, r3
 801c670:	3764      	adds	r7, #100	@ 0x64
 801c672:	46bd      	mov	sp, r7
 801c674:	bc80      	pop	{r7}
 801c676:	4770      	bx	lr
 801c678:	2000013c 	.word	0x2000013c
 801c67c:	20000140 	.word	0x20000140

0801c680 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c680:	b580      	push	{r7, lr}
 801c682:	b092      	sub	sp, #72	@ 0x48
 801c684:	af04      	add	r7, sp, #16
 801c686:	60f8      	str	r0, [r7, #12]
 801c688:	60b9      	str	r1, [r7, #8]
 801c68a:	607a      	str	r2, [r7, #4]
 801c68c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c68e:	68bb      	ldr	r3, [r7, #8]
 801c690:	2b00      	cmp	r3, #0
 801c692:	dc01      	bgt.n	801c698 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c694:	2300      	movs	r3, #0
 801c696:	e13e      	b.n	801c916 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c69c:	e128      	b.n	801c8f0 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c69e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	1ad2      	subs	r2, r2, r3
 801c6a4:	68bb      	ldr	r3, [r7, #8]
 801c6a6:	3b01      	subs	r3, #1
 801c6a8:	429a      	cmp	r2, r3
 801c6aa:	f280 812e 	bge.w	801c90a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	781b      	ldrb	r3, [r3, #0]
 801c6b2:	2b25      	cmp	r3, #37	@ 0x25
 801c6b4:	d006      	beq.n	801c6c4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c6b6:	687a      	ldr	r2, [r7, #4]
 801c6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6ba:	1c59      	adds	r1, r3, #1
 801c6bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c6be:	7812      	ldrb	r2, [r2, #0]
 801c6c0:	701a      	strb	r2, [r3, #0]
      continue;
 801c6c2:	e112      	b.n	801c8ea <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	3301      	adds	r3, #1
 801c6cc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	781b      	ldrb	r3, [r3, #0]
 801c6d2:	2b30      	cmp	r3, #48	@ 0x30
 801c6d4:	d103      	bne.n	801c6de <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c6d6:	6a3b      	ldr	r3, [r7, #32]
 801c6d8:	f043 0301 	orr.w	r3, r3, #1
 801c6dc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c6de:	f04f 33ff 	mov.w	r3, #4294967295
 801c6e2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	781b      	ldrb	r3, [r3, #0]
 801c6e8:	2b2f      	cmp	r3, #47	@ 0x2f
 801c6ea:	d908      	bls.n	801c6fe <tiny_vsnprintf_like+0x7e>
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	781b      	ldrb	r3, [r3, #0]
 801c6f0:	2b39      	cmp	r3, #57	@ 0x39
 801c6f2:	d804      	bhi.n	801c6fe <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c6f4:	1d3b      	adds	r3, r7, #4
 801c6f6:	4618      	mov	r0, r3
 801c6f8:	f7ff feae 	bl	801c458 <ee_skip_atoi>
 801c6fc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c6fe:	f04f 33ff 	mov.w	r3, #4294967295
 801c702:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c704:	f04f 33ff 	mov.w	r3, #4294967295
 801c708:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c70a:	230a      	movs	r3, #10
 801c70c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	781b      	ldrb	r3, [r3, #0]
 801c712:	3b58      	subs	r3, #88	@ 0x58
 801c714:	2b20      	cmp	r3, #32
 801c716:	f200 8094 	bhi.w	801c842 <tiny_vsnprintf_like+0x1c2>
 801c71a:	a201      	add	r2, pc, #4	@ (adr r2, 801c720 <tiny_vsnprintf_like+0xa0>)
 801c71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c720:	0801c82b 	.word	0x0801c82b
 801c724:	0801c843 	.word	0x0801c843
 801c728:	0801c843 	.word	0x0801c843
 801c72c:	0801c843 	.word	0x0801c843
 801c730:	0801c843 	.word	0x0801c843
 801c734:	0801c843 	.word	0x0801c843
 801c738:	0801c843 	.word	0x0801c843
 801c73c:	0801c843 	.word	0x0801c843
 801c740:	0801c843 	.word	0x0801c843
 801c744:	0801c843 	.word	0x0801c843
 801c748:	0801c843 	.word	0x0801c843
 801c74c:	0801c7af 	.word	0x0801c7af
 801c750:	0801c839 	.word	0x0801c839
 801c754:	0801c843 	.word	0x0801c843
 801c758:	0801c843 	.word	0x0801c843
 801c75c:	0801c843 	.word	0x0801c843
 801c760:	0801c843 	.word	0x0801c843
 801c764:	0801c839 	.word	0x0801c839
 801c768:	0801c843 	.word	0x0801c843
 801c76c:	0801c843 	.word	0x0801c843
 801c770:	0801c843 	.word	0x0801c843
 801c774:	0801c843 	.word	0x0801c843
 801c778:	0801c843 	.word	0x0801c843
 801c77c:	0801c843 	.word	0x0801c843
 801c780:	0801c843 	.word	0x0801c843
 801c784:	0801c843 	.word	0x0801c843
 801c788:	0801c843 	.word	0x0801c843
 801c78c:	0801c7cf 	.word	0x0801c7cf
 801c790:	0801c843 	.word	0x0801c843
 801c794:	0801c88f 	.word	0x0801c88f
 801c798:	0801c843 	.word	0x0801c843
 801c79c:	0801c843 	.word	0x0801c843
 801c7a0:	0801c833 	.word	0x0801c833
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7a6:	1c5a      	adds	r2, r3, #1
 801c7a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c7aa:	2220      	movs	r2, #32
 801c7ac:	701a      	strb	r2, [r3, #0]
 801c7ae:	69fb      	ldr	r3, [r7, #28]
 801c7b0:	3b01      	subs	r3, #1
 801c7b2:	61fb      	str	r3, [r7, #28]
 801c7b4:	69fb      	ldr	r3, [r7, #28]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	dcf4      	bgt.n	801c7a4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c7ba:	683b      	ldr	r3, [r7, #0]
 801c7bc:	1d1a      	adds	r2, r3, #4
 801c7be:	603a      	str	r2, [r7, #0]
 801c7c0:	6819      	ldr	r1, [r3, #0]
 801c7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7c4:	1c5a      	adds	r2, r3, #1
 801c7c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c7c8:	b2ca      	uxtb	r2, r1
 801c7ca:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c7cc:	e08d      	b.n	801c8ea <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801c7ce:	683b      	ldr	r3, [r7, #0]
 801c7d0:	1d1a      	adds	r2, r3, #4
 801c7d2:	603a      	str	r2, [r7, #0]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d101      	bne.n	801c7e2 <tiny_vsnprintf_like+0x162>
 801c7de:	4b50      	ldr	r3, [pc, #320]	@ (801c920 <tiny_vsnprintf_like+0x2a0>)
 801c7e0:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c7e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c7e4:	f7e3 fcc8 	bl	8000178 <strlen>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c7ec:	e004      	b.n	801c7f8 <tiny_vsnprintf_like+0x178>
 801c7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7f0:	1c5a      	adds	r2, r3, #1
 801c7f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c7f4:	2220      	movs	r2, #32
 801c7f6:	701a      	strb	r2, [r3, #0]
 801c7f8:	69fb      	ldr	r3, [r7, #28]
 801c7fa:	1e5a      	subs	r2, r3, #1
 801c7fc:	61fa      	str	r2, [r7, #28]
 801c7fe:	693a      	ldr	r2, [r7, #16]
 801c800:	429a      	cmp	r2, r3
 801c802:	dbf4      	blt.n	801c7ee <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c804:	2300      	movs	r3, #0
 801c806:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c808:	e00a      	b.n	801c820 <tiny_vsnprintf_like+0x1a0>
 801c80a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c80c:	1c53      	adds	r3, r2, #1
 801c80e:	627b      	str	r3, [r7, #36]	@ 0x24
 801c810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c812:	1c59      	adds	r1, r3, #1
 801c814:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c816:	7812      	ldrb	r2, [r2, #0]
 801c818:	701a      	strb	r2, [r3, #0]
 801c81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c81c:	3301      	adds	r3, #1
 801c81e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c820:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c822:	693b      	ldr	r3, [r7, #16]
 801c824:	429a      	cmp	r2, r3
 801c826:	dbf0      	blt.n	801c80a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c828:	e05f      	b.n	801c8ea <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c82a:	6a3b      	ldr	r3, [r7, #32]
 801c82c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c830:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c832:	2310      	movs	r3, #16
 801c834:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801c836:	e02b      	b.n	801c890 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c838:	6a3b      	ldr	r3, [r7, #32]
 801c83a:	f043 0302 	orr.w	r3, r3, #2
 801c83e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c840:	e025      	b.n	801c88e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	781b      	ldrb	r3, [r3, #0]
 801c846:	2b25      	cmp	r3, #37	@ 0x25
 801c848:	d004      	beq.n	801c854 <tiny_vsnprintf_like+0x1d4>
 801c84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c84c:	1c5a      	adds	r2, r3, #1
 801c84e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c850:	2225      	movs	r2, #37	@ 0x25
 801c852:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	1ad2      	subs	r2, r2, r3
 801c85a:	68bb      	ldr	r3, [r7, #8]
 801c85c:	3b01      	subs	r3, #1
 801c85e:	429a      	cmp	r2, r3
 801c860:	da16      	bge.n	801c890 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	781b      	ldrb	r3, [r3, #0]
 801c866:	2b00      	cmp	r3, #0
 801c868:	d006      	beq.n	801c878 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c86a:	687a      	ldr	r2, [r7, #4]
 801c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c86e:	1c59      	adds	r1, r3, #1
 801c870:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c872:	7812      	ldrb	r2, [r2, #0]
 801c874:	701a      	strb	r2, [r3, #0]
 801c876:	e002      	b.n	801c87e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	3b01      	subs	r3, #1
 801c87c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c87e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	1ad2      	subs	r2, r2, r3
 801c884:	68bb      	ldr	r3, [r7, #8]
 801c886:	3b01      	subs	r3, #1
 801c888:	429a      	cmp	r2, r3
 801c88a:	db2d      	blt.n	801c8e8 <tiny_vsnprintf_like+0x268>
 801c88c:	e000      	b.n	801c890 <tiny_vsnprintf_like+0x210>
        break;
 801c88e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c890:	697b      	ldr	r3, [r7, #20]
 801c892:	2b6c      	cmp	r3, #108	@ 0x6c
 801c894:	d105      	bne.n	801c8a2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801c896:	683b      	ldr	r3, [r7, #0]
 801c898:	1d1a      	adds	r2, r3, #4
 801c89a:	603a      	str	r2, [r7, #0]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	637b      	str	r3, [r7, #52]	@ 0x34
 801c8a0:	e00f      	b.n	801c8c2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801c8a2:	6a3b      	ldr	r3, [r7, #32]
 801c8a4:	f003 0302 	and.w	r3, r3, #2
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d005      	beq.n	801c8b8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801c8ac:	683b      	ldr	r3, [r7, #0]
 801c8ae:	1d1a      	adds	r2, r3, #4
 801c8b0:	603a      	str	r2, [r7, #0]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	637b      	str	r3, [r7, #52]	@ 0x34
 801c8b6:	e004      	b.n	801c8c2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801c8b8:	683b      	ldr	r3, [r7, #0]
 801c8ba:	1d1a      	adds	r2, r3, #4
 801c8bc:	603a      	str	r2, [r7, #0]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c8c2:	68bb      	ldr	r3, [r7, #8]
 801c8c4:	1e5a      	subs	r2, r3, #1
 801c8c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	1acb      	subs	r3, r1, r3
 801c8cc:	1ad1      	subs	r1, r2, r3
 801c8ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c8d0:	6a3b      	ldr	r3, [r7, #32]
 801c8d2:	9302      	str	r3, [sp, #8]
 801c8d4:	69bb      	ldr	r3, [r7, #24]
 801c8d6:	9301      	str	r3, [sp, #4]
 801c8d8:	69fb      	ldr	r3, [r7, #28]
 801c8da:	9300      	str	r3, [sp, #0]
 801c8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c8e0:	f7ff fde0 	bl	801c4a4 <ee_number>
 801c8e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801c8e6:	e000      	b.n	801c8ea <tiny_vsnprintf_like+0x26a>
        continue;
 801c8e8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	3301      	adds	r3, #1
 801c8ee:	607b      	str	r3, [r7, #4]
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	781b      	ldrb	r3, [r3, #0]
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	f47f aed2 	bne.w	801c69e <tiny_vsnprintf_like+0x1e>
 801c8fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	1ad2      	subs	r2, r2, r3
 801c900:	68bb      	ldr	r3, [r7, #8]
 801c902:	3b01      	subs	r3, #1
 801c904:	429a      	cmp	r2, r3
 801c906:	f6bf aeca 	bge.w	801c69e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801c90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c90c:	2200      	movs	r2, #0
 801c90e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	1ad3      	subs	r3, r2, r3
}
 801c916:	4618      	mov	r0, r3
 801c918:	3738      	adds	r7, #56	@ 0x38
 801c91a:	46bd      	mov	sp, r7
 801c91c:	bd80      	pop	{r7, pc}
 801c91e:	bf00      	nop
 801c920:	0801e110 	.word	0x0801e110

0801c924 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c924:	b580      	push	{r7, lr}
 801c926:	b090      	sub	sp, #64	@ 0x40
 801c928:	af00      	add	r7, sp, #0
 801c92a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c92c:	4b73      	ldr	r3, [pc, #460]	@ (801cafc <UTIL_SEQ_Run+0x1d8>)
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801c932:	4b72      	ldr	r3, [pc, #456]	@ (801cafc <UTIL_SEQ_Run+0x1d8>)
 801c934:	681a      	ldr	r2, [r3, #0]
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	4013      	ands	r3, r2
 801c93a:	4a70      	ldr	r2, [pc, #448]	@ (801cafc <UTIL_SEQ_Run+0x1d8>)
 801c93c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c93e:	4b70      	ldr	r3, [pc, #448]	@ (801cb00 <UTIL_SEQ_Run+0x1dc>)
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c944:	4b6f      	ldr	r3, [pc, #444]	@ (801cb04 <UTIL_SEQ_Run+0x1e0>)
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c94a:	4b6f      	ldr	r3, [pc, #444]	@ (801cb08 <UTIL_SEQ_Run+0x1e4>)
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801c950:	4b6e      	ldr	r3, [pc, #440]	@ (801cb0c <UTIL_SEQ_Run+0x1e8>)
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c956:	e08d      	b.n	801ca74 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c958:	2300      	movs	r3, #0
 801c95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c95c:	e002      	b.n	801c964 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c95e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c960:	3301      	adds	r3, #1
 801c962:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c964:	4a6a      	ldr	r2, [pc, #424]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801c966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c968:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c96e:	401a      	ands	r2, r3
 801c970:	4b62      	ldr	r3, [pc, #392]	@ (801cafc <UTIL_SEQ_Run+0x1d8>)
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	4013      	ands	r3, r2
 801c976:	2b00      	cmp	r3, #0
 801c978:	d0f1      	beq.n	801c95e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c97a:	4a65      	ldr	r2, [pc, #404]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801c97c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c97e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c984:	401a      	ands	r2, r3
 801c986:	4b5d      	ldr	r3, [pc, #372]	@ (801cafc <UTIL_SEQ_Run+0x1d8>)
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	4013      	ands	r3, r2
 801c98c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c98e:	4a60      	ldr	r2, [pc, #384]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801c990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c992:	00db      	lsls	r3, r3, #3
 801c994:	4413      	add	r3, r2
 801c996:	685a      	ldr	r2, [r3, #4]
 801c998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c99a:	4013      	ands	r3, r2
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d106      	bne.n	801c9ae <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c9a0:	4a5b      	ldr	r2, [pc, #364]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801c9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c9a4:	00db      	lsls	r3, r3, #3
 801c9a6:	4413      	add	r3, r2
 801c9a8:	f04f 32ff 	mov.w	r2, #4294967295
 801c9ac:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c9ae:	4a58      	ldr	r2, [pc, #352]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801c9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c9b2:	00db      	lsls	r3, r3, #3
 801c9b4:	4413      	add	r3, r2
 801c9b6:	685a      	ldr	r2, [r3, #4]
 801c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9ba:	4013      	ands	r3, r2
 801c9bc:	4618      	mov	r0, r3
 801c9be:	f000 f907 	bl	801cbd0 <SEQ_BitPosition>
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	461a      	mov	r2, r3
 801c9c6:	4b53      	ldr	r3, [pc, #332]	@ (801cb14 <UTIL_SEQ_Run+0x1f0>)
 801c9c8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c9ca:	4a51      	ldr	r2, [pc, #324]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801c9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c9ce:	00db      	lsls	r3, r3, #3
 801c9d0:	4413      	add	r3, r2
 801c9d2:	685a      	ldr	r2, [r3, #4]
 801c9d4:	4b4f      	ldr	r3, [pc, #316]	@ (801cb14 <UTIL_SEQ_Run+0x1f0>)
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	2101      	movs	r1, #1
 801c9da:	fa01 f303 	lsl.w	r3, r1, r3
 801c9de:	43db      	mvns	r3, r3
 801c9e0:	401a      	ands	r2, r3
 801c9e2:	494b      	ldr	r1, [pc, #300]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801c9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c9e6:	00db      	lsls	r3, r3, #3
 801c9e8:	440b      	add	r3, r1
 801c9ea:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c9ec:	f3ef 8310 	mrs	r3, PRIMASK
 801c9f0:	61bb      	str	r3, [r7, #24]
  return(result);
 801c9f2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c9f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9f6:	b672      	cpsid	i
}
 801c9f8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c9fa:	4b46      	ldr	r3, [pc, #280]	@ (801cb14 <UTIL_SEQ_Run+0x1f0>)
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	2201      	movs	r2, #1
 801ca00:	fa02 f303 	lsl.w	r3, r2, r3
 801ca04:	43da      	mvns	r2, r3
 801ca06:	4b3e      	ldr	r3, [pc, #248]	@ (801cb00 <UTIL_SEQ_Run+0x1dc>)
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	4013      	ands	r3, r2
 801ca0c:	4a3c      	ldr	r2, [pc, #240]	@ (801cb00 <UTIL_SEQ_Run+0x1dc>)
 801ca0e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ca10:	2301      	movs	r3, #1
 801ca12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ca14:	e013      	b.n	801ca3e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ca16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ca18:	3b01      	subs	r3, #1
 801ca1a:	4a3d      	ldr	r2, [pc, #244]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801ca1c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ca20:	4b3c      	ldr	r3, [pc, #240]	@ (801cb14 <UTIL_SEQ_Run+0x1f0>)
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	2201      	movs	r2, #1
 801ca26:	fa02 f303 	lsl.w	r3, r2, r3
 801ca2a:	43da      	mvns	r2, r3
 801ca2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ca2e:	3b01      	subs	r3, #1
 801ca30:	400a      	ands	r2, r1
 801ca32:	4937      	ldr	r1, [pc, #220]	@ (801cb10 <UTIL_SEQ_Run+0x1ec>)
 801ca34:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ca38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ca3a:	3b01      	subs	r3, #1
 801ca3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ca3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d1e8      	bne.n	801ca16 <UTIL_SEQ_Run+0xf2>
 801ca44:	6a3b      	ldr	r3, [r7, #32]
 801ca46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca48:	697b      	ldr	r3, [r7, #20]
 801ca4a:	f383 8810 	msr	PRIMASK, r3
}
 801ca4e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ca50:	4b30      	ldr	r3, [pc, #192]	@ (801cb14 <UTIL_SEQ_Run+0x1f0>)
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	4a30      	ldr	r2, [pc, #192]	@ (801cb18 <UTIL_SEQ_Run+0x1f4>)
 801ca56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ca5a:	4798      	blx	r3

    local_taskset = TaskSet;
 801ca5c:	4b28      	ldr	r3, [pc, #160]	@ (801cb00 <UTIL_SEQ_Run+0x1dc>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801ca62:	4b28      	ldr	r3, [pc, #160]	@ (801cb04 <UTIL_SEQ_Run+0x1e0>)
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801ca68:	4b27      	ldr	r3, [pc, #156]	@ (801cb08 <UTIL_SEQ_Run+0x1e4>)
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801ca6e:	4b27      	ldr	r3, [pc, #156]	@ (801cb0c <UTIL_SEQ_Run+0x1e8>)
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ca74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ca76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca78:	401a      	ands	r2, r3
 801ca7a:	4b20      	ldr	r3, [pc, #128]	@ (801cafc <UTIL_SEQ_Run+0x1d8>)
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	4013      	ands	r3, r2
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d005      	beq.n	801ca90 <UTIL_SEQ_Run+0x16c>
 801ca84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ca86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca88:	4013      	ands	r3, r2
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	f43f af64 	beq.w	801c958 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ca90:	4b20      	ldr	r3, [pc, #128]	@ (801cb14 <UTIL_SEQ_Run+0x1f0>)
 801ca92:	f04f 32ff 	mov.w	r2, #4294967295
 801ca96:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ca98:	f000 f88e 	bl	801cbb8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca9c:	f3ef 8310 	mrs	r3, PRIMASK
 801caa0:	613b      	str	r3, [r7, #16]
  return(result);
 801caa2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801caa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801caa6:	b672      	cpsid	i
}
 801caa8:	bf00      	nop
  local_taskset = TaskSet;
 801caaa:	4b15      	ldr	r3, [pc, #84]	@ (801cb00 <UTIL_SEQ_Run+0x1dc>)
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801cab0:	4b14      	ldr	r3, [pc, #80]	@ (801cb04 <UTIL_SEQ_Run+0x1e0>)
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801cab6:	4b14      	ldr	r3, [pc, #80]	@ (801cb08 <UTIL_SEQ_Run+0x1e4>)
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801cabc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cac0:	401a      	ands	r2, r3
 801cac2:	4b0e      	ldr	r3, [pc, #56]	@ (801cafc <UTIL_SEQ_Run+0x1d8>)
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	4013      	ands	r3, r2
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d107      	bne.n	801cadc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801cacc:	4b0f      	ldr	r3, [pc, #60]	@ (801cb0c <UTIL_SEQ_Run+0x1e8>)
 801cace:	681a      	ldr	r2, [r3, #0]
 801cad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cad2:	4013      	ands	r3, r2
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d101      	bne.n	801cadc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801cad8:	f7e5 fdce 	bl	8002678 <UTIL_SEQ_Idle>
 801cadc:	69fb      	ldr	r3, [r7, #28]
 801cade:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	f383 8810 	msr	PRIMASK, r3
}
 801cae6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801cae8:	f000 f86c 	bl	801cbc4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801caec:	4a03      	ldr	r2, [pc, #12]	@ (801cafc <UTIL_SEQ_Run+0x1d8>)
 801caee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801caf0:	6013      	str	r3, [r2, #0]

  return;
 801caf2:	bf00      	nop
}
 801caf4:	3740      	adds	r7, #64	@ 0x40
 801caf6:	46bd      	mov	sp, r7
 801caf8:	bd80      	pop	{r7, pc}
 801cafa:	bf00      	nop
 801cafc:	20000148 	.word	0x20000148
 801cb00:	20001c1c 	.word	0x20001c1c
 801cb04:	20001c20 	.word	0x20001c20
 801cb08:	20000144 	.word	0x20000144
 801cb0c:	20001c24 	.word	0x20001c24
 801cb10:	20001c3c 	.word	0x20001c3c
 801cb14:	20001c28 	.word	0x20001c28
 801cb18:	20001c2c 	.word	0x20001c2c

0801cb1c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	b088      	sub	sp, #32
 801cb20:	af00      	add	r7, sp, #0
 801cb22:	60f8      	str	r0, [r7, #12]
 801cb24:	60b9      	str	r1, [r7, #8]
 801cb26:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb28:	f3ef 8310 	mrs	r3, PRIMASK
 801cb2c:	617b      	str	r3, [r7, #20]
  return(result);
 801cb2e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801cb30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb32:	b672      	cpsid	i
}
 801cb34:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801cb36:	68f8      	ldr	r0, [r7, #12]
 801cb38:	f000 f84a 	bl	801cbd0 <SEQ_BitPosition>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	4619      	mov	r1, r3
 801cb40:	4a06      	ldr	r2, [pc, #24]	@ (801cb5c <UTIL_SEQ_RegTask+0x40>)
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801cb48:	69fb      	ldr	r3, [r7, #28]
 801cb4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb4c:	69bb      	ldr	r3, [r7, #24]
 801cb4e:	f383 8810 	msr	PRIMASK, r3
}
 801cb52:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801cb54:	bf00      	nop
}
 801cb56:	3720      	adds	r7, #32
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	bd80      	pop	{r7, pc}
 801cb5c:	20001c2c 	.word	0x20001c2c

0801cb60 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801cb60:	b480      	push	{r7}
 801cb62:	b087      	sub	sp, #28
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	6078      	str	r0, [r7, #4]
 801cb68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb6a:	f3ef 8310 	mrs	r3, PRIMASK
 801cb6e:	60fb      	str	r3, [r7, #12]
  return(result);
 801cb70:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cb72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb74:	b672      	cpsid	i
}
 801cb76:	bf00      	nop

  TaskSet |= TaskId_bm;
 801cb78:	4b0d      	ldr	r3, [pc, #52]	@ (801cbb0 <UTIL_SEQ_SetTask+0x50>)
 801cb7a:	681a      	ldr	r2, [r3, #0]
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	4313      	orrs	r3, r2
 801cb80:	4a0b      	ldr	r2, [pc, #44]	@ (801cbb0 <UTIL_SEQ_SetTask+0x50>)
 801cb82:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801cb84:	4a0b      	ldr	r2, [pc, #44]	@ (801cbb4 <UTIL_SEQ_SetTask+0x54>)
 801cb86:	683b      	ldr	r3, [r7, #0]
 801cb88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	431a      	orrs	r2, r3
 801cb90:	4908      	ldr	r1, [pc, #32]	@ (801cbb4 <UTIL_SEQ_SetTask+0x54>)
 801cb92:	683b      	ldr	r3, [r7, #0]
 801cb94:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801cb98:	697b      	ldr	r3, [r7, #20]
 801cb9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb9c:	693b      	ldr	r3, [r7, #16]
 801cb9e:	f383 8810 	msr	PRIMASK, r3
}
 801cba2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801cba4:	bf00      	nop
}
 801cba6:	371c      	adds	r7, #28
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	bc80      	pop	{r7}
 801cbac:	4770      	bx	lr
 801cbae:	bf00      	nop
 801cbb0:	20001c1c 	.word	0x20001c1c
 801cbb4:	20001c3c 	.word	0x20001c3c

0801cbb8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801cbb8:	b480      	push	{r7}
 801cbba:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cbbc:	bf00      	nop
}
 801cbbe:	46bd      	mov	sp, r7
 801cbc0:	bc80      	pop	{r7}
 801cbc2:	4770      	bx	lr

0801cbc4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801cbc4:	b480      	push	{r7}
 801cbc6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cbc8:	bf00      	nop
}
 801cbca:	46bd      	mov	sp, r7
 801cbcc:	bc80      	pop	{r7}
 801cbce:	4770      	bx	lr

0801cbd0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801cbd0:	b480      	push	{r7}
 801cbd2:	b085      	sub	sp, #20
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801cbd8:	2300      	movs	r3, #0
 801cbda:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801cbe0:	68bb      	ldr	r3, [r7, #8]
 801cbe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cbe6:	d204      	bcs.n	801cbf2 <SEQ_BitPosition+0x22>
 801cbe8:	2310      	movs	r3, #16
 801cbea:	73fb      	strb	r3, [r7, #15]
 801cbec:	68bb      	ldr	r3, [r7, #8]
 801cbee:	041b      	lsls	r3, r3, #16
 801cbf0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801cbf2:	68bb      	ldr	r3, [r7, #8]
 801cbf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cbf8:	d205      	bcs.n	801cc06 <SEQ_BitPosition+0x36>
 801cbfa:	7bfb      	ldrb	r3, [r7, #15]
 801cbfc:	3308      	adds	r3, #8
 801cbfe:	73fb      	strb	r3, [r7, #15]
 801cc00:	68bb      	ldr	r3, [r7, #8]
 801cc02:	021b      	lsls	r3, r3, #8
 801cc04:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801cc06:	68bb      	ldr	r3, [r7, #8]
 801cc08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cc0c:	d205      	bcs.n	801cc1a <SEQ_BitPosition+0x4a>
 801cc0e:	7bfb      	ldrb	r3, [r7, #15]
 801cc10:	3304      	adds	r3, #4
 801cc12:	73fb      	strb	r3, [r7, #15]
 801cc14:	68bb      	ldr	r3, [r7, #8]
 801cc16:	011b      	lsls	r3, r3, #4
 801cc18:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801cc1a:	68bb      	ldr	r3, [r7, #8]
 801cc1c:	0f1b      	lsrs	r3, r3, #28
 801cc1e:	4a07      	ldr	r2, [pc, #28]	@ (801cc3c <SEQ_BitPosition+0x6c>)
 801cc20:	5cd2      	ldrb	r2, [r2, r3]
 801cc22:	7bfb      	ldrb	r3, [r7, #15]
 801cc24:	4413      	add	r3, r2
 801cc26:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801cc28:	7bfb      	ldrb	r3, [r7, #15]
 801cc2a:	f1c3 031f 	rsb	r3, r3, #31
 801cc2e:	b2db      	uxtb	r3, r3
}
 801cc30:	4618      	mov	r0, r3
 801cc32:	3714      	adds	r7, #20
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bc80      	pop	{r7}
 801cc38:	4770      	bx	lr
 801cc3a:	bf00      	nop
 801cc3c:	0801e754 	.word	0x0801e754

0801cc40 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cc40:	b580      	push	{r7, lr}
 801cc42:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cc44:	4b04      	ldr	r3, [pc, #16]	@ (801cc58 <UTIL_TIMER_Init+0x18>)
 801cc46:	2200      	movs	r2, #0
 801cc48:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cc4a:	4b04      	ldr	r3, [pc, #16]	@ (801cc5c <UTIL_TIMER_Init+0x1c>)
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	4798      	blx	r3
 801cc50:	4603      	mov	r3, r0
}
 801cc52:	4618      	mov	r0, r3
 801cc54:	bd80      	pop	{r7, pc}
 801cc56:	bf00      	nop
 801cc58:	20001c44 	.word	0x20001c44
 801cc5c:	0801e1d0 	.word	0x0801e1d0

0801cc60 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b084      	sub	sp, #16
 801cc64:	af00      	add	r7, sp, #0
 801cc66:	60f8      	str	r0, [r7, #12]
 801cc68:	60b9      	str	r1, [r7, #8]
 801cc6a:	603b      	str	r3, [r7, #0]
 801cc6c:	4613      	mov	r3, r2
 801cc6e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d023      	beq.n	801ccbe <UTIL_TIMER_Create+0x5e>
 801cc76:	683b      	ldr	r3, [r7, #0]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d020      	beq.n	801ccbe <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	2200      	movs	r2, #0
 801cc80:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cc82:	4b11      	ldr	r3, [pc, #68]	@ (801ccc8 <UTIL_TIMER_Create+0x68>)
 801cc84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc86:	68b8      	ldr	r0, [r7, #8]
 801cc88:	4798      	blx	r3
 801cc8a:	4602      	mov	r2, r0
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	2200      	movs	r2, #0
 801cc94:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	2200      	movs	r2, #0
 801cc9a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	2200      	movs	r2, #0
 801cca0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	683a      	ldr	r2, [r7, #0]
 801cca6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cca8:	68fb      	ldr	r3, [r7, #12]
 801ccaa:	69ba      	ldr	r2, [r7, #24]
 801ccac:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	79fa      	ldrb	r2, [r7, #7]
 801ccb2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801ccb4:	68fb      	ldr	r3, [r7, #12]
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801ccba:	2300      	movs	r3, #0
 801ccbc:	e000      	b.n	801ccc0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801ccbe:	2301      	movs	r3, #1
  }
}
 801ccc0:	4618      	mov	r0, r3
 801ccc2:	3710      	adds	r7, #16
 801ccc4:	46bd      	mov	sp, r7
 801ccc6:	bd80      	pop	{r7, pc}
 801ccc8:	0801e1d0 	.word	0x0801e1d0

0801cccc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cccc:	b580      	push	{r7, lr}
 801ccce:	b08a      	sub	sp, #40	@ 0x28
 801ccd0:	af00      	add	r7, sp, #0
 801ccd2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d056      	beq.n	801cd8e <UTIL_TIMER_Start+0xc2>
 801cce0:	6878      	ldr	r0, [r7, #4]
 801cce2:	f000 f9a9 	bl	801d038 <TimerExists>
 801cce6:	4603      	mov	r3, r0
 801cce8:	f083 0301 	eor.w	r3, r3, #1
 801ccec:	b2db      	uxtb	r3, r3
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d04d      	beq.n	801cd8e <UTIL_TIMER_Start+0xc2>
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	7a5b      	ldrb	r3, [r3, #9]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d149      	bne.n	801cd8e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccfa:	f3ef 8310 	mrs	r3, PRIMASK
 801ccfe:	613b      	str	r3, [r7, #16]
  return(result);
 801cd00:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cd02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd04:	b672      	cpsid	i
}
 801cd06:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	685b      	ldr	r3, [r3, #4]
 801cd0c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801cd0e:	4b24      	ldr	r3, [pc, #144]	@ (801cda0 <UTIL_TIMER_Start+0xd4>)
 801cd10:	6a1b      	ldr	r3, [r3, #32]
 801cd12:	4798      	blx	r3
 801cd14:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801cd16:	6a3a      	ldr	r2, [r7, #32]
 801cd18:	69bb      	ldr	r3, [r7, #24]
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d201      	bcs.n	801cd22 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801cd1e:	69bb      	ldr	r3, [r7, #24]
 801cd20:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	6a3a      	ldr	r2, [r7, #32]
 801cd26:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	2200      	movs	r2, #0
 801cd2c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	2201      	movs	r2, #1
 801cd32:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2200      	movs	r2, #0
 801cd38:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cd3a:	4b1a      	ldr	r3, [pc, #104]	@ (801cda4 <UTIL_TIMER_Start+0xd8>)
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d106      	bne.n	801cd50 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cd42:	4b17      	ldr	r3, [pc, #92]	@ (801cda0 <UTIL_TIMER_Start+0xd4>)
 801cd44:	691b      	ldr	r3, [r3, #16]
 801cd46:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801cd48:	6878      	ldr	r0, [r7, #4]
 801cd4a:	f000 f9eb 	bl	801d124 <TimerInsertNewHeadTimer>
 801cd4e:	e017      	b.n	801cd80 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801cd50:	4b13      	ldr	r3, [pc, #76]	@ (801cda0 <UTIL_TIMER_Start+0xd4>)
 801cd52:	699b      	ldr	r3, [r3, #24]
 801cd54:	4798      	blx	r3
 801cd56:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	681a      	ldr	r2, [r3, #0]
 801cd5c:	697b      	ldr	r3, [r7, #20]
 801cd5e:	441a      	add	r2, r3
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	681a      	ldr	r2, [r3, #0]
 801cd68:	4b0e      	ldr	r3, [pc, #56]	@ (801cda4 <UTIL_TIMER_Start+0xd8>)
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	429a      	cmp	r2, r3
 801cd70:	d203      	bcs.n	801cd7a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801cd72:	6878      	ldr	r0, [r7, #4]
 801cd74:	f000 f9d6 	bl	801d124 <TimerInsertNewHeadTimer>
 801cd78:	e002      	b.n	801cd80 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cd7a:	6878      	ldr	r0, [r7, #4]
 801cd7c:	f000 f9a2 	bl	801d0c4 <TimerInsertTimer>
 801cd80:	69fb      	ldr	r3, [r7, #28]
 801cd82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd84:	68fb      	ldr	r3, [r7, #12]
 801cd86:	f383 8810 	msr	PRIMASK, r3
}
 801cd8a:	bf00      	nop
  {
 801cd8c:	e002      	b.n	801cd94 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cd8e:	2301      	movs	r3, #1
 801cd90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801cd94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801cd98:	4618      	mov	r0, r3
 801cd9a:	3728      	adds	r7, #40	@ 0x28
 801cd9c:	46bd      	mov	sp, r7
 801cd9e:	bd80      	pop	{r7, pc}
 801cda0:	0801e1d0 	.word	0x0801e1d0
 801cda4:	20001c44 	.word	0x20001c44

0801cda8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b088      	sub	sp, #32
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d05b      	beq.n	801ce72 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdba:	f3ef 8310 	mrs	r3, PRIMASK
 801cdbe:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdc0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cdc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdc4:	b672      	cpsid	i
}
 801cdc6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cdc8:	4b2d      	ldr	r3, [pc, #180]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cdce:	4b2c      	ldr	r3, [pc, #176]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	2201      	movs	r2, #1
 801cdd8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cdda:	4b29      	ldr	r3, [pc, #164]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d041      	beq.n	801ce66 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	2200      	movs	r2, #0
 801cde6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801cde8:	4b25      	ldr	r3, [pc, #148]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	687a      	ldr	r2, [r7, #4]
 801cdee:	429a      	cmp	r2, r3
 801cdf0:	d134      	bne.n	801ce5c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801cdf2:	4b23      	ldr	r3, [pc, #140]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801cdfa:	4b21      	ldr	r3, [pc, #132]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	695b      	ldr	r3, [r3, #20]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d00a      	beq.n	801ce1a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801ce04:	4b1e      	ldr	r3, [pc, #120]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	695b      	ldr	r3, [r3, #20]
 801ce0a:	4a1d      	ldr	r2, [pc, #116]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801ce0c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801ce0e:	4b1c      	ldr	r3, [pc, #112]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	4618      	mov	r0, r3
 801ce14:	f000 f92c 	bl	801d070 <TimerSetTimeout>
 801ce18:	e023      	b.n	801ce62 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ce1a:	4b1a      	ldr	r3, [pc, #104]	@ (801ce84 <UTIL_TIMER_Stop+0xdc>)
 801ce1c:	68db      	ldr	r3, [r3, #12]
 801ce1e:	4798      	blx	r3
            TimerListHead = NULL;
 801ce20:	4b17      	ldr	r3, [pc, #92]	@ (801ce80 <UTIL_TIMER_Stop+0xd8>)
 801ce22:	2200      	movs	r2, #0
 801ce24:	601a      	str	r2, [r3, #0]
 801ce26:	e01c      	b.n	801ce62 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ce28:	697a      	ldr	r2, [r7, #20]
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	429a      	cmp	r2, r3
 801ce2e:	d110      	bne.n	801ce52 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ce30:	697b      	ldr	r3, [r7, #20]
 801ce32:	695b      	ldr	r3, [r3, #20]
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d006      	beq.n	801ce46 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ce38:	697b      	ldr	r3, [r7, #20]
 801ce3a:	695b      	ldr	r3, [r3, #20]
 801ce3c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ce3e:	69bb      	ldr	r3, [r7, #24]
 801ce40:	697a      	ldr	r2, [r7, #20]
 801ce42:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ce44:	e00d      	b.n	801ce62 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ce46:	2300      	movs	r3, #0
 801ce48:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ce4a:	69bb      	ldr	r3, [r7, #24]
 801ce4c:	697a      	ldr	r2, [r7, #20]
 801ce4e:	615a      	str	r2, [r3, #20]
            break;
 801ce50:	e007      	b.n	801ce62 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ce52:	697b      	ldr	r3, [r7, #20]
 801ce54:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ce56:	697b      	ldr	r3, [r7, #20]
 801ce58:	695b      	ldr	r3, [r3, #20]
 801ce5a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ce5c:	697b      	ldr	r3, [r7, #20]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d1e2      	bne.n	801ce28 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ce62:	2300      	movs	r3, #0
 801ce64:	77fb      	strb	r3, [r7, #31]
 801ce66:	693b      	ldr	r3, [r7, #16]
 801ce68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce6a:	68bb      	ldr	r3, [r7, #8]
 801ce6c:	f383 8810 	msr	PRIMASK, r3
}
 801ce70:	e001      	b.n	801ce76 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801ce72:	2301      	movs	r3, #1
 801ce74:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801ce76:	7ffb      	ldrb	r3, [r7, #31]
}
 801ce78:	4618      	mov	r0, r3
 801ce7a:	3720      	adds	r7, #32
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	bd80      	pop	{r7, pc}
 801ce80:	20001c44 	.word	0x20001c44
 801ce84:	0801e1d0 	.word	0x0801e1d0

0801ce88 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b084      	sub	sp, #16
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
 801ce90:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ce92:	2300      	movs	r3, #0
 801ce94:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d102      	bne.n	801cea2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ce9c:	2301      	movs	r3, #1
 801ce9e:	73fb      	strb	r3, [r7, #15]
 801cea0:	e014      	b.n	801cecc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801cea2:	4b0d      	ldr	r3, [pc, #52]	@ (801ced8 <UTIL_TIMER_SetPeriod+0x50>)
 801cea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cea6:	6838      	ldr	r0, [r7, #0]
 801cea8:	4798      	blx	r3
 801ceaa:	4602      	mov	r2, r0
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801ceb0:	6878      	ldr	r0, [r7, #4]
 801ceb2:	f000 f8c1 	bl	801d038 <TimerExists>
 801ceb6:	4603      	mov	r3, r0
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d007      	beq.n	801cecc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801cebc:	6878      	ldr	r0, [r7, #4]
 801cebe:	f7ff ff73 	bl	801cda8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801cec2:	6878      	ldr	r0, [r7, #4]
 801cec4:	f7ff ff02 	bl	801cccc <UTIL_TIMER_Start>
 801cec8:	4603      	mov	r3, r0
 801ceca:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801cecc:	7bfb      	ldrb	r3, [r7, #15]
}
 801cece:	4618      	mov	r0, r3
 801ced0:	3710      	adds	r7, #16
 801ced2:	46bd      	mov	sp, r7
 801ced4:	bd80      	pop	{r7, pc}
 801ced6:	bf00      	nop
 801ced8:	0801e1d0 	.word	0x0801e1d0

0801cedc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cedc:	b590      	push	{r4, r7, lr}
 801cede:	b089      	sub	sp, #36	@ 0x24
 801cee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cee2:	f3ef 8310 	mrs	r3, PRIMASK
 801cee6:	60bb      	str	r3, [r7, #8]
  return(result);
 801cee8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ceea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ceec:	b672      	cpsid	i
}
 801ceee:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cef0:	4b38      	ldr	r3, [pc, #224]	@ (801cfd4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cef2:	695b      	ldr	r3, [r3, #20]
 801cef4:	4798      	blx	r3
 801cef6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cef8:	4b36      	ldr	r3, [pc, #216]	@ (801cfd4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cefa:	691b      	ldr	r3, [r3, #16]
 801cefc:	4798      	blx	r3
 801cefe:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cf00:	693a      	ldr	r2, [r7, #16]
 801cf02:	697b      	ldr	r3, [r7, #20]
 801cf04:	1ad3      	subs	r3, r2, r3
 801cf06:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801cf08:	4b33      	ldr	r3, [pc, #204]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d037      	beq.n	801cf80 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801cf10:	4b31      	ldr	r3, [pc, #196]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cf16:	69fb      	ldr	r3, [r7, #28]
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	68fa      	ldr	r2, [r7, #12]
 801cf1c:	429a      	cmp	r2, r3
 801cf1e:	d206      	bcs.n	801cf2e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801cf20:	69fb      	ldr	r3, [r7, #28]
 801cf22:	681a      	ldr	r2, [r3, #0]
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	1ad2      	subs	r2, r2, r3
 801cf28:	69fb      	ldr	r3, [r7, #28]
 801cf2a:	601a      	str	r2, [r3, #0]
 801cf2c:	e002      	b.n	801cf34 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801cf2e:	69fb      	ldr	r3, [r7, #28]
 801cf30:	2200      	movs	r2, #0
 801cf32:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801cf34:	69fb      	ldr	r3, [r7, #28]
 801cf36:	695b      	ldr	r3, [r3, #20]
 801cf38:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801cf3a:	69fb      	ldr	r3, [r7, #28]
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	d1ea      	bne.n	801cf16 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cf40:	e01e      	b.n	801cf80 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801cf42:	4b25      	ldr	r3, [pc, #148]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cf48:	4b23      	ldr	r3, [pc, #140]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	695b      	ldr	r3, [r3, #20]
 801cf4e:	4a22      	ldr	r2, [pc, #136]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf50:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801cf52:	69fb      	ldr	r3, [r7, #28]
 801cf54:	2200      	movs	r2, #0
 801cf56:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801cf58:	69fb      	ldr	r3, [r7, #28]
 801cf5a:	2200      	movs	r2, #0
 801cf5c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cf5e:	69fb      	ldr	r3, [r7, #28]
 801cf60:	68db      	ldr	r3, [r3, #12]
 801cf62:	69fa      	ldr	r2, [r7, #28]
 801cf64:	6912      	ldr	r2, [r2, #16]
 801cf66:	4610      	mov	r0, r2
 801cf68:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801cf6a:	69fb      	ldr	r3, [r7, #28]
 801cf6c:	7adb      	ldrb	r3, [r3, #11]
 801cf6e:	2b01      	cmp	r3, #1
 801cf70:	d106      	bne.n	801cf80 <UTIL_TIMER_IRQ_Handler+0xa4>
 801cf72:	69fb      	ldr	r3, [r7, #28]
 801cf74:	7a9b      	ldrb	r3, [r3, #10]
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d102      	bne.n	801cf80 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801cf7a:	69f8      	ldr	r0, [r7, #28]
 801cf7c:	f7ff fea6 	bl	801cccc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cf80:	4b15      	ldr	r3, [pc, #84]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	d00d      	beq.n	801cfa4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801cf88:	4b13      	ldr	r3, [pc, #76]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d0d7      	beq.n	801cf42 <UTIL_TIMER_IRQ_Handler+0x66>
 801cf92:	4b11      	ldr	r3, [pc, #68]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	681c      	ldr	r4, [r3, #0]
 801cf98:	4b0e      	ldr	r3, [pc, #56]	@ (801cfd4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cf9a:	699b      	ldr	r3, [r3, #24]
 801cf9c:	4798      	blx	r3
 801cf9e:	4603      	mov	r3, r0
 801cfa0:	429c      	cmp	r4, r3
 801cfa2:	d3ce      	bcc.n	801cf42 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cfa4:	4b0c      	ldr	r3, [pc, #48]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d009      	beq.n	801cfc0 <UTIL_TIMER_IRQ_Handler+0xe4>
 801cfac:	4b0a      	ldr	r3, [pc, #40]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	7a1b      	ldrb	r3, [r3, #8]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d104      	bne.n	801cfc0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801cfb6:	4b08      	ldr	r3, [pc, #32]	@ (801cfd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	4618      	mov	r0, r3
 801cfbc:	f000 f858 	bl	801d070 <TimerSetTimeout>
 801cfc0:	69bb      	ldr	r3, [r7, #24]
 801cfc2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	f383 8810 	msr	PRIMASK, r3
}
 801cfca:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801cfcc:	bf00      	nop
 801cfce:	3724      	adds	r7, #36	@ 0x24
 801cfd0:	46bd      	mov	sp, r7
 801cfd2:	bd90      	pop	{r4, r7, pc}
 801cfd4:	0801e1d0 	.word	0x0801e1d0
 801cfd8:	20001c44 	.word	0x20001c44

0801cfdc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cfdc:	b580      	push	{r7, lr}
 801cfde:	b082      	sub	sp, #8
 801cfe0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cfe2:	4b06      	ldr	r3, [pc, #24]	@ (801cffc <UTIL_TIMER_GetCurrentTime+0x20>)
 801cfe4:	69db      	ldr	r3, [r3, #28]
 801cfe6:	4798      	blx	r3
 801cfe8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cfea:	4b04      	ldr	r3, [pc, #16]	@ (801cffc <UTIL_TIMER_GetCurrentTime+0x20>)
 801cfec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cfee:	6878      	ldr	r0, [r7, #4]
 801cff0:	4798      	blx	r3
 801cff2:	4603      	mov	r3, r0
}
 801cff4:	4618      	mov	r0, r3
 801cff6:	3708      	adds	r7, #8
 801cff8:	46bd      	mov	sp, r7
 801cffa:	bd80      	pop	{r7, pc}
 801cffc:	0801e1d0 	.word	0x0801e1d0

0801d000 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b084      	sub	sp, #16
 801d004:	af00      	add	r7, sp, #0
 801d006:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d008:	4b0a      	ldr	r3, [pc, #40]	@ (801d034 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d00a:	69db      	ldr	r3, [r3, #28]
 801d00c:	4798      	blx	r3
 801d00e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d010:	4b08      	ldr	r3, [pc, #32]	@ (801d034 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d014:	6878      	ldr	r0, [r7, #4]
 801d016:	4798      	blx	r3
 801d018:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d01a:	4b06      	ldr	r3, [pc, #24]	@ (801d034 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d01e:	68f9      	ldr	r1, [r7, #12]
 801d020:	68ba      	ldr	r2, [r7, #8]
 801d022:	1a8a      	subs	r2, r1, r2
 801d024:	4610      	mov	r0, r2
 801d026:	4798      	blx	r3
 801d028:	4603      	mov	r3, r0
}
 801d02a:	4618      	mov	r0, r3
 801d02c:	3710      	adds	r7, #16
 801d02e:	46bd      	mov	sp, r7
 801d030:	bd80      	pop	{r7, pc}
 801d032:	bf00      	nop
 801d034:	0801e1d0 	.word	0x0801e1d0

0801d038 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d038:	b480      	push	{r7}
 801d03a:	b085      	sub	sp, #20
 801d03c:	af00      	add	r7, sp, #0
 801d03e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d040:	4b0a      	ldr	r3, [pc, #40]	@ (801d06c <TimerExists+0x34>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d046:	e008      	b.n	801d05a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d048:	68fa      	ldr	r2, [r7, #12]
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	429a      	cmp	r2, r3
 801d04e:	d101      	bne.n	801d054 <TimerExists+0x1c>
    {
      return true;
 801d050:	2301      	movs	r3, #1
 801d052:	e006      	b.n	801d062 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d054:	68fb      	ldr	r3, [r7, #12]
 801d056:	695b      	ldr	r3, [r3, #20]
 801d058:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d1f3      	bne.n	801d048 <TimerExists+0x10>
  }
  return false;
 801d060:	2300      	movs	r3, #0
}
 801d062:	4618      	mov	r0, r3
 801d064:	3714      	adds	r7, #20
 801d066:	46bd      	mov	sp, r7
 801d068:	bc80      	pop	{r7}
 801d06a:	4770      	bx	lr
 801d06c:	20001c44 	.word	0x20001c44

0801d070 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d070:	b590      	push	{r4, r7, lr}
 801d072:	b085      	sub	sp, #20
 801d074:	af00      	add	r7, sp, #0
 801d076:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d078:	4b11      	ldr	r3, [pc, #68]	@ (801d0c0 <TimerSetTimeout+0x50>)
 801d07a:	6a1b      	ldr	r3, [r3, #32]
 801d07c:	4798      	blx	r3
 801d07e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	2201      	movs	r2, #1
 801d084:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	681c      	ldr	r4, [r3, #0]
 801d08a:	4b0d      	ldr	r3, [pc, #52]	@ (801d0c0 <TimerSetTimeout+0x50>)
 801d08c:	699b      	ldr	r3, [r3, #24]
 801d08e:	4798      	blx	r3
 801d090:	4602      	mov	r2, r0
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	4413      	add	r3, r2
 801d096:	429c      	cmp	r4, r3
 801d098:	d207      	bcs.n	801d0aa <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d09a:	4b09      	ldr	r3, [pc, #36]	@ (801d0c0 <TimerSetTimeout+0x50>)
 801d09c:	699b      	ldr	r3, [r3, #24]
 801d09e:	4798      	blx	r3
 801d0a0:	4602      	mov	r2, r0
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	441a      	add	r2, r3
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d0aa:	4b05      	ldr	r3, [pc, #20]	@ (801d0c0 <TimerSetTimeout+0x50>)
 801d0ac:	689b      	ldr	r3, [r3, #8]
 801d0ae:	687a      	ldr	r2, [r7, #4]
 801d0b0:	6812      	ldr	r2, [r2, #0]
 801d0b2:	4610      	mov	r0, r2
 801d0b4:	4798      	blx	r3
}
 801d0b6:	bf00      	nop
 801d0b8:	3714      	adds	r7, #20
 801d0ba:	46bd      	mov	sp, r7
 801d0bc:	bd90      	pop	{r4, r7, pc}
 801d0be:	bf00      	nop
 801d0c0:	0801e1d0 	.word	0x0801e1d0

0801d0c4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d0c4:	b480      	push	{r7}
 801d0c6:	b085      	sub	sp, #20
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d0cc:	4b14      	ldr	r3, [pc, #80]	@ (801d120 <TimerInsertTimer+0x5c>)
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d0d2:	4b13      	ldr	r3, [pc, #76]	@ (801d120 <TimerInsertTimer+0x5c>)
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	695b      	ldr	r3, [r3, #20]
 801d0d8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d0da:	e012      	b.n	801d102 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	681a      	ldr	r2, [r3, #0]
 801d0e0:	68bb      	ldr	r3, [r7, #8]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	429a      	cmp	r2, r3
 801d0e6:	d905      	bls.n	801d0f4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d0e8:	68bb      	ldr	r3, [r7, #8]
 801d0ea:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d0ec:	68bb      	ldr	r3, [r7, #8]
 801d0ee:	695b      	ldr	r3, [r3, #20]
 801d0f0:	60bb      	str	r3, [r7, #8]
 801d0f2:	e006      	b.n	801d102 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	687a      	ldr	r2, [r7, #4]
 801d0f8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	68ba      	ldr	r2, [r7, #8]
 801d0fe:	615a      	str	r2, [r3, #20]
        return;
 801d100:	e009      	b.n	801d116 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	695b      	ldr	r3, [r3, #20]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d1e8      	bne.n	801d0dc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	687a      	ldr	r2, [r7, #4]
 801d10e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	2200      	movs	r2, #0
 801d114:	615a      	str	r2, [r3, #20]
}
 801d116:	3714      	adds	r7, #20
 801d118:	46bd      	mov	sp, r7
 801d11a:	bc80      	pop	{r7}
 801d11c:	4770      	bx	lr
 801d11e:	bf00      	nop
 801d120:	20001c44 	.word	0x20001c44

0801d124 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d124:	b580      	push	{r7, lr}
 801d126:	b084      	sub	sp, #16
 801d128:	af00      	add	r7, sp, #0
 801d12a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d12c:	4b0b      	ldr	r3, [pc, #44]	@ (801d15c <TimerInsertNewHeadTimer+0x38>)
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d132:	68fb      	ldr	r3, [r7, #12]
 801d134:	2b00      	cmp	r3, #0
 801d136:	d002      	beq.n	801d13e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	2200      	movs	r2, #0
 801d13c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	68fa      	ldr	r2, [r7, #12]
 801d142:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d144:	4a05      	ldr	r2, [pc, #20]	@ (801d15c <TimerInsertNewHeadTimer+0x38>)
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d14a:	4b04      	ldr	r3, [pc, #16]	@ (801d15c <TimerInsertNewHeadTimer+0x38>)
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	4618      	mov	r0, r3
 801d150:	f7ff ff8e 	bl	801d070 <TimerSetTimeout>
}
 801d154:	bf00      	nop
 801d156:	3710      	adds	r7, #16
 801d158:	46bd      	mov	sp, r7
 801d15a:	bd80      	pop	{r7, pc}
 801d15c:	20001c44 	.word	0x20001c44

0801d160 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d160:	b580      	push	{r7, lr}
 801d162:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d164:	2218      	movs	r2, #24
 801d166:	2100      	movs	r1, #0
 801d168:	4807      	ldr	r0, [pc, #28]	@ (801d188 <UTIL_ADV_TRACE_Init+0x28>)
 801d16a:	f7ff f862 	bl	801c232 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d16e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801d172:	2100      	movs	r1, #0
 801d174:	4805      	ldr	r0, [pc, #20]	@ (801d18c <UTIL_ADV_TRACE_Init+0x2c>)
 801d176:	f7ff f85c 	bl	801c232 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d17a:	4b05      	ldr	r3, [pc, #20]	@ (801d190 <UTIL_ADV_TRACE_Init+0x30>)
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	4805      	ldr	r0, [pc, #20]	@ (801d194 <UTIL_ADV_TRACE_Init+0x34>)
 801d180:	4798      	blx	r3
 801d182:	4603      	mov	r3, r0
}
 801d184:	4618      	mov	r0, r3
 801d186:	bd80      	pop	{r7, pc}
 801d188:	20001c48 	.word	0x20001c48
 801d18c:	20001c60 	.word	0x20001c60
 801d190:	0801e210 	.word	0x0801e210
 801d194:	0801d401 	.word	0x0801d401

0801d198 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d198:	b480      	push	{r7}
 801d19a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d19c:	4b06      	ldr	r3, [pc, #24]	@ (801d1b8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d19e:	8a5a      	ldrh	r2, [r3, #18]
 801d1a0:	4b05      	ldr	r3, [pc, #20]	@ (801d1b8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d1a2:	8a1b      	ldrh	r3, [r3, #16]
 801d1a4:	429a      	cmp	r2, r3
 801d1a6:	d101      	bne.n	801d1ac <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d1a8:	2301      	movs	r3, #1
 801d1aa:	e000      	b.n	801d1ae <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d1ac:	2300      	movs	r3, #0
}
 801d1ae:	4618      	mov	r0, r3
 801d1b0:	46bd      	mov	sp, r7
 801d1b2:	bc80      	pop	{r7}
 801d1b4:	4770      	bx	lr
 801d1b6:	bf00      	nop
 801d1b8:	20001c48 	.word	0x20001c48

0801d1bc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d1bc:	b408      	push	{r3}
 801d1be:	b580      	push	{r7, lr}
 801d1c0:	b08d      	sub	sp, #52	@ 0x34
 801d1c2:	af00      	add	r7, sp, #0
 801d1c4:	60f8      	str	r0, [r7, #12]
 801d1c6:	60b9      	str	r1, [r7, #8]
 801d1c8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d1ca:	2300      	movs	r3, #0
 801d1cc:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d1ce:	2300      	movs	r3, #0
 801d1d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d1d2:	4b37      	ldr	r3, [pc, #220]	@ (801d2b0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1d4:	7a1b      	ldrb	r3, [r3, #8]
 801d1d6:	461a      	mov	r2, r3
 801d1d8:	68fb      	ldr	r3, [r7, #12]
 801d1da:	4293      	cmp	r3, r2
 801d1dc:	d902      	bls.n	801d1e4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d1de:	f06f 0304 	mvn.w	r3, #4
 801d1e2:	e05e      	b.n	801d2a2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d1e4:	4b32      	ldr	r3, [pc, #200]	@ (801d2b0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1e6:	68da      	ldr	r2, [r3, #12]
 801d1e8:	68bb      	ldr	r3, [r7, #8]
 801d1ea:	4013      	ands	r3, r2
 801d1ec:	68ba      	ldr	r2, [r7, #8]
 801d1ee:	429a      	cmp	r2, r3
 801d1f0:	d002      	beq.n	801d1f8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d1f2:	f06f 0305 	mvn.w	r3, #5
 801d1f6:	e054      	b.n	801d2a2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d1f8:	4b2d      	ldr	r3, [pc, #180]	@ (801d2b0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1fa:	685b      	ldr	r3, [r3, #4]
 801d1fc:	2b00      	cmp	r3, #0
 801d1fe:	d00a      	beq.n	801d216 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	2b00      	cmp	r3, #0
 801d204:	d007      	beq.n	801d216 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d206:	4b2a      	ldr	r3, [pc, #168]	@ (801d2b0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d208:	685b      	ldr	r3, [r3, #4]
 801d20a:	f107 0116 	add.w	r1, r7, #22
 801d20e:	f107 0218 	add.w	r2, r7, #24
 801d212:	4610      	mov	r0, r2
 801d214:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d216:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801d21a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d21e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d220:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801d224:	4823      	ldr	r0, [pc, #140]	@ (801d2b4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d226:	f7ff fa2b 	bl	801c680 <tiny_vsnprintf_like>
 801d22a:	4603      	mov	r3, r0
 801d22c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801d22e:	f000 f9f1 	bl	801d614 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d232:	8afa      	ldrh	r2, [r7, #22]
 801d234:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801d236:	4413      	add	r3, r2
 801d238:	b29b      	uxth	r3, r3
 801d23a:	f107 0214 	add.w	r2, r7, #20
 801d23e:	4611      	mov	r1, r2
 801d240:	4618      	mov	r0, r3
 801d242:	f000 f969 	bl	801d518 <TRACE_AllocateBufer>
 801d246:	4603      	mov	r3, r0
 801d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d24c:	d025      	beq.n	801d29a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d24e:	2300      	movs	r3, #0
 801d250:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801d252:	e00e      	b.n	801d272 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d254:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d256:	8aba      	ldrh	r2, [r7, #20]
 801d258:	3330      	adds	r3, #48	@ 0x30
 801d25a:	443b      	add	r3, r7
 801d25c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d260:	4b15      	ldr	r3, [pc, #84]	@ (801d2b8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d262:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d264:	8abb      	ldrh	r3, [r7, #20]
 801d266:	3301      	adds	r3, #1
 801d268:	b29b      	uxth	r3, r3
 801d26a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d26c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d26e:	3301      	adds	r3, #1
 801d270:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801d272:	8afb      	ldrh	r3, [r7, #22]
 801d274:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d276:	429a      	cmp	r2, r3
 801d278:	d3ec      	bcc.n	801d254 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d27a:	8abb      	ldrh	r3, [r7, #20]
 801d27c:	461a      	mov	r2, r3
 801d27e:	4b0e      	ldr	r3, [pc, #56]	@ (801d2b8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d280:	18d0      	adds	r0, r2, r3
 801d282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d286:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801d28a:	f7ff f9f9 	bl	801c680 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d28e:	f000 f9df 	bl	801d650 <TRACE_UnLock>

    return TRACE_Send();
 801d292:	f000 f831 	bl	801d2f8 <TRACE_Send>
 801d296:	4603      	mov	r3, r0
 801d298:	e003      	b.n	801d2a2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d29a:	f000 f9d9 	bl	801d650 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d29e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d2a2:	4618      	mov	r0, r3
 801d2a4:	3734      	adds	r7, #52	@ 0x34
 801d2a6:	46bd      	mov	sp, r7
 801d2a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d2ac:	b001      	add	sp, #4
 801d2ae:	4770      	bx	lr
 801d2b0:	20001c48 	.word	0x20001c48
 801d2b4:	20002060 	.word	0x20002060
 801d2b8:	20001c60 	.word	0x20001c60

0801d2bc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d2bc:	b480      	push	{r7}
 801d2be:	b083      	sub	sp, #12
 801d2c0:	af00      	add	r7, sp, #0
 801d2c2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d2c4:	4a03      	ldr	r2, [pc, #12]	@ (801d2d4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	6053      	str	r3, [r2, #4]
}
 801d2ca:	bf00      	nop
 801d2cc:	370c      	adds	r7, #12
 801d2ce:	46bd      	mov	sp, r7
 801d2d0:	bc80      	pop	{r7}
 801d2d2:	4770      	bx	lr
 801d2d4:	20001c48 	.word	0x20001c48

0801d2d8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d2d8:	b480      	push	{r7}
 801d2da:	b083      	sub	sp, #12
 801d2dc:	af00      	add	r7, sp, #0
 801d2de:	4603      	mov	r3, r0
 801d2e0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d2e2:	4a04      	ldr	r2, [pc, #16]	@ (801d2f4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d2e4:	79fb      	ldrb	r3, [r7, #7]
 801d2e6:	7213      	strb	r3, [r2, #8]
}
 801d2e8:	bf00      	nop
 801d2ea:	370c      	adds	r7, #12
 801d2ec:	46bd      	mov	sp, r7
 801d2ee:	bc80      	pop	{r7}
 801d2f0:	4770      	bx	lr
 801d2f2:	bf00      	nop
 801d2f4:	20001c48 	.word	0x20001c48

0801d2f8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b088      	sub	sp, #32
 801d2fc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d2fe:	2300      	movs	r3, #0
 801d300:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d302:	2300      	movs	r3, #0
 801d304:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d306:	f3ef 8310 	mrs	r3, PRIMASK
 801d30a:	613b      	str	r3, [r7, #16]
  return(result);
 801d30c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d30e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d310:	b672      	cpsid	i
}
 801d312:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d314:	f000 f9ba 	bl	801d68c <TRACE_IsLocked>
 801d318:	4603      	mov	r3, r0
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d15d      	bne.n	801d3da <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d31e:	f000 f979 	bl	801d614 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d322:	4b34      	ldr	r3, [pc, #208]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d324:	8a1a      	ldrh	r2, [r3, #16]
 801d326:	4b33      	ldr	r3, [pc, #204]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d328:	8a5b      	ldrh	r3, [r3, #18]
 801d32a:	429a      	cmp	r2, r3
 801d32c:	d04d      	beq.n	801d3ca <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d32e:	4b31      	ldr	r3, [pc, #196]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d330:	789b      	ldrb	r3, [r3, #2]
 801d332:	2b01      	cmp	r3, #1
 801d334:	d117      	bne.n	801d366 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d336:	4b2f      	ldr	r3, [pc, #188]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d338:	881a      	ldrh	r2, [r3, #0]
 801d33a:	4b2e      	ldr	r3, [pc, #184]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d33c:	8a1b      	ldrh	r3, [r3, #16]
 801d33e:	1ad3      	subs	r3, r2, r3
 801d340:	b29a      	uxth	r2, r3
 801d342:	4b2c      	ldr	r3, [pc, #176]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d344:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d346:	4b2b      	ldr	r3, [pc, #172]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d348:	2202      	movs	r2, #2
 801d34a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d34c:	4b29      	ldr	r3, [pc, #164]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d34e:	2200      	movs	r2, #0
 801d350:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d352:	4b28      	ldr	r3, [pc, #160]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d354:	8a9b      	ldrh	r3, [r3, #20]
 801d356:	2b00      	cmp	r3, #0
 801d358:	d105      	bne.n	801d366 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d35a:	4b26      	ldr	r3, [pc, #152]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d35c:	2200      	movs	r2, #0
 801d35e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d360:	4b24      	ldr	r3, [pc, #144]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d362:	2200      	movs	r2, #0
 801d364:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d366:	4b23      	ldr	r3, [pc, #140]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d368:	789b      	ldrb	r3, [r3, #2]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d115      	bne.n	801d39a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d36e:	4b21      	ldr	r3, [pc, #132]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d370:	8a5a      	ldrh	r2, [r3, #18]
 801d372:	4b20      	ldr	r3, [pc, #128]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d374:	8a1b      	ldrh	r3, [r3, #16]
 801d376:	429a      	cmp	r2, r3
 801d378:	d908      	bls.n	801d38c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d37a:	4b1e      	ldr	r3, [pc, #120]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d37c:	8a5a      	ldrh	r2, [r3, #18]
 801d37e:	4b1d      	ldr	r3, [pc, #116]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d380:	8a1b      	ldrh	r3, [r3, #16]
 801d382:	1ad3      	subs	r3, r2, r3
 801d384:	b29a      	uxth	r2, r3
 801d386:	4b1b      	ldr	r3, [pc, #108]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d388:	829a      	strh	r2, [r3, #20]
 801d38a:	e006      	b.n	801d39a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d38c:	4b19      	ldr	r3, [pc, #100]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d38e:	8a1b      	ldrh	r3, [r3, #16]
 801d390:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d394:	b29a      	uxth	r2, r3
 801d396:	4b17      	ldr	r3, [pc, #92]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d398:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d39a:	4b16      	ldr	r3, [pc, #88]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d39c:	8a1b      	ldrh	r3, [r3, #16]
 801d39e:	461a      	mov	r2, r3
 801d3a0:	4b15      	ldr	r3, [pc, #84]	@ (801d3f8 <TRACE_Send+0x100>)
 801d3a2:	4413      	add	r3, r2
 801d3a4:	61bb      	str	r3, [r7, #24]
 801d3a6:	697b      	ldr	r3, [r7, #20]
 801d3a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	f383 8810 	msr	PRIMASK, r3
}
 801d3b0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d3b2:	f7e5 fa67 	bl	8002884 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d3b6:	4b11      	ldr	r3, [pc, #68]	@ (801d3fc <TRACE_Send+0x104>)
 801d3b8:	68db      	ldr	r3, [r3, #12]
 801d3ba:	4a0e      	ldr	r2, [pc, #56]	@ (801d3f4 <TRACE_Send+0xfc>)
 801d3bc:	8a92      	ldrh	r2, [r2, #20]
 801d3be:	4611      	mov	r1, r2
 801d3c0:	69b8      	ldr	r0, [r7, #24]
 801d3c2:	4798      	blx	r3
 801d3c4:	4603      	mov	r3, r0
 801d3c6:	77fb      	strb	r3, [r7, #31]
 801d3c8:	e00d      	b.n	801d3e6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d3ca:	f000 f941 	bl	801d650 <TRACE_UnLock>
 801d3ce:	697b      	ldr	r3, [r7, #20]
 801d3d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3d2:	68bb      	ldr	r3, [r7, #8]
 801d3d4:	f383 8810 	msr	PRIMASK, r3
}
 801d3d8:	e005      	b.n	801d3e6 <TRACE_Send+0xee>
 801d3da:	697b      	ldr	r3, [r7, #20]
 801d3dc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	f383 8810 	msr	PRIMASK, r3
}
 801d3e4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d3e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	3720      	adds	r7, #32
 801d3ee:	46bd      	mov	sp, r7
 801d3f0:	bd80      	pop	{r7, pc}
 801d3f2:	bf00      	nop
 801d3f4:	20001c48 	.word	0x20001c48
 801d3f8:	20001c60 	.word	0x20001c60
 801d3fc:	0801e210 	.word	0x0801e210

0801d400 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d400:	b580      	push	{r7, lr}
 801d402:	b088      	sub	sp, #32
 801d404:	af00      	add	r7, sp, #0
 801d406:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d408:	2300      	movs	r3, #0
 801d40a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d40c:	f3ef 8310 	mrs	r3, PRIMASK
 801d410:	617b      	str	r3, [r7, #20]
  return(result);
 801d412:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d416:	b672      	cpsid	i
}
 801d418:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d41a:	4b3c      	ldr	r3, [pc, #240]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d41c:	789b      	ldrb	r3, [r3, #2]
 801d41e:	2b02      	cmp	r3, #2
 801d420:	d106      	bne.n	801d430 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d422:	4b3a      	ldr	r3, [pc, #232]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d424:	2200      	movs	r2, #0
 801d426:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d428:	4b38      	ldr	r3, [pc, #224]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d42a:	2200      	movs	r2, #0
 801d42c:	821a      	strh	r2, [r3, #16]
 801d42e:	e00a      	b.n	801d446 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d430:	4b36      	ldr	r3, [pc, #216]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d432:	8a1a      	ldrh	r2, [r3, #16]
 801d434:	4b35      	ldr	r3, [pc, #212]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d436:	8a9b      	ldrh	r3, [r3, #20]
 801d438:	4413      	add	r3, r2
 801d43a:	b29b      	uxth	r3, r3
 801d43c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d440:	b29a      	uxth	r2, r3
 801d442:	4b32      	ldr	r3, [pc, #200]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d444:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d446:	4b31      	ldr	r3, [pc, #196]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d448:	8a1a      	ldrh	r2, [r3, #16]
 801d44a:	4b30      	ldr	r3, [pc, #192]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d44c:	8a5b      	ldrh	r3, [r3, #18]
 801d44e:	429a      	cmp	r2, r3
 801d450:	d04d      	beq.n	801d4ee <TRACE_TxCpltCallback+0xee>
 801d452:	4b2e      	ldr	r3, [pc, #184]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d454:	8adb      	ldrh	r3, [r3, #22]
 801d456:	2b01      	cmp	r3, #1
 801d458:	d149      	bne.n	801d4ee <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d45a:	4b2c      	ldr	r3, [pc, #176]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d45c:	789b      	ldrb	r3, [r3, #2]
 801d45e:	2b01      	cmp	r3, #1
 801d460:	d117      	bne.n	801d492 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d462:	4b2a      	ldr	r3, [pc, #168]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d464:	881a      	ldrh	r2, [r3, #0]
 801d466:	4b29      	ldr	r3, [pc, #164]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d468:	8a1b      	ldrh	r3, [r3, #16]
 801d46a:	1ad3      	subs	r3, r2, r3
 801d46c:	b29a      	uxth	r2, r3
 801d46e:	4b27      	ldr	r3, [pc, #156]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d470:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d472:	4b26      	ldr	r3, [pc, #152]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d474:	2202      	movs	r2, #2
 801d476:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d478:	4b24      	ldr	r3, [pc, #144]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d47a:	2200      	movs	r2, #0
 801d47c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d47e:	4b23      	ldr	r3, [pc, #140]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d480:	8a9b      	ldrh	r3, [r3, #20]
 801d482:	2b00      	cmp	r3, #0
 801d484:	d105      	bne.n	801d492 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d486:	4b21      	ldr	r3, [pc, #132]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d488:	2200      	movs	r2, #0
 801d48a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d48c:	4b1f      	ldr	r3, [pc, #124]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d48e:	2200      	movs	r2, #0
 801d490:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d492:	4b1e      	ldr	r3, [pc, #120]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d494:	789b      	ldrb	r3, [r3, #2]
 801d496:	2b00      	cmp	r3, #0
 801d498:	d115      	bne.n	801d4c6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d49a:	4b1c      	ldr	r3, [pc, #112]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d49c:	8a5a      	ldrh	r2, [r3, #18]
 801d49e:	4b1b      	ldr	r3, [pc, #108]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d4a0:	8a1b      	ldrh	r3, [r3, #16]
 801d4a2:	429a      	cmp	r2, r3
 801d4a4:	d908      	bls.n	801d4b8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d4a6:	4b19      	ldr	r3, [pc, #100]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d4a8:	8a5a      	ldrh	r2, [r3, #18]
 801d4aa:	4b18      	ldr	r3, [pc, #96]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d4ac:	8a1b      	ldrh	r3, [r3, #16]
 801d4ae:	1ad3      	subs	r3, r2, r3
 801d4b0:	b29a      	uxth	r2, r3
 801d4b2:	4b16      	ldr	r3, [pc, #88]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d4b4:	829a      	strh	r2, [r3, #20]
 801d4b6:	e006      	b.n	801d4c6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d4b8:	4b14      	ldr	r3, [pc, #80]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d4ba:	8a1b      	ldrh	r3, [r3, #16]
 801d4bc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d4c0:	b29a      	uxth	r2, r3
 801d4c2:	4b12      	ldr	r3, [pc, #72]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d4c4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d4c6:	4b11      	ldr	r3, [pc, #68]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d4c8:	8a1b      	ldrh	r3, [r3, #16]
 801d4ca:	461a      	mov	r2, r3
 801d4cc:	4b10      	ldr	r3, [pc, #64]	@ (801d510 <TRACE_TxCpltCallback+0x110>)
 801d4ce:	4413      	add	r3, r2
 801d4d0:	61fb      	str	r3, [r7, #28]
 801d4d2:	69bb      	ldr	r3, [r7, #24]
 801d4d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4d6:	693b      	ldr	r3, [r7, #16]
 801d4d8:	f383 8810 	msr	PRIMASK, r3
}
 801d4dc:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d4de:	4b0d      	ldr	r3, [pc, #52]	@ (801d514 <TRACE_TxCpltCallback+0x114>)
 801d4e0:	68db      	ldr	r3, [r3, #12]
 801d4e2:	4a0a      	ldr	r2, [pc, #40]	@ (801d50c <TRACE_TxCpltCallback+0x10c>)
 801d4e4:	8a92      	ldrh	r2, [r2, #20]
 801d4e6:	4611      	mov	r1, r2
 801d4e8:	69f8      	ldr	r0, [r7, #28]
 801d4ea:	4798      	blx	r3
 801d4ec:	e00a      	b.n	801d504 <TRACE_TxCpltCallback+0x104>
 801d4ee:	69bb      	ldr	r3, [r7, #24]
 801d4f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	f383 8810 	msr	PRIMASK, r3
}
 801d4f8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d4fa:	f7e5 f9cb 	bl	8002894 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d4fe:	f000 f8a7 	bl	801d650 <TRACE_UnLock>
  }
}
 801d502:	bf00      	nop
 801d504:	bf00      	nop
 801d506:	3720      	adds	r7, #32
 801d508:	46bd      	mov	sp, r7
 801d50a:	bd80      	pop	{r7, pc}
 801d50c:	20001c48 	.word	0x20001c48
 801d510:	20001c60 	.word	0x20001c60
 801d514:	0801e210 	.word	0x0801e210

0801d518 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d518:	b480      	push	{r7}
 801d51a:	b087      	sub	sp, #28
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	4603      	mov	r3, r0
 801d520:	6039      	str	r1, [r7, #0]
 801d522:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d528:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d52a:	f3ef 8310 	mrs	r3, PRIMASK
 801d52e:	60fb      	str	r3, [r7, #12]
  return(result);
 801d530:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d534:	b672      	cpsid	i
}
 801d536:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d538:	4b35      	ldr	r3, [pc, #212]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d53a:	8a5a      	ldrh	r2, [r3, #18]
 801d53c:	4b34      	ldr	r3, [pc, #208]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d53e:	8a1b      	ldrh	r3, [r3, #16]
 801d540:	429a      	cmp	r2, r3
 801d542:	d11b      	bne.n	801d57c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d544:	4b32      	ldr	r3, [pc, #200]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d546:	8a5b      	ldrh	r3, [r3, #18]
 801d548:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d54c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d54e:	88fa      	ldrh	r2, [r7, #6]
 801d550:	8afb      	ldrh	r3, [r7, #22]
 801d552:	429a      	cmp	r2, r3
 801d554:	d33a      	bcc.n	801d5cc <TRACE_AllocateBufer+0xb4>
 801d556:	4b2e      	ldr	r3, [pc, #184]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d558:	8a1b      	ldrh	r3, [r3, #16]
 801d55a:	88fa      	ldrh	r2, [r7, #6]
 801d55c:	429a      	cmp	r2, r3
 801d55e:	d235      	bcs.n	801d5cc <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d560:	4b2b      	ldr	r3, [pc, #172]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d562:	2201      	movs	r2, #1
 801d564:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d566:	4b2a      	ldr	r3, [pc, #168]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d568:	8a5a      	ldrh	r2, [r3, #18]
 801d56a:	4b29      	ldr	r3, [pc, #164]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d56c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d56e:	4b28      	ldr	r3, [pc, #160]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d570:	8a1b      	ldrh	r3, [r3, #16]
 801d572:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d574:	4b26      	ldr	r3, [pc, #152]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d576:	2200      	movs	r2, #0
 801d578:	825a      	strh	r2, [r3, #18]
 801d57a:	e027      	b.n	801d5cc <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d57c:	4b24      	ldr	r3, [pc, #144]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d57e:	8a5a      	ldrh	r2, [r3, #18]
 801d580:	4b23      	ldr	r3, [pc, #140]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d582:	8a1b      	ldrh	r3, [r3, #16]
 801d584:	429a      	cmp	r2, r3
 801d586:	d91b      	bls.n	801d5c0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d588:	4b21      	ldr	r3, [pc, #132]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d58a:	8a5b      	ldrh	r3, [r3, #18]
 801d58c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d590:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d592:	88fa      	ldrh	r2, [r7, #6]
 801d594:	8afb      	ldrh	r3, [r7, #22]
 801d596:	429a      	cmp	r2, r3
 801d598:	d318      	bcc.n	801d5cc <TRACE_AllocateBufer+0xb4>
 801d59a:	4b1d      	ldr	r3, [pc, #116]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d59c:	8a1b      	ldrh	r3, [r3, #16]
 801d59e:	88fa      	ldrh	r2, [r7, #6]
 801d5a0:	429a      	cmp	r2, r3
 801d5a2:	d213      	bcs.n	801d5cc <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d5a4:	4b1a      	ldr	r3, [pc, #104]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5a6:	2201      	movs	r2, #1
 801d5a8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d5aa:	4b19      	ldr	r3, [pc, #100]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5ac:	8a5a      	ldrh	r2, [r3, #18]
 801d5ae:	4b18      	ldr	r3, [pc, #96]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5b0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d5b2:	4b17      	ldr	r3, [pc, #92]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5b4:	8a1b      	ldrh	r3, [r3, #16]
 801d5b6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d5b8:	4b15      	ldr	r3, [pc, #84]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5ba:	2200      	movs	r2, #0
 801d5bc:	825a      	strh	r2, [r3, #18]
 801d5be:	e005      	b.n	801d5cc <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d5c0:	4b13      	ldr	r3, [pc, #76]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5c2:	8a1a      	ldrh	r2, [r3, #16]
 801d5c4:	4b12      	ldr	r3, [pc, #72]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5c6:	8a5b      	ldrh	r3, [r3, #18]
 801d5c8:	1ad3      	subs	r3, r2, r3
 801d5ca:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d5cc:	8afa      	ldrh	r2, [r7, #22]
 801d5ce:	88fb      	ldrh	r3, [r7, #6]
 801d5d0:	429a      	cmp	r2, r3
 801d5d2:	d90f      	bls.n	801d5f4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d5d4:	4b0e      	ldr	r3, [pc, #56]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5d6:	8a5a      	ldrh	r2, [r3, #18]
 801d5d8:	683b      	ldr	r3, [r7, #0]
 801d5da:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d5dc:	4b0c      	ldr	r3, [pc, #48]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5de:	8a5a      	ldrh	r2, [r3, #18]
 801d5e0:	88fb      	ldrh	r3, [r7, #6]
 801d5e2:	4413      	add	r3, r2
 801d5e4:	b29b      	uxth	r3, r3
 801d5e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d5ea:	b29a      	uxth	r2, r3
 801d5ec:	4b08      	ldr	r3, [pc, #32]	@ (801d610 <TRACE_AllocateBufer+0xf8>)
 801d5ee:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	82bb      	strh	r3, [r7, #20]
 801d5f4:	693b      	ldr	r3, [r7, #16]
 801d5f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5f8:	68bb      	ldr	r3, [r7, #8]
 801d5fa:	f383 8810 	msr	PRIMASK, r3
}
 801d5fe:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d600:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d604:	4618      	mov	r0, r3
 801d606:	371c      	adds	r7, #28
 801d608:	46bd      	mov	sp, r7
 801d60a:	bc80      	pop	{r7}
 801d60c:	4770      	bx	lr
 801d60e:	bf00      	nop
 801d610:	20001c48 	.word	0x20001c48

0801d614 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d614:	b480      	push	{r7}
 801d616:	b085      	sub	sp, #20
 801d618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d61a:	f3ef 8310 	mrs	r3, PRIMASK
 801d61e:	607b      	str	r3, [r7, #4]
  return(result);
 801d620:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d622:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d624:	b672      	cpsid	i
}
 801d626:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d628:	4b08      	ldr	r3, [pc, #32]	@ (801d64c <TRACE_Lock+0x38>)
 801d62a:	8adb      	ldrh	r3, [r3, #22]
 801d62c:	3301      	adds	r3, #1
 801d62e:	b29a      	uxth	r2, r3
 801d630:	4b06      	ldr	r3, [pc, #24]	@ (801d64c <TRACE_Lock+0x38>)
 801d632:	82da      	strh	r2, [r3, #22]
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d638:	68bb      	ldr	r3, [r7, #8]
 801d63a:	f383 8810 	msr	PRIMASK, r3
}
 801d63e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d640:	bf00      	nop
 801d642:	3714      	adds	r7, #20
 801d644:	46bd      	mov	sp, r7
 801d646:	bc80      	pop	{r7}
 801d648:	4770      	bx	lr
 801d64a:	bf00      	nop
 801d64c:	20001c48 	.word	0x20001c48

0801d650 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d650:	b480      	push	{r7}
 801d652:	b085      	sub	sp, #20
 801d654:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d656:	f3ef 8310 	mrs	r3, PRIMASK
 801d65a:	607b      	str	r3, [r7, #4]
  return(result);
 801d65c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d65e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d660:	b672      	cpsid	i
}
 801d662:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d664:	4b08      	ldr	r3, [pc, #32]	@ (801d688 <TRACE_UnLock+0x38>)
 801d666:	8adb      	ldrh	r3, [r3, #22]
 801d668:	3b01      	subs	r3, #1
 801d66a:	b29a      	uxth	r2, r3
 801d66c:	4b06      	ldr	r3, [pc, #24]	@ (801d688 <TRACE_UnLock+0x38>)
 801d66e:	82da      	strh	r2, [r3, #22]
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d674:	68bb      	ldr	r3, [r7, #8]
 801d676:	f383 8810 	msr	PRIMASK, r3
}
 801d67a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d67c:	bf00      	nop
 801d67e:	3714      	adds	r7, #20
 801d680:	46bd      	mov	sp, r7
 801d682:	bc80      	pop	{r7}
 801d684:	4770      	bx	lr
 801d686:	bf00      	nop
 801d688:	20001c48 	.word	0x20001c48

0801d68c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d68c:	b480      	push	{r7}
 801d68e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d690:	4b05      	ldr	r3, [pc, #20]	@ (801d6a8 <TRACE_IsLocked+0x1c>)
 801d692:	8adb      	ldrh	r3, [r3, #22]
 801d694:	2b00      	cmp	r3, #0
 801d696:	bf14      	ite	ne
 801d698:	2301      	movne	r3, #1
 801d69a:	2300      	moveq	r3, #0
 801d69c:	b2db      	uxtb	r3, r3
}
 801d69e:	4618      	mov	r0, r3
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	bc80      	pop	{r7}
 801d6a4:	4770      	bx	lr
 801d6a6:	bf00      	nop
 801d6a8:	20001c48 	.word	0x20001c48

0801d6ac <memset>:
 801d6ac:	4402      	add	r2, r0
 801d6ae:	4603      	mov	r3, r0
 801d6b0:	4293      	cmp	r3, r2
 801d6b2:	d100      	bne.n	801d6b6 <memset+0xa>
 801d6b4:	4770      	bx	lr
 801d6b6:	f803 1b01 	strb.w	r1, [r3], #1
 801d6ba:	e7f9      	b.n	801d6b0 <memset+0x4>

0801d6bc <__libc_init_array>:
 801d6bc:	b570      	push	{r4, r5, r6, lr}
 801d6be:	4d0d      	ldr	r5, [pc, #52]	@ (801d6f4 <__libc_init_array+0x38>)
 801d6c0:	4c0d      	ldr	r4, [pc, #52]	@ (801d6f8 <__libc_init_array+0x3c>)
 801d6c2:	1b64      	subs	r4, r4, r5
 801d6c4:	10a4      	asrs	r4, r4, #2
 801d6c6:	2600      	movs	r6, #0
 801d6c8:	42a6      	cmp	r6, r4
 801d6ca:	d109      	bne.n	801d6e0 <__libc_init_array+0x24>
 801d6cc:	4d0b      	ldr	r5, [pc, #44]	@ (801d6fc <__libc_init_array+0x40>)
 801d6ce:	4c0c      	ldr	r4, [pc, #48]	@ (801d700 <__libc_init_array+0x44>)
 801d6d0:	f000 f89a 	bl	801d808 <_init>
 801d6d4:	1b64      	subs	r4, r4, r5
 801d6d6:	10a4      	asrs	r4, r4, #2
 801d6d8:	2600      	movs	r6, #0
 801d6da:	42a6      	cmp	r6, r4
 801d6dc:	d105      	bne.n	801d6ea <__libc_init_array+0x2e>
 801d6de:	bd70      	pop	{r4, r5, r6, pc}
 801d6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6e4:	4798      	blx	r3
 801d6e6:	3601      	adds	r6, #1
 801d6e8:	e7ee      	b.n	801d6c8 <__libc_init_array+0xc>
 801d6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6ee:	4798      	blx	r3
 801d6f0:	3601      	adds	r6, #1
 801d6f2:	e7f2      	b.n	801d6da <__libc_init_array+0x1e>
 801d6f4:	0801e844 	.word	0x0801e844
 801d6f8:	0801e844 	.word	0x0801e844
 801d6fc:	0801e844 	.word	0x0801e844
 801d700:	0801e848 	.word	0x0801e848
 801d704:	00000000 	.word	0x00000000

0801d708 <floor>:
 801d708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d70c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d710:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801d714:	2e13      	cmp	r6, #19
 801d716:	4602      	mov	r2, r0
 801d718:	460b      	mov	r3, r1
 801d71a:	460c      	mov	r4, r1
 801d71c:	4605      	mov	r5, r0
 801d71e:	4680      	mov	r8, r0
 801d720:	dc35      	bgt.n	801d78e <floor+0x86>
 801d722:	2e00      	cmp	r6, #0
 801d724:	da17      	bge.n	801d756 <floor+0x4e>
 801d726:	a334      	add	r3, pc, #208	@ (adr r3, 801d7f8 <floor+0xf0>)
 801d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d72c:	f7e2 fd32 	bl	8000194 <__adddf3>
 801d730:	2200      	movs	r2, #0
 801d732:	2300      	movs	r3, #0
 801d734:	f7e3 f974 	bl	8000a20 <__aeabi_dcmpgt>
 801d738:	b150      	cbz	r0, 801d750 <floor+0x48>
 801d73a:	2c00      	cmp	r4, #0
 801d73c:	da57      	bge.n	801d7ee <floor+0xe6>
 801d73e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801d742:	432c      	orrs	r4, r5
 801d744:	2500      	movs	r5, #0
 801d746:	42ac      	cmp	r4, r5
 801d748:	4c2d      	ldr	r4, [pc, #180]	@ (801d800 <floor+0xf8>)
 801d74a:	bf08      	it	eq
 801d74c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801d750:	4623      	mov	r3, r4
 801d752:	462a      	mov	r2, r5
 801d754:	e024      	b.n	801d7a0 <floor+0x98>
 801d756:	4f2b      	ldr	r7, [pc, #172]	@ (801d804 <floor+0xfc>)
 801d758:	4137      	asrs	r7, r6
 801d75a:	ea01 0c07 	and.w	ip, r1, r7
 801d75e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801d762:	d01d      	beq.n	801d7a0 <floor+0x98>
 801d764:	a324      	add	r3, pc, #144	@ (adr r3, 801d7f8 <floor+0xf0>)
 801d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d76a:	f7e2 fd13 	bl	8000194 <__adddf3>
 801d76e:	2200      	movs	r2, #0
 801d770:	2300      	movs	r3, #0
 801d772:	f7e3 f955 	bl	8000a20 <__aeabi_dcmpgt>
 801d776:	2800      	cmp	r0, #0
 801d778:	d0ea      	beq.n	801d750 <floor+0x48>
 801d77a:	2c00      	cmp	r4, #0
 801d77c:	bfbe      	ittt	lt
 801d77e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801d782:	4133      	asrlt	r3, r6
 801d784:	18e4      	addlt	r4, r4, r3
 801d786:	ea24 0407 	bic.w	r4, r4, r7
 801d78a:	2500      	movs	r5, #0
 801d78c:	e7e0      	b.n	801d750 <floor+0x48>
 801d78e:	2e33      	cmp	r6, #51	@ 0x33
 801d790:	dd0a      	ble.n	801d7a8 <floor+0xa0>
 801d792:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d796:	d103      	bne.n	801d7a0 <floor+0x98>
 801d798:	f7e2 fcfc 	bl	8000194 <__adddf3>
 801d79c:	4602      	mov	r2, r0
 801d79e:	460b      	mov	r3, r1
 801d7a0:	4610      	mov	r0, r2
 801d7a2:	4619      	mov	r1, r3
 801d7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7a8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801d7ac:	f04f 3cff 	mov.w	ip, #4294967295
 801d7b0:	fa2c f707 	lsr.w	r7, ip, r7
 801d7b4:	4207      	tst	r7, r0
 801d7b6:	d0f3      	beq.n	801d7a0 <floor+0x98>
 801d7b8:	a30f      	add	r3, pc, #60	@ (adr r3, 801d7f8 <floor+0xf0>)
 801d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7be:	f7e2 fce9 	bl	8000194 <__adddf3>
 801d7c2:	2200      	movs	r2, #0
 801d7c4:	2300      	movs	r3, #0
 801d7c6:	f7e3 f92b 	bl	8000a20 <__aeabi_dcmpgt>
 801d7ca:	2800      	cmp	r0, #0
 801d7cc:	d0c0      	beq.n	801d750 <floor+0x48>
 801d7ce:	2c00      	cmp	r4, #0
 801d7d0:	da0a      	bge.n	801d7e8 <floor+0xe0>
 801d7d2:	2e14      	cmp	r6, #20
 801d7d4:	d101      	bne.n	801d7da <floor+0xd2>
 801d7d6:	3401      	adds	r4, #1
 801d7d8:	e006      	b.n	801d7e8 <floor+0xe0>
 801d7da:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d7de:	2301      	movs	r3, #1
 801d7e0:	40b3      	lsls	r3, r6
 801d7e2:	441d      	add	r5, r3
 801d7e4:	4545      	cmp	r5, r8
 801d7e6:	d3f6      	bcc.n	801d7d6 <floor+0xce>
 801d7e8:	ea25 0507 	bic.w	r5, r5, r7
 801d7ec:	e7b0      	b.n	801d750 <floor+0x48>
 801d7ee:	2500      	movs	r5, #0
 801d7f0:	462c      	mov	r4, r5
 801d7f2:	e7ad      	b.n	801d750 <floor+0x48>
 801d7f4:	f3af 8000 	nop.w
 801d7f8:	8800759c 	.word	0x8800759c
 801d7fc:	7e37e43c 	.word	0x7e37e43c
 801d800:	bff00000 	.word	0xbff00000
 801d804:	000fffff 	.word	0x000fffff

0801d808 <_init>:
 801d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d80a:	bf00      	nop
 801d80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d80e:	bc08      	pop	{r3}
 801d810:	469e      	mov	lr, r3
 801d812:	4770      	bx	lr

0801d814 <_fini>:
 801d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d816:	bf00      	nop
 801d818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d81a:	bc08      	pop	{r3}
 801d81c:	469e      	mov	lr, r3
 801d81e:	4770      	bx	lr
